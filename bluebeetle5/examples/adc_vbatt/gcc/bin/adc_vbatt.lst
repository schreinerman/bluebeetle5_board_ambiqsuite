
bin/adc_vbatt.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 f5 db 00 00 5d dc 00 00 61 cd 00 00     ........]...a...
    c010:	61 cd 00 00 61 cd 00 00 61 cd 00 00 00 00 00 00     a...a...a.......
	...
    c02c:	65 dc 00 00 65 dc 00 00 00 00 00 00 65 dc 00 00     e...e.......e...
    c03c:	65 dc 00 00 65 dc 00 00 65 dc 00 00 65 dc 00 00     e...e...e...e...
    c04c:	65 dc 00 00 65 dc 00 00 65 dc 00 00 65 dc 00 00     e...e...e...e...
    c05c:	65 dc 00 00 65 dc 00 00 65 dc 00 00 65 dc 00 00     e...e...e...e...
    c06c:	65 dc 00 00 65 dc 00 00 65 dc 00 00 65 dc 00 00     e...e...e...e...
    c07c:	65 dc 00 00 65 dc 00 00 65 dc 00 00 49 c5 00 00     e...e...e...I...
    c08c:	65 dc 00 00 65 dc 00 00 65 dc 00 00 65 dc 00 00     e...e...e...e...
    c09c:	65 dc 00 00 65 dc 00 00 65 dc 00 00 65 dc 00 00     e...e...e...e...
    c0ac:	65 dc 00 00 65 dc 00 00 65 dc 00 00 65 dc 00 00     e...e...e...e...
    c0bc:	65 dc 00 00                                         e...

0000c0c0 <__Patchable>:
	...

0000c100 <__aeabi_drsub>:
    c100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c104:	e002      	b.n	c10c <__adddf3>
    c106:	bf00      	nop

0000c108 <__aeabi_dsub>:
    c108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c10c <__adddf3>:
    c10c:	b530      	push	{r4, r5, lr}
    c10e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c112:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c116:	ea94 0f05 	teq	r4, r5
    c11a:	bf08      	it	eq
    c11c:	ea90 0f02 	teqeq	r0, r2
    c120:	bf1f      	itttt	ne
    c122:	ea54 0c00 	orrsne.w	ip, r4, r0
    c126:	ea55 0c02 	orrsne.w	ip, r5, r2
    c12a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c12e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c132:	f000 80e2 	beq.w	c2fa <__adddf3+0x1ee>
    c136:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c13a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c13e:	bfb8      	it	lt
    c140:	426d      	neglt	r5, r5
    c142:	dd0c      	ble.n	c15e <__adddf3+0x52>
    c144:	442c      	add	r4, r5
    c146:	ea80 0202 	eor.w	r2, r0, r2
    c14a:	ea81 0303 	eor.w	r3, r1, r3
    c14e:	ea82 0000 	eor.w	r0, r2, r0
    c152:	ea83 0101 	eor.w	r1, r3, r1
    c156:	ea80 0202 	eor.w	r2, r0, r2
    c15a:	ea81 0303 	eor.w	r3, r1, r3
    c15e:	2d36      	cmp	r5, #54	; 0x36
    c160:	bf88      	it	hi
    c162:	bd30      	pophi	{r4, r5, pc}
    c164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c168:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c16c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c174:	d002      	beq.n	c17c <__adddf3+0x70>
    c176:	4240      	negs	r0, r0
    c178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c17c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c180:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c188:	d002      	beq.n	c190 <__adddf3+0x84>
    c18a:	4252      	negs	r2, r2
    c18c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c190:	ea94 0f05 	teq	r4, r5
    c194:	f000 80a7 	beq.w	c2e6 <__adddf3+0x1da>
    c198:	f1a4 0401 	sub.w	r4, r4, #1
    c19c:	f1d5 0e20 	rsbs	lr, r5, #32
    c1a0:	db0d      	blt.n	c1be <__adddf3+0xb2>
    c1a2:	fa02 fc0e 	lsl.w	ip, r2, lr
    c1a6:	fa22 f205 	lsr.w	r2, r2, r5
    c1aa:	1880      	adds	r0, r0, r2
    c1ac:	f141 0100 	adc.w	r1, r1, #0
    c1b0:	fa03 f20e 	lsl.w	r2, r3, lr
    c1b4:	1880      	adds	r0, r0, r2
    c1b6:	fa43 f305 	asr.w	r3, r3, r5
    c1ba:	4159      	adcs	r1, r3
    c1bc:	e00e      	b.n	c1dc <__adddf3+0xd0>
    c1be:	f1a5 0520 	sub.w	r5, r5, #32
    c1c2:	f10e 0e20 	add.w	lr, lr, #32
    c1c6:	2a01      	cmp	r2, #1
    c1c8:	fa03 fc0e 	lsl.w	ip, r3, lr
    c1cc:	bf28      	it	cs
    c1ce:	f04c 0c02 	orrcs.w	ip, ip, #2
    c1d2:	fa43 f305 	asr.w	r3, r3, r5
    c1d6:	18c0      	adds	r0, r0, r3
    c1d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c1e0:	d507      	bpl.n	c1f2 <__adddf3+0xe6>
    c1e2:	f04f 0e00 	mov.w	lr, #0
    c1e6:	f1dc 0c00 	rsbs	ip, ip, #0
    c1ea:	eb7e 0000 	sbcs.w	r0, lr, r0
    c1ee:	eb6e 0101 	sbc.w	r1, lr, r1
    c1f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c1f6:	d31b      	bcc.n	c230 <__adddf3+0x124>
    c1f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c1fc:	d30c      	bcc.n	c218 <__adddf3+0x10c>
    c1fe:	0849      	lsrs	r1, r1, #1
    c200:	ea5f 0030 	movs.w	r0, r0, rrx
    c204:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c208:	f104 0401 	add.w	r4, r4, #1
    c20c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c214:	f080 809a 	bcs.w	c34c <__adddf3+0x240>
    c218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c21c:	bf08      	it	eq
    c21e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c222:	f150 0000 	adcs.w	r0, r0, #0
    c226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c22a:	ea41 0105 	orr.w	r1, r1, r5
    c22e:	bd30      	pop	{r4, r5, pc}
    c230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c234:	4140      	adcs	r0, r0
    c236:	eb41 0101 	adc.w	r1, r1, r1
    c23a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c23e:	f1a4 0401 	sub.w	r4, r4, #1
    c242:	d1e9      	bne.n	c218 <__adddf3+0x10c>
    c244:	f091 0f00 	teq	r1, #0
    c248:	bf04      	itt	eq
    c24a:	4601      	moveq	r1, r0
    c24c:	2000      	moveq	r0, #0
    c24e:	fab1 f381 	clz	r3, r1
    c252:	bf08      	it	eq
    c254:	3320      	addeq	r3, #32
    c256:	f1a3 030b 	sub.w	r3, r3, #11
    c25a:	f1b3 0220 	subs.w	r2, r3, #32
    c25e:	da0c      	bge.n	c27a <__adddf3+0x16e>
    c260:	320c      	adds	r2, #12
    c262:	dd08      	ble.n	c276 <__adddf3+0x16a>
    c264:	f102 0c14 	add.w	ip, r2, #20
    c268:	f1c2 020c 	rsb	r2, r2, #12
    c26c:	fa01 f00c 	lsl.w	r0, r1, ip
    c270:	fa21 f102 	lsr.w	r1, r1, r2
    c274:	e00c      	b.n	c290 <__adddf3+0x184>
    c276:	f102 0214 	add.w	r2, r2, #20
    c27a:	bfd8      	it	le
    c27c:	f1c2 0c20 	rsble	ip, r2, #32
    c280:	fa01 f102 	lsl.w	r1, r1, r2
    c284:	fa20 fc0c 	lsr.w	ip, r0, ip
    c288:	bfdc      	itt	le
    c28a:	ea41 010c 	orrle.w	r1, r1, ip
    c28e:	4090      	lslle	r0, r2
    c290:	1ae4      	subs	r4, r4, r3
    c292:	bfa2      	ittt	ge
    c294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c298:	4329      	orrge	r1, r5
    c29a:	bd30      	popge	{r4, r5, pc}
    c29c:	ea6f 0404 	mvn.w	r4, r4
    c2a0:	3c1f      	subs	r4, #31
    c2a2:	da1c      	bge.n	c2de <__adddf3+0x1d2>
    c2a4:	340c      	adds	r4, #12
    c2a6:	dc0e      	bgt.n	c2c6 <__adddf3+0x1ba>
    c2a8:	f104 0414 	add.w	r4, r4, #20
    c2ac:	f1c4 0220 	rsb	r2, r4, #32
    c2b0:	fa20 f004 	lsr.w	r0, r0, r4
    c2b4:	fa01 f302 	lsl.w	r3, r1, r2
    c2b8:	ea40 0003 	orr.w	r0, r0, r3
    c2bc:	fa21 f304 	lsr.w	r3, r1, r4
    c2c0:	ea45 0103 	orr.w	r1, r5, r3
    c2c4:	bd30      	pop	{r4, r5, pc}
    c2c6:	f1c4 040c 	rsb	r4, r4, #12
    c2ca:	f1c4 0220 	rsb	r2, r4, #32
    c2ce:	fa20 f002 	lsr.w	r0, r0, r2
    c2d2:	fa01 f304 	lsl.w	r3, r1, r4
    c2d6:	ea40 0003 	orr.w	r0, r0, r3
    c2da:	4629      	mov	r1, r5
    c2dc:	bd30      	pop	{r4, r5, pc}
    c2de:	fa21 f004 	lsr.w	r0, r1, r4
    c2e2:	4629      	mov	r1, r5
    c2e4:	bd30      	pop	{r4, r5, pc}
    c2e6:	f094 0f00 	teq	r4, #0
    c2ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c2ee:	bf06      	itte	eq
    c2f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c2f4:	3401      	addeq	r4, #1
    c2f6:	3d01      	subne	r5, #1
    c2f8:	e74e      	b.n	c198 <__adddf3+0x8c>
    c2fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c2fe:	bf18      	it	ne
    c300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c304:	d029      	beq.n	c35a <__adddf3+0x24e>
    c306:	ea94 0f05 	teq	r4, r5
    c30a:	bf08      	it	eq
    c30c:	ea90 0f02 	teqeq	r0, r2
    c310:	d005      	beq.n	c31e <__adddf3+0x212>
    c312:	ea54 0c00 	orrs.w	ip, r4, r0
    c316:	bf04      	itt	eq
    c318:	4619      	moveq	r1, r3
    c31a:	4610      	moveq	r0, r2
    c31c:	bd30      	pop	{r4, r5, pc}
    c31e:	ea91 0f03 	teq	r1, r3
    c322:	bf1e      	ittt	ne
    c324:	2100      	movne	r1, #0
    c326:	2000      	movne	r0, #0
    c328:	bd30      	popne	{r4, r5, pc}
    c32a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c32e:	d105      	bne.n	c33c <__adddf3+0x230>
    c330:	0040      	lsls	r0, r0, #1
    c332:	4149      	adcs	r1, r1
    c334:	bf28      	it	cs
    c336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c33a:	bd30      	pop	{r4, r5, pc}
    c33c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c340:	bf3c      	itt	cc
    c342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c346:	bd30      	popcc	{r4, r5, pc}
    c348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c34c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c354:	f04f 0000 	mov.w	r0, #0
    c358:	bd30      	pop	{r4, r5, pc}
    c35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c35e:	bf1a      	itte	ne
    c360:	4619      	movne	r1, r3
    c362:	4610      	movne	r0, r2
    c364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c368:	bf1c      	itt	ne
    c36a:	460b      	movne	r3, r1
    c36c:	4602      	movne	r2, r0
    c36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c372:	bf06      	itte	eq
    c374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c378:	ea91 0f03 	teqeq	r1, r3
    c37c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c380:	bd30      	pop	{r4, r5, pc}
    c382:	bf00      	nop

0000c384 <__aeabi_ui2d>:
    c384:	f090 0f00 	teq	r0, #0
    c388:	bf04      	itt	eq
    c38a:	2100      	moveq	r1, #0
    c38c:	4770      	bxeq	lr
    c38e:	b530      	push	{r4, r5, lr}
    c390:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c394:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c398:	f04f 0500 	mov.w	r5, #0
    c39c:	f04f 0100 	mov.w	r1, #0
    c3a0:	e750      	b.n	c244 <__adddf3+0x138>
    c3a2:	bf00      	nop

0000c3a4 <__aeabi_i2d>:
    c3a4:	f090 0f00 	teq	r0, #0
    c3a8:	bf04      	itt	eq
    c3aa:	2100      	moveq	r1, #0
    c3ac:	4770      	bxeq	lr
    c3ae:	b530      	push	{r4, r5, lr}
    c3b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c3b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c3b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c3bc:	bf48      	it	mi
    c3be:	4240      	negmi	r0, r0
    c3c0:	f04f 0100 	mov.w	r1, #0
    c3c4:	e73e      	b.n	c244 <__adddf3+0x138>
    c3c6:	bf00      	nop

0000c3c8 <__aeabi_f2d>:
    c3c8:	0042      	lsls	r2, r0, #1
    c3ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c3ce:	ea4f 0131 	mov.w	r1, r1, rrx
    c3d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c3d6:	bf1f      	itttt	ne
    c3d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    c3dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c3e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c3e4:	4770      	bxne	lr
    c3e6:	f092 0f00 	teq	r2, #0
    c3ea:	bf14      	ite	ne
    c3ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c3f0:	4770      	bxeq	lr
    c3f2:	b530      	push	{r4, r5, lr}
    c3f4:	f44f 7460 	mov.w	r4, #896	; 0x380
    c3f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c3fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c400:	e720      	b.n	c244 <__adddf3+0x138>
    c402:	bf00      	nop

0000c404 <__aeabi_ul2d>:
    c404:	ea50 0201 	orrs.w	r2, r0, r1
    c408:	bf08      	it	eq
    c40a:	4770      	bxeq	lr
    c40c:	b530      	push	{r4, r5, lr}
    c40e:	f04f 0500 	mov.w	r5, #0
    c412:	e00a      	b.n	c42a <__aeabi_l2d+0x16>

0000c414 <__aeabi_l2d>:
    c414:	ea50 0201 	orrs.w	r2, r0, r1
    c418:	bf08      	it	eq
    c41a:	4770      	bxeq	lr
    c41c:	b530      	push	{r4, r5, lr}
    c41e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c422:	d502      	bpl.n	c42a <__aeabi_l2d+0x16>
    c424:	4240      	negs	r0, r0
    c426:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c42a:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c42e:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c432:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c436:	f43f aedc 	beq.w	c1f2 <__adddf3+0xe6>
    c43a:	f04f 0203 	mov.w	r2, #3
    c43e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c442:	bf18      	it	ne
    c444:	3203      	addne	r2, #3
    c446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c44a:	bf18      	it	ne
    c44c:	3203      	addne	r2, #3
    c44e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c452:	f1c2 0320 	rsb	r3, r2, #32
    c456:	fa00 fc03 	lsl.w	ip, r0, r3
    c45a:	fa20 f002 	lsr.w	r0, r0, r2
    c45e:	fa01 fe03 	lsl.w	lr, r1, r3
    c462:	ea40 000e 	orr.w	r0, r0, lr
    c466:	fa21 f102 	lsr.w	r1, r1, r2
    c46a:	4414      	add	r4, r2
    c46c:	e6c1      	b.n	c1f2 <__adddf3+0xe6>
    c46e:	bf00      	nop

0000c470 <__aeabi_d2f>:
    c470:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c474:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c478:	bf24      	itt	cs
    c47a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c47e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c482:	d90d      	bls.n	c4a0 <__aeabi_d2f+0x30>
    c484:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c488:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c48c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c490:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c494:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c498:	bf08      	it	eq
    c49a:	f020 0001 	biceq.w	r0, r0, #1
    c49e:	4770      	bx	lr
    c4a0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c4a4:	d121      	bne.n	c4ea <__aeabi_d2f+0x7a>
    c4a6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c4aa:	bfbc      	itt	lt
    c4ac:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c4b0:	4770      	bxlt	lr
    c4b2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c4b6:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c4ba:	f1c2 0218 	rsb	r2, r2, #24
    c4be:	f1c2 0c20 	rsb	ip, r2, #32
    c4c2:	fa10 f30c 	lsls.w	r3, r0, ip
    c4c6:	fa20 f002 	lsr.w	r0, r0, r2
    c4ca:	bf18      	it	ne
    c4cc:	f040 0001 	orrne.w	r0, r0, #1
    c4d0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c4d4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c4d8:	fa03 fc0c 	lsl.w	ip, r3, ip
    c4dc:	ea40 000c 	orr.w	r0, r0, ip
    c4e0:	fa23 f302 	lsr.w	r3, r3, r2
    c4e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c4e8:	e7cc      	b.n	c484 <__aeabi_d2f+0x14>
    c4ea:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c4ee:	d107      	bne.n	c500 <__aeabi_d2f+0x90>
    c4f0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c4f4:	bf1e      	ittt	ne
    c4f6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c4fa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c4fe:	4770      	bxne	lr
    c500:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c504:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c508:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c50c:	4770      	bx	lr
    c50e:	bf00      	nop

0000c510 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    c510:	b480      	push	{r7}
    c512:	b083      	sub	sp, #12
    c514:	af00      	add	r7, sp, #0
    c516:	4603      	mov	r3, r0
    c518:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    c51a:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c51e:	2b00      	cmp	r3, #0
    c520:	db0b      	blt.n	c53a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c522:	4908      	ldr	r1, [pc, #32]	; (c544 <__NVIC_EnableIRQ+0x34>)
    c524:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c528:	095b      	lsrs	r3, r3, #5
    c52a:	79fa      	ldrb	r2, [r7, #7]
    c52c:	f002 021f 	and.w	r2, r2, #31
    c530:	2001      	movs	r0, #1
    c532:	fa00 f202 	lsl.w	r2, r0, r2
    c536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    c53a:	370c      	adds	r7, #12
    c53c:	46bd      	mov	sp, r7
    c53e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c542:	4770      	bx	lr
    c544:	e000e100 	.word	0xe000e100

0000c548 <am_adc_isr>:
// ADC Interrupt Service Routine (ISR)
//
//*****************************************************************************
void
am_adc_isr(void)
{
    c548:	b590      	push	{r4, r7, lr}
    c54a:	b087      	sub	sp, #28
    c54c:	af02      	add	r7, sp, #8
    uint32_t ui32IntStatus;

    //
    // Clear timer 3 interrupt.
    //
    am_hal_adc_interrupt_status(g_ADCHandle, &ui32IntStatus, true);
    c54e:	4b21      	ldr	r3, [pc, #132]	; (c5d4 <am_adc_isr+0x8c>)
    c550:	681a      	ldr	r2, [r3, #0]
    c552:	f107 030c 	add.w	r3, r7, #12
    c556:	4610      	mov	r0, r2
    c558:	4619      	mov	r1, r3
    c55a:	2201      	movs	r2, #1
    c55c:	f001 fce4 	bl	df28 <am_hal_adc_interrupt_status>
    am_hal_adc_interrupt_clear(g_ADCHandle, ui32IntStatus);
    c560:	4b1c      	ldr	r3, [pc, #112]	; (c5d4 <am_adc_isr+0x8c>)
    c562:	681a      	ldr	r2, [r3, #0]
    c564:	68fb      	ldr	r3, [r7, #12]
    c566:	4610      	mov	r0, r2
    c568:	4619      	mov	r1, r3
    c56a:	f001 fcfb 	bl	df64 <am_hal_adc_interrupt_clear>

    //
    // Toggle LED 3.
    //
    am_devices_led_toggle(am_bsp_psLEDs, 3);
    c56e:	481a      	ldr	r0, [pc, #104]	; (c5d8 <am_adc_isr+0x90>)
    c570:	2103      	movs	r1, #3
    c572:	f000 fba5 	bl	ccc0 <am_devices_led_toggle>
  uint32_t      ui32Slot;
} am_hal_adc_sample_t;

#endif

    uint32_t ui32NumSamples = 1;
    c576:	2301      	movs	r3, #1
    c578:	60bb      	str	r3, [r7, #8]

#elif 1
    //
    // Emtpy the FIFO, we'll just look at the last one read.
    //
    while ( AM_HAL_ADC_FIFO_COUNT(ADC->FIFO) )
    c57a:	e00d      	b.n	c598 <am_adc_isr+0x50>
    {
        ui32NumSamples = 1;
    c57c:	2301      	movs	r3, #1
    c57e:	60bb      	str	r3, [r7, #8]
        am_hal_adc_samples_read(g_ADCHandle, true, NULL, &ui32NumSamples, &sSample);
    c580:	4b14      	ldr	r3, [pc, #80]	; (c5d4 <am_adc_isr+0x8c>)
    c582:	681a      	ldr	r2, [r3, #0]
    c584:	f107 0408 	add.w	r4, r7, #8
    c588:	463b      	mov	r3, r7
    c58a:	9300      	str	r3, [sp, #0]
    c58c:	4610      	mov	r0, r2
    c58e:	2101      	movs	r1, #1
    c590:	2200      	movs	r2, #0
    c592:	4623      	mov	r3, r4
    c594:	f001 fcf8 	bl	df88 <am_hal_adc_samples_read>

#elif 1
    //
    // Emtpy the FIFO, we'll just look at the last one read.
    //
    while ( AM_HAL_ADC_FIFO_COUNT(ADC->FIFO) )
    c598:	4b10      	ldr	r3, [pc, #64]	; (c5dc <am_adc_isr+0x94>)
    c59a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    c59c:	f003 637f 	and.w	r3, r3, #267386880	; 0xff00000
    c5a0:	0d1b      	lsrs	r3, r3, #20
    c5a2:	2b00      	cmp	r3, #0
    c5a4:	d1ea      	bne.n	c57c <am_adc_isr+0x34>
    }

    //
    // Determine which slot it came from?
    //
    if (sSample.ui32Slot == 5 )
    c5a6:	687b      	ldr	r3, [r7, #4]
    c5a8:	2b05      	cmp	r3, #5
    c5aa:	d104      	bne.n	c5b6 <am_adc_isr+0x6e>
    {
            //
            // The returned ADC sample is for the battery voltage divider.
            //
            g_ui16ADCVDD_code = sSample.ui32Sample;
    c5ac:	683b      	ldr	r3, [r7, #0]
    c5ae:	b29a      	uxth	r2, r3
    c5b0:	4b0b      	ldr	r3, [pc, #44]	; (c5e0 <am_adc_isr+0x98>)
    c5b2:	801a      	strh	r2, [r3, #0]
    c5b4:	e006      	b.n	c5c4 <am_adc_isr+0x7c>
    {
            //
            // The returned ADC sample is for the temperature sensor.
            // We need the integer part in the low 16-bits.
            //
            g_ui16ADCTEMP_code = sSample.ui32Sample & 0xFFC0;
    c5b6:	683b      	ldr	r3, [r7, #0]
    c5b8:	b29b      	uxth	r3, r3
    c5ba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    c5be:	b29a      	uxth	r2, r3
    c5c0:	4b08      	ldr	r3, [pc, #32]	; (c5e4 <am_adc_isr+0x9c>)
    c5c2:	801a      	strh	r2, [r3, #0]
#endif

    //
    // Signal interrupt arrival to base level.
    //
    g_ui32SampleCount++;
    c5c4:	4b08      	ldr	r3, [pc, #32]	; (c5e8 <am_adc_isr+0xa0>)
    c5c6:	681b      	ldr	r3, [r3, #0]
    c5c8:	3301      	adds	r3, #1
    c5ca:	4a07      	ldr	r2, [pc, #28]	; (c5e8 <am_adc_isr+0xa0>)
    c5cc:	6013      	str	r3, [r2, #0]
}
    c5ce:	3714      	adds	r7, #20
    c5d0:	46bd      	mov	sp, r7
    c5d2:	bd90      	pop	{r4, r7, pc}
    c5d4:	10001034 	.word	0x10001034
    c5d8:	1000101c 	.word	0x1000101c
    c5dc:	50010000 	.word	0x50010000
    c5e0:	1000115e 	.word	0x1000115e
    c5e4:	1000115c 	.word	0x1000115c
    c5e8:	10001158 	.word	0x10001158

0000c5ec <adc_init>:
// ADC INIT Function
//
//*****************************************************************************
void
adc_init(void)
{
    c5ec:	b580      	push	{r7, lr}
    c5ee:	b082      	sub	sp, #8
    c5f0:	af00      	add	r7, sp, #0
    am_hal_adc_slot_config_t sSlotCfg;

    //
    // Initialize the ADC and get the handle.
    //
    if ( AM_HAL_STATUS_SUCCESS != am_hal_adc_initialize(0, &g_ADCHandle) )
    c5f2:	2000      	movs	r0, #0
    c5f4:	4943      	ldr	r1, [pc, #268]	; (c704 <adc_init+0x118>)
    c5f6:	f001 fb39 	bl	dc6c <am_hal_adc_initialize>
    c5fa:	4603      	mov	r3, r0
    c5fc:	2b00      	cmp	r3, #0
    c5fe:	d002      	beq.n	c606 <adc_init+0x1a>
    {
        am_util_stdio_printf("Error - reservation of the ADC instance failed.\n");
    c600:	4841      	ldr	r0, [pc, #260]	; (c708 <adc_init+0x11c>)
    c602:	f001 facb 	bl	db9c <am_util_stdio_printf>
    }

    //
    // Power on the ADC.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_power_control(g_ADCHandle,
    c606:	4b3f      	ldr	r3, [pc, #252]	; (c704 <adc_init+0x118>)
    c608:	681b      	ldr	r3, [r3, #0]
    c60a:	4618      	mov	r0, r3
    c60c:	2100      	movs	r1, #0
    c60e:	2200      	movs	r2, #0
    c610:	f001 fd28 	bl	e064 <am_hal_adc_power_control>
    c614:	4603      	mov	r3, r0
    c616:	2b00      	cmp	r3, #0
    c618:	d002      	beq.n	c620 <adc_init+0x34>
                                                          AM_HAL_SYSCTRL_WAKE,
                                                          false) )
    {
        am_util_stdio_printf("Error - ADC power on failed.\n");
    c61a:	483c      	ldr	r0, [pc, #240]	; (c70c <adc_init+0x120>)
    c61c:	f001 fabe 	bl	db9c <am_util_stdio_printf>
    }

    //
    // Configure the ADC.
    //
    if ( am_hal_adc_configure(g_ADCHandle, (am_hal_adc_config_t*)&g_sADC_Cfg) != AM_HAL_STATUS_SUCCESS )
    c620:	4b38      	ldr	r3, [pc, #224]	; (c704 <adc_init+0x118>)
    c622:	681b      	ldr	r3, [r3, #0]
    c624:	4618      	mov	r0, r3
    c626:	493a      	ldr	r1, [pc, #232]	; (c710 <adc_init+0x124>)
    c628:	f001 fb70 	bl	dd0c <am_hal_adc_configure>
    c62c:	4603      	mov	r3, r0
    c62e:	2b00      	cmp	r3, #0
    c630:	d002      	beq.n	c638 <adc_init+0x4c>
    {
        am_util_stdio_printf("Error - configuring ADC failed.\n");
    c632:	4838      	ldr	r0, [pc, #224]	; (c714 <adc_init+0x128>)
    c634:	f001 fab2 	bl	db9c <am_util_stdio_printf>
    }

    sSlotCfg.bEnabled       = false;
    c638:	2300      	movs	r3, #0
    c63a:	713b      	strb	r3, [r7, #4]
    sSlotCfg.bWindowCompare = false;
    c63c:	2300      	movs	r3, #0
    c63e:	70fb      	strb	r3, [r7, #3]
    sSlotCfg.eChannel       = AM_HAL_ADC_SLOT_CHSEL_SE0;    // 0
    c640:	2300      	movs	r3, #0
    c642:	70bb      	strb	r3, [r7, #2]
    sSlotCfg.eMeasToAvg     = AM_HAL_ADC_SLOT_AVG_1;        // 0
    c644:	2300      	movs	r3, #0
    c646:	703b      	strb	r3, [r7, #0]
    sSlotCfg.ePrecisionMode = AM_HAL_ADC_SLOT_14BIT;        // 0
    c648:	2300      	movs	r3, #0
    c64a:	707b      	strb	r3, [r7, #1]

    am_hal_adc_configure_slot(g_ADCHandle, 0, &sSlotCfg);   // Unused slot
    c64c:	4b2d      	ldr	r3, [pc, #180]	; (c704 <adc_init+0x118>)
    c64e:	681a      	ldr	r2, [r3, #0]
    c650:	463b      	mov	r3, r7
    c652:	4610      	mov	r0, r2
    c654:	2100      	movs	r1, #0
    c656:	461a      	mov	r2, r3
    c658:	f001 fb90 	bl	dd7c <am_hal_adc_configure_slot>
    am_hal_adc_configure_slot(g_ADCHandle, 1, &sSlotCfg);   // Unused slot
    c65c:	4b29      	ldr	r3, [pc, #164]	; (c704 <adc_init+0x118>)
    c65e:	681a      	ldr	r2, [r3, #0]
    c660:	463b      	mov	r3, r7
    c662:	4610      	mov	r0, r2
    c664:	2101      	movs	r1, #1
    c666:	461a      	mov	r2, r3
    c668:	f001 fb88 	bl	dd7c <am_hal_adc_configure_slot>
    am_hal_adc_configure_slot(g_ADCHandle, 2, &sSlotCfg);   // Unused slot
    c66c:	4b25      	ldr	r3, [pc, #148]	; (c704 <adc_init+0x118>)
    c66e:	681a      	ldr	r2, [r3, #0]
    c670:	463b      	mov	r3, r7
    c672:	4610      	mov	r0, r2
    c674:	2102      	movs	r1, #2
    c676:	461a      	mov	r2, r3
    c678:	f001 fb80 	bl	dd7c <am_hal_adc_configure_slot>
    am_hal_adc_configure_slot(g_ADCHandle, 3, &sSlotCfg);   // Unused slot
    c67c:	4b21      	ldr	r3, [pc, #132]	; (c704 <adc_init+0x118>)
    c67e:	681a      	ldr	r2, [r3, #0]
    c680:	463b      	mov	r3, r7
    c682:	4610      	mov	r0, r2
    c684:	2103      	movs	r1, #3
    c686:	461a      	mov	r2, r3
    c688:	f001 fb78 	bl	dd7c <am_hal_adc_configure_slot>
    am_hal_adc_configure_slot(g_ADCHandle, 4, &sSlotCfg);   // Unused slot
    c68c:	4b1d      	ldr	r3, [pc, #116]	; (c704 <adc_init+0x118>)
    c68e:	681a      	ldr	r2, [r3, #0]
    c690:	463b      	mov	r3, r7
    c692:	4610      	mov	r0, r2
    c694:	2104      	movs	r1, #4
    c696:	461a      	mov	r2, r3
    c698:	f001 fb70 	bl	dd7c <am_hal_adc_configure_slot>
    am_hal_adc_configure_slot(g_ADCHandle, 6, &sSlotCfg);   // Unused slot
    c69c:	4b19      	ldr	r3, [pc, #100]	; (c704 <adc_init+0x118>)
    c69e:	681a      	ldr	r2, [r3, #0]
    c6a0:	463b      	mov	r3, r7
    c6a2:	4610      	mov	r0, r2
    c6a4:	2106      	movs	r1, #6
    c6a6:	461a      	mov	r2, r3
    c6a8:	f001 fb68 	bl	dd7c <am_hal_adc_configure_slot>

    sSlotCfg.bEnabled       = true;
    c6ac:	2301      	movs	r3, #1
    c6ae:	713b      	strb	r3, [r7, #4]
    sSlotCfg.bWindowCompare = true;
    c6b0:	2301      	movs	r3, #1
    c6b2:	70fb      	strb	r3, [r7, #3]
    sSlotCfg.eChannel       = AM_HAL_ADC_SLOT_CHSEL_BATT;
    c6b4:	230d      	movs	r3, #13
    c6b6:	70bb      	strb	r3, [r7, #2]
    sSlotCfg.eMeasToAvg     = AM_HAL_ADC_SLOT_AVG_1;
    c6b8:	2300      	movs	r3, #0
    c6ba:	703b      	strb	r3, [r7, #0]
    sSlotCfg.ePrecisionMode = AM_HAL_ADC_SLOT_14BIT;
    c6bc:	2300      	movs	r3, #0
    c6be:	707b      	strb	r3, [r7, #1]
    am_hal_adc_configure_slot(g_ADCHandle, 5, &sSlotCfg);   // BATT
    c6c0:	4b10      	ldr	r3, [pc, #64]	; (c704 <adc_init+0x118>)
    c6c2:	681a      	ldr	r2, [r3, #0]
    c6c4:	463b      	mov	r3, r7
    c6c6:	4610      	mov	r0, r2
    c6c8:	2105      	movs	r1, #5
    c6ca:	461a      	mov	r2, r3
    c6cc:	f001 fb56 	bl	dd7c <am_hal_adc_configure_slot>

    sSlotCfg.bEnabled       = true;
    c6d0:	2301      	movs	r3, #1
    c6d2:	713b      	strb	r3, [r7, #4]
    sSlotCfg.bWindowCompare = true;
    c6d4:	2301      	movs	r3, #1
    c6d6:	70fb      	strb	r3, [r7, #3]
    sSlotCfg.eChannel       = AM_HAL_ADC_SLOT_CHSEL_TEMP;
    c6d8:	230c      	movs	r3, #12
    c6da:	70bb      	strb	r3, [r7, #2]
    sSlotCfg.eMeasToAvg     = AM_HAL_ADC_SLOT_AVG_1;
    c6dc:	2300      	movs	r3, #0
    c6de:	703b      	strb	r3, [r7, #0]
    sSlotCfg.ePrecisionMode = AM_HAL_ADC_SLOT_10BIT;
    c6e0:	2302      	movs	r3, #2
    c6e2:	707b      	strb	r3, [r7, #1]
    am_hal_adc_configure_slot(g_ADCHandle, 7, &sSlotCfg);   // TEMP
    c6e4:	4b07      	ldr	r3, [pc, #28]	; (c704 <adc_init+0x118>)
    c6e6:	681a      	ldr	r2, [r3, #0]
    c6e8:	463b      	mov	r3, r7
    c6ea:	4610      	mov	r0, r2
    c6ec:	2107      	movs	r1, #7
    c6ee:	461a      	mov	r2, r3
    c6f0:	f001 fb44 	bl	dd7c <am_hal_adc_configure_slot>

    //
    // Enable the ADC.
    //
    am_hal_adc_enable(g_ADCHandle);
    c6f4:	4b03      	ldr	r3, [pc, #12]	; (c704 <adc_init+0x118>)
    c6f6:	681b      	ldr	r3, [r3, #0]
    c6f8:	4618      	mov	r0, r3
    c6fa:	f001 fbdf 	bl	debc <am_hal_adc_enable>
}
    c6fe:	3708      	adds	r7, #8
    c700:	46bd      	mov	sp, r7
    c702:	bd80      	pop	{r7, pc}
    c704:	10001034 	.word	0x10001034
    c708:	0000ee18 	.word	0x0000ee18
    c70c:	0000ee4c 	.word	0x0000ee4c
    c710:	0000f0b8 	.word	0x0000f0b8
    c714:	0000ee6c 	.word	0x0000ee6c

0000c718 <timer_init>:
// Enable the ADC INIT TIMER 3A function and set for 0.5 second period.
//
//*****************************************************************************
static void
timer_init(void)
{
    c718:	b580      	push	{r7, lr}
    c71a:	b082      	sub	sp, #8
    c71c:	af00      	add	r7, sp, #0
//
// Only CTIMER 3 supports the ADC.
//
#define TIMERNUM    3
    uint32_t ui32Period = 2000; // Set for 2 second (2000ms) period
    c71e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
    c722:	607b      	str	r3, [r7, #4]

    //
    // LFRC has to be turned on for this example because we are running this
    // timer off of the LFRC.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_LFRC_START, 0);
    c724:	2002      	movs	r0, #2
    c726:	2100      	movs	r1, #0
    c728:	f001 fd30 	bl	e18c <am_hal_clkgen_control>

    //
    // Set up timer 3A so start by clearing it.
    //
    am_hal_ctimer_clear(TIMERNUM, AM_HAL_CTIMER_TIMERA);
    c72c:	2003      	movs	r0, #3
    c72e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c732:	f001 fe0f 	bl	e354 <am_hal_ctimer_clear>

    //
    // Configure the timer to count 32Hz LFRC clocks but don't start it yet.
    //
    am_hal_ctimer_config(TIMERNUM, &g_sTimer3);
    c736:	2003      	movs	r0, #3
    c738:	490d      	ldr	r1, [pc, #52]	; (c770 <timer_init+0x58>)
    c73a:	f001 fdb1 	bl	e2a0 <am_hal_ctimer_config>

    //
    // Compute CMPR value needed for desired period based on a 32HZ clock.
    //
    ui32Period = ui32Period * 32 / 1000;
    c73e:	687b      	ldr	r3, [r7, #4]
    c740:	015b      	lsls	r3, r3, #5
    c742:	4a0c      	ldr	r2, [pc, #48]	; (c774 <timer_init+0x5c>)
    c744:	fba2 2303 	umull	r2, r3, r2, r3
    c748:	099b      	lsrs	r3, r3, #6
    c74a:	607b      	str	r3, [r7, #4]
    am_hal_ctimer_period_set(TIMERNUM, AM_HAL_CTIMER_TIMERA,
    c74c:	687b      	ldr	r3, [r7, #4]
    c74e:	085b      	lsrs	r3, r3, #1
    c750:	2003      	movs	r0, #3
    c752:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c756:	687a      	ldr	r2, [r7, #4]
    c758:	f001 fe10 	bl	e37c <am_hal_ctimer_period_set>
#endif

    //
    // Set up timer 3A as the trigger source for the ADC.
    //
    am_hal_ctimer_adc_trigger_enable();
    c75c:	f001 fe64 	bl	e428 <am_hal_ctimer_adc_trigger_enable>
#endif

    //
    // Start timer 3A.
    //
    am_hal_ctimer_start(TIMERNUM, AM_HAL_CTIMER_TIMERA);
    c760:	2003      	movs	r0, #3
    c762:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c766:	f001 fdcb 	bl	e300 <am_hal_ctimer_start>
} // timer_init()
    c76a:	3708      	adds	r7, #8
    c76c:	46bd      	mov	sp, r7
    c76e:	bd80      	pop	{r7, pc}
    c770:	10001000 	.word	0x10001000
    c774:	10624dd3 	.word	0x10624dd3

0000c778 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
    c778:	b5b0      	push	{r4, r5, r7, lr}
    c77a:	b092      	sub	sp, #72	; 0x48
    c77c:	af02      	add	r7, sp, #8
    bool  bMeasured;
    float fTempF;
    int32_t i32BaseLevelCount;
    const float fReferenceVoltage = 1.5;
    c77e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    c782:	63bb      	str	r3, [r7, #56]	; 0x38
    uint32_t ui32Retval;

    //
    // Set the clock frequency.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c784:	2000      	movs	r0, #0
    c786:	2100      	movs	r1, #0
    c788:	f001 fd00 	bl	e18c <am_hal_clkgen_control>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c78c:	48ae      	ldr	r0, [pc, #696]	; (ca48 <main+0x2d0>)
    c78e:	f001 fccd 	bl	e12c <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c792:	f001 fcf1 	bl	e178 <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
    c796:	f002 f9fb 	bl	eb90 <am_bsp_low_power_init>

    //
    // Initialize device drivers for the LEDs on the board.
    //
    am_devices_led_array_init(am_bsp_psLEDs, AM_BSP_NUM_LEDS);
    c79a:	48ac      	ldr	r0, [pc, #688]	; (ca4c <main+0x2d4>)
    c79c:	2103      	movs	r1, #3
    c79e:	f000 f9f3 	bl	cb88 <am_devices_led_array_init>

    //
    // Configure the button pin.
    //
    am_hal_gpio_pinconfig(AM_BSP_GPIO_CLICKBEETLE_SW1, g_AM_BSP_GPIO_CLICKBEETLE_SW1);
    c7a2:	4bab      	ldr	r3, [pc, #684]	; (ca50 <main+0x2d8>)
    c7a4:	2013      	movs	r0, #19
    c7a6:	6819      	ldr	r1, [r3, #0]
    c7a8:	f001 fe9e 	bl	e4e8 <am_hal_gpio_pinconfig>

    //
    // Initialize the printf interface for ITM output
    //
    am_bsp_itm_printf_enable();
    c7ac:	f002 fa22 	bl	ebf4 <am_bsp_itm_printf_enable>

    //
    // Clear the terminal screen, and print a quick message to show that we're
    // alive.
    //
    am_util_stdio_terminal_clear();
    c7b0:	f001 fa18 	bl	dbe4 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("ADC VBATT and Temperature Sensing Example.\n");
    c7b4:	48a7      	ldr	r0, [pc, #668]	; (ca54 <main+0x2dc>)
    c7b6:	f001 f9f1 	bl	db9c <am_util_stdio_printf>

    //
    // Enable floating point.
    //
    am_hal_sysctrl_fpu_enable();
    c7ba:	f002 f9c7 	bl	eb4c <am_hal_sysctrl_fpu_enable>
    am_hal_sysctrl_fpu_stacking_enable(true);
    c7be:	2001      	movs	r0, #1
    c7c0:	f002 f9cc 	bl	eb5c <am_hal_sysctrl_fpu_stacking_enable>

    //
    // Initialize the ADC.
    //
    adc_init();
    c7c4:	f7ff ff12 	bl	c5ec <adc_init>

    //
    // Initialize CTIMER 3A to trigger the ADC every 0.5 seconds.
    //
    timer_init();
    c7c8:	f7ff ffa6 	bl	c718 <timer_init>

    //
    // Print out ctimer initial register state.
    //
    am_util_stdio_printf("\n");
    c7cc:	48a2      	ldr	r0, [pc, #648]	; (ca58 <main+0x2e0>)
    c7ce:	f001 f9e5 	bl	db9c <am_util_stdio_printf>
    am_util_stdio_printf("CTIMER3=0x%08X @ 0x%08X\n",
    c7d2:	4ba2      	ldr	r3, [pc, #648]	; (ca5c <main+0x2e4>)
    c7d4:	681b      	ldr	r3, [r3, #0]
    c7d6:	48a2      	ldr	r0, [pc, #648]	; (ca60 <main+0x2e8>)
    c7d8:	4619      	mov	r1, r3
    c7da:	4aa0      	ldr	r2, [pc, #640]	; (ca5c <main+0x2e4>)
    c7dc:	f001 f9de 	bl	db9c <am_util_stdio_printf>
                         AM_REGVAL(CTIMERADDRn(CTIMER, 3, TMR0)),
                         CTIMERADDRn(CTIMER, 3, TMR0));
    am_util_stdio_printf("CTIMER3=0x%08X @ 0x%08X\n",
    c7e0:	4ba0      	ldr	r3, [pc, #640]	; (ca64 <main+0x2ec>)
    c7e2:	681b      	ldr	r3, [r3, #0]
    c7e4:	489e      	ldr	r0, [pc, #632]	; (ca60 <main+0x2e8>)
    c7e6:	4619      	mov	r1, r3
    c7e8:	4a9e      	ldr	r2, [pc, #632]	; (ca64 <main+0x2ec>)
    c7ea:	f001 f9d7 	bl	db9c <am_util_stdio_printf>
                         AM_REGVAL(CTIMERADDRn(CTIMER, 3, CMPRA0)),
                         CTIMERADDRn(CTIMER, 3, CMPRA0));
    am_util_stdio_printf("CTIMER3=0x%08X @ 0x%08X\n",
    c7ee:	4b9e      	ldr	r3, [pc, #632]	; (ca68 <main+0x2f0>)
    c7f0:	681b      	ldr	r3, [r3, #0]
    c7f2:	489b      	ldr	r0, [pc, #620]	; (ca60 <main+0x2e8>)
    c7f4:	4619      	mov	r1, r3
    c7f6:	4a9c      	ldr	r2, [pc, #624]	; (ca68 <main+0x2f0>)
    c7f8:	f001 f9d0 	bl	db9c <am_util_stdio_printf>
                         AM_REGVAL(CTIMERADDRn(CTIMER, 3, CMPRB0)),
                         CTIMERADDRn(CTIMER, 3, CMPRB0));
    am_util_stdio_printf("CTIMER3=0x%08X @ 0x%08X\n",
    c7fc:	4b9b      	ldr	r3, [pc, #620]	; (ca6c <main+0x2f4>)
    c7fe:	681b      	ldr	r3, [r3, #0]
    c800:	4897      	ldr	r0, [pc, #604]	; (ca60 <main+0x2e8>)
    c802:	4619      	mov	r1, r3
    c804:	4a99      	ldr	r2, [pc, #612]	; (ca6c <main+0x2f4>)
    c806:	f001 f9c9 	bl	db9c <am_util_stdio_printf>
                         CTIMERADDRn(CTIMER, 3, CTRL0));

    //
    // Print out ADC initial register state.
    //
    am_util_stdio_printf("\n");
    c80a:	4893      	ldr	r0, [pc, #588]	; (ca58 <main+0x2e0>)
    c80c:	f001 f9c6 	bl	db9c <am_util_stdio_printf>
    am_util_stdio_printf("ADC REGISTERS @ 0x%08X\n", (uint32_t)REG_ADC_BASEADDR);
    c810:	4897      	ldr	r0, [pc, #604]	; (ca70 <main+0x2f8>)
    c812:	4998      	ldr	r1, [pc, #608]	; (ca74 <main+0x2fc>)
    c814:	f001 f9c2 	bl	db9c <am_util_stdio_printf>
    am_util_stdio_printf("ADC CFG   = 0x%08X\n", ADC->CFG);
    c818:	4b96      	ldr	r3, [pc, #600]	; (ca74 <main+0x2fc>)
    c81a:	681b      	ldr	r3, [r3, #0]
    c81c:	4896      	ldr	r0, [pc, #600]	; (ca78 <main+0x300>)
    c81e:	4619      	mov	r1, r3
    c820:	f001 f9bc 	bl	db9c <am_util_stdio_printf>
    am_util_stdio_printf("ADC SLOT0 = 0x%08X\n", ADC->SL0CFG);
    c824:	4b93      	ldr	r3, [pc, #588]	; (ca74 <main+0x2fc>)
    c826:	68db      	ldr	r3, [r3, #12]
    c828:	4894      	ldr	r0, [pc, #592]	; (ca7c <main+0x304>)
    c82a:	4619      	mov	r1, r3
    c82c:	f001 f9b6 	bl	db9c <am_util_stdio_printf>
    am_util_stdio_printf("ADC SLOT1 = 0x%08X\n", ADC->SL1CFG);
    c830:	4b90      	ldr	r3, [pc, #576]	; (ca74 <main+0x2fc>)
    c832:	691b      	ldr	r3, [r3, #16]
    c834:	4892      	ldr	r0, [pc, #584]	; (ca80 <main+0x308>)
    c836:	4619      	mov	r1, r3
    c838:	f001 f9b0 	bl	db9c <am_util_stdio_printf>
    am_util_stdio_printf("ADC SLOT2 = 0x%08X\n", ADC->SL2CFG);
    c83c:	4b8d      	ldr	r3, [pc, #564]	; (ca74 <main+0x2fc>)
    c83e:	695b      	ldr	r3, [r3, #20]
    c840:	4890      	ldr	r0, [pc, #576]	; (ca84 <main+0x30c>)
    c842:	4619      	mov	r1, r3
    c844:	f001 f9aa 	bl	db9c <am_util_stdio_printf>
    am_util_stdio_printf("ADC SLOT3 = 0x%08X\n", ADC->SL3CFG);
    c848:	4b8a      	ldr	r3, [pc, #552]	; (ca74 <main+0x2fc>)
    c84a:	699b      	ldr	r3, [r3, #24]
    c84c:	488e      	ldr	r0, [pc, #568]	; (ca88 <main+0x310>)
    c84e:	4619      	mov	r1, r3
    c850:	f001 f9a4 	bl	db9c <am_util_stdio_printf>
    am_util_stdio_printf("ADC SLOT4 = 0x%08X\n", ADC->SL4CFG);
    c854:	4b87      	ldr	r3, [pc, #540]	; (ca74 <main+0x2fc>)
    c856:	69db      	ldr	r3, [r3, #28]
    c858:	488c      	ldr	r0, [pc, #560]	; (ca8c <main+0x314>)
    c85a:	4619      	mov	r1, r3
    c85c:	f001 f99e 	bl	db9c <am_util_stdio_printf>
    am_util_stdio_printf("ADC SLOT5 = 0x%08X\n", ADC->SL5CFG);
    c860:	4b84      	ldr	r3, [pc, #528]	; (ca74 <main+0x2fc>)
    c862:	6a1b      	ldr	r3, [r3, #32]
    c864:	488a      	ldr	r0, [pc, #552]	; (ca90 <main+0x318>)
    c866:	4619      	mov	r1, r3
    c868:	f001 f998 	bl	db9c <am_util_stdio_printf>
    am_util_stdio_printf("ADC SLOT6 = 0x%08X\n", ADC->SL6CFG);
    c86c:	4b81      	ldr	r3, [pc, #516]	; (ca74 <main+0x2fc>)
    c86e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c870:	4888      	ldr	r0, [pc, #544]	; (ca94 <main+0x31c>)
    c872:	4619      	mov	r1, r3
    c874:	f001 f992 	bl	db9c <am_util_stdio_printf>
    am_util_stdio_printf("ADC SLOT7 = 0x%08X\n", ADC->SL7CFG);
    c878:	4b7e      	ldr	r3, [pc, #504]	; (ca74 <main+0x2fc>)
    c87a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c87c:	4886      	ldr	r0, [pc, #536]	; (ca98 <main+0x320>)
    c87e:	4619      	mov	r1, r3
    c880:	f001 f98c 	bl	db9c <am_util_stdio_printf>

    //
    // Print out the temperature trim values as recorded in OTP.
    //
    fTrims[0] = fTrims[1] = fTrims[2] = 0.0F;
    c884:	f04f 0300 	mov.w	r3, #0
    c888:	61bb      	str	r3, [r7, #24]
    c88a:	69bb      	ldr	r3, [r7, #24]
    c88c:	617b      	str	r3, [r7, #20]
    c88e:	697b      	ldr	r3, [r7, #20]
    c890:	613b      	str	r3, [r7, #16]
    fTrims[3] = -123.456f;
    c892:	4b82      	ldr	r3, [pc, #520]	; (ca9c <main+0x324>)
    c894:	61fb      	str	r3, [r7, #28]
    am_hal_adc_control(g_ADCHandle, AM_HAL_ADC_REQ_TEMP_TRIMS_GET, fTrims);
    c896:	4b82      	ldr	r3, [pc, #520]	; (caa0 <main+0x328>)
    c898:	681a      	ldr	r2, [r3, #0]
    c89a:	f107 0310 	add.w	r3, r7, #16
    c89e:	4610      	mov	r0, r2
    c8a0:	2102      	movs	r1, #2
    c8a2:	461a      	mov	r2, r3
    c8a4:	f001 faa0 	bl	dde8 <am_hal_adc_control>
    bMeasured = fTrims[3] ? true : false;
    c8a8:	edd7 7a07 	vldr	s15, [r7, #28]
    c8ac:	eef5 7a40 	vcmp.f32	s15, #0.0
    c8b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c8b4:	bf14      	ite	ne
    c8b6:	2301      	movne	r3, #1
    c8b8:	2300      	moveq	r3, #0
    c8ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    am_util_stdio_printf("\n");
    c8be:	4866      	ldr	r0, [pc, #408]	; (ca58 <main+0x2e0>)
    c8c0:	f001 f96c 	bl	db9c <am_util_stdio_printf>
    am_util_stdio_printf("TRIMMED TEMP    = %.3f\n", fTrims[0]);
    c8c4:	693b      	ldr	r3, [r7, #16]
    c8c6:	4618      	mov	r0, r3
    c8c8:	f7ff fd7e 	bl	c3c8 <__aeabi_f2d>
    c8cc:	4602      	mov	r2, r0
    c8ce:	460b      	mov	r3, r1
    c8d0:	4874      	ldr	r0, [pc, #464]	; (caa4 <main+0x32c>)
    c8d2:	f001 f963 	bl	db9c <am_util_stdio_printf>
    am_util_stdio_printf("TRIMMED VOLTAGE = %.3f\n", fTrims[1]);
    c8d6:	697b      	ldr	r3, [r7, #20]
    c8d8:	4618      	mov	r0, r3
    c8da:	f7ff fd75 	bl	c3c8 <__aeabi_f2d>
    c8de:	4602      	mov	r2, r0
    c8e0:	460b      	mov	r3, r1
    c8e2:	4871      	ldr	r0, [pc, #452]	; (caa8 <main+0x330>)
    c8e4:	f001 f95a 	bl	db9c <am_util_stdio_printf>
    am_util_stdio_printf("TRIMMED Offset  = %.3f\n", fTrims[2]);
    c8e8:	69bb      	ldr	r3, [r7, #24]
    c8ea:	4618      	mov	r0, r3
    c8ec:	f7ff fd6c 	bl	c3c8 <__aeabi_f2d>
    c8f0:	4602      	mov	r2, r0
    c8f2:	460b      	mov	r3, r1
    c8f4:	486d      	ldr	r0, [pc, #436]	; (caac <main+0x334>)
    c8f6:	f001 f951 	bl	db9c <am_util_stdio_printf>
    am_util_stdio_printf("Note - these trim values are '%s' values.\n",
    c8fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    c8fe:	2b00      	cmp	r3, #0
    c900:	d001      	beq.n	c906 <main+0x18e>
    c902:	4b6b      	ldr	r3, [pc, #428]	; (cab0 <main+0x338>)
    c904:	e000      	b.n	c908 <main+0x190>
    c906:	4b6b      	ldr	r3, [pc, #428]	; (cab4 <main+0x33c>)
    c908:	486b      	ldr	r0, [pc, #428]	; (cab8 <main+0x340>)
    c90a:	4619      	mov	r1, r3
    c90c:	f001 f946 	bl	db9c <am_util_stdio_printf>
                         bMeasured ? "calibrated" : "uncalibrated default");
    am_util_stdio_printf("\n");
    c910:	4851      	ldr	r0, [pc, #324]	; (ca58 <main+0x2e0>)
    c912:	f001 f943 	bl	db9c <am_util_stdio_printf>

    //
    // Enable the ADC interrupt in the NVIC.
    //
    NVIC_EnableIRQ(ADC_IRQn);
    c916:	2012      	movs	r0, #18
    c918:	f7ff fdfa 	bl	c510 <__NVIC_EnableIRQ>
    am_hal_interrupt_master_enable();
    c91c:	f001 ff9c 	bl	e858 <am_hal_interrupt_master_enable>

    //
    // Enable the ADC interrupts in the ADC.
    //
    am_hal_adc_interrupt_enable(g_ADCHandle, AM_HAL_ADC_INT_WCINC       |
    c920:	4b5f      	ldr	r3, [pc, #380]	; (caa0 <main+0x328>)
    c922:	681b      	ldr	r3, [r3, #0]
    c924:	4618      	mov	r0, r3
    c926:	213f      	movs	r1, #63	; 0x3f
    c928:	f001 fae8 	bl	defc <am_hal_adc_interrupt_enable>
                                             AM_HAL_ADC_INT_CNVCMP);

    //
    // Reset the sample count which will be incremented by the ISR.
    //
    g_ui32SampleCount = 0;
    c92c:	4b63      	ldr	r3, [pc, #396]	; (cabc <main+0x344>)
    c92e:	2200      	movs	r2, #0
    c930:	601a      	str	r2, [r3, #0]

    //
    // Kick Start Timer 3 with an ADC software trigger in REPEAT used.
    //
    am_hal_adc_sw_trigger(g_ADCHandle);
    c932:	4b5b      	ldr	r3, [pc, #364]	; (caa0 <main+0x328>)
    c934:	681b      	ldr	r3, [r3, #0]
    c936:	4618      	mov	r0, r3
    c938:	f001 fb82 	bl	e040 <am_hal_adc_sw_trigger>

    //
    // Track buffer depth for progress messages.
    //
    i32BaseLevelCount = g_ui32SampleCount;
    c93c:	4b5f      	ldr	r3, [pc, #380]	; (cabc <main+0x344>)
    c93e:	681b      	ldr	r3, [r3, #0]
    c940:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (1)
    {
        //
        // Print the battery voltage and temperature for each interrupt
        //
        if (g_ui32SampleCount > i32BaseLevelCount)
    c942:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    c944:	4b5d      	ldr	r3, [pc, #372]	; (cabc <main+0x344>)
    c946:	681b      	ldr	r3, [r3, #0]
    c948:	429a      	cmp	r2, r3
    c94a:	d271      	bcs.n	ca30 <main+0x2b8>
        {
            i32BaseLevelCount = g_ui32SampleCount;
    c94c:	4b5b      	ldr	r3, [pc, #364]	; (cabc <main+0x344>)
    c94e:	681b      	ldr	r3, [r3, #0]
    c950:	63fb      	str	r3, [r7, #60]	; 0x3c

            //
            // Compute the voltage divider output.
            //
            fVBATT = ((float)g_ui16ADCVDD_code) * 3.0f * fReferenceVoltage / (1024.0f / 64.0f);
    c952:	4b5b      	ldr	r3, [pc, #364]	; (cac0 <main+0x348>)
    c954:	881b      	ldrh	r3, [r3, #0]
    c956:	ee07 3a90 	vmov	s15, r3
    c95a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c95e:	eeb0 7a08 	vmov.f32	s14, #8
    c962:	ee27 7a87 	vmul.f32	s14, s15, s14
    c966:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    c96a:	ee67 7a27 	vmul.f32	s15, s14, s15
    c96e:	eeb3 7a00 	vmov.f32	s14, #48	; 0x30
    c972:	eec7 7a87 	vdiv.f32	s15, s15, s14
    c976:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

            //
            // Print the voltage divider output.
            //
            am_util_stdio_printf("VBATT = <%.3f> (0x%04X) ",
    c97a:	6b38      	ldr	r0, [r7, #48]	; 0x30
    c97c:	f7ff fd24 	bl	c3c8 <__aeabi_f2d>
    c980:	4604      	mov	r4, r0
    c982:	460d      	mov	r5, r1
    c984:	4b4e      	ldr	r3, [pc, #312]	; (cac0 <main+0x348>)
    c986:	881b      	ldrh	r3, [r3, #0]
    c988:	9300      	str	r3, [sp, #0]
    c98a:	484e      	ldr	r0, [pc, #312]	; (cac4 <main+0x34c>)
    c98c:	4622      	mov	r2, r4
    c98e:	462b      	mov	r3, r5
    c990:	f001 f904 	bl	db9c <am_util_stdio_printf>
            // Convert and scale the temperature.
            // Temperatures are in Fahrenheit range -40 to 225 degrees.
            // Voltage range is 0.825V to 1.283V
            // First get the ADC voltage corresponding to temperature.
            //
            fADCTempVolts = ((float)g_ui16ADCTEMP_code) * fReferenceVoltage / (1024.0f * 64.0f);
    c994:	4b4c      	ldr	r3, [pc, #304]	; (cac8 <main+0x350>)
    c996:	881b      	ldrh	r3, [r3, #0]
    c998:	ee07 3a90 	vmov	s15, r3
    c99c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    c9a0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    c9a4:	ee67 7a27 	vmul.f32	s15, s14, s15
    c9a8:	ed9f 7a48 	vldr	s14, [pc, #288]	; cacc <main+0x354>
    c9ac:	eec7 7a87 	vdiv.f32	s15, s15, s14
    c9b0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

            //
            // Now call the HAL routine to convert volts to degrees Celsius.
            //
            float fVT[3];
            fVT[0] = fADCTempVolts;
    c9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c9b6:	607b      	str	r3, [r7, #4]
            fVT[1] = 0.0f;
    c9b8:	f04f 0300 	mov.w	r3, #0
    c9bc:	60bb      	str	r3, [r7, #8]
            fVT[2] = -123.456;
    c9be:	4b37      	ldr	r3, [pc, #220]	; (ca9c <main+0x324>)
    c9c0:	60fb      	str	r3, [r7, #12]
//          fADCTempDegreesC = am_hal_adc_volts_to_celsius(fADCTempVolts);
            ui32Retval = am_hal_adc_control(g_ADCHandle, AM_HAL_ADC_REQ_TEMP_CELSIUS_GET, fVT);
    c9c2:	4b37      	ldr	r3, [pc, #220]	; (caa0 <main+0x328>)
    c9c4:	681a      	ldr	r2, [r3, #0]
    c9c6:	1d3b      	adds	r3, r7, #4
    c9c8:	4610      	mov	r0, r2
    c9ca:	2101      	movs	r1, #1
    c9cc:	461a      	mov	r2, r3
    c9ce:	f001 fa0b 	bl	dde8 <am_hal_adc_control>
    c9d2:	62b8      	str	r0, [r7, #40]	; 0x28
            if ( ui32Retval == AM_HAL_STATUS_SUCCESS )
    c9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c9d6:	2b00      	cmp	r3, #0
    c9d8:	d123      	bne.n	ca22 <main+0x2aa>
            {
                fADCTempDegreesC = fVT[1];  // Get the temperature
    c9da:	68bb      	ldr	r3, [r7, #8]
    c9dc:	627b      	str	r3, [r7, #36]	; 0x24

                //
                // print the temperature value in Celsius.
                //
                am_util_stdio_printf("TEMP = %.2f C (0x%04X) ",
    c9de:	6a78      	ldr	r0, [r7, #36]	; 0x24
    c9e0:	f7ff fcf2 	bl	c3c8 <__aeabi_f2d>
    c9e4:	4604      	mov	r4, r0
    c9e6:	460d      	mov	r5, r1
    c9e8:	4b37      	ldr	r3, [pc, #220]	; (cac8 <main+0x350>)
    c9ea:	881b      	ldrh	r3, [r3, #0]
    c9ec:	9300      	str	r3, [sp, #0]
    c9ee:	4838      	ldr	r0, [pc, #224]	; (cad0 <main+0x358>)
    c9f0:	4622      	mov	r2, r4
    c9f2:	462b      	mov	r3, r5
    c9f4:	f001 f8d2 	bl	db9c <am_util_stdio_printf>
                                     fADCTempDegreesC, g_ui16ADCTEMP_code);

                //
                // Print the temperature value in Fahrenheit.
                //
                fTempF = (fADCTempDegreesC * (180.0f / 100.0f)) + 32.0f;
    c9f8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
    c9fc:	ed9f 7a35 	vldr	s14, [pc, #212]	; cad4 <main+0x35c>
    ca00:	ee67 7a87 	vmul.f32	s15, s15, s14
    ca04:	ed9f 7a34 	vldr	s14, [pc, #208]	; cad8 <main+0x360>
    ca08:	ee77 7a87 	vadd.f32	s15, s15, s14
    ca0c:	edc7 7a08 	vstr	s15, [r7, #32]
                am_util_stdio_printf(" %.2f F", fTempF);
    ca10:	6a38      	ldr	r0, [r7, #32]
    ca12:	f7ff fcd9 	bl	c3c8 <__aeabi_f2d>
    ca16:	4602      	mov	r2, r0
    ca18:	460b      	mov	r3, r1
    ca1a:	4830      	ldr	r0, [pc, #192]	; (cadc <main+0x364>)
    ca1c:	f001 f8be 	bl	db9c <am_util_stdio_printf>
    ca20:	e003      	b.n	ca2a <main+0x2b2>
            }
            else
            {
                am_util_stdio_printf("Error: am_haL_adc_control returned %d\n", ui32Retval);
    ca22:	482f      	ldr	r0, [pc, #188]	; (cae0 <main+0x368>)
    ca24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    ca26:	f001 f8b9 	bl	db9c <am_util_stdio_printf>
                am_util_stdio_printf("\n");
                am_hal_adc_batt_load_disable();
                am_devices_led_off(am_bsp_psLEDs, 2);
            }
#else
            am_util_stdio_printf("\n");
    ca2a:	480b      	ldr	r0, [pc, #44]	; (ca58 <main+0x2e0>)
    ca2c:	f001 f8b6 	bl	db9c <am_util_stdio_printf>
        }

        //
        // Sleep here until the next ADC interrupt comes along.
        //
        am_devices_led_off(am_bsp_psLEDs, 0);
    ca30:	4806      	ldr	r0, [pc, #24]	; (ca4c <main+0x2d4>)
    ca32:	2100      	movs	r1, #0
    ca34:	f000 f906 	bl	cc44 <am_devices_led_off>
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    ca38:	2001      	movs	r0, #1
    ca3a:	f002 f84f 	bl	eadc <am_hal_sysctrl_sleep>
        am_devices_led_on(am_bsp_psLEDs, 0);
    ca3e:	4803      	ldr	r0, [pc, #12]	; (ca4c <main+0x2d4>)
    ca40:	2100      	movs	r1, #0
    ca42:	f000 f8c1 	bl	cbc8 <am_devices_led_on>
    }
    ca46:	e77c      	b.n	c942 <main+0x1ca>
    ca48:	0000f0c0 	.word	0x0000f0c0
    ca4c:	1000101c 	.word	0x1000101c
    ca50:	0000f368 	.word	0x0000f368
    ca54:	0000ee90 	.word	0x0000ee90
    ca58:	0000eebc 	.word	0x0000eebc
    ca5c:	40008060 	.word	0x40008060
    ca60:	0000eec0 	.word	0x0000eec0
    ca64:	40008064 	.word	0x40008064
    ca68:	40008068 	.word	0x40008068
    ca6c:	4000806c 	.word	0x4000806c
    ca70:	0000eedc 	.word	0x0000eedc
    ca74:	50010000 	.word	0x50010000
    ca78:	0000eef4 	.word	0x0000eef4
    ca7c:	0000ef08 	.word	0x0000ef08
    ca80:	0000ef1c 	.word	0x0000ef1c
    ca84:	0000ef30 	.word	0x0000ef30
    ca88:	0000ef44 	.word	0x0000ef44
    ca8c:	0000ef58 	.word	0x0000ef58
    ca90:	0000ef6c 	.word	0x0000ef6c
    ca94:	0000ef80 	.word	0x0000ef80
    ca98:	0000ef94 	.word	0x0000ef94
    ca9c:	c2f6e979 	.word	0xc2f6e979
    caa0:	10001034 	.word	0x10001034
    caa4:	0000efa8 	.word	0x0000efa8
    caa8:	0000efc0 	.word	0x0000efc0
    caac:	0000efd8 	.word	0x0000efd8
    cab0:	0000eff0 	.word	0x0000eff0
    cab4:	0000effc 	.word	0x0000effc
    cab8:	0000f014 	.word	0x0000f014
    cabc:	10001158 	.word	0x10001158
    cac0:	1000115e 	.word	0x1000115e
    cac4:	0000f040 	.word	0x0000f040
    cac8:	1000115c 	.word	0x1000115c
    cacc:	47800000 	.word	0x47800000
    cad0:	0000f05c 	.word	0x0000f05c
    cad4:	3fe66666 	.word	0x3fe66666
    cad8:	42000000 	.word	0x42000000
    cadc:	0000f074 	.word	0x0000f074
    cae0:	0000f07c 	.word	0x0000f07c

0000cae4 <am_devices_led_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_init(am_devices_led_t *psLED)
{
    cae4:	b580      	push	{r7, lr}
    cae6:	b082      	sub	sp, #8
    cae8:	af00      	add	r7, sp, #0
    caea:	6078      	str	r0, [r7, #4]
    if ( (psLED == NULL)    ||
    caec:	687b      	ldr	r3, [r7, #4]
    caee:	2b00      	cmp	r3, #0
    caf0:	d003      	beq.n	cafa <am_devices_led_init+0x16>
         (psLED->ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    caf2:	687b      	ldr	r3, [r7, #4]
    caf4:	681b      	ldr	r3, [r3, #0]
//
//*****************************************************************************
void
am_devices_led_init(am_devices_led_t *psLED)
{
    if ( (psLED == NULL)    ||
    caf6:	2b31      	cmp	r3, #49	; 0x31
    caf8:	d900      	bls.n	cafc <am_devices_led_init+0x18>
         (psLED->ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    {
        return;
    cafa:	e03e      	b.n	cb7a <am_devices_led_init+0x96>

#if AM_APOLLO3_GPIO
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLED->ui32Polarity )
    cafc:	687b      	ldr	r3, [r7, #4]
    cafe:	685b      	ldr	r3, [r3, #4]
    cb00:	f003 0302 	and.w	r3, r3, #2
    cb04:	2b00      	cmp	r3, #0
    cb06:	d01c      	beq.n	cb42 <am_devices_led_init+0x5e>
    {
        //
        // Configure the pin as a push-pull GPIO output.
        //
        am_hal_gpio_pinconfig(psLED->ui32GPIONumber, g_AM_HAL_GPIO_OUTPUT);
    cb08:	687b      	ldr	r3, [r7, #4]
    cb0a:	681a      	ldr	r2, [r3, #0]
    cb0c:	4b1c      	ldr	r3, [pc, #112]	; (cb80 <am_devices_led_init+0x9c>)
    cb0e:	4610      	mov	r0, r2
    cb10:	6819      	ldr	r1, [r3, #0]
    cb12:	f001 fce9 	bl	e4e8 <am_hal_gpio_pinconfig>
        // state.  Note that for Apollo3 GPIOs in push-pull mode, the output
        // enable, normally a tri-state control, instead functions as an enable
        // for Fast GPIO. Its state does not matter on previous chips, so for
        // normal GPIO usage on Apollo3, it must be disabled.
        //
        am_hal_gpio_state_write(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE);
    cb16:	687b      	ldr	r3, [r7, #4]
    cb18:	681b      	ldr	r3, [r3, #0]
    cb1a:	4618      	mov	r0, r3
    cb1c:	2103      	movs	r1, #3
    cb1e:	f001 fe57 	bl	e7d0 <am_hal_gpio_state_write>
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    cb22:	687b      	ldr	r3, [r7, #4]
    cb24:	681a      	ldr	r2, [r3, #0]
                                psLED->ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    cb26:	687b      	ldr	r3, [r7, #4]
    cb28:	685b      	ldr	r3, [r3, #4]
    cb2a:	f003 0301 	and.w	r3, r3, #1
        // enable, normally a tri-state control, instead functions as an enable
        // for Fast GPIO. Its state does not matter on previous chips, so for
        // normal GPIO usage on Apollo3, it must be disabled.
        //
        am_hal_gpio_state_write(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE);
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    cb2e:	2b00      	cmp	r3, #0
    cb30:	bf14      	ite	ne
    cb32:	2301      	movne	r3, #1
    cb34:	2300      	moveq	r3, #0
    cb36:	b2db      	uxtb	r3, r3
    cb38:	4610      	mov	r0, r2
    cb3a:	4619      	mov	r1, r3
    cb3c:	f001 fe48 	bl	e7d0 <am_hal_gpio_state_write>
    cb40:	e01b      	b.n	cb7a <am_devices_led_init+0x96>
    else
    {
        //
        // Configure the pin as a tri-state GPIO.
        //
        am_hal_gpio_pinconfig(psLED->ui32GPIONumber, g_AM_HAL_GPIO_TRISTATE);
    cb42:	687b      	ldr	r3, [r7, #4]
    cb44:	681a      	ldr	r2, [r3, #0]
    cb46:	4b0f      	ldr	r3, [pc, #60]	; (cb84 <am_devices_led_init+0xa0>)
    cb48:	4610      	mov	r0, r2
    cb4a:	6819      	ldr	r1, [r3, #0]
    cb4c:	f001 fccc 	bl	e4e8 <am_hal_gpio_pinconfig>

        //
        // Disable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_state_write(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE);
    cb50:	687b      	ldr	r3, [r7, #4]
    cb52:	681b      	ldr	r3, [r3, #0]
    cb54:	4618      	mov	r0, r3
    cb56:	2103      	movs	r1, #3
    cb58:	f001 fe3a 	bl	e7d0 <am_hal_gpio_state_write>
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    cb5c:	687b      	ldr	r3, [r7, #4]
    cb5e:	681a      	ldr	r2, [r3, #0]
                                psLED->ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    cb60:	687b      	ldr	r3, [r7, #4]
    cb62:	685b      	ldr	r3, [r3, #4]
    cb64:	f003 0301 	and.w	r3, r3, #1
        //
        // Disable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_state_write(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE);
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    cb68:	2b00      	cmp	r3, #0
    cb6a:	bf14      	ite	ne
    cb6c:	2301      	movne	r3, #1
    cb6e:	2300      	moveq	r3, #0
    cb70:	b2db      	uxtb	r3, r3
    cb72:	4610      	mov	r0, r2
    cb74:	4619      	mov	r1, r3
    cb76:	f001 fe2b 	bl	e7d0 <am_hal_gpio_state_write>
        am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
                                    psLED->ui32Polarity &
                                    AM_DEVICES_LED_POL_POLARITY_M );
    }
#endif // AM_APOLLO3_GPIO
}
    cb7a:	3708      	adds	r7, #8
    cb7c:	46bd      	mov	sp, r7
    cb7e:	bd80      	pop	{r7, pc}
    cb80:	0000f1fc 	.word	0x0000f1fc
    cb84:	0000f0c4 	.word	0x0000f0c4

0000cb88 <am_devices_led_array_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_array_init(am_devices_led_t *psLEDs, uint32_t ui32NumLEDs)
{
    cb88:	b580      	push	{r7, lr}
    cb8a:	b084      	sub	sp, #16
    cb8c:	af00      	add	r7, sp, #0
    cb8e:	6078      	str	r0, [r7, #4]
    cb90:	6039      	str	r1, [r7, #0]
    uint32_t i;

    if ( (psLEDs == NULL)                       ||
    cb92:	687b      	ldr	r3, [r7, #4]
    cb94:	2b00      	cmp	r3, #0
    cb96:	d002      	beq.n	cb9e <am_devices_led_array_init+0x16>
    cb98:	683b      	ldr	r3, [r7, #0]
    cb9a:	2b1f      	cmp	r3, #31
    cb9c:	d900      	bls.n	cba0 <am_devices_led_array_init+0x18>
         (ui32NumLEDs > MAX_LEDS) )
    {
        return;
    cb9e:	e010      	b.n	cbc2 <am_devices_led_array_init+0x3a>
    }

    //
    // Loop through the list of LEDs, configuring each one individually.
    //
    for ( i = 0; i < ui32NumLEDs; i++ )
    cba0:	2300      	movs	r3, #0
    cba2:	60fb      	str	r3, [r7, #12]
    cba4:	e009      	b.n	cbba <am_devices_led_array_init+0x32>
    {
        am_devices_led_init(psLEDs + i);
    cba6:	68fb      	ldr	r3, [r7, #12]
    cba8:	00db      	lsls	r3, r3, #3
    cbaa:	687a      	ldr	r2, [r7, #4]
    cbac:	4413      	add	r3, r2
    cbae:	4618      	mov	r0, r3
    cbb0:	f7ff ff98 	bl	cae4 <am_devices_led_init>
    }

    //
    // Loop through the list of LEDs, configuring each one individually.
    //
    for ( i = 0; i < ui32NumLEDs; i++ )
    cbb4:	68fb      	ldr	r3, [r7, #12]
    cbb6:	3301      	adds	r3, #1
    cbb8:	60fb      	str	r3, [r7, #12]
    cbba:	68fa      	ldr	r2, [r7, #12]
    cbbc:	683b      	ldr	r3, [r7, #0]
    cbbe:	429a      	cmp	r2, r3
    cbc0:	d3f1      	bcc.n	cba6 <am_devices_led_array_init+0x1e>
    {
        am_devices_led_init(psLEDs + i);
    }
}
    cbc2:	3710      	adds	r7, #16
    cbc4:	46bd      	mov	sp, r7
    cbc6:	bd80      	pop	{r7, pc}

0000cbc8 <am_devices_led_on>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_on(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    cbc8:	b580      	push	{r7, lr}
    cbca:	b082      	sub	sp, #8
    cbcc:	af00      	add	r7, sp, #0
    cbce:	6078      	str	r0, [r7, #4]
    cbd0:	6039      	str	r1, [r7, #0]
    if ( (psLEDs == NULL)                       ||
    cbd2:	687b      	ldr	r3, [r7, #4]
    cbd4:	2b00      	cmp	r3, #0
    cbd6:	d009      	beq.n	cbec <am_devices_led_on+0x24>
    cbd8:	683b      	ldr	r3, [r7, #0]
    cbda:	2b1e      	cmp	r3, #30
    cbdc:	d806      	bhi.n	cbec <am_devices_led_on+0x24>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    cbde:	683b      	ldr	r3, [r7, #0]
    cbe0:	00db      	lsls	r3, r3, #3
    cbe2:	687a      	ldr	r2, [r7, #4]
    cbe4:	4413      	add	r3, r2
    cbe6:	681b      	ldr	r3, [r3, #0]
//*****************************************************************************
void
am_devices_led_on(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    if ( (psLEDs == NULL)                       ||
         (ui32LEDNum >= MAX_LEDS)               ||
    cbe8:	2b31      	cmp	r3, #49	; 0x31
    cbea:	d900      	bls.n	cbee <am_devices_led_on+0x26>
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    {
        return;
    cbec:	e027      	b.n	cc3e <am_devices_led_on+0x76>

#if AM_APOLLO3_GPIO
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    cbee:	683b      	ldr	r3, [r7, #0]
    cbf0:	00db      	lsls	r3, r3, #3
    cbf2:	687a      	ldr	r2, [r7, #4]
    cbf4:	4413      	add	r3, r2
    cbf6:	685b      	ldr	r3, [r3, #4]
    cbf8:	f003 0302 	and.w	r3, r3, #2
    cbfc:	2b00      	cmp	r3, #0
    cbfe:	d015      	beq.n	cc2c <am_devices_led_on+0x64>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    cc00:	683b      	ldr	r3, [r7, #0]
    cc02:	00db      	lsls	r3, r3, #3
    cc04:	687a      	ldr	r2, [r7, #4]
    cc06:	4413      	add	r3, r2
    cc08:	6819      	ldr	r1, [r3, #0]
                                psLEDs[ui32LEDNum].ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    cc0a:	683b      	ldr	r3, [r7, #0]
    cc0c:	00db      	lsls	r3, r3, #3
    cc0e:	687a      	ldr	r2, [r7, #4]
    cc10:	4413      	add	r3, r2
    cc12:	685b      	ldr	r3, [r3, #4]
    cc14:	f003 0301 	and.w	r3, r3, #1
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    cc18:	2b00      	cmp	r3, #0
    cc1a:	bf14      	ite	ne
    cc1c:	2301      	movne	r3, #1
    cc1e:	2300      	moveq	r3, #0
    cc20:	b2db      	uxtb	r3, r3
    cc22:	4608      	mov	r0, r1
    cc24:	4619      	mov	r1, r3
    cc26:	f001 fdd3 	bl	e7d0 <am_hal_gpio_state_write>
    cc2a:	e008      	b.n	cc3e <am_devices_led_on+0x76>
    else
    {
        //
        // Turn on the output driver for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    cc2c:	683b      	ldr	r3, [r7, #0]
    cc2e:	00db      	lsls	r3, r3, #3
    cc30:	687a      	ldr	r2, [r7, #4]
    cc32:	4413      	add	r3, r2
    cc34:	681b      	ldr	r3, [r3, #0]
    cc36:	4618      	mov	r0, r3
    cc38:	2104      	movs	r1, #4
    cc3a:	f001 fdc9 	bl	e7d0 <am_hal_gpio_state_write>
        // Turn on the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
    }
#endif // AM_APOLLO3_GPIO
}
    cc3e:	3708      	adds	r7, #8
    cc40:	46bd      	mov	sp, r7
    cc42:	bd80      	pop	{r7, pc}

0000cc44 <am_devices_led_off>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_off(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    cc44:	b580      	push	{r7, lr}
    cc46:	b082      	sub	sp, #8
    cc48:	af00      	add	r7, sp, #0
    cc4a:	6078      	str	r0, [r7, #4]
    cc4c:	6039      	str	r1, [r7, #0]
    if ( (psLEDs == NULL)                       ||
    cc4e:	687b      	ldr	r3, [r7, #4]
    cc50:	2b00      	cmp	r3, #0
    cc52:	d009      	beq.n	cc68 <am_devices_led_off+0x24>
    cc54:	683b      	ldr	r3, [r7, #0]
    cc56:	2b1e      	cmp	r3, #30
    cc58:	d806      	bhi.n	cc68 <am_devices_led_off+0x24>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    cc5a:	683b      	ldr	r3, [r7, #0]
    cc5c:	00db      	lsls	r3, r3, #3
    cc5e:	687a      	ldr	r2, [r7, #4]
    cc60:	4413      	add	r3, r2
    cc62:	681b      	ldr	r3, [r3, #0]
//*****************************************************************************
void
am_devices_led_off(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    if ( (psLEDs == NULL)                       ||
         (ui32LEDNum >= MAX_LEDS)               ||
    cc64:	2b31      	cmp	r3, #49	; 0x31
    cc66:	d900      	bls.n	cc6a <am_devices_led_off+0x26>
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    {
        return;
    cc68:	e027      	b.n	ccba <am_devices_led_off+0x76>

#if AM_APOLLO3_GPIO
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    cc6a:	683b      	ldr	r3, [r7, #0]
    cc6c:	00db      	lsls	r3, r3, #3
    cc6e:	687a      	ldr	r2, [r7, #4]
    cc70:	4413      	add	r3, r2
    cc72:	685b      	ldr	r3, [r3, #4]
    cc74:	f003 0302 	and.w	r3, r3, #2
    cc78:	2b00      	cmp	r3, #0
    cc7a:	d015      	beq.n	cca8 <am_devices_led_off+0x64>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    cc7c:	683b      	ldr	r3, [r7, #0]
    cc7e:	00db      	lsls	r3, r3, #3
    cc80:	687a      	ldr	r2, [r7, #4]
    cc82:	4413      	add	r3, r2
    cc84:	6819      	ldr	r1, [r3, #0]
                                psLEDs[ui32LEDNum].ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    cc86:	683b      	ldr	r3, [r7, #0]
    cc88:	00db      	lsls	r3, r3, #3
    cc8a:	687a      	ldr	r2, [r7, #4]
    cc8c:	4413      	add	r3, r2
    cc8e:	685b      	ldr	r3, [r3, #4]
    cc90:	f003 0301 	and.w	r3, r3, #1
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    cc94:	2b00      	cmp	r3, #0
    cc96:	bf0c      	ite	eq
    cc98:	2301      	moveq	r3, #1
    cc9a:	2300      	movne	r3, #0
    cc9c:	b2db      	uxtb	r3, r3
    cc9e:	4608      	mov	r0, r1
    cca0:	4619      	mov	r1, r3
    cca2:	f001 fd95 	bl	e7d0 <am_hal_gpio_state_write>
    cca6:	e008      	b.n	ccba <am_devices_led_off+0x76>
    else
    {
        //
        // Turn off the output driver for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    cca8:	683b      	ldr	r3, [r7, #0]
    ccaa:	00db      	lsls	r3, r3, #3
    ccac:	687a      	ldr	r2, [r7, #4]
    ccae:	4413      	add	r3, r2
    ccb0:	681b      	ldr	r3, [r3, #0]
    ccb2:	4618      	mov	r0, r3
    ccb4:	2103      	movs	r1, #3
    ccb6:	f001 fd8b 	bl	e7d0 <am_hal_gpio_state_write>
        // Turn off the output driver for the LED.
        //
        am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
    }
#endif // AM_APOLLO3_GPIO
}
    ccba:	3708      	adds	r7, #8
    ccbc:	46bd      	mov	sp, r7
    ccbe:	bd80      	pop	{r7, pc}

0000ccc0 <am_devices_led_toggle>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_toggle(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    ccc0:	b580      	push	{r7, lr}
    ccc2:	b084      	sub	sp, #16
    ccc4:	af00      	add	r7, sp, #0
    ccc6:	6078      	str	r0, [r7, #4]
    ccc8:	6039      	str	r1, [r7, #0]
    if ( (psLEDs == NULL)                       ||
    ccca:	687b      	ldr	r3, [r7, #4]
    cccc:	2b00      	cmp	r3, #0
    ccce:	d009      	beq.n	cce4 <am_devices_led_toggle+0x24>
    ccd0:	683b      	ldr	r3, [r7, #0]
    ccd2:	2b1e      	cmp	r3, #30
    ccd4:	d806      	bhi.n	cce4 <am_devices_led_toggle+0x24>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    ccd6:	683b      	ldr	r3, [r7, #0]
    ccd8:	00db      	lsls	r3, r3, #3
    ccda:	687a      	ldr	r2, [r7, #4]
    ccdc:	4413      	add	r3, r2
    ccde:	681b      	ldr	r3, [r3, #0]
//*****************************************************************************
void
am_devices_led_toggle(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    if ( (psLEDs == NULL)                       ||
         (ui32LEDNum >= MAX_LEDS)               ||
    cce0:	2b31      	cmp	r3, #49	; 0x31
    cce2:	d900      	bls.n	cce6 <am_devices_led_toggle+0x26>
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    {
        return;
    cce4:	e038      	b.n	cd58 <am_devices_led_toggle+0x98>

#if AM_APOLLO3_GPIO
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    cce6:	683b      	ldr	r3, [r7, #0]
    cce8:	00db      	lsls	r3, r3, #3
    ccea:	687a      	ldr	r2, [r7, #4]
    ccec:	4413      	add	r3, r2
    ccee:	685b      	ldr	r3, [r3, #4]
    ccf0:	f003 0302 	and.w	r3, r3, #2
    ccf4:	2b00      	cmp	r3, #0
    ccf6:	d009      	beq.n	cd0c <am_devices_led_toggle+0x4c>
    {
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    ccf8:	683b      	ldr	r3, [r7, #0]
    ccfa:	00db      	lsls	r3, r3, #3
    ccfc:	687a      	ldr	r2, [r7, #4]
    ccfe:	4413      	add	r3, r2
    cd00:	681b      	ldr	r3, [r3, #0]
    cd02:	4618      	mov	r0, r3
    cd04:	2102      	movs	r1, #2
    cd06:	f001 fd63 	bl	e7d0 <am_hal_gpio_state_write>
    cd0a:	e025      	b.n	cd58 <am_devices_led_toggle+0x98>
        uint32_t ui32Ret, ui32Value;

        //
        // Check to see if the LED pin is enabled.
        //
        ui32Ret = am_hal_gpio_state_read(psLEDs[ui32LEDNum].ui32GPIONumber,
    cd0c:	683b      	ldr	r3, [r7, #0]
    cd0e:	00db      	lsls	r3, r3, #3
    cd10:	687a      	ldr	r2, [r7, #4]
    cd12:	4413      	add	r3, r2
    cd14:	681a      	ldr	r2, [r3, #0]
    cd16:	f107 0308 	add.w	r3, r7, #8
    cd1a:	4610      	mov	r0, r2
    cd1c:	2102      	movs	r1, #2
    cd1e:	461a      	mov	r2, r3
    cd20:	f001 fd24 	bl	e76c <am_hal_gpio_state_read>
    cd24:	60f8      	str	r0, [r7, #12]
                                         AM_HAL_GPIO_ENABLE_READ, &ui32Value);

        if ( ui32Ret == AM_HAL_STATUS_SUCCESS )
    cd26:	68fb      	ldr	r3, [r7, #12]
    cd28:	2b00      	cmp	r3, #0
    cd2a:	d115      	bne.n	cd58 <am_devices_led_toggle+0x98>
        {
            if ( ui32Value )
    cd2c:	68bb      	ldr	r3, [r7, #8]
    cd2e:	2b00      	cmp	r3, #0
    cd30:	d009      	beq.n	cd46 <am_devices_led_toggle+0x86>
            {
                //
                // If it was enabled, turn if off.
                //
                am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    cd32:	683b      	ldr	r3, [r7, #0]
    cd34:	00db      	lsls	r3, r3, #3
    cd36:	687a      	ldr	r2, [r7, #4]
    cd38:	4413      	add	r3, r2
    cd3a:	681b      	ldr	r3, [r3, #0]
    cd3c:	4618      	mov	r0, r3
    cd3e:	2103      	movs	r1, #3
    cd40:	f001 fd46 	bl	e7d0 <am_hal_gpio_state_write>
    cd44:	e008      	b.n	cd58 <am_devices_led_toggle+0x98>
            else
            {
                //
                // If it was not enabled, turn it on.
                //
                am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    cd46:	683b      	ldr	r3, [r7, #0]
    cd48:	00db      	lsls	r3, r3, #3
    cd4a:	687a      	ldr	r2, [r7, #4]
    cd4c:	4413      	add	r3, r2
    cd4e:	681b      	ldr	r3, [r3, #0]
    cd50:	4618      	mov	r0, r3
    cd52:	2104      	movs	r1, #4
    cd54:	f001 fd3c 	bl	e7d0 <am_hal_gpio_state_write>
            //
            am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
        }
    }
#endif // AM_APOLLO3_GPIO
}
    cd58:	3710      	adds	r7, #16
    cd5a:	46bd      	mov	sp, r7
    cd5c:	bd80      	pop	{r7, pc}
    cd5e:	bf00      	nop

0000cd60 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    cd60:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    cd62:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    cd66:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    cd68:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    cd6c:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    cd70:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    cd74:	f000 f808 	bl	cd88 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    cd78:	bd01      	pop	{r0, pc}
}
    cd7a:	4618      	mov	r0, r3

0000cd7c <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    cd7c:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    cd7e:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    cd80:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    cd82:	4770      	bx	lr
}
    cd84:	4618      	mov	r0, r3
    cd86:	bf00      	nop

0000cd88 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    cd88:	b580      	push	{r7, lr}
    cd8a:	b096      	sub	sp, #88	; 0x58
    cd8c:	af00      	add	r7, sp, #0
    cd8e:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    cd90:	f107 030c 	add.w	r3, r7, #12
    cd94:	2200      	movs	r2, #0
    cd96:	601a      	str	r2, [r3, #0]
    cd98:	3304      	adds	r3, #4
    cd9a:	2200      	movs	r2, #0
    cd9c:	601a      	str	r2, [r3, #0]
    cd9e:	3304      	adds	r3, #4
    cda0:	2200      	movs	r2, #0
    cda2:	601a      	str	r2, [r3, #0]
    cda4:	3304      	adds	r3, #4
    cda6:	2200      	movs	r2, #0
    cda8:	601a      	str	r2, [r3, #0]
    cdaa:	3304      	adds	r3, #4
    cdac:	2200      	movs	r2, #0
    cdae:	601a      	str	r2, [r3, #0]
    cdb0:	3304      	adds	r3, #4
    cdb2:	2200      	movs	r2, #0
    cdb4:	601a      	str	r2, [r3, #0]
    cdb6:	3304      	adds	r3, #4

    uint32_t u32Mask = 0;
    cdb8:	2300      	movs	r3, #0
    cdba:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    cdbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    cdbe:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    cdc0:	4b2e      	ldr	r3, [pc, #184]	; (ce7c <am_util_faultisr_collect_data+0xf4>)
    cdc2:	681b      	ldr	r3, [r3, #0]
    cdc4:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    cdc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    cdc8:	b2db      	uxtb	r3, r3
    cdca:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    cdce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    cdd0:	0a1b      	lsrs	r3, r3, #8
    cdd2:	b2db      	uxtb	r3, r3
    cdd4:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    cdd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    cdda:	0c1b      	lsrs	r3, r3, #16
    cddc:	b29b      	uxth	r3, r3
    cdde:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    cde2:	4b27      	ldr	r3, [pc, #156]	; (ce80 <am_util_faultisr_collect_data+0xf8>)
    cde4:	681b      	ldr	r3, [r3, #0]
    cde6:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    cde8:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
    cdec:	b2db      	uxtb	r3, r3
    cdee:	f003 0302 	and.w	r3, r3, #2
    cdf2:	2b00      	cmp	r3, #0
    cdf4:	d005      	beq.n	ce02 <am_util_faultisr_collect_data+0x7a>
    cdf6:	2006      	movs	r0, #6
    cdf8:	6879      	ldr	r1, [r7, #4]
    cdfa:	f7ff ffbf 	bl	cd7c <getStackedReg>
    cdfe:	4603      	mov	r3, r0
    ce00:	e001      	b.n	ce06 <am_util_faultisr_collect_data+0x7e>
    ce02:	f04f 33ff 	mov.w	r3, #4294967295
    ce06:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    ce08:	2000      	movs	r0, #0
    ce0a:	6879      	ldr	r1, [r7, #4]
    ce0c:	f7ff ffb6 	bl	cd7c <getStackedReg>
    ce10:	4603      	mov	r3, r0
    ce12:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    ce14:	2001      	movs	r0, #1
    ce16:	6879      	ldr	r1, [r7, #4]
    ce18:	f7ff ffb0 	bl	cd7c <getStackedReg>
    ce1c:	4603      	mov	r3, r0
    ce1e:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    ce20:	2002      	movs	r0, #2
    ce22:	6879      	ldr	r1, [r7, #4]
    ce24:	f7ff ffaa 	bl	cd7c <getStackedReg>
    ce28:	4603      	mov	r3, r0
    ce2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    ce2c:	2003      	movs	r0, #3
    ce2e:	6879      	ldr	r1, [r7, #4]
    ce30:	f7ff ffa4 	bl	cd7c <getStackedReg>
    ce34:	4603      	mov	r3, r0
    ce36:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    ce38:	2004      	movs	r0, #4
    ce3a:	6879      	ldr	r1, [r7, #4]
    ce3c:	f7ff ff9e 	bl	cd7c <getStackedReg>
    ce40:	4603      	mov	r3, r0
    ce42:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    ce44:	2005      	movs	r0, #5
    ce46:	6879      	ldr	r1, [r7, #4]
    ce48:	f7ff ff98 	bl	cd7c <getStackedReg>
    ce4c:	4603      	mov	r3, r0
    ce4e:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    ce50:	2006      	movs	r0, #6
    ce52:	6879      	ldr	r1, [r7, #4]
    ce54:	f7ff ff92 	bl	cd7c <getStackedReg>
    ce58:	4603      	mov	r3, r0
    ce5a:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    ce5c:	2007      	movs	r0, #7
    ce5e:	6879      	ldr	r1, [r7, #4]
    ce60:	f7ff ff8c 	bl	cd7c <getStackedReg>
    ce64:	4603      	mov	r3, r0
    ce66:	643b      	str	r3, [r7, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    ce68:	f107 030c 	add.w	r3, r7, #12
    ce6c:	2002      	movs	r0, #2
    ce6e:	4619      	mov	r1, r3
    ce70:	f001 fcfe 	bl	e870 <am_hal_mcuctrl_info_get>
    }


#endif

    u32Mask = 0;
    ce74:	2300      	movs	r3, #0
    ce76:	657b      	str	r3, [r7, #84]	; 0x54
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    {
    }
    ce78:	e7fe      	b.n	ce78 <am_util_faultisr_collect_data+0xf0>
    ce7a:	bf00      	nop
    ce7c:	e000ed28 	.word	0xe000ed28
    ce80:	e000ed38 	.word	0xe000ed38

0000ce84 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    ce84:	b480      	push	{r7}
    ce86:	b083      	sub	sp, #12
    ce88:	af00      	add	r7, sp, #0
    ce8a:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
    ce8c:	4a03      	ldr	r2, [pc, #12]	; (ce9c <am_util_stdio_printf_init+0x18>)
    ce8e:	687b      	ldr	r3, [r7, #4]
    ce90:	6013      	str	r3, [r2, #0]
}
    ce92:	370c      	adds	r7, #12
    ce94:	46bd      	mov	sp, r7
    ce96:	f85d 7b04 	ldr.w	r7, [sp], #4
    ce9a:	4770      	bx	lr
    ce9c:	10001160 	.word	0x10001160

0000cea0 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    cea0:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
    cea4:	b097      	sub	sp, #92	; 0x5c
    cea6:	af00      	add	r7, sp, #0
    cea8:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    ceac:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
    ceb0:	001c      	movs	r4, r3
    ceb2:	2500      	movs	r5, #0
    ceb4:	ea54 0305 	orrs.w	r3, r4, r5
    ceb8:	f000 809e 	beq.w	cff8 <divu64_10+0x158>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    cebc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
    cec0:	0859      	lsrs	r1, r3, #1
    cec2:	ea4f 0032 	mov.w	r0, r2, rrx
    cec6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
    ceca:	ea4f 0892 	mov.w	r8, r2, lsr #2
    cece:	ea48 7883 	orr.w	r8, r8, r3, lsl #30
    ced2:	ea4f 0993 	mov.w	r9, r3, lsr #2
    ced6:	eb10 0208 	adds.w	r2, r0, r8
    ceda:	eb41 0309 	adc.w	r3, r1, r9
    cede:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
    cee2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
    cee6:	ea4f 1a12 	mov.w	sl, r2, lsr #4
    ceea:	ea4a 7a03 	orr.w	sl, sl, r3, lsl #28
    ceee:	ea4f 1b13 	mov.w	fp, r3, lsr #4
    cef2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
    cef6:	eb12 020a 	adds.w	r2, r2, sl
    cefa:	eb43 030b 	adc.w	r3, r3, fp
    cefe:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
    cf02:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
    cf06:	0a11      	lsrs	r1, r2, #8
    cf08:	62b9      	str	r1, [r7, #40]	; 0x28
    cf0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    cf0c:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
    cf10:	62b9      	str	r1, [r7, #40]	; 0x28
    cf12:	0a1b      	lsrs	r3, r3, #8
    cf14:	62fb      	str	r3, [r7, #44]	; 0x2c
    cf16:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
    cf1a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
    cf1e:	1880      	adds	r0, r0, r2
    cf20:	eb41 0103 	adc.w	r1, r1, r3
    cf24:	4602      	mov	r2, r0
    cf26:	460b      	mov	r3, r1
    cf28:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
    cf2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
    cf30:	0c11      	lsrs	r1, r2, #16
    cf32:	6239      	str	r1, [r7, #32]
    cf34:	6a39      	ldr	r1, [r7, #32]
    cf36:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    cf3a:	6239      	str	r1, [r7, #32]
    cf3c:	0c1b      	lsrs	r3, r3, #16
    cf3e:	627b      	str	r3, [r7, #36]	; 0x24
    cf40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
    cf44:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
    cf48:	1880      	adds	r0, r0, r2
    cf4a:	eb41 0103 	adc.w	r1, r1, r3
    cf4e:	4602      	mov	r2, r0
    cf50:	460b      	mov	r3, r1
    cf52:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
    cf56:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
    cf5a:	001b      	movs	r3, r3
    cf5c:	603b      	str	r3, [r7, #0]
    cf5e:	2300      	movs	r3, #0
    cf60:	607b      	str	r3, [r7, #4]
    cf62:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
    cf66:	e9d7 0100 	ldrd	r0, r1, [r7]
    cf6a:	1880      	adds	r0, r0, r2
    cf6c:	eb41 0103 	adc.w	r1, r1, r3
    cf70:	4602      	mov	r2, r0
    cf72:	460b      	mov	r3, r1
    cf74:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
        q64 >>= 3;
    cf78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
    cf7c:	08d1      	lsrs	r1, r2, #3
    cf7e:	6139      	str	r1, [r7, #16]
    cf80:	6939      	ldr	r1, [r7, #16]
    cf82:	ea41 7143 	orr.w	r1, r1, r3, lsl #29
    cf86:	6139      	str	r1, [r7, #16]
    cf88:	08db      	lsrs	r3, r3, #3
    cf8a:	617b      	str	r3, [r7, #20]
    cf8c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    cf90:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
    cf94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
    cf98:	1892      	adds	r2, r2, r2
    cf9a:	eb43 0303 	adc.w	r3, r3, r3
    cf9e:	0099      	lsls	r1, r3, #2
    cfa0:	60f9      	str	r1, [r7, #12]
    cfa2:	68f9      	ldr	r1, [r7, #12]
    cfa4:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
    cfa8:	60f9      	str	r1, [r7, #12]
    cfaa:	0091      	lsls	r1, r2, #2
    cfac:	60b9      	str	r1, [r7, #8]
    cfae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    cfb2:	1880      	adds	r0, r0, r2
    cfb4:	eb41 0103 	adc.w	r1, r1, r3
    cfb8:	4602      	mov	r2, r0
    cfba:	460b      	mov	r3, r1
    cfbc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
    cfc0:	1a82      	subs	r2, r0, r2
    cfc2:	eb61 0303 	sbc.w	r3, r1, r3
    cfc6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
    cfca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
    cfce:	3206      	adds	r2, #6
    cfd0:	f143 0300 	adc.w	r3, r3, #0
    cfd4:	0911      	lsrs	r1, r2, #4
    cfd6:	61b9      	str	r1, [r7, #24]
    cfd8:	69b9      	ldr	r1, [r7, #24]
    cfda:	ea41 7103 	orr.w	r1, r1, r3, lsl #28
    cfde:	61b9      	str	r1, [r7, #24]
    cfe0:	091b      	lsrs	r3, r3, #4
    cfe2:	61fb      	str	r3, [r7, #28]
    cfe4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
    cfe8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
    cfec:	1880      	adds	r0, r0, r2
    cfee:	eb41 0103 	adc.w	r1, r1, r3
    cff2:	4602      	mov	r2, r0
    cff4:	460b      	mov	r3, r1
    cff6:	e02a      	b.n	d04e <divu64_10+0x1ae>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    cff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    cffa:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
    cffc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cffe:	085a      	lsrs	r2, r3, #1
    d000:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d002:	089b      	lsrs	r3, r3, #2
    d004:	4413      	add	r3, r2
    d006:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
    d008:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d00a:	091b      	lsrs	r3, r3, #4
    d00c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    d00e:	4413      	add	r3, r2
    d010:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
    d012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d014:	0a1b      	lsrs	r3, r3, #8
    d016:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    d018:	4413      	add	r3, r2
    d01a:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
    d01c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d01e:	0c1b      	lsrs	r3, r3, #16
    d020:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    d022:	4413      	add	r3, r2
    d024:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
    d026:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d028:	08db      	lsrs	r3, r3, #3
    d02a:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
    d02c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    d02e:	4613      	mov	r3, r2
    d030:	009b      	lsls	r3, r3, #2
    d032:	4413      	add	r3, r2
    d034:	005b      	lsls	r3, r3, #1
    d036:	461a      	mov	r2, r3
    d038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d03a:	1a9b      	subs	r3, r3, r2
    d03c:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    d03e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d040:	3306      	adds	r3, #6
    d042:	091a      	lsrs	r2, r3, #4
    d044:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d046:	4413      	add	r3, r2
    d048:	461a      	mov	r2, r3
    d04a:	f04f 0300 	mov.w	r3, #0
    }
}
    d04e:	4610      	mov	r0, r2
    d050:	4619      	mov	r1, r3
    d052:	375c      	adds	r7, #92	; 0x5c
    d054:	46bd      	mov	sp, r7
    d056:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
    d05a:	4770      	bx	lr

0000d05c <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    d05c:	b580      	push	{r7, lr}
    d05e:	b084      	sub	sp, #16
    d060:	af00      	add	r7, sp, #0
    d062:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
    d066:	683a      	ldr	r2, [r7, #0]
    d068:	687b      	ldr	r3, [r7, #4]
    d06a:	4313      	orrs	r3, r2
    d06c:	2b00      	cmp	r3, #0
    d06e:	bf0c      	ite	eq
    d070:	2301      	moveq	r3, #1
    d072:	2300      	movne	r3, #0
    d074:	b2db      	uxtb	r3, r3
    d076:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
    d078:	e008      	b.n	d08c <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    d07a:	e9d7 0100 	ldrd	r0, r1, [r7]
    d07e:	f7ff ff0f 	bl	cea0 <divu64_10>
    d082:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
    d086:	68fb      	ldr	r3, [r7, #12]
    d088:	3301      	adds	r3, #1
    d08a:	60fb      	str	r3, [r7, #12]
static int
ndigits_in_u64(uint64_t ui64Val)
{
    int iNDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
    d08c:	e9d7 2300 	ldrd	r2, r3, [r7]
    d090:	4313      	orrs	r3, r2
    d092:	d1f2      	bne.n	d07a <ndigits_in_u64+0x1e>
        //
        ui64Val = divu64_10(ui64Val);
        ++iNDigits;
    }

    return iNDigits;
    d094:	68fb      	ldr	r3, [r7, #12]
}
    d096:	4618      	mov	r0, r3
    d098:	3710      	adds	r7, #16
    d09a:	46bd      	mov	sp, r7
    d09c:	bd80      	pop	{r7, pc}
    d09e:	bf00      	nop

0000d0a0 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    d0a0:	b580      	push	{r7, lr}
    d0a2:	b082      	sub	sp, #8
    d0a4:	af00      	add	r7, sp, #0
    d0a6:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
    d0aa:	e9d7 2300 	ldrd	r2, r3, [r7]
    d0ae:	2a00      	cmp	r2, #0
    d0b0:	f173 0300 	sbcs.w	r3, r3, #0
    d0b4:	da06      	bge.n	d0c4 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    d0b6:	e9d7 2300 	ldrd	r2, r3, [r7]
    d0ba:	4252      	negs	r2, r2
    d0bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    d0c0:	e9c7 2300 	strd	r2, r3, [r7]
    }

    return ndigits_in_u64((uint64_t) i64Val);
    d0c4:	e9d7 2300 	ldrd	r2, r3, [r7]
    d0c8:	4610      	mov	r0, r2
    d0ca:	4619      	mov	r1, r3
    d0cc:	f7ff ffc6 	bl	d05c <ndigits_in_u64>
    d0d0:	4603      	mov	r3, r0
}
    d0d2:	4618      	mov	r0, r3
    d0d4:	3708      	adds	r7, #8
    d0d6:	46bd      	mov	sp, r7
    d0d8:	bd80      	pop	{r7, pc}
    d0da:	bf00      	nop

0000d0dc <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    d0dc:	b480      	push	{r7}
    d0de:	b085      	sub	sp, #20
    d0e0:	af00      	add	r7, sp, #0
    d0e2:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
    d0e6:	6838      	ldr	r0, [r7, #0]
    d0e8:	6879      	ldr	r1, [r7, #4]
    d0ea:	4301      	orrs	r1, r0
    d0ec:	2900      	cmp	r1, #0
    d0ee:	bf0c      	ite	eq
    d0f0:	2101      	moveq	r1, #1
    d0f2:	2100      	movne	r1, #0
    d0f4:	b2c9      	uxtb	r1, r1
    d0f6:	60f9      	str	r1, [r7, #12]

    while ( ui64Val )
    d0f8:	e00a      	b.n	d110 <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
    d0fa:	e9d7 0100 	ldrd	r0, r1, [r7]
    d0fe:	0902      	lsrs	r2, r0, #4
    d100:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    d104:	090b      	lsrs	r3, r1, #4
    d106:	e9c7 2300 	strd	r2, r3, [r7]
        ++iDigits;
    d10a:	68f9      	ldr	r1, [r7, #12]
    d10c:	3101      	adds	r1, #1
    d10e:	60f9      	str	r1, [r7, #12]
static int
ndigits_in_hex(uint64_t ui64Val)
{
    int iDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
    d110:	e9d7 0100 	ldrd	r0, r1, [r7]
    d114:	4301      	orrs	r1, r0
    d116:	d1f0      	bne.n	d0fa <ndigits_in_hex+0x1e>
    {
        ui64Val >>= 4;
        ++iDigits;
    }

    return iDigits;
    d118:	68fb      	ldr	r3, [r7, #12]
}
    d11a:	4618      	mov	r0, r3
    d11c:	3714      	adds	r7, #20
    d11e:	46bd      	mov	sp, r7
    d120:	f85d 7b04 	ldr.w	r7, [sp], #4
    d124:	4770      	bx	lr
    d126:	bf00      	nop

0000d128 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    d128:	b480      	push	{r7}
    d12a:	b087      	sub	sp, #28
    d12c:	af00      	add	r7, sp, #0
    d12e:	6078      	str	r0, [r7, #4]
    d130:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
    d132:	2300      	movs	r3, #0
    d134:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    d136:	2300      	movs	r3, #0
    d138:	613b      	str	r3, [r7, #16]
    d13a:	2300      	movs	r3, #0
    d13c:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
    d13e:	687b      	ldr	r3, [r7, #4]
    d140:	781b      	ldrb	r3, [r3, #0]
    d142:	2b2d      	cmp	r3, #45	; 0x2d
    d144:	d107      	bne.n	d156 <decstr_to_int+0x2e>
    {
        bNeg = true;
    d146:	2301      	movs	r3, #1
    d148:	75fb      	strb	r3, [r7, #23]
        pcStr++;
    d14a:	687b      	ldr	r3, [r7, #4]
    d14c:	3301      	adds	r3, #1
    d14e:	607b      	str	r3, [r7, #4]
        uCnt++;
    d150:	68fb      	ldr	r3, [r7, #12]
    d152:	3301      	adds	r3, #1
    d154:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d156:	e012      	b.n	d17e <decstr_to_int+0x56>
    {
        ++uCnt;
    d158:	68fb      	ldr	r3, [r7, #12]
    d15a:	3301      	adds	r3, #1
    d15c:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    d15e:	693a      	ldr	r2, [r7, #16]
    d160:	4613      	mov	r3, r2
    d162:	009b      	lsls	r3, r3, #2
    d164:	4413      	add	r3, r2
    d166:	005b      	lsls	r3, r3, #1
    d168:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    d16a:	687b      	ldr	r3, [r7, #4]
    d16c:	781b      	ldrb	r3, [r3, #0]
    d16e:	461a      	mov	r2, r3
    d170:	693b      	ldr	r3, [r7, #16]
    d172:	4413      	add	r3, r2
    d174:	3b30      	subs	r3, #48	; 0x30
    d176:	613b      	str	r3, [r7, #16]
        pcStr++;
    d178:	687b      	ldr	r3, [r7, #4]
    d17a:	3301      	adds	r3, #1
    d17c:	607b      	str	r3, [r7, #4]
        bNeg = true;
        pcStr++;
        uCnt++;
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d17e:	687b      	ldr	r3, [r7, #4]
    d180:	781b      	ldrb	r3, [r3, #0]
    d182:	2b2f      	cmp	r3, #47	; 0x2f
    d184:	d903      	bls.n	d18e <decstr_to_int+0x66>
    d186:	687b      	ldr	r3, [r7, #4]
    d188:	781b      	ldrb	r3, [r3, #0]
    d18a:	2b39      	cmp	r3, #57	; 0x39
    d18c:	d9e4      	bls.n	d158 <decstr_to_int+0x30>
        //
        ui32Val += (*pcStr - '0');
        pcStr++;
    }

    if ( pui32CharCnt )
    d18e:	683b      	ldr	r3, [r7, #0]
    d190:	2b00      	cmp	r3, #0
    d192:	d002      	beq.n	d19a <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    d194:	683b      	ldr	r3, [r7, #0]
    d196:	68fa      	ldr	r2, [r7, #12]
    d198:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    d19a:	7dfb      	ldrb	r3, [r7, #23]
    d19c:	2b00      	cmp	r3, #0
    d19e:	d002      	beq.n	d1a6 <decstr_to_int+0x7e>
    d1a0:	693b      	ldr	r3, [r7, #16]
    d1a2:	425b      	negs	r3, r3
    d1a4:	e000      	b.n	d1a8 <decstr_to_int+0x80>
    d1a6:	693b      	ldr	r3, [r7, #16]
}
    d1a8:	4618      	mov	r0, r3
    d1aa:	371c      	adds	r7, #28
    d1ac:	46bd      	mov	sp, r7
    d1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    d1b2:	4770      	bx	lr

0000d1b4 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    d1b4:	b580      	push	{r7, lr}
    d1b6:	b090      	sub	sp, #64	; 0x40
    d1b8:	af00      	add	r7, sp, #0
    d1ba:	e9c7 0102 	strd	r0, r1, [r7, #8]
    d1be:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    d1c0:	2300      	movs	r3, #0
    d1c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    d1c4:	2300      	movs	r3, #0
    d1c6:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    d1c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    d1cc:	f7ff fe68 	bl	cea0 <divu64_10>
    d1d0:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    d1d4:	68b9      	ldr	r1, [r7, #8]
    d1d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    d1d8:	4613      	mov	r3, r2
    d1da:	009b      	lsls	r3, r3, #2
    d1dc:	4413      	add	r3, r2
    d1de:	005b      	lsls	r3, r3, #1
    d1e0:	1acb      	subs	r3, r1, r3
    d1e2:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    d1e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d1e6:	1c5a      	adds	r2, r3, #1
    d1e8:	63fa      	str	r2, [r7, #60]	; 0x3c
    d1ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    d1ec:	b2d2      	uxtb	r2, r2
    d1ee:	3230      	adds	r2, #48	; 0x30
    d1f0:	b2d2      	uxtb	r2, r2
    d1f2:	f107 0140 	add.w	r1, r7, #64	; 0x40
    d1f6:	440b      	add	r3, r1
    d1f8:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    d1fc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
    d200:	e9c7 2302 	strd	r2, r3, [r7, #8]
    } while ( ui64Val );
    d204:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    d208:	4313      	orrs	r3, r2
    d20a:	d1dd      	bne.n	d1c8 <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    d20c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d20e:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    d210:	687b      	ldr	r3, [r7, #4]
    d212:	2b00      	cmp	r3, #0
    d214:	d011      	beq.n	d23a <uint64_to_str+0x86>
    {
        while ( ix-- )
    d216:	e008      	b.n	d22a <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
    d218:	687b      	ldr	r3, [r7, #4]
    d21a:	1c5a      	adds	r2, r3, #1
    d21c:	607a      	str	r2, [r7, #4]
    d21e:	f107 0110 	add.w	r1, r7, #16
    d222:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d224:	440a      	add	r2, r1
    d226:	7812      	ldrb	r2, [r2, #0]
    d228:	701a      	strb	r2, [r3, #0]
    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    {
        while ( ix-- )
    d22a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d22c:	1e5a      	subs	r2, r3, #1
    d22e:	63fa      	str	r2, [r7, #60]	; 0x3c
    d230:	2b00      	cmp	r3, #0
    d232:	d1f1      	bne.n	d218 <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    d234:	687b      	ldr	r3, [r7, #4]
    d236:	2200      	movs	r2, #0
    d238:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    d23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
    d23c:	4618      	mov	r0, r3
    d23e:	3740      	adds	r7, #64	; 0x40
    d240:	46bd      	mov	sp, r7
    d242:	bd80      	pop	{r7, pc}

0000d244 <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    d244:	b4b0      	push	{r4, r5, r7}
    d246:	b08d      	sub	sp, #52	; 0x34
    d248:	af00      	add	r7, sp, #0
    d24a:	e9c7 0102 	strd	r0, r1, [r7, #8]
    d24e:	607a      	str	r2, [r7, #4]
    d250:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
    d252:	2300      	movs	r3, #0
    d254:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    d256:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    d25a:	4313      	orrs	r3, r2
    d25c:	d108      	bne.n	d270 <uint64_to_hexstr+0x2c>
    {
        tbuf[ix++] = '0';   // Print a '0'
    d25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d260:	1c5a      	adds	r2, r3, #1
    d262:	62fa      	str	r2, [r7, #44]	; 0x2c
    d264:	f107 0230 	add.w	r2, r7, #48	; 0x30
    d268:	4413      	add	r3, r2
    d26a:	2230      	movs	r2, #48	; 0x30
    d26c:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    d270:	e027      	b.n	d2c2 <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
    d272:	7a3b      	ldrb	r3, [r7, #8]
    d274:	f003 030f 	and.w	r3, r3, #15
    d278:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    d27c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    d280:	2b09      	cmp	r3, #9
    d282:	d90a      	bls.n	d29a <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    d284:	78fb      	ldrb	r3, [r7, #3]
    d286:	2b00      	cmp	r3, #0
    d288:	d001      	beq.n	d28e <uint64_to_hexstr+0x4a>
    d28a:	2227      	movs	r2, #39	; 0x27
    d28c:	e000      	b.n	d290 <uint64_to_hexstr+0x4c>
    d28e:	2207      	movs	r2, #7
    d290:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    d294:	4413      	add	r3, r2
    d296:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    d29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d29c:	1c5a      	adds	r2, r3, #1
    d29e:	62fa      	str	r2, [r7, #44]	; 0x2c
    d2a0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
    d2a4:	3230      	adds	r2, #48	; 0x30
    d2a6:	b2d2      	uxtb	r2, r2
    d2a8:	f107 0130 	add.w	r1, r7, #48	; 0x30
    d2ac:	440b      	add	r3, r1
    d2ae:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    d2b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    d2b6:	0914      	lsrs	r4, r2, #4
    d2b8:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
    d2bc:	091d      	lsrs	r5, r3, #4
    d2be:	e9c7 4502 	strd	r4, r5, [r7, #8]
    if ( ui64Val == 0 )
    {
        tbuf[ix++] = '0';   // Print a '0'
    }

    while ( ui64Val )
    d2c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    d2c6:	4313      	orrs	r3, r2
    d2c8:	d1d3      	bne.n	d272 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    d2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d2cc:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    d2ce:	687b      	ldr	r3, [r7, #4]
    d2d0:	2b00      	cmp	r3, #0
    d2d2:	d011      	beq.n	d2f8 <uint64_to_hexstr+0xb4>
    {
        while (ix--)
    d2d4:	e008      	b.n	d2e8 <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
    d2d6:	687b      	ldr	r3, [r7, #4]
    d2d8:	1c5a      	adds	r2, r3, #1
    d2da:	607a      	str	r2, [r7, #4]
    d2dc:	f107 0110 	add.w	r1, r7, #16
    d2e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    d2e2:	440a      	add	r2, r1
    d2e4:	7812      	ldrb	r2, [r2, #0]
    d2e6:	701a      	strb	r2, [r3, #0]
    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    {
        while (ix--)
    d2e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d2ea:	1e5a      	subs	r2, r3, #1
    d2ec:	62fa      	str	r2, [r7, #44]	; 0x2c
    d2ee:	2b00      	cmp	r3, #0
    d2f0:	d1f1      	bne.n	d2d6 <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    d2f2:	687b      	ldr	r3, [r7, #4]
    d2f4:	2200      	movs	r2, #0
    d2f6:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    d2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    d2fa:	4618      	mov	r0, r3
    d2fc:	3734      	adds	r7, #52	; 0x34
    d2fe:	46bd      	mov	sp, r7
    d300:	bcb0      	pop	{r4, r5, r7}
    d302:	4770      	bx	lr

0000d304 <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    d304:	b480      	push	{r7}
    d306:	b085      	sub	sp, #20
    d308:	af00      	add	r7, sp, #0
    d30a:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
    d30c:	2300      	movs	r3, #0
    d30e:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    d310:	687b      	ldr	r3, [r7, #4]
    d312:	2b00      	cmp	r3, #0
    d314:	d101      	bne.n	d31a <simple_strlen+0x16>
    {
        return ui32RetVal;
    d316:	68fb      	ldr	r3, [r7, #12]
    d318:	e00a      	b.n	d330 <simple_strlen+0x2c>
    }

    while ( *pcBuf++ )
    d31a:	e002      	b.n	d322 <simple_strlen+0x1e>
    {
        ui32RetVal++;
    d31c:	68fb      	ldr	r3, [r7, #12]
    d31e:	3301      	adds	r3, #1
    d320:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    {
        return ui32RetVal;
    }

    while ( *pcBuf++ )
    d322:	687b      	ldr	r3, [r7, #4]
    d324:	1c5a      	adds	r2, r3, #1
    d326:	607a      	str	r2, [r7, #4]
    d328:	781b      	ldrb	r3, [r3, #0]
    d32a:	2b00      	cmp	r3, #0
    d32c:	d1f6      	bne.n	d31c <simple_strlen+0x18>
    {
        ui32RetVal++;
    }
    return ui32RetVal;
    d32e:	68fb      	ldr	r3, [r7, #12]
}
    d330:	4618      	mov	r0, r3
    d332:	3714      	adds	r7, #20
    d334:	46bd      	mov	sp, r7
    d336:	f85d 7b04 	ldr.w	r7, [sp], #4
    d33a:	4770      	bx	lr

0000d33c <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    d33c:	b480      	push	{r7}
    d33e:	b087      	sub	sp, #28
    d340:	af00      	add	r7, sp, #0
    d342:	60f8      	str	r0, [r7, #12]
    d344:	460b      	mov	r3, r1
    d346:	607a      	str	r2, [r7, #4]
    d348:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
    d34a:	2300      	movs	r3, #0
    d34c:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
    d34e:	687b      	ldr	r3, [r7, #4]
    d350:	2b00      	cmp	r3, #0
    d352:	dc01      	bgt.n	d358 <padbuffer+0x1c>
    {
        return i32Cnt;
    d354:	697b      	ldr	r3, [r7, #20]
    d356:	e011      	b.n	d37c <padbuffer+0x40>
    }

    while ( i32NumChars-- )
    d358:	e00a      	b.n	d370 <padbuffer+0x34>
    {
        if ( pcBuf )
    d35a:	68fb      	ldr	r3, [r7, #12]
    d35c:	2b00      	cmp	r3, #0
    d35e:	d004      	beq.n	d36a <padbuffer+0x2e>
        {
            *pcBuf++ = cPadChar;
    d360:	68fb      	ldr	r3, [r7, #12]
    d362:	1c5a      	adds	r2, r3, #1
    d364:	60fa      	str	r2, [r7, #12]
    d366:	7afa      	ldrb	r2, [r7, #11]
    d368:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    d36a:	697b      	ldr	r3, [r7, #20]
    d36c:	3301      	adds	r3, #1
    d36e:	617b      	str	r3, [r7, #20]
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    d370:	687b      	ldr	r3, [r7, #4]
    d372:	1e5a      	subs	r2, r3, #1
    d374:	607a      	str	r2, [r7, #4]
    d376:	2b00      	cmp	r3, #0
    d378:	d1ef      	bne.n	d35a <padbuffer+0x1e>
            *pcBuf++ = cPadChar;
        }
        i32Cnt++;
    }

    return i32Cnt;
    d37a:	697b      	ldr	r3, [r7, #20]
}
    d37c:	4618      	mov	r0, r3
    d37e:	371c      	adds	r7, #28
    d380:	46bd      	mov	sp, r7
    d382:	f85d 7b04 	ldr.w	r7, [sp], #4
    d386:	4770      	bx	lr

0000d388 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    d388:	b580      	push	{r7, lr}
    d38a:	b08e      	sub	sp, #56	; 0x38
    d38c:	af00      	add	r7, sp, #0
    d38e:	ed87 0a03 	vstr	s0, [r7, #12]
    d392:	60b8      	str	r0, [r7, #8]
    d394:	6079      	str	r1, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    d396:	68bb      	ldr	r3, [r7, #8]
    d398:	681b      	ldr	r3, [r3, #0]
    d39a:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
    d39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d39e:	2b03      	cmp	r3, #3
    d3a0:	dc02      	bgt.n	d3a8 <ftoa+0x20>
    {
        return AM_FTOA_ERR_BUFSIZE;
    d3a2:	f06f 0302 	mvn.w	r3, #2
    d3a6:	e0e9      	b.n	d57c <ftoa+0x1f4>
    }

    if (fValue == 0.0f)
    d3a8:	edd7 7a03 	vldr	s15, [r7, #12]
    d3ac:	eef5 7a40 	vcmp.f32	s15, #0.0
    d3b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d3b4:	d104      	bne.n	d3c0 <ftoa+0x38>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    d3b6:	68bb      	ldr	r3, [r7, #8]
    d3b8:	4a72      	ldr	r2, [pc, #456]	; (d584 <ftoa+0x1fc>)
    d3ba:	601a      	str	r2, [r3, #0]
        return 3;
    d3bc:	2303      	movs	r3, #3
    d3be:	e0dd      	b.n	d57c <ftoa+0x1f4>
    }

    pcBufInitial = pcBuf;
    d3c0:	68bb      	ldr	r3, [r7, #8]
    d3c2:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
    d3c4:	68fb      	ldr	r3, [r7, #12]
    d3c6:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    d3c8:	693b      	ldr	r3, [r7, #16]
    d3ca:	15db      	asrs	r3, r3, #23
    d3cc:	b2db      	uxtb	r3, r3
    d3ce:	3b7f      	subs	r3, #127	; 0x7f
    d3d0:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    d3d2:	693b      	ldr	r3, [r7, #16]
    d3d4:	f3c3 0316 	ubfx	r3, r3, #0, #23
    d3d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    d3dc:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
    d3de:	2300      	movs	r3, #0
    d3e0:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
    d3e2:	2300      	movs	r3, #0
    d3e4:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
    d3e6:	69fb      	ldr	r3, [r7, #28]
    d3e8:	2b1e      	cmp	r3, #30
    d3ea:	dd02      	ble.n	d3f2 <ftoa+0x6a>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    d3ec:	f06f 0301 	mvn.w	r3, #1
    d3f0:	e0c4      	b.n	d57c <ftoa+0x1f4>
    }
    else if (iExp2 < -23)
    d3f2:	69fb      	ldr	r3, [r7, #28]
    d3f4:	f113 0f17 	cmn.w	r3, #23
    d3f8:	da02      	bge.n	d400 <ftoa+0x78>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    d3fa:	f04f 33ff 	mov.w	r3, #4294967295
    d3fe:	e0bd      	b.n	d57c <ftoa+0x1f4>
    }
    else if (iExp2 >= 23)
    d400:	69fb      	ldr	r3, [r7, #28]
    d402:	2b16      	cmp	r3, #22
    d404:	dd06      	ble.n	d414 <ftoa+0x8c>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    d406:	69fb      	ldr	r3, [r7, #28]
    d408:	3b17      	subs	r3, #23
    d40a:	69ba      	ldr	r2, [r7, #24]
    d40c:	fa02 f303 	lsl.w	r3, r2, r3
    d410:	637b      	str	r3, [r7, #52]	; 0x34
    d412:	e01a      	b.n	d44a <ftoa+0xc2>
    }
    else if (iExp2 >= 0)
    d414:	69fb      	ldr	r3, [r7, #28]
    d416:	2b00      	cmp	r3, #0
    d418:	db0f      	blt.n	d43a <ftoa+0xb2>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    d41a:	69fb      	ldr	r3, [r7, #28]
    d41c:	f1c3 0317 	rsb	r3, r3, #23
    d420:	69ba      	ldr	r2, [r7, #24]
    d422:	fa42 f303 	asr.w	r3, r2, r3
    d426:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    d428:	69fb      	ldr	r3, [r7, #28]
    d42a:	3301      	adds	r3, #1
    d42c:	69ba      	ldr	r2, [r7, #24]
    d42e:	fa02 f303 	lsl.w	r3, r2, r3
    d432:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    d436:	633b      	str	r3, [r7, #48]	; 0x30
    d438:	e007      	b.n	d44a <ftoa+0xc2>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    d43a:	69bb      	ldr	r3, [r7, #24]
    d43c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    d440:	69fb      	ldr	r3, [r7, #28]
    d442:	43db      	mvns	r3, r3
    d444:	fa42 f303 	asr.w	r3, r2, r3
    d448:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    d44a:	693b      	ldr	r3, [r7, #16]
    d44c:	2b00      	cmp	r3, #0
    d44e:	da04      	bge.n	d45a <ftoa+0xd2>
    {
        *pcBuf++ = '-';
    d450:	68bb      	ldr	r3, [r7, #8]
    d452:	1c5a      	adds	r2, r3, #1
    d454:	60ba      	str	r2, [r7, #8]
    d456:	222d      	movs	r2, #45	; 0x2d
    d458:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    d45a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d45c:	2b00      	cmp	r3, #0
    d45e:	d105      	bne.n	d46c <ftoa+0xe4>
    {
        *pcBuf++ = '0';
    d460:	68bb      	ldr	r3, [r7, #8]
    d462:	1c5a      	adds	r2, r3, #1
    d464:	60ba      	str	r2, [r7, #8]
    d466:	2230      	movs	r2, #48	; 0x30
    d468:	701a      	strb	r2, [r3, #0]
    d46a:	e023      	b.n	d4b4 <ftoa+0x12c>
    }
    else
    {
        if (i32IntPart > 0)
    d46c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d46e:	2b00      	cmp	r3, #0
    d470:	dd09      	ble.n	d486 <ftoa+0xfe>
        {
            uint64_to_str(i32IntPart, pcBuf);
    d472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d474:	461a      	mov	r2, r3
    d476:	ea4f 73e2 	mov.w	r3, r2, asr #31
    d47a:	4610      	mov	r0, r2
    d47c:	4619      	mov	r1, r3
    d47e:	68ba      	ldr	r2, [r7, #8]
    d480:	f7ff fe98 	bl	d1b4 <uint64_to_str>
    d484:	e00e      	b.n	d4a4 <ftoa+0x11c>
        }
        else
        {
            *pcBuf++ = '-';
    d486:	68bb      	ldr	r3, [r7, #8]
    d488:	1c5a      	adds	r2, r3, #1
    d48a:	60ba      	str	r2, [r7, #8]
    d48c:	222d      	movs	r2, #45	; 0x2d
    d48e:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    d490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d492:	425b      	negs	r3, r3
    d494:	461a      	mov	r2, r3
    d496:	ea4f 73e2 	mov.w	r3, r2, asr #31
    d49a:	4610      	mov	r0, r2
    d49c:	4619      	mov	r1, r3
    d49e:	68ba      	ldr	r2, [r7, #8]
    d4a0:	f7ff fe88 	bl	d1b4 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    d4a4:	e002      	b.n	d4ac <ftoa+0x124>
        {
            pcBuf++;
    d4a6:	68bb      	ldr	r3, [r7, #8]
    d4a8:	3301      	adds	r3, #1
    d4aa:	60bb      	str	r3, [r7, #8]
        else
        {
            *pcBuf++ = '-';
            uint64_to_str(-i32IntPart, pcBuf);
        }
        while (*pcBuf)    // Get to end of new string
    d4ac:	68bb      	ldr	r3, [r7, #8]
    d4ae:	781b      	ldrb	r3, [r3, #0]
    d4b0:	2b00      	cmp	r3, #0
    d4b2:	d1f8      	bne.n	d4a6 <ftoa+0x11e>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    d4b4:	68bb      	ldr	r3, [r7, #8]
    d4b6:	1c5a      	adds	r2, r3, #1
    d4b8:	60ba      	str	r2, [r7, #8]
    d4ba:	222e      	movs	r2, #46	; 0x2e
    d4bc:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    d4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d4c0:	2b00      	cmp	r3, #0
    d4c2:	d105      	bne.n	d4d0 <ftoa+0x148>
    {
        *pcBuf++ = '0';
    d4c4:	68bb      	ldr	r3, [r7, #8]
    d4c6:	1c5a      	adds	r2, r3, #1
    d4c8:	60ba      	str	r2, [r7, #8]
    d4ca:	2230      	movs	r2, #48	; 0x30
    d4cc:	701a      	strb	r2, [r3, #0]
    d4ce:	e04f      	b.n	d570 <ftoa+0x1e8>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    d4d0:	6a3a      	ldr	r2, [r7, #32]
    d4d2:	68bb      	ldr	r3, [r7, #8]
    d4d4:	1ad2      	subs	r2, r2, r3
    d4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d4d8:	4413      	add	r3, r2
    d4da:	3b01      	subs	r3, #1
    d4dc:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    d4de:	697a      	ldr	r2, [r7, #20]
    d4e0:	687b      	ldr	r3, [r7, #4]
    d4e2:	4293      	cmp	r3, r2
    d4e4:	bfa8      	it	ge
    d4e6:	4613      	movge	r3, r2
    d4e8:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
    d4ea:	2300      	movs	r3, #0
    d4ec:	62bb      	str	r3, [r7, #40]	; 0x28
    d4ee:	e015      	b.n	d51c <ftoa+0x194>
        {
            i32FracPart *= 10;
    d4f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    d4f2:	4613      	mov	r3, r2
    d4f4:	009b      	lsls	r3, r3, #2
    d4f6:	4413      	add	r3, r2
    d4f8:	005b      	lsls	r3, r3, #1
    d4fa:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d4fc:	68bb      	ldr	r3, [r7, #8]
    d4fe:	1c5a      	adds	r2, r3, #1
    d500:	60ba      	str	r2, [r7, #8]
    d502:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    d504:	1612      	asrs	r2, r2, #24
    d506:	b2d2      	uxtb	r2, r2
    d508:	3230      	adds	r2, #48	; 0x30
    d50a:	b2d2      	uxtb	r2, r2
    d50c:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    d50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d510:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    d514:	633b      	str	r3, [r7, #48]	; 0x30
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
        iMax = (iMax > iPrecision) ? iPrecision : iMax;

        for (jx = 0; jx < iMax; jx++)
    d516:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d518:	3301      	adds	r3, #1
    d51a:	62bb      	str	r3, [r7, #40]	; 0x28
    d51c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d51e:	697b      	ldr	r3, [r7, #20]
    d520:	429a      	cmp	r2, r3
    d522:	dbe5      	blt.n	d4f0 <ftoa+0x168>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    d524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    d526:	4613      	mov	r3, r2
    d528:	009b      	lsls	r3, r3, #2
    d52a:	4413      	add	r3, r2
    d52c:	005b      	lsls	r3, r3, #1
    d52e:	161b      	asrs	r3, r3, #24
    d530:	2b04      	cmp	r3, #4
    d532:	dd1d      	ble.n	d570 <ftoa+0x1e8>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    d534:	68bb      	ldr	r3, [r7, #8]
    d536:	3b01      	subs	r3, #1
    d538:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    d53a:	e015      	b.n	d568 <ftoa+0x1e0>
            {
                if ( *pcBuftmp == '.' )
    d53c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d53e:	781b      	ldrb	r3, [r3, #0]
    d540:	2b2e      	cmp	r3, #46	; 0x2e
    d542:	d00e      	beq.n	d562 <ftoa+0x1da>
                {
                }
                else if ( *pcBuftmp == '9' )
    d544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d546:	781b      	ldrb	r3, [r3, #0]
    d548:	2b39      	cmp	r3, #57	; 0x39
    d54a:	d103      	bne.n	d554 <ftoa+0x1cc>
                {
                    *pcBuftmp = '0';
    d54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d54e:	2230      	movs	r2, #48	; 0x30
    d550:	701a      	strb	r2, [r3, #0]
    d552:	e006      	b.n	d562 <ftoa+0x1da>
                }
                else
                {
                    *pcBuftmp += 1;
    d554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d556:	781b      	ldrb	r3, [r3, #0]
    d558:	3301      	adds	r3, #1
    d55a:	b2da      	uxtb	r2, r3
    d55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d55e:	701a      	strb	r2, [r3, #0]
                    break;
    d560:	e006      	b.n	d570 <ftoa+0x1e8>
                }
                pcBuftmp--;
    d562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d564:	3b01      	subs	r3, #1
    d566:	62fb      	str	r3, [r7, #44]	; 0x2c
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
            while ( pcBuftmp >= pcBufInitial )
    d568:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    d56a:	6a3b      	ldr	r3, [r7, #32]
    d56c:	429a      	cmp	r2, r3
    d56e:	d2e5      	bcs.n	d53c <ftoa+0x1b4>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    d570:	68bb      	ldr	r3, [r7, #8]
    d572:	2200      	movs	r2, #0
    d574:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    d576:	68ba      	ldr	r2, [r7, #8]
    d578:	6a3b      	ldr	r3, [r7, #32]
    d57a:	1ad3      	subs	r3, r2, r3
} // ftoa()
    d57c:	4618      	mov	r0, r3
    d57e:	3738      	adds	r7, #56	; 0x38
    d580:	46bd      	mov	sp, r7
    d582:	bd80      	pop	{r7, pc}
    d584:	00302e30 	.word	0x00302e30

0000d588 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    d588:	b580      	push	{r7, lr}
    d58a:	b094      	sub	sp, #80	; 0x50
    d58c:	af00      	add	r7, sp, #0
    d58e:	60f8      	str	r0, [r7, #12]
    d590:	60b9      	str	r1, [r7, #8]
    d592:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    d594:	2300      	movs	r3, #0
    d596:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    d598:	2300      	movs	r3, #0
    d59a:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
    d59c:	e2e8      	b.n	db70 <am_util_stdio_vsprintf+0x5e8>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    d59e:	2306      	movs	r3, #6
    d5a0:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
    d5a2:	68bb      	ldr	r3, [r7, #8]
    d5a4:	781b      	ldrb	r3, [r3, #0]
    d5a6:	2b25      	cmp	r3, #37	; 0x25
    d5a8:	d01f      	beq.n	d5ea <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    d5aa:	68fb      	ldr	r3, [r7, #12]
    d5ac:	2b00      	cmp	r3, #0
    d5ae:	d015      	beq.n	d5dc <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    d5b0:	68bb      	ldr	r3, [r7, #8]
    d5b2:	781b      	ldrb	r3, [r3, #0]
    d5b4:	2b0a      	cmp	r3, #10
    d5b6:	d10b      	bne.n	d5d0 <am_util_stdio_vsprintf+0x48>
    d5b8:	4bb1      	ldr	r3, [pc, #708]	; (d880 <am_util_stdio_vsprintf+0x2f8>)
    d5ba:	781b      	ldrb	r3, [r3, #0]
    d5bc:	2b00      	cmp	r3, #0
    d5be:	d007      	beq.n	d5d0 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    d5c0:	68fb      	ldr	r3, [r7, #12]
    d5c2:	1c5a      	adds	r2, r3, #1
    d5c4:	60fa      	str	r2, [r7, #12]
    d5c6:	220d      	movs	r2, #13
    d5c8:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    d5ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d5cc:	3301      	adds	r3, #1
    d5ce:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
    d5d0:	68fb      	ldr	r3, [r7, #12]
    d5d2:	1c5a      	adds	r2, r3, #1
    d5d4:	60fa      	str	r2, [r7, #12]
    d5d6:	68ba      	ldr	r2, [r7, #8]
    d5d8:	7812      	ldrb	r2, [r2, #0]
    d5da:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    d5dc:	68bb      	ldr	r3, [r7, #8]
    d5de:	3301      	adds	r3, #1
    d5e0:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
    d5e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d5e4:	3301      	adds	r3, #1
    d5e6:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
    d5e8:	e2c2      	b.n	db70 <am_util_stdio_vsprintf+0x5e8>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    d5ea:	68bb      	ldr	r3, [r7, #8]
    d5ec:	3301      	adds	r3, #1
    d5ee:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
    d5f0:	2300      	movs	r3, #0
    d5f2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    d5f6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    d5fa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    d5fe:	2320      	movs	r3, #32
    d600:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
    d604:	68bb      	ldr	r3, [r7, #8]
    d606:	781b      	ldrb	r3, [r3, #0]
    d608:	2b30      	cmp	r3, #48	; 0x30
    d60a:	d105      	bne.n	d618 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    d60c:	2330      	movs	r3, #48	; 0x30
    d60e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
    d612:	68bb      	ldr	r3, [r7, #8]
    d614:	3301      	adds	r3, #1
    d616:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    d618:	f107 0310 	add.w	r3, r7, #16
    d61c:	68b8      	ldr	r0, [r7, #8]
    d61e:	4619      	mov	r1, r3
    d620:	f7ff fd82 	bl	d128 <decstr_to_int>
    d624:	4603      	mov	r3, r0
    d626:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
    d628:	693b      	ldr	r3, [r7, #16]
    d62a:	68ba      	ldr	r2, [r7, #8]
    d62c:	4413      	add	r3, r2
    d62e:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    d630:	68bb      	ldr	r3, [r7, #8]
    d632:	781b      	ldrb	r3, [r3, #0]
    d634:	2b73      	cmp	r3, #115	; 0x73
    d636:	d005      	beq.n	d644 <am_util_stdio_vsprintf+0xbc>
    d638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d63a:	2b00      	cmp	r3, #0
    d63c:	da02      	bge.n	d644 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
    d63e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d640:	425b      	negs	r3, r3
    d642:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    d644:	68bb      	ldr	r3, [r7, #8]
    d646:	781b      	ldrb	r3, [r3, #0]
    d648:	2b2e      	cmp	r3, #46	; 0x2e
    d64a:	d10e      	bne.n	d66a <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
    d64c:	68bb      	ldr	r3, [r7, #8]
    d64e:	3301      	adds	r3, #1
    d650:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    d652:	f107 0310 	add.w	r3, r7, #16
    d656:	68b8      	ldr	r0, [r7, #8]
    d658:	4619      	mov	r1, r3
    d65a:	f7ff fd65 	bl	d128 <decstr_to_int>
    d65e:	4603      	mov	r3, r0
    d660:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
    d662:	693b      	ldr	r3, [r7, #16]
    d664:	68ba      	ldr	r2, [r7, #8]
    d666:	4413      	add	r3, r2
    d668:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    d66a:	68bb      	ldr	r3, [r7, #8]
    d66c:	781b      	ldrb	r3, [r3, #0]
    d66e:	2b6c      	cmp	r3, #108	; 0x6c
    d670:	d10c      	bne.n	d68c <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
    d672:	68bb      	ldr	r3, [r7, #8]
    d674:	3301      	adds	r3, #1
    d676:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    d678:	68bb      	ldr	r3, [r7, #8]
    d67a:	781b      	ldrb	r3, [r3, #0]
    d67c:	2b6c      	cmp	r3, #108	; 0x6c
    d67e:	d105      	bne.n	d68c <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
    d680:	68bb      	ldr	r3, [r7, #8]
    d682:	3301      	adds	r3, #1
    d684:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
    d686:	2301      	movs	r3, #1
    d688:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
    d68c:	68bb      	ldr	r3, [r7, #8]
    d68e:	781b      	ldrb	r3, [r3, #0]
    d690:	3b46      	subs	r3, #70	; 0x46
    d692:	2b32      	cmp	r3, #50	; 0x32
    d694:	f200 825c 	bhi.w	db50 <am_util_stdio_vsprintf+0x5c8>
    d698:	a201      	add	r2, pc, #4	; (adr r2, d6a0 <am_util_stdio_vsprintf+0x118>)
    d69a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d69e:	bf00      	nop
    d6a0:	0000dad5 	.word	0x0000dad5
    d6a4:	0000db51 	.word	0x0000db51
    d6a8:	0000db51 	.word	0x0000db51
    d6ac:	0000db51 	.word	0x0000db51
    d6b0:	0000db51 	.word	0x0000db51
    d6b4:	0000db51 	.word	0x0000db51
    d6b8:	0000db51 	.word	0x0000db51
    d6bc:	0000db51 	.word	0x0000db51
    d6c0:	0000db51 	.word	0x0000db51
    d6c4:	0000db51 	.word	0x0000db51
    d6c8:	0000db51 	.word	0x0000db51
    d6cc:	0000db51 	.word	0x0000db51
    d6d0:	0000db51 	.word	0x0000db51
    d6d4:	0000db51 	.word	0x0000db51
    d6d8:	0000db51 	.word	0x0000db51
    d6dc:	0000db51 	.word	0x0000db51
    d6e0:	0000db51 	.word	0x0000db51
    d6e4:	0000db51 	.word	0x0000db51
    d6e8:	0000d865 	.word	0x0000d865
    d6ec:	0000db51 	.word	0x0000db51
    d6f0:	0000db51 	.word	0x0000db51
    d6f4:	0000db51 	.word	0x0000db51
    d6f8:	0000db51 	.word	0x0000db51
    d6fc:	0000db51 	.word	0x0000db51
    d700:	0000db51 	.word	0x0000db51
    d704:	0000db51 	.word	0x0000db51
    d708:	0000db51 	.word	0x0000db51
    d70c:	0000db51 	.word	0x0000db51
    d710:	0000db51 	.word	0x0000db51
    d714:	0000d76d 	.word	0x0000d76d
    d718:	0000d999 	.word	0x0000d999
    d71c:	0000db51 	.word	0x0000db51
    d720:	0000dad5 	.word	0x0000dad5
    d724:	0000db51 	.word	0x0000db51
    d728:	0000db51 	.word	0x0000db51
    d72c:	0000d999 	.word	0x0000d999
    d730:	0000db51 	.word	0x0000db51
    d734:	0000db51 	.word	0x0000db51
    d738:	0000db51 	.word	0x0000db51
    d73c:	0000db51 	.word	0x0000db51
    d740:	0000db51 	.word	0x0000db51
    d744:	0000db51 	.word	0x0000db51
    d748:	0000db51 	.word	0x0000db51
    d74c:	0000db51 	.word	0x0000db51
    d750:	0000db51 	.word	0x0000db51
    d754:	0000d793 	.word	0x0000d793
    d758:	0000db51 	.word	0x0000db51
    d75c:	0000d903 	.word	0x0000d903
    d760:	0000db51 	.word	0x0000db51
    d764:	0000db51 	.word	0x0000db51
    d768:	0000d85f 	.word	0x0000d85f
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    d76c:	687b      	ldr	r3, [r7, #4]
    d76e:	1d1a      	adds	r2, r3, #4
    d770:	607a      	str	r2, [r7, #4]
    d772:	681b      	ldr	r3, [r3, #0]
    d774:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
    d778:	68fb      	ldr	r3, [r7, #12]
    d77a:	2b00      	cmp	r3, #0
    d77c:	d005      	beq.n	d78a <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
    d77e:	68fb      	ldr	r3, [r7, #12]
    d780:	1c5a      	adds	r2, r3, #1
    d782:	60fa      	str	r2, [r7, #12]
    d784:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    d788:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d78a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d78c:	3301      	adds	r3, #1
    d78e:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d790:	e1eb      	b.n	db6a <am_util_stdio_vsprintf+0x5e2>

            case 's':
                pcStr = va_arg(pArgs, char *);
    d792:	687b      	ldr	r3, [r7, #4]
    d794:	1d1a      	adds	r2, r3, #4
    d796:	607a      	str	r2, [r7, #4]
    d798:	681b      	ldr	r3, [r3, #0]
    d79a:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    d79c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    d79e:	f7ff fdb1 	bl	d304 <simple_strlen>
    d7a2:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
    d7a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d7a6:	2b00      	cmp	r3, #0
    d7a8:	dd1e      	ble.n	d7e8 <am_util_stdio_vsprintf+0x260>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    d7aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d7ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d7ae:	429a      	cmp	r2, r3
    d7b0:	d91a      	bls.n	d7e8 <am_util_stdio_vsprintf+0x260>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    d7b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d7b6:	1ad3      	subs	r3, r2, r3
    d7b8:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d7ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d7be:	68f8      	ldr	r0, [r7, #12]
    d7c0:	4619      	mov	r1, r3
    d7c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d7c4:	f7ff fdba 	bl	d33c <padbuffer>
    d7c8:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    d7ca:	68fb      	ldr	r3, [r7, #12]
    d7cc:	2b00      	cmp	r3, #0
    d7ce:	d001      	beq.n	d7d4 <am_util_stdio_vsprintf+0x24c>
    d7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d7d2:	e000      	b.n	d7d6 <am_util_stdio_vsprintf+0x24e>
    d7d4:	2300      	movs	r3, #0
    d7d6:	68fa      	ldr	r2, [r7, #12]
    d7d8:	4413      	add	r3, r2
    d7da:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    d7dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d7de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d7e0:	4413      	add	r3, r2
    d7e2:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    d7e4:	2300      	movs	r3, #0
    d7e6:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
    d7e8:	e00e      	b.n	d808 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
    d7ea:	68fb      	ldr	r3, [r7, #12]
    d7ec:	2b00      	cmp	r3, #0
    d7ee:	d005      	beq.n	d7fc <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
    d7f0:	68fb      	ldr	r3, [r7, #12]
    d7f2:	1c5a      	adds	r2, r3, #1
    d7f4:	60fa      	str	r2, [r7, #12]
    d7f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    d7f8:	7812      	ldrb	r2, [r2, #0]
    d7fa:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    d7fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d7fe:	3301      	adds	r3, #1
    d800:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
    d802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d804:	3301      	adds	r3, #1
    d806:	63fb      	str	r3, [r7, #60]	; 0x3c
                        ui32CharCnt += iWidth;
                        iWidth = 0;
                    }
                }

                while (*pcStr != 0x0)
    d808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d80a:	781b      	ldrb	r3, [r3, #0]
    d80c:	2b00      	cmp	r3, #0
    d80e:	d1ec      	bne.n	d7ea <am_util_stdio_vsprintf+0x262>

                    ++pcStr;
                    ++ui32CharCnt;
                }

                if ( iWidth )
    d810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d812:	2b00      	cmp	r3, #0
    d814:	d022      	beq.n	d85c <am_util_stdio_vsprintf+0x2d4>
                {
                    iWidth = -iWidth;
    d816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d818:	425b      	negs	r3, r3
    d81a:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    d81c:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d820:	429a      	cmp	r2, r3
    d822:	d91b      	bls.n	d85c <am_util_stdio_vsprintf+0x2d4>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    d824:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d828:	1ad3      	subs	r3, r2, r3
    d82a:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d82c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d830:	68f8      	ldr	r0, [r7, #12]
    d832:	4619      	mov	r1, r3
    d834:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d836:	f7ff fd81 	bl	d33c <padbuffer>
    d83a:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    d83c:	68fb      	ldr	r3, [r7, #12]
    d83e:	2b00      	cmp	r3, #0
    d840:	d001      	beq.n	d846 <am_util_stdio_vsprintf+0x2be>
    d842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d844:	e000      	b.n	d848 <am_util_stdio_vsprintf+0x2c0>
    d846:	2300      	movs	r3, #0
    d848:	68fa      	ldr	r2, [r7, #12]
    d84a:	4413      	add	r3, r2
    d84c:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    d84e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d850:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d852:	4413      	add	r3, r2
    d854:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    d856:	2300      	movs	r3, #0
    d858:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
    d85a:	e186      	b.n	db6a <am_util_stdio_vsprintf+0x5e2>
    d85c:	e185      	b.n	db6a <am_util_stdio_vsprintf+0x5e2>

            case 'x':
                bLower = true;
    d85e:	2301      	movs	r3, #1
    d860:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d864:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    d868:	2b00      	cmp	r3, #0
    d86a:	d00b      	beq.n	d884 <am_util_stdio_vsprintf+0x2fc>
    d86c:	687b      	ldr	r3, [r7, #4]
    d86e:	3307      	adds	r3, #7
    d870:	f023 0307 	bic.w	r3, r3, #7
    d874:	f103 0208 	add.w	r2, r3, #8
    d878:	607a      	str	r2, [r7, #4]
    d87a:	e9d3 2300 	ldrd	r2, r3, [r3]
    d87e:	e008      	b.n	d892 <am_util_stdio_vsprintf+0x30a>
    d880:	10001138 	.word	0x10001138
                                      va_arg(pArgs, uint32_t);
    d884:	687b      	ldr	r3, [r7, #4]
    d886:	1d1a      	adds	r2, r3, #4
    d888:	607a      	str	r2, [r7, #4]
    d88a:	681b      	ldr	r3, [r3, #0]
                break;

            case 'x':
                bLower = true;
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d88c:	461a      	mov	r2, r3
    d88e:	f04f 0300 	mov.w	r3, #0
    d892:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
                                      va_arg(pArgs, uint32_t);

                if ( iWidth )
    d896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d898:	2b00      	cmp	r3, #0
    d89a:	d01e      	beq.n	d8da <am_util_stdio_vsprintf+0x352>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    d89c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d8a0:	f7ff fc1c 	bl	d0dc <ndigits_in_hex>
    d8a4:	4602      	mov	r2, r0
    d8a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d8a8:	1a9b      	subs	r3, r3, r2
    d8aa:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d8ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d8b0:	68f8      	ldr	r0, [r7, #12]
    d8b2:	4619      	mov	r1, r3
    d8b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d8b6:	f7ff fd41 	bl	d33c <padbuffer>
    d8ba:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    d8bc:	68fb      	ldr	r3, [r7, #12]
    d8be:	2b00      	cmp	r3, #0
    d8c0:	d001      	beq.n	d8c6 <am_util_stdio_vsprintf+0x33e>
    d8c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d8c4:	e000      	b.n	d8c8 <am_util_stdio_vsprintf+0x340>
    d8c6:	2300      	movs	r3, #0
    d8c8:	68fa      	ldr	r2, [r7, #12]
    d8ca:	4413      	add	r3, r2
    d8cc:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    d8ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d8d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d8d2:	4413      	add	r3, r2
    d8d4:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    d8d6:	2300      	movs	r3, #0
    d8d8:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    d8da:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    d8de:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d8e2:	68fa      	ldr	r2, [r7, #12]
    d8e4:	f7ff fcae 	bl	d244 <uint64_to_hexstr>
    d8e8:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    d8ea:	68fb      	ldr	r3, [r7, #12]
    d8ec:	2b00      	cmp	r3, #0
    d8ee:	d003      	beq.n	d8f8 <am_util_stdio_vsprintf+0x370>
                {
                    pcBuf += iVal;
    d8f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d8f2:	68fa      	ldr	r2, [r7, #12]
    d8f4:	4413      	add	r3, r2
    d8f6:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    d8f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d8fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d8fc:	4413      	add	r3, r2
    d8fe:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d900:	e133      	b.n	db6a <am_util_stdio_vsprintf+0x5e2>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d902:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    d906:	2b00      	cmp	r3, #0
    d908:	d009      	beq.n	d91e <am_util_stdio_vsprintf+0x396>
    d90a:	687b      	ldr	r3, [r7, #4]
    d90c:	3307      	adds	r3, #7
    d90e:	f023 0307 	bic.w	r3, r3, #7
    d912:	f103 0208 	add.w	r2, r3, #8
    d916:	607a      	str	r2, [r7, #4]
    d918:	e9d3 2300 	ldrd	r2, r3, [r3]
    d91c:	e006      	b.n	d92c <am_util_stdio_vsprintf+0x3a4>
                                      va_arg(pArgs, uint32_t);
    d91e:	687b      	ldr	r3, [r7, #4]
    d920:	1d1a      	adds	r2, r3, #4
    d922:	607a      	str	r2, [r7, #4]
    d924:	681b      	ldr	r3, [r3, #0]

                ui32CharCnt += iVal;
                break;

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d926:	461a      	mov	r2, r3
    d928:	f04f 0300 	mov.w	r3, #0
    d92c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
                                      va_arg(pArgs, uint32_t);

                if ( iWidth )
    d930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d932:	2b00      	cmp	r3, #0
    d934:	d01e      	beq.n	d974 <am_util_stdio_vsprintf+0x3ec>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    d936:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d93a:	f7ff fb8f 	bl	d05c <ndigits_in_u64>
    d93e:	4602      	mov	r2, r0
    d940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d942:	1a9b      	subs	r3, r3, r2
    d944:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d946:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d94a:	68f8      	ldr	r0, [r7, #12]
    d94c:	4619      	mov	r1, r3
    d94e:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d950:	f7ff fcf4 	bl	d33c <padbuffer>
    d954:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    d956:	68fb      	ldr	r3, [r7, #12]
    d958:	2b00      	cmp	r3, #0
    d95a:	d001      	beq.n	d960 <am_util_stdio_vsprintf+0x3d8>
    d95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d95e:	e000      	b.n	d962 <am_util_stdio_vsprintf+0x3da>
    d960:	2300      	movs	r3, #0
    d962:	68fa      	ldr	r2, [r7, #12]
    d964:	4413      	add	r3, r2
    d966:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    d968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d96a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d96c:	4413      	add	r3, r2
    d96e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    d970:	2300      	movs	r3, #0
    d972:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d974:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d978:	68fa      	ldr	r2, [r7, #12]
    d97a:	f7ff fc1b 	bl	d1b4 <uint64_to_str>
    d97e:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    d980:	68fb      	ldr	r3, [r7, #12]
    d982:	2b00      	cmp	r3, #0
    d984:	d003      	beq.n	d98e <am_util_stdio_vsprintf+0x406>
                {
                    pcBuf += iVal;
    d986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d988:	68fa      	ldr	r2, [r7, #12]
    d98a:	4413      	add	r3, r2
    d98c:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    d98e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d990:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d992:	4413      	add	r3, r2
    d994:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d996:	e0e8      	b.n	db6a <am_util_stdio_vsprintf+0x5e2>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d998:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    d99c:	2b00      	cmp	r3, #0
    d99e:	d009      	beq.n	d9b4 <am_util_stdio_vsprintf+0x42c>
    d9a0:	687b      	ldr	r3, [r7, #4]
    d9a2:	3307      	adds	r3, #7
    d9a4:	f023 0307 	bic.w	r3, r3, #7
    d9a8:	f103 0208 	add.w	r2, r3, #8
    d9ac:	607a      	str	r2, [r7, #4]
    d9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
    d9b2:	e006      	b.n	d9c2 <am_util_stdio_vsprintf+0x43a>
                                     va_arg(pArgs, int32_t);
    d9b4:	687b      	ldr	r3, [r7, #4]
    d9b6:	1d1a      	adds	r2, r3, #4
    d9b8:	607a      	str	r2, [r7, #4]
    d9ba:	681b      	ldr	r3, [r3, #0]
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d9bc:	461a      	mov	r2, r3
    d9be:	ea4f 73e2 	mov.w	r3, r2, asr #31
    d9c2:	e9c7 2306 	strd	r2, r3, [r7, #24]
                                     va_arg(pArgs, int32_t);

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    d9c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
    d9ca:	2a00      	cmp	r2, #0
    d9cc:	f173 0300 	sbcs.w	r3, r3, #0
    d9d0:	da0a      	bge.n	d9e8 <am_util_stdio_vsprintf+0x460>
                {
                    ui64Val = -i64Val;          // Get absolute value
    d9d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
    d9d6:	4252      	negs	r2, r2
    d9d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    d9dc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
                    bNeg = true;
    d9e0:	2301      	movs	r3, #1
    d9e2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    d9e6:	e006      	b.n	d9f6 <am_util_stdio_vsprintf+0x46e>
                }
                else
                {
                    ui64Val = i64Val;
    d9e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
    d9ec:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
                    bNeg = false;
    d9f0:	2300      	movs	r3, #0
    d9f2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    d9f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d9f8:	2b00      	cmp	r3, #0
    d9fa:	d04a      	beq.n	da92 <am_util_stdio_vsprintf+0x50a>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    d9fc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
    da00:	4610      	mov	r0, r2
    da02:	4619      	mov	r1, r3
    da04:	f7ff fb4c 	bl	d0a0 <ndigits_in_i64>
    da08:	4602      	mov	r2, r0
    da0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    da0c:	1a9b      	subs	r3, r3, r2
    da0e:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    da10:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    da14:	2b00      	cmp	r3, #0
    da16:	d011      	beq.n	da3c <am_util_stdio_vsprintf+0x4b4>
                    {
                        --iWidth;
    da18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    da1a:	3b01      	subs	r3, #1
    da1c:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    da1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    da22:	2b30      	cmp	r3, #48	; 0x30
    da24:	d10a      	bne.n	da3c <am_util_stdio_vsprintf+0x4b4>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    da26:	68fb      	ldr	r3, [r7, #12]
    da28:	2b00      	cmp	r3, #0
    da2a:	d004      	beq.n	da36 <am_util_stdio_vsprintf+0x4ae>
                            {
                                *pcBuf++ = '-';
    da2c:	68fb      	ldr	r3, [r7, #12]
    da2e:	1c5a      	adds	r2, r3, #1
    da30:	60fa      	str	r2, [r7, #12]
    da32:	222d      	movs	r2, #45	; 0x2d
    da34:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    da36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    da38:	3301      	adds	r3, #1
    da3a:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    da3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    da40:	68f8      	ldr	r0, [r7, #12]
    da42:	4619      	mov	r1, r3
    da44:	6bba      	ldr	r2, [r7, #56]	; 0x38
    da46:	f7ff fc79 	bl	d33c <padbuffer>
    da4a:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    da4c:	68fb      	ldr	r3, [r7, #12]
    da4e:	2b00      	cmp	r3, #0
    da50:	d001      	beq.n	da56 <am_util_stdio_vsprintf+0x4ce>
    da52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    da54:	e000      	b.n	da58 <am_util_stdio_vsprintf+0x4d0>
    da56:	2300      	movs	r3, #0
    da58:	68fa      	ldr	r2, [r7, #12]
    da5a:	4413      	add	r3, r2
    da5c:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    da5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    da60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    da62:	4413      	add	r3, r2
    da64:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    da66:	2300      	movs	r3, #0
    da68:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    da6a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    da6e:	2b00      	cmp	r3, #0
    da70:	d01e      	beq.n	dab0 <am_util_stdio_vsprintf+0x528>
    da72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    da76:	2b20      	cmp	r3, #32
    da78:	d11a      	bne.n	dab0 <am_util_stdio_vsprintf+0x528>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    da7a:	68fb      	ldr	r3, [r7, #12]
    da7c:	2b00      	cmp	r3, #0
    da7e:	d004      	beq.n	da8a <am_util_stdio_vsprintf+0x502>
                        {
                            *pcBuf++ = '-';
    da80:	68fb      	ldr	r3, [r7, #12]
    da82:	1c5a      	adds	r2, r3, #1
    da84:	60fa      	str	r2, [r7, #12]
    da86:	222d      	movs	r2, #45	; 0x2d
    da88:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    da8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    da8c:	3301      	adds	r3, #1
    da8e:	63fb      	str	r3, [r7, #60]	; 0x3c
    da90:	e00e      	b.n	dab0 <am_util_stdio_vsprintf+0x528>
                    }
                }
                else
                {
                    if ( bNeg )
    da92:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    da96:	2b00      	cmp	r3, #0
    da98:	d00a      	beq.n	dab0 <am_util_stdio_vsprintf+0x528>
                    {
                        if ( pcBuf )
    da9a:	68fb      	ldr	r3, [r7, #12]
    da9c:	2b00      	cmp	r3, #0
    da9e:	d004      	beq.n	daaa <am_util_stdio_vsprintf+0x522>
                        {
                            *pcBuf++ = '-';
    daa0:	68fb      	ldr	r3, [r7, #12]
    daa2:	1c5a      	adds	r2, r3, #1
    daa4:	60fa      	str	r2, [r7, #12]
    daa6:	222d      	movs	r2, #45	; 0x2d
    daa8:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    daaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    daac:	3301      	adds	r3, #1
    daae:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    dab0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    dab4:	68fa      	ldr	r2, [r7, #12]
    dab6:	f7ff fb7d 	bl	d1b4 <uint64_to_str>
    daba:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    dabc:	68fb      	ldr	r3, [r7, #12]
    dabe:	2b00      	cmp	r3, #0
    dac0:	d003      	beq.n	daca <am_util_stdio_vsprintf+0x542>
                {
                    pcBuf += iVal;
    dac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    dac4:	68fa      	ldr	r2, [r7, #12]
    dac6:	4413      	add	r3, r2
    dac8:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    daca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    dacc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    dace:	4413      	add	r3, r2
    dad0:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    dad2:	e04a      	b.n	db6a <am_util_stdio_vsprintf+0x5e2>


            case 'f':
            case 'F':
                if ( pcBuf )
    dad4:	68fb      	ldr	r3, [r7, #12]
    dad6:	2b00      	cmp	r3, #0
    dad8:	d039      	beq.n	db4e <am_util_stdio_vsprintf+0x5c6>
                {
                    float fValue = va_arg(pArgs, double);
    dada:	687b      	ldr	r3, [r7, #4]
    dadc:	3307      	adds	r3, #7
    dade:	f023 0307 	bic.w	r3, r3, #7
    dae2:	f103 0208 	add.w	r2, r3, #8
    dae6:	607a      	str	r2, [r7, #4]
    dae8:	e9d3 2300 	ldrd	r2, r3, [r3]
    daec:	4610      	mov	r0, r2
    daee:	4619      	mov	r1, r3
    daf0:	f7fe fcbe 	bl	c470 <__aeabi_d2f>
    daf4:	4603      	mov	r3, r0
    daf6:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    daf8:	68fb      	ldr	r3, [r7, #12]
    dafa:	2214      	movs	r2, #20
    dafc:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    dafe:	ed97 0a05 	vldr	s0, [r7, #20]
    db02:	68f8      	ldr	r0, [r7, #12]
    db04:	6b39      	ldr	r1, [r7, #48]	; 0x30
    db06:	f7ff fc3f 	bl	d388 <ftoa>
    db0a:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    db0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    db0e:	2b00      	cmp	r3, #0
    db10:	da14      	bge.n	db3c <am_util_stdio_vsprintf+0x5b4>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    db12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    db14:	f1b3 3fff 	cmp.w	r3, #4294967295
    db18:	d102      	bne.n	db20 <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    db1a:	4b1d      	ldr	r3, [pc, #116]	; (db90 <am_util_stdio_vsprintf+0x608>)
    db1c:	62bb      	str	r3, [r7, #40]	; 0x28
    db1e:	e008      	b.n	db32 <am_util_stdio_vsprintf+0x5aa>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    db20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    db22:	f113 0f02 	cmn.w	r3, #2
    db26:	d102      	bne.n	db2e <am_util_stdio_vsprintf+0x5a6>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    db28:	4b1a      	ldr	r3, [pc, #104]	; (db94 <am_util_stdio_vsprintf+0x60c>)
    db2a:	62bb      	str	r3, [r7, #40]	; 0x28
    db2c:	e001      	b.n	db32 <am_util_stdio_vsprintf+0x5aa>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    db2e:	4b1a      	ldr	r3, [pc, #104]	; (db98 <am_util_stdio_vsprintf+0x610>)
    db30:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    db32:	68fb      	ldr	r3, [r7, #12]
    db34:	6aba      	ldr	r2, [r7, #40]	; 0x28
    db36:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    db38:	2303      	movs	r3, #3
    db3a:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    db3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    db3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    db40:	4413      	add	r3, r2
    db42:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    db44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    db46:	68fa      	ldr	r2, [r7, #12]
    db48:	4413      	add	r3, r2
    db4a:	60fb      	str	r3, [r7, #12]
                }
                break;
    db4c:	e00d      	b.n	db6a <am_util_stdio_vsprintf+0x5e2>
    db4e:	e00c      	b.n	db6a <am_util_stdio_vsprintf+0x5e2>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    db50:	68fb      	ldr	r3, [r7, #12]
    db52:	2b00      	cmp	r3, #0
    db54:	d005      	beq.n	db62 <am_util_stdio_vsprintf+0x5da>
                {
                    *pcBuf++ = *pcFmt;
    db56:	68fb      	ldr	r3, [r7, #12]
    db58:	1c5a      	adds	r2, r3, #1
    db5a:	60fa      	str	r2, [r7, #12]
    db5c:	68ba      	ldr	r2, [r7, #8]
    db5e:	7812      	ldrb	r2, [r2, #0]
    db60:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    db62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    db64:	3301      	adds	r3, #1
    db66:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    db68:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    db6a:	68bb      	ldr	r3, [r7, #8]
    db6c:	3301      	adds	r3, #1
    db6e:	60bb      	str	r3, [r7, #8]
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
    db70:	68bb      	ldr	r3, [r7, #8]
    db72:	781b      	ldrb	r3, [r3, #0]
    db74:	2b00      	cmp	r3, #0
    db76:	f47f ad12 	bne.w	d59e <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    db7a:	68fb      	ldr	r3, [r7, #12]
    db7c:	2b00      	cmp	r3, #0
    db7e:	d002      	beq.n	db86 <am_util_stdio_vsprintf+0x5fe>
    {
        *pcBuf = 0x0;
    db80:	68fb      	ldr	r3, [r7, #12]
    db82:	2200      	movs	r2, #0
    db84:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    db86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    db88:	4618      	mov	r0, r3
    db8a:	3750      	adds	r7, #80	; 0x50
    db8c:	46bd      	mov	sp, r7
    db8e:	bd80      	pop	{r7, pc}
    db90:	00302e30 	.word	0x00302e30
    db94:	00232e23 	.word	0x00232e23
    db98:	003f2e3f 	.word	0x003f2e3f

0000db9c <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    db9c:	b40f      	push	{r0, r1, r2, r3}
    db9e:	b580      	push	{r7, lr}
    dba0:	b082      	sub	sp, #8
    dba2:	af00      	add	r7, sp, #0
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    dba4:	4b0d      	ldr	r3, [pc, #52]	; (dbdc <am_util_stdio_printf+0x40>)
    dba6:	681b      	ldr	r3, [r3, #0]
    dba8:	2b00      	cmp	r3, #0
    dbaa:	d101      	bne.n	dbb0 <am_util_stdio_printf+0x14>
    {
        return 0;
    dbac:	2300      	movs	r3, #0
    dbae:	e00d      	b.n	dbcc <am_util_stdio_printf+0x30>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    dbb0:	f107 0314 	add.w	r3, r7, #20
    dbb4:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    dbb6:	480a      	ldr	r0, [pc, #40]	; (dbe0 <am_util_stdio_printf+0x44>)
    dbb8:	6939      	ldr	r1, [r7, #16]
    dbba:	683a      	ldr	r2, [r7, #0]
    dbbc:	f7ff fce4 	bl	d588 <am_util_stdio_vsprintf>
    dbc0:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    dbc2:	4b06      	ldr	r3, [pc, #24]	; (dbdc <am_util_stdio_printf+0x40>)
    dbc4:	681b      	ldr	r3, [r3, #0]
    dbc6:	4806      	ldr	r0, [pc, #24]	; (dbe0 <am_util_stdio_printf+0x44>)
    dbc8:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    dbca:	687b      	ldr	r3, [r7, #4]
}
    dbcc:	4618      	mov	r0, r3
    dbce:	3708      	adds	r7, #8
    dbd0:	46bd      	mov	sp, r7
    dbd2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    dbd6:	b004      	add	sp, #16
    dbd8:	4770      	bx	lr
    dbda:	bf00      	nop
    dbdc:	10001160 	.word	0x10001160
    dbe0:	10001038 	.word	0x10001038

0000dbe4 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    dbe4:	b580      	push	{r7, lr}
    dbe6:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    dbe8:	4801      	ldr	r0, [pc, #4]	; (dbf0 <am_util_stdio_terminal_clear+0xc>)
    dbea:	f7ff ffd7 	bl	db9c <am_util_stdio_printf>
}
    dbee:	bd80      	pop	{r7, pc}
    dbf0:	0000f0a4 	.word	0x0000f0a4

0000dbf4 <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    dbf4:	4811      	ldr	r0, [pc, #68]	; (dc3c <zero_loop+0x12>)
    dbf6:	4912      	ldr	r1, [pc, #72]	; (dc40 <zero_loop+0x16>)
    dbf8:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    dbfa:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    dbfe:	4811      	ldr	r0, [pc, #68]	; (dc44 <zero_loop+0x1a>)
    dc00:	6801      	ldr	r1, [r0, #0]
    dc02:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    dc06:	6001      	str	r1, [r0, #0]
    dc08:	f3bf 8f4f 	dsb	sy
    dc0c:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    dc10:	480d      	ldr	r0, [pc, #52]	; (dc48 <zero_loop+0x1e>)
    dc12:	490e      	ldr	r1, [pc, #56]	; (dc4c <zero_loop+0x22>)
    dc14:	4a0e      	ldr	r2, [pc, #56]	; (dc50 <zero_loop+0x26>)

0000dc16 <copy_loop>:
    dc16:	f850 3b04 	ldr.w	r3, [r0], #4
    dc1a:	f841 3b04 	str.w	r3, [r1], #4
    dc1e:	4291      	cmp	r1, r2
    dc20:	dbf9      	blt.n	dc16 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    dc22:	480c      	ldr	r0, [pc, #48]	; (dc54 <zero_loop+0x2a>)
    dc24:	490c      	ldr	r1, [pc, #48]	; (dc58 <zero_loop+0x2e>)
    dc26:	f04f 0200 	mov.w	r2, #0

0000dc2a <zero_loop>:
    dc2a:	4288      	cmp	r0, r1
    dc2c:	bfb8      	it	lt
    dc2e:	f840 2b04 	strlt.w	r2, [r0], #4
    dc32:	dbfa      	blt.n	dc2a <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    dc34:	f7fe fda0 	bl	c778 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    dc38:	be00      	bkpt	0x0000
    dc3a:	0000      	.short	0x0000
    dc3c:	e000ed08 	.word	0xe000ed08
    dc40:	0000c000 	.word	0x0000c000
    dc44:	e000ed88 	.word	0xe000ed88
    dc48:	0000f370 	.word	0x0000f370
    dc4c:	10001000 	.word	0x10001000
    dc50:	10001034 	.word	0x10001034
    dc54:	10001034 	.word	0x10001034
    dc58:	100011a8 	.word	0x100011a8

0000dc5c <NMI_Handler>:
// by a debugger.
//
//*****************************************************************************
void
NMI_Handler(void)
{
    dc5c:	b480      	push	{r7}
    dc5e:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
    dc60:	e7fe      	b.n	dc60 <NMI_Handler+0x4>
    dc62:	bf00      	nop

0000dc64 <DebugMon_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    dc64:	b480      	push	{r7}
    dc66:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
    dc68:	e7fe      	b.n	dc68 <DebugMon_Handler+0x4>
    dc6a:	bf00      	nop

0000dc6c <am_hal_adc_initialize>:
    dc6c:	b108      	cbz	r0, dc72 <am_hal_adc_initialize+0x6>
    dc6e:	2005      	movs	r0, #5
    dc70:	4770      	bx	lr
    dc72:	b139      	cbz	r1, dc84 <am_hal_adc_initialize+0x18>
    dc74:	4a1b      	ldr	r2, [pc, #108]	; (dce4 <am_hal_adc_initialize+0x78>)
    dc76:	b538      	push	{r3, r4, r5, lr}
    dc78:	78d3      	ldrb	r3, [r2, #3]
    dc7a:	f013 0401 	ands.w	r4, r3, #1
    dc7e:	d003      	beq.n	dc88 <am_hal_adc_initialize+0x1c>
    dc80:	2007      	movs	r0, #7
    dc82:	bd38      	pop	{r3, r4, r5, pc}
    dc84:	2006      	movs	r0, #6
    dc86:	4770      	bx	lr
    dc88:	f043 0301 	orr.w	r3, r3, #1
    dc8c:	70d3      	strb	r3, [r2, #3]
    dc8e:	6813      	ldr	r3, [r2, #0]
    dc90:	4d15      	ldr	r5, [pc, #84]	; (dce8 <am_hal_adc_initialize+0x7c>)
    dc92:	4816      	ldr	r0, [pc, #88]	; (dcec <am_hal_adc_initialize+0x80>)
    dc94:	6054      	str	r4, [r2, #4]
    dc96:	f365 0317 	bfi	r3, r5, #0, #24
    dc9a:	6013      	str	r3, [r2, #0]
    dc9c:	6004      	str	r4, [r0, #0]
    dc9e:	600a      	str	r2, [r1, #0]
    dca0:	4813      	ldr	r0, [pc, #76]	; (dcf0 <am_hal_adc_initialize+0x84>)
    dca2:	4d14      	ldr	r5, [pc, #80]	; (dcf4 <am_hal_adc_initialize+0x88>)
    dca4:	f000 fc1c 	bl	e4e0 <am_hal_flash_load_ui32>
    dca8:	6028      	str	r0, [r5, #0]
    dcaa:	4813      	ldr	r0, [pc, #76]	; (dcf8 <am_hal_adc_initialize+0x8c>)
    dcac:	f000 fc18 	bl	e4e0 <am_hal_flash_load_ui32>
    dcb0:	6068      	str	r0, [r5, #4]
    dcb2:	4812      	ldr	r0, [pc, #72]	; (dcfc <am_hal_adc_initialize+0x90>)
    dcb4:	f000 fc14 	bl	e4e0 <am_hal_flash_load_ui32>
    dcb8:	682b      	ldr	r3, [r5, #0]
    dcba:	60a8      	str	r0, [r5, #8]
    dcbc:	3301      	adds	r3, #1
    dcbe:	d008      	beq.n	dcd2 <am_hal_adc_initialize+0x66>
    dcc0:	686b      	ldr	r3, [r5, #4]
    dcc2:	3301      	adds	r3, #1
    dcc4:	d005      	beq.n	dcd2 <am_hal_adc_initialize+0x66>
    dcc6:	3001      	adds	r0, #1
    dcc8:	d003      	beq.n	dcd2 <am_hal_adc_initialize+0x66>
    dcca:	2301      	movs	r3, #1
    dccc:	732b      	strb	r3, [r5, #12]
    dcce:	4620      	mov	r0, r4
    dcd0:	bd38      	pop	{r3, r4, r5, pc}
    dcd2:	490b      	ldr	r1, [pc, #44]	; (dd00 <am_hal_adc_initialize+0x94>)
    dcd4:	4a0b      	ldr	r2, [pc, #44]	; (dd04 <am_hal_adc_initialize+0x98>)
    dcd6:	4b0c      	ldr	r3, [pc, #48]	; (dd08 <am_hal_adc_initialize+0x9c>)
    dcd8:	6029      	str	r1, [r5, #0]
    dcda:	2000      	movs	r0, #0
    dcdc:	606a      	str	r2, [r5, #4]
    dcde:	60ab      	str	r3, [r5, #8]
    dce0:	7328      	strb	r0, [r5, #12]
    dce2:	bd38      	pop	{r3, r4, r5, pc}
    dce4:	10001168 	.word	0x10001168
    dce8:	00afafaf 	.word	0x00afafaf
    dcec:	10001164 	.word	0x10001164
    dcf0:	50023840 	.word	0x50023840
    dcf4:	1000113c 	.word	0x1000113c
    dcf8:	50023844 	.word	0x50023844
    dcfc:	50023848 	.word	0x50023848
    dd00:	4395c000 	.word	0x4395c000
    dd04:	3f839874 	.word	0x3f839874
    dd08:	bb8c47a1 	.word	0xbb8c47a1

0000dd0c <am_hal_adc_configure>:
    dd0c:	b128      	cbz	r0, dd1a <am_hal_adc_configure+0xe>
    dd0e:	6803      	ldr	r3, [r0, #0]
    dd10:	4a18      	ldr	r2, [pc, #96]	; (dd74 <am_hal_adc_configure+0x68>)
    dd12:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dd16:	4293      	cmp	r3, r2
    dd18:	d001      	beq.n	dd1e <am_hal_adc_configure+0x12>
    dd1a:	2002      	movs	r0, #2
    dd1c:	4770      	bx	lr
    dd1e:	b5f0      	push	{r4, r5, r6, r7, lr}
    dd20:	7808      	ldrb	r0, [r1, #0]
    dd22:	784d      	ldrb	r5, [r1, #1]
    dd24:	788c      	ldrb	r4, [r1, #2]
    dd26:	f891 e003 	ldrb.w	lr, [r1, #3]
    dd2a:	790f      	ldrb	r7, [r1, #4]
    dd2c:	794a      	ldrb	r2, [r1, #5]
    dd2e:	798b      	ldrb	r3, [r1, #6]
    dd30:	4e11      	ldr	r6, [pc, #68]	; (dd78 <am_hal_adc_configure+0x6c>)
    dd32:	0600      	lsls	r0, r0, #24
    dd34:	04ed      	lsls	r5, r5, #19
    dd36:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
    dd3a:	f000 7040 	and.w	r0, r0, #50331648	; 0x3000000
    dd3e:	4328      	orrs	r0, r5
    dd40:	0424      	lsls	r4, r4, #16
    dd42:	ea4f 210e 	mov.w	r1, lr, lsl #8
    dd46:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
    dd4a:	f404 24e0 	and.w	r4, r4, #458752	; 0x70000
    dd4e:	4304      	orrs	r4, r0
    dd50:	f401 7040 	and.w	r0, r1, #768	; 0x300
    dd54:	0139      	lsls	r1, r7, #4
    dd56:	4320      	orrs	r0, r4
    dd58:	f001 0110 	and.w	r1, r1, #16
    dd5c:	00d2      	lsls	r2, r2, #3
    dd5e:	4301      	orrs	r1, r0
    dd60:	f002 0208 	and.w	r2, r2, #8
    dd64:	009b      	lsls	r3, r3, #2
    dd66:	430a      	orrs	r2, r1
    dd68:	f003 0304 	and.w	r3, r3, #4
    dd6c:	4313      	orrs	r3, r2
    dd6e:	6033      	str	r3, [r6, #0]
    dd70:	2000      	movs	r0, #0
    dd72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dd74:	01afafaf 	.word	0x01afafaf
    dd78:	50010000 	.word	0x50010000

0000dd7c <am_hal_adc_configure_slot>:
    dd7c:	b128      	cbz	r0, dd8a <am_hal_adc_configure_slot+0xe>
    dd7e:	6803      	ldr	r3, [r0, #0]
    dd80:	4816      	ldr	r0, [pc, #88]	; (dddc <am_hal_adc_configure_slot+0x60>)
    dd82:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dd86:	4283      	cmp	r3, r0
    dd88:	d001      	beq.n	dd8e <am_hal_adc_configure_slot+0x12>
    dd8a:	2002      	movs	r0, #2
    dd8c:	4770      	bx	lr
    dd8e:	2907      	cmp	r1, #7
    dd90:	d901      	bls.n	dd96 <am_hal_adc_configure_slot+0x1a>
    dd92:	2005      	movs	r0, #5
    dd94:	4770      	bx	lr
    dd96:	b5f0      	push	{r4, r5, r6, r7, lr}
    dd98:	7813      	ldrb	r3, [r2, #0]
    dd9a:	7854      	ldrb	r4, [r2, #1]
    dd9c:	7890      	ldrb	r0, [r2, #2]
    dd9e:	78d7      	ldrb	r7, [r2, #3]
    dda0:	f892 e004 	ldrb.w	lr, [r2, #4]
    dda4:	4d0e      	ldr	r5, [pc, #56]	; (dde0 <am_hal_adc_configure_slot+0x64>)
    dda6:	4e0f      	ldr	r6, [pc, #60]	; (dde4 <am_hal_adc_configure_slot+0x68>)
    dda8:	061b      	lsls	r3, r3, #24
    ddaa:	0424      	lsls	r4, r4, #16
    ddac:	f404 3440 	and.w	r4, r4, #196608	; 0x30000
    ddb0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    ddb4:	4323      	orrs	r3, r4
    ddb6:	0202      	lsls	r2, r0, #8
    ddb8:	ea43 0e0e 	orr.w	lr, r3, lr
    ddbc:	440d      	add	r5, r1
    ddbe:	007b      	lsls	r3, r7, #1
    ddc0:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    ddc4:	ea4e 0202 	orr.w	r2, lr, r2
    ddc8:	00ad      	lsls	r5, r5, #2
    ddca:	f003 0302 	and.w	r3, r3, #2
    ddce:	4313      	orrs	r3, r2
    ddd0:	602b      	str	r3, [r5, #0]
    ddd2:	6833      	ldr	r3, [r6, #0]
    ddd4:	3301      	adds	r3, #1
    ddd6:	6033      	str	r3, [r6, #0]
    ddd8:	2000      	movs	r0, #0
    ddda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dddc:	01afafaf 	.word	0x01afafaf
    dde0:	14004003 	.word	0x14004003
    dde4:	10001164 	.word	0x10001164

0000dde8 <am_hal_adc_control>:
    dde8:	b128      	cbz	r0, ddf6 <am_hal_adc_control+0xe>
    ddea:	6803      	ldr	r3, [r0, #0]
    ddec:	482d      	ldr	r0, [pc, #180]	; (dea4 <am_hal_adc_control+0xbc>)
    ddee:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    ddf2:	4283      	cmp	r3, r0
    ddf4:	d001      	beq.n	ddfa <am_hal_adc_control+0x12>
    ddf6:	2002      	movs	r0, #2
    ddf8:	4770      	bx	lr
    ddfa:	2901      	cmp	r1, #1
    ddfc:	d016      	beq.n	de2c <am_hal_adc_control+0x44>
    ddfe:	d30f      	bcc.n	de20 <am_hal_adc_control+0x38>
    de00:	2902      	cmp	r1, #2
    de02:	d10b      	bne.n	de1c <am_hal_adc_control+0x34>
    de04:	b152      	cbz	r2, de1c <am_hal_adc_control+0x34>
    de06:	eddf 7a28 	vldr	s15, [pc, #160]	; dea8 <am_hal_adc_control+0xc0>
    de0a:	ed92 7a03 	vldr	s14, [r2, #12]
    de0e:	eeb4 7a67 	vcmp.f32	s14, s15
    de12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    de16:	d037      	beq.n	de88 <am_hal_adc_control+0xa0>
    de18:	2007      	movs	r0, #7
    de1a:	4770      	bx	lr
    de1c:	2006      	movs	r0, #6
    de1e:	4770      	bx	lr
    de20:	6851      	ldr	r1, [r2, #4]
    de22:	4b22      	ldr	r3, [pc, #136]	; (deac <am_hal_adc_control+0xc4>)
    de24:	4299      	cmp	r1, r3
    de26:	d925      	bls.n	de74 <am_hal_adc_control+0x8c>
    de28:	2005      	movs	r0, #5
    de2a:	4770      	bx	lr
    de2c:	2a00      	cmp	r2, #0
    de2e:	d0f5      	beq.n	de1c <am_hal_adc_control+0x34>
    de30:	eddf 7a1d 	vldr	s15, [pc, #116]	; dea8 <am_hal_adc_control+0xc0>
    de34:	ed92 7a02 	vldr	s14, [r2, #8]
    de38:	eeb4 7a67 	vcmp.f32	s14, s15
    de3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    de40:	d1ea      	bne.n	de18 <am_hal_adc_control+0x30>
    de42:	4b1b      	ldr	r3, [pc, #108]	; (deb0 <am_hal_adc_control+0xc8>)
    de44:	ed92 7a00 	vldr	s14, [r2]
    de48:	edd3 7a02 	vldr	s15, [r3, #8]
    de4c:	edd3 6a01 	vldr	s13, [r3, #4]
    de50:	edd3 5a00 	vldr	s11, [r3]
    de54:	ed9f 6a17 	vldr	s12, [pc, #92]	; deb4 <am_hal_adc_control+0xcc>
    de58:	ee76 6ae7 	vsub.f32	s13, s13, s15
    de5c:	ee37 7a67 	vsub.f32	s14, s14, s15
    de60:	eec5 7aa6 	vdiv.f32	s15, s11, s13
    de64:	2000      	movs	r0, #0
    de66:	ee67 7a27 	vmul.f32	s15, s14, s15
    de6a:	ee77 7ac6 	vsub.f32	s15, s15, s12
    de6e:	edc2 7a01 	vstr	s15, [r2, #4]
    de72:	4770      	bx	lr
    de74:	6890      	ldr	r0, [r2, #8]
    de76:	4298      	cmp	r0, r3
    de78:	d8d6      	bhi.n	de28 <am_hal_adc_control+0x40>
    de7a:	4b0f      	ldr	r3, [pc, #60]	; (deb8 <am_hal_adc_control+0xd0>)
    de7c:	62d9      	str	r1, [r3, #44]	; 0x2c
    de7e:	6318      	str	r0, [r3, #48]	; 0x30
    de80:	7812      	ldrb	r2, [r2, #0]
    de82:	635a      	str	r2, [r3, #52]	; 0x34
    de84:	2000      	movs	r0, #0
    de86:	4770      	bx	lr
    de88:	b410      	push	{r4}
    de8a:	4b09      	ldr	r3, [pc, #36]	; (deb0 <am_hal_adc_control+0xc8>)
    de8c:	681c      	ldr	r4, [r3, #0]
    de8e:	6858      	ldr	r0, [r3, #4]
    de90:	6899      	ldr	r1, [r3, #8]
    de92:	7b1b      	ldrb	r3, [r3, #12]
    de94:	6014      	str	r4, [r2, #0]
    de96:	6050      	str	r0, [r2, #4]
    de98:	6091      	str	r1, [r2, #8]
    de9a:	2000      	movs	r0, #0
    de9c:	60d3      	str	r3, [r2, #12]
    de9e:	f85d 4b04 	ldr.w	r4, [sp], #4
    dea2:	4770      	bx	lr
    dea4:	01afafaf 	.word	0x01afafaf
    dea8:	c2f6e979 	.word	0xc2f6e979
    deac:	000fffff 	.word	0x000fffff
    deb0:	1000113c 	.word	0x1000113c
    deb4:	43889333 	.word	0x43889333
    deb8:	50010000 	.word	0x50010000

0000debc <am_hal_adc_enable>:
    debc:	4603      	mov	r3, r0
    debe:	b128      	cbz	r0, decc <am_hal_adc_enable+0x10>
    dec0:	6802      	ldr	r2, [r0, #0]
    dec2:	490c      	ldr	r1, [pc, #48]	; (def4 <am_hal_adc_enable+0x38>)
    dec4:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    dec8:	428a      	cmp	r2, r1
    deca:	d001      	beq.n	ded0 <am_hal_adc_enable+0x14>
    decc:	2002      	movs	r0, #2
    dece:	4770      	bx	lr
    ded0:	78c2      	ldrb	r2, [r0, #3]
    ded2:	f002 0202 	and.w	r2, r2, #2
    ded6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    deda:	b94a      	cbnz	r2, def0 <am_hal_adc_enable+0x34>
    dedc:	4906      	ldr	r1, [pc, #24]	; (def8 <am_hal_adc_enable+0x3c>)
    dede:	680a      	ldr	r2, [r1, #0]
    dee0:	f042 0201 	orr.w	r2, r2, #1
    dee4:	600a      	str	r2, [r1, #0]
    dee6:	78da      	ldrb	r2, [r3, #3]
    dee8:	f042 0202 	orr.w	r2, r2, #2
    deec:	70da      	strb	r2, [r3, #3]
    deee:	4770      	bx	lr
    def0:	2000      	movs	r0, #0
    def2:	4770      	bx	lr
    def4:	01afafaf 	.word	0x01afafaf
    def8:	50010000 	.word	0x50010000

0000defc <am_hal_adc_interrupt_enable>:
    defc:	b128      	cbz	r0, df0a <am_hal_adc_interrupt_enable+0xe>
    defe:	6803      	ldr	r3, [r0, #0]
    df00:	4a07      	ldr	r2, [pc, #28]	; (df20 <am_hal_adc_interrupt_enable+0x24>)
    df02:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    df06:	4293      	cmp	r3, r2
    df08:	d001      	beq.n	df0e <am_hal_adc_interrupt_enable+0x12>
    df0a:	2002      	movs	r0, #2
    df0c:	4770      	bx	lr
    df0e:	4b05      	ldr	r3, [pc, #20]	; (df24 <am_hal_adc_interrupt_enable+0x28>)
    df10:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    df14:	4311      	orrs	r1, r2
    df16:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    df1a:	2000      	movs	r0, #0
    df1c:	4770      	bx	lr
    df1e:	bf00      	nop
    df20:	01afafaf 	.word	0x01afafaf
    df24:	50010000 	.word	0x50010000

0000df28 <am_hal_adc_interrupt_status>:
    df28:	b128      	cbz	r0, df36 <am_hal_adc_interrupt_status+0xe>
    df2a:	6803      	ldr	r3, [r0, #0]
    df2c:	480b      	ldr	r0, [pc, #44]	; (df5c <am_hal_adc_interrupt_status+0x34>)
    df2e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    df32:	4283      	cmp	r3, r0
    df34:	d001      	beq.n	df3a <am_hal_adc_interrupt_status+0x12>
    df36:	2002      	movs	r0, #2
    df38:	4770      	bx	lr
    df3a:	b92a      	cbnz	r2, df48 <am_hal_adc_interrupt_status+0x20>
    df3c:	4b08      	ldr	r3, [pc, #32]	; (df60 <am_hal_adc_interrupt_status+0x38>)
    df3e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    df42:	600b      	str	r3, [r1, #0]
    df44:	4610      	mov	r0, r2
    df46:	4770      	bx	lr
    df48:	4a05      	ldr	r2, [pc, #20]	; (df60 <am_hal_adc_interrupt_status+0x38>)
    df4a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
    df4e:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    df52:	4003      	ands	r3, r0
    df54:	600b      	str	r3, [r1, #0]
    df56:	2000      	movs	r0, #0
    df58:	4770      	bx	lr
    df5a:	bf00      	nop
    df5c:	01afafaf 	.word	0x01afafaf
    df60:	50010000 	.word	0x50010000

0000df64 <am_hal_adc_interrupt_clear>:
    df64:	b128      	cbz	r0, df72 <am_hal_adc_interrupt_clear+0xe>
    df66:	6803      	ldr	r3, [r0, #0]
    df68:	4a05      	ldr	r2, [pc, #20]	; (df80 <am_hal_adc_interrupt_clear+0x1c>)
    df6a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    df6e:	4293      	cmp	r3, r2
    df70:	d001      	beq.n	df76 <am_hal_adc_interrupt_clear+0x12>
    df72:	2002      	movs	r0, #2
    df74:	4770      	bx	lr
    df76:	4b03      	ldr	r3, [pc, #12]	; (df84 <am_hal_adc_interrupt_clear+0x20>)
    df78:	2000      	movs	r0, #0
    df7a:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
    df7e:	4770      	bx	lr
    df80:	01afafaf 	.word	0x01afafaf
    df84:	50010000 	.word	0x50010000

0000df88 <am_hal_adc_samples_read>:
    df88:	b148      	cbz	r0, df9e <am_hal_adc_samples_read+0x16>
    df8a:	6800      	ldr	r0, [r0, #0]
    df8c:	b470      	push	{r4, r5, r6}
    df8e:	4c2a      	ldr	r4, [pc, #168]	; (e038 <am_hal_adc_samples_read+0xb0>)
    df90:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
    df94:	42a0      	cmp	r0, r4
    df96:	d004      	beq.n	dfa2 <am_hal_adc_samples_read+0x1a>
    df98:	2002      	movs	r0, #2
    df9a:	bc70      	pop	{r4, r5, r6}
    df9c:	4770      	bx	lr
    df9e:	2002      	movs	r0, #2
    dfa0:	4770      	bx	lr
    dfa2:	9803      	ldr	r0, [sp, #12]
    dfa4:	b1e0      	cbz	r0, dfe0 <am_hal_adc_samples_read+0x58>
    dfa6:	2000      	movs	r0, #0
    dfa8:	681c      	ldr	r4, [r3, #0]
    dfaa:	6018      	str	r0, [r3, #0]
    dfac:	b1d2      	cbz	r2, dfe4 <am_hal_adc_samples_read+0x5c>
    dfae:	9903      	ldr	r1, [sp, #12]
    dfb0:	4d22      	ldr	r5, [pc, #136]	; (e03c <am_hal_adc_samples_read+0xb4>)
    dfb2:	3a04      	subs	r2, #4
    dfb4:	3108      	adds	r1, #8
    dfb6:	f852 0f04 	ldr.w	r0, [r2, #4]!
    dfba:	6bee      	ldr	r6, [r5, #60]	; 0x3c
    dfbc:	f3c0 7002 	ubfx	r0, r0, #28, #3
    dfc0:	f841 0c04 	str.w	r0, [r1, #-4]
    dfc4:	6810      	ldr	r0, [r2, #0]
    dfc6:	f3c0 108d 	ubfx	r0, r0, #6, #14
    dfca:	f841 0c08 	str.w	r0, [r1, #-8]
    dfce:	6818      	ldr	r0, [r3, #0]
    dfd0:	3001      	adds	r0, #1
    dfd2:	4284      	cmp	r4, r0
    dfd4:	f101 0108 	add.w	r1, r1, #8
    dfd8:	6018      	str	r0, [r3, #0]
    dfda:	d8ec      	bhi.n	dfb6 <am_hal_adc_samples_read+0x2e>
    dfdc:	2000      	movs	r0, #0
    dfde:	e7dc      	b.n	df9a <am_hal_adc_samples_read+0x12>
    dfe0:	2006      	movs	r0, #6
    dfe2:	e7da      	b.n	df9a <am_hal_adc_samples_read+0x12>
    dfe4:	9a03      	ldr	r2, [sp, #12]
    dfe6:	4e15      	ldr	r6, [pc, #84]	; (e03c <am_hal_adc_samples_read+0xb4>)
    dfe8:	f102 0008 	add.w	r0, r2, #8
    dfec:	b9a1      	cbnz	r1, e018 <am_hal_adc_samples_read+0x90>
    dfee:	e001      	b.n	dff4 <am_hal_adc_samples_read+0x6c>
    dff0:	428c      	cmp	r4, r1
    dff2:	d9f3      	bls.n	dfdc <am_hal_adc_samples_read+0x54>
    dff4:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
    dff6:	f3c2 118d 	ubfx	r1, r2, #6, #14
    dffa:	f3c2 7502 	ubfx	r5, r2, #28, #3
    dffe:	e900 0022 	stmdb	r0, {r1, r5}
    e002:	6819      	ldr	r1, [r3, #0]
    e004:	f3c2 5207 	ubfx	r2, r2, #20, #8
    e008:	3101      	adds	r1, #1
    e00a:	3008      	adds	r0, #8
    e00c:	6019      	str	r1, [r3, #0]
    e00e:	2a00      	cmp	r2, #0
    e010:	d1ee      	bne.n	dff0 <am_hal_adc_samples_read+0x68>
    e012:	e7e3      	b.n	dfdc <am_hal_adc_samples_read+0x54>
    e014:	428c      	cmp	r4, r1
    e016:	d9e1      	bls.n	dfdc <am_hal_adc_samples_read+0x54>
    e018:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
    e01a:	f3c2 0113 	ubfx	r1, r2, #0, #20
    e01e:	f3c2 7502 	ubfx	r5, r2, #28, #3
    e022:	e900 0022 	stmdb	r0, {r1, r5}
    e026:	6819      	ldr	r1, [r3, #0]
    e028:	f3c2 5207 	ubfx	r2, r2, #20, #8
    e02c:	3101      	adds	r1, #1
    e02e:	3008      	adds	r0, #8
    e030:	6019      	str	r1, [r3, #0]
    e032:	2a00      	cmp	r2, #0
    e034:	d1ee      	bne.n	e014 <am_hal_adc_samples_read+0x8c>
    e036:	e7d1      	b.n	dfdc <am_hal_adc_samples_read+0x54>
    e038:	01afafaf 	.word	0x01afafaf
    e03c:	50010000 	.word	0x50010000

0000e040 <am_hal_adc_sw_trigger>:
    e040:	b128      	cbz	r0, e04e <am_hal_adc_sw_trigger+0xe>
    e042:	6803      	ldr	r3, [r0, #0]
    e044:	4a05      	ldr	r2, [pc, #20]	; (e05c <am_hal_adc_sw_trigger+0x1c>)
    e046:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e04a:	4293      	cmp	r3, r2
    e04c:	d001      	beq.n	e052 <am_hal_adc_sw_trigger+0x12>
    e04e:	2002      	movs	r0, #2
    e050:	4770      	bx	lr
    e052:	4b03      	ldr	r3, [pc, #12]	; (e060 <am_hal_adc_sw_trigger+0x20>)
    e054:	2237      	movs	r2, #55	; 0x37
    e056:	609a      	str	r2, [r3, #8]
    e058:	2000      	movs	r0, #0
    e05a:	4770      	bx	lr
    e05c:	01afafaf 	.word	0x01afafaf
    e060:	50010000 	.word	0x50010000

0000e064 <am_hal_adc_power_control>:
    e064:	b140      	cbz	r0, e078 <am_hal_adc_power_control+0x14>
    e066:	6803      	ldr	r3, [r0, #0]
    e068:	b570      	push	{r4, r5, r6, lr}
    e06a:	4c2e      	ldr	r4, [pc, #184]	; (e124 <am_hal_adc_power_control+0xc0>)
    e06c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e070:	42a3      	cmp	r3, r4
    e072:	d003      	beq.n	e07c <am_hal_adc_power_control+0x18>
    e074:	2002      	movs	r0, #2
    e076:	bd70      	pop	{r4, r5, r6, pc}
    e078:	2002      	movs	r0, #2
    e07a:	4770      	bx	lr
    e07c:	4604      	mov	r4, r0
    e07e:	4615      	mov	r5, r2
    e080:	460e      	mov	r6, r1
    e082:	b329      	cbz	r1, e0d0 <am_hal_adc_power_control+0x6c>
    e084:	2902      	cmp	r1, #2
    e086:	d821      	bhi.n	e0cc <am_hal_adc_power_control+0x68>
    e088:	b1da      	cbz	r2, e0c2 <am_hal_adc_power_control+0x5e>
    e08a:	4b27      	ldr	r3, [pc, #156]	; (e128 <am_hal_adc_power_control+0xc4>)
    e08c:	68da      	ldr	r2, [r3, #12]
    e08e:	6142      	str	r2, [r0, #20]
    e090:	691a      	ldr	r2, [r3, #16]
    e092:	6182      	str	r2, [r0, #24]
    e094:	695a      	ldr	r2, [r3, #20]
    e096:	61c2      	str	r2, [r0, #28]
    e098:	699a      	ldr	r2, [r3, #24]
    e09a:	6202      	str	r2, [r0, #32]
    e09c:	69da      	ldr	r2, [r3, #28]
    e09e:	6242      	str	r2, [r0, #36]	; 0x24
    e0a0:	6a1a      	ldr	r2, [r3, #32]
    e0a2:	6282      	str	r2, [r0, #40]	; 0x28
    e0a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    e0a6:	62c2      	str	r2, [r0, #44]	; 0x2c
    e0a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e0aa:	6302      	str	r2, [r0, #48]	; 0x30
    e0ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    e0ae:	6342      	str	r2, [r0, #52]	; 0x34
    e0b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    e0b2:	6382      	str	r2, [r0, #56]	; 0x38
    e0b4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    e0b8:	63c2      	str	r2, [r0, #60]	; 0x3c
    e0ba:	681b      	ldr	r3, [r3, #0]
    e0bc:	6103      	str	r3, [r0, #16]
    e0be:	2301      	movs	r3, #1
    e0c0:	7303      	strb	r3, [r0, #12]
    e0c2:	200a      	movs	r0, #10
    e0c4:	f000 fc94 	bl	e9f0 <am_hal_pwrctrl_periph_disable>
    e0c8:	2000      	movs	r0, #0
    e0ca:	bd70      	pop	{r4, r5, r6, pc}
    e0cc:	2006      	movs	r0, #6
    e0ce:	bd70      	pop	{r4, r5, r6, pc}
    e0d0:	b11a      	cbz	r2, e0da <am_hal_adc_power_control+0x76>
    e0d2:	7b03      	ldrb	r3, [r0, #12]
    e0d4:	b933      	cbnz	r3, e0e4 <am_hal_adc_power_control+0x80>
    e0d6:	2007      	movs	r0, #7
    e0d8:	bd70      	pop	{r4, r5, r6, pc}
    e0da:	200a      	movs	r0, #10
    e0dc:	f000 fc5e 	bl	e99c <am_hal_pwrctrl_periph_enable>
    e0e0:	4628      	mov	r0, r5
    e0e2:	bd70      	pop	{r4, r5, r6, pc}
    e0e4:	200a      	movs	r0, #10
    e0e6:	f000 fc59 	bl	e99c <am_hal_pwrctrl_periph_enable>
    e0ea:	4b0f      	ldr	r3, [pc, #60]	; (e128 <am_hal_adc_power_control+0xc4>)
    e0ec:	6962      	ldr	r2, [r4, #20]
    e0ee:	60da      	str	r2, [r3, #12]
    e0f0:	69a2      	ldr	r2, [r4, #24]
    e0f2:	611a      	str	r2, [r3, #16]
    e0f4:	69e2      	ldr	r2, [r4, #28]
    e0f6:	615a      	str	r2, [r3, #20]
    e0f8:	6a22      	ldr	r2, [r4, #32]
    e0fa:	619a      	str	r2, [r3, #24]
    e0fc:	6a62      	ldr	r2, [r4, #36]	; 0x24
    e0fe:	61da      	str	r2, [r3, #28]
    e100:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    e102:	621a      	str	r2, [r3, #32]
    e104:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    e106:	625a      	str	r2, [r3, #36]	; 0x24
    e108:	6b22      	ldr	r2, [r4, #48]	; 0x30
    e10a:	629a      	str	r2, [r3, #40]	; 0x28
    e10c:	6b62      	ldr	r2, [r4, #52]	; 0x34
    e10e:	62da      	str	r2, [r3, #44]	; 0x2c
    e110:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e112:	631a      	str	r2, [r3, #48]	; 0x30
    e114:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    e116:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    e11a:	6922      	ldr	r2, [r4, #16]
    e11c:	601a      	str	r2, [r3, #0]
    e11e:	4630      	mov	r0, r6
    e120:	7326      	strb	r6, [r4, #12]
    e122:	bd70      	pop	{r4, r5, r6, pc}
    e124:	01afafaf 	.word	0x01afafaf
    e128:	50010000 	.word	0x50010000

0000e12c <am_hal_cachectrl_config>:
    e12c:	b530      	push	{r4, r5, lr}
    e12e:	b083      	sub	sp, #12
    e130:	4605      	mov	r5, r0
    e132:	f000 fb95 	bl	e860 <am_hal_interrupt_master_disable>
    e136:	4c0f      	ldr	r4, [pc, #60]	; (e174 <am_hal_cachectrl_config+0x48>)
    e138:	9001      	str	r0, [sp, #4]
    e13a:	6823      	ldr	r3, [r4, #0]
    e13c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    e140:	6023      	str	r3, [r4, #0]
    e142:	9801      	ldr	r0, [sp, #4]
    e144:	f000 fb90 	bl	e868 <am_hal_interrupt_master_set>
    e148:	78ab      	ldrb	r3, [r5, #2]
    e14a:	782a      	ldrb	r2, [r5, #0]
    e14c:	7869      	ldrb	r1, [r5, #1]
    e14e:	005b      	lsls	r3, r3, #1
    e150:	0112      	lsls	r2, r2, #4
    e152:	b2d2      	uxtb	r2, r2
    e154:	f003 0302 	and.w	r3, r3, #2
    e158:	4313      	orrs	r3, r2
    e15a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    e15e:	020a      	lsls	r2, r1, #8
    e160:	f402 7240 	and.w	r2, r2, #768	; 0x300
    e164:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    e168:	4313      	orrs	r3, r2
    e16a:	2000      	movs	r0, #0
    e16c:	6023      	str	r3, [r4, #0]
    e16e:	b003      	add	sp, #12
    e170:	bd30      	pop	{r4, r5, pc}
    e172:	bf00      	nop
    e174:	40018000 	.word	0x40018000

0000e178 <am_hal_cachectrl_enable>:
    e178:	4a03      	ldr	r2, [pc, #12]	; (e188 <am_hal_cachectrl_enable+0x10>)
    e17a:	6813      	ldr	r3, [r2, #0]
    e17c:	f043 0301 	orr.w	r3, r3, #1
    e180:	6013      	str	r3, [r2, #0]
    e182:	2000      	movs	r0, #0
    e184:	4770      	bx	lr
    e186:	bf00      	nop
    e188:	40018000 	.word	0x40018000

0000e18c <am_hal_clkgen_control>:
    e18c:	4b32      	ldr	r3, [pc, #200]	; (e258 <am_hal_clkgen_control+0xcc>)
    e18e:	681a      	ldr	r2, [r3, #0]
    e190:	b912      	cbnz	r2, e198 <am_hal_clkgen_control+0xc>
    e192:	4a32      	ldr	r2, [pc, #200]	; (e25c <am_hal_clkgen_control+0xd0>)
    e194:	6812      	ldr	r2, [r2, #0]
    e196:	601a      	str	r2, [r3, #0]
    e198:	2809      	cmp	r0, #9
    e19a:	d85a      	bhi.n	e252 <am_hal_clkgen_control+0xc6>
    e19c:	e8df f000 	tbb	[pc, r0]
    e1a0:	261e160d 	.word	0x261e160d
    e1a4:	4640362e 	.word	0x4640362e
    e1a8:	054e      	.short	0x054e
    e1aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e1ae:	2000      	movs	r0, #0
    e1b0:	6a1a      	ldr	r2, [r3, #32]
    e1b2:	f36f 0200 	bfc	r2, #0, #1
    e1b6:	621a      	str	r2, [r3, #32]
    e1b8:	4770      	bx	lr
    e1ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e1be:	2200      	movs	r2, #0
    e1c0:	2147      	movs	r1, #71	; 0x47
    e1c2:	6159      	str	r1, [r3, #20]
    e1c4:	4610      	mov	r0, r2
    e1c6:	619a      	str	r2, [r3, #24]
    e1c8:	615a      	str	r2, [r3, #20]
    e1ca:	4770      	bx	lr
    e1cc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e1d0:	2000      	movs	r0, #0
    e1d2:	68d3      	ldr	r3, [r2, #12]
    e1d4:	f023 0301 	bic.w	r3, r3, #1
    e1d8:	60d3      	str	r3, [r2, #12]
    e1da:	4770      	bx	lr
    e1dc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e1e0:	2000      	movs	r0, #0
    e1e2:	68d3      	ldr	r3, [r2, #12]
    e1e4:	f023 0302 	bic.w	r3, r3, #2
    e1e8:	60d3      	str	r3, [r2, #12]
    e1ea:	4770      	bx	lr
    e1ec:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e1f0:	2000      	movs	r0, #0
    e1f2:	68d3      	ldr	r3, [r2, #12]
    e1f4:	f043 0301 	orr.w	r3, r3, #1
    e1f8:	60d3      	str	r3, [r2, #12]
    e1fa:	4770      	bx	lr
    e1fc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e200:	2000      	movs	r0, #0
    e202:	68d3      	ldr	r3, [r2, #12]
    e204:	f043 0302 	orr.w	r3, r3, #2
    e208:	60d3      	str	r3, [r2, #12]
    e20a:	4770      	bx	lr
    e20c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e210:	2200      	movs	r2, #0
    e212:	2047      	movs	r0, #71	; 0x47
    e214:	2101      	movs	r1, #1
    e216:	6158      	str	r0, [r3, #20]
    e218:	6199      	str	r1, [r3, #24]
    e21a:	4610      	mov	r0, r2
    e21c:	615a      	str	r2, [r3, #20]
    e21e:	4770      	bx	lr
    e220:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e224:	2000      	movs	r0, #0
    e226:	68da      	ldr	r2, [r3, #12]
    e228:	60da      	str	r2, [r3, #12]
    e22a:	4770      	bx	lr
    e22c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e230:	2000      	movs	r0, #0
    e232:	68d3      	ldr	r3, [r2, #12]
    e234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e238:	60d3      	str	r3, [r2, #12]
    e23a:	4770      	bx	lr
    e23c:	b139      	cbz	r1, e24e <am_hal_clkgen_control+0xc2>
    e23e:	680b      	ldr	r3, [r1, #0]
    e240:	f043 0301 	orr.w	r3, r3, #1
    e244:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e248:	2000      	movs	r0, #0
    e24a:	6213      	str	r3, [r2, #32]
    e24c:	4770      	bx	lr
    e24e:	4b04      	ldr	r3, [pc, #16]	; (e260 <am_hal_clkgen_control+0xd4>)
    e250:	e7f8      	b.n	e244 <am_hal_clkgen_control+0xb8>
    e252:	2006      	movs	r0, #6
    e254:	4770      	bx	lr
    e256:	bf00      	nop
    e258:	1000114c 	.word	0x1000114c
    e25c:	4ffff000 	.word	0x4ffff000
    e260:	0025b801 	.word	0x0025b801

0000e264 <am_hal_clkgen_status_get>:
    e264:	b1a8      	cbz	r0, e292 <am_hal_clkgen_status_get+0x2e>
    e266:	b410      	push	{r4}
    e268:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e26c:	490a      	ldr	r1, [pc, #40]	; (e298 <am_hal_clkgen_status_get+0x34>)
    e26e:	6994      	ldr	r4, [r2, #24]
    e270:	4b0a      	ldr	r3, [pc, #40]	; (e29c <am_hal_clkgen_status_get+0x38>)
    e272:	f014 0f01 	tst.w	r4, #1
    e276:	bf08      	it	eq
    e278:	460b      	moveq	r3, r1
    e27a:	6003      	str	r3, [r0, #0]
    e27c:	69d3      	ldr	r3, [r2, #28]
    e27e:	f85d 4b04 	ldr.w	r4, [sp], #4
    e282:	f003 0201 	and.w	r2, r3, #1
    e286:	f3c3 0340 	ubfx	r3, r3, #1, #1
    e28a:	6042      	str	r2, [r0, #4]
    e28c:	7203      	strb	r3, [r0, #8]
    e28e:	2000      	movs	r0, #0
    e290:	4770      	bx	lr
    e292:	2006      	movs	r0, #6
    e294:	4770      	bx	lr
    e296:	bf00      	nop
    e298:	02dc6c00 	.word	0x02dc6c00
    e29c:	016e3600 	.word	0x016e3600

0000e2a0 <am_hal_ctimer_config>:
    e2a0:	b570      	push	{r4, r5, r6, lr}
    e2a2:	e891 001c 	ldmia.w	r1, {r2, r3, r4}
    e2a6:	2a00      	cmp	r2, #0
    e2a8:	b082      	sub	sp, #8
    e2aa:	bf18      	it	ne
    e2ac:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
    e2b0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    e2b4:	ea42 0403 	orr.w	r4, r2, r3
    e2b8:	460d      	mov	r5, r1
    e2ba:	4606      	mov	r6, r0
    e2bc:	f000 fad0 	bl	e860 <am_hal_interrupt_master_disable>
    e2c0:	4b0d      	ldr	r3, [pc, #52]	; (e2f8 <am_hal_ctimer_config+0x58>)
    e2c2:	9001      	str	r0, [sp, #4]
    e2c4:	0172      	lsls	r2, r6, #5
    e2c6:	50d4      	str	r4, [r2, r3]
    e2c8:	9801      	ldr	r0, [sp, #4]
    e2ca:	f000 facd 	bl	e868 <am_hal_interrupt_master_set>
    e2ce:	686b      	ldr	r3, [r5, #4]
    e2d0:	b90b      	cbnz	r3, e2d6 <am_hal_ctimer_config+0x36>
    e2d2:	682a      	ldr	r2, [r5, #0]
    e2d4:	b142      	cbz	r2, e2e8 <am_hal_ctimer_config+0x48>
    e2d6:	f3c3 0344 	ubfx	r3, r3, #1, #5
    e2da:	2100      	movs	r1, #0
    e2dc:	4a07      	ldr	r2, [pc, #28]	; (e2fc <am_hal_ctimer_config+0x5c>)
    e2de:	eb02 0646 	add.w	r6, r2, r6, lsl #1
    e2e2:	5473      	strb	r3, [r6, r1]
    e2e4:	b002      	add	sp, #8
    e2e6:	bd70      	pop	{r4, r5, r6, pc}
    e2e8:	68ab      	ldr	r3, [r5, #8]
    e2ea:	2b00      	cmp	r3, #0
    e2ec:	d0fa      	beq.n	e2e4 <am_hal_ctimer_config+0x44>
    e2ee:	f3c3 0344 	ubfx	r3, r3, #1, #5
    e2f2:	2101      	movs	r1, #1
    e2f4:	e7f2      	b.n	e2dc <am_hal_ctimer_config+0x3c>
    e2f6:	bf00      	nop
    e2f8:	4000800c 	.word	0x4000800c
    e2fc:	1000100c 	.word	0x1000100c

0000e300 <am_hal_ctimer_start>:
    e300:	b570      	push	{r4, r5, r6, lr}
    e302:	b082      	sub	sp, #8
    e304:	460c      	mov	r4, r1
    e306:	0146      	lsls	r6, r0, #5
    e308:	4605      	mov	r5, r0
    e30a:	f000 faa9 	bl	e860 <am_hal_interrupt_master_disable>
    e30e:	4a0f      	ldr	r2, [pc, #60]	; (e34c <am_hal_ctimer_start+0x4c>)
    e310:	9001      	str	r0, [sp, #4]
    e312:	58b3      	ldr	r3, [r6, r2]
    e314:	f004 2108 	and.w	r1, r4, #134219776	; 0x8000800
    e318:	ea23 0301 	bic.w	r3, r3, r1
    e31c:	f004 1101 	and.w	r1, r4, #65537	; 0x10001
    e320:	430b      	orrs	r3, r1
    e322:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
    e326:	bf0c      	ite	eq
    e328:	f3c3 4444 	ubfxeq	r4, r3, #17, #5
    e32c:	f3c3 0444 	ubfxne	r4, r3, #1, #5
    e330:	50b3      	str	r3, [r6, r2]
    e332:	4b07      	ldr	r3, [pc, #28]	; (e350 <am_hal_ctimer_start+0x50>)
    e334:	9801      	ldr	r0, [sp, #4]
    e336:	bf0c      	ite	eq
    e338:	2101      	moveq	r1, #1
    e33a:	2100      	movne	r1, #0
    e33c:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    e340:	545c      	strb	r4, [r3, r1]
    e342:	f000 fa91 	bl	e868 <am_hal_interrupt_master_set>
    e346:	b002      	add	sp, #8
    e348:	bd70      	pop	{r4, r5, r6, pc}
    e34a:	bf00      	nop
    e34c:	4000800c 	.word	0x4000800c
    e350:	1000100c 	.word	0x1000100c

0000e354 <am_hal_ctimer_clear>:
    e354:	b570      	push	{r4, r5, r6, lr}
    e356:	b082      	sub	sp, #8
    e358:	0146      	lsls	r6, r0, #5
    e35a:	460c      	mov	r4, r1
    e35c:	f000 fa80 	bl	e860 <am_hal_interrupt_master_disable>
    e360:	4d05      	ldr	r5, [pc, #20]	; (e378 <am_hal_ctimer_clear+0x24>)
    e362:	9001      	str	r0, [sp, #4]
    e364:	5973      	ldr	r3, [r6, r5]
    e366:	f004 2108 	and.w	r1, r4, #134219776	; 0x8000800
    e36a:	4319      	orrs	r1, r3
    e36c:	5171      	str	r1, [r6, r5]
    e36e:	9801      	ldr	r0, [sp, #4]
    e370:	f000 fa7a 	bl	e868 <am_hal_interrupt_master_set>
    e374:	b002      	add	sp, #8
    e376:	bd70      	pop	{r4, r5, r6, pc}
    e378:	4000800c 	.word	0x4000800c

0000e37c <am_hal_ctimer_period_set>:
    e37c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e380:	b082      	sub	sp, #8
    e382:	4689      	mov	r9, r1
    e384:	4698      	mov	r8, r3
    e386:	0147      	lsls	r7, r0, #5
    e388:	4614      	mov	r4, r2
    e38a:	f000 fa69 	bl	e860 <am_hal_interrupt_master_disable>
    e38e:	f8df a094 	ldr.w	sl, [pc, #148]	; e424 <am_hal_ctimer_period_set+0xa8>
    e392:	9001      	str	r0, [sp, #4]
    e394:	f519 3f80 	cmn.w	r9, #65536	; 0x10000
    e398:	4d20      	ldr	r5, [pc, #128]	; (e41c <am_hal_ctimer_period_set+0xa0>)
    e39a:	4e21      	ldr	r6, [pc, #132]	; (e420 <am_hal_ctimer_period_set+0xa4>)
    e39c:	f857 300a 	ldr.w	r3, [r7, sl]
    e3a0:	d01a      	beq.n	e3d8 <am_hal_ctimer_period_set+0x5c>
    e3a2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
    e3a6:	2b80      	cmp	r3, #128	; 0x80
    e3a8:	d01b      	beq.n	e3e2 <am_hal_ctimer_period_set+0x66>
    e3aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e3ae:	2000      	movs	r0, #0
    e3b0:	4591      	cmp	r9, r2
    e3b2:	4603      	mov	r3, r0
    e3b4:	d01e      	beq.n	e3f4 <am_hal_ctimer_period_set+0x78>
    e3b6:	f519 3f80 	cmn.w	r9, #65536	; 0x10000
    e3ba:	d025      	beq.n	e408 <am_hal_ctimer_period_set+0x8c>
    e3bc:	0c1b      	lsrs	r3, r3, #16
    e3be:	b2a2      	uxth	r2, r4
    e3c0:	041b      	lsls	r3, r3, #16
    e3c2:	4310      	orrs	r0, r2
    e3c4:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
    e3c8:	5178      	str	r0, [r7, r5]
    e3ca:	51bb      	str	r3, [r7, r6]
    e3cc:	9801      	ldr	r0, [sp, #4]
    e3ce:	f000 fa4b 	bl	e868 <am_hal_interrupt_master_set>
    e3d2:	b002      	add	sp, #8
    e3d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e3d8:	0c1b      	lsrs	r3, r3, #16
    e3da:	f403 73c0 	and.w	r3, r3, #384	; 0x180
    e3de:	2b80      	cmp	r3, #128	; 0x80
    e3e0:	d111      	bne.n	e406 <am_hal_ctimer_period_set+0x8a>
    e3e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e3e6:	4591      	cmp	r9, r2
    e3e8:	ea4f 4004 	mov.w	r0, r4, lsl #16
    e3ec:	4623      	mov	r3, r4
    e3ee:	ebc8 0404 	rsb	r4, r8, r4
    e3f2:	d1e0      	bne.n	e3b6 <am_hal_ctimer_period_set+0x3a>
    e3f4:	b2a3      	uxth	r3, r4
    e3f6:	4318      	orrs	r0, r3
    e3f8:	5178      	str	r0, [r7, r5]
    e3fa:	9801      	ldr	r0, [sp, #4]
    e3fc:	f000 fa34 	bl	e868 <am_hal_interrupt_master_set>
    e400:	b002      	add	sp, #8
    e402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e406:	2000      	movs	r0, #0
    e408:	b2a3      	uxth	r3, r4
    e40a:	4318      	orrs	r0, r3
    e40c:	51b8      	str	r0, [r7, r6]
    e40e:	9801      	ldr	r0, [sp, #4]
    e410:	f000 fa2a 	bl	e868 <am_hal_interrupt_master_set>
    e414:	b002      	add	sp, #8
    e416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e41a:	bf00      	nop
    e41c:	40008004 	.word	0x40008004
    e420:	40008008 	.word	0x40008008
    e424:	4000800c 	.word	0x4000800c

0000e428 <am_hal_ctimer_adc_trigger_enable>:
    e428:	b500      	push	{lr}
    e42a:	b083      	sub	sp, #12
    e42c:	f000 fa18 	bl	e860 <am_hal_interrupt_master_disable>
    e430:	4a05      	ldr	r2, [pc, #20]	; (e448 <am_hal_ctimer_adc_trigger_enable+0x20>)
    e432:	9001      	str	r0, [sp, #4]
    e434:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
    e436:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    e43a:	66d3      	str	r3, [r2, #108]	; 0x6c
    e43c:	9801      	ldr	r0, [sp, #4]
    e43e:	f000 fa13 	bl	e868 <am_hal_interrupt_master_set>
    e442:	b003      	add	sp, #12
    e444:	f85d fb04 	ldr.w	pc, [sp], #4
    e448:	40008000 	.word	0x40008000

0000e44c <am_hal_flash_delay>:
    e44c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e452:	075b      	lsls	r3, r3, #29
    e454:	bf46      	itte	mi
    e456:	0040      	lslmi	r0, r0, #1
    e458:	230e      	movmi	r3, #14
    e45a:	230b      	movpl	r3, #11
    e45c:	4298      	cmp	r0, r3
    e45e:	d800      	bhi.n	e462 <am_hal_flash_delay+0x16>
    e460:	4770      	bx	lr
    e462:	1ac0      	subs	r0, r0, r3
    e464:	4b00      	ldr	r3, [pc, #0]	; (e468 <am_hal_flash_delay+0x1c>)
    e466:	4718      	bx	r3
    e468:	0800009d 	.word	0x0800009d

0000e46c <am_hal_flash_delay_status_check>:
    e46c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e470:	f89d 4020 	ldrb.w	r4, [sp, #32]
    e474:	460d      	mov	r5, r1
    e476:	4616      	mov	r6, r2
    e478:	461f      	mov	r7, r3
    e47a:	b1b4      	cbz	r4, e4aa <am_hal_flash_delay_status_check+0x3e>
    e47c:	4604      	mov	r4, r0
    e47e:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    e482:	f8df 8058 	ldr.w	r8, [pc, #88]	; e4dc <am_hal_flash_delay_status_check+0x70>
    e486:	e009      	b.n	e49c <am_hal_flash_delay_status_check+0x30>
    e488:	b324      	cbz	r4, e4d4 <am_hal_flash_delay_status_check+0x68>
    e48a:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    e48e:	f013 0f04 	tst.w	r3, #4
    e492:	bf14      	ite	ne
    e494:	2012      	movne	r0, #18
    e496:	2005      	moveq	r0, #5
    e498:	3c01      	subs	r4, #1
    e49a:	47c0      	blx	r8
    e49c:	682b      	ldr	r3, [r5, #0]
    e49e:	4033      	ands	r3, r6
    e4a0:	429f      	cmp	r7, r3
    e4a2:	d1f1      	bne.n	e488 <am_hal_flash_delay_status_check+0x1c>
    e4a4:	2000      	movs	r0, #0
    e4a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e4aa:	f8df 8030 	ldr.w	r8, [pc, #48]	; e4dc <am_hal_flash_delay_status_check+0x70>
    e4ae:	4604      	mov	r4, r0
    e4b0:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    e4b4:	e009      	b.n	e4ca <am_hal_flash_delay_status_check+0x5e>
    e4b6:	b16c      	cbz	r4, e4d4 <am_hal_flash_delay_status_check+0x68>
    e4b8:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    e4bc:	f013 0f04 	tst.w	r3, #4
    e4c0:	bf14      	ite	ne
    e4c2:	2012      	movne	r0, #18
    e4c4:	2005      	moveq	r0, #5
    e4c6:	3c01      	subs	r4, #1
    e4c8:	47c0      	blx	r8
    e4ca:	682b      	ldr	r3, [r5, #0]
    e4cc:	4033      	ands	r3, r6
    e4ce:	429f      	cmp	r7, r3
    e4d0:	d0f1      	beq.n	e4b6 <am_hal_flash_delay_status_check+0x4a>
    e4d2:	e7e7      	b.n	e4a4 <am_hal_flash_delay_status_check+0x38>
    e4d4:	2004      	movs	r0, #4
    e4d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e4da:	bf00      	nop
    e4dc:	0800009d 	.word	0x0800009d

0000e4e0 <am_hal_flash_load_ui32>:
    e4e0:	4b00      	ldr	r3, [pc, #0]	; (e4e4 <am_hal_flash_load_ui32+0x4>)
    e4e2:	4718      	bx	r3
    e4e4:	08000075 	.word	0x08000075

0000e4e8 <am_hal_gpio_pinconfig>:
    e4e8:	2831      	cmp	r0, #49	; 0x31
    e4ea:	d901      	bls.n	e4f0 <am_hal_gpio_pinconfig+0x8>
    e4ec:	2006      	movs	r0, #6
    e4ee:	4770      	bx	lr
    e4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e4f4:	f001 0307 	and.w	r3, r1, #7
    e4f8:	f011 05e0 	ands.w	r5, r1, #224	; 0xe0
    e4fc:	b085      	sub	sp, #20
    e4fe:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    e502:	d014      	beq.n	e52e <am_hal_gpio_pinconfig+0x46>
    e504:	f3c1 1642 	ubfx	r6, r1, #5, #3
    e508:	1db4      	adds	r4, r6, #6
    e50a:	f004 0407 	and.w	r4, r4, #7
    e50e:	2c03      	cmp	r4, #3
    e510:	f042 0201 	orr.w	r2, r2, #1
    e514:	f200 80b0 	bhi.w	e678 <am_hal_gpio_pinconfig+0x190>
    e518:	4c86      	ldr	r4, [pc, #536]	; (e734 <am_hal_gpio_pinconfig+0x24c>)
    e51a:	5c24      	ldrb	r4, [r4, r0]
    e51c:	07e7      	lsls	r7, r4, #31
    e51e:	d403      	bmi.n	e528 <am_hal_gpio_pinconfig+0x40>
    e520:	4885      	ldr	r0, [pc, #532]	; (e738 <am_hal_gpio_pinconfig+0x250>)
    e522:	b005      	add	sp, #20
    e524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e528:	3e02      	subs	r6, #2
    e52a:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
    e52e:	f3c1 04c1 	ubfx	r4, r1, #3, #2
    e532:	2c00      	cmp	r4, #0
    e534:	f040 809a 	bne.w	e66c <am_hal_gpio_pinconfig+0x184>
    e538:	4c80      	ldr	r4, [pc, #512]	; (e73c <am_hal_gpio_pinconfig+0x254>)
    e53a:	4d81      	ldr	r5, [pc, #516]	; (e740 <am_hal_gpio_pinconfig+0x258>)
    e53c:	5c24      	ldrb	r4, [r4, r0]
    e53e:	5c2d      	ldrb	r5, [r5, r0]
    e540:	411c      	asrs	r4, r3
    e542:	f014 0f01 	tst.w	r4, #1
    e546:	bf0c      	ite	eq
    e548:	2400      	moveq	r4, #0
    e54a:	2402      	movne	r4, #2
    e54c:	42ab      	cmp	r3, r5
    e54e:	ea42 0204 	orr.w	r2, r2, r4
    e552:	f000 809d 	beq.w	e690 <am_hal_gpio_pinconfig+0x1a8>
    e556:	f3c1 3341 	ubfx	r3, r1, #13, #2
    e55a:	105d      	asrs	r5, r3, #1
    e55c:	f3c1 2681 	ubfx	r6, r1, #10, #2
    e560:	00db      	lsls	r3, r3, #3
    e562:	f3c1 2707 	ubfx	r7, r1, #8, #8
    e566:	f003 0408 	and.w	r4, r3, #8
    e56a:	ea45 0346 	orr.w	r3, r5, r6, lsl #1
    e56e:	f007 060c 	and.w	r6, r7, #12
    e572:	f3c1 3500 	ubfx	r5, r1, #12, #1
    e576:	2e04      	cmp	r6, #4
    e578:	ea43 0304 	orr.w	r3, r3, r4
    e57c:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    e580:	462c      	mov	r4, r5
    e582:	f000 8092 	beq.w	e6aa <am_hal_gpio_pinconfig+0x1c2>
    e586:	4c6f      	ldr	r4, [pc, #444]	; (e744 <am_hal_gpio_pinconfig+0x25c>)
    e588:	6824      	ldr	r4, [r4, #0]
    e58a:	ebc4 0901 	rsb	r9, r4, r1
    e58e:	fab9 f989 	clz	r9, r9
    e592:	ea4f 1959 	mov.w	r9, r9, lsr #5
    e596:	f017 0f60 	tst.w	r7, #96	; 0x60
    e59a:	bf04      	itt	eq
    e59c:	f3c1 34c0 	ubfxeq	r4, r1, #15, #1
    e5a0:	f364 0300 	bfieq	r3, r4, #0, #1
    e5a4:	0084      	lsls	r4, r0, #2
    e5a6:	f3c1 2101 	ubfx	r1, r1, #8, #2
    e5aa:	2902      	cmp	r1, #2
    e5ac:	ea4f 05c0 	mov.w	r5, r0, lsl #3
    e5b0:	d07e      	beq.n	e6b0 <am_hal_gpio_pinconfig+0x1c8>
    e5b2:	f200 8084 	bhi.w	e6be <am_hal_gpio_pinconfig+0x1d6>
    e5b6:	2901      	cmp	r1, #1
    e5b8:	bf08      	it	eq
    e5ba:	f042 0204 	orreq.w	r2, r2, #4
    e5be:	f005 0518 	and.w	r5, r5, #24
    e5c2:	f04f 0800 	mov.w	r8, #0
    e5c6:	f004 041c 	and.w	r4, r4, #28
    e5ca:	0841      	lsrs	r1, r0, #1
    e5cc:	f020 0a03 	bic.w	sl, r0, #3
    e5d0:	270f      	movs	r7, #15
    e5d2:	f021 0103 	bic.w	r1, r1, #3
    e5d6:	40a7      	lsls	r7, r4
    e5d8:	26ff      	movs	r6, #255	; 0xff
    e5da:	fa03 f404 	lsl.w	r4, r3, r4
    e5de:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
    e5e2:	40ae      	lsls	r6, r5
    e5e4:	9101      	str	r1, [sp, #4]
    e5e6:	fa02 f505 	lsl.w	r5, r2, r5
    e5ea:	9300      	str	r3, [sp, #0]
    e5ec:	4683      	mov	fp, r0
    e5ee:	f000 f937 	bl	e860 <am_hal_interrupt_master_disable>
    e5f2:	9b00      	ldr	r3, [sp, #0]
    e5f4:	9003      	str	r0, [sp, #12]
    e5f6:	43ff      	mvns	r7, r7
    e5f8:	43f6      	mvns	r6, r6
    e5fa:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    e5fe:	f8df e164 	ldr.w	lr, [pc, #356]	; e764 <am_hal_gpio_pinconfig+0x27c>
    e602:	4a51      	ldr	r2, [pc, #324]	; (e748 <am_hal_gpio_pinconfig+0x260>)
    e604:	9901      	ldr	r1, [sp, #4]
    e606:	f1b9 0f00 	cmp.w	r9, #0
    e60a:	d00d      	beq.n	e628 <am_hal_gpio_pinconfig+0x140>
    e60c:	ea4f 0cdb 	mov.w	ip, fp, lsr #3
    e610:	f00b 001f 	and.w	r0, fp, #31
    e614:	f00c 0c04 	and.w	ip, ip, #4
    e618:	f04f 0b01 	mov.w	fp, #1
    e61c:	f8df 9148 	ldr.w	r9, [pc, #328]	; e768 <am_hal_gpio_pinconfig+0x280>
    e620:	fa0b f000 	lsl.w	r0, fp, r0
    e624:	f84c 0009 	str.w	r0, [ip, r9]
    e628:	4848      	ldr	r0, [pc, #288]	; (e74c <am_hal_gpio_pinconfig+0x264>)
    e62a:	f04f 0c73 	mov.w	ip, #115	; 0x73
    e62e:	f8c0 c060 	str.w	ip, [r0, #96]	; 0x60
    e632:	f8d3 c000 	ldr.w	ip, [r3]
    e636:	ea06 0c0c 	and.w	ip, r6, ip
    e63a:	ea4c 0505 	orr.w	r5, ip, r5
    e63e:	601d      	str	r5, [r3, #0]
    e640:	f851 300e 	ldr.w	r3, [r1, lr]
    e644:	403b      	ands	r3, r7
    e646:	4323      	orrs	r3, r4
    e648:	f841 300e 	str.w	r3, [r1, lr]
    e64c:	f85a 3002 	ldr.w	r3, [sl, r2]
    e650:	401e      	ands	r6, r3
    e652:	2400      	movs	r4, #0
    e654:	ea46 0608 	orr.w	r6, r6, r8
    e658:	f84a 6002 	str.w	r6, [sl, r2]
    e65c:	6604      	str	r4, [r0, #96]	; 0x60
    e65e:	9803      	ldr	r0, [sp, #12]
    e660:	f000 f902 	bl	e868 <am_hal_interrupt_master_set>
    e664:	4620      	mov	r0, r4
    e666:	b005      	add	sp, #20
    e668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e66c:	2c01      	cmp	r4, #1
    e66e:	d015      	beq.n	e69c <am_hal_gpio_pinconfig+0x1b4>
    e670:	2c02      	cmp	r4, #2
    e672:	d032      	beq.n	e6da <am_hal_gpio_pinconfig+0x1f2>
    e674:	4836      	ldr	r0, [pc, #216]	; (e750 <am_hal_gpio_pinconfig+0x268>)
    e676:	e754      	b.n	e522 <am_hal_gpio_pinconfig+0x3a>
    e678:	2dc0      	cmp	r5, #192	; 0xc0
    e67a:	d029      	beq.n	e6d0 <am_hal_gpio_pinconfig+0x1e8>
    e67c:	2d20      	cmp	r5, #32
    e67e:	f47f af56 	bne.w	e52e <am_hal_gpio_pinconfig+0x46>
    e682:	4c2c      	ldr	r4, [pc, #176]	; (e734 <am_hal_gpio_pinconfig+0x24c>)
    e684:	5c24      	ldrb	r4, [r4, r0]
    e686:	f014 0f09 	tst.w	r4, #9
    e68a:	f47f af49 	bne.w	e520 <am_hal_gpio_pinconfig+0x38>
    e68e:	e74e      	b.n	e52e <am_hal_gpio_pinconfig+0x46>
    e690:	f3c1 4402 	ubfx	r4, r1, #16, #3
    e694:	2c07      	cmp	r4, #7
    e696:	d127      	bne.n	e6e8 <am_hal_gpio_pinconfig+0x200>
    e698:	482e      	ldr	r0, [pc, #184]	; (e754 <am_hal_gpio_pinconfig+0x26c>)
    e69a:	e742      	b.n	e522 <am_hal_gpio_pinconfig+0x3a>
    e69c:	4c25      	ldr	r4, [pc, #148]	; (e734 <am_hal_gpio_pinconfig+0x24c>)
    e69e:	5c24      	ldrb	r4, [r4, r0]
    e6a0:	07a5      	lsls	r5, r4, #30
    e6a2:	d5e7      	bpl.n	e674 <am_hal_gpio_pinconfig+0x18c>
    e6a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    e6a8:	e746      	b.n	e538 <am_hal_gpio_pinconfig+0x50>
    e6aa:	f04f 0901 	mov.w	r9, #1
    e6ae:	e772      	b.n	e596 <am_hal_gpio_pinconfig+0xae>
    e6b0:	f005 0518 	and.w	r5, r5, #24
    e6b4:	f04f 0801 	mov.w	r8, #1
    e6b8:	fa08 f805 	lsl.w	r8, r8, r5
    e6bc:	e783      	b.n	e5c6 <am_hal_gpio_pinconfig+0xde>
    e6be:	f005 0518 	and.w	r5, r5, #24
    e6c2:	f04f 0801 	mov.w	r8, #1
    e6c6:	f042 0204 	orr.w	r2, r2, #4
    e6ca:	fa08 f805 	lsl.w	r8, r8, r5
    e6ce:	e77a      	b.n	e5c6 <am_hal_gpio_pinconfig+0xde>
    e6d0:	2814      	cmp	r0, #20
    e6d2:	f43f af2c 	beq.w	e52e <am_hal_gpio_pinconfig+0x46>
    e6d6:	4820      	ldr	r0, [pc, #128]	; (e758 <am_hal_gpio_pinconfig+0x270>)
    e6d8:	e723      	b.n	e522 <am_hal_gpio_pinconfig+0x3a>
    e6da:	4c16      	ldr	r4, [pc, #88]	; (e734 <am_hal_gpio_pinconfig+0x24c>)
    e6dc:	5c24      	ldrb	r4, [r4, r0]
    e6de:	0764      	lsls	r4, r4, #29
    e6e0:	d5c8      	bpl.n	e674 <am_hal_gpio_pinconfig+0x18c>
    e6e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    e6e6:	e727      	b.n	e538 <am_hal_gpio_pinconfig+0x50>
    e6e8:	4d1c      	ldr	r5, [pc, #112]	; (e75c <am_hal_gpio_pinconfig+0x274>)
    e6ea:	f3c1 43c1 	ubfx	r3, r1, #19, #2
    e6ee:	f815 6020 	ldrb.w	r6, [r5, r0, lsl #2]
    e6f2:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    e6f6:	429e      	cmp	r6, r3
    e6f8:	d00c      	beq.n	e714 <am_hal_gpio_pinconfig+0x22c>
    e6fa:	0084      	lsls	r4, r0, #2
    e6fc:	4425      	add	r5, r4
    e6fe:	786e      	ldrb	r6, [r5, #1]
    e700:	429e      	cmp	r6, r3
    e702:	d013      	beq.n	e72c <am_hal_gpio_pinconfig+0x244>
    e704:	78ae      	ldrb	r6, [r5, #2]
    e706:	429e      	cmp	r6, r3
    e708:	d00e      	beq.n	e728 <am_hal_gpio_pinconfig+0x240>
    e70a:	78ed      	ldrb	r5, [r5, #3]
    e70c:	429d      	cmp	r5, r3
    e70e:	d00f      	beq.n	e730 <am_hal_gpio_pinconfig+0x248>
    e710:	4813      	ldr	r0, [pc, #76]	; (e760 <am_hal_gpio_pinconfig+0x278>)
    e712:	e706      	b.n	e522 <am_hal_gpio_pinconfig+0x3a>
    e714:	2300      	movs	r3, #0
    e716:	0084      	lsls	r4, r0, #2
    e718:	005b      	lsls	r3, r3, #1
    e71a:	f3c1 5540 	ubfx	r5, r1, #21, #1
    e71e:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
    e722:	f04f 0900 	mov.w	r9, #0
    e726:	e73e      	b.n	e5a6 <am_hal_gpio_pinconfig+0xbe>
    e728:	2302      	movs	r3, #2
    e72a:	e7f5      	b.n	e718 <am_hal_gpio_pinconfig+0x230>
    e72c:	2301      	movs	r3, #1
    e72e:	e7f3      	b.n	e718 <am_hal_gpio_pinconfig+0x230>
    e730:	2303      	movs	r3, #3
    e732:	e7f1      	b.n	e718 <am_hal_gpio_pinconfig+0x230>
    e734:	0000f0c8 	.word	0x0000f0c8
    e738:	08000100 	.word	0x08000100
    e73c:	0000f1c4 	.word	0x0000f1c4
    e740:	0000f200 	.word	0x0000f200
    e744:	0000f1f8 	.word	0x0000f1f8
    e748:	400100e0 	.word	0x400100e0
    e74c:	40010000 	.word	0x40010000
    e750:	08000102 	.word	0x08000102
    e754:	08000103 	.word	0x08000103
    e758:	08000101 	.word	0x08000101
    e75c:	0000f0fc 	.word	0x0000f0fc
    e760:	08000104 	.word	0x08000104
    e764:	40010040 	.word	0x40010040
    e768:	400100b4 	.word	0x400100b4

0000e76c <am_hal_gpio_state_read>:
    e76c:	b1ca      	cbz	r2, e7a2 <am_hal_gpio_state_read+0x36>
    e76e:	2831      	cmp	r0, #49	; 0x31
    e770:	d904      	bls.n	e77c <am_hal_gpio_state_read+0x10>
    e772:	f04f 33ff 	mov.w	r3, #4294967295
    e776:	6013      	str	r3, [r2, #0]
    e778:	2005      	movs	r0, #5
    e77a:	4770      	bx	lr
    e77c:	08c3      	lsrs	r3, r0, #3
    e77e:	2901      	cmp	r1, #1
    e780:	f003 0304 	and.w	r3, r3, #4
    e784:	f000 001f 	and.w	r0, r0, #31
    e788:	d00d      	beq.n	e7a6 <am_hal_gpio_state_read+0x3a>
    e78a:	d313      	bcc.n	e7b4 <am_hal_gpio_state_read+0x48>
    e78c:	2902      	cmp	r1, #2
    e78e:	d108      	bne.n	e7a2 <am_hal_gpio_state_read+0x36>
    e790:	490c      	ldr	r1, [pc, #48]	; (e7c4 <am_hal_gpio_state_read+0x58>)
    e792:	585b      	ldr	r3, [r3, r1]
    e794:	fa23 f000 	lsr.w	r0, r3, r0
    e798:	f000 0001 	and.w	r0, r0, #1
    e79c:	6010      	str	r0, [r2, #0]
    e79e:	2000      	movs	r0, #0
    e7a0:	4770      	bx	lr
    e7a2:	2006      	movs	r0, #6
    e7a4:	4770      	bx	lr
    e7a6:	4908      	ldr	r1, [pc, #32]	; (e7c8 <am_hal_gpio_state_read+0x5c>)
    e7a8:	585b      	ldr	r3, [r3, r1]
    e7aa:	fa23 f000 	lsr.w	r0, r3, r0
    e7ae:	f000 0001 	and.w	r0, r0, #1
    e7b2:	e7f3      	b.n	e79c <am_hal_gpio_state_read+0x30>
    e7b4:	4905      	ldr	r1, [pc, #20]	; (e7cc <am_hal_gpio_state_read+0x60>)
    e7b6:	585b      	ldr	r3, [r3, r1]
    e7b8:	fa23 f000 	lsr.w	r0, r3, r0
    e7bc:	f000 0001 	and.w	r0, r0, #1
    e7c0:	e7ec      	b.n	e79c <am_hal_gpio_state_read+0x30>
    e7c2:	bf00      	nop
    e7c4:	400100a0 	.word	0x400100a0
    e7c8:	40010088 	.word	0x40010088
    e7cc:	40010080 	.word	0x40010080

0000e7d0 <am_hal_gpio_state_write>:
    e7d0:	2831      	cmp	r0, #49	; 0x31
    e7d2:	d901      	bls.n	e7d8 <am_hal_gpio_state_write+0x8>
    e7d4:	2005      	movs	r0, #5
    e7d6:	4770      	bx	lr
    e7d8:	2905      	cmp	r1, #5
    e7da:	d901      	bls.n	e7e0 <am_hal_gpio_state_write+0x10>
    e7dc:	2006      	movs	r0, #6
    e7de:	4770      	bx	lr
    e7e0:	b570      	push	{r4, r5, r6, lr}
    e7e2:	f000 031f 	and.w	r3, r0, #31
    e7e6:	b082      	sub	sp, #8
    e7e8:	08c0      	lsrs	r0, r0, #3
    e7ea:	2201      	movs	r2, #1
    e7ec:	460d      	mov	r5, r1
    e7ee:	f000 0404 	and.w	r4, r0, #4
    e7f2:	fa02 f603 	lsl.w	r6, r2, r3
    e7f6:	f000 f833 	bl	e860 <am_hal_interrupt_master_disable>
    e7fa:	1e69      	subs	r1, r5, #1
    e7fc:	9001      	str	r0, [sp, #4]
    e7fe:	2904      	cmp	r1, #4
    e800:	d817      	bhi.n	e832 <am_hal_gpio_state_write+0x62>
    e802:	e8df f001 	tbb	[pc, r1]
    e806:	0e13      	.short	0x0e13
    e808:	030b      	.short	0x030b
    e80a:	19          	.byte	0x19
    e80b:	00          	.byte	0x00
    e80c:	4b0d      	ldr	r3, [pc, #52]	; (e844 <am_hal_gpio_state_write+0x74>)
    e80e:	50e6      	str	r6, [r4, r3]
    e810:	9801      	ldr	r0, [sp, #4]
    e812:	f000 f829 	bl	e868 <am_hal_interrupt_master_set>
    e816:	2000      	movs	r0, #0
    e818:	b002      	add	sp, #8
    e81a:	bd70      	pop	{r4, r5, r6, pc}
    e81c:	4b0a      	ldr	r3, [pc, #40]	; (e848 <am_hal_gpio_state_write+0x78>)
    e81e:	50e6      	str	r6, [r4, r3]
    e820:	e7f6      	b.n	e810 <am_hal_gpio_state_write+0x40>
    e822:	4a0a      	ldr	r2, [pc, #40]	; (e84c <am_hal_gpio_state_write+0x7c>)
    e824:	58a3      	ldr	r3, [r4, r2]
    e826:	4073      	eors	r3, r6
    e828:	50a3      	str	r3, [r4, r2]
    e82a:	e7f1      	b.n	e810 <am_hal_gpio_state_write+0x40>
    e82c:	4b08      	ldr	r3, [pc, #32]	; (e850 <am_hal_gpio_state_write+0x80>)
    e82e:	50e6      	str	r6, [r4, r3]
    e830:	e7ee      	b.n	e810 <am_hal_gpio_state_write+0x40>
    e832:	4b08      	ldr	r3, [pc, #32]	; (e854 <am_hal_gpio_state_write+0x84>)
    e834:	50e6      	str	r6, [r4, r3]
    e836:	e7eb      	b.n	e810 <am_hal_gpio_state_write+0x40>
    e838:	4a03      	ldr	r2, [pc, #12]	; (e848 <am_hal_gpio_state_write+0x78>)
    e83a:	58a3      	ldr	r3, [r4, r2]
    e83c:	4073      	eors	r3, r6
    e83e:	50a3      	str	r3, [r4, r2]
    e840:	e7e6      	b.n	e810 <am_hal_gpio_state_write+0x40>
    e842:	bf00      	nop
    e844:	400100a8 	.word	0x400100a8
    e848:	400100b4 	.word	0x400100b4
    e84c:	40010088 	.word	0x40010088
    e850:	40010090 	.word	0x40010090
    e854:	40010098 	.word	0x40010098

0000e858 <am_hal_interrupt_master_enable>:
    e858:	f3ef 8010 	mrs	r0, PRIMASK
    e85c:	b662      	cpsie	i
    e85e:	4770      	bx	lr

0000e860 <am_hal_interrupt_master_disable>:
    e860:	f3ef 8010 	mrs	r0, PRIMASK
    e864:	b672      	cpsid	i
    e866:	4770      	bx	lr

0000e868 <am_hal_interrupt_master_set>:
    e868:	f380 8810 	msr	PRIMASK, r0
    e86c:	4770      	bx	lr
    e86e:	bf00      	nop

0000e870 <am_hal_mcuctrl_info_get>:
    e870:	b4f0      	push	{r4, r5, r6, r7}
    e872:	b121      	cbz	r1, e87e <am_hal_mcuctrl_info_get+0xe>
    e874:	2801      	cmp	r0, #1
    e876:	d038      	beq.n	e8ea <am_hal_mcuctrl_info_get+0x7a>
    e878:	d320      	bcc.n	e8bc <am_hal_mcuctrl_info_get+0x4c>
    e87a:	2802      	cmp	r0, #2
    e87c:	d002      	beq.n	e884 <am_hal_mcuctrl_info_get+0x14>
    e87e:	2006      	movs	r0, #6
    e880:	bcf0      	pop	{r4, r5, r6, r7}
    e882:	4770      	bx	lr
    e884:	4a41      	ldr	r2, [pc, #260]	; (e98c <am_hal_mcuctrl_info_get+0x11c>)
    e886:	684d      	ldr	r5, [r1, #4]
    e888:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    e88c:	694c      	ldr	r4, [r1, #20]
    e88e:	f003 0601 	and.w	r6, r3, #1
    e892:	f3c3 0040 	ubfx	r0, r3, #1, #1
    e896:	f3c3 0380 	ubfx	r3, r3, #2, #1
    e89a:	700e      	strb	r6, [r1, #0]
    e89c:	7208      	strb	r0, [r1, #8]
    e89e:	740b      	strb	r3, [r1, #16]
    e8a0:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
    e8a4:	60cb      	str	r3, [r1, #12]
    e8a6:	f8d2 01c0 	ldr.w	r0, [r2, #448]	; 0x1c0
    e8aa:	4328      	orrs	r0, r5
    e8ac:	6048      	str	r0, [r1, #4]
    e8ae:	f8d2 31c8 	ldr.w	r3, [r2, #456]	; 0x1c8
    e8b2:	4323      	orrs	r3, r4
    e8b4:	2000      	movs	r0, #0
    e8b6:	614b      	str	r3, [r1, #20]
    e8b8:	bcf0      	pop	{r4, r5, r6, r7}
    e8ba:	4770      	bx	lr
    e8bc:	4a33      	ldr	r2, [pc, #204]	; (e98c <am_hal_mcuctrl_info_get+0x11c>)
    e8be:	6993      	ldr	r3, [r2, #24]
    e8c0:	f3c3 1080 	ubfx	r0, r3, #6, #1
    e8c4:	f3c3 0380 	ubfx	r3, r3, #2, #1
    e8c8:	7008      	strb	r0, [r1, #0]
    e8ca:	704b      	strb	r3, [r1, #1]
    e8cc:	f8d2 31a0 	ldr.w	r3, [r2, #416]	; 0x1a0
    e8d0:	f3c3 6381 	ubfx	r3, r3, #26, #2
    e8d4:	710b      	strb	r3, [r1, #4]
    e8d6:	6953      	ldr	r3, [r2, #20]
    e8d8:	f3c3 0240 	ubfx	r2, r3, #1, #1
    e8dc:	f003 0301 	and.w	r3, r3, #1
    e8e0:	2000      	movs	r0, #0
    e8e2:	708a      	strb	r2, [r1, #2]
    e8e4:	70cb      	strb	r3, [r1, #3]
    e8e6:	bcf0      	pop	{r4, r5, r6, r7}
    e8e8:	4770      	bx	lr
    e8ea:	4b28      	ldr	r3, [pc, #160]	; (e98c <am_hal_mcuctrl_info_get+0x11c>)
    e8ec:	4c28      	ldr	r4, [pc, #160]	; (e990 <am_hal_mcuctrl_info_get+0x120>)
    e8ee:	681a      	ldr	r2, [r3, #0]
    e8f0:	600a      	str	r2, [r1, #0]
    e8f2:	6858      	ldr	r0, [r3, #4]
    e8f4:	6048      	str	r0, [r1, #4]
    e8f6:	6898      	ldr	r0, [r3, #8]
    e8f8:	6088      	str	r0, [r1, #8]
    e8fa:	68d8      	ldr	r0, [r3, #12]
    e8fc:	60c8      	str	r0, [r1, #12]
    e8fe:	691d      	ldr	r5, [r3, #16]
    e900:	4824      	ldr	r0, [pc, #144]	; (e994 <am_hal_mcuctrl_info_get+0x124>)
    e902:	610d      	str	r5, [r1, #16]
    e904:	f3c2 5703 	ubfx	r7, r2, #20, #4
    e908:	f3c2 4603 	ubfx	r6, r2, #16, #4
    e90c:	695d      	ldr	r5, [r3, #20]
    e90e:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
    e912:	4b21      	ldr	r3, [pc, #132]	; (e998 <am_hal_mcuctrl_info_get+0x128>)
    e914:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    e918:	6208      	str	r0, [r1, #32]
    e91a:	f002 0201 	and.w	r2, r2, #1
    e91e:	614d      	str	r5, [r1, #20]
    e920:	61cc      	str	r4, [r1, #28]
    e922:	618a      	str	r2, [r1, #24]
    e924:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    e928:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
    e92c:	b2d0      	uxtb	r0, r2
    e92e:	f004 020f 	and.w	r2, r4, #15
    e932:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
    e936:	624a      	str	r2, [r1, #36]	; 0x24
    e938:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    e93c:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
    e940:	f3c2 1003 	ubfx	r0, r2, #4, #4
    e944:	f004 020f 	and.w	r2, r4, #15
    e948:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    e94c:	628a      	str	r2, [r1, #40]	; 0x28
    e94e:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
    e952:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
    e956:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
    e95a:	f3c2 1203 	ubfx	r2, r2, #4, #4
    e95e:	4302      	orrs	r2, r0
    e960:	62ca      	str	r2, [r1, #44]	; 0x2c
    e962:	f8d3 50fc 	ldr.w	r5, [r3, #252]	; 0xfc
    e966:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
    e96a:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
    e96e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    e972:	b2c0      	uxtb	r0, r0
    e974:	0400      	lsls	r0, r0, #16
    e976:	ea40 6305 	orr.w	r3, r0, r5, lsl #24
    e97a:	b2d2      	uxtb	r2, r2
    e97c:	431a      	orrs	r2, r3
    e97e:	b2e3      	uxtb	r3, r4
    e980:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    e984:	630b      	str	r3, [r1, #48]	; 0x30
    e986:	2000      	movs	r0, #0
    e988:	bcf0      	pop	{r4, r5, r6, r7}
    e98a:	4770      	bx	lr
    e98c:	40020000 	.word	0x40020000
    e990:	0000f234 	.word	0x0000f234
    e994:	0000f274 	.word	0x0000f274
    e998:	f0000f00 	.word	0xf0000f00

0000e99c <am_hal_pwrctrl_periph_enable>:
    e99c:	b570      	push	{r4, r5, r6, lr}
    e99e:	b082      	sub	sp, #8
    e9a0:	4604      	mov	r4, r0
    e9a2:	f7ff ff5d 	bl	e860 <am_hal_interrupt_master_disable>
    e9a6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    e9aa:	4d0f      	ldr	r5, [pc, #60]	; (e9e8 <am_hal_pwrctrl_periph_enable+0x4c>)
    e9ac:	4e0f      	ldr	r6, [pc, #60]	; (e9ec <am_hal_pwrctrl_periph_enable+0x50>)
    e9ae:	9001      	str	r0, [sp, #4]
    e9b0:	00a4      	lsls	r4, r4, #2
    e9b2:	68aa      	ldr	r2, [r5, #8]
    e9b4:	5933      	ldr	r3, [r6, r4]
    e9b6:	4313      	orrs	r3, r2
    e9b8:	60ab      	str	r3, [r5, #8]
    e9ba:	9801      	ldr	r0, [sp, #4]
    e9bc:	4434      	add	r4, r6
    e9be:	f7ff ff53 	bl	e868 <am_hal_interrupt_master_set>
    e9c2:	20a0      	movs	r0, #160	; 0xa0
    e9c4:	f7ff fd42 	bl	e44c <am_hal_flash_delay>
    e9c8:	69ab      	ldr	r3, [r5, #24]
    e9ca:	6864      	ldr	r4, [r4, #4]
    e9cc:	4223      	tst	r3, r4
    e9ce:	d103      	bne.n	e9d8 <am_hal_pwrctrl_periph_enable+0x3c>
    e9d0:	20a0      	movs	r0, #160	; 0xa0
    e9d2:	f7ff fd3b 	bl	e44c <am_hal_flash_delay>
    e9d6:	69ab      	ldr	r3, [r5, #24]
    e9d8:	4b03      	ldr	r3, [pc, #12]	; (e9e8 <am_hal_pwrctrl_periph_enable+0x4c>)
    e9da:	699b      	ldr	r3, [r3, #24]
    e9dc:	4223      	tst	r3, r4
    e9de:	bf0c      	ite	eq
    e9e0:	2001      	moveq	r0, #1
    e9e2:	2000      	movne	r0, #0
    e9e4:	b002      	add	sp, #8
    e9e6:	bd70      	pop	{r4, r5, r6, pc}
    e9e8:	40021000 	.word	0x40021000
    e9ec:	0000f2b4 	.word	0x0000f2b4

0000e9f0 <am_hal_pwrctrl_periph_disable>:
    e9f0:	b570      	push	{r4, r5, r6, lr}
    e9f2:	b082      	sub	sp, #8
    e9f4:	4604      	mov	r4, r0
    e9f6:	f7ff ff33 	bl	e860 <am_hal_interrupt_master_disable>
    e9fa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    e9fe:	4d10      	ldr	r5, [pc, #64]	; (ea40 <am_hal_pwrctrl_periph_disable+0x50>)
    ea00:	4e10      	ldr	r6, [pc, #64]	; (ea44 <am_hal_pwrctrl_periph_disable+0x54>)
    ea02:	9001      	str	r0, [sp, #4]
    ea04:	00a4      	lsls	r4, r4, #2
    ea06:	68ab      	ldr	r3, [r5, #8]
    ea08:	5932      	ldr	r2, [r6, r4]
    ea0a:	ea23 0302 	bic.w	r3, r3, r2
    ea0e:	60ab      	str	r3, [r5, #8]
    ea10:	9801      	ldr	r0, [sp, #4]
    ea12:	4434      	add	r4, r6
    ea14:	f7ff ff28 	bl	e868 <am_hal_interrupt_master_set>
    ea18:	20a0      	movs	r0, #160	; 0xa0
    ea1a:	f7ff fd17 	bl	e44c <am_hal_flash_delay>
    ea1e:	69ab      	ldr	r3, [r5, #24]
    ea20:	6864      	ldr	r4, [r4, #4]
    ea22:	4223      	tst	r3, r4
    ea24:	d003      	beq.n	ea2e <am_hal_pwrctrl_periph_disable+0x3e>
    ea26:	20a0      	movs	r0, #160	; 0xa0
    ea28:	f7ff fd10 	bl	e44c <am_hal_flash_delay>
    ea2c:	69ab      	ldr	r3, [r5, #24]
    ea2e:	4b04      	ldr	r3, [pc, #16]	; (ea40 <am_hal_pwrctrl_periph_disable+0x50>)
    ea30:	699b      	ldr	r3, [r3, #24]
    ea32:	4223      	tst	r3, r4
    ea34:	bf14      	ite	ne
    ea36:	2001      	movne	r0, #1
    ea38:	2000      	moveq	r0, #0
    ea3a:	b002      	add	sp, #8
    ea3c:	bd70      	pop	{r4, r5, r6, pc}
    ea3e:	bf00      	nop
    ea40:	40021000 	.word	0x40021000
    ea44:	0000f2b4 	.word	0x0000f2b4

0000ea48 <am_hal_pwrctrl_low_power_init>:
    ea48:	b530      	push	{r4, r5, lr}
    ea4a:	4b1f      	ldr	r3, [pc, #124]	; (eac8 <am_hal_pwrctrl_low_power_init+0x80>)
    ea4c:	681a      	ldr	r2, [r3, #0]
    ea4e:	b083      	sub	sp, #12
    ea50:	b912      	cbnz	r2, ea58 <am_hal_pwrctrl_low_power_init+0x10>
    ea52:	4a1e      	ldr	r2, [pc, #120]	; (eacc <am_hal_pwrctrl_low_power_init+0x84>)
    ea54:	6812      	ldr	r2, [r2, #0]
    ea56:	601a      	str	r2, [r3, #0]
    ea58:	4c1d      	ldr	r4, [pc, #116]	; (ead0 <am_hal_pwrctrl_low_power_init+0x88>)
    ea5a:	69a3      	ldr	r3, [r4, #24]
    ea5c:	05db      	lsls	r3, r3, #23
    ea5e:	d502      	bpl.n	ea66 <am_hal_pwrctrl_low_power_init+0x1e>
    ea60:	2000      	movs	r0, #0
    ea62:	b003      	add	sp, #12
    ea64:	bd30      	pop	{r4, r5, pc}
    ea66:	4d1b      	ldr	r5, [pc, #108]	; (ead4 <am_hal_pwrctrl_low_power_init+0x8c>)
    ea68:	491b      	ldr	r1, [pc, #108]	; (ead8 <am_hal_pwrctrl_low_power_init+0x90>)
    ea6a:	7e2a      	ldrb	r2, [r5, #24]
    ea6c:	2001      	movs	r0, #1
    ea6e:	4302      	orrs	r2, r0
    ea70:	2307      	movs	r3, #7
    ea72:	762a      	strb	r2, [r5, #24]
    ea74:	9000      	str	r0, [sp, #0]
    ea76:	461a      	mov	r2, r3
    ea78:	f242 7010 	movw	r0, #10000	; 0x2710
    ea7c:	f7ff fcf6 	bl	e46c <am_hal_flash_delay_status_check>
    ea80:	b110      	cbz	r0, ea88 <am_hal_pwrctrl_low_power_init+0x40>
    ea82:	2004      	movs	r0, #4
    ea84:	b003      	add	sp, #12
    ea86:	bd30      	pop	{r4, r5, pc}
    ea88:	6823      	ldr	r3, [r4, #0]
    ea8a:	f043 0301 	orr.w	r3, r3, #1
    ea8e:	6023      	str	r3, [r4, #0]
    ea90:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ea92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ea96:	6263      	str	r3, [r4, #36]	; 0x24
    ea98:	68eb      	ldr	r3, [r5, #12]
    ea9a:	b2db      	uxtb	r3, r3
    ea9c:	2b11      	cmp	r3, #17
    ea9e:	d1df      	bne.n	ea60 <am_hal_pwrctrl_low_power_init+0x18>
    eaa0:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
    eaa4:	f360 5356 	bfi	r3, r0, #21, #2
    eaa8:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    eaac:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
    eab0:	220f      	movs	r2, #15
    eab2:	f362 138b 	bfi	r3, r2, #6, #6
    eab6:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
    eaba:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
    eabe:	f362 0305 	bfi	r3, r2, #0, #6
    eac2:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
    eac6:	e7cc      	b.n	ea62 <am_hal_pwrctrl_low_power_init+0x1a>
    eac8:	1000114c 	.word	0x1000114c
    eacc:	4ffff000 	.word	0x4ffff000
    ead0:	40021000 	.word	0x40021000
    ead4:	40020000 	.word	0x40020000
    ead8:	40020018 	.word	0x40020018

0000eadc <am_hal_sysctrl_sleep>:
    eadc:	b510      	push	{r4, lr}
    eade:	b082      	sub	sp, #8
    eae0:	4604      	mov	r4, r0
    eae2:	f7ff febd 	bl	e860 <am_hal_interrupt_master_disable>
    eae6:	9001      	str	r0, [sp, #4]
    eae8:	b124      	cbz	r4, eaf4 <am_hal_sysctrl_sleep+0x18>
    eaea:	4b12      	ldr	r3, [pc, #72]	; (eb34 <am_hal_sysctrl_sleep+0x58>)
    eaec:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    eaf0:	07db      	lsls	r3, r3, #31
    eaf2:	d512      	bpl.n	eb1a <am_hal_sysctrl_sleep+0x3e>
    eaf4:	4a10      	ldr	r2, [pc, #64]	; (eb38 <am_hal_sysctrl_sleep+0x5c>)
    eaf6:	6913      	ldr	r3, [r2, #16]
    eaf8:	f023 0304 	bic.w	r3, r3, #4
    eafc:	6113      	str	r3, [r2, #16]
    eafe:	f3bf 8f4f 	dsb	sy
    eb02:	4a0e      	ldr	r2, [pc, #56]	; (eb3c <am_hal_sysctrl_sleep+0x60>)
    eb04:	4b0e      	ldr	r3, [pc, #56]	; (eb40 <am_hal_sysctrl_sleep+0x64>)
    eb06:	6812      	ldr	r2, [r2, #0]
    eb08:	601a      	str	r2, [r3, #0]
    eb0a:	bf30      	wfi
    eb0c:	f3bf 8f6f 	isb	sy
    eb10:	9801      	ldr	r0, [sp, #4]
    eb12:	f7ff fea9 	bl	e868 <am_hal_interrupt_master_set>
    eb16:	b002      	add	sp, #8
    eb18:	bd10      	pop	{r4, pc}
    eb1a:	4b0a      	ldr	r3, [pc, #40]	; (eb44 <am_hal_sysctrl_sleep+0x68>)
    eb1c:	681a      	ldr	r2, [r3, #0]
    eb1e:	b912      	cbnz	r2, eb26 <am_hal_sysctrl_sleep+0x4a>
    eb20:	4a09      	ldr	r2, [pc, #36]	; (eb48 <am_hal_sysctrl_sleep+0x6c>)
    eb22:	6812      	ldr	r2, [r2, #0]
    eb24:	601a      	str	r2, [r3, #0]
    eb26:	4a04      	ldr	r2, [pc, #16]	; (eb38 <am_hal_sysctrl_sleep+0x5c>)
    eb28:	6913      	ldr	r3, [r2, #16]
    eb2a:	f043 0304 	orr.w	r3, r3, #4
    eb2e:	6113      	str	r3, [r2, #16]
    eb30:	e7e5      	b.n	eafe <am_hal_sysctrl_sleep+0x22>
    eb32:	bf00      	nop
    eb34:	40020000 	.word	0x40020000
    eb38:	e000ed00 	.word	0xe000ed00
    eb3c:	5fff0000 	.word	0x5fff0000
    eb40:	10001150 	.word	0x10001150
    eb44:	1000114c 	.word	0x1000114c
    eb48:	4ffff000 	.word	0x4ffff000

0000eb4c <am_hal_sysctrl_fpu_enable>:
    eb4c:	4b02      	ldr	r3, [pc, #8]	; (eb58 <am_hal_sysctrl_fpu_enable+0xc>)
    eb4e:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
    eb52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    eb56:	4770      	bx	lr
    eb58:	e000ed00 	.word	0xe000ed00

0000eb5c <am_hal_sysctrl_fpu_stacking_enable>:
    eb5c:	b510      	push	{r4, lr}
    eb5e:	b082      	sub	sp, #8
    eb60:	4604      	mov	r4, r0
    eb62:	f7ff fe7d 	bl	e860 <am_hal_interrupt_master_disable>
    eb66:	4a09      	ldr	r2, [pc, #36]	; (eb8c <am_hal_sysctrl_fpu_stacking_enable+0x30>)
    eb68:	9001      	str	r0, [sp, #4]
    eb6a:	6853      	ldr	r3, [r2, #4]
    eb6c:	2c00      	cmp	r4, #0
    eb6e:	bf14      	ite	ne
    eb70:	f04f 4140 	movne.w	r1, #3221225472	; 0xc0000000
    eb74:	f04f 4100 	moveq.w	r1, #2147483648	; 0x80000000
    eb78:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    eb7c:	430b      	orrs	r3, r1
    eb7e:	6053      	str	r3, [r2, #4]
    eb80:	9801      	ldr	r0, [sp, #4]
    eb82:	f7ff fe71 	bl	e868 <am_hal_interrupt_master_set>
    eb86:	b002      	add	sp, #8
    eb88:	bd10      	pop	{r4, pc}
    eb8a:	bf00      	nop
    eb8c:	e000ef30 	.word	0xe000ef30

0000eb90 <am_bsp_low_power_init>:
    eb90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eb92:	f000 f86d 	bl	ec70 <am_hal_itm_disable>
    eb96:	2000      	movs	r0, #0
    eb98:	f7fe f974 	bl	ce84 <am_util_stdio_printf_init>
    eb9c:	4b12      	ldr	r3, [pc, #72]	; (ebe8 <am_bsp_low_power_init+0x58>)
    eb9e:	4f13      	ldr	r7, [pc, #76]	; (ebec <am_bsp_low_power_init+0x5c>)
    eba0:	6819      	ldr	r1, [r3, #0]
    eba2:	2029      	movs	r0, #41	; 0x29
    eba4:	f7ff fca0 	bl	e4e8 <am_hal_gpio_pinconfig>
    eba8:	f7ff ff4e 	bl	ea48 <am_hal_pwrctrl_low_power_init>
    ebac:	2001      	movs	r0, #1
    ebae:	f000 f8cd 	bl	ed4c <am_hal_rtc_osc_select>
    ebb2:	2100      	movs	r1, #0
    ebb4:	2003      	movs	r0, #3
    ebb6:	f7ff fae9 	bl	e18c <am_hal_clkgen_control>
    ebba:	f000 f8d3 	bl	ed64 <am_hal_rtc_osc_disable>
    ebbe:	4b0c      	ldr	r3, [pc, #48]	; (ebf0 <am_bsp_low_power_init+0x60>)
    ebc0:	681e      	ldr	r6, [r3, #0]
    ebc2:	2400      	movs	r4, #0
    ebc4:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    ebc8:	4631      	mov	r1, r6
    ebca:	4628      	mov	r0, r5
    ebcc:	f7ff fc8c 	bl	e4e8 <am_hal_gpio_pinconfig>
    ebd0:	2103      	movs	r1, #3
    ebd2:	4628      	mov	r0, r5
    ebd4:	f7ff fdfc 	bl	e7d0 <am_hal_gpio_state_write>
    ebd8:	3401      	adds	r4, #1
    ebda:	4628      	mov	r0, r5
    ebdc:	2100      	movs	r1, #0
    ebde:	f7ff fdf7 	bl	e7d0 <am_hal_gpio_state_write>
    ebe2:	2c03      	cmp	r4, #3
    ebe4:	d1ee      	bne.n	ebc4 <am_bsp_low_power_init+0x34>
    ebe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ebe8:	0000f1f8 	.word	0x0000f1f8
    ebec:	1000101c 	.word	0x1000101c
    ebf0:	0000f1fc 	.word	0x0000f1fc

0000ebf4 <am_bsp_itm_printf_enable>:
    ebf4:	b500      	push	{lr}
    ebf6:	4b0b      	ldr	r3, [pc, #44]	; (ec24 <am_bsp_itm_printf_enable+0x30>)
    ebf8:	b087      	sub	sp, #28
    ebfa:	2201      	movs	r2, #1
    ebfc:	601a      	str	r2, [r3, #0]
    ebfe:	f000 f819 	bl	ec34 <am_hal_itm_enable>
    ec02:	a806      	add	r0, sp, #24
    ec04:	4b08      	ldr	r3, [pc, #32]	; (ec28 <am_bsp_itm_printf_enable+0x34>)
    ec06:	f840 3d14 	str.w	r3, [r0, #-20]!
    ec0a:	f000 f8b5 	bl	ed78 <am_hal_tpiu_enable>
    ec0e:	4b07      	ldr	r3, [pc, #28]	; (ec2c <am_bsp_itm_printf_enable+0x38>)
    ec10:	2029      	movs	r0, #41	; 0x29
    ec12:	6819      	ldr	r1, [r3, #0]
    ec14:	f7ff fc68 	bl	e4e8 <am_hal_gpio_pinconfig>
    ec18:	4805      	ldr	r0, [pc, #20]	; (ec30 <am_bsp_itm_printf_enable+0x3c>)
    ec1a:	f7fe f933 	bl	ce84 <am_util_stdio_printf_init>
    ec1e:	b007      	add	sp, #28
    ec20:	f85d fb04 	ldr.w	pc, [sp], #4
    ec24:	10001154 	.word	0x10001154
    ec28:	000f4240 	.word	0x000f4240
    ec2c:	0000f36c 	.word	0x0000f36c
    ec30:	0000ed1d 	.word	0x0000ed1d

0000ec34 <am_hal_itm_enable>:
    ec34:	4a0b      	ldr	r2, [pc, #44]	; (ec64 <am_hal_itm_enable+0x30>)
    ec36:	68d3      	ldr	r3, [r2, #12]
    ec38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    ec3c:	60d3      	str	r3, [r2, #12]
    ec3e:	68d3      	ldr	r3, [r2, #12]
    ec40:	01db      	lsls	r3, r3, #7
    ec42:	d5fc      	bpl.n	ec3e <am_hal_itm_enable+0xa>
    ec44:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    ec48:	4907      	ldr	r1, [pc, #28]	; (ec68 <am_hal_itm_enable+0x34>)
    ec4a:	f8c3 1fb0 	str.w	r1, [r3, #4016]	; 0xfb0
    ec4e:	4a07      	ldr	r2, [pc, #28]	; (ec6c <am_hal_itm_enable+0x38>)
    ec50:	200f      	movs	r0, #15
    ec52:	f04f 31ff 	mov.w	r1, #4294967295
    ec56:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    ec5a:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    ec5e:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    ec62:	4770      	bx	lr
    ec64:	e000edf0 	.word	0xe000edf0
    ec68:	c5acce55 	.word	0xc5acce55
    ec6c:	00150511 	.word	0x00150511

0000ec70 <am_hal_itm_disable>:
    ec70:	b510      	push	{r4, lr}
    ec72:	4b25      	ldr	r3, [pc, #148]	; (ed08 <am_hal_itm_disable+0x98>)
    ec74:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    ec78:	b9b3      	cbnz	r3, eca8 <am_hal_itm_disable+0x38>
    ec7a:	4b24      	ldr	r3, [pc, #144]	; (ed0c <am_hal_itm_disable+0x9c>)
    ec7c:	68da      	ldr	r2, [r3, #12]
    ec7e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    ec82:	60da      	str	r2, [r3, #12]
    ec84:	68da      	ldr	r2, [r3, #12]
    ec86:	01d2      	lsls	r2, r2, #7
    ec88:	d5fc      	bpl.n	ec84 <am_hal_itm_disable+0x14>
    ec8a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    ec8e:	4920      	ldr	r1, [pc, #128]	; (ed10 <am_hal_itm_disable+0xa0>)
    ec90:	f8c3 1fb0 	str.w	r1, [r3, #4016]	; 0xfb0
    ec94:	4a1f      	ldr	r2, [pc, #124]	; (ed14 <am_hal_itm_disable+0xa4>)
    ec96:	200f      	movs	r0, #15
    ec98:	f04f 31ff 	mov.w	r1, #4294967295
    ec9c:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    eca0:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    eca4:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    eca8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    ecac:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
    ecb0:	021b      	lsls	r3, r3, #8
    ecb2:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    ecb6:	d4f9      	bmi.n	ecac <am_hal_itm_disable+0x3c>
    ecb8:	f44f 7048 	mov.w	r0, #800	; 0x320
    ecbc:	f7ff fbc6 	bl	e44c <am_hal_flash_delay>
    ecc0:	4b13      	ldr	r3, [pc, #76]	; (ed10 <am_hal_itm_disable+0xa0>)
    ecc2:	f8c4 3fb0 	str.w	r3, [r4, #4016]	; 0xfb0
    ecc6:	4621      	mov	r1, r4
    ecc8:	2064      	movs	r0, #100	; 0x64
    ecca:	f8d1 3e80 	ldr.w	r3, [r1, #3712]	; 0xe80
    ecce:	f023 0301 	bic.w	r3, r3, #1
    ecd2:	f8c1 3e80 	str.w	r3, [r1, #3712]	; 0xe80
    ecd6:	f8d1 2e80 	ldr.w	r2, [r1, #3712]	; 0xe80
    ecda:	4b0f      	ldr	r3, [pc, #60]	; (ed18 <am_hal_itm_disable+0xa8>)
    ecdc:	4013      	ands	r3, r2
    ecde:	2b00      	cmp	r3, #0
    ece0:	d1f9      	bne.n	ecd6 <am_hal_itm_disable+0x66>
    ece2:	3801      	subs	r0, #1
    ece4:	d1f1      	bne.n	ecca <am_hal_itm_disable+0x5a>
    ece6:	4a09      	ldr	r2, [pc, #36]	; (ed0c <am_hal_itm_disable+0x9c>)
    ece8:	68d3      	ldr	r3, [r2, #12]
    ecea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    ecee:	60d3      	str	r3, [r2, #12]
    ecf0:	68d3      	ldr	r3, [r2, #12]
    ecf2:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
    ecf6:	d1fb      	bne.n	ecf0 <am_hal_itm_disable+0x80>
    ecf8:	4a03      	ldr	r2, [pc, #12]	; (ed08 <am_hal_itm_disable+0x98>)
    ecfa:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    ecfe:	f8d2 3250 	ldr.w	r3, [r2, #592]	; 0x250
    ed02:	2b00      	cmp	r3, #0
    ed04:	d1fb      	bne.n	ecfe <am_hal_itm_disable+0x8e>
    ed06:	bd10      	pop	{r4, pc}
    ed08:	40020000 	.word	0x40020000
    ed0c:	e000edf0 	.word	0xe000edf0
    ed10:	c5acce55 	.word	0xc5acce55
    ed14:	00150511 	.word	0x00150511
    ed18:	00800001 	.word	0x00800001

0000ed1c <am_hal_itm_print>:
    ed1c:	7803      	ldrb	r3, [r0, #0]
    ed1e:	b1a3      	cbz	r3, ed4a <am_hal_itm_print+0x2e>
    ed20:	4602      	mov	r2, r0
    ed22:	2300      	movs	r3, #0
    ed24:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    ed28:	3301      	adds	r3, #1
    ed2a:	2900      	cmp	r1, #0
    ed2c:	d1fa      	bne.n	ed24 <am_hal_itm_print+0x8>
    ed2e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    ed32:	b430      	push	{r4, r5}
    ed34:	18c1      	adds	r1, r0, r3
    ed36:	4615      	mov	r5, r2
    ed38:	f810 4b01 	ldrb.w	r4, [r0], #1
    ed3c:	6813      	ldr	r3, [r2, #0]
    ed3e:	2b00      	cmp	r3, #0
    ed40:	d0fc      	beq.n	ed3c <am_hal_itm_print+0x20>
    ed42:	4288      	cmp	r0, r1
    ed44:	702c      	strb	r4, [r5, #0]
    ed46:	d1f7      	bne.n	ed38 <am_hal_itm_print+0x1c>
    ed48:	bc30      	pop	{r4, r5}
    ed4a:	4770      	bx	lr

0000ed4c <am_hal_rtc_osc_select>:
    ed4c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    ed50:	2801      	cmp	r0, #1
    ed52:	68d3      	ldr	r3, [r2, #12]
    ed54:	bf0c      	ite	eq
    ed56:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
    ed5a:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
    ed5e:	60d3      	str	r3, [r2, #12]
    ed60:	4770      	bx	lr
    ed62:	bf00      	nop

0000ed64 <am_hal_rtc_osc_disable>:
    ed64:	4a03      	ldr	r2, [pc, #12]	; (ed74 <am_hal_rtc_osc_disable+0x10>)
    ed66:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    ed6a:	f043 0310 	orr.w	r3, r3, #16
    ed6e:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    ed72:	4770      	bx	lr
    ed74:	40004200 	.word	0x40004200

0000ed78 <am_hal_tpiu_enable>:
    ed78:	b530      	push	{r4, r5, lr}
    ed7a:	4a23      	ldr	r2, [pc, #140]	; (ee08 <am_hal_tpiu_enable+0x90>)
    ed7c:	6804      	ldr	r4, [r0, #0]
    ed7e:	2300      	movs	r3, #0
    ed80:	b085      	sub	sp, #20
    ed82:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    ed86:	b334      	cbz	r4, edd6 <am_hal_tpiu_enable+0x5e>
    ed88:	4b20      	ldr	r3, [pc, #128]	; (ee0c <am_hal_tpiu_enable+0x94>)
    ed8a:	4921      	ldr	r1, [pc, #132]	; (ee10 <am_hal_tpiu_enable+0x98>)
    ed8c:	2001      	movs	r0, #1
    ed8e:	6050      	str	r0, [r2, #4]
    ed90:	f5a4 4261 	sub.w	r2, r4, #57600	; 0xe100
    ed94:	a801      	add	r0, sp, #4
    ed96:	428a      	cmp	r2, r1
    ed98:	bf88      	it	hi
    ed9a:	461c      	movhi	r4, r3
    ed9c:	f7ff fa62 	bl	e264 <am_hal_clkgen_status_get>
    eda0:	9b01      	ldr	r3, [sp, #4]
    eda2:	1c5a      	adds	r2, r3, #1
    eda4:	d02d      	beq.n	ee02 <am_hal_tpiu_enable+0x8a>
    eda6:	08db      	lsrs	r3, r3, #3
    eda8:	fbb3 f3f4 	udiv	r3, r3, r4
    edac:	3b01      	subs	r3, #1
    edae:	b29b      	uxth	r3, r3
    edb0:	4a15      	ldr	r2, [pc, #84]	; (ee08 <am_hal_tpiu_enable+0x90>)
    edb2:	4918      	ldr	r1, [pc, #96]	; (ee14 <am_hal_tpiu_enable+0x9c>)
    edb4:	6113      	str	r3, [r2, #16]
    edb6:	2402      	movs	r4, #2
    edb8:	f240 2301 	movw	r3, #513	; 0x201
    edbc:	2000      	movs	r0, #0
    edbe:	f8c2 40f0 	str.w	r4, [r2, #240]	; 0xf0
    edc2:	f8c2 0f00 	str.w	r0, [r2, #3840]	; 0xf00
    edc6:	f8c1 3250 	str.w	r3, [r1, #592]	; 0x250
    edca:	f44f 7048 	mov.w	r0, #800	; 0x320
    edce:	f7ff fb3d 	bl	e44c <am_hal_flash_delay>
    edd2:	b005      	add	sp, #20
    edd4:	bd30      	pop	{r4, r5, pc}
    edd6:	6903      	ldr	r3, [r0, #16]
    edd8:	6113      	str	r3, [r2, #16]
    edda:	6883      	ldr	r3, [r0, #8]
    eddc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    ede0:	68c3      	ldr	r3, [r0, #12]
    ede2:	4d0c      	ldr	r5, [pc, #48]	; (ee14 <am_hal_tpiu_enable+0x9c>)
    ede4:	1e59      	subs	r1, r3, #1
    ede6:	2301      	movs	r3, #1
    ede8:	408b      	lsls	r3, r1
    edea:	6053      	str	r3, [r2, #4]
    edec:	f8c2 4f00 	str.w	r4, [r2, #3840]	; 0xf00
    edf0:	6843      	ldr	r3, [r0, #4]
    edf2:	f8c5 3250 	str.w	r3, [r5, #592]	; 0x250
    edf6:	f44f 7048 	mov.w	r0, #800	; 0x320
    edfa:	f7ff fb27 	bl	e44c <am_hal_flash_delay>
    edfe:	b005      	add	sp, #20
    ee00:	bd30      	pop	{r4, r5, pc}
    ee02:	2305      	movs	r3, #5
    ee04:	e7d4      	b.n	edb0 <am_hal_tpiu_enable+0x38>
    ee06:	bf00      	nop
    ee08:	e0040000 	.word	0xe0040000
    ee0c:	000f4240 	.word	0x000f4240
    ee10:	001da380 	.word	0x001da380
    ee14:	40020000 	.word	0x40020000
    ee18:	6f727245 	.word	0x6f727245
    ee1c:	202d2072 	.word	0x202d2072
    ee20:	65736572 	.word	0x65736572
    ee24:	74617672 	.word	0x74617672
    ee28:	206e6f69 	.word	0x206e6f69
    ee2c:	7420666f 	.word	0x7420666f
    ee30:	41206568 	.word	0x41206568
    ee34:	69204344 	.word	0x69204344
    ee38:	6174736e 	.word	0x6174736e
    ee3c:	2065636e 	.word	0x2065636e
    ee40:	6c696166 	.word	0x6c696166
    ee44:	0a2e6465 	.word	0x0a2e6465
    ee48:	00000000 	.word	0x00000000
    ee4c:	6f727245 	.word	0x6f727245
    ee50:	202d2072 	.word	0x202d2072
    ee54:	20434441 	.word	0x20434441
    ee58:	65776f70 	.word	0x65776f70
    ee5c:	6e6f2072 	.word	0x6e6f2072
    ee60:	69616620 	.word	0x69616620
    ee64:	2e64656c 	.word	0x2e64656c
    ee68:	0000000a 	.word	0x0000000a
    ee6c:	6f727245 	.word	0x6f727245
    ee70:	202d2072 	.word	0x202d2072
    ee74:	666e6f63 	.word	0x666e6f63
    ee78:	72756769 	.word	0x72756769
    ee7c:	20676e69 	.word	0x20676e69
    ee80:	20434441 	.word	0x20434441
    ee84:	6c696166 	.word	0x6c696166
    ee88:	0a2e6465 	.word	0x0a2e6465
    ee8c:	00000000 	.word	0x00000000
    ee90:	20434441 	.word	0x20434441
    ee94:	54414256 	.word	0x54414256
    ee98:	6e612054 	.word	0x6e612054
    ee9c:	65542064 	.word	0x65542064
    eea0:	7265706d 	.word	0x7265706d
    eea4:	72757461 	.word	0x72757461
    eea8:	65532065 	.word	0x65532065
    eeac:	6e69736e 	.word	0x6e69736e
    eeb0:	78452067 	.word	0x78452067
    eeb4:	6c706d61 	.word	0x6c706d61
    eeb8:	000a2e65 	.word	0x000a2e65
    eebc:	0000000a 	.word	0x0000000a
    eec0:	4d495443 	.word	0x4d495443
    eec4:	3d335245 	.word	0x3d335245
    eec8:	30257830 	.word	0x30257830
    eecc:	40205838 	.word	0x40205838
    eed0:	25783020 	.word	0x25783020
    eed4:	0a583830 	.word	0x0a583830
    eed8:	00000000 	.word	0x00000000
    eedc:	20434441 	.word	0x20434441
    eee0:	49474552 	.word	0x49474552
    eee4:	52455453 	.word	0x52455453
    eee8:	20402053 	.word	0x20402053
    eeec:	30257830 	.word	0x30257830
    eef0:	000a5838 	.word	0x000a5838
    eef4:	20434441 	.word	0x20434441
    eef8:	20474643 	.word	0x20474643
    eefc:	203d2020 	.word	0x203d2020
    ef00:	30257830 	.word	0x30257830
    ef04:	000a5838 	.word	0x000a5838
    ef08:	20434441 	.word	0x20434441
    ef0c:	544f4c53 	.word	0x544f4c53
    ef10:	203d2030 	.word	0x203d2030
    ef14:	30257830 	.word	0x30257830
    ef18:	000a5838 	.word	0x000a5838
    ef1c:	20434441 	.word	0x20434441
    ef20:	544f4c53 	.word	0x544f4c53
    ef24:	203d2031 	.word	0x203d2031
    ef28:	30257830 	.word	0x30257830
    ef2c:	000a5838 	.word	0x000a5838
    ef30:	20434441 	.word	0x20434441
    ef34:	544f4c53 	.word	0x544f4c53
    ef38:	203d2032 	.word	0x203d2032
    ef3c:	30257830 	.word	0x30257830
    ef40:	000a5838 	.word	0x000a5838
    ef44:	20434441 	.word	0x20434441
    ef48:	544f4c53 	.word	0x544f4c53
    ef4c:	203d2033 	.word	0x203d2033
    ef50:	30257830 	.word	0x30257830
    ef54:	000a5838 	.word	0x000a5838
    ef58:	20434441 	.word	0x20434441
    ef5c:	544f4c53 	.word	0x544f4c53
    ef60:	203d2034 	.word	0x203d2034
    ef64:	30257830 	.word	0x30257830
    ef68:	000a5838 	.word	0x000a5838
    ef6c:	20434441 	.word	0x20434441
    ef70:	544f4c53 	.word	0x544f4c53
    ef74:	203d2035 	.word	0x203d2035
    ef78:	30257830 	.word	0x30257830
    ef7c:	000a5838 	.word	0x000a5838
    ef80:	20434441 	.word	0x20434441
    ef84:	544f4c53 	.word	0x544f4c53
    ef88:	203d2036 	.word	0x203d2036
    ef8c:	30257830 	.word	0x30257830
    ef90:	000a5838 	.word	0x000a5838
    ef94:	20434441 	.word	0x20434441
    ef98:	544f4c53 	.word	0x544f4c53
    ef9c:	203d2037 	.word	0x203d2037
    efa0:	30257830 	.word	0x30257830
    efa4:	000a5838 	.word	0x000a5838
    efa8:	4d495254 	.word	0x4d495254
    efac:	2044454d 	.word	0x2044454d
    efb0:	504d4554 	.word	0x504d4554
    efb4:	20202020 	.word	0x20202020
    efb8:	2e25203d 	.word	0x2e25203d
    efbc:	000a6633 	.word	0x000a6633
    efc0:	4d495254 	.word	0x4d495254
    efc4:	2044454d 	.word	0x2044454d
    efc8:	544c4f56 	.word	0x544c4f56
    efcc:	20454741 	.word	0x20454741
    efd0:	2e25203d 	.word	0x2e25203d
    efd4:	000a6633 	.word	0x000a6633
    efd8:	4d495254 	.word	0x4d495254
    efdc:	2044454d 	.word	0x2044454d
    efe0:	7366664f 	.word	0x7366664f
    efe4:	20207465 	.word	0x20207465
    efe8:	2e25203d 	.word	0x2e25203d
    efec:	000a6633 	.word	0x000a6633
    eff0:	696c6163 	.word	0x696c6163
    eff4:	74617262 	.word	0x74617262
    eff8:	00006465 	.word	0x00006465
    effc:	61636e75 	.word	0x61636e75
    f000:	7262696c 	.word	0x7262696c
    f004:	64657461 	.word	0x64657461
    f008:	66656420 	.word	0x66656420
    f00c:	746c7561 	.word	0x746c7561
    f010:	00000000 	.word	0x00000000
    f014:	65746f4e 	.word	0x65746f4e
    f018:	74202d20 	.word	0x74202d20
    f01c:	65736568 	.word	0x65736568
    f020:	69727420 	.word	0x69727420
    f024:	6176206d 	.word	0x6176206d
    f028:	7365756c 	.word	0x7365756c
    f02c:	65726120 	.word	0x65726120
    f030:	73252720 	.word	0x73252720
    f034:	61762027 	.word	0x61762027
    f038:	7365756c 	.word	0x7365756c
    f03c:	00000a2e 	.word	0x00000a2e
    f040:	54414256 	.word	0x54414256
    f044:	203d2054 	.word	0x203d2054
    f048:	332e253c 	.word	0x332e253c
    f04c:	28203e66 	.word	0x28203e66
    f050:	30257830 	.word	0x30257830
    f054:	20295834 	.word	0x20295834
    f058:	00000000 	.word	0x00000000
    f05c:	504d4554 	.word	0x504d4554
    f060:	25203d20 	.word	0x25203d20
    f064:	2066322e 	.word	0x2066322e
    f068:	30282043 	.word	0x30282043
    f06c:	34302578 	.word	0x34302578
    f070:	00202958 	.word	0x00202958
    f074:	322e2520 	.word	0x322e2520
    f078:	00462066 	.word	0x00462066
    f07c:	6f727245 	.word	0x6f727245
    f080:	61203a72 	.word	0x61203a72
    f084:	61685f6d 	.word	0x61685f6d
    f088:	64615f4c 	.word	0x64615f4c
    f08c:	6f635f63 	.word	0x6f635f63
    f090:	6f72746e 	.word	0x6f72746e
    f094:	6572206c 	.word	0x6572206c
    f098:	6e727574 	.word	0x6e727574
    f09c:	25206465 	.word	0x25206465
    f0a0:	00000a64 	.word	0x00000a64
    f0a4:	0a0a0a0a 	.word	0x0a0a0a0a
    f0a8:	0a0a0a0a 	.word	0x0a0a0a0a
    f0ac:	0a0a0a0a 	.word	0x0a0a0a0a
    f0b0:	0a0a0a0a 	.word	0x0a0a0a0a
    f0b4:	00000a0a 	.word	0x00000a0a

0000f0b8 <g_sADC_Cfg>:
    f0b8:	01070002 00010100                       ........

0000f0c0 <am_hal_cachectrl_defaults>:
    f0c0:	00000308                                ....

0000f0c4 <g_AM_HAL_GPIO_TRISTATE>:
    f0c4:	00000c03                                ....

0000f0c8 <g_ui8Bit76Capabilities>:
    f0c8:	02800101 80010180 80800101 80808080     ................
    f0d8:	80808080 80808008 01800180 80808080     ................
    f0e8:	80808080 01800402 01010401 80808080     ................
    f0f8:	00000101                                ....

0000f0fc <g_ui8NCEtable>:
    f0fc:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    f10c:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    f11c:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    f12c:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    f13c:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    f14c:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    f15c:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    f16c:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    f17c:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    f18c:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    f19c:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    f1ac:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    f1bc:	32221202 43231303                       .."2..#C

0000f1c4 <g_ui8Inpen>:
    f1c4:	e2242323 100723a1 e1004303 3561a151     ##$..#...C..Q.a5
    f1d4:	4181c525 d160b001 31a13130 1100f101     %..A..`.01.1....
    f1e4:	01d121b1 300511e5 31301037 40006100     .!.....07.01.a.@
    f1f4:	00003130                                01..

0000f1f8 <g_AM_HAL_GPIO_DISABLE>:
    f1f8:	00000003                                ....

0000f1fc <g_AM_HAL_GPIO_OUTPUT>:
    f1fc:	00000403                                ....

0000f200 <g_ui8nCEpins>:
    f200:	02070707 00080802 01020202 01010101     ................
    f210:	01010101 01010101 01010101 01010101     ................
    f220:	01010101 08010101 01010008 01010101     ................
    f230:	00000101                                ....

0000f234 <g_am_hal_mcuctrl_flash_size>:
    f234:	00004000 00008000 00010000 00020000     .@..............
    f244:	00040000 00080000 00100000 00200000     .............. .
	...

0000f274 <g_am_hal_mcuctrl_sram_size>:
    f274:	00004000 00008000 00010000 00020000     .@..............
    f284:	00040000 00080000 00100000 00060000     ................
	...

0000f2b4 <am_hal_pwrctrl_peripheral_control>:
	...
    f2c0:	00000001 00000004 00000004 00000002     ................
    f2d0:	00000008 00000008 00000004 00000008     ................
    f2e0:	00000008 00000008 00000008 00000008     ................
    f2f0:	00000010 00000010 00000010 00000020     ............ ...
    f300:	00000010 00000010 00000040 00000010     ........@.......
    f310:	00000010 00000080 00000004 00000004     ................
    f320:	00000100 00000004 00000004 00000200     ................
    f330:	00000020 00000020 00000400 00000004      ... ...........
    f340:	00000004 00000800 00000040 00000040     ........@...@...
    f350:	00001000 00000080 00000080 00002000     ............. ..
    f360:	00000100 00000100                       ........

0000f368 <g_AM_BSP_GPIO_CLICKBEETLE_SW1>:
    f368:	00001003                                ....

0000f36c <g_AM_BSP_GPIO_ITM_SWO>:
    f36c:	00000002                                ....
