
bin/ble_freertos_ancs.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 2b 00 10 49 02 02 00 b1 02 02 00 25 d1 01 00     .+..I.......%...
    c010:	25 d1 01 00 25 d1 01 00 25 d1 01 00 00 00 00 00     %...%...%.......
	...
    c02c:	e1 42 01 00 b9 02 02 00 00 00 00 00 d1 44 01 00     .B...........D..
    c03c:	35 45 01 00 b9 02 02 00 b9 02 02 00 b9 02 02 00     5E..............
    c04c:	b9 02 02 00 b9 02 02 00 b9 02 02 00 b9 02 02 00     ................
    c05c:	b9 02 02 00 b9 02 02 00 b9 02 02 00 b9 02 02 00     ................
    c06c:	b9 02 02 00 35 ad 01 00 b9 02 02 00 d5 ad 01 00     ....5...........
    c07c:	11 ad 01 00 b9 02 02 00 b9 02 02 00 b9 02 02 00     ................
    c08c:	b9 02 02 00 b9 02 02 00 b9 02 02 00 b9 02 02 00     ................
    c09c:	69 47 01 00 b9 02 02 00 b9 02 02 00 b9 02 02 00     iG..............
    c0ac:	b9 02 02 00 b9 02 02 00 b9 02 02 00 b9 02 02 00     ................
    c0bc:	b9 02 02 00                                         ....

0000c0c0 <__Patchable>:
	...

0000c100 <memcpy>:
    c100:	4684      	mov	ip, r0
    c102:	ea41 0300 	orr.w	r3, r1, r0
    c106:	f013 0303 	ands.w	r3, r3, #3
    c10a:	d16d      	bne.n	c1e8 <memcpy+0xe8>
    c10c:	3a40      	subs	r2, #64	; 0x40
    c10e:	d341      	bcc.n	c194 <memcpy+0x94>
    c110:	f851 3b04 	ldr.w	r3, [r1], #4
    c114:	f840 3b04 	str.w	r3, [r0], #4
    c118:	f851 3b04 	ldr.w	r3, [r1], #4
    c11c:	f840 3b04 	str.w	r3, [r0], #4
    c120:	f851 3b04 	ldr.w	r3, [r1], #4
    c124:	f840 3b04 	str.w	r3, [r0], #4
    c128:	f851 3b04 	ldr.w	r3, [r1], #4
    c12c:	f840 3b04 	str.w	r3, [r0], #4
    c130:	f851 3b04 	ldr.w	r3, [r1], #4
    c134:	f840 3b04 	str.w	r3, [r0], #4
    c138:	f851 3b04 	ldr.w	r3, [r1], #4
    c13c:	f840 3b04 	str.w	r3, [r0], #4
    c140:	f851 3b04 	ldr.w	r3, [r1], #4
    c144:	f840 3b04 	str.w	r3, [r0], #4
    c148:	f851 3b04 	ldr.w	r3, [r1], #4
    c14c:	f840 3b04 	str.w	r3, [r0], #4
    c150:	f851 3b04 	ldr.w	r3, [r1], #4
    c154:	f840 3b04 	str.w	r3, [r0], #4
    c158:	f851 3b04 	ldr.w	r3, [r1], #4
    c15c:	f840 3b04 	str.w	r3, [r0], #4
    c160:	f851 3b04 	ldr.w	r3, [r1], #4
    c164:	f840 3b04 	str.w	r3, [r0], #4
    c168:	f851 3b04 	ldr.w	r3, [r1], #4
    c16c:	f840 3b04 	str.w	r3, [r0], #4
    c170:	f851 3b04 	ldr.w	r3, [r1], #4
    c174:	f840 3b04 	str.w	r3, [r0], #4
    c178:	f851 3b04 	ldr.w	r3, [r1], #4
    c17c:	f840 3b04 	str.w	r3, [r0], #4
    c180:	f851 3b04 	ldr.w	r3, [r1], #4
    c184:	f840 3b04 	str.w	r3, [r0], #4
    c188:	f851 3b04 	ldr.w	r3, [r1], #4
    c18c:	f840 3b04 	str.w	r3, [r0], #4
    c190:	3a40      	subs	r2, #64	; 0x40
    c192:	d2bd      	bcs.n	c110 <memcpy+0x10>
    c194:	3230      	adds	r2, #48	; 0x30
    c196:	d311      	bcc.n	c1bc <memcpy+0xbc>
    c198:	f851 3b04 	ldr.w	r3, [r1], #4
    c19c:	f840 3b04 	str.w	r3, [r0], #4
    c1a0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1a4:	f840 3b04 	str.w	r3, [r0], #4
    c1a8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1ac:	f840 3b04 	str.w	r3, [r0], #4
    c1b0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1b4:	f840 3b04 	str.w	r3, [r0], #4
    c1b8:	3a10      	subs	r2, #16
    c1ba:	d2ed      	bcs.n	c198 <memcpy+0x98>
    c1bc:	320c      	adds	r2, #12
    c1be:	d305      	bcc.n	c1cc <memcpy+0xcc>
    c1c0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1c4:	f840 3b04 	str.w	r3, [r0], #4
    c1c8:	3a04      	subs	r2, #4
    c1ca:	d2f9      	bcs.n	c1c0 <memcpy+0xc0>
    c1cc:	3204      	adds	r2, #4
    c1ce:	d008      	beq.n	c1e2 <memcpy+0xe2>
    c1d0:	07d2      	lsls	r2, r2, #31
    c1d2:	bf1c      	itt	ne
    c1d4:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c1d8:	f800 3b01 	strbne.w	r3, [r0], #1
    c1dc:	d301      	bcc.n	c1e2 <memcpy+0xe2>
    c1de:	880b      	ldrh	r3, [r1, #0]
    c1e0:	8003      	strh	r3, [r0, #0]
    c1e2:	4660      	mov	r0, ip
    c1e4:	4770      	bx	lr
    c1e6:	bf00      	nop
    c1e8:	2a08      	cmp	r2, #8
    c1ea:	d313      	bcc.n	c214 <memcpy+0x114>
    c1ec:	078b      	lsls	r3, r1, #30
    c1ee:	d08d      	beq.n	c10c <memcpy+0xc>
    c1f0:	f010 0303 	ands.w	r3, r0, #3
    c1f4:	d08a      	beq.n	c10c <memcpy+0xc>
    c1f6:	f1c3 0304 	rsb	r3, r3, #4
    c1fa:	1ad2      	subs	r2, r2, r3
    c1fc:	07db      	lsls	r3, r3, #31
    c1fe:	bf1c      	itt	ne
    c200:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c204:	f800 3b01 	strbne.w	r3, [r0], #1
    c208:	d380      	bcc.n	c10c <memcpy+0xc>
    c20a:	f831 3b02 	ldrh.w	r3, [r1], #2
    c20e:	f820 3b02 	strh.w	r3, [r0], #2
    c212:	e77b      	b.n	c10c <memcpy+0xc>
    c214:	3a04      	subs	r2, #4
    c216:	d3d9      	bcc.n	c1cc <memcpy+0xcc>
    c218:	3a01      	subs	r2, #1
    c21a:	f811 3b01 	ldrb.w	r3, [r1], #1
    c21e:	f800 3b01 	strb.w	r3, [r0], #1
    c222:	d2f9      	bcs.n	c218 <memcpy+0x118>
    c224:	780b      	ldrb	r3, [r1, #0]
    c226:	7003      	strb	r3, [r0, #0]
    c228:	784b      	ldrb	r3, [r1, #1]
    c22a:	7043      	strb	r3, [r0, #1]
    c22c:	788b      	ldrb	r3, [r1, #2]
    c22e:	7083      	strb	r3, [r0, #2]
    c230:	4660      	mov	r0, ip
    c232:	4770      	bx	lr

0000c234 <__aeabi_d2f>:
    c234:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c238:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c23c:	bf24      	itt	cs
    c23e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c242:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c246:	d90d      	bls.n	c264 <__aeabi_d2f+0x30>
    c248:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c24c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c250:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c254:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c258:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c25c:	bf08      	it	eq
    c25e:	f020 0001 	biceq.w	r0, r0, #1
    c262:	4770      	bx	lr
    c264:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c268:	d121      	bne.n	c2ae <__aeabi_d2f+0x7a>
    c26a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c26e:	bfbc      	itt	lt
    c270:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c274:	4770      	bxlt	lr
    c276:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c27a:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c27e:	f1c2 0218 	rsb	r2, r2, #24
    c282:	f1c2 0c20 	rsb	ip, r2, #32
    c286:	fa10 f30c 	lsls.w	r3, r0, ip
    c28a:	fa20 f002 	lsr.w	r0, r0, r2
    c28e:	bf18      	it	ne
    c290:	f040 0001 	orrne.w	r0, r0, #1
    c294:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c298:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c29c:	fa03 fc0c 	lsl.w	ip, r3, ip
    c2a0:	ea40 000c 	orr.w	r0, r0, ip
    c2a4:	fa23 f302 	lsr.w	r3, r3, r2
    c2a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c2ac:	e7cc      	b.n	c248 <__aeabi_d2f+0x14>
    c2ae:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c2b2:	d107      	bne.n	c2c4 <__aeabi_d2f+0x90>
    c2b4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c2b8:	bf1e      	ittt	ne
    c2ba:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c2be:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c2c2:	4770      	bxne	lr
    c2c4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c2c8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c2cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c2d0:	4770      	bx	lr
    c2d2:	bf00      	nop

0000c2d4 <attDmConnCback>:
    c2d4:	7803      	ldrb	r3, [r0, #0]
    c2d6:	7882      	ldrb	r2, [r0, #2]
    c2d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c2dc:	1e5f      	subs	r7, r3, #1
    c2de:	4e16      	ldr	r6, [pc, #88]	; (c338 <attDmConnCback+0x64>)
    c2e0:	017f      	lsls	r7, r7, #5
    c2e2:	2a27      	cmp	r2, #39	; 0x27
    c2e4:	4605      	mov	r5, r0
    c2e6:	eb06 0407 	add.w	r4, r6, r7
    c2ea:	d108      	bne.n	c2fe <attDmConnCback+0x2a>
    c2ec:	88c2      	ldrh	r2, [r0, #6]
    c2ee:	8322      	strh	r2, [r4, #24]
    c2f0:	7723      	strb	r3, [r4, #28]
    c2f2:	2217      	movs	r2, #23
    c2f4:	2300      	movs	r3, #0
    c2f6:	8362      	strh	r2, [r4, #26]
    c2f8:	7763      	strb	r3, [r4, #29]
    c2fa:	77a3      	strb	r3, [r4, #30]
    c2fc:	77e3      	strb	r3, [r4, #31]
    c2fe:	4437      	add	r7, r6
    c300:	7f3b      	ldrb	r3, [r7, #28]
    c302:	b183      	cbz	r3, c326 <attDmConnCback+0x52>
    c304:	f8d6 3104 	ldr.w	r3, [r6, #260]	; 0x104
    c308:	4629      	mov	r1, r5
    c30a:	68db      	ldr	r3, [r3, #12]
    c30c:	4620      	mov	r0, r4
    c30e:	4798      	blx	r3
    c310:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    c314:	4629      	mov	r1, r5
    c316:	68db      	ldr	r3, [r3, #12]
    c318:	4620      	mov	r0, r4
    c31a:	4798      	blx	r3
    c31c:	78ab      	ldrb	r3, [r5, #2]
    c31e:	2b28      	cmp	r3, #40	; 0x28
    c320:	bf04      	itt	eq
    c322:	2300      	moveq	r3, #0
    c324:	773b      	strbeq	r3, [r7, #28]
    c326:	f8d6 310c 	ldr.w	r3, [r6, #268]	; 0x10c
    c32a:	b11b      	cbz	r3, c334 <attDmConnCback+0x60>
    c32c:	4628      	mov	r0, r5
    c32e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c332:	4718      	bx	r3
    c334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c338:	100035f0 	.word	0x100035f0

0000c33c <attEmptyHandler>:
    c33c:	4770      	bx	lr

0000c33e <attEmptyConnCback>:
    c33e:	4770      	bx	lr

0000c340 <attEmptyDataCback>:
    c340:	4770      	bx	lr

0000c342 <attL2cDataCback>:
    c342:	7a13      	ldrb	r3, [r2, #8]
    c344:	f013 0f01 	tst.w	r3, #1
    c348:	4b03      	ldr	r3, [pc, #12]	; (c358 <attL2cDataCback+0x16>)
    c34a:	bf14      	ite	ne
    c34c:	f8d3 3100 	ldrne.w	r3, [r3, #256]	; 0x100
    c350:	f8d3 3104 	ldreq.w	r3, [r3, #260]	; 0x104
    c354:	681b      	ldr	r3, [r3, #0]
    c356:	4718      	bx	r3
    c358:	100035f0 	.word	0x100035f0

0000c35c <attL2cCtrlCback>:
    c35c:	b570      	push	{r4, r5, r6, lr}
    c35e:	7804      	ldrb	r4, [r0, #0]
    c360:	4d0e      	ldr	r5, [pc, #56]	; (c39c <attL2cCtrlCback+0x40>)
    c362:	3c01      	subs	r4, #1
    c364:	0164      	lsls	r4, r4, #5
    c366:	192b      	adds	r3, r5, r4
    c368:	4606      	mov	r6, r0
    c36a:	7f1a      	ldrb	r2, [r3, #28]
    c36c:	b1a2      	cbz	r2, c398 <attL2cCtrlCback+0x3c>
    c36e:	7882      	ldrb	r2, [r0, #2]
    c370:	2a01      	cmp	r2, #1
    c372:	bf0c      	ite	eq
    c374:	2201      	moveq	r2, #1
    c376:	2200      	movne	r2, #0
    c378:	779a      	strb	r2, [r3, #30]
    c37a:	d003      	beq.n	c384 <attL2cCtrlCback+0x28>
    c37c:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    c380:	685b      	ldr	r3, [r3, #4]
    c382:	4798      	blx	r3
    c384:	442c      	add	r4, r5
    c386:	7fa3      	ldrb	r3, [r4, #30]
    c388:	b933      	cbnz	r3, c398 <attL2cCtrlCback+0x3c>
    c38a:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    c38e:	4630      	mov	r0, r6
    c390:	685b      	ldr	r3, [r3, #4]
    c392:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c396:	4718      	bx	r3
    c398:	bd70      	pop	{r4, r5, r6, pc}
    c39a:	bf00      	nop
    c39c:	100035f0 	.word	0x100035f0

0000c3a0 <attCcbByHandle>:
    c3a0:	b508      	push	{r3, lr}
    c3a2:	f003 fa85 	bl	f8b0 <DmConnIdByHandle>
    c3a6:	b118      	cbz	r0, c3b0 <attCcbByHandle+0x10>
    c3a8:	4b02      	ldr	r3, [pc, #8]	; (c3b4 <attCcbByHandle+0x14>)
    c3aa:	3801      	subs	r0, #1
    c3ac:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    c3b0:	bd08      	pop	{r3, pc}
    c3b2:	bf00      	nop
    c3b4:	100035f0 	.word	0x100035f0

0000c3b8 <attCcbByConnId>:
    c3b8:	4b02      	ldr	r3, [pc, #8]	; (c3c4 <attCcbByConnId+0xc>)
    c3ba:	3801      	subs	r0, #1
    c3bc:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    c3c0:	4770      	bx	lr
    c3c2:	bf00      	nop
    c3c4:	100035f0 	.word	0x100035f0

0000c3c8 <attUuidCmp16to128>:
    c3c8:	b508      	push	{r3, lr}
    c3ca:	4b06      	ldr	r3, [pc, #24]	; (c3e4 <attUuidCmp16to128+0x1c>)
    c3cc:	7802      	ldrb	r2, [r0, #0]
    c3ce:	731a      	strb	r2, [r3, #12]
    c3d0:	7842      	ldrb	r2, [r0, #1]
    c3d2:	735a      	strb	r2, [r3, #13]
    c3d4:	4618      	mov	r0, r3
    c3d6:	2210      	movs	r2, #16
    c3d8:	f013 ff72 	bl	202c0 <memcmp>
    c3dc:	fab0 f080 	clz	r0, r0
    c3e0:	0940      	lsrs	r0, r0, #5
    c3e2:	bd08      	pop	{r3, pc}
    c3e4:	10002b00 	.word	0x10002b00

0000c3e8 <attExecCallback>:
    c3e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    c3ea:	f88d 3003 	strb.w	r3, [sp, #3]
    c3ee:	2300      	movs	r3, #0
    c3f0:	f8ad 3008 	strh.w	r3, [sp, #8]
    c3f4:	f88d 300c 	strb.w	r3, [sp, #12]
    c3f8:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    c3fc:	f8ad 300e 	strh.w	r3, [sp, #14]
    c400:	4b06      	ldr	r3, [pc, #24]	; (c41c <attExecCallback+0x34>)
    c402:	f8ad 0000 	strh.w	r0, [sp]
    c406:	f88d 1002 	strb.w	r1, [sp, #2]
    c40a:	f8ad 200a 	strh.w	r2, [sp, #10]
    c40e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    c412:	4668      	mov	r0, sp
    c414:	4798      	blx	r3
    c416:	b005      	add	sp, #20
    c418:	f85d fb04 	ldr.w	pc, [sp], #4
    c41c:	100035f0 	.word	0x100035f0

0000c420 <attSetMtu>:
    c420:	428a      	cmp	r2, r1
    c422:	8b43      	ldrh	r3, [r0, #26]
    c424:	b507      	push	{r0, r1, r2, lr}
    c426:	bf28      	it	cs
    c428:	460a      	movcs	r2, r1
    c42a:	4293      	cmp	r3, r2
    c42c:	d007      	beq.n	c43e <attSetMtu+0x1e>
    c42e:	2300      	movs	r3, #0
    c430:	8342      	strh	r2, [r0, #26]
    c432:	2111      	movs	r1, #17
    c434:	7f00      	ldrb	r0, [r0, #28]
    c436:	9200      	str	r2, [sp, #0]
    c438:	461a      	mov	r2, r3
    c43a:	f7ff ffd5 	bl	c3e8 <attExecCallback>
    c43e:	b003      	add	sp, #12
    c440:	f85d fb04 	ldr.w	pc, [sp], #4

0000c444 <attMsgAlloc>:
    c444:	2100      	movs	r1, #0
    c446:	f00c be63 	b.w	19110 <WsfMsgDataAlloc>

0000c44a <AttHandlerInit>:
    c44a:	b508      	push	{r3, lr}
    c44c:	4b09      	ldr	r3, [pc, #36]	; (c474 <AttHandlerInit+0x2a>)
    c44e:	4a0a      	ldr	r2, [pc, #40]	; (c478 <AttHandlerInit+0x2e>)
    c450:	f883 0110 	strb.w	r0, [r3, #272]	; 0x110
    c454:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    c458:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    c45c:	4907      	ldr	r1, [pc, #28]	; (c47c <AttHandlerInit+0x32>)
    c45e:	4a08      	ldr	r2, [pc, #32]	; (c480 <AttHandlerInit+0x36>)
    c460:	2004      	movs	r0, #4
    c462:	f004 f96f 	bl	10744 <L2cRegister>
    c466:	4907      	ldr	r1, [pc, #28]	; (c484 <AttHandlerInit+0x3a>)
    c468:	2000      	movs	r0, #0
    c46a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    c46e:	f003 b909 	b.w	f684 <DmConnRegister>
    c472:	bf00      	nop
    c474:	100035f0 	.word	0x100035f0
    c478:	000244f4 	.word	0x000244f4
    c47c:	0000c343 	.word	0x0000c343
    c480:	0000c35d 	.word	0x0000c35d
    c484:	0000c2d5 	.word	0x0000c2d5

0000c488 <AttHandler>:
    c488:	4608      	mov	r0, r1
    c48a:	b149      	cbz	r1, c4a0 <AttHandler+0x18>
    c48c:	788b      	ldrb	r3, [r1, #2]
    c48e:	2b1f      	cmp	r3, #31
    c490:	4b04      	ldr	r3, [pc, #16]	; (c4a4 <AttHandler+0x1c>)
    c492:	bf8c      	ite	hi
    c494:	f8d3 3104 	ldrhi.w	r3, [r3, #260]	; 0x104
    c498:	f8d3 3100 	ldrls.w	r3, [r3, #256]	; 0x100
    c49c:	689b      	ldr	r3, [r3, #8]
    c49e:	4718      	bx	r3
    c4a0:	4770      	bx	lr
    c4a2:	bf00      	nop
    c4a4:	100035f0 	.word	0x100035f0

0000c4a8 <AttRegister>:
    c4a8:	4b0a      	ldr	r3, [pc, #40]	; (c4d4 <AttRegister+0x2c>)
    c4aa:	b507      	push	{r0, r1, r2, lr}
    c4ac:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
    c4b0:	f00a fc04 	bl	16cbc <HciGetMaxRxAclLen>
    c4b4:	4b08      	ldr	r3, [pc, #32]	; (c4d8 <AttRegister+0x30>)
    c4b6:	681b      	ldr	r3, [r3, #0]
    c4b8:	889b      	ldrh	r3, [r3, #4]
    c4ba:	3803      	subs	r0, #3
    c4bc:	4298      	cmp	r0, r3
    c4be:	dc06      	bgt.n	c4ce <AttRegister+0x26>
    c4c0:	2200      	movs	r2, #0
    c4c2:	9200      	str	r2, [sp, #0]
    c4c4:	2302      	movs	r3, #2
    c4c6:	2152      	movs	r1, #82	; 0x52
    c4c8:	4610      	mov	r0, r2
    c4ca:	f7ff ff8d 	bl	c3e8 <attExecCallback>
    c4ce:	b003      	add	sp, #12
    c4d0:	f85d fb04 	ldr.w	pc, [sp], #4
    c4d4:	100035f0 	.word	0x100035f0
    c4d8:	10002ba4 	.word	0x10002ba4

0000c4dc <AttConnRegister>:
    c4dc:	4b01      	ldr	r3, [pc, #4]	; (c4e4 <AttConnRegister+0x8>)
    c4de:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
    c4e2:	4770      	bx	lr
    c4e4:	100035f0 	.word	0x100035f0

0000c4e8 <AttGetMtu>:
    c4e8:	4b02      	ldr	r3, [pc, #8]	; (c4f4 <AttGetMtu+0xc>)
    c4ea:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    c4ee:	f830 0c06 	ldrh.w	r0, [r0, #-6]
    c4f2:	4770      	bx	lr
    c4f4:	100035f0 	.word	0x100035f0

0000c4f8 <AttMsgAlloc>:
    c4f8:	291b      	cmp	r1, #27
    c4fa:	b508      	push	{r3, lr}
    c4fc:	d001      	beq.n	c502 <AttMsgAlloc+0xa>
    c4fe:	291d      	cmp	r1, #29
    c500:	d106      	bne.n	c510 <AttMsgAlloc+0x18>
    c502:	300b      	adds	r0, #11
    c504:	b280      	uxth	r0, r0
    c506:	f7ff ff9d 	bl	c444 <attMsgAlloc>
    c50a:	b100      	cbz	r0, c50e <AttMsgAlloc+0x16>
    c50c:	300b      	adds	r0, #11
    c50e:	bd08      	pop	{r3, pc}
    c510:	2000      	movs	r0, #0
    c512:	e7fc      	b.n	c50e <AttMsgAlloc+0x16>

0000c514 <AttMsgFree>:
    c514:	291b      	cmp	r1, #27
    c516:	d005      	beq.n	c524 <AttMsgFree+0x10>
    c518:	291d      	cmp	r1, #29
    c51a:	d003      	beq.n	c524 <AttMsgFree+0x10>
    c51c:	2300      	movs	r3, #0
    c51e:	1ac0      	subs	r0, r0, r3
    c520:	f00c be24 	b.w	1916c <WsfMsgFree>
    c524:	230b      	movs	r3, #11
    c526:	e7fa      	b.n	c51e <AttMsgFree+0xa>

0000c528 <attcDiscDescriptors>:
    c528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c52a:	680e      	ldr	r6, [r1, #0]
    c52c:	7c8d      	ldrb	r5, [r1, #18]
    c52e:	2200      	movs	r2, #0
    c530:	460b      	mov	r3, r1
    c532:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    c536:	4611      	mov	r1, r2
    c538:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
    c53c:	4696      	mov	lr, r2
    c53e:	7c9c      	ldrb	r4, [r3, #18]
    c540:	7b1f      	ldrb	r7, [r3, #12]
    c542:	42a7      	cmp	r7, r4
    c544:	d809      	bhi.n	c55a <attcDiscDescriptors+0x32>
    c546:	7c9c      	ldrb	r4, [r3, #18]
    c548:	7b1d      	ldrb	r5, [r3, #12]
    c54a:	42a5      	cmp	r5, r4
    c54c:	d12e      	bne.n	c5ac <attcDiscDescriptors+0x84>
    c54e:	2200      	movs	r2, #0
    c550:	b2d1      	uxtb	r1, r2
    c552:	428c      	cmp	r4, r1
    c554:	d81f      	bhi.n	c596 <attcDiscDescriptors+0x6e>
    c556:	2000      	movs	r0, #0
    c558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c55a:	682f      	ldr	r7, [r5, #0]
    c55c:	793f      	ldrb	r7, [r7, #4]
    c55e:	077f      	lsls	r7, r7, #29
    c560:	d516      	bpl.n	c590 <attcDiscDescriptors+0x68>
    c562:	685f      	ldr	r7, [r3, #4]
    c564:	4464      	add	r4, ip
    c566:	0062      	lsls	r2, r4, #1
    c568:	f837 1014 	ldrh.w	r1, [r7, r4, lsl #1]
    c56c:	1c94      	adds	r4, r2, #2
    c56e:	3101      	adds	r1, #1
    c570:	5b3a      	ldrh	r2, [r7, r4]
    c572:	f827 e004 	strh.w	lr, [r7, r4]
    c576:	b289      	uxth	r1, r1
    c578:	4291      	cmp	r1, r2
    c57a:	d9e4      	bls.n	c546 <attcDiscDescriptors+0x1e>
    c57c:	7c9c      	ldrb	r4, [r3, #18]
    c57e:	7b1f      	ldrb	r7, [r3, #12]
    c580:	3401      	adds	r4, #1
    c582:	b2e4      	uxtb	r4, r4
    c584:	42bc      	cmp	r4, r7
    c586:	d301      	bcc.n	c58c <attcDiscDescriptors+0x64>
    c588:	749c      	strb	r4, [r3, #18]
    c58a:	e7d8      	b.n	c53e <attcDiscDescriptors+0x16>
    c58c:	3504      	adds	r5, #4
    c58e:	e7f7      	b.n	c580 <attcDiscDescriptors+0x58>
    c590:	3504      	adds	r5, #4
    c592:	3401      	adds	r4, #1
    c594:	e7f8      	b.n	c588 <attcDiscDescriptors+0x60>
    c596:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
    c59a:	7909      	ldrb	r1, [r1, #4]
    c59c:	0789      	lsls	r1, r1, #30
    c59e:	d503      	bpl.n	c5a8 <attcDiscDescriptors+0x80>
    c5a0:	6859      	ldr	r1, [r3, #4]
    c5a2:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
    c5a6:	b131      	cbz	r1, c5b6 <attcDiscDescriptors+0x8e>
    c5a8:	3201      	adds	r2, #1
    c5aa:	e7d1      	b.n	c550 <attcDiscDescriptors+0x28>
    c5ac:	2301      	movs	r3, #1
    c5ae:	f000 fd13 	bl	cfd8 <AttcFindInfoReq>
    c5b2:	2078      	movs	r0, #120	; 0x78
    c5b4:	e7d0      	b.n	c558 <attcDiscDescriptors+0x30>
    c5b6:	2076      	movs	r0, #118	; 0x76
    c5b8:	e7ce      	b.n	c558 <attcDiscDescriptors+0x30>

0000c5ba <attcDiscConfigNext>:
    c5ba:	b570      	push	{r4, r5, r6, lr}
    c5bc:	460a      	mov	r2, r1
    c5be:	7c89      	ldrb	r1, [r1, #18]
    c5c0:	6893      	ldr	r3, [r2, #8]
    c5c2:	7b55      	ldrb	r5, [r2, #13]
    c5c4:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    c5c8:	7c94      	ldrb	r4, [r2, #18]
    c5ca:	42ac      	cmp	r4, r5
    c5cc:	d301      	bcc.n	c5d2 <attcDiscConfigNext+0x18>
    c5ce:	2000      	movs	r0, #0
    c5d0:	e00a      	b.n	c5e8 <attcDiscConfigNext+0x2e>
    c5d2:	795e      	ldrb	r6, [r3, #5]
    c5d4:	6851      	ldr	r1, [r2, #4]
    c5d6:	f831 1016 	ldrh.w	r1, [r1, r6, lsl #1]
    c5da:	b149      	cbz	r1, c5f0 <attcDiscConfigNext+0x36>
    c5dc:	791a      	ldrb	r2, [r3, #4]
    c5de:	b122      	cbz	r2, c5ea <attcDiscConfigNext+0x30>
    c5e0:	681b      	ldr	r3, [r3, #0]
    c5e2:	f000 fd29 	bl	d038 <AttcWriteReq>
    c5e6:	2078      	movs	r0, #120	; 0x78
    c5e8:	bd70      	pop	{r4, r5, r6, pc}
    c5ea:	f000 fd0d 	bl	d008 <AttcReadReq>
    c5ee:	e7fa      	b.n	c5e6 <attcDiscConfigNext+0x2c>
    c5f0:	3401      	adds	r4, #1
    c5f2:	7494      	strb	r4, [r2, #18]
    c5f4:	3308      	adds	r3, #8
    c5f6:	e7e7      	b.n	c5c8 <attcDiscConfigNext+0xe>

0000c5f8 <attcUuidCmp>:
    c5f8:	b508      	push	{r3, lr}
    c5fa:	7903      	ldrb	r3, [r0, #4]
    c5fc:	f003 0301 	and.w	r3, r3, #1
    c600:	429a      	cmp	r2, r3
    c602:	d10a      	bne.n	c61a <attcUuidCmp+0x22>
    c604:	2a00      	cmp	r2, #0
    c606:	bf0c      	ite	eq
    c608:	2202      	moveq	r2, #2
    c60a:	2210      	movne	r2, #16
    c60c:	6800      	ldr	r0, [r0, #0]
    c60e:	f013 fe57 	bl	202c0 <memcmp>
    c612:	fab0 f080 	clz	r0, r0
    c616:	0940      	lsrs	r0, r0, #5
    c618:	bd08      	pop	{r3, pc}
    c61a:	2a01      	cmp	r2, #1
    c61c:	d105      	bne.n	c62a <attcUuidCmp+0x32>
    c61e:	b923      	cbnz	r3, c62a <attcUuidCmp+0x32>
    c620:	6800      	ldr	r0, [r0, #0]
    c622:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    c626:	f7ff becf 	b.w	c3c8 <attUuidCmp16to128>
    c62a:	2000      	movs	r0, #0
    c62c:	e7f4      	b.n	c618 <attcUuidCmp+0x20>

0000c62e <AttcDiscService>:
    c62e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    c630:	2100      	movs	r1, #0
    c632:	e9cd 3101 	strd	r3, r1, [sp, #4]
    c636:	9200      	str	r2, [sp, #0]
    c638:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    c63c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    c640:	2101      	movs	r1, #1
    c642:	f000 fd87 	bl	d154 <AttcFindByTypeValueReq>
    c646:	b005      	add	sp, #20
    c648:	f85d fb04 	ldr.w	pc, [sp], #4

0000c64c <AttcDiscServiceCmpl>:
    c64c:	b510      	push	{r4, lr}
    c64e:	788b      	ldrb	r3, [r1, #2]
    c650:	2b03      	cmp	r3, #3
    c652:	d110      	bne.n	c676 <AttcDiscServiceCmpl+0x2a>
    c654:	78cb      	ldrb	r3, [r1, #3]
    c656:	b963      	cbnz	r3, c672 <AttcDiscServiceCmpl+0x26>
    c658:	890a      	ldrh	r2, [r1, #8]
    c65a:	b172      	cbz	r2, c67a <AttcDiscServiceCmpl+0x2e>
    c65c:	684a      	ldr	r2, [r1, #4]
    c65e:	7854      	ldrb	r4, [r2, #1]
    c660:	7811      	ldrb	r1, [r2, #0]
    c662:	eb01 2104 	add.w	r1, r1, r4, lsl #8
    c666:	81c1      	strh	r1, [r0, #14]
    c668:	78d1      	ldrb	r1, [r2, #3]
    c66a:	7892      	ldrb	r2, [r2, #2]
    c66c:	eb02 2201 	add.w	r2, r2, r1, lsl #8
    c670:	8202      	strh	r2, [r0, #16]
    c672:	4618      	mov	r0, r3
    c674:	bd10      	pop	{r4, pc}
    c676:	2375      	movs	r3, #117	; 0x75
    c678:	e7fb      	b.n	c672 <AttcDiscServiceCmpl+0x26>
    c67a:	230a      	movs	r3, #10
    c67c:	e7f9      	b.n	c672 <AttcDiscServiceCmpl+0x26>

0000c67e <AttcDiscCharStart>:
    c67e:	b507      	push	{r0, r1, r2, lr}
    c680:	f44f 437f 	mov.w	r3, #65280	; 0xff00
    c684:	824b      	strh	r3, [r1, #18]
    c686:	2301      	movs	r3, #1
    c688:	8a0a      	ldrh	r2, [r1, #16]
    c68a:	89c9      	ldrh	r1, [r1, #14]
    c68c:	9301      	str	r3, [sp, #4]
    c68e:	4b04      	ldr	r3, [pc, #16]	; (c6a0 <AttcDiscCharStart+0x22>)
    c690:	9300      	str	r3, [sp, #0]
    c692:	2302      	movs	r3, #2
    c694:	f000 fd8e 	bl	d1b4 <AttcReadByTypeReq>
    c698:	b003      	add	sp, #12
    c69a:	f85d fb04 	ldr.w	pc, [sp], #4
    c69e:	bf00      	nop
    c6a0:	000245e0 	.word	0x000245e0

0000c6a4 <AttcDiscCharCmpl>:
    c6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c6a8:	788b      	ldrb	r3, [r1, #2]
    c6aa:	2b04      	cmp	r3, #4
    c6ac:	b085      	sub	sp, #20
    c6ae:	4604      	mov	r4, r0
    c6b0:	460d      	mov	r5, r1
    c6b2:	d004      	beq.n	c6be <AttcDiscCharCmpl+0x1a>
    c6b4:	2b02      	cmp	r3, #2
    c6b6:	f000 8089 	beq.w	c7cc <AttcDiscCharCmpl+0x128>
    c6ba:	2575      	movs	r5, #117	; 0x75
    c6bc:	e00b      	b.n	c6d6 <AttcDiscCharCmpl+0x32>
    c6be:	f891 a003 	ldrb.w	sl, [r1, #3]
    c6c2:	f1ba 0f00 	cmp.w	sl, #0
    c6c6:	d00a      	beq.n	c6de <AttcDiscCharCmpl+0x3a>
    c6c8:	78eb      	ldrb	r3, [r5, #3]
    c6ca:	2b00      	cmp	r3, #0
    c6cc:	d16b      	bne.n	c7a6 <AttcDiscCharCmpl+0x102>
    c6ce:	7b2b      	ldrb	r3, [r5, #12]
    c6d0:	2b00      	cmp	r3, #0
    c6d2:	d068      	beq.n	c7a6 <AttcDiscCharCmpl+0x102>
    c6d4:	2578      	movs	r5, #120	; 0x78
    c6d6:	4628      	mov	r0, r5
    c6d8:	b005      	add	sp, #20
    c6da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c6de:	684b      	ldr	r3, [r1, #4]
    c6e0:	f893 b000 	ldrb.w	fp, [r3]
    c6e4:	f1bb 0f07 	cmp.w	fp, #7
    c6e8:	d058      	beq.n	c79c <AttcDiscCharCmpl+0xf8>
    c6ea:	f1bb 0f15 	cmp.w	fp, #21
    c6ee:	d053      	beq.n	c798 <AttcDiscCharCmpl+0xf4>
    c6f0:	2573      	movs	r5, #115	; 0x73
    c6f2:	7b22      	ldrb	r2, [r4, #12]
    c6f4:	6860      	ldr	r0, [r4, #4]
    c6f6:	0052      	lsls	r2, r2, #1
    c6f8:	2100      	movs	r1, #0
    c6fa:	f013 fe77 	bl	203ec <memset>
    c6fe:	e7ea      	b.n	c6d6 <AttcDiscCharCmpl+0x32>
    c700:	7872      	ldrb	r2, [r6, #1]
    c702:	7833      	ldrb	r3, [r6, #0]
    c704:	78f7      	ldrb	r7, [r6, #3]
    c706:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    c70a:	7932      	ldrb	r2, [r6, #4]
    c70c:	eb07 2702 	add.w	r7, r7, r2, lsl #8
    c710:	7ce2      	ldrb	r2, [r4, #19]
    c712:	2aff      	cmp	r2, #255	; 0xff
    c714:	b29b      	uxth	r3, r3
    c716:	b2bf      	uxth	r7, r7
    c718:	d006      	beq.n	c728 <AttcDiscCharCmpl+0x84>
    c71a:	6861      	ldr	r1, [r4, #4]
    c71c:	1e58      	subs	r0, r3, #1
    c71e:	f821 0012 	strh.w	r0, [r1, r2, lsl #1]
    c722:	f04f 32ff 	mov.w	r2, #4294967295
    c726:	74e2      	strb	r2, [r4, #19]
    c728:	42bb      	cmp	r3, r7
    c72a:	d304      	bcc.n	c736 <AttcDiscCharCmpl+0x92>
    c72c:	445e      	add	r6, fp
    c72e:	9b01      	ldr	r3, [sp, #4]
    c730:	429e      	cmp	r6, r3
    c732:	d3e5      	bcc.n	c700 <AttcDiscCharCmpl+0x5c>
    c734:	e7c8      	b.n	c6c8 <AttcDiscCharCmpl+0x24>
    c736:	8a23      	ldrh	r3, [r4, #16]
    c738:	42bb      	cmp	r3, r7
    c73a:	d3f7      	bcc.n	c72c <AttcDiscCharCmpl+0x88>
    c73c:	1d72      	adds	r2, r6, #5
    c73e:	6823      	ldr	r3, [r4, #0]
    c740:	9202      	str	r2, [sp, #8]
    c742:	f04f 0900 	mov.w	r9, #0
    c746:	7b22      	ldrb	r2, [r4, #12]
    c748:	fa5f f889 	uxtb.w	r8, r9
    c74c:	4542      	cmp	r2, r8
    c74e:	d9ed      	bls.n	c72c <AttcDiscCharCmpl+0x88>
    c750:	f108 0201 	add.w	r2, r8, #1
    c754:	b2d2      	uxtb	r2, r2
    c756:	9200      	str	r2, [sp, #0]
    c758:	6862      	ldr	r2, [r4, #4]
    c75a:	f832 2018 	ldrh.w	r2, [r2, r8, lsl #1]
    c75e:	b9c2      	cbnz	r2, c792 <AttcDiscCharCmpl+0xee>
    c760:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
    c764:	9902      	ldr	r1, [sp, #8]
    c766:	9303      	str	r3, [sp, #12]
    c768:	4652      	mov	r2, sl
    c76a:	f7ff ff45 	bl	c5f8 <attcUuidCmp>
    c76e:	9b03      	ldr	r3, [sp, #12]
    c770:	b178      	cbz	r0, c792 <AttcDiscCharCmpl+0xee>
    c772:	6862      	ldr	r2, [r4, #4]
    c774:	f822 7018 	strh.w	r7, [r2, r8, lsl #1]
    c778:	7b22      	ldrb	r2, [r4, #12]
    c77a:	3a01      	subs	r2, #1
    c77c:	4590      	cmp	r8, r2
    c77e:	da08      	bge.n	c792 <AttcDiscCharCmpl+0xee>
    c780:	eb03 0289 	add.w	r2, r3, r9, lsl #2
    c784:	6852      	ldr	r2, [r2, #4]
    c786:	7912      	ldrb	r2, [r2, #4]
    c788:	0752      	lsls	r2, r2, #29
    c78a:	bf44      	itt	mi
    c78c:	f89d 2000 	ldrbmi.w	r2, [sp]
    c790:	74e2      	strbmi	r2, [r4, #19]
    c792:	f109 0901 	add.w	r9, r9, #1
    c796:	e7d6      	b.n	c746 <AttcDiscCharCmpl+0xa2>
    c798:	f04f 0a01 	mov.w	sl, #1
    c79c:	892a      	ldrh	r2, [r5, #8]
    c79e:	1c5e      	adds	r6, r3, #1
    c7a0:	4413      	add	r3, r2
    c7a2:	9301      	str	r3, [sp, #4]
    c7a4:	e7c3      	b.n	c72e <AttcDiscCharCmpl+0x8a>
    c7a6:	7ce3      	ldrb	r3, [r4, #19]
    c7a8:	2bff      	cmp	r3, #255	; 0xff
    c7aa:	bf1e      	ittt	ne
    c7ac:	6862      	ldrne	r2, [r4, #4]
    c7ae:	8a21      	ldrhne	r1, [r4, #16]
    c7b0:	f822 1013 	strhne.w	r1, [r2, r3, lsl #1]
    c7b4:	2300      	movs	r3, #0
    c7b6:	74a3      	strb	r3, [r4, #18]
    c7b8:	7828      	ldrb	r0, [r5, #0]
    c7ba:	4621      	mov	r1, r4
    c7bc:	f7ff feb4 	bl	c528 <attcDiscDescriptors>
    c7c0:	4605      	mov	r5, r0
    c7c2:	2800      	cmp	r0, #0
    c7c4:	d087      	beq.n	c6d6 <AttcDiscCharCmpl+0x32>
    c7c6:	2878      	cmp	r0, #120	; 0x78
    c7c8:	d193      	bne.n	c6f2 <AttcDiscCharCmpl+0x4e>
    c7ca:	e783      	b.n	c6d4 <AttcDiscCharCmpl+0x30>
    c7cc:	f891 9003 	ldrb.w	r9, [r1, #3]
    c7d0:	f1b9 0f00 	cmp.w	r9, #0
    c7d4:	d014      	beq.n	c800 <AttcDiscCharCmpl+0x15c>
    c7d6:	78eb      	ldrb	r3, [r5, #3]
    c7d8:	b91b      	cbnz	r3, c7e2 <AttcDiscCharCmpl+0x13e>
    c7da:	7b2b      	ldrb	r3, [r5, #12]
    c7dc:	2b00      	cmp	r3, #0
    c7de:	f47f af79 	bne.w	c6d4 <AttcDiscCharCmpl+0x30>
    c7e2:	7ca3      	ldrb	r3, [r4, #18]
    c7e4:	6822      	ldr	r2, [r4, #0]
    c7e6:	7b20      	ldrb	r0, [r4, #12]
    c7e8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    c7ec:	3301      	adds	r3, #1
    c7ee:	b2db      	uxtb	r3, r3
    c7f0:	4283      	cmp	r3, r0
    c7f2:	d0e0      	beq.n	c7b6 <AttcDiscCharCmpl+0x112>
    c7f4:	f852 1f04 	ldr.w	r1, [r2, #4]!
    c7f8:	7909      	ldrb	r1, [r1, #4]
    c7fa:	0749      	lsls	r1, r1, #29
    c7fc:	d4f6      	bmi.n	c7ec <AttcDiscCharCmpl+0x148>
    c7fe:	e7da      	b.n	c7b6 <AttcDiscCharCmpl+0x112>
    c800:	684b      	ldr	r3, [r1, #4]
    c802:	781a      	ldrb	r2, [r3, #0]
    c804:	2a01      	cmp	r2, #1
    c806:	d037      	beq.n	c878 <AttcDiscCharCmpl+0x1d4>
    c808:	2a02      	cmp	r2, #2
    c80a:	f47f af71 	bne.w	c6f0 <AttcDiscCharCmpl+0x4c>
    c80e:	f04f 0901 	mov.w	r9, #1
    c812:	f04f 0b12 	mov.w	fp, #18
    c816:	e031      	b.n	c87c <AttcDiscCharCmpl+0x1d8>
    c818:	7ca6      	ldrb	r6, [r4, #18]
    c81a:	f817 3c02 	ldrb.w	r3, [r7, #-2]
    c81e:	9300      	str	r3, [sp, #0]
    c820:	ea4f 0886 	mov.w	r8, r6, lsl #2
    c824:	6823      	ldr	r3, [r4, #0]
    c826:	f817 ac01 	ldrb.w	sl, [r7, #-1]
    c82a:	f1a8 0804 	sub.w	r8, r8, #4
    c82e:	4498      	add	r8, r3
    c830:	7b23      	ldrb	r3, [r4, #12]
    c832:	42b3      	cmp	r3, r6
    c834:	d917      	bls.n	c866 <AttcDiscCharCmpl+0x1c2>
    c836:	f858 0f04 	ldr.w	r0, [r8, #4]!
    c83a:	7903      	ldrb	r3, [r0, #4]
    c83c:	075b      	lsls	r3, r3, #29
    c83e:	d512      	bpl.n	c866 <AttcDiscCharCmpl+0x1c2>
    c840:	b232      	sxth	r2, r6
    c842:	6861      	ldr	r1, [r4, #4]
    c844:	0053      	lsls	r3, r2, #1
    c846:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
    c84a:	b992      	cbnz	r2, c872 <AttcDiscCharCmpl+0x1ce>
    c84c:	464a      	mov	r2, r9
    c84e:	4639      	mov	r1, r7
    c850:	9302      	str	r3, [sp, #8]
    c852:	f7ff fed1 	bl	c5f8 <attcUuidCmp>
    c856:	9b02      	ldr	r3, [sp, #8]
    c858:	b158      	cbz	r0, c872 <AttcDiscCharCmpl+0x1ce>
    c85a:	9900      	ldr	r1, [sp, #0]
    c85c:	6862      	ldr	r2, [r4, #4]
    c85e:	eb01 2a0a 	add.w	sl, r1, sl, lsl #8
    c862:	f822 a003 	strh.w	sl, [r2, r3]
    c866:	445f      	add	r7, fp
    c868:	9a01      	ldr	r2, [sp, #4]
    c86a:	1ebb      	subs	r3, r7, #2
    c86c:	4293      	cmp	r3, r2
    c86e:	d3d3      	bcc.n	c818 <AttcDiscCharCmpl+0x174>
    c870:	e7b1      	b.n	c7d6 <AttcDiscCharCmpl+0x132>
    c872:	3601      	adds	r6, #1
    c874:	b2f6      	uxtb	r6, r6
    c876:	e7db      	b.n	c830 <AttcDiscCharCmpl+0x18c>
    c878:	f04f 0b04 	mov.w	fp, #4
    c87c:	892a      	ldrh	r2, [r5, #8]
    c87e:	1cdf      	adds	r7, r3, #3
    c880:	4413      	add	r3, r2
    c882:	9301      	str	r3, [sp, #4]
    c884:	e7f0      	b.n	c868 <AttcDiscCharCmpl+0x1c4>

0000c886 <AttcDiscConfigStart>:
    c886:	2200      	movs	r2, #0
    c888:	748a      	strb	r2, [r1, #18]
    c88a:	e696      	b.n	c5ba <attcDiscConfigNext>

0000c88c <AttcDiscConfigCmpl>:
    c88c:	7c8b      	ldrb	r3, [r1, #18]
    c88e:	3301      	adds	r3, #1
    c890:	748b      	strb	r3, [r1, #18]
    c892:	e692      	b.n	c5ba <attcDiscConfigNext>

0000c894 <AttcDiscConfigResume>:
    c894:	e691      	b.n	c5ba <attcDiscConfigNext>
    c896:	bf00      	nop

0000c898 <attcSendSimpleReq>:
    c898:	b570      	push	{r4, r5, r6, lr}
    c89a:	2300      	movs	r3, #0
    c89c:	6945      	ldr	r5, [r0, #20]
    c89e:	6143      	str	r3, [r0, #20]
    c8a0:	7c83      	ldrb	r3, [r0, #18]
    c8a2:	2b0a      	cmp	r3, #10
    c8a4:	4604      	mov	r4, r0
    c8a6:	d008      	beq.n	c8ba <attcSendSimpleReq+0x22>
    c8a8:	2310      	movs	r3, #16
    c8aa:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    c8ae:	4b07      	ldr	r3, [pc, #28]	; (c8cc <attcSendSimpleReq+0x34>)
    c8b0:	681b      	ldr	r3, [r3, #0]
    c8b2:	3024      	adds	r0, #36	; 0x24
    c8b4:	7999      	ldrb	r1, [r3, #6]
    c8b6:	f00c fdf3 	bl	194a0 <WsfTimerStartSec>
    c8ba:	6821      	ldr	r1, [r4, #0]
    c8bc:	882a      	ldrh	r2, [r5, #0]
    c8be:	8b09      	ldrh	r1, [r1, #24]
    c8c0:	462b      	mov	r3, r5
    c8c2:	2004      	movs	r0, #4
    c8c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c8c8:	f003 bf46 	b.w	10758 <L2cDataReq>
    c8cc:	10002ba4 	.word	0x10002ba4

0000c8d0 <attcSendReq>:
    c8d0:	7c82      	ldrb	r2, [r0, #18]
    c8d2:	4b02      	ldr	r3, [pc, #8]	; (c8dc <attcSendReq+0xc>)
    c8d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    c8d8:	4718      	bx	r3
    c8da:	bf00      	nop
    c8dc:	00024614 	.word	0x00024614

0000c8e0 <attcSetupReq>:
    c8e0:	b430      	push	{r4, r5}
    c8e2:	460b      	mov	r3, r1
    c8e4:	4604      	mov	r4, r0
    c8e6:	f100 0510 	add.w	r5, r0, #16
    c8ea:	c907      	ldmia	r1, {r0, r1, r2}
    c8ec:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    c8f0:	685a      	ldr	r2, [r3, #4]
    c8f2:	e892 0003 	ldmia.w	r2, {r0, r1}
    c8f6:	f104 031c 	add.w	r3, r4, #28
    c8fa:	e883 0003 	stmia.w	r3, {r0, r1}
    c8fe:	4620      	mov	r0, r4
    c900:	bc30      	pop	{r4, r5}
    c902:	f7ff bfe5 	b.w	c8d0 <attcSendReq>

0000c906 <attcCcbByConnId>:
    c906:	b510      	push	{r4, lr}
    c908:	4604      	mov	r4, r0
    c90a:	f002 ffe5 	bl	f8d8 <DmConnInUse>
    c90e:	b120      	cbz	r0, c91a <attcCcbByConnId+0x14>
    c910:	4b02      	ldr	r3, [pc, #8]	; (c91c <attcCcbByConnId+0x16>)
    c912:	3c01      	subs	r4, #1
    c914:	2038      	movs	r0, #56	; 0x38
    c916:	fb00 3004 	mla	r0, r0, r4, r3
    c91a:	bd10      	pop	{r4, pc}
    c91c:	10003704 	.word	0x10003704

0000c920 <attcCcbByHandle>:
    c920:	b508      	push	{r3, lr}
    c922:	f002 ffc5 	bl	f8b0 <DmConnIdByHandle>
    c926:	b120      	cbz	r0, c932 <attcCcbByHandle+0x12>
    c928:	4b02      	ldr	r3, [pc, #8]	; (c934 <attcCcbByHandle+0x14>)
    c92a:	3801      	subs	r0, #1
    c92c:	2238      	movs	r2, #56	; 0x38
    c92e:	fb02 3000 	mla	r0, r2, r0, r3
    c932:	bd08      	pop	{r3, pc}
    c934:	10003704 	.word	0x10003704

0000c938 <attcDataCback>:
    c938:	b570      	push	{r4, r5, r6, lr}
    c93a:	460d      	mov	r5, r1
    c93c:	4614      	mov	r4, r2
    c93e:	f7ff ffef 	bl	c920 <attcCcbByHandle>
    c942:	4606      	mov	r6, r0
    c944:	b198      	cbz	r0, c96e <attcDataCback+0x36>
    c946:	7a23      	ldrb	r3, [r4, #8]
    c948:	2b19      	cmp	r3, #25
    c94a:	d805      	bhi.n	c958 <attcDataCback+0x20>
    c94c:	4622      	mov	r2, r4
    c94e:	4629      	mov	r1, r5
    c950:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c954:	f000 ba5e 	b.w	ce14 <attcProcRsp>
    c958:	2b1b      	cmp	r3, #27
    c95a:	d001      	beq.n	c960 <attcDataCback+0x28>
    c95c:	2b1d      	cmp	r3, #29
    c95e:	d106      	bne.n	c96e <attcDataCback+0x36>
    c960:	4622      	mov	r2, r4
    c962:	4629      	mov	r1, r5
    c964:	4630      	mov	r0, r6
    c966:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c96a:	f000 baaf 	b.w	cecc <attcProcInd>
    c96e:	bd70      	pop	{r4, r5, r6, pc}

0000c970 <attcFreePkt>:
    c970:	b510      	push	{r4, lr}
    c972:	4604      	mov	r4, r0
    c974:	6840      	ldr	r0, [r0, #4]
    c976:	b118      	cbz	r0, c980 <attcFreePkt+0x10>
    c978:	f00c fbf8 	bl	1916c <WsfMsgFree>
    c97c:	2300      	movs	r3, #0
    c97e:	6063      	str	r3, [r4, #4]
    c980:	bd10      	pop	{r4, pc}

0000c982 <attcSendMtuReq>:
    c982:	b510      	push	{r4, lr}
    c984:	6803      	ldr	r3, [r0, #0]
    c986:	7f5a      	ldrb	r2, [r3, #29]
    c988:	4604      	mov	r4, r0
    c98a:	b12a      	cbz	r2, c998 <attcSendMtuReq+0x16>
    c98c:	3010      	adds	r0, #16
    c98e:	f7ff ffef 	bl	c970 <attcFreePkt>
    c992:	2300      	movs	r3, #0
    c994:	74a3      	strb	r3, [r4, #18]
    c996:	bd10      	pop	{r4, pc}
    c998:	2201      	movs	r2, #1
    c99a:	775a      	strb	r2, [r3, #29]
    c99c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c9a0:	e77a      	b.n	c898 <attcSendSimpleReq>

0000c9a2 <attcExecCallback>:
    c9a2:	2901      	cmp	r1, #1
    c9a4:	b513      	push	{r0, r1, r4, lr}
    c9a6:	d003      	beq.n	c9b0 <attcExecCallback+0xe>
    c9a8:	2400      	movs	r4, #0
    c9aa:	9400      	str	r4, [sp, #0]
    c9ac:	f7ff fd1c 	bl	c3e8 <attExecCallback>
    c9b0:	b002      	add	sp, #8
    c9b2:	bd10      	pop	{r4, pc}

0000c9b4 <attcSendWriteCmd>:
    c9b4:	b510      	push	{r4, lr}
    c9b6:	4604      	mov	r4, r0
    c9b8:	f7ff ff6e 	bl	c898 <attcSendSimpleReq>
    c9bc:	6820      	ldr	r0, [r4, #0]
    c9be:	8b22      	ldrh	r2, [r4, #24]
    c9c0:	7f00      	ldrb	r0, [r0, #28]
    c9c2:	2300      	movs	r3, #0
    c9c4:	210a      	movs	r1, #10
    c9c6:	f7ff ffec 	bl	c9a2 <attcExecCallback>
    c9ca:	2300      	movs	r3, #0
    c9cc:	74a3      	strb	r3, [r4, #18]
    c9ce:	bd10      	pop	{r4, pc}

0000c9d0 <attcReqClear>:
    c9d0:	b570      	push	{r4, r5, r6, lr}
    c9d2:	4606      	mov	r6, r0
    c9d4:	4608      	mov	r0, r1
    c9d6:	460c      	mov	r4, r1
    c9d8:	4615      	mov	r5, r2
    c9da:	f7ff ffc9 	bl	c970 <attcFreePkt>
    c9de:	6830      	ldr	r0, [r6, #0]
    c9e0:	8922      	ldrh	r2, [r4, #8]
    c9e2:	78a1      	ldrb	r1, [r4, #2]
    c9e4:	7f00      	ldrb	r0, [r0, #28]
    c9e6:	462b      	mov	r3, r5
    c9e8:	f7ff ffdb 	bl	c9a2 <attcExecCallback>
    c9ec:	2300      	movs	r3, #0
    c9ee:	70a3      	strb	r3, [r4, #2]
    c9f0:	bd70      	pop	{r4, r5, r6, pc}

0000c9f2 <attcSendPrepWriteReq>:
    c9f2:	b570      	push	{r4, r5, r6, lr}
    c9f4:	7cc3      	ldrb	r3, [r0, #19]
    c9f6:	8b85      	ldrh	r5, [r0, #28]
    c9f8:	2b01      	cmp	r3, #1
    c9fa:	4604      	mov	r4, r0
    c9fc:	d149      	bne.n	ca92 <attcSendPrepWriteReq+0xa0>
    c9fe:	6803      	ldr	r3, [r0, #0]
    ca00:	8b5b      	ldrh	r3, [r3, #26]
    ca02:	3b05      	subs	r3, #5
    ca04:	429d      	cmp	r5, r3
    ca06:	bfa8      	it	ge
    ca08:	b29d      	uxthge	r5, r3
    ca0a:	f105 000d 	add.w	r0, r5, #13
    ca0e:	b280      	uxth	r0, r0
    ca10:	f7ff fd18 	bl	c444 <attMsgAlloc>
    ca14:	4606      	mov	r6, r0
    ca16:	2800      	cmp	r0, #0
    ca18:	d033      	beq.n	ca82 <attcSendPrepWriteReq+0x90>
    ca1a:	6963      	ldr	r3, [r4, #20]
    ca1c:	4602      	mov	r2, r0
    ca1e:	f103 010c 	add.w	r1, r3, #12
    ca22:	f853 0b04 	ldr.w	r0, [r3], #4
    ca26:	f842 0b04 	str.w	r0, [r2], #4
    ca2a:	428b      	cmp	r3, r1
    ca2c:	d1f9      	bne.n	ca22 <attcSendPrepWriteReq+0x30>
    ca2e:	781b      	ldrb	r3, [r3, #0]
    ca30:	7013      	strb	r3, [r2, #0]
    ca32:	6a21      	ldr	r1, [r4, #32]
    ca34:	462a      	mov	r2, r5
    ca36:	f106 000d 	add.w	r0, r6, #13
    ca3a:	f7ff fb61 	bl	c100 <memcpy>
    ca3e:	6a23      	ldr	r3, [r4, #32]
    ca40:	442b      	add	r3, r5
    ca42:	6223      	str	r3, [r4, #32]
    ca44:	8ba3      	ldrh	r3, [r4, #28]
    ca46:	1b5b      	subs	r3, r3, r5
    ca48:	83a3      	strh	r3, [r4, #28]
    ca4a:	8be3      	ldrh	r3, [r4, #30]
    ca4c:	72f3      	strb	r3, [r6, #11]
    ca4e:	8be3      	ldrh	r3, [r4, #30]
    ca50:	0a1b      	lsrs	r3, r3, #8
    ca52:	7333      	strb	r3, [r6, #12]
    ca54:	8be3      	ldrh	r3, [r4, #30]
    ca56:	442b      	add	r3, r5
    ca58:	83e3      	strh	r3, [r4, #30]
    ca5a:	2310      	movs	r3, #16
    ca5c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    ca60:	4b0e      	ldr	r3, [pc, #56]	; (ca9c <attcSendPrepWriteReq+0xaa>)
    ca62:	681b      	ldr	r3, [r3, #0]
    ca64:	f104 0024 	add.w	r0, r4, #36	; 0x24
    ca68:	7999      	ldrb	r1, [r3, #6]
    ca6a:	f00c fd19 	bl	194a0 <WsfTimerStartSec>
    ca6e:	6821      	ldr	r1, [r4, #0]
    ca70:	1d6a      	adds	r2, r5, #5
    ca72:	4633      	mov	r3, r6
    ca74:	b292      	uxth	r2, r2
    ca76:	8b09      	ldrh	r1, [r1, #24]
    ca78:	2004      	movs	r0, #4
    ca7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ca7e:	f003 be6b 	b.w	10758 <L2cDataReq>
    ca82:	f104 0110 	add.w	r1, r4, #16
    ca86:	4620      	mov	r0, r4
    ca88:	2270      	movs	r2, #112	; 0x70
    ca8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ca8e:	f7ff bf9f 	b.w	c9d0 <attcReqClear>
    ca92:	2300      	movs	r3, #0
    ca94:	6946      	ldr	r6, [r0, #20]
    ca96:	6143      	str	r3, [r0, #20]
    ca98:	e7d7      	b.n	ca4a <attcSendPrepWriteReq+0x58>
    ca9a:	bf00      	nop
    ca9c:	10002ba4 	.word	0x10002ba4

0000caa0 <attcSendContinuingReq>:
    caa0:	b570      	push	{r4, r5, r6, lr}
    caa2:	7cc3      	ldrb	r3, [r0, #19]
    caa4:	6945      	ldr	r5, [r0, #20]
    caa6:	2b01      	cmp	r3, #1
    caa8:	4604      	mov	r4, r0
    caaa:	d12e      	bne.n	cb0a <attcSendContinuingReq+0x6a>
    caac:	8828      	ldrh	r0, [r5, #0]
    caae:	3008      	adds	r0, #8
    cab0:	b280      	uxth	r0, r0
    cab2:	f7ff fcc7 	bl	c444 <attMsgAlloc>
    cab6:	4605      	mov	r5, r0
    cab8:	b1f8      	cbz	r0, cafa <attcSendContinuingReq+0x5a>
    caba:	6961      	ldr	r1, [r4, #20]
    cabc:	880a      	ldrh	r2, [r1, #0]
    cabe:	3208      	adds	r2, #8
    cac0:	f7ff fb1e 	bl	c100 <memcpy>
    cac4:	7ca2      	ldrb	r2, [r4, #18]
    cac6:	7fa3      	ldrb	r3, [r4, #30]
    cac8:	2a06      	cmp	r2, #6
    caca:	d121      	bne.n	cb10 <attcSendContinuingReq+0x70>
    cacc:	72eb      	strb	r3, [r5, #11]
    cace:	8be3      	ldrh	r3, [r4, #30]
    cad0:	0a1b      	lsrs	r3, r3, #8
    cad2:	732b      	strb	r3, [r5, #12]
    cad4:	2310      	movs	r3, #16
    cad6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    cada:	4b11      	ldr	r3, [pc, #68]	; (cb20 <attcSendContinuingReq+0x80>)
    cadc:	681b      	ldr	r3, [r3, #0]
    cade:	f104 0024 	add.w	r0, r4, #36	; 0x24
    cae2:	7999      	ldrb	r1, [r3, #6]
    cae4:	f00c fcdc 	bl	194a0 <WsfTimerStartSec>
    cae8:	6821      	ldr	r1, [r4, #0]
    caea:	882a      	ldrh	r2, [r5, #0]
    caec:	8b09      	ldrh	r1, [r1, #24]
    caee:	462b      	mov	r3, r5
    caf0:	2004      	movs	r0, #4
    caf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    caf6:	f003 be2f 	b.w	10758 <L2cDataReq>
    cafa:	f104 0110 	add.w	r1, r4, #16
    cafe:	4620      	mov	r0, r4
    cb00:	2270      	movs	r2, #112	; 0x70
    cb02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cb06:	f7ff bf63 	b.w	c9d0 <attcReqClear>
    cb0a:	2300      	movs	r3, #0
    cb0c:	6143      	str	r3, [r0, #20]
    cb0e:	e7d9      	b.n	cac4 <attcSendContinuingReq+0x24>
    cb10:	726b      	strb	r3, [r5, #9]
    cb12:	8be3      	ldrh	r3, [r4, #30]
    cb14:	0a1b      	lsrs	r3, r3, #8
    cb16:	72ab      	strb	r3, [r5, #10]
    cb18:	8c23      	ldrh	r3, [r4, #32]
    cb1a:	72eb      	strb	r3, [r5, #11]
    cb1c:	8c23      	ldrh	r3, [r4, #32]
    cb1e:	e7d7      	b.n	cad0 <attcSendContinuingReq+0x30>
    cb20:	10002ba4 	.word	0x10002ba4

0000cb24 <attcConnCback>:
    cb24:	788b      	ldrb	r3, [r1, #2]
    cb26:	2b27      	cmp	r3, #39	; 0x27
    cb28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cb2c:	4605      	mov	r5, r0
    cb2e:	d11a      	bne.n	cb66 <attcConnCback+0x42>
    cb30:	7f00      	ldrb	r0, [r0, #28]
    cb32:	f002 ff49 	bl	f9c8 <DmConnRole>
    cb36:	2800      	cmp	r0, #0
    cb38:	d14c      	bne.n	cbd4 <attcConnCback+0xb0>
    cb3a:	4c27      	ldr	r4, [pc, #156]	; (cbd8 <attcConnCback+0xb4>)
    cb3c:	6823      	ldr	r3, [r4, #0]
    cb3e:	889e      	ldrh	r6, [r3, #4]
    cb40:	f00a f8bc 	bl	16cbc <HciGetMaxRxAclLen>
    cb44:	3804      	subs	r0, #4
    cb46:	4286      	cmp	r6, r0
    cb48:	da08      	bge.n	cb5c <attcConnCback+0x38>
    cb4a:	6823      	ldr	r3, [r4, #0]
    cb4c:	8899      	ldrh	r1, [r3, #4]
    cb4e:	2917      	cmp	r1, #23
    cb50:	d040      	beq.n	cbd4 <attcConnCback+0xb0>
    cb52:	7f28      	ldrb	r0, [r5, #28]
    cb54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cb58:	f000 ba9c 	b.w	d094 <AttcMtuReq>
    cb5c:	f00a f8ae 	bl	16cbc <HciGetMaxRxAclLen>
    cb60:	1f01      	subs	r1, r0, #4
    cb62:	b289      	uxth	r1, r1
    cb64:	e7f3      	b.n	cb4e <attcConnCback+0x2a>
    cb66:	2b28      	cmp	r3, #40	; 0x28
    cb68:	d134      	bne.n	cbd4 <attcConnCback+0xb0>
    cb6a:	78cc      	ldrb	r4, [r1, #3]
    cb6c:	b904      	cbnz	r4, cb70 <attcConnCback+0x4c>
    cb6e:	7a0c      	ldrb	r4, [r1, #8]
    cb70:	7f2e      	ldrb	r6, [r5, #28]
    cb72:	4d1a      	ldr	r5, [pc, #104]	; (cbdc <attcConnCback+0xb8>)
    cb74:	3e01      	subs	r6, #1
    cb76:	2738      	movs	r7, #56	; 0x38
    cb78:	4377      	muls	r7, r6
    cb7a:	eb05 0807 	add.w	r8, r5, r7
    cb7e:	3420      	adds	r4, #32
    cb80:	f898 3012 	ldrb.w	r3, [r8, #18]
    cb84:	b2e4      	uxtb	r4, r4
    cb86:	b15b      	cbz	r3, cba0 <attcConnCback+0x7c>
    cb88:	f107 0024 	add.w	r0, r7, #36	; 0x24
    cb8c:	4428      	add	r0, r5
    cb8e:	f00c fcab 	bl	194e8 <WsfTimerStop>
    cb92:	f107 0110 	add.w	r1, r7, #16
    cb96:	4622      	mov	r2, r4
    cb98:	4429      	add	r1, r5
    cb9a:	4640      	mov	r0, r8
    cb9c:	f7ff ff18 	bl	c9d0 <attcReqClear>
    cba0:	2338      	movs	r3, #56	; 0x38
    cba2:	fb03 5306 	mla	r3, r3, r6, r5
    cba6:	799b      	ldrb	r3, [r3, #6]
    cba8:	b12b      	cbz	r3, cbb6 <attcConnCback+0x92>
    cbaa:	1d39      	adds	r1, r7, #4
    cbac:	4622      	mov	r2, r4
    cbae:	4429      	add	r1, r5
    cbb0:	4640      	mov	r0, r8
    cbb2:	f7ff ff0d 	bl	c9d0 <attcReqClear>
    cbb6:	2338      	movs	r3, #56	; 0x38
    cbb8:	fb03 5606 	mla	r6, r3, r6, r5
    cbbc:	3630      	adds	r6, #48	; 0x30
    cbbe:	2300      	movs	r3, #0
    cbc0:	80b3      	strh	r3, [r6, #4]
    cbc2:	f8d5 31c0 	ldr.w	r3, [r5, #448]	; 0x1c0
    cbc6:	b12b      	cbz	r3, cbd4 <attcConnCback+0xb0>
    cbc8:	4621      	mov	r1, r4
    cbca:	4640      	mov	r0, r8
    cbcc:	685b      	ldr	r3, [r3, #4]
    cbce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cbd2:	4718      	bx	r3
    cbd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cbd8:	10002ba4 	.word	0x10002ba4
    cbdc:	10003704 	.word	0x10003704

0000cbe0 <attcMsgCback>:
    cbe0:	b570      	push	{r4, r5, r6, lr}
    cbe2:	4605      	mov	r5, r0
    cbe4:	7800      	ldrb	r0, [r0, #0]
    cbe6:	f7ff fe8e 	bl	c906 <attcCcbByConnId>
    cbea:	78ab      	ldrb	r3, [r5, #2]
    cbec:	4604      	mov	r4, r0
    cbee:	b938      	cbnz	r0, cc00 <attcMsgCback+0x20>
    cbf0:	3b01      	subs	r3, #1
    cbf2:	2b0c      	cmp	r3, #12
    cbf4:	d81b      	bhi.n	cc2e <attcMsgCback+0x4e>
    cbf6:	4628      	mov	r0, r5
    cbf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cbfc:	f7ff beb8 	b.w	c970 <attcFreePkt>
    cc00:	2b0c      	cmp	r3, #12
    cc02:	d81a      	bhi.n	cc3a <attcMsgCback+0x5a>
    cc04:	7983      	ldrb	r3, [r0, #6]
    cc06:	b913      	cbnz	r3, cc0e <attcMsgCback+0x2e>
    cc08:	7c83      	ldrb	r3, [r0, #18]
    cc0a:	2b01      	cmp	r3, #1
    cc0c:	d906      	bls.n	cc1c <attcMsgCback+0x3c>
    cc0e:	2272      	movs	r2, #114	; 0x72
    cc10:	4629      	mov	r1, r5
    cc12:	4620      	mov	r0, r4
    cc14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cc18:	f7ff beda 	b.w	c9d0 <attcReqClear>
    cc1c:	d002      	beq.n	cc24 <attcMsgCback+0x44>
    cc1e:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
    cc22:	b12b      	cbz	r3, cc30 <attcMsgCback+0x50>
    cc24:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    cc28:	3404      	adds	r4, #4
    cc2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    cc2e:	bd70      	pop	{r4, r5, r6, pc}
    cc30:	4629      	mov	r1, r5
    cc32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cc36:	f7ff be53 	b.w	c8e0 <attcSetupReq>
    cc3a:	f1a3 020d 	sub.w	r2, r3, #13
    cc3e:	2a01      	cmp	r2, #1
    cc40:	d809      	bhi.n	cc56 <attcMsgCback+0x76>
    cc42:	4b15      	ldr	r3, [pc, #84]	; (cc98 <attcMsgCback+0xb8>)
    cc44:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
    cc48:	2b00      	cmp	r3, #0
    cc4a:	d0f0      	beq.n	cc2e <attcMsgCback+0x4e>
    cc4c:	4629      	mov	r1, r5
    cc4e:	681b      	ldr	r3, [r3, #0]
    cc50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cc54:	4718      	bx	r3
    cc56:	2b0f      	cmp	r3, #15
    cc58:	d10f      	bne.n	cc7a <attcMsgCback+0x9a>
    cc5a:	7c83      	ldrb	r3, [r0, #18]
    cc5c:	2b01      	cmp	r3, #1
    cc5e:	d906      	bls.n	cc6e <attcMsgCback+0x8e>
    cc60:	3024      	adds	r0, #36	; 0x24
    cc62:	f00c fc41 	bl	194e8 <WsfTimerStop>
    cc66:	2274      	movs	r2, #116	; 0x74
    cc68:	f104 0110 	add.w	r1, r4, #16
    cc6c:	e7d1      	b.n	cc12 <attcMsgCback+0x32>
    cc6e:	7983      	ldrb	r3, [r0, #6]
    cc70:	2b00      	cmp	r3, #0
    cc72:	d0dc      	beq.n	cc2e <attcMsgCback+0x4e>
    cc74:	2274      	movs	r2, #116	; 0x74
    cc76:	1d01      	adds	r1, r0, #4
    cc78:	e7cc      	b.n	cc14 <attcMsgCback+0x34>
    cc7a:	2b10      	cmp	r3, #16
    cc7c:	d1d7      	bne.n	cc2e <attcMsgCback+0x4e>
    cc7e:	7c83      	ldrb	r3, [r0, #18]
    cc80:	2b00      	cmp	r3, #0
    cc82:	d0d4      	beq.n	cc2e <attcMsgCback+0x4e>
    cc84:	2271      	movs	r2, #113	; 0x71
    cc86:	f100 0110 	add.w	r1, r0, #16
    cc8a:	f7ff fea1 	bl	c9d0 <attcReqClear>
    cc8e:	6823      	ldr	r3, [r4, #0]
    cc90:	2201      	movs	r2, #1
    cc92:	77da      	strb	r2, [r3, #31]
    cc94:	e7cb      	b.n	cc2e <attcMsgCback+0x4e>
    cc96:	bf00      	nop
    cc98:	10003704 	.word	0x10003704

0000cc9c <AttcInit>:
    cc9c:	b510      	push	{r4, lr}
    cc9e:	490c      	ldr	r1, [pc, #48]	; (ccd0 <AttcInit+0x34>)
    cca0:	4a0c      	ldr	r2, [pc, #48]	; (ccd4 <AttcInit+0x38>)
    cca2:	f891 0110 	ldrb.w	r0, [r1, #272]	; 0x110
    cca6:	2300      	movs	r3, #0
    cca8:	f8c2 31c0 	str.w	r3, [r2, #448]	; 0x1c0
    ccac:	3238      	adds	r2, #56	; 0x38
    ccae:	eb01 1443 	add.w	r4, r1, r3, lsl #5
    ccb2:	3301      	adds	r3, #1
    ccb4:	2b08      	cmp	r3, #8
    ccb6:	f842 4c38 	str.w	r4, [r2, #-56]
    ccba:	f802 0c0c 	strb.w	r0, [r2, #-12]
    ccbe:	f822 3c0a 	strh.w	r3, [r2, #-10]
    ccc2:	f102 0238 	add.w	r2, r2, #56	; 0x38
    ccc6:	d1f2      	bne.n	ccae <AttcInit+0x12>
    ccc8:	4b03      	ldr	r3, [pc, #12]	; (ccd8 <AttcInit+0x3c>)
    ccca:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
    ccce:	bd10      	pop	{r4, pc}
    ccd0:	100035f0 	.word	0x100035f0
    ccd4:	10003704 	.word	0x10003704
    ccd8:	00024648 	.word	0x00024648

0000ccdc <attcProcErrRsp>:
    ccdc:	7c81      	ldrb	r1, [r0, #18]
    ccde:	7099      	strb	r1, [r3, #2]
    cce0:	1f48      	subs	r0, r1, #5
    cce2:	2801      	cmp	r0, #1
    cce4:	d908      	bls.n	ccf8 <attcProcErrRsp+0x1c>
    cce6:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
    ccea:	2909      	cmp	r1, #9
    ccec:	bf1f      	itttt	ne
    ccee:	7ad0      	ldrbne	r0, [r2, #11]
    ccf0:	7a91      	ldrbne	r1, [r2, #10]
    ccf2:	eb01 2100 	addne.w	r1, r1, r0, lsl #8
    ccf6:	8159      	strhne	r1, [r3, #10]
    ccf8:	7b12      	ldrb	r2, [r2, #12]
    ccfa:	b11a      	cbz	r2, cd04 <attcProcErrRsp+0x28>
    ccfc:	70da      	strb	r2, [r3, #3]
    ccfe:	2200      	movs	r2, #0
    cd00:	811a      	strh	r2, [r3, #8]
    cd02:	4770      	bx	lr
    cd04:	2275      	movs	r2, #117	; 0x75
    cd06:	e7f9      	b.n	ccfc <attcProcErrRsp+0x20>

0000cd08 <attcProcFindOrReadRsp>:
    cd08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    cd0c:	7c87      	ldrb	r7, [r0, #18]
    cd0e:	7a55      	ldrb	r5, [r2, #9]
    cd10:	3108      	adds	r1, #8
    cd12:	2f02      	cmp	r7, #2
    cd14:	4411      	add	r1, r2
    cd16:	f102 020a 	add.w	r2, r2, #10
    cd1a:	d12a      	bne.n	cd72 <attcProcFindOrReadRsp+0x6a>
    cd1c:	2d01      	cmp	r5, #1
    cd1e:	bf14      	ite	ne
    cd20:	2510      	movne	r5, #16
    cd22:	2502      	moveq	r5, #2
    cd24:	f8b0 c01e 	ldrh.w	ip, [r0, #30]
    cd28:	f64f 7eff 	movw	lr, #65535	; 0xffff
    cd2c:	428a      	cmp	r2, r1
    cd2e:	d210      	bcs.n	cd52 <attcProcFindOrReadRsp+0x4a>
    cd30:	7854      	ldrb	r4, [r2, #1]
    cd32:	7816      	ldrb	r6, [r2, #0]
    cd34:	eb06 2604 	add.w	r6, r6, r4, lsl #8
    cd38:	b2b6      	uxth	r6, r6
    cd3a:	b146      	cbz	r6, cd4e <attcProcFindOrReadRsp+0x46>
    cd3c:	f1bc 0f00 	cmp.w	ip, #0
    cd40:	d005      	beq.n	cd4e <attcProcFindOrReadRsp+0x46>
    cd42:	45b4      	cmp	ip, r6
    cd44:	d803      	bhi.n	cd4e <attcProcFindOrReadRsp+0x46>
    cd46:	f8b0 8020 	ldrh.w	r8, [r0, #32]
    cd4a:	45b0      	cmp	r8, r6
    cd4c:	d217      	bcs.n	cd7e <attcProcFindOrReadRsp+0x76>
    cd4e:	2273      	movs	r2, #115	; 0x73
    cd50:	70da      	strb	r2, [r3, #3]
    cd52:	78db      	ldrb	r3, [r3, #3]
    cd54:	b95b      	cbnz	r3, cd6e <attcProcFindOrReadRsp+0x66>
    cd56:	7cc3      	ldrb	r3, [r0, #19]
    cd58:	2b01      	cmp	r3, #1
    cd5a:	d108      	bne.n	cd6e <attcProcFindOrReadRsp+0x66>
    cd5c:	f1bc 0f00 	cmp.w	ip, #0
    cd60:	d003      	beq.n	cd6a <attcProcFindOrReadRsp+0x62>
    cd62:	8c03      	ldrh	r3, [r0, #32]
    cd64:	3301      	adds	r3, #1
    cd66:	459c      	cmp	ip, r3
    cd68:	d129      	bne.n	cdbe <attcProcFindOrReadRsp+0xb6>
    cd6a:	2300      	movs	r3, #0
    cd6c:	74c3      	strb	r3, [r0, #19]
    cd6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    cd72:	2f04      	cmp	r7, #4
    cd74:	bf0c      	ite	eq
    cd76:	3d02      	subeq	r5, #2
    cd78:	3d04      	subne	r5, #4
    cd7a:	b2ed      	uxtb	r5, r5
    cd7c:	e7d2      	b.n	cd24 <attcProcFindOrReadRsp+0x1c>
    cd7e:	2f08      	cmp	r7, #8
    cd80:	d11a      	bne.n	cdb8 <attcProcFindOrReadRsp+0xb0>
    cd82:	f892 9003 	ldrb.w	r9, [r2, #3]
    cd86:	7894      	ldrb	r4, [r2, #2]
    cd88:	eb04 2409 	add.w	r4, r4, r9, lsl #8
    cd8c:	b2a4      	uxth	r4, r4
    cd8e:	3204      	adds	r2, #4
    cd90:	2c00      	cmp	r4, #0
    cd92:	d0dc      	beq.n	cd4e <attcProcFindOrReadRsp+0x46>
    cd94:	42a6      	cmp	r6, r4
    cd96:	d8da      	bhi.n	cd4e <attcProcFindOrReadRsp+0x46>
    cd98:	45a4      	cmp	ip, r4
    cd9a:	d8d8      	bhi.n	cd4e <attcProcFindOrReadRsp+0x46>
    cd9c:	45a0      	cmp	r8, r4
    cd9e:	d3d6      	bcc.n	cd4e <attcProcFindOrReadRsp+0x46>
    cda0:	4574      	cmp	r4, lr
    cda2:	bf18      	it	ne
    cda4:	3401      	addne	r4, #1
    cda6:	442a      	add	r2, r5
    cda8:	bf14      	ite	ne
    cdaa:	fa1f fc84 	uxthne.w	ip, r4
    cdae:	f04f 0c00 	moveq.w	ip, #0
    cdb2:	4291      	cmp	r1, r2
    cdb4:	d2ba      	bcs.n	cd2c <attcProcFindOrReadRsp+0x24>
    cdb6:	e7ca      	b.n	cd4e <attcProcFindOrReadRsp+0x46>
    cdb8:	3202      	adds	r2, #2
    cdba:	4634      	mov	r4, r6
    cdbc:	e7f0      	b.n	cda0 <attcProcFindOrReadRsp+0x98>
    cdbe:	f8a0 c01e 	strh.w	ip, [r0, #30]
    cdc2:	f8a0 c018 	strh.w	ip, [r0, #24]
    cdc6:	e7d2      	b.n	cd6e <attcProcFindOrReadRsp+0x66>

0000cdc8 <attcProcReadRsp>:
    cdc8:	4770      	bx	lr

0000cdca <attcProcWriteRsp>:
    cdca:	2200      	movs	r2, #0
    cdcc:	811a      	strh	r2, [r3, #8]
    cdce:	4770      	bx	lr

0000cdd0 <attcProcMtuRsp>:
    cdd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cdd2:	7a93      	ldrb	r3, [r2, #10]
    cdd4:	7a54      	ldrb	r4, [r2, #9]
    cdd6:	4d0e      	ldr	r5, [pc, #56]	; (ce10 <attcProcMtuRsp+0x40>)
    cdd8:	6806      	ldr	r6, [r0, #0]
    cdda:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    cdde:	b2a4      	uxth	r4, r4
    cde0:	682b      	ldr	r3, [r5, #0]
    cde2:	2c17      	cmp	r4, #23
    cde4:	bf38      	it	cc
    cde6:	2417      	movcc	r4, #23
    cde8:	889f      	ldrh	r7, [r3, #4]
    cdea:	f009 ff67 	bl	16cbc <HciGetMaxRxAclLen>
    cdee:	3804      	subs	r0, #4
    cdf0:	4287      	cmp	r7, r0
    cdf2:	da07      	bge.n	ce04 <attcProcMtuRsp+0x34>
    cdf4:	682b      	ldr	r3, [r5, #0]
    cdf6:	889a      	ldrh	r2, [r3, #4]
    cdf8:	4621      	mov	r1, r4
    cdfa:	4630      	mov	r0, r6
    cdfc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ce00:	f7ff bb0e 	b.w	c420 <attSetMtu>
    ce04:	f009 ff5a 	bl	16cbc <HciGetMaxRxAclLen>
    ce08:	1f02      	subs	r2, r0, #4
    ce0a:	b292      	uxth	r2, r2
    ce0c:	e7f4      	b.n	cdf8 <attcProcMtuRsp+0x28>
    ce0e:	bf00      	nop
    ce10:	10002ba4 	.word	0x10002ba4

0000ce14 <attcProcRsp>:
    ce14:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    ce18:	460f      	mov	r7, r1
    ce1a:	7c81      	ldrb	r1, [r0, #18]
    ce1c:	4604      	mov	r4, r0
    ce1e:	4616      	mov	r6, r2
    ce20:	2900      	cmp	r1, #0
    ce22:	d042      	beq.n	ceaa <attcProcRsp+0x96>
    ce24:	7a13      	ldrb	r3, [r2, #8]
    ce26:	105b      	asrs	r3, r3, #1
    ce28:	b2da      	uxtb	r2, r3
    ce2a:	f88d 2002 	strb.w	r2, [sp, #2]
    ce2e:	b10b      	cbz	r3, ce34 <attcProcRsp+0x20>
    ce30:	4291      	cmp	r1, r2
    ce32:	d13a      	bne.n	ceaa <attcProcRsp+0x96>
    ce34:	f104 0024 	add.w	r0, r4, #36	; 0x24
    ce38:	f00c fb56 	bl	194e8 <WsfTimerStop>
    ce3c:	f106 0309 	add.w	r3, r6, #9
    ce40:	9301      	str	r3, [sp, #4]
    ce42:	1e7b      	subs	r3, r7, #1
    ce44:	f8ad 3008 	strh.w	r3, [sp, #8]
    ce48:	8b23      	ldrh	r3, [r4, #24]
    ce4a:	f89d 2002 	ldrb.w	r2, [sp, #2]
    ce4e:	f8ad 300a 	strh.w	r3, [sp, #10]
    ce52:	4b1c      	ldr	r3, [pc, #112]	; (cec4 <attcProcRsp+0xb0>)
    ce54:	2500      	movs	r5, #0
    ce56:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
    ce5a:	f88d 5003 	strb.w	r5, [sp, #3]
    ce5e:	466b      	mov	r3, sp
    ce60:	4632      	mov	r2, r6
    ce62:	4639      	mov	r1, r7
    ce64:	4620      	mov	r0, r4
    ce66:	47c0      	blx	r8
    ce68:	7ce3      	ldrb	r3, [r4, #19]
    ce6a:	b113      	cbz	r3, ce72 <attcProcRsp+0x5e>
    ce6c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ce70:	b123      	cbz	r3, ce7c <attcProcRsp+0x68>
    ce72:	74a5      	strb	r5, [r4, #18]
    ce74:	f104 0010 	add.w	r0, r4, #16
    ce78:	f7ff fd7a 	bl	c970 <attcFreePkt>
    ce7c:	f89d 3002 	ldrb.w	r3, [sp, #2]
    ce80:	2b01      	cmp	r3, #1
    ce82:	d00a      	beq.n	ce9a <attcProcRsp+0x86>
    ce84:	7ce3      	ldrb	r3, [r4, #19]
    ce86:	f88d 300c 	strb.w	r3, [sp, #12]
    ce8a:	8a23      	ldrh	r3, [r4, #16]
    ce8c:	f8ad 3000 	strh.w	r3, [sp]
    ce90:	4b0d      	ldr	r3, [pc, #52]	; (cec8 <attcProcRsp+0xb4>)
    ce92:	4668      	mov	r0, sp
    ce94:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    ce98:	4798      	blx	r3
    ce9a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    ce9e:	b923      	cbnz	r3, ceaa <attcProcRsp+0x96>
    cea0:	6965      	ldr	r5, [r4, #20]
    cea2:	b12d      	cbz	r5, ceb0 <attcProcRsp+0x9c>
    cea4:	4620      	mov	r0, r4
    cea6:	f7ff fd13 	bl	c8d0 <attcSendReq>
    ceaa:	b004      	add	sp, #16
    ceac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ceb0:	79a3      	ldrb	r3, [r4, #6]
    ceb2:	2b00      	cmp	r3, #0
    ceb4:	d0f9      	beq.n	ceaa <attcProcRsp+0x96>
    ceb6:	1d21      	adds	r1, r4, #4
    ceb8:	4620      	mov	r0, r4
    ceba:	f7ff fd11 	bl	c8e0 <attcSetupReq>
    cebe:	71a5      	strb	r5, [r4, #6]
    cec0:	e7f3      	b.n	ceaa <attcProcRsp+0x96>
    cec2:	bf00      	nop
    cec4:	00024658 	.word	0x00024658
    cec8:	100035f0 	.word	0x100035f0

0000cecc <attcProcInd>:
    cecc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    cece:	7a13      	ldrb	r3, [r2, #8]
    ced0:	4604      	mov	r4, r0
    ced2:	105b      	asrs	r3, r3, #1
    ced4:	7a90      	ldrb	r0, [r2, #10]
    ced6:	f88d 3002 	strb.w	r3, [sp, #2]
    ceda:	320b      	adds	r2, #11
    cedc:	f812 3c02 	ldrb.w	r3, [r2, #-2]
    cee0:	9201      	str	r2, [sp, #4]
    cee2:	6822      	ldr	r2, [r4, #0]
    cee4:	eb03 2300 	add.w	r3, r3, r0, lsl #8
    cee8:	7f12      	ldrb	r2, [r2, #28]
    ceea:	f8ad 2000 	strh.w	r2, [sp]
    ceee:	b29b      	uxth	r3, r3
    cef0:	2200      	movs	r2, #0
    cef2:	3903      	subs	r1, #3
    cef4:	f8ad 300a 	strh.w	r3, [sp, #10]
    cef8:	f8ad 1008 	strh.w	r1, [sp, #8]
    cefc:	f88d 2003 	strb.w	r2, [sp, #3]
    cf00:	f88d 200c 	strb.w	r2, [sp, #12]
    cf04:	b123      	cbz	r3, cf10 <attcProcInd+0x44>
    cf06:	4b0f      	ldr	r3, [pc, #60]	; (cf44 <attcProcInd+0x78>)
    cf08:	4668      	mov	r0, sp
    cf0a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    cf0e:	4798      	blx	r3
    cf10:	f89d 3002 	ldrb.w	r3, [sp, #2]
    cf14:	2b0e      	cmp	r3, #14
    cf16:	d10f      	bne.n	cf38 <attcProcInd+0x6c>
    cf18:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    cf1c:	b973      	cbnz	r3, cf3c <attcProcInd+0x70>
    cf1e:	2009      	movs	r0, #9
    cf20:	f7ff fa90 	bl	c444 <attMsgAlloc>
    cf24:	4603      	mov	r3, r0
    cf26:	b138      	cbz	r0, cf38 <attcProcInd+0x6c>
    cf28:	221e      	movs	r2, #30
    cf2a:	7202      	strb	r2, [r0, #8]
    cf2c:	6821      	ldr	r1, [r4, #0]
    cf2e:	2201      	movs	r2, #1
    cf30:	8b09      	ldrh	r1, [r1, #24]
    cf32:	2004      	movs	r0, #4
    cf34:	f003 fc10 	bl	10758 <L2cDataReq>
    cf38:	b004      	add	sp, #16
    cf3a:	bd10      	pop	{r4, pc}
    cf3c:	2301      	movs	r3, #1
    cf3e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    cf42:	e7f9      	b.n	cf38 <attcProcInd+0x6c>
    cf44:	100035f0 	.word	0x100035f0

0000cf48 <attcSendMsg>:
    cf48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cf4c:	4605      	mov	r5, r0
    cf4e:	460f      	mov	r7, r1
    cf50:	4616      	mov	r6, r2
    cf52:	461c      	mov	r4, r3
    cf54:	f89d 8020 	ldrb.w	r8, [sp, #32]
    cf58:	f007 fc94 	bl	14884 <WsfTaskLock>
    cf5c:	4628      	mov	r0, r5
    cf5e:	f7ff fcd2 	bl	c906 <attcCcbByConnId>
    cf62:	b920      	cbnz	r0, cf6e <attcSendMsg+0x26>
    cf64:	f007 fc94 	bl	14890 <WsfTaskUnlock>
    cf68:	bb7c      	cbnz	r4, cfca <attcSendMsg+0x82>
    cf6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cf6e:	6803      	ldr	r3, [r0, #0]
    cf70:	f8b3 901a 	ldrh.w	r9, [r3, #26]
    cf74:	f007 fc8c 	bl	14890 <WsfTaskUnlock>
    cf78:	f1b9 0f00 	cmp.w	r9, #0
    cf7c:	d0f4      	beq.n	cf68 <attcSendMsg+0x20>
    cf7e:	b124      	cbz	r4, cf8a <attcSendMsg+0x42>
    cf80:	2e0b      	cmp	r6, #11
    cf82:	d015      	beq.n	cfb0 <attcSendMsg+0x68>
    cf84:	8823      	ldrh	r3, [r4, #0]
    cf86:	454b      	cmp	r3, r9
    cf88:	d819      	bhi.n	cfbe <attcSendMsg+0x76>
    cf8a:	200c      	movs	r0, #12
    cf8c:	f00c f8d6 	bl	1913c <WsfMsgAlloc>
    cf90:	4601      	mov	r1, r0
    cf92:	2800      	cmp	r0, #0
    cf94:	d0e8      	beq.n	cf68 <attcSendMsg+0x20>
    cf96:	4b0f      	ldr	r3, [pc, #60]	; (cfd4 <attcSendMsg+0x8c>)
    cf98:	8005      	strh	r5, [r0, #0]
    cf9a:	f880 8003 	strb.w	r8, [r0, #3]
    cf9e:	7086      	strb	r6, [r0, #2]
    cfa0:	6044      	str	r4, [r0, #4]
    cfa2:	8107      	strh	r7, [r0, #8]
    cfa4:	f893 0110 	ldrb.w	r0, [r3, #272]	; 0x110
    cfa8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cfac:	f00c b8ea 	b.w	19184 <WsfMsgSend>
    cfb0:	f1b8 0f00 	cmp.w	r8, #0
    cfb4:	d1e9      	bne.n	cf8a <attcSendMsg+0x42>
    cfb6:	8823      	ldrh	r3, [r4, #0]
    cfb8:	3305      	adds	r3, #5
    cfba:	b29b      	uxth	r3, r3
    cfbc:	e7e3      	b.n	cf86 <attcSendMsg+0x3e>
    cfbe:	2377      	movs	r3, #119	; 0x77
    cfc0:	463a      	mov	r2, r7
    cfc2:	4631      	mov	r1, r6
    cfc4:	4628      	mov	r0, r5
    cfc6:	f7ff fcec 	bl	c9a2 <attcExecCallback>
    cfca:	4620      	mov	r0, r4
    cfcc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cfd0:	f00c b8cc 	b.w	1916c <WsfMsgFree>
    cfd4:	100035f0 	.word	0x100035f0

0000cfd8 <AttcFindInfoReq>:
    cfd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    cfda:	4605      	mov	r5, r0
    cfdc:	200d      	movs	r0, #13
    cfde:	460c      	mov	r4, r1
    cfe0:	4617      	mov	r7, r2
    cfe2:	461e      	mov	r6, r3
    cfe4:	f7ff fa2e 	bl	c444 <attMsgAlloc>
    cfe8:	b160      	cbz	r0, d004 <AttcFindInfoReq+0x2c>
    cfea:	2305      	movs	r3, #5
    cfec:	8003      	strh	r3, [r0, #0]
    cfee:	2304      	movs	r3, #4
    cff0:	7203      	strb	r3, [r0, #8]
    cff2:	8044      	strh	r4, [r0, #2]
    cff4:	8087      	strh	r7, [r0, #4]
    cff6:	4603      	mov	r3, r0
    cff8:	9600      	str	r6, [sp, #0]
    cffa:	2202      	movs	r2, #2
    cffc:	4621      	mov	r1, r4
    cffe:	4628      	mov	r0, r5
    d000:	f7ff ffa2 	bl	cf48 <attcSendMsg>
    d004:	b003      	add	sp, #12
    d006:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d008 <AttcReadReq>:
    d008:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d00a:	4605      	mov	r5, r0
    d00c:	200b      	movs	r0, #11
    d00e:	460c      	mov	r4, r1
    d010:	f7ff fa18 	bl	c444 <attMsgAlloc>
    d014:	4603      	mov	r3, r0
    d016:	b168      	cbz	r0, d034 <AttcReadReq+0x2c>
    d018:	2203      	movs	r2, #3
    d01a:	8002      	strh	r2, [r0, #0]
    d01c:	220a      	movs	r2, #10
    d01e:	7202      	strb	r2, [r0, #8]
    d020:	0a22      	lsrs	r2, r4, #8
    d022:	7282      	strb	r2, [r0, #10]
    d024:	2200      	movs	r2, #0
    d026:	7244      	strb	r4, [r0, #9]
    d028:	4621      	mov	r1, r4
    d02a:	9200      	str	r2, [sp, #0]
    d02c:	4628      	mov	r0, r5
    d02e:	2205      	movs	r2, #5
    d030:	f7ff ff8a 	bl	cf48 <attcSendMsg>
    d034:	b003      	add	sp, #12
    d036:	bd30      	pop	{r4, r5, pc}

0000d038 <AttcWriteReq>:
    d038:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    d03c:	4607      	mov	r7, r0
    d03e:	f102 000b 	add.w	r0, r2, #11
    d042:	b280      	uxth	r0, r0
    d044:	460d      	mov	r5, r1
    d046:	4616      	mov	r6, r2
    d048:	4698      	mov	r8, r3
    d04a:	f7ff f9fb 	bl	c444 <attMsgAlloc>
    d04e:	4604      	mov	r4, r0
    d050:	b198      	cbz	r0, d07a <AttcWriteReq+0x42>
    d052:	1cf3      	adds	r3, r6, #3
    d054:	8003      	strh	r3, [r0, #0]
    d056:	2312      	movs	r3, #18
    d058:	7203      	strb	r3, [r0, #8]
    d05a:	0a2b      	lsrs	r3, r5, #8
    d05c:	7283      	strb	r3, [r0, #10]
    d05e:	7245      	strb	r5, [r0, #9]
    d060:	4632      	mov	r2, r6
    d062:	4641      	mov	r1, r8
    d064:	300b      	adds	r0, #11
    d066:	f7ff f84b 	bl	c100 <memcpy>
    d06a:	2300      	movs	r3, #0
    d06c:	9300      	str	r3, [sp, #0]
    d06e:	2209      	movs	r2, #9
    d070:	4623      	mov	r3, r4
    d072:	4629      	mov	r1, r5
    d074:	4638      	mov	r0, r7
    d076:	f7ff ff67 	bl	cf48 <attcSendMsg>
    d07a:	b002      	add	sp, #8
    d07c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d080 <AttcCancelReq>:
    d080:	b507      	push	{r0, r1, r2, lr}
    d082:	2300      	movs	r3, #0
    d084:	9300      	str	r3, [sp, #0]
    d086:	220f      	movs	r2, #15
    d088:	4619      	mov	r1, r3
    d08a:	f7ff ff5d 	bl	cf48 <attcSendMsg>
    d08e:	b003      	add	sp, #12
    d090:	f85d fb04 	ldr.w	pc, [sp], #4

0000d094 <AttcMtuReq>:
    d094:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d096:	4605      	mov	r5, r0
    d098:	200b      	movs	r0, #11
    d09a:	460c      	mov	r4, r1
    d09c:	f7ff f9d2 	bl	c444 <attMsgAlloc>
    d0a0:	4603      	mov	r3, r0
    d0a2:	b160      	cbz	r0, d0be <AttcMtuReq+0x2a>
    d0a4:	2203      	movs	r2, #3
    d0a6:	8002      	strh	r2, [r0, #0]
    d0a8:	7244      	strb	r4, [r0, #9]
    d0aa:	2202      	movs	r2, #2
    d0ac:	0a24      	lsrs	r4, r4, #8
    d0ae:	2100      	movs	r1, #0
    d0b0:	7202      	strb	r2, [r0, #8]
    d0b2:	7284      	strb	r4, [r0, #10]
    d0b4:	2201      	movs	r2, #1
    d0b6:	9100      	str	r1, [sp, #0]
    d0b8:	4628      	mov	r0, r5
    d0ba:	f7ff ff45 	bl	cf48 <attcSendMsg>
    d0be:	b003      	add	sp, #12
    d0c0:	bd30      	pop	{r4, r5, pc}
    d0c2:	bf00      	nop

0000d0c4 <attcProcFindByTypeRsp>:
    d0c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    d0c6:	3108      	adds	r1, #8
    d0c8:	8bc5      	ldrh	r5, [r0, #30]
    d0ca:	f102 0609 	add.w	r6, r2, #9
    d0ce:	440a      	add	r2, r1
    d0d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d0d4:	4296      	cmp	r6, r2
    d0d6:	d217      	bcs.n	d108 <attcProcFindByTypeRsp+0x44>
    d0d8:	7874      	ldrb	r4, [r6, #1]
    d0da:	7837      	ldrb	r7, [r6, #0]
    d0dc:	f896 c003 	ldrb.w	ip, [r6, #3]
    d0e0:	eb07 2704 	add.w	r7, r7, r4, lsl #8
    d0e4:	78b4      	ldrb	r4, [r6, #2]
    d0e6:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    d0ea:	b2bf      	uxth	r7, r7
    d0ec:	b2a4      	uxth	r4, r4
    d0ee:	42a7      	cmp	r7, r4
    d0f0:	f106 0604 	add.w	r6, r6, #4
    d0f4:	d806      	bhi.n	d104 <attcProcFindByTypeRsp+0x40>
    d0f6:	42bd      	cmp	r5, r7
    d0f8:	d804      	bhi.n	d104 <attcProcFindByTypeRsp+0x40>
    d0fa:	f8b0 c020 	ldrh.w	ip, [r0, #32]
    d0fe:	45bc      	cmp	ip, r7
    d100:	d300      	bcc.n	d104 <attcProcFindByTypeRsp+0x40>
    d102:	b96d      	cbnz	r5, d120 <attcProcFindByTypeRsp+0x5c>
    d104:	2273      	movs	r2, #115	; 0x73
    d106:	70da      	strb	r2, [r3, #3]
    d108:	78db      	ldrb	r3, [r3, #3]
    d10a:	b943      	cbnz	r3, d11e <attcProcFindByTypeRsp+0x5a>
    d10c:	7cc3      	ldrb	r3, [r0, #19]
    d10e:	2b01      	cmp	r3, #1
    d110:	d105      	bne.n	d11e <attcProcFindByTypeRsp+0x5a>
    d112:	b115      	cbz	r5, d11a <attcProcFindByTypeRsp+0x56>
    d114:	8c03      	ldrh	r3, [r0, #32]
    d116:	42ab      	cmp	r3, r5
    d118:	d20a      	bcs.n	d130 <attcProcFindByTypeRsp+0x6c>
    d11a:	2300      	movs	r3, #0
    d11c:	74c3      	strb	r3, [r0, #19]
    d11e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d120:	428c      	cmp	r4, r1
    d122:	bf1a      	itte	ne
    d124:	3401      	addne	r4, #1
    d126:	b2a5      	uxthne	r5, r4
    d128:	2500      	moveq	r5, #0
    d12a:	42b2      	cmp	r2, r6
    d12c:	d2d2      	bcs.n	d0d4 <attcProcFindByTypeRsp+0x10>
    d12e:	e7e9      	b.n	d104 <attcProcFindByTypeRsp+0x40>
    d130:	83c5      	strh	r5, [r0, #30]
    d132:	8305      	strh	r5, [r0, #24]
    d134:	e7f3      	b.n	d11e <attcProcFindByTypeRsp+0x5a>

0000d136 <attcProcReadLongRsp>:
    d136:	7cc2      	ldrb	r2, [r0, #19]
    d138:	2a01      	cmp	r2, #1
    d13a:	d10a      	bne.n	d152 <attcProcReadLongRsp+0x1c>
    d13c:	6802      	ldr	r2, [r0, #0]
    d13e:	8b52      	ldrh	r2, [r2, #26]
    d140:	428a      	cmp	r2, r1
    d142:	d902      	bls.n	d14a <attcProcReadLongRsp+0x14>
    d144:	2300      	movs	r3, #0
    d146:	74c3      	strb	r3, [r0, #19]
    d148:	4770      	bx	lr
    d14a:	8bc2      	ldrh	r2, [r0, #30]
    d14c:	891b      	ldrh	r3, [r3, #8]
    d14e:	4413      	add	r3, r2
    d150:	83c3      	strh	r3, [r0, #30]
    d152:	4770      	bx	lr

0000d154 <AttcFindByTypeValueReq>:
    d154:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d158:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
    d15c:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
    d160:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
    d164:	4680      	mov	r8, r0
    d166:	f106 000f 	add.w	r0, r6, #15
    d16a:	b280      	uxth	r0, r0
    d16c:	460f      	mov	r7, r1
    d16e:	4693      	mov	fp, r2
    d170:	461d      	mov	r5, r3
    d172:	f7ff f967 	bl	c444 <attMsgAlloc>
    d176:	4604      	mov	r4, r0
    d178:	b1c8      	cbz	r0, d1ae <AttcFindByTypeValueReq+0x5a>
    d17a:	1df3      	adds	r3, r6, #7
    d17c:	8003      	strh	r3, [r0, #0]
    d17e:	7345      	strb	r5, [r0, #13]
    d180:	2306      	movs	r3, #6
    d182:	0a2d      	lsrs	r5, r5, #8
    d184:	8047      	strh	r7, [r0, #2]
    d186:	f8a0 b004 	strh.w	fp, [r0, #4]
    d18a:	7203      	strb	r3, [r0, #8]
    d18c:	7385      	strb	r5, [r0, #14]
    d18e:	4632      	mov	r2, r6
    d190:	4651      	mov	r1, sl
    d192:	300f      	adds	r0, #15
    d194:	f7fe ffb4 	bl	c100 <memcpy>
    d198:	4623      	mov	r3, r4
    d19a:	2203      	movs	r2, #3
    d19c:	4639      	mov	r1, r7
    d19e:	4640      	mov	r0, r8
    d1a0:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    d1a4:	b001      	add	sp, #4
    d1a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d1aa:	f7ff becd 	b.w	cf48 <attcSendMsg>
    d1ae:	b001      	add	sp, #4
    d1b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d1b4 <AttcReadByTypeReq>:
    d1b4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d1b8:	b29d      	uxth	r5, r3
    d1ba:	4680      	mov	r8, r0
    d1bc:	f105 000d 	add.w	r0, r5, #13
    d1c0:	460e      	mov	r6, r1
    d1c2:	4693      	mov	fp, r2
    d1c4:	461f      	mov	r7, r3
    d1c6:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    d1ca:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
    d1ce:	f7ff f939 	bl	c444 <attMsgAlloc>
    d1d2:	4604      	mov	r4, r0
    d1d4:	b1b0      	cbz	r0, d204 <AttcReadByTypeReq+0x50>
    d1d6:	2308      	movs	r3, #8
    d1d8:	3505      	adds	r5, #5
    d1da:	8005      	strh	r5, [r0, #0]
    d1dc:	8046      	strh	r6, [r0, #2]
    d1de:	f8a0 b004 	strh.w	fp, [r0, #4]
    d1e2:	7203      	strb	r3, [r0, #8]
    d1e4:	463a      	mov	r2, r7
    d1e6:	4651      	mov	r1, sl
    d1e8:	300d      	adds	r0, #13
    d1ea:	f7fe ff89 	bl	c100 <memcpy>
    d1ee:	4623      	mov	r3, r4
    d1f0:	2204      	movs	r2, #4
    d1f2:	4631      	mov	r1, r6
    d1f4:	4640      	mov	r0, r8
    d1f6:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    d1fa:	b001      	add	sp, #4
    d1fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d200:	f7ff bea2 	b.w	cf48 <attcSendMsg>
    d204:	b001      	add	sp, #4
    d206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d20a <AttcReadLongReq>:
    d20a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d20c:	4605      	mov	r5, r0
    d20e:	200d      	movs	r0, #13
    d210:	460c      	mov	r4, r1
    d212:	4617      	mov	r7, r2
    d214:	461e      	mov	r6, r3
    d216:	f7ff f915 	bl	c444 <attMsgAlloc>
    d21a:	b170      	cbz	r0, d23a <AttcReadLongReq+0x30>
    d21c:	2305      	movs	r3, #5
    d21e:	8003      	strh	r3, [r0, #0]
    d220:	230c      	movs	r3, #12
    d222:	7203      	strb	r3, [r0, #8]
    d224:	0a23      	lsrs	r3, r4, #8
    d226:	7283      	strb	r3, [r0, #10]
    d228:	8047      	strh	r7, [r0, #2]
    d22a:	7244      	strb	r4, [r0, #9]
    d22c:	4603      	mov	r3, r0
    d22e:	9600      	str	r6, [sp, #0]
    d230:	2206      	movs	r2, #6
    d232:	4621      	mov	r1, r4
    d234:	4628      	mov	r0, r5
    d236:	f7ff fe87 	bl	cf48 <attcSendMsg>
    d23a:	b003      	add	sp, #12
    d23c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d23e <AttcReadMultipleReq>:
    d23e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d240:	004e      	lsls	r6, r1, #1
    d242:	4607      	mov	r7, r0
    d244:	f106 0009 	add.w	r0, r6, #9
    d248:	460d      	mov	r5, r1
    d24a:	4614      	mov	r4, r2
    d24c:	f7ff f8fa 	bl	c444 <attMsgAlloc>
    d250:	4603      	mov	r3, r0
    d252:	b1a0      	cbz	r0, d27e <AttcReadMultipleReq+0x40>
    d254:	3601      	adds	r6, #1
    d256:	4622      	mov	r2, r4
    d258:	8006      	strh	r6, [r0, #0]
    d25a:	200e      	movs	r0, #14
    d25c:	f832 1902 	ldrh.w	r1, [r2], #-2
    d260:	7218      	strb	r0, [r3, #8]
    d262:	f103 0009 	add.w	r0, r3, #9
    d266:	3d01      	subs	r5, #1
    d268:	b2ed      	uxtb	r5, r5
    d26a:	2dff      	cmp	r5, #255	; 0xff
    d26c:	f100 0002 	add.w	r0, r0, #2
    d270:	d107      	bne.n	d282 <AttcReadMultipleReq+0x44>
    d272:	2200      	movs	r2, #0
    d274:	9200      	str	r2, [sp, #0]
    d276:	4638      	mov	r0, r7
    d278:	2207      	movs	r2, #7
    d27a:	f7ff fe65 	bl	cf48 <attcSendMsg>
    d27e:	b003      	add	sp, #12
    d280:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d282:	f832 4f02 	ldrh.w	r4, [r2, #2]!
    d286:	f800 4c02 	strb.w	r4, [r0, #-2]
    d28a:	8814      	ldrh	r4, [r2, #0]
    d28c:	0a24      	lsrs	r4, r4, #8
    d28e:	f800 4c01 	strb.w	r4, [r0, #-1]
    d292:	e7e8      	b.n	d266 <AttcReadMultipleReq+0x28>

0000d294 <AttcReadByGroupTypeReq>:
    d294:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d298:	b29d      	uxth	r5, r3
    d29a:	4680      	mov	r8, r0
    d29c:	f105 000d 	add.w	r0, r5, #13
    d2a0:	460e      	mov	r6, r1
    d2a2:	4693      	mov	fp, r2
    d2a4:	461f      	mov	r7, r3
    d2a6:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    d2aa:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
    d2ae:	f7ff f8c9 	bl	c444 <attMsgAlloc>
    d2b2:	4604      	mov	r4, r0
    d2b4:	b1b0      	cbz	r0, d2e4 <AttcReadByGroupTypeReq+0x50>
    d2b6:	2310      	movs	r3, #16
    d2b8:	3505      	adds	r5, #5
    d2ba:	8005      	strh	r5, [r0, #0]
    d2bc:	8046      	strh	r6, [r0, #2]
    d2be:	f8a0 b004 	strh.w	fp, [r0, #4]
    d2c2:	7203      	strb	r3, [r0, #8]
    d2c4:	463a      	mov	r2, r7
    d2c6:	4651      	mov	r1, sl
    d2c8:	300d      	adds	r0, #13
    d2ca:	f7fe ff19 	bl	c100 <memcpy>
    d2ce:	4623      	mov	r3, r4
    d2d0:	2208      	movs	r2, #8
    d2d2:	4631      	mov	r1, r6
    d2d4:	4640      	mov	r0, r8
    d2d6:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    d2da:	b001      	add	sp, #4
    d2dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d2e0:	f7ff be32 	b.w	cf48 <attcSendMsg>
    d2e4:	b001      	add	sp, #4
    d2e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d2ea <attcProcPrepWriteRsp>:
    d2ea:	7cc2      	ldrb	r2, [r0, #19]
    d2ec:	2a01      	cmp	r2, #1
    d2ee:	d102      	bne.n	d2f6 <attcProcPrepWriteRsp+0xc>
    d2f0:	8b82      	ldrh	r2, [r0, #28]
    d2f2:	b902      	cbnz	r2, d2f6 <attcProcPrepWriteRsp+0xc>
    d2f4:	74c2      	strb	r2, [r0, #19]
    d2f6:	2200      	movs	r2, #0
    d2f8:	811a      	strh	r2, [r3, #8]
    d2fa:	4770      	bx	lr

0000d2fc <AttcWriteCmd>:
    d2fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    d300:	4607      	mov	r7, r0
    d302:	f102 000b 	add.w	r0, r2, #11
    d306:	b280      	uxth	r0, r0
    d308:	460d      	mov	r5, r1
    d30a:	4616      	mov	r6, r2
    d30c:	4698      	mov	r8, r3
    d30e:	f7ff f899 	bl	c444 <attMsgAlloc>
    d312:	4604      	mov	r4, r0
    d314:	b198      	cbz	r0, d33e <AttcWriteCmd+0x42>
    d316:	1cf3      	adds	r3, r6, #3
    d318:	8003      	strh	r3, [r0, #0]
    d31a:	2352      	movs	r3, #82	; 0x52
    d31c:	7203      	strb	r3, [r0, #8]
    d31e:	0a2b      	lsrs	r3, r5, #8
    d320:	7283      	strb	r3, [r0, #10]
    d322:	7245      	strb	r5, [r0, #9]
    d324:	4632      	mov	r2, r6
    d326:	4641      	mov	r1, r8
    d328:	300b      	adds	r0, #11
    d32a:	f7fe fee9 	bl	c100 <memcpy>
    d32e:	2300      	movs	r3, #0
    d330:	9300      	str	r3, [sp, #0]
    d332:	220a      	movs	r2, #10
    d334:	4623      	mov	r3, r4
    d336:	4629      	mov	r1, r5
    d338:	4638      	mov	r0, r7
    d33a:	f7ff fe05 	bl	cf48 <attcSendMsg>
    d33e:	b002      	add	sp, #8
    d340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d344 <AttcPrepareWriteReq>:
    d344:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d348:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    d34c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    d350:	f89d a02c 	ldrb.w	sl, [sp, #44]	; 0x2c
    d354:	4607      	mov	r7, r0
    d356:	460d      	mov	r5, r1
    d358:	4693      	mov	fp, r2
    d35a:	4698      	mov	r8, r3
    d35c:	b116      	cbz	r6, d364 <AttcPrepareWriteReq+0x20>
    d35e:	f1ba 0f00 	cmp.w	sl, #0
    d362:	d11f      	bne.n	d3a4 <AttcPrepareWriteReq+0x60>
    d364:	f108 000d 	add.w	r0, r8, #13
    d368:	b280      	uxth	r0, r0
    d36a:	f7ff f86b 	bl	c444 <attMsgAlloc>
    d36e:	4604      	mov	r4, r0
    d370:	b310      	cbz	r0, d3b8 <AttcPrepareWriteReq+0x74>
    d372:	2316      	movs	r3, #22
    d374:	7203      	strb	r3, [r0, #8]
    d376:	0a2b      	lsrs	r3, r5, #8
    d378:	f8a0 8000 	strh.w	r8, [r0]
    d37c:	f8a0 b002 	strh.w	fp, [r0, #2]
    d380:	7245      	strb	r5, [r0, #9]
    d382:	7283      	strb	r3, [r0, #10]
    d384:	b186      	cbz	r6, d3a8 <AttcPrepareWriteReq+0x64>
    d386:	f1ba 0f00 	cmp.w	sl, #0
    d38a:	d00d      	beq.n	d3a8 <AttcPrepareWriteReq+0x64>
    d38c:	f8c0 9004 	str.w	r9, [r0, #4]
    d390:	4623      	mov	r3, r4
    d392:	220b      	movs	r2, #11
    d394:	4629      	mov	r1, r5
    d396:	4638      	mov	r0, r7
    d398:	960a      	str	r6, [sp, #40]	; 0x28
    d39a:	b001      	add	sp, #4
    d39c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d3a0:	f7ff bdd2 	b.w	cf48 <attcSendMsg>
    d3a4:	200d      	movs	r0, #13
    d3a6:	e7e0      	b.n	d36a <AttcPrepareWriteReq+0x26>
    d3a8:	f104 000d 	add.w	r0, r4, #13
    d3ac:	4642      	mov	r2, r8
    d3ae:	4649      	mov	r1, r9
    d3b0:	f7fe fea6 	bl	c100 <memcpy>
    d3b4:	6060      	str	r0, [r4, #4]
    d3b6:	e7eb      	b.n	d390 <AttcPrepareWriteReq+0x4c>
    d3b8:	b001      	add	sp, #4
    d3ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d3be <AttcExecuteWriteReq>:
    d3be:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d3c0:	4604      	mov	r4, r0
    d3c2:	200a      	movs	r0, #10
    d3c4:	460d      	mov	r5, r1
    d3c6:	f7ff f83d 	bl	c444 <attMsgAlloc>
    d3ca:	4603      	mov	r3, r0
    d3cc:	b150      	cbz	r0, d3e4 <AttcExecuteWriteReq+0x26>
    d3ce:	2202      	movs	r2, #2
    d3d0:	8002      	strh	r2, [r0, #0]
    d3d2:	2100      	movs	r1, #0
    d3d4:	2218      	movs	r2, #24
    d3d6:	7202      	strb	r2, [r0, #8]
    d3d8:	7245      	strb	r5, [r0, #9]
    d3da:	220c      	movs	r2, #12
    d3dc:	9100      	str	r1, [sp, #0]
    d3de:	4620      	mov	r0, r4
    d3e0:	f7ff fdb2 	bl	cf48 <attcSendMsg>
    d3e4:	b003      	add	sp, #12
    d3e6:	bd30      	pop	{r4, r5, pc}

0000d3e8 <attsCccMainCback>:
    d3e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    d3ea:	4d2e      	ldr	r5, [pc, #184]	; (d4a4 <attsCccMainCback+0xbc>)
    d3ec:	2905      	cmp	r1, #5
    d3ee:	b085      	sub	sp, #20
    d3f0:	6a2e      	ldr	r6, [r5, #32]
    d3f2:	f895 c028 	ldrb.w	ip, [r5, #40]	; 0x28
    d3f6:	f04f 0100 	mov.w	r1, #0
    d3fa:	d041      	beq.n	d480 <attsCccMainCback+0x98>
    d3fc:	b2cf      	uxtb	r7, r1
    d3fe:	4567      	cmp	r7, ip
    d400:	d340      	bcc.n	d484 <attsCccMainCback+0x9c>
    d402:	d048      	beq.n	d496 <attsCccMainCback+0xae>
    d404:	785c      	ldrb	r4, [r3, #1]
    d406:	781b      	ldrb	r3, [r3, #0]
    d408:	eb03 2304 	add.w	r3, r3, r4, lsl #8
    d40c:	b29b      	uxth	r3, r3
    d40e:	2b02      	cmp	r3, #2
    d410:	d844      	bhi.n	d49c <attsCccMainCback+0xb4>
    d412:	b113      	cbz	r3, d41a <attsCccMainCback+0x32>
    d414:	8874      	ldrh	r4, [r6, #2]
    d416:	4223      	tst	r3, r4
    d418:	d040      	beq.n	d49c <attsCccMainCback+0xb4>
    d41a:	1e44      	subs	r4, r0, #1
    d41c:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
    d420:	2c00      	cmp	r4, #0
    d422:	d03d      	beq.n	d4a0 <attsCccMainCback+0xb8>
    d424:	f834 6011 	ldrh.w	r6, [r4, r1, lsl #1]
    d428:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
    d42c:	42b3      	cmp	r3, r6
    d42e:	d025      	beq.n	d47c <attsCccMainCback+0x94>
    d430:	2110      	movs	r1, #16
    d432:	f8ad 0004 	strh.w	r0, [sp, #4]
    d436:	f8ad 300a 	strh.w	r3, [sp, #10]
    d43a:	f88d 1006 	strb.w	r1, [sp, #6]
    d43e:	f88d 700c 	strb.w	r7, [sp, #12]
    d442:	f8ad 2008 	strh.w	r2, [sp, #8]
    d446:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    d448:	a801      	add	r0, sp, #4
    d44a:	4798      	blx	r3
    d44c:	e016      	b.n	d47c <attsCccMainCback+0x94>
    d44e:	1c4c      	adds	r4, r1, #1
    d450:	fb07 6e04 	mla	lr, r7, r4, r6
    d454:	f83e ec06 	ldrh.w	lr, [lr, #-6]
    d458:	4596      	cmp	lr, r2
    d45a:	d004      	beq.n	d466 <attsCccMainCback+0x7e>
    d45c:	4621      	mov	r1, r4
    d45e:	b2cc      	uxtb	r4, r1
    d460:	4564      	cmp	r4, ip
    d462:	d3f4      	bcc.n	d44e <attsCccMainCback+0x66>
    d464:	d017      	beq.n	d496 <attsCccMainCback+0xae>
    d466:	3801      	subs	r0, #1
    d468:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
    d46c:	b1c2      	cbz	r2, d4a0 <attsCccMainCback+0xb8>
    d46e:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
    d472:	7018      	strb	r0, [r3, #0]
    d474:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
    d478:	0a12      	lsrs	r2, r2, #8
    d47a:	705a      	strb	r2, [r3, #1]
    d47c:	2000      	movs	r0, #0
    d47e:	e00b      	b.n	d498 <attsCccMainCback+0xb0>
    d480:	2706      	movs	r7, #6
    d482:	e7ec      	b.n	d45e <attsCccMainCback+0x76>
    d484:	f8b6 e000 	ldrh.w	lr, [r6]
    d488:	4596      	cmp	lr, r2
    d48a:	f101 0401 	add.w	r4, r1, #1
    d48e:	d0b9      	beq.n	d404 <attsCccMainCback+0x1c>
    d490:	3606      	adds	r6, #6
    d492:	4621      	mov	r1, r4
    d494:	e7b2      	b.n	d3fc <attsCccMainCback+0x14>
    d496:	200a      	movs	r0, #10
    d498:	b005      	add	sp, #20
    d49a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d49c:	2080      	movs	r0, #128	; 0x80
    d49e:	e7fb      	b.n	d498 <attsCccMainCback+0xb0>
    d4a0:	2011      	movs	r0, #17
    d4a2:	e7f9      	b.n	d498 <attsCccMainCback+0xb0>
    d4a4:	100038c8 	.word	0x100038c8

0000d4a8 <AttsCccRegister>:
    d4a8:	4b04      	ldr	r3, [pc, #16]	; (d4bc <AttsCccRegister+0x14>)
    d4aa:	e9c3 1208 	strd	r1, r2, [r3, #32]
    d4ae:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
    d4b2:	4b03      	ldr	r3, [pc, #12]	; (d4c0 <AttsCccRegister+0x18>)
    d4b4:	4a03      	ldr	r2, [pc, #12]	; (d4c4 <AttsCccRegister+0x1c>)
    d4b6:	615a      	str	r2, [r3, #20]
    d4b8:	4770      	bx	lr
    d4ba:	bf00      	nop
    d4bc:	100038c8 	.word	0x100038c8
    d4c0:	10003a54 	.word	0x10003a54
    d4c4:	0000d3e9 	.word	0x0000d3e9

0000d4c8 <AttsCccInitTable>:
    d4c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    d4cc:	1e45      	subs	r5, r0, #1
    d4ce:	4c1e      	ldr	r4, [pc, #120]	; (d548 <AttsCccInitTable+0x80>)
    d4d0:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
    d4d4:	4607      	mov	r7, r0
    d4d6:	460e      	mov	r6, r1
    d4d8:	b933      	cbnz	r3, d4e8 <AttsCccInitTable+0x20>
    d4da:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    d4de:	0040      	lsls	r0, r0, #1
    d4e0:	f00b fd9c 	bl	1901c <WsfBufAlloc>
    d4e4:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
    d4e8:	f854 8025 	ldr.w	r8, [r4, r5, lsl #2]
    d4ec:	f1b8 0f00 	cmp.w	r8, #0
    d4f0:	d022      	beq.n	d538 <AttsCccInitTable+0x70>
    d4f2:	bb26      	cbnz	r6, d53e <AttsCccInitTable+0x76>
    d4f4:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    d4f8:	4631      	mov	r1, r6
    d4fa:	0052      	lsls	r2, r2, #1
    d4fc:	4640      	mov	r0, r8
    d4fe:	f012 ff75 	bl	203ec <memset>
    d502:	e019      	b.n	d538 <AttsCccInitTable+0x70>
    d504:	f836 2015 	ldrh.w	r2, [r6, r5, lsl #1]
    d508:	f828 2015 	strh.w	r2, [r8, r5, lsl #1]
    d50c:	f836 2015 	ldrh.w	r2, [r6, r5, lsl #1]
    d510:	b162      	cbz	r2, d52c <AttsCccInitTable+0x64>
    d512:	f88d 300c 	strb.w	r3, [sp, #12]
    d516:	f88d 9006 	strb.w	r9, [sp, #6]
    d51a:	f8ad 7004 	strh.w	r7, [sp, #4]
    d51e:	f8ad a008 	strh.w	sl, [sp, #8]
    d522:	f8ad 200a 	strh.w	r2, [sp, #10]
    d526:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d528:	a801      	add	r0, sp, #4
    d52a:	4798      	blx	r3
    d52c:	3501      	adds	r5, #1
    d52e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    d532:	b2eb      	uxtb	r3, r5
    d534:	429a      	cmp	r2, r3
    d536:	d8e5      	bhi.n	d504 <AttsCccInitTable+0x3c>
    d538:	b004      	add	sp, #16
    d53a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d53e:	2500      	movs	r5, #0
    d540:	f04f 0910 	mov.w	r9, #16
    d544:	46aa      	mov	sl, r5
    d546:	e7f2      	b.n	d52e <AttsCccInitTable+0x66>
    d548:	100038c8 	.word	0x100038c8

0000d54c <AttsCccClearTable>:
    d54c:	b538      	push	{r3, r4, r5, lr}
    d54e:	1e45      	subs	r5, r0, #1
    d550:	4c04      	ldr	r4, [pc, #16]	; (d564 <AttsCccClearTable+0x18>)
    d552:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
    d556:	b120      	cbz	r0, d562 <AttsCccClearTable+0x16>
    d558:	f00b fda0 	bl	1909c <WsfBufFree>
    d55c:	2300      	movs	r3, #0
    d55e:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
    d562:	bd38      	pop	{r3, r4, r5, pc}
    d564:	100038c8 	.word	0x100038c8

0000d568 <AttsCccGet>:
    d568:	3801      	subs	r0, #1
    d56a:	4b03      	ldr	r3, [pc, #12]	; (d578 <AttsCccGet+0x10>)
    d56c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    d570:	b108      	cbz	r0, d576 <AttsCccGet+0xe>
    d572:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
    d576:	4770      	bx	lr
    d578:	100038c8 	.word	0x100038c8

0000d57c <AttsCccSet>:
    d57c:	3801      	subs	r0, #1
    d57e:	4b03      	ldr	r3, [pc, #12]	; (d58c <AttsCccSet+0x10>)
    d580:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    d584:	b10b      	cbz	r3, d58a <AttsCccSet+0xe>
    d586:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
    d58a:	4770      	bx	lr
    d58c:	100038c8 	.word	0x100038c8

0000d590 <AttsCccEnabled>:
    d590:	b538      	push	{r3, r4, r5, lr}
    d592:	460c      	mov	r4, r1
    d594:	4605      	mov	r5, r0
    d596:	f002 f9e3 	bl	f960 <DmConnSecLevel>
    d59a:	4b08      	ldr	r3, [pc, #32]	; (d5bc <AttsCccEnabled+0x2c>)
    d59c:	6a1b      	ldr	r3, [r3, #32]
    d59e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    d5a2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    d5a6:	791b      	ldrb	r3, [r3, #4]
    d5a8:	4283      	cmp	r3, r0
    d5aa:	d805      	bhi.n	d5b8 <AttsCccEnabled+0x28>
    d5ac:	4621      	mov	r1, r4
    d5ae:	4628      	mov	r0, r5
    d5b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d5b4:	f7ff bfd8 	b.w	d568 <AttsCccGet>
    d5b8:	2000      	movs	r0, #0
    d5ba:	bd38      	pop	{r3, r4, r5, pc}
    d5bc:	100038c8 	.word	0x100038c8

0000d5c0 <attsIndCcbByConnId>:
    d5c0:	b510      	push	{r4, lr}
    d5c2:	4604      	mov	r4, r0
    d5c4:	f002 f988 	bl	f8d8 <DmConnInUse>
    d5c8:	b120      	cbz	r0, d5d4 <attsIndCcbByConnId+0x14>
    d5ca:	4b03      	ldr	r3, [pc, #12]	; (d5d8 <attsIndCcbByConnId+0x18>)
    d5cc:	3c01      	subs	r4, #1
    d5ce:	202c      	movs	r0, #44	; 0x2c
    d5d0:	fb00 3004 	mla	r0, r0, r4, r3
    d5d4:	bd10      	pop	{r4, pc}
    d5d6:	bf00      	nop
    d5d8:	100038f4 	.word	0x100038f4

0000d5dc <attsExecCallback>:
    d5dc:	b507      	push	{r0, r1, r2, lr}
    d5de:	2300      	movs	r3, #0
    d5e0:	9300      	str	r3, [sp, #0]
    d5e2:	4613      	mov	r3, r2
    d5e4:	460a      	mov	r2, r1
    d5e6:	210f      	movs	r1, #15
    d5e8:	f7fe fefe 	bl	c3e8 <attExecCallback>
    d5ec:	b003      	add	sp, #12
    d5ee:	f85d fb04 	ldr.w	pc, [sp], #4

0000d5f2 <attsIndNtfCallback>:
    d5f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d5f6:	460c      	mov	r4, r1
    d5f8:	8ac9      	ldrh	r1, [r1, #22]
    d5fa:	4606      	mov	r6, r0
    d5fc:	4617      	mov	r7, r2
    d5fe:	b119      	cbz	r1, d608 <attsIndNtfCallback+0x16>
    d600:	f7ff ffec 	bl	d5dc <attsExecCallback>
    d604:	2300      	movs	r3, #0
    d606:	82e3      	strh	r3, [r4, #22]
    d608:	f104 0518 	add.w	r5, r4, #24
    d60c:	f04f 0800 	mov.w	r8, #0
    d610:	342c      	adds	r4, #44	; 0x2c
    d612:	f835 1b02 	ldrh.w	r1, [r5], #2
    d616:	b129      	cbz	r1, d624 <attsIndNtfCallback+0x32>
    d618:	463a      	mov	r2, r7
    d61a:	4630      	mov	r0, r6
    d61c:	f7ff ffde 	bl	d5dc <attsExecCallback>
    d620:	f825 8c02 	strh.w	r8, [r5, #-2]
    d624:	42ac      	cmp	r4, r5
    d626:	d1f4      	bne.n	d612 <attsIndNtfCallback+0x20>
    d628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d62c <attsIndCtrlCback>:
    d62c:	b510      	push	{r4, lr}
    d62e:	4604      	mov	r4, r0
    d630:	7800      	ldrb	r0, [r0, #0]
    d632:	f7ff ffc5 	bl	d5c0 <attsIndCcbByConnId>
    d636:	4601      	mov	r1, r0
    d638:	b120      	cbz	r0, d644 <attsIndCtrlCback+0x18>
    d63a:	7820      	ldrb	r0, [r4, #0]
    d63c:	2200      	movs	r2, #0
    d63e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d642:	e7d6      	b.n	d5f2 <attsIndNtfCallback>
    d644:	bd10      	pop	{r4, pc}

0000d646 <attsIndMsgCback>:
    d646:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d648:	4605      	mov	r5, r0
    d64a:	7800      	ldrb	r0, [r0, #0]
    d64c:	f7ff ffb8 	bl	d5c0 <attsIndCcbByConnId>
    d650:	78ab      	ldrb	r3, [r5, #2]
    d652:	4604      	mov	r4, r0
    d654:	b930      	cbnz	r0, d664 <attsIndMsgCback+0x1e>
    d656:	2b21      	cmp	r3, #33	; 0x21
    d658:	d13d      	bne.n	d6d6 <attsIndMsgCback+0x90>
    d65a:	6868      	ldr	r0, [r5, #4]
    d65c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d660:	f00b bd84 	b.w	1916c <WsfMsgFree>
    d664:	2b21      	cmp	r3, #33	; 0x21
    d666:	d13b      	bne.n	d6e0 <attsIndMsgCback+0x9a>
    d668:	686b      	ldr	r3, [r5, #4]
    d66a:	7a1a      	ldrb	r2, [r3, #8]
    d66c:	885e      	ldrh	r6, [r3, #2]
    d66e:	2a1d      	cmp	r2, #29
    d670:	d113      	bne.n	d69a <attsIndMsgCback+0x54>
    d672:	8ac2      	ldrh	r2, [r0, #22]
    d674:	bb12      	cbnz	r2, d6bc <attsIndMsgCback+0x76>
    d676:	6901      	ldr	r1, [r0, #16]
    d678:	881a      	ldrh	r2, [r3, #0]
    d67a:	8b09      	ldrh	r1, [r1, #24]
    d67c:	2004      	movs	r0, #4
    d67e:	f003 f86b 	bl	10758 <L2cDataReq>
    d682:	2322      	movs	r3, #34	; 0x22
    d684:	7323      	strb	r3, [r4, #12]
    d686:	4b27      	ldr	r3, [pc, #156]	; (d724 <attsIndMsgCback+0xde>)
    d688:	82e6      	strh	r6, [r4, #22]
    d68a:	681b      	ldr	r3, [r3, #0]
    d68c:	82a6      	strh	r6, [r4, #20]
    d68e:	7999      	ldrb	r1, [r3, #6]
    d690:	4620      	mov	r0, r4
    d692:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d696:	f00b bf03 	b.w	194a0 <WsfTimerStartSec>
    d69a:	f100 0118 	add.w	r1, r0, #24
    d69e:	f100 0c2c 	add.w	ip, r0, #44	; 0x2c
    d6a2:	2200      	movs	r2, #0
    d6a4:	460f      	mov	r7, r1
    d6a6:	f831 0b02 	ldrh.w	r0, [r1], #2
    d6aa:	b118      	cbz	r0, d6b4 <attsIndMsgCback+0x6e>
    d6ac:	4286      	cmp	r6, r0
    d6ae:	d005      	beq.n	d6bc <attsIndMsgCback+0x76>
    d6b0:	3201      	adds	r2, #1
    d6b2:	b2d2      	uxtb	r2, r2
    d6b4:	458c      	cmp	ip, r1
    d6b6:	d1f6      	bne.n	d6a6 <attsIndMsgCback+0x60>
    d6b8:	2a09      	cmp	r2, #9
    d6ba:	d922      	bls.n	d702 <attsIndMsgCback+0xbc>
    d6bc:	2272      	movs	r2, #114	; 0x72
    d6be:	4631      	mov	r1, r6
    d6c0:	7828      	ldrb	r0, [r5, #0]
    d6c2:	f7ff ff8b 	bl	d5dc <attsExecCallback>
    d6c6:	e7c8      	b.n	d65a <attsIndMsgCback+0x14>
    d6c8:	2300      	movs	r3, #0
    d6ca:	f837 2b02 	ldrh.w	r2, [r7], #2
    d6ce:	b91a      	cbnz	r2, d6d8 <attsIndMsgCback+0x92>
    d6d0:	330c      	adds	r3, #12
    d6d2:	f824 6013 	strh.w	r6, [r4, r3, lsl #1]
    d6d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d6d8:	3301      	adds	r3, #1
    d6da:	2b0a      	cmp	r3, #10
    d6dc:	d1f5      	bne.n	d6ca <attsIndMsgCback+0x84>
    d6de:	e7fa      	b.n	d6d6 <attsIndMsgCback+0x90>
    d6e0:	2b22      	cmp	r3, #34	; 0x22
    d6e2:	d1f8      	bne.n	d6d6 <attsIndMsgCback+0x90>
    d6e4:	8a83      	ldrh	r3, [r0, #20]
    d6e6:	2b00      	cmp	r3, #0
    d6e8:	d0f5      	beq.n	d6d6 <attsIndMsgCback+0x90>
    d6ea:	2600      	movs	r6, #0
    d6ec:	8286      	strh	r6, [r0, #20]
    d6ee:	2271      	movs	r2, #113	; 0x71
    d6f0:	8ac1      	ldrh	r1, [r0, #22]
    d6f2:	7828      	ldrb	r0, [r5, #0]
    d6f4:	f7ff ff72 	bl	d5dc <attsExecCallback>
    d6f8:	6923      	ldr	r3, [r4, #16]
    d6fa:	82e6      	strh	r6, [r4, #22]
    d6fc:	2201      	movs	r2, #1
    d6fe:	77da      	strb	r2, [r3, #31]
    d700:	e7e9      	b.n	d6d6 <attsIndMsgCback+0x90>
    d702:	6921      	ldr	r1, [r4, #16]
    d704:	881a      	ldrh	r2, [r3, #0]
    d706:	8b09      	ldrh	r1, [r1, #24]
    d708:	882d      	ldrh	r5, [r5, #0]
    d70a:	2004      	movs	r0, #4
    d70c:	f003 f824 	bl	10758 <L2cDataReq>
    d710:	6923      	ldr	r3, [r4, #16]
    d712:	7f9a      	ldrb	r2, [r3, #30]
    d714:	2a00      	cmp	r2, #0
    d716:	d1d7      	bne.n	d6c8 <attsIndMsgCback+0x82>
    d718:	4631      	mov	r1, r6
    d71a:	b2e8      	uxtb	r0, r5
    d71c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d720:	e75c      	b.n	d5dc <attsExecCallback>
    d722:	bf00      	nop
    d724:	10002ba4 	.word	0x10002ba4

0000d728 <attsHandleValueIndNtf>:
    d728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d72c:	4606      	mov	r6, r0
    d72e:	460c      	mov	r4, r1
    d730:	4617      	mov	r7, r2
    d732:	4698      	mov	r8, r3
    d734:	f89d a020 	ldrb.w	sl, [sp, #32]
    d738:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
    d73c:	f007 f8a2 	bl	14884 <WsfTaskLock>
    d740:	4630      	mov	r0, r6
    d742:	f7ff ff3d 	bl	d5c0 <attsIndCcbByConnId>
    d746:	b950      	cbnz	r0, d75e <attsHandleValueIndNtf+0x36>
    d748:	f007 f8a2 	bl	14890 <WsfTaskUnlock>
    d74c:	f1b9 0f00 	cmp.w	r9, #0
    d750:	d048      	beq.n	d7e4 <attsHandleValueIndNtf+0xbc>
    d752:	4651      	mov	r1, sl
    d754:	4640      	mov	r0, r8
    d756:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d75a:	f7fe bedb 	b.w	c514 <AttMsgFree>
    d75e:	6903      	ldr	r3, [r0, #16]
    d760:	8b5d      	ldrh	r5, [r3, #26]
    d762:	f007 f895 	bl	14890 <WsfTaskUnlock>
    d766:	2d00      	cmp	r5, #0
    d768:	d0f0      	beq.n	d74c <attsHandleValueIndNtf+0x24>
    d76a:	1cbb      	adds	r3, r7, #2
    d76c:	42ab      	cmp	r3, r5
    d76e:	da37      	bge.n	d7e0 <attsHandleValueIndNtf+0xb8>
    d770:	2008      	movs	r0, #8
    d772:	f00b fce3 	bl	1913c <WsfMsgAlloc>
    d776:	4605      	mov	r5, r0
    d778:	b360      	cbz	r0, d7d4 <attsHandleValueIndNtf+0xac>
    d77a:	2321      	movs	r3, #33	; 0x21
    d77c:	8006      	strh	r6, [r0, #0]
    d77e:	7083      	strb	r3, [r0, #2]
    d780:	f1b9 0f00 	cmp.w	r9, #0
    d784:	d01c      	beq.n	d7c0 <attsHandleValueIndNtf+0x98>
    d786:	f1a8 030b 	sub.w	r3, r8, #11
    d78a:	6043      	str	r3, [r0, #4]
    d78c:	6868      	ldr	r0, [r5, #4]
    d78e:	b1f0      	cbz	r0, d7ce <attsHandleValueIndNtf+0xa6>
    d790:	1cfb      	adds	r3, r7, #3
    d792:	8044      	strh	r4, [r0, #2]
    d794:	7244      	strb	r4, [r0, #9]
    d796:	0a24      	lsrs	r4, r4, #8
    d798:	8003      	strh	r3, [r0, #0]
    d79a:	f880 a008 	strb.w	sl, [r0, #8]
    d79e:	7284      	strb	r4, [r0, #10]
    d7a0:	f1b9 0f00 	cmp.w	r9, #0
    d7a4:	d104      	bne.n	d7b0 <attsHandleValueIndNtf+0x88>
    d7a6:	463a      	mov	r2, r7
    d7a8:	4641      	mov	r1, r8
    d7aa:	300b      	adds	r0, #11
    d7ac:	f7fe fca8 	bl	c100 <memcpy>
    d7b0:	4b0d      	ldr	r3, [pc, #52]	; (d7e8 <attsHandleValueIndNtf+0xc0>)
    d7b2:	4629      	mov	r1, r5
    d7b4:	f893 0110 	ldrb.w	r0, [r3, #272]	; 0x110
    d7b8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d7bc:	f00b bce2 	b.w	19184 <WsfMsgSend>
    d7c0:	f107 000b 	add.w	r0, r7, #11
    d7c4:	b280      	uxth	r0, r0
    d7c6:	f7fe fe3d 	bl	c444 <attMsgAlloc>
    d7ca:	6068      	str	r0, [r5, #4]
    d7cc:	e7de      	b.n	d78c <attsHandleValueIndNtf+0x64>
    d7ce:	4628      	mov	r0, r5
    d7d0:	f00b fccc 	bl	1916c <WsfMsgFree>
    d7d4:	2270      	movs	r2, #112	; 0x70
    d7d6:	4621      	mov	r1, r4
    d7d8:	4630      	mov	r0, r6
    d7da:	f7ff feff 	bl	d5dc <attsExecCallback>
    d7de:	e7b5      	b.n	d74c <attsHandleValueIndNtf+0x24>
    d7e0:	2277      	movs	r2, #119	; 0x77
    d7e2:	e7f8      	b.n	d7d6 <attsHandleValueIndNtf+0xae>
    d7e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d7e8:	100035f0 	.word	0x100035f0

0000d7ec <attsIndConnCback>:
    d7ec:	788b      	ldrb	r3, [r1, #2]
    d7ee:	2b28      	cmp	r3, #40	; 0x28
    d7f0:	b570      	push	{r4, r5, r6, lr}
    d7f2:	4606      	mov	r6, r0
    d7f4:	d117      	bne.n	d826 <attsIndConnCback+0x3a>
    d7f6:	78cc      	ldrb	r4, [r1, #3]
    d7f8:	b904      	cbnz	r4, d7fc <attsIndConnCback+0x10>
    d7fa:	7a0c      	ldrb	r4, [r1, #8]
    d7fc:	7f35      	ldrb	r5, [r6, #28]
    d7fe:	490a      	ldr	r1, [pc, #40]	; (d828 <attsIndConnCback+0x3c>)
    d800:	232c      	movs	r3, #44	; 0x2c
    d802:	3d01      	subs	r5, #1
    d804:	fb03 1505 	mla	r5, r3, r5, r1
    d808:	3420      	adds	r4, #32
    d80a:	8aab      	ldrh	r3, [r5, #20]
    d80c:	b2e4      	uxtb	r4, r4
    d80e:	b123      	cbz	r3, d81a <attsIndConnCback+0x2e>
    d810:	4628      	mov	r0, r5
    d812:	f00b fe69 	bl	194e8 <WsfTimerStop>
    d816:	2300      	movs	r3, #0
    d818:	82ab      	strh	r3, [r5, #20]
    d81a:	4622      	mov	r2, r4
    d81c:	4629      	mov	r1, r5
    d81e:	7f30      	ldrb	r0, [r6, #28]
    d820:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d824:	e6e5      	b.n	d5f2 <attsIndNtfCallback>
    d826:	bd70      	pop	{r4, r5, r6, pc}
    d828:	100038f4 	.word	0x100038f4

0000d82c <attsProcValueCnf>:
    d82c:	b570      	push	{r4, r5, r6, lr}
    d82e:	4606      	mov	r6, r0
    d830:	7f00      	ldrb	r0, [r0, #28]
    d832:	f7ff fec5 	bl	d5c0 <attsIndCcbByConnId>
    d836:	4604      	mov	r4, r0
    d838:	b168      	cbz	r0, d856 <attsProcValueCnf+0x2a>
    d83a:	8a83      	ldrh	r3, [r0, #20]
    d83c:	b15b      	cbz	r3, d856 <attsProcValueCnf+0x2a>
    d83e:	2300      	movs	r3, #0
    d840:	8283      	strh	r3, [r0, #20]
    d842:	f00b fe51 	bl	194e8 <WsfTimerStop>
    d846:	7fb5      	ldrb	r5, [r6, #30]
    d848:	b92d      	cbnz	r5, d856 <attsProcValueCnf+0x2a>
    d84a:	462a      	mov	r2, r5
    d84c:	8ae1      	ldrh	r1, [r4, #22]
    d84e:	7f30      	ldrb	r0, [r6, #28]
    d850:	f7ff fec4 	bl	d5dc <attsExecCallback>
    d854:	82e5      	strh	r5, [r4, #22]
    d856:	bd70      	pop	{r4, r5, r6, pc}

0000d858 <AttsIndInit>:
    d858:	b510      	push	{r4, lr}
    d85a:	4909      	ldr	r1, [pc, #36]	; (d880 <AttsIndInit+0x28>)
    d85c:	4a09      	ldr	r2, [pc, #36]	; (d884 <AttsIndInit+0x2c>)
    d85e:	f891 0110 	ldrb.w	r0, [r1, #272]	; 0x110
    d862:	2300      	movs	r3, #0
    d864:	eb01 1443 	add.w	r4, r1, r3, lsl #5
    d868:	3301      	adds	r3, #1
    d86a:	2b08      	cmp	r3, #8
    d86c:	6114      	str	r4, [r2, #16]
    d86e:	7210      	strb	r0, [r2, #8]
    d870:	8153      	strh	r3, [r2, #10]
    d872:	f102 022c 	add.w	r2, r2, #44	; 0x2c
    d876:	d1f5      	bne.n	d864 <AttsIndInit+0xc>
    d878:	4b03      	ldr	r3, [pc, #12]	; (d888 <AttsIndInit+0x30>)
    d87a:	4a04      	ldr	r2, [pc, #16]	; (d88c <AttsIndInit+0x34>)
    d87c:	609a      	str	r2, [r3, #8]
    d87e:	bd10      	pop	{r4, pc}
    d880:	100035f0 	.word	0x100035f0
    d884:	100038f4 	.word	0x100038f4
    d888:	10003a54 	.word	0x10003a54
    d88c:	0002468c 	.word	0x0002468c

0000d890 <AttsHandleValueInd>:
    d890:	b513      	push	{r0, r1, r4, lr}
    d892:	f04f 0c00 	mov.w	ip, #0
    d896:	241d      	movs	r4, #29
    d898:	e9cd 4c00 	strd	r4, ip, [sp]
    d89c:	f7ff ff44 	bl	d728 <attsHandleValueIndNtf>
    d8a0:	b002      	add	sp, #8
    d8a2:	bd10      	pop	{r4, pc}

0000d8a4 <AttsHandleValueNtf>:
    d8a4:	b513      	push	{r0, r1, r4, lr}
    d8a6:	f04f 0c00 	mov.w	ip, #0
    d8aa:	241b      	movs	r4, #27
    d8ac:	e9cd 4c00 	strd	r4, ip, [sp]
    d8b0:	f7ff ff3a 	bl	d728 <attsHandleValueIndNtf>
    d8b4:	b002      	add	sp, #8
    d8b6:	bd10      	pop	{r4, pc}

0000d8b8 <AttsHandleValueIndZeroCpy>:
    d8b8:	b513      	push	{r0, r1, r4, lr}
    d8ba:	f04f 0c01 	mov.w	ip, #1
    d8be:	241d      	movs	r4, #29
    d8c0:	e9cd 4c00 	strd	r4, ip, [sp]
    d8c4:	f7ff ff30 	bl	d728 <attsHandleValueIndNtf>
    d8c8:	b002      	add	sp, #8
    d8ca:	bd10      	pop	{r4, pc}

0000d8cc <AttsHandleValueNtfZeroCpy>:
    d8cc:	b513      	push	{r0, r1, r4, lr}
    d8ce:	f04f 0c01 	mov.w	ip, #1
    d8d2:	241b      	movs	r4, #27
    d8d4:	e9cd 4c00 	strd	r4, ip, [sp]
    d8d8:	f7ff ff26 	bl	d728 <attsHandleValueIndNtf>
    d8dc:	b002      	add	sp, #8
    d8de:	bd10      	pop	{r4, pc}

0000d8e0 <attsL2cCtrlCback>:
    d8e0:	4b01      	ldr	r3, [pc, #4]	; (d8e8 <attsL2cCtrlCback+0x8>)
    d8e2:	689b      	ldr	r3, [r3, #8]
    d8e4:	685b      	ldr	r3, [r3, #4]
    d8e6:	4718      	bx	r3
    d8e8:	10003a54 	.word	0x10003a54

0000d8ec <attsMsgCback>:
    d8ec:	b410      	push	{r4}
    d8ee:	7883      	ldrb	r3, [r0, #2]
    d8f0:	2b20      	cmp	r3, #32
    d8f2:	d106      	bne.n	d902 <attsMsgCback+0x16>
    d8f4:	2200      	movs	r2, #0
    d8f6:	2104      	movs	r1, #4
    d8f8:	7800      	ldrb	r0, [r0, #0]
    d8fa:	f85d 4b04 	ldr.w	r4, [sp], #4
    d8fe:	f002 b839 	b.w	f974 <DmConnSetIdle>
    d902:	2b22      	cmp	r3, #34	; 0x22
    d904:	4b03      	ldr	r3, [pc, #12]	; (d914 <attsMsgCback+0x28>)
    d906:	f85d 4b04 	ldr.w	r4, [sp], #4
    d90a:	bf96      	itet	ls
    d90c:	689b      	ldrls	r3, [r3, #8]
    d90e:	68db      	ldrhi	r3, [r3, #12]
    d910:	689b      	ldrls	r3, [r3, #8]
    d912:	4718      	bx	r3
    d914:	10003a54 	.word	0x10003a54

0000d918 <attsErrRsp>:
    d918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d91c:	4605      	mov	r5, r0
    d91e:	200d      	movs	r0, #13
    d920:	460f      	mov	r7, r1
    d922:	4614      	mov	r4, r2
    d924:	461e      	mov	r6, r3
    d926:	f7fe fd8d 	bl	c444 <attMsgAlloc>
    d92a:	b170      	cbz	r0, d94a <attsErrRsp+0x32>
    d92c:	7284      	strb	r4, [r0, #10]
    d92e:	2301      	movs	r3, #1
    d930:	0a24      	lsrs	r4, r4, #8
    d932:	7203      	strb	r3, [r0, #8]
    d934:	7247      	strb	r7, [r0, #9]
    d936:	72c4      	strb	r4, [r0, #11]
    d938:	7306      	strb	r6, [r0, #12]
    d93a:	4603      	mov	r3, r0
    d93c:	4629      	mov	r1, r5
    d93e:	2205      	movs	r2, #5
    d940:	2004      	movs	r0, #4
    d942:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d946:	f002 bf07 	b.w	10758 <L2cDataReq>
    d94a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d94e <attsDataCback>:
    d94e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d952:	4680      	mov	r8, r0
    d954:	460e      	mov	r6, r1
    d956:	4617      	mov	r7, r2
    d958:	f7fe fd22 	bl	c3a0 <attCcbByHandle>
    d95c:	b368      	cbz	r0, d9ba <attsDataCback+0x6c>
    d95e:	7a39      	ldrb	r1, [r7, #8]
    d960:	2912      	cmp	r1, #18
    d962:	d903      	bls.n	d96c <attsDataCback+0x1e>
    d964:	f1a1 0316 	sub.w	r3, r1, #22
    d968:	2b08      	cmp	r3, #8
    d96a:	d80e      	bhi.n	d98a <attsDataCback+0x3c>
    d96c:	084b      	lsrs	r3, r1, #1
    d96e:	4a14      	ldr	r2, [pc, #80]	; (d9c0 <attsDataCback+0x72>)
    d970:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    d974:	b195      	cbz	r5, d99c <attsDataCback+0x4e>
    d976:	4a13      	ldr	r2, [pc, #76]	; (d9c4 <attsDataCback+0x76>)
    d978:	5cd3      	ldrb	r3, [r2, r3]
    d97a:	42b3      	cmp	r3, r6
    d97c:	d81b      	bhi.n	d9b6 <attsDataCback+0x68>
    d97e:	463a      	mov	r2, r7
    d980:	4631      	mov	r1, r6
    d982:	462b      	mov	r3, r5
    d984:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d988:	4718      	bx	r3
    d98a:	2952      	cmp	r1, #82	; 0x52
    d98c:	d004      	beq.n	d998 <attsDataCback+0x4a>
    d98e:	29d2      	cmp	r1, #210	; 0xd2
    d990:	bf0c      	ite	eq
    d992:	2310      	moveq	r3, #16
    d994:	2300      	movne	r3, #0
    d996:	e7ea      	b.n	d96e <attsDataCback+0x20>
    d998:	230a      	movs	r3, #10
    d99a:	e7e8      	b.n	d96e <attsDataCback+0x20>
    d99c:	2306      	movs	r3, #6
    d99e:	2902      	cmp	r1, #2
    d9a0:	d00b      	beq.n	d9ba <attsDataCback+0x6c>
    d9a2:	291e      	cmp	r1, #30
    d9a4:	d009      	beq.n	d9ba <attsDataCback+0x6c>
    d9a6:	f011 0240 	ands.w	r2, r1, #64	; 0x40
    d9aa:	d106      	bne.n	d9ba <attsDataCback+0x6c>
    d9ac:	4640      	mov	r0, r8
    d9ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d9b2:	f7ff bfb1 	b.w	d918 <attsErrRsp>
    d9b6:	2304      	movs	r3, #4
    d9b8:	e7f1      	b.n	d99e <attsDataCback+0x50>
    d9ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d9be:	bf00      	nop
    d9c0:	10002b10 	.word	0x10002b10
    d9c4:	0002469c 	.word	0x0002469c

0000d9c8 <attsClearPrepWrites>:
    d9c8:	b510      	push	{r4, lr}
    d9ca:	4604      	mov	r4, r0
    d9cc:	4620      	mov	r0, r4
    d9ce:	f00b fc41 	bl	19254 <WsfQueueDeq>
    d9d2:	b900      	cbnz	r0, d9d6 <attsClearPrepWrites+0xe>
    d9d4:	bd10      	pop	{r4, pc}
    d9d6:	f00b fb61 	bl	1909c <WsfBufFree>
    d9da:	e7f7      	b.n	d9cc <attsClearPrepWrites+0x4>

0000d9dc <attsConnCback>:
    d9dc:	788b      	ldrb	r3, [r1, #2]
    d9de:	2b28      	cmp	r3, #40	; 0x28
    d9e0:	b570      	push	{r4, r5, r6, lr}
    d9e2:	4604      	mov	r4, r0
    d9e4:	460d      	mov	r5, r1
    d9e6:	d10a      	bne.n	d9fe <attsConnCback+0x22>
    d9e8:	f7ff ffee 	bl	d9c8 <attsClearPrepWrites>
    d9ec:	7f20      	ldrb	r0, [r4, #28]
    d9ee:	f001 ffdb 	bl	f9a8 <DmConnCheckIdle>
    d9f2:	0743      	lsls	r3, r0, #29
    d9f4:	d503      	bpl.n	d9fe <attsConnCback+0x22>
    d9f6:	f104 0008 	add.w	r0, r4, #8
    d9fa:	f00b fd75 	bl	194e8 <WsfTimerStop>
    d9fe:	4b04      	ldr	r3, [pc, #16]	; (da10 <attsConnCback+0x34>)
    da00:	689b      	ldr	r3, [r3, #8]
    da02:	4629      	mov	r1, r5
    da04:	4620      	mov	r0, r4
    da06:	68db      	ldr	r3, [r3, #12]
    da08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    da0c:	4718      	bx	r3
    da0e:	bf00      	nop
    da10:	10003a54 	.word	0x10003a54

0000da14 <attsDiscBusy>:
    da14:	b538      	push	{r3, r4, r5, lr}
    da16:	4d0d      	ldr	r5, [pc, #52]	; (da4c <attsDiscBusy+0x38>)
    da18:	682b      	ldr	r3, [r5, #0]
    da1a:	681b      	ldr	r3, [r3, #0]
    da1c:	4604      	mov	r4, r0
    da1e:	b1a3      	cbz	r3, da4a <attsDiscBusy+0x36>
    da20:	2104      	movs	r1, #4
    da22:	7f00      	ldrb	r0, [r0, #28]
    da24:	2201      	movs	r2, #1
    da26:	f001 ffa5 	bl	f974 <DmConnSetIdle>
    da2a:	4b09      	ldr	r3, [pc, #36]	; (da50 <attsDiscBusy+0x3c>)
    da2c:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
    da30:	7423      	strb	r3, [r4, #16]
    da32:	2320      	movs	r3, #32
    da34:	7523      	strb	r3, [r4, #20]
    da36:	7f23      	ldrb	r3, [r4, #28]
    da38:	8263      	strh	r3, [r4, #18]
    da3a:	682b      	ldr	r3, [r5, #0]
    da3c:	f104 0008 	add.w	r0, r4, #8
    da40:	6819      	ldr	r1, [r3, #0]
    da42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    da46:	f00b bd2b 	b.w	194a0 <WsfTimerStartSec>
    da4a:	bd38      	pop	{r3, r4, r5, pc}
    da4c:	10002ba4 	.word	0x10002ba4
    da50:	100035f0 	.word	0x100035f0

0000da54 <AttsInit>:
    da54:	4b06      	ldr	r3, [pc, #24]	; (da70 <AttsInit+0x1c>)
    da56:	2200      	movs	r2, #0
    da58:	e9c3 2200 	strd	r2, r2, [r3]
    da5c:	4a05      	ldr	r2, [pc, #20]	; (da74 <AttsInit+0x20>)
    da5e:	609a      	str	r2, [r3, #8]
    da60:	4a05      	ldr	r2, [pc, #20]	; (da78 <AttsInit+0x24>)
    da62:	60da      	str	r2, [r3, #12]
    da64:	4b05      	ldr	r3, [pc, #20]	; (da7c <AttsInit+0x28>)
    da66:	4a06      	ldr	r2, [pc, #24]	; (da80 <AttsInit+0x2c>)
    da68:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    da6c:	4770      	bx	lr
    da6e:	bf00      	nop
    da70:	10003a54 	.word	0x10003a54
    da74:	000244f4 	.word	0x000244f4
    da78:	0000c33d 	.word	0x0000c33d
    da7c:	100035f0 	.word	0x100035f0
    da80:	000246b0 	.word	0x000246b0

0000da84 <AttsAuthorRegister>:
    da84:	4b01      	ldr	r3, [pc, #4]	; (da8c <AttsAuthorRegister+0x8>)
    da86:	6118      	str	r0, [r3, #16]
    da88:	4770      	bx	lr
    da8a:	bf00      	nop
    da8c:	10003a54 	.word	0x10003a54

0000da90 <AttsAddGroup>:
    da90:	b510      	push	{r4, lr}
    da92:	4604      	mov	r4, r0
    da94:	f006 fef6 	bl	14884 <WsfTaskLock>
    da98:	4b09      	ldr	r3, [pc, #36]	; (dac0 <AttsAddGroup+0x30>)
    da9a:	681b      	ldr	r3, [r3, #0]
    da9c:	2200      	movs	r2, #0
    da9e:	b11b      	cbz	r3, daa8 <AttsAddGroup+0x18>
    daa0:	8a20      	ldrh	r0, [r4, #16]
    daa2:	8a19      	ldrh	r1, [r3, #16]
    daa4:	4288      	cmp	r0, r1
    daa6:	d207      	bcs.n	dab8 <AttsAddGroup+0x28>
    daa8:	4621      	mov	r1, r4
    daaa:	4805      	ldr	r0, [pc, #20]	; (dac0 <AttsAddGroup+0x30>)
    daac:	f00b fc0a 	bl	192c4 <WsfQueueInsert>
    dab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dab4:	f006 beec 	b.w	14890 <WsfTaskUnlock>
    dab8:	461a      	mov	r2, r3
    daba:	681b      	ldr	r3, [r3, #0]
    dabc:	e7ef      	b.n	da9e <AttsAddGroup+0xe>
    dabe:	bf00      	nop
    dac0:	10003a54 	.word	0x10003a54

0000dac4 <AttsRemoveGroup>:
    dac4:	b510      	push	{r4, lr}
    dac6:	4604      	mov	r4, r0
    dac8:	f006 fedc 	bl	14884 <WsfTaskLock>
    dacc:	4b08      	ldr	r3, [pc, #32]	; (daf0 <AttsRemoveGroup+0x2c>)
    dace:	6819      	ldr	r1, [r3, #0]
    dad0:	2200      	movs	r2, #0
    dad2:	b919      	cbnz	r1, dadc <AttsRemoveGroup+0x18>
    dad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dad8:	f006 beda 	b.w	14890 <WsfTaskUnlock>
    dadc:	8a0b      	ldrh	r3, [r1, #16]
    dade:	42a3      	cmp	r3, r4
    dae0:	d002      	beq.n	dae8 <AttsRemoveGroup+0x24>
    dae2:	460a      	mov	r2, r1
    dae4:	6809      	ldr	r1, [r1, #0]
    dae6:	e7f4      	b.n	dad2 <AttsRemoveGroup+0xe>
    dae8:	4801      	ldr	r0, [pc, #4]	; (daf0 <AttsRemoveGroup+0x2c>)
    daea:	f00b fc15 	bl	19318 <WsfQueueRemove>
    daee:	e7f1      	b.n	dad4 <AttsRemoveGroup+0x10>
    daf0:	10003a54 	.word	0x10003a54

0000daf4 <AttsSetAttr>:
    daf4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    daf6:	4605      	mov	r5, r0
    daf8:	460e      	mov	r6, r1
    dafa:	4614      	mov	r4, r2
    dafc:	f006 fec2 	bl	14884 <WsfTaskLock>
    db00:	4628      	mov	r0, r5
    db02:	a901      	add	r1, sp, #4
    db04:	f000 f862 	bl	dbcc <attsFindByHandle>
    db08:	4605      	mov	r5, r0
    db0a:	b198      	cbz	r0, db34 <AttsSetAttr+0x40>
    db0c:	8983      	ldrh	r3, [r0, #12]
    db0e:	42b3      	cmp	r3, r6
    db10:	d312      	bcc.n	db38 <AttsSetAttr+0x44>
    db12:	4621      	mov	r1, r4
    db14:	4632      	mov	r2, r6
    db16:	6840      	ldr	r0, [r0, #4]
    db18:	f7fe faf2 	bl	c100 <memcpy>
    db1c:	7bac      	ldrb	r4, [r5, #14]
    db1e:	f014 0408 	ands.w	r4, r4, #8
    db22:	d002      	beq.n	db2a <AttsSetAttr+0x36>
    db24:	68ab      	ldr	r3, [r5, #8]
    db26:	2400      	movs	r4, #0
    db28:	801e      	strh	r6, [r3, #0]
    db2a:	f006 feb1 	bl	14890 <WsfTaskUnlock>
    db2e:	4620      	mov	r0, r4
    db30:	b002      	add	sp, #8
    db32:	bd70      	pop	{r4, r5, r6, pc}
    db34:	240a      	movs	r4, #10
    db36:	e7f8      	b.n	db2a <AttsSetAttr+0x36>
    db38:	240d      	movs	r4, #13
    db3a:	e7f6      	b.n	db2a <AttsSetAttr+0x36>

0000db3c <AttsGetAttr>:
    db3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    db3e:	460d      	mov	r5, r1
    db40:	a901      	add	r1, sp, #4
    db42:	4614      	mov	r4, r2
    db44:	f000 f842 	bl	dbcc <attsFindByHandle>
    db48:	b138      	cbz	r0, db5a <AttsGetAttr+0x1e>
    db4a:	6883      	ldr	r3, [r0, #8]
    db4c:	881b      	ldrh	r3, [r3, #0]
    db4e:	802b      	strh	r3, [r5, #0]
    db50:	6843      	ldr	r3, [r0, #4]
    db52:	6023      	str	r3, [r4, #0]
    db54:	2000      	movs	r0, #0
    db56:	b003      	add	sp, #12
    db58:	bd30      	pop	{r4, r5, pc}
    db5a:	200a      	movs	r0, #10
    db5c:	e7fb      	b.n	db56 <AttsGetAttr+0x1a>

0000db5e <AttsErrorTest>:
    db5e:	4b02      	ldr	r3, [pc, #8]	; (db68 <AttsErrorTest+0xa>)
    db60:	f883 0111 	strb.w	r0, [r3, #273]	; 0x111
    db64:	4770      	bx	lr
    db66:	bf00      	nop
    db68:	100035f0 	.word	0x100035f0

0000db6c <attsUuidCmp>:
    db6c:	b510      	push	{r4, lr}
    db6e:	4604      	mov	r4, r0
    db70:	4613      	mov	r3, r2
    db72:	7ba2      	ldrb	r2, [r4, #14]
    db74:	6800      	ldr	r0, [r0, #0]
    db76:	07d2      	lsls	r2, r2, #31
    db78:	d409      	bmi.n	db8e <attsUuidCmp+0x22>
    db7a:	2902      	cmp	r1, #2
    db7c:	d10c      	bne.n	db98 <attsUuidCmp+0x2c>
    db7e:	460a      	mov	r2, r1
    db80:	4619      	mov	r1, r3
    db82:	f012 fb9d 	bl	202c0 <memcmp>
    db86:	fab0 f080 	clz	r0, r0
    db8a:	0940      	lsrs	r0, r0, #5
    db8c:	bd10      	pop	{r4, pc}
    db8e:	2910      	cmp	r1, #16
    db90:	d0f5      	beq.n	db7e <attsUuidCmp+0x12>
    db92:	4601      	mov	r1, r0
    db94:	4618      	mov	r0, r3
    db96:	e002      	b.n	db9e <attsUuidCmp+0x32>
    db98:	2910      	cmp	r1, #16
    db9a:	d1fa      	bne.n	db92 <attsUuidCmp+0x26>
    db9c:	4619      	mov	r1, r3
    db9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dba2:	f7fe bc11 	b.w	c3c8 <attUuidCmp16to128>

0000dba6 <attsUuid16Cmp>:
    dba6:	2902      	cmp	r1, #2
    dba8:	4603      	mov	r3, r0
    dbaa:	d10c      	bne.n	dbc6 <attsUuid16Cmp+0x20>
    dbac:	7800      	ldrb	r0, [r0, #0]
    dbae:	7811      	ldrb	r1, [r2, #0]
    dbb0:	4288      	cmp	r0, r1
    dbb2:	d106      	bne.n	dbc2 <attsUuid16Cmp+0x1c>
    dbb4:	7858      	ldrb	r0, [r3, #1]
    dbb6:	7853      	ldrb	r3, [r2, #1]
    dbb8:	1ac3      	subs	r3, r0, r3
    dbba:	4258      	negs	r0, r3
    dbbc:	4158      	adcs	r0, r3
    dbbe:	b2c0      	uxtb	r0, r0
    dbc0:	4770      	bx	lr
    dbc2:	2000      	movs	r0, #0
    dbc4:	e7fb      	b.n	dbbe <attsUuid16Cmp+0x18>
    dbc6:	4611      	mov	r1, r2
    dbc8:	f7fe bbfe 	b.w	c3c8 <attUuidCmp16to128>

0000dbcc <attsFindByHandle>:
    dbcc:	b510      	push	{r4, lr}
    dbce:	4b08      	ldr	r3, [pc, #32]	; (dbf0 <attsFindByHandle+0x24>)
    dbd0:	681b      	ldr	r3, [r3, #0]
    dbd2:	b90b      	cbnz	r3, dbd8 <attsFindByHandle+0xc>
    dbd4:	4618      	mov	r0, r3
    dbd6:	e00a      	b.n	dbee <attsFindByHandle+0x22>
    dbd8:	8a1a      	ldrh	r2, [r3, #16]
    dbda:	4282      	cmp	r2, r0
    dbdc:	d8f8      	bhi.n	dbd0 <attsFindByHandle+0x4>
    dbde:	8a5c      	ldrh	r4, [r3, #18]
    dbe0:	4284      	cmp	r4, r0
    dbe2:	d3f5      	bcc.n	dbd0 <attsFindByHandle+0x4>
    dbe4:	600b      	str	r3, [r1, #0]
    dbe6:	685b      	ldr	r3, [r3, #4]
    dbe8:	1a80      	subs	r0, r0, r2
    dbea:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    dbee:	bd10      	pop	{r4, pc}
    dbf0:	10003a54 	.word	0x10003a54

0000dbf4 <attsFindInRange>:
    dbf4:	b530      	push	{r4, r5, lr}
    dbf6:	4b0a      	ldr	r3, [pc, #40]	; (dc20 <attsFindInRange+0x2c>)
    dbf8:	681b      	ldr	r3, [r3, #0]
    dbfa:	b90b      	cbnz	r3, dc00 <attsFindInRange+0xc>
    dbfc:	4618      	mov	r0, r3
    dbfe:	e00d      	b.n	dc1c <attsFindInRange+0x28>
    dc00:	8a1c      	ldrh	r4, [r3, #16]
    dc02:	4284      	cmp	r4, r0
    dc04:	d902      	bls.n	dc0c <attsFindInRange+0x18>
    dc06:	428c      	cmp	r4, r1
    dc08:	d8f6      	bhi.n	dbf8 <attsFindInRange+0x4>
    dc0a:	4620      	mov	r0, r4
    dc0c:	8a5d      	ldrh	r5, [r3, #18]
    dc0e:	4285      	cmp	r5, r0
    dc10:	d3f2      	bcc.n	dbf8 <attsFindInRange+0x4>
    dc12:	685b      	ldr	r3, [r3, #4]
    dc14:	1b04      	subs	r4, r0, r4
    dc16:	eb03 1404 	add.w	r4, r3, r4, lsl #4
    dc1a:	6014      	str	r4, [r2, #0]
    dc1c:	bd30      	pop	{r4, r5, pc}
    dc1e:	bf00      	nop
    dc20:	10003a54 	.word	0x10003a54

0000dc24 <attsPermissions>:
    dc24:	420b      	tst	r3, r1
    dc26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dc2a:	4606      	mov	r6, r0
    dc2c:	460d      	mov	r5, r1
    dc2e:	4617      	mov	r7, r2
    dc30:	461c      	mov	r4, r3
    dc32:	d105      	bne.n	dc40 <attsPermissions+0x1c>
    dc34:	2901      	cmp	r1, #1
    dc36:	bf0c      	ite	eq
    dc38:	2002      	moveq	r0, #2
    dc3a:	2003      	movne	r0, #3
    dc3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dc40:	2910      	cmp	r1, #16
    dc42:	bf08      	it	eq
    dc44:	091c      	lsreq	r4, r3, #4
    dc46:	f014 0f0e 	tst.w	r4, #14
    dc4a:	d101      	bne.n	dc50 <attsPermissions+0x2c>
    dc4c:	2000      	movs	r0, #0
    dc4e:	e7f5      	b.n	dc3c <attsPermissions+0x18>
    dc50:	f001 fe86 	bl	f960 <DmConnSecLevel>
    dc54:	0722      	lsls	r2, r4, #28
    dc56:	d500      	bpl.n	dc5a <attsPermissions+0x36>
    dc58:	b180      	cbz	r0, dc7c <attsPermissions+0x58>
    dc5a:	f004 030a 	and.w	r3, r4, #10
    dc5e:	2b0a      	cmp	r3, #10
    dc60:	d101      	bne.n	dc66 <attsPermissions+0x42>
    dc62:	2801      	cmp	r0, #1
    dc64:	d90a      	bls.n	dc7c <attsPermissions+0x58>
    dc66:	0763      	lsls	r3, r4, #29
    dc68:	d5f0      	bpl.n	dc4c <attsPermissions+0x28>
    dc6a:	4b06      	ldr	r3, [pc, #24]	; (dc84 <attsPermissions+0x60>)
    dc6c:	691b      	ldr	r3, [r3, #16]
    dc6e:	b13b      	cbz	r3, dc80 <attsPermissions+0x5c>
    dc70:	463a      	mov	r2, r7
    dc72:	4629      	mov	r1, r5
    dc74:	4630      	mov	r0, r6
    dc76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    dc7a:	4718      	bx	r3
    dc7c:	2005      	movs	r0, #5
    dc7e:	e7dd      	b.n	dc3c <attsPermissions+0x18>
    dc80:	2008      	movs	r0, #8
    dc82:	e7db      	b.n	dc3c <attsPermissions+0x18>
    dc84:	10003a54 	.word	0x10003a54

0000dc88 <attsProcMtuReq>:
    dc88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dc8a:	7a93      	ldrb	r3, [r2, #10]
    dc8c:	7a54      	ldrb	r4, [r2, #9]
    dc8e:	4d17      	ldr	r5, [pc, #92]	; (dcec <attsProcMtuReq+0x64>)
    dc90:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    dc94:	b2a4      	uxth	r4, r4
    dc96:	682b      	ldr	r3, [r5, #0]
    dc98:	2c17      	cmp	r4, #23
    dc9a:	bf38      	it	cc
    dc9c:	2417      	movcc	r4, #23
    dc9e:	889f      	ldrh	r7, [r3, #4]
    dca0:	4606      	mov	r6, r0
    dca2:	f009 f80b 	bl	16cbc <HciGetMaxRxAclLen>
    dca6:	3804      	subs	r0, #4
    dca8:	4287      	cmp	r7, r0
    dcaa:	da1a      	bge.n	dce2 <attsProcMtuReq+0x5a>
    dcac:	682b      	ldr	r3, [r5, #0]
    dcae:	889d      	ldrh	r5, [r3, #4]
    dcb0:	42a5      	cmp	r5, r4
    dcb2:	f04f 000b 	mov.w	r0, #11
    dcb6:	bf28      	it	cs
    dcb8:	4625      	movcs	r5, r4
    dcba:	f7fe fbc3 	bl	c444 <attMsgAlloc>
    dcbe:	4603      	mov	r3, r0
    dcc0:	b140      	cbz	r0, dcd4 <attsProcMtuReq+0x4c>
    dcc2:	0a29      	lsrs	r1, r5, #8
    dcc4:	2203      	movs	r2, #3
    dcc6:	7202      	strb	r2, [r0, #8]
    dcc8:	7245      	strb	r5, [r0, #9]
    dcca:	7281      	strb	r1, [r0, #10]
    dccc:	8b31      	ldrh	r1, [r6, #24]
    dcce:	2004      	movs	r0, #4
    dcd0:	f002 fd42 	bl	10758 <L2cDataReq>
    dcd4:	462a      	mov	r2, r5
    dcd6:	4621      	mov	r1, r4
    dcd8:	4630      	mov	r0, r6
    dcda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    dcde:	f7fe bb9f 	b.w	c420 <attSetMtu>
    dce2:	f008 ffeb 	bl	16cbc <HciGetMaxRxAclLen>
    dce6:	1f05      	subs	r5, r0, #4
    dce8:	b2ad      	uxth	r5, r5
    dcea:	e7e1      	b.n	dcb0 <attsProcMtuReq+0x28>
    dcec:	10002ba4 	.word	0x10002ba4

0000dcf0 <attsProcFindInfoReq>:
    dcf0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    dcf4:	7a93      	ldrb	r3, [r2, #10]
    dcf6:	7a57      	ldrb	r7, [r2, #9]
    dcf8:	eb07 2703 	add.w	r7, r7, r3, lsl #8
    dcfc:	b2bf      	uxth	r7, r7
    dcfe:	4680      	mov	r8, r0
    dd00:	2f00      	cmp	r7, #0
    dd02:	d076      	beq.n	ddf2 <attsProcFindInfoReq+0x102>
    dd04:	7b13      	ldrb	r3, [r2, #12]
    dd06:	f892 900b 	ldrb.w	r9, [r2, #11]
    dd0a:	eb09 2903 	add.w	r9, r9, r3, lsl #8
    dd0e:	fa1f f989 	uxth.w	r9, r9
    dd12:	454f      	cmp	r7, r9
    dd14:	d86d      	bhi.n	ddf2 <attsProcFindInfoReq+0x102>
    dd16:	8b40      	ldrh	r0, [r0, #26]
    dd18:	3008      	adds	r0, #8
    dd1a:	b280      	uxth	r0, r0
    dd1c:	f7fe fb92 	bl	c444 <attMsgAlloc>
    dd20:	4606      	mov	r6, r0
    dd22:	2800      	cmp	r0, #0
    dd24:	d067      	beq.n	ddf6 <attsProcFindInfoReq+0x106>
    dd26:	2305      	movs	r3, #5
    dd28:	7203      	strb	r3, [r0, #8]
    dd2a:	2301      	movs	r3, #1
    dd2c:	7243      	strb	r3, [r0, #9]
    dd2e:	f100 040e 	add.w	r4, r0, #14
    dd32:	f64f 7aff 	movw	sl, #65535	; 0xffff
    dd36:	4638      	mov	r0, r7
    dd38:	aa01      	add	r2, sp, #4
    dd3a:	4649      	mov	r1, r9
    dd3c:	1f25      	subs	r5, r4, #4
    dd3e:	f7ff ff59 	bl	dbf4 <attsFindInRange>
    dd42:	b1d0      	cbz	r0, dd7a <attsProcFindInfoReq+0x8a>
    dd44:	9b01      	ldr	r3, [sp, #4]
    dd46:	7b9b      	ldrb	r3, [r3, #14]
    dd48:	07db      	lsls	r3, r3, #31
    dd4a:	d530      	bpl.n	ddae <attsProcFindInfoReq+0xbe>
    dd4c:	f106 030a 	add.w	r3, r6, #10
    dd50:	429d      	cmp	r5, r3
    dd52:	d112      	bne.n	dd7a <attsProcFindInfoReq+0x8a>
    dd54:	7028      	strb	r0, [r5, #0]
    dd56:	2302      	movs	r3, #2
    dd58:	0a00      	lsrs	r0, r0, #8
    dd5a:	f805 3c01 	strb.w	r3, [r5, #-1]
    dd5e:	7068      	strb	r0, [r5, #1]
    dd60:	9b01      	ldr	r3, [sp, #4]
    dd62:	681b      	ldr	r3, [r3, #0]
    dd64:	f106 020c 	add.w	r2, r6, #12
    dd68:	f103 0110 	add.w	r1, r3, #16
    dd6c:	f853 0b04 	ldr.w	r0, [r3], #4
    dd70:	f842 0b04 	str.w	r0, [r2], #4
    dd74:	428b      	cmp	r3, r1
    dd76:	d1f9      	bne.n	dd6c <attsProcFindInfoReq+0x7c>
    dd78:	3512      	adds	r5, #18
    dd7a:	f106 030a 	add.w	r3, r6, #10
    dd7e:	429d      	cmp	r5, r3
    dd80:	d13b      	bne.n	ddfa <attsProcFindInfoReq+0x10a>
    dd82:	4630      	mov	r0, r6
    dd84:	f00b f9f2 	bl	1916c <WsfMsgFree>
    dd88:	240a      	movs	r4, #10
    dd8a:	4640      	mov	r0, r8
    dd8c:	f7ff fe42 	bl	da14 <attsDiscBusy>
    dd90:	f8b8 0018 	ldrh.w	r0, [r8, #24]
    dd94:	bb9c      	cbnz	r4, ddfe <attsProcFindInfoReq+0x10e>
    dd96:	f106 0208 	add.w	r2, r6, #8
    dd9a:	1aaa      	subs	r2, r5, r2
    dd9c:	4601      	mov	r1, r0
    dd9e:	4633      	mov	r3, r6
    dda0:	b292      	uxth	r2, r2
    dda2:	2004      	movs	r0, #4
    dda4:	f002 fcd8 	bl	10758 <L2cDataReq>
    dda8:	b002      	add	sp, #8
    ddaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ddae:	f8b8 301a 	ldrh.w	r3, [r8, #26]
    ddb2:	3308      	adds	r3, #8
    ddb4:	4433      	add	r3, r6
    ddb6:	429c      	cmp	r4, r3
    ddb8:	4622      	mov	r2, r4
    ddba:	d8de      	bhi.n	dd7a <attsProcFindInfoReq+0x8a>
    ddbc:	0a03      	lsrs	r3, r0, #8
    ddbe:	f804 0c04 	strb.w	r0, [r4, #-4]
    ddc2:	f804 3c03 	strb.w	r3, [r4, #-3]
    ddc6:	9b01      	ldr	r3, [sp, #4]
    ddc8:	681b      	ldr	r3, [r3, #0]
    ddca:	781b      	ldrb	r3, [r3, #0]
    ddcc:	f804 3c02 	strb.w	r3, [r4, #-2]
    ddd0:	9b01      	ldr	r3, [sp, #4]
    ddd2:	681b      	ldr	r3, [r3, #0]
    ddd4:	4550      	cmp	r0, sl
    ddd6:	785b      	ldrb	r3, [r3, #1]
    ddd8:	f804 3c01 	strb.w	r3, [r4, #-1]
    dddc:	d007      	beq.n	ddee <attsProcFindInfoReq+0xfe>
    ddde:	3001      	adds	r0, #1
    dde0:	b280      	uxth	r0, r0
    dde2:	4581      	cmp	r9, r0
    dde4:	f104 0404 	add.w	r4, r4, #4
    dde8:	d2a6      	bcs.n	dd38 <attsProcFindInfoReq+0x48>
    ddea:	4615      	mov	r5, r2
    ddec:	e7c5      	b.n	dd7a <attsProcFindInfoReq+0x8a>
    ddee:	4625      	mov	r5, r4
    ddf0:	e7c3      	b.n	dd7a <attsProcFindInfoReq+0x8a>
    ddf2:	2401      	movs	r4, #1
    ddf4:	e7c9      	b.n	dd8a <attsProcFindInfoReq+0x9a>
    ddf6:	2411      	movs	r4, #17
    ddf8:	e7c7      	b.n	dd8a <attsProcFindInfoReq+0x9a>
    ddfa:	2400      	movs	r4, #0
    ddfc:	e7c5      	b.n	dd8a <attsProcFindInfoReq+0x9a>
    ddfe:	4623      	mov	r3, r4
    de00:	463a      	mov	r2, r7
    de02:	2104      	movs	r1, #4
    de04:	f7ff fd88 	bl	d918 <attsErrRsp>
    de08:	e7ce      	b.n	dda8 <attsProcFindInfoReq+0xb8>

0000de0a <attsProcReadReq>:
    de0a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    de0e:	7a93      	ldrb	r3, [r2, #10]
    de10:	7a54      	ldrb	r4, [r2, #9]
    de12:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    de16:	b2a4      	uxth	r4, r4
    de18:	4606      	mov	r6, r0
    de1a:	a903      	add	r1, sp, #12
    de1c:	4620      	mov	r0, r4
    de1e:	f7ff fed5 	bl	dbcc <attsFindByHandle>
    de22:	4605      	mov	r5, r0
    de24:	2800      	cmp	r0, #0
    de26:	d047      	beq.n	deb8 <attsProcReadReq+0xae>
    de28:	7bc3      	ldrb	r3, [r0, #15]
    de2a:	7f30      	ldrb	r0, [r6, #28]
    de2c:	4622      	mov	r2, r4
    de2e:	2101      	movs	r1, #1
    de30:	f7ff fef8 	bl	dc24 <attsPermissions>
    de34:	4603      	mov	r3, r0
    de36:	b960      	cbnz	r0, de52 <attsProcReadReq+0x48>
    de38:	7baa      	ldrb	r2, [r5, #14]
    de3a:	0751      	lsls	r1, r2, #29
    de3c:	d50f      	bpl.n	de5e <attsProcReadReq+0x54>
    de3e:	9903      	ldr	r1, [sp, #12]
    de40:	688f      	ldr	r7, [r1, #8]
    de42:	b167      	cbz	r7, de5e <attsProcReadReq+0x54>
    de44:	7f30      	ldrb	r0, [r6, #28]
    de46:	9500      	str	r5, [sp, #0]
    de48:	220a      	movs	r2, #10
    de4a:	4621      	mov	r1, r4
    de4c:	47b8      	blx	r7
    de4e:	4603      	mov	r3, r0
    de50:	b138      	cbz	r0, de62 <attsProcReadReq+0x58>
    de52:	4622      	mov	r2, r4
    de54:	210a      	movs	r1, #10
    de56:	8b30      	ldrh	r0, [r6, #24]
    de58:	f7ff fd5e 	bl	d918 <attsErrRsp>
    de5c:	e010      	b.n	de80 <attsProcReadReq+0x76>
    de5e:	0693      	lsls	r3, r2, #26
    de60:	d411      	bmi.n	de86 <attsProcReadReq+0x7c>
    de62:	68ab      	ldr	r3, [r5, #8]
    de64:	8b74      	ldrh	r4, [r6, #26]
    de66:	881a      	ldrh	r2, [r3, #0]
    de68:	3c01      	subs	r4, #1
    de6a:	4294      	cmp	r4, r2
    de6c:	bfa8      	it	ge
    de6e:	4614      	movge	r4, r2
    de70:	b2a7      	uxth	r7, r4
    de72:	f107 0009 	add.w	r0, r7, #9
    de76:	b280      	uxth	r0, r0
    de78:	f7fe fae4 	bl	c444 <attMsgAlloc>
    de7c:	4680      	mov	r8, r0
    de7e:	b960      	cbnz	r0, de9a <attsProcReadReq+0x90>
    de80:	b004      	add	sp, #16
    de82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    de86:	4b0d      	ldr	r3, [pc, #52]	; (debc <attsProcReadReq+0xb2>)
    de88:	695f      	ldr	r7, [r3, #20]
    de8a:	2f00      	cmp	r7, #0
    de8c:	d0e9      	beq.n	de62 <attsProcReadReq+0x58>
    de8e:	686b      	ldr	r3, [r5, #4]
    de90:	7f30      	ldrb	r0, [r6, #28]
    de92:	4622      	mov	r2, r4
    de94:	2105      	movs	r1, #5
    de96:	47b8      	blx	r7
    de98:	e7d9      	b.n	de4e <attsProcReadReq+0x44>
    de9a:	230b      	movs	r3, #11
    de9c:	7203      	strb	r3, [r0, #8]
    de9e:	b2a2      	uxth	r2, r4
    dea0:	6869      	ldr	r1, [r5, #4]
    dea2:	3009      	adds	r0, #9
    dea4:	f7fe f92c 	bl	c100 <memcpy>
    dea8:	1c7a      	adds	r2, r7, #1
    deaa:	4643      	mov	r3, r8
    deac:	b292      	uxth	r2, r2
    deae:	8b31      	ldrh	r1, [r6, #24]
    deb0:	2004      	movs	r0, #4
    deb2:	f002 fc51 	bl	10758 <L2cDataReq>
    deb6:	e7e3      	b.n	de80 <attsProcReadReq+0x76>
    deb8:	2301      	movs	r3, #1
    deba:	e7ca      	b.n	de52 <attsProcReadReq+0x48>
    debc:	10003a54 	.word	0x10003a54

0000dec0 <attsFindUuidInRange>:
    dec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dec4:	4699      	mov	r9, r3
    dec6:	4b1a      	ldr	r3, [pc, #104]	; (df30 <attsFindUuidInRange+0x70>)
    dec8:	9e08      	ldr	r6, [sp, #32]
    deca:	681d      	ldr	r5, [r3, #0]
    decc:	460f      	mov	r7, r1
    dece:	4690      	mov	r8, r2
    ded0:	4604      	mov	r4, r0
    ded2:	f64f 7aff 	movw	sl, #65535	; 0xffff
    ded6:	b90d      	cbnz	r5, dedc <attsFindUuidInRange+0x1c>
    ded8:	462c      	mov	r4, r5
    deda:	e025      	b.n	df28 <attsFindUuidInRange+0x68>
    dedc:	8a2a      	ldrh	r2, [r5, #16]
    dede:	42a2      	cmp	r2, r4
    dee0:	d90c      	bls.n	defc <attsFindUuidInRange+0x3c>
    dee2:	42ba      	cmp	r2, r7
    dee4:	d909      	bls.n	defa <attsFindUuidInRange+0x3a>
    dee6:	682d      	ldr	r5, [r5, #0]
    dee8:	e7f5      	b.n	ded6 <attsFindUuidInRange+0x16>
    deea:	4554      	cmp	r4, sl
    deec:	d0fb      	beq.n	dee6 <attsFindUuidInRange+0x26>
    deee:	6833      	ldr	r3, [r6, #0]
    def0:	3401      	adds	r4, #1
    def2:	3310      	adds	r3, #16
    def4:	b2a4      	uxth	r4, r4
    def6:	6033      	str	r3, [r6, #0]
    def8:	e008      	b.n	df0c <attsFindUuidInRange+0x4c>
    defa:	4614      	mov	r4, r2
    defc:	8a6b      	ldrh	r3, [r5, #18]
    defe:	42a3      	cmp	r3, r4
    df00:	d3f1      	bcc.n	dee6 <attsFindUuidInRange+0x26>
    df02:	686b      	ldr	r3, [r5, #4]
    df04:	1aa2      	subs	r2, r4, r2
    df06:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    df0a:	6032      	str	r2, [r6, #0]
    df0c:	8a6b      	ldrh	r3, [r5, #18]
    df0e:	42a3      	cmp	r3, r4
    df10:	d3e9      	bcc.n	dee6 <attsFindUuidInRange+0x26>
    df12:	42bc      	cmp	r4, r7
    df14:	d8e7      	bhi.n	dee6 <attsFindUuidInRange+0x26>
    df16:	464a      	mov	r2, r9
    df18:	4641      	mov	r1, r8
    df1a:	6830      	ldr	r0, [r6, #0]
    df1c:	f7ff fe26 	bl	db6c <attsUuidCmp>
    df20:	2800      	cmp	r0, #0
    df22:	d0e2      	beq.n	deea <attsFindUuidInRange+0x2a>
    df24:	9b09      	ldr	r3, [sp, #36]	; 0x24
    df26:	601d      	str	r5, [r3, #0]
    df28:	4620      	mov	r0, r4
    df2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    df2e:	bf00      	nop
    df30:	10003a54 	.word	0x10003a54

0000df34 <attsFindServiceGroupEnd>:
    df34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    df36:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    df3a:	f8ad 3000 	strh.w	r3, [sp]
    df3e:	4b1d      	ldr	r3, [pc, #116]	; (dfb4 <attsFindServiceGroupEnd+0x80>)
    df40:	881b      	ldrh	r3, [r3, #0]
    df42:	f8ad 3004 	strh.w	r3, [sp, #4]
    df46:	f64f 73ff 	movw	r3, #65535	; 0xffff
    df4a:	4298      	cmp	r0, r3
    df4c:	d104      	bne.n	df58 <attsFindServiceGroupEnd+0x24>
    df4e:	f64f 75ff 	movw	r5, #65535	; 0xffff
    df52:	4628      	mov	r0, r5
    df54:	b003      	add	sp, #12
    df56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    df58:	4b17      	ldr	r3, [pc, #92]	; (dfb8 <attsFindServiceGroupEnd+0x84>)
    df5a:	1c44      	adds	r4, r0, #1
    df5c:	681f      	ldr	r7, [r3, #0]
    df5e:	b2a4      	uxth	r4, r4
    df60:	4605      	mov	r5, r0
    df62:	2f00      	cmp	r7, #0
    df64:	d0f3      	beq.n	df4e <attsFindServiceGroupEnd+0x1a>
    df66:	8a3e      	ldrh	r6, [r7, #16]
    df68:	8a7b      	ldrh	r3, [r7, #18]
    df6a:	42b4      	cmp	r4, r6
    df6c:	bf38      	it	cc
    df6e:	4634      	movcc	r4, r6
    df70:	42a3      	cmp	r3, r4
    df72:	d306      	bcc.n	df82 <attsFindServiceGroupEnd+0x4e>
    df74:	1ba3      	subs	r3, r4, r6
    df76:	687e      	ldr	r6, [r7, #4]
    df78:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    df7c:	8a7b      	ldrh	r3, [r7, #18]
    df7e:	42a3      	cmp	r3, r4
    df80:	d201      	bcs.n	df86 <attsFindServiceGroupEnd+0x52>
    df82:	683f      	ldr	r7, [r7, #0]
    df84:	e7ed      	b.n	df62 <attsFindServiceGroupEnd+0x2e>
    df86:	466a      	mov	r2, sp
    df88:	2102      	movs	r1, #2
    df8a:	4630      	mov	r0, r6
    df8c:	f7ff fdee 	bl	db6c <attsUuidCmp>
    df90:	2800      	cmp	r0, #0
    df92:	d1de      	bne.n	df52 <attsFindServiceGroupEnd+0x1e>
    df94:	aa01      	add	r2, sp, #4
    df96:	2102      	movs	r1, #2
    df98:	4630      	mov	r0, r6
    df9a:	f7ff fde7 	bl	db6c <attsUuidCmp>
    df9e:	2800      	cmp	r0, #0
    dfa0:	d1d7      	bne.n	df52 <attsFindServiceGroupEnd+0x1e>
    dfa2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dfa6:	429c      	cmp	r4, r3
    dfa8:	d0d1      	beq.n	df4e <attsFindServiceGroupEnd+0x1a>
    dfaa:	1c63      	adds	r3, r4, #1
    dfac:	4625      	mov	r5, r4
    dfae:	3610      	adds	r6, #16
    dfb0:	b29c      	uxth	r4, r3
    dfb2:	e7e3      	b.n	df7c <attsFindServiceGroupEnd+0x48>
    dfb4:	000246c0 	.word	0x000246c0
    dfb8:	10003a54 	.word	0x10003a54

0000dfbc <attsProcReadBlobReq>:
    dfbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    dfc0:	7a93      	ldrb	r3, [r2, #10]
    dfc2:	7a54      	ldrb	r4, [r2, #9]
    dfc4:	7ad5      	ldrb	r5, [r2, #11]
    dfc6:	f892 800c 	ldrb.w	r8, [r2, #12]
    dfca:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    dfce:	b085      	sub	sp, #20
    dfd0:	b2a4      	uxth	r4, r4
    dfd2:	4607      	mov	r7, r0
    dfd4:	a903      	add	r1, sp, #12
    dfd6:	4620      	mov	r0, r4
    dfd8:	f7ff fdf8 	bl	dbcc <attsFindByHandle>
    dfdc:	4606      	mov	r6, r0
    dfde:	2800      	cmp	r0, #0
    dfe0:	d057      	beq.n	e092 <attsProcReadBlobReq+0xd6>
    dfe2:	7bc3      	ldrb	r3, [r0, #15]
    dfe4:	7f38      	ldrb	r0, [r7, #28]
    dfe6:	4622      	mov	r2, r4
    dfe8:	2101      	movs	r1, #1
    dfea:	f7ff fe1b 	bl	dc24 <attsPermissions>
    dfee:	b9b0      	cbnz	r0, e01e <attsProcReadBlobReq+0x62>
    dff0:	68b3      	ldr	r3, [r6, #8]
    dff2:	eb05 2508 	add.w	r5, r5, r8, lsl #8
    dff6:	881b      	ldrh	r3, [r3, #0]
    dff8:	b2ad      	uxth	r5, r5
    dffa:	42ab      	cmp	r3, r5
    dffc:	d34b      	bcc.n	e096 <attsProcReadBlobReq+0xda>
    dffe:	7bb3      	ldrb	r3, [r6, #14]
    e000:	075a      	lsls	r2, r3, #29
    e002:	d513      	bpl.n	e02c <attsProcReadBlobReq+0x70>
    e004:	9a03      	ldr	r2, [sp, #12]
    e006:	f8d2 8008 	ldr.w	r8, [r2, #8]
    e00a:	f1b8 0f00 	cmp.w	r8, #0
    e00e:	d00d      	beq.n	e02c <attsProcReadBlobReq+0x70>
    e010:	7f38      	ldrb	r0, [r7, #28]
    e012:	9600      	str	r6, [sp, #0]
    e014:	462b      	mov	r3, r5
    e016:	220c      	movs	r2, #12
    e018:	4621      	mov	r1, r4
    e01a:	47c0      	blx	r8
    e01c:	b140      	cbz	r0, e030 <attsProcReadBlobReq+0x74>
    e01e:	4603      	mov	r3, r0
    e020:	4622      	mov	r2, r4
    e022:	210c      	movs	r1, #12
    e024:	8b38      	ldrh	r0, [r7, #24]
    e026:	f7ff fc77 	bl	d918 <attsErrRsp>
    e02a:	e012      	b.n	e052 <attsProcReadBlobReq+0x96>
    e02c:	069b      	lsls	r3, r3, #26
    e02e:	d413      	bmi.n	e058 <attsProcReadBlobReq+0x9c>
    e030:	68b3      	ldr	r3, [r6, #8]
    e032:	8b7a      	ldrh	r2, [r7, #26]
    e034:	881c      	ldrh	r4, [r3, #0]
    e036:	3a01      	subs	r2, #1
    e038:	1b64      	subs	r4, r4, r5
    e03a:	4294      	cmp	r4, r2
    e03c:	bfa8      	it	ge
    e03e:	4614      	movge	r4, r2
    e040:	fa1f f884 	uxth.w	r8, r4
    e044:	f108 0009 	add.w	r0, r8, #9
    e048:	b280      	uxth	r0, r0
    e04a:	f7fe f9fb 	bl	c444 <attMsgAlloc>
    e04e:	4681      	mov	r9, r0
    e050:	b970      	cbnz	r0, e070 <attsProcReadBlobReq+0xb4>
    e052:	b005      	add	sp, #20
    e054:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e058:	4b10      	ldr	r3, [pc, #64]	; (e09c <attsProcReadBlobReq+0xe0>)
    e05a:	f8d3 8014 	ldr.w	r8, [r3, #20]
    e05e:	f1b8 0f00 	cmp.w	r8, #0
    e062:	d0e5      	beq.n	e030 <attsProcReadBlobReq+0x74>
    e064:	6873      	ldr	r3, [r6, #4]
    e066:	7f38      	ldrb	r0, [r7, #28]
    e068:	4622      	mov	r2, r4
    e06a:	2105      	movs	r1, #5
    e06c:	47c0      	blx	r8
    e06e:	e7d5      	b.n	e01c <attsProcReadBlobReq+0x60>
    e070:	230d      	movs	r3, #13
    e072:	7203      	strb	r3, [r0, #8]
    e074:	6871      	ldr	r1, [r6, #4]
    e076:	b2a2      	uxth	r2, r4
    e078:	4429      	add	r1, r5
    e07a:	3009      	adds	r0, #9
    e07c:	f7fe f840 	bl	c100 <memcpy>
    e080:	f108 0201 	add.w	r2, r8, #1
    e084:	464b      	mov	r3, r9
    e086:	b292      	uxth	r2, r2
    e088:	8b39      	ldrh	r1, [r7, #24]
    e08a:	2004      	movs	r0, #4
    e08c:	f002 fb64 	bl	10758 <L2cDataReq>
    e090:	e7df      	b.n	e052 <attsProcReadBlobReq+0x96>
    e092:	2001      	movs	r0, #1
    e094:	e7c3      	b.n	e01e <attsProcReadBlobReq+0x62>
    e096:	2007      	movs	r0, #7
    e098:	e7c1      	b.n	e01e <attsProcReadBlobReq+0x62>
    e09a:	bf00      	nop
    e09c:	10003a54 	.word	0x10003a54

0000e0a0 <attsProcFindTypeReq>:
    e0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e0a4:	7a93      	ldrb	r3, [r2, #10]
    e0a6:	7a55      	ldrb	r5, [r2, #9]
    e0a8:	eb05 2503 	add.w	r5, r5, r3, lsl #8
    e0ac:	b2ad      	uxth	r5, r5
    e0ae:	b087      	sub	sp, #28
    e0b0:	4682      	mov	sl, r0
    e0b2:	4689      	mov	r9, r1
    e0b4:	4616      	mov	r6, r2
    e0b6:	2d00      	cmp	r5, #0
    e0b8:	d075      	beq.n	e1a6 <attsProcFindTypeReq+0x106>
    e0ba:	7b13      	ldrb	r3, [r2, #12]
    e0bc:	f892 800b 	ldrb.w	r8, [r2, #11]
    e0c0:	eb08 2803 	add.w	r8, r8, r3, lsl #8
    e0c4:	fa1f f888 	uxth.w	r8, r8
    e0c8:	4545      	cmp	r5, r8
    e0ca:	d86c      	bhi.n	e1a6 <attsProcFindTypeReq+0x106>
    e0cc:	8b40      	ldrh	r0, [r0, #26]
    e0ce:	3008      	adds	r0, #8
    e0d0:	b280      	uxth	r0, r0
    e0d2:	f7fe f9b7 	bl	c444 <attMsgAlloc>
    e0d6:	4607      	mov	r7, r0
    e0d8:	2800      	cmp	r0, #0
    e0da:	d066      	beq.n	e1aa <attsProcFindTypeReq+0x10a>
    e0dc:	2307      	movs	r3, #7
    e0de:	f100 0409 	add.w	r4, r0, #9
    e0e2:	7203      	strb	r3, [r0, #8]
    e0e4:	f1a9 0907 	sub.w	r9, r9, #7
    e0e8:	f106 030d 	add.w	r3, r6, #13
    e0ec:	fa1f f989 	uxth.w	r9, r9
    e0f0:	4628      	mov	r0, r5
    e0f2:	9403      	str	r4, [sp, #12]
    e0f4:	9302      	str	r3, [sp, #8]
    e0f6:	ab05      	add	r3, sp, #20
    e0f8:	9301      	str	r3, [sp, #4]
    e0fa:	ab04      	add	r3, sp, #16
    e0fc:	9300      	str	r3, [sp, #0]
    e0fe:	2202      	movs	r2, #2
    e100:	9b02      	ldr	r3, [sp, #8]
    e102:	4641      	mov	r1, r8
    e104:	f7ff fedc 	bl	dec0 <attsFindUuidInRange>
    e108:	4683      	mov	fp, r0
    e10a:	b9c8      	cbnz	r0, e140 <attsProcFindTypeReq+0xa0>
    e10c:	9b03      	ldr	r3, [sp, #12]
    e10e:	429c      	cmp	r4, r3
    e110:	d14d      	bne.n	e1ae <attsProcFindTypeReq+0x10e>
    e112:	4638      	mov	r0, r7
    e114:	f00b f82a 	bl	1916c <WsfMsgFree>
    e118:	260a      	movs	r6, #10
    e11a:	4650      	mov	r0, sl
    e11c:	f7ff fc7a 	bl	da14 <attsDiscBusy>
    e120:	f8ba 0018 	ldrh.w	r0, [sl, #24]
    e124:	2e00      	cmp	r6, #0
    e126:	d144      	bne.n	e1b2 <attsProcFindTypeReq+0x112>
    e128:	f107 0208 	add.w	r2, r7, #8
    e12c:	1aa2      	subs	r2, r4, r2
    e12e:	4601      	mov	r1, r0
    e130:	463b      	mov	r3, r7
    e132:	b292      	uxth	r2, r2
    e134:	2004      	movs	r0, #4
    e136:	f002 fb0f 	bl	10758 <L2cDataReq>
    e13a:	b007      	add	sp, #28
    e13c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e140:	9904      	ldr	r1, [sp, #16]
    e142:	7bca      	ldrb	r2, [r1, #15]
    e144:	07d3      	lsls	r3, r2, #31
    e146:	d526      	bpl.n	e196 <attsProcFindTypeReq+0xf6>
    e148:	f1b9 0f00 	cmp.w	r9, #0
    e14c:	d00a      	beq.n	e164 <attsProcFindTypeReq+0xc4>
    e14e:	688a      	ldr	r2, [r1, #8]
    e150:	8812      	ldrh	r2, [r2, #0]
    e152:	454a      	cmp	r2, r9
    e154:	d11f      	bne.n	e196 <attsProcFindTypeReq+0xf6>
    e156:	464a      	mov	r2, r9
    e158:	6849      	ldr	r1, [r1, #4]
    e15a:	f106 000f 	add.w	r0, r6, #15
    e15e:	f012 f8af 	bl	202c0 <memcmp>
    e162:	b9c0      	cbnz	r0, e196 <attsProcFindTypeReq+0xf6>
    e164:	7b72      	ldrb	r2, [r6, #13]
    e166:	b9e2      	cbnz	r2, e1a2 <attsProcFindTypeReq+0x102>
    e168:	7bb2      	ldrb	r2, [r6, #14]
    e16a:	2a28      	cmp	r2, #40	; 0x28
    e16c:	4658      	mov	r0, fp
    e16e:	d101      	bne.n	e174 <attsProcFindTypeReq+0xd4>
    e170:	f7ff fee0 	bl	df34 <attsFindServiceGroupEnd>
    e174:	f8ba 201a 	ldrh.w	r2, [sl, #26]
    e178:	3208      	adds	r2, #8
    e17a:	1d21      	adds	r1, r4, #4
    e17c:	443a      	add	r2, r7
    e17e:	4291      	cmp	r1, r2
    e180:	d8c4      	bhi.n	e10c <attsProcFindTypeReq+0x6c>
    e182:	ea4f 231b 	mov.w	r3, fp, lsr #8
    e186:	7063      	strb	r3, [r4, #1]
    e188:	0a03      	lsrs	r3, r0, #8
    e18a:	f884 b000 	strb.w	fp, [r4]
    e18e:	70a0      	strb	r0, [r4, #2]
    e190:	70e3      	strb	r3, [r4, #3]
    e192:	4683      	mov	fp, r0
    e194:	460c      	mov	r4, r1
    e196:	45c3      	cmp	fp, r8
    e198:	d2b8      	bcs.n	e10c <attsProcFindTypeReq+0x6c>
    e19a:	f10b 0001 	add.w	r0, fp, #1
    e19e:	b280      	uxth	r0, r0
    e1a0:	e7a9      	b.n	e0f6 <attsProcFindTypeReq+0x56>
    e1a2:	4658      	mov	r0, fp
    e1a4:	e7e6      	b.n	e174 <attsProcFindTypeReq+0xd4>
    e1a6:	2601      	movs	r6, #1
    e1a8:	e7b7      	b.n	e11a <attsProcFindTypeReq+0x7a>
    e1aa:	2611      	movs	r6, #17
    e1ac:	e7b5      	b.n	e11a <attsProcFindTypeReq+0x7a>
    e1ae:	2600      	movs	r6, #0
    e1b0:	e7b3      	b.n	e11a <attsProcFindTypeReq+0x7a>
    e1b2:	4633      	mov	r3, r6
    e1b4:	462a      	mov	r2, r5
    e1b6:	2106      	movs	r1, #6
    e1b8:	f7ff fbae 	bl	d918 <attsErrRsp>
    e1bc:	e7bd      	b.n	e13a <attsProcFindTypeReq+0x9a>

0000e1be <attsProcReadTypeReq>:
    e1be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e1c2:	3905      	subs	r1, #5
    e1c4:	4606      	mov	r6, r0
    e1c6:	7a54      	ldrb	r4, [r2, #9]
    e1c8:	7a90      	ldrb	r0, [r2, #10]
    e1ca:	fa5f fa81 	uxtb.w	sl, r1
    e1ce:	eb04 2400 	add.w	r4, r4, r0, lsl #8
    e1d2:	f1ba 0f02 	cmp.w	sl, #2
    e1d6:	b089      	sub	sp, #36	; 0x24
    e1d8:	b2a4      	uxth	r4, r4
    e1da:	d003      	beq.n	e1e4 <attsProcReadTypeReq+0x26>
    e1dc:	f1ba 0f10 	cmp.w	sl, #16
    e1e0:	f040 80d4 	bne.w	e38c <attsProcReadTypeReq+0x1ce>
    e1e4:	2c00      	cmp	r4, #0
    e1e6:	f000 80d3 	beq.w	e390 <attsProcReadTypeReq+0x1d2>
    e1ea:	7b13      	ldrb	r3, [r2, #12]
    e1ec:	f892 900b 	ldrb.w	r9, [r2, #11]
    e1f0:	eb09 2903 	add.w	r9, r9, r3, lsl #8
    e1f4:	fa1f f989 	uxth.w	r9, r9
    e1f8:	454c      	cmp	r4, r9
    e1fa:	f200 80c9 	bhi.w	e390 <attsProcReadTypeReq+0x1d2>
    e1fe:	f102 030d 	add.w	r3, r2, #13
    e202:	9304      	str	r3, [sp, #16]
    e204:	ab07      	add	r3, sp, #28
    e206:	9301      	str	r3, [sp, #4]
    e208:	ab06      	add	r3, sp, #24
    e20a:	9300      	str	r3, [sp, #0]
    e20c:	4620      	mov	r0, r4
    e20e:	9b04      	ldr	r3, [sp, #16]
    e210:	4652      	mov	r2, sl
    e212:	4649      	mov	r1, r9
    e214:	f7ff fe54 	bl	dec0 <attsFindUuidInRange>
    e218:	4604      	mov	r4, r0
    e21a:	2800      	cmp	r0, #0
    e21c:	f000 80ba 	beq.w	e394 <attsProcReadTypeReq+0x1d6>
    e220:	9b06      	ldr	r3, [sp, #24]
    e222:	4602      	mov	r2, r0
    e224:	7bdb      	ldrb	r3, [r3, #15]
    e226:	7f30      	ldrb	r0, [r6, #28]
    e228:	2101      	movs	r1, #1
    e22a:	f7ff fcfb 	bl	dc24 <attsPermissions>
    e22e:	4603      	mov	r3, r0
    e230:	b9c0      	cbnz	r0, e264 <attsProcReadTypeReq+0xa6>
    e232:	9a06      	ldr	r2, [sp, #24]
    e234:	7b91      	ldrb	r1, [r2, #14]
    e236:	074d      	lsls	r5, r1, #29
    e238:	d50a      	bpl.n	e250 <attsProcReadTypeReq+0x92>
    e23a:	9807      	ldr	r0, [sp, #28]
    e23c:	6885      	ldr	r5, [r0, #8]
    e23e:	b13d      	cbz	r5, e250 <attsProcReadTypeReq+0x92>
    e240:	9200      	str	r2, [sp, #0]
    e242:	7f30      	ldrb	r0, [r6, #28]
    e244:	2208      	movs	r2, #8
    e246:	4621      	mov	r1, r4
    e248:	47a8      	blx	r5
    e24a:	4603      	mov	r3, r0
    e24c:	b950      	cbnz	r0, e264 <attsProcReadTypeReq+0xa6>
    e24e:	e001      	b.n	e254 <attsProcReadTypeReq+0x96>
    e250:	0688      	lsls	r0, r1, #26
    e252:	d40d      	bmi.n	e270 <attsProcReadTypeReq+0xb2>
    e254:	8b70      	ldrh	r0, [r6, #26]
    e256:	3008      	adds	r0, #8
    e258:	b280      	uxth	r0, r0
    e25a:	f7fe f8f3 	bl	c444 <attMsgAlloc>
    e25e:	4680      	mov	r8, r0
    e260:	b980      	cbnz	r0, e284 <attsProcReadTypeReq+0xc6>
    e262:	2311      	movs	r3, #17
    e264:	4622      	mov	r2, r4
    e266:	2108      	movs	r1, #8
    e268:	8b30      	ldrh	r0, [r6, #24]
    e26a:	f7ff fb55 	bl	d918 <attsErrRsp>
    e26e:	e057      	b.n	e320 <attsProcReadTypeReq+0x162>
    e270:	4b49      	ldr	r3, [pc, #292]	; (e398 <attsProcReadTypeReq+0x1da>)
    e272:	695d      	ldr	r5, [r3, #20]
    e274:	2d00      	cmp	r5, #0
    e276:	d0ed      	beq.n	e254 <attsProcReadTypeReq+0x96>
    e278:	6853      	ldr	r3, [r2, #4]
    e27a:	7f30      	ldrb	r0, [r6, #28]
    e27c:	4622      	mov	r2, r4
    e27e:	2105      	movs	r1, #5
    e280:	47a8      	blx	r5
    e282:	e7e2      	b.n	e24a <attsProcReadTypeReq+0x8c>
    e284:	2309      	movs	r3, #9
    e286:	7203      	strb	r3, [r0, #8]
    e288:	9b06      	ldr	r3, [sp, #24]
    e28a:	8b77      	ldrh	r7, [r6, #26]
    e28c:	689a      	ldr	r2, [r3, #8]
    e28e:	8812      	ldrh	r2, [r2, #0]
    e290:	7284      	strb	r4, [r0, #10]
    e292:	3f04      	subs	r7, #4
    e294:	4297      	cmp	r7, r2
    e296:	bf28      	it	cs
    e298:	4617      	movcs	r7, r2
    e29a:	b2ff      	uxtb	r7, r7
    e29c:	1cba      	adds	r2, r7, #2
    e29e:	9205      	str	r2, [sp, #20]
    e2a0:	f89d 2014 	ldrb.w	r2, [sp, #20]
    e2a4:	7242      	strb	r2, [r0, #9]
    e2a6:	0a22      	lsrs	r2, r4, #8
    e2a8:	72c2      	strb	r2, [r0, #11]
    e2aa:	f100 050c 	add.w	r5, r0, #12
    e2ae:	6859      	ldr	r1, [r3, #4]
    e2b0:	4628      	mov	r0, r5
    e2b2:	463a      	mov	r2, r7
    e2b4:	f7fd ff24 	bl	c100 <memcpy>
    e2b8:	3401      	adds	r4, #1
    e2ba:	1cbb      	adds	r3, r7, #2
    e2bc:	b2a0      	uxth	r0, r4
    e2be:	441d      	add	r5, r3
    e2c0:	1eab      	subs	r3, r5, #2
    e2c2:	9303      	str	r3, [sp, #12]
    e2c4:	ab07      	add	r3, sp, #28
    e2c6:	9301      	str	r3, [sp, #4]
    e2c8:	ab06      	add	r3, sp, #24
    e2ca:	9300      	str	r3, [sp, #0]
    e2cc:	4652      	mov	r2, sl
    e2ce:	9b04      	ldr	r3, [sp, #16]
    e2d0:	4649      	mov	r1, r9
    e2d2:	f7ff fdf5 	bl	dec0 <attsFindUuidInRange>
    e2d6:	4604      	mov	r4, r0
    e2d8:	b1c0      	cbz	r0, e30c <attsProcReadTypeReq+0x14e>
    e2da:	9b06      	ldr	r3, [sp, #24]
    e2dc:	7b9a      	ldrb	r2, [r3, #14]
    e2de:	0751      	lsls	r1, r2, #29
    e2e0:	d50d      	bpl.n	e2fe <attsProcReadTypeReq+0x140>
    e2e2:	9907      	ldr	r1, [sp, #28]
    e2e4:	f8d1 b008 	ldr.w	fp, [r1, #8]
    e2e8:	f1bb 0f00 	cmp.w	fp, #0
    e2ec:	d007      	beq.n	e2fe <attsProcReadTypeReq+0x140>
    e2ee:	9300      	str	r3, [sp, #0]
    e2f0:	7f30      	ldrb	r0, [r6, #28]
    e2f2:	2300      	movs	r3, #0
    e2f4:	2208      	movs	r2, #8
    e2f6:	4621      	mov	r1, r4
    e2f8:	47d8      	blx	fp
    e2fa:	b110      	cbz	r0, e302 <attsProcReadTypeReq+0x144>
    e2fc:	e006      	b.n	e30c <attsProcReadTypeReq+0x14e>
    e2fe:	0692      	lsls	r2, r2, #26
    e300:	d411      	bmi.n	e326 <attsProcReadTypeReq+0x168>
    e302:	9b06      	ldr	r3, [sp, #24]
    e304:	689a      	ldr	r2, [r3, #8]
    e306:	8812      	ldrh	r2, [r2, #0]
    e308:	42ba      	cmp	r2, r7
    e30a:	d018      	beq.n	e33e <attsProcReadTypeReq+0x180>
    e30c:	9b03      	ldr	r3, [sp, #12]
    e30e:	8b31      	ldrh	r1, [r6, #24]
    e310:	f108 0208 	add.w	r2, r8, #8
    e314:	1a9a      	subs	r2, r3, r2
    e316:	b292      	uxth	r2, r2
    e318:	4643      	mov	r3, r8
    e31a:	2004      	movs	r0, #4
    e31c:	f002 fa1c 	bl	10758 <L2cDataReq>
    e320:	b009      	add	sp, #36	; 0x24
    e322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e326:	4a1c      	ldr	r2, [pc, #112]	; (e398 <attsProcReadTypeReq+0x1da>)
    e328:	f8d2 b014 	ldr.w	fp, [r2, #20]
    e32c:	f1bb 0f00 	cmp.w	fp, #0
    e330:	d0e7      	beq.n	e302 <attsProcReadTypeReq+0x144>
    e332:	685b      	ldr	r3, [r3, #4]
    e334:	7f30      	ldrb	r0, [r6, #28]
    e336:	4622      	mov	r2, r4
    e338:	2105      	movs	r1, #5
    e33a:	47d8      	blx	fp
    e33c:	e7dd      	b.n	e2fa <attsProcReadTypeReq+0x13c>
    e33e:	7bdb      	ldrb	r3, [r3, #15]
    e340:	7f30      	ldrb	r0, [r6, #28]
    e342:	4622      	mov	r2, r4
    e344:	2101      	movs	r1, #1
    e346:	f7ff fc6d 	bl	dc24 <attsPermissions>
    e34a:	2800      	cmp	r0, #0
    e34c:	d1de      	bne.n	e30c <attsProcReadTypeReq+0x14e>
    e34e:	8b73      	ldrh	r3, [r6, #26]
    e350:	3308      	adds	r3, #8
    e352:	eb07 0b05 	add.w	fp, r7, r5
    e356:	4443      	add	r3, r8
    e358:	459b      	cmp	fp, r3
    e35a:	d8d7      	bhi.n	e30c <attsProcReadTypeReq+0x14e>
    e35c:	0a23      	lsrs	r3, r4, #8
    e35e:	f805 4c02 	strb.w	r4, [r5, #-2]
    e362:	f805 3c01 	strb.w	r3, [r5, #-1]
    e366:	9b06      	ldr	r3, [sp, #24]
    e368:	463a      	mov	r2, r7
    e36a:	6859      	ldr	r1, [r3, #4]
    e36c:	4628      	mov	r0, r5
    e36e:	f7fd fec7 	bl	c100 <memcpy>
    e372:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e376:	429c      	cmp	r4, r3
    e378:	d005      	beq.n	e386 <attsProcReadTypeReq+0x1c8>
    e37a:	3401      	adds	r4, #1
    e37c:	b2a0      	uxth	r0, r4
    e37e:	9b05      	ldr	r3, [sp, #20]
    e380:	4581      	cmp	r9, r0
    e382:	441d      	add	r5, r3
    e384:	d29c      	bcs.n	e2c0 <attsProcReadTypeReq+0x102>
    e386:	f8cd b00c 	str.w	fp, [sp, #12]
    e38a:	e7bf      	b.n	e30c <attsProcReadTypeReq+0x14e>
    e38c:	2304      	movs	r3, #4
    e38e:	e769      	b.n	e264 <attsProcReadTypeReq+0xa6>
    e390:	2301      	movs	r3, #1
    e392:	e767      	b.n	e264 <attsProcReadTypeReq+0xa6>
    e394:	230a      	movs	r3, #10
    e396:	e765      	b.n	e264 <attsProcReadTypeReq+0xa6>
    e398:	10003a54 	.word	0x10003a54

0000e39c <attsProcReadMultReq>:
    e39c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e3a0:	4607      	mov	r7, r0
    e3a2:	8b40      	ldrh	r0, [r0, #26]
    e3a4:	3008      	adds	r0, #8
    e3a6:	b087      	sub	sp, #28
    e3a8:	b280      	uxth	r0, r0
    e3aa:	460c      	mov	r4, r1
    e3ac:	4693      	mov	fp, r2
    e3ae:	f7fe f849 	bl	c444 <attMsgAlloc>
    e3b2:	4605      	mov	r5, r0
    e3b4:	2800      	cmp	r0, #0
    e3b6:	d060      	beq.n	e47a <attsProcReadMultReq+0xde>
    e3b8:	230f      	movs	r3, #15
    e3ba:	3408      	adds	r4, #8
    e3bc:	f10b 0909 	add.w	r9, fp, #9
    e3c0:	f100 0609 	add.w	r6, r0, #9
    e3c4:	7203      	strb	r3, [r0, #8]
    e3c6:	44a3      	add	fp, r4
    e3c8:	45d9      	cmp	r9, fp
    e3ca:	d309      	bcc.n	e3e0 <attsProcReadMultReq+0x44>
    e3cc:	f105 0208 	add.w	r2, r5, #8
    e3d0:	1ab2      	subs	r2, r6, r2
    e3d2:	462b      	mov	r3, r5
    e3d4:	b292      	uxth	r2, r2
    e3d6:	8b39      	ldrh	r1, [r7, #24]
    e3d8:	2004      	movs	r0, #4
    e3da:	f002 f9bd 	bl	10758 <L2cDataReq>
    e3de:	e053      	b.n	e488 <attsProcReadMultReq+0xec>
    e3e0:	f899 3001 	ldrb.w	r3, [r9, #1]
    e3e4:	f819 4b02 	ldrb.w	r4, [r9], #2
    e3e8:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    e3ec:	b2a4      	uxth	r4, r4
    e3ee:	a905      	add	r1, sp, #20
    e3f0:	4620      	mov	r0, r4
    e3f2:	f7ff fbeb 	bl	dbcc <attsFindByHandle>
    e3f6:	4680      	mov	r8, r0
    e3f8:	2800      	cmp	r0, #0
    e3fa:	d048      	beq.n	e48e <attsProcReadMultReq+0xf2>
    e3fc:	7bc3      	ldrb	r3, [r0, #15]
    e3fe:	7f38      	ldrb	r0, [r7, #28]
    e400:	4622      	mov	r2, r4
    e402:	2101      	movs	r1, #1
    e404:	f7ff fc0e 	bl	dc24 <attsPermissions>
    e408:	4603      	mov	r3, r0
    e40a:	2800      	cmp	r0, #0
    e40c:	d140      	bne.n	e490 <attsProcReadMultReq+0xf4>
    e40e:	f898 200e 	ldrb.w	r2, [r8, #14]
    e412:	0751      	lsls	r1, r2, #29
    e414:	d522      	bpl.n	e45c <attsProcReadMultReq+0xc0>
    e416:	9905      	ldr	r1, [sp, #20]
    e418:	f8d1 a008 	ldr.w	sl, [r1, #8]
    e41c:	f1ba 0f00 	cmp.w	sl, #0
    e420:	d01c      	beq.n	e45c <attsProcReadMultReq+0xc0>
    e422:	7f38      	ldrb	r0, [r7, #28]
    e424:	f8cd 8000 	str.w	r8, [sp]
    e428:	220e      	movs	r2, #14
    e42a:	4621      	mov	r1, r4
    e42c:	47d0      	blx	sl
    e42e:	4603      	mov	r3, r0
    e430:	bb70      	cbnz	r0, e490 <attsProcReadMultReq+0xf4>
    e432:	8b7a      	ldrh	r2, [r7, #26]
    e434:	3208      	adds	r2, #8
    e436:	442a      	add	r2, r5
    e438:	42b2      	cmp	r2, r6
    e43a:	d9c5      	bls.n	e3c8 <attsProcReadMultReq+0x2c>
    e43c:	f8d8 3008 	ldr.w	r3, [r8, #8]
    e440:	f8d8 1004 	ldr.w	r1, [r8, #4]
    e444:	881c      	ldrh	r4, [r3, #0]
    e446:	1b92      	subs	r2, r2, r6
    e448:	b292      	uxth	r2, r2
    e44a:	4294      	cmp	r4, r2
    e44c:	bf28      	it	cs
    e44e:	4614      	movcs	r4, r2
    e450:	4630      	mov	r0, r6
    e452:	4622      	mov	r2, r4
    e454:	f7fd fe54 	bl	c100 <memcpy>
    e458:	4426      	add	r6, r4
    e45a:	e7b5      	b.n	e3c8 <attsProcReadMultReq+0x2c>
    e45c:	0693      	lsls	r3, r2, #26
    e45e:	d5e8      	bpl.n	e432 <attsProcReadMultReq+0x96>
    e460:	4b0e      	ldr	r3, [pc, #56]	; (e49c <attsProcReadMultReq+0x100>)
    e462:	f8d3 a014 	ldr.w	sl, [r3, #20]
    e466:	f1ba 0f00 	cmp.w	sl, #0
    e46a:	d0e2      	beq.n	e432 <attsProcReadMultReq+0x96>
    e46c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    e470:	7f38      	ldrb	r0, [r7, #28]
    e472:	4622      	mov	r2, r4
    e474:	2105      	movs	r1, #5
    e476:	47d0      	blx	sl
    e478:	e7d9      	b.n	e42e <attsProcReadMultReq+0x92>
    e47a:	2311      	movs	r3, #17
    e47c:	4604      	mov	r4, r0
    e47e:	4622      	mov	r2, r4
    e480:	210e      	movs	r1, #14
    e482:	8b38      	ldrh	r0, [r7, #24]
    e484:	f7ff fa48 	bl	d918 <attsErrRsp>
    e488:	b007      	add	sp, #28
    e48a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e48e:	2301      	movs	r3, #1
    e490:	4628      	mov	r0, r5
    e492:	9303      	str	r3, [sp, #12]
    e494:	f00a fe6a 	bl	1916c <WsfMsgFree>
    e498:	9b03      	ldr	r3, [sp, #12]
    e49a:	e7f0      	b.n	e47e <attsProcReadMultReq+0xe2>
    e49c:	10003a54 	.word	0x10003a54

0000e4a0 <attsProcReadGroupTypeReq>:
    e4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e4a4:	b08f      	sub	sp, #60	; 0x3c
    e4a6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    e4aa:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    e4ae:	7a57      	ldrb	r7, [r2, #9]
    e4b0:	7a93      	ldrb	r3, [r2, #10]
    e4b2:	3905      	subs	r1, #5
    e4b4:	fa5f fa81 	uxtb.w	sl, r1
    e4b8:	eb07 2703 	add.w	r7, r7, r3, lsl #8
    e4bc:	f1ba 0f02 	cmp.w	sl, #2
    e4c0:	4681      	mov	r9, r0
    e4c2:	b2bf      	uxth	r7, r7
    e4c4:	d003      	beq.n	e4ce <attsProcReadGroupTypeReq+0x2e>
    e4c6:	f1ba 0f10 	cmp.w	sl, #16
    e4ca:	f040 80b6 	bne.w	e63a <attsProcReadGroupTypeReq+0x19a>
    e4ce:	2f00      	cmp	r7, #0
    e4d0:	f000 80b8 	beq.w	e644 <attsProcReadGroupTypeReq+0x1a4>
    e4d4:	7b11      	ldrb	r1, [r2, #12]
    e4d6:	7ad3      	ldrb	r3, [r2, #11]
    e4d8:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    e4dc:	b29b      	uxth	r3, r3
    e4de:	429f      	cmp	r7, r3
    e4e0:	9303      	str	r3, [sp, #12]
    e4e2:	f200 80c7 	bhi.w	e674 <attsProcReadGroupTypeReq+0x1d4>
    e4e6:	f102 030d 	add.w	r3, r2, #13
    e4ea:	461a      	mov	r2, r3
    e4ec:	4651      	mov	r1, sl
    e4ee:	a80b      	add	r0, sp, #44	; 0x2c
    e4f0:	9308      	str	r3, [sp, #32]
    e4f2:	f7ff fb58 	bl	dba6 <attsUuid16Cmp>
    e4f6:	2800      	cmp	r0, #0
    e4f8:	f000 80bf 	beq.w	e67a <attsProcReadGroupTypeReq+0x1da>
    e4fc:	ab0d      	add	r3, sp, #52	; 0x34
    e4fe:	9301      	str	r3, [sp, #4]
    e500:	ab0c      	add	r3, sp, #48	; 0x30
    e502:	9300      	str	r3, [sp, #0]
    e504:	4652      	mov	r2, sl
    e506:	9b08      	ldr	r3, [sp, #32]
    e508:	9903      	ldr	r1, [sp, #12]
    e50a:	4638      	mov	r0, r7
    e50c:	f7ff fcd8 	bl	dec0 <attsFindUuidInRange>
    e510:	4604      	mov	r4, r0
    e512:	2800      	cmp	r0, #0
    e514:	f000 80b4 	beq.w	e680 <attsProcReadGroupTypeReq+0x1e0>
    e518:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e51a:	4602      	mov	r2, r0
    e51c:	7bdb      	ldrb	r3, [r3, #15]
    e51e:	f899 001c 	ldrb.w	r0, [r9, #28]
    e522:	2101      	movs	r1, #1
    e524:	f7ff fb7e 	bl	dc24 <attsPermissions>
    e528:	4680      	mov	r8, r0
    e52a:	2800      	cmp	r0, #0
    e52c:	f040 80ab 	bne.w	e686 <attsProcReadGroupTypeReq+0x1e6>
    e530:	f8b9 001a 	ldrh.w	r0, [r9, #26]
    e534:	3008      	adds	r0, #8
    e536:	b280      	uxth	r0, r0
    e538:	f7fd ff84 	bl	c444 <attMsgAlloc>
    e53c:	2311      	movs	r3, #17
    e53e:	4605      	mov	r5, r0
    e540:	2800      	cmp	r0, #0
    e542:	f000 80a2 	beq.w	e68a <attsProcReadGroupTypeReq+0x1ea>
    e546:	f8b9 601a 	ldrh.w	r6, [r9, #26]
    e54a:	7203      	strb	r3, [r0, #8]
    e54c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e54e:	f8b9 201a 	ldrh.w	r2, [r9, #26]
    e552:	689b      	ldr	r3, [r3, #8]
    e554:	881b      	ldrh	r3, [r3, #0]
    e556:	7284      	strb	r4, [r0, #10]
    e558:	3a06      	subs	r2, #6
    e55a:	4293      	cmp	r3, r2
    e55c:	bf28      	it	cs
    e55e:	4613      	movcs	r3, r2
    e560:	b2db      	uxtb	r3, r3
    e562:	9304      	str	r3, [sp, #16]
    e564:	3304      	adds	r3, #4
    e566:	9305      	str	r3, [sp, #20]
    e568:	f89d 3014 	ldrb.w	r3, [sp, #20]
    e56c:	7243      	strb	r3, [r0, #9]
    e56e:	0a23      	lsrs	r3, r4, #8
    e570:	72c3      	strb	r3, [r0, #11]
    e572:	4620      	mov	r0, r4
    e574:	f7ff fcde 	bl	df34 <attsFindServiceGroupEnd>
    e578:	990c      	ldr	r1, [sp, #48]	; 0x30
    e57a:	7328      	strb	r0, [r5, #12]
    e57c:	0a02      	lsrs	r2, r0, #8
    e57e:	f105 030e 	add.w	r3, r5, #14
    e582:	736a      	strb	r2, [r5, #13]
    e584:	4683      	mov	fp, r0
    e586:	9a04      	ldr	r2, [sp, #16]
    e588:	6849      	ldr	r1, [r1, #4]
    e58a:	4618      	mov	r0, r3
    e58c:	f7fd fdb8 	bl	c100 <memcpy>
    e590:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    e594:	9206      	str	r2, [sp, #24]
    e596:	3e06      	subs	r6, #6
    e598:	1ab6      	subs	r6, r6, r2
    e59a:	9b06      	ldr	r3, [sp, #24]
    e59c:	b2b2      	uxth	r2, r6
    e59e:	9207      	str	r2, [sp, #28]
    e5a0:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
    e5a4:	9a05      	ldr	r2, [sp, #20]
    e5a6:	33fc      	adds	r3, #252	; 0xfc
    e5a8:	1886      	adds	r6, r0, r2
    e5aa:	9309      	str	r3, [sp, #36]	; 0x24
    e5ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e5b0:	459b      	cmp	fp, r3
    e5b2:	f1a6 0404 	sub.w	r4, r6, #4
    e5b6:	d049      	beq.n	e64c <attsProcReadGroupTypeReq+0x1ac>
    e5b8:	f10b 0001 	add.w	r0, fp, #1
    e5bc:	9b03      	ldr	r3, [sp, #12]
    e5be:	b280      	uxth	r0, r0
    e5c0:	4283      	cmp	r3, r0
    e5c2:	d343      	bcc.n	e64c <attsProcReadGroupTypeReq+0x1ac>
    e5c4:	ab0d      	add	r3, sp, #52	; 0x34
    e5c6:	9301      	str	r3, [sp, #4]
    e5c8:	ab0c      	add	r3, sp, #48	; 0x30
    e5ca:	9300      	str	r3, [sp, #0]
    e5cc:	4652      	mov	r2, sl
    e5ce:	9b08      	ldr	r3, [sp, #32]
    e5d0:	9903      	ldr	r1, [sp, #12]
    e5d2:	f7ff fc75 	bl	dec0 <attsFindUuidInRange>
    e5d6:	4683      	mov	fp, r0
    e5d8:	2800      	cmp	r0, #0
    e5da:	d037      	beq.n	e64c <attsProcReadGroupTypeReq+0x1ac>
    e5dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e5de:	9906      	ldr	r1, [sp, #24]
    e5e0:	689a      	ldr	r2, [r3, #8]
    e5e2:	8812      	ldrh	r2, [r2, #0]
    e5e4:	428a      	cmp	r2, r1
    e5e6:	d131      	bne.n	e64c <attsProcReadGroupTypeReq+0x1ac>
    e5e8:	4602      	mov	r2, r0
    e5ea:	7bdb      	ldrb	r3, [r3, #15]
    e5ec:	f899 001c 	ldrb.w	r0, [r9, #28]
    e5f0:	2101      	movs	r1, #1
    e5f2:	f7ff fb17 	bl	dc24 <attsPermissions>
    e5f6:	bb48      	cbnz	r0, e64c <attsProcReadGroupTypeReq+0x1ac>
    e5f8:	9b07      	ldr	r3, [sp, #28]
    e5fa:	9a05      	ldr	r2, [sp, #20]
    e5fc:	4293      	cmp	r3, r2
    e5fe:	d347      	bcc.n	e690 <attsProcReadGroupTypeReq+0x1f0>
    e600:	ea4f 231b 	mov.w	r3, fp, lsr #8
    e604:	f806 bc04 	strb.w	fp, [r6, #-4]
    e608:	f806 3c03 	strb.w	r3, [r6, #-3]
    e60c:	4658      	mov	r0, fp
    e60e:	f7ff fc91 	bl	df34 <attsFindServiceGroupEnd>
    e612:	0a03      	lsrs	r3, r0, #8
    e614:	f806 0c02 	strb.w	r0, [r6, #-2]
    e618:	f806 3c01 	strb.w	r3, [r6, #-1]
    e61c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e61e:	9a04      	ldr	r2, [sp, #16]
    e620:	6859      	ldr	r1, [r3, #4]
    e622:	4683      	mov	fp, r0
    e624:	4630      	mov	r0, r6
    e626:	f7fd fd6b 	bl	c100 <memcpy>
    e62a:	9b07      	ldr	r3, [sp, #28]
    e62c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    e62e:	4413      	add	r3, r2
    e630:	b29b      	uxth	r3, r3
    e632:	9307      	str	r3, [sp, #28]
    e634:	9b05      	ldr	r3, [sp, #20]
    e636:	441e      	add	r6, r3
    e638:	e7b8      	b.n	e5ac <attsProcReadGroupTypeReq+0x10c>
    e63a:	f04f 0804 	mov.w	r8, #4
    e63e:	2400      	movs	r4, #0
    e640:	4625      	mov	r5, r4
    e642:	e003      	b.n	e64c <attsProcReadGroupTypeReq+0x1ac>
    e644:	f04f 0801 	mov.w	r8, #1
    e648:	463c      	mov	r4, r7
    e64a:	463d      	mov	r5, r7
    e64c:	4648      	mov	r0, r9
    e64e:	f7ff f9e1 	bl	da14 <attsDiscBusy>
    e652:	f8b9 0018 	ldrh.w	r0, [r9, #24]
    e656:	f1b8 0f00 	cmp.w	r8, #0
    e65a:	d11b      	bne.n	e694 <attsProcReadGroupTypeReq+0x1f4>
    e65c:	f105 0208 	add.w	r2, r5, #8
    e660:	1aa2      	subs	r2, r4, r2
    e662:	4601      	mov	r1, r0
    e664:	462b      	mov	r3, r5
    e666:	b292      	uxth	r2, r2
    e668:	2004      	movs	r0, #4
    e66a:	f002 f875 	bl	10758 <L2cDataReq>
    e66e:	b00f      	add	sp, #60	; 0x3c
    e670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e674:	f04f 0801 	mov.w	r8, #1
    e678:	e7e1      	b.n	e63e <attsProcReadGroupTypeReq+0x19e>
    e67a:	f04f 0810 	mov.w	r8, #16
    e67e:	e7de      	b.n	e63e <attsProcReadGroupTypeReq+0x19e>
    e680:	f04f 080a 	mov.w	r8, #10
    e684:	e7dc      	b.n	e640 <attsProcReadGroupTypeReq+0x1a0>
    e686:	4627      	mov	r7, r4
    e688:	e7d9      	b.n	e63e <attsProcReadGroupTypeReq+0x19e>
    e68a:	4604      	mov	r4, r0
    e68c:	4698      	mov	r8, r3
    e68e:	e7dd      	b.n	e64c <attsProcReadGroupTypeReq+0x1ac>
    e690:	4680      	mov	r8, r0
    e692:	e7db      	b.n	e64c <attsProcReadGroupTypeReq+0x1ac>
    e694:	4643      	mov	r3, r8
    e696:	463a      	mov	r2, r7
    e698:	2110      	movs	r1, #16
    e69a:	f7ff f93d 	bl	d918 <attsErrRsp>
    e69e:	e7e6      	b.n	e66e <attsProcReadGroupTypeReq+0x1ce>

0000e6a0 <attsSignedWriteStart>:
    e6a0:	6843      	ldr	r3, [r0, #4]
    e6a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e6a4:	4606      	mov	r6, r0
    e6a6:	460d      	mov	r5, r1
    e6a8:	b1eb      	cbz	r3, e6e6 <attsSignedWriteStart+0x46>
    e6aa:	894c      	ldrh	r4, [r1, #10]
    e6ac:	3404      	adds	r4, #4
    e6ae:	b2a4      	uxth	r4, r4
    e6b0:	4620      	mov	r0, r4
    e6b2:	f00a fcb3 	bl	1901c <WsfBufAlloc>
    e6b6:	60b5      	str	r5, [r6, #8]
    e6b8:	4607      	mov	r7, r0
    e6ba:	b1a0      	cbz	r0, e6e6 <attsSignedWriteStart+0x46>
    e6bc:	4622      	mov	r2, r4
    e6be:	f105 0110 	add.w	r1, r5, #16
    e6c2:	f004 fc49 	bl	12f58 <WStrReverseCpy>
    e6c6:	4b0c      	ldr	r3, [pc, #48]	; (e6f8 <attsSignedWriteStart+0x58>)
    e6c8:	6870      	ldr	r0, [r6, #4]
    e6ca:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
    e6ce:	2223      	movs	r2, #35	; 0x23
    e6d0:	9201      	str	r2, [sp, #4]
    e6d2:	7b2a      	ldrb	r2, [r5, #12]
    e6d4:	9200      	str	r2, [sp, #0]
    e6d6:	4639      	mov	r1, r7
    e6d8:	b2e2      	uxtb	r2, r4
    e6da:	f004 fe85 	bl	133e8 <SecCmac>
    e6de:	b940      	cbnz	r0, e6f2 <attsSignedWriteStart+0x52>
    e6e0:	4638      	mov	r0, r7
    e6e2:	f00a fcdb 	bl	1909c <WsfBufFree>
    e6e6:	4628      	mov	r0, r5
    e6e8:	b003      	add	sp, #12
    e6ea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    e6ee:	f00a bcd5 	b.w	1909c <WsfBufFree>
    e6f2:	b003      	add	sp, #12
    e6f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e6f6:	bf00      	nop
    e6f8:	100035f0 	.word	0x100035f0

0000e6fc <attsProcSignedWrite>:
    e6fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    e700:	7a93      	ldrb	r3, [r2, #10]
    e702:	7a55      	ldrb	r5, [r2, #9]
    e704:	eb05 2503 	add.w	r5, r5, r3, lsl #8
    e708:	b2ad      	uxth	r5, r5
    e70a:	4607      	mov	r7, r0
    e70c:	4689      	mov	r9, r1
    e70e:	4628      	mov	r0, r5
    e710:	a901      	add	r1, sp, #4
    e712:	4690      	mov	r8, r2
    e714:	f7ff fa5a 	bl	dbcc <attsFindByHandle>
    e718:	4604      	mov	r4, r0
    e71a:	2800      	cmp	r0, #0
    e71c:	d033      	beq.n	e786 <attsProcSignedWrite+0x8a>
    e71e:	7bc3      	ldrb	r3, [r0, #15]
    e720:	7f38      	ldrb	r0, [r7, #28]
    e722:	462a      	mov	r2, r5
    e724:	2110      	movs	r1, #16
    e726:	f7ff fa7d 	bl	dc24 <attsPermissions>
    e72a:	bb60      	cbnz	r0, e786 <attsProcSignedWrite+0x8a>
    e72c:	7ba2      	ldrb	r2, [r4, #14]
    e72e:	0651      	lsls	r1, r2, #25
    e730:	d529      	bpl.n	e786 <attsProcSignedWrite+0x8a>
    e732:	f1a9 060f 	sub.w	r6, r9, #15
    e736:	0712      	lsls	r2, r2, #28
    e738:	b2b6      	uxth	r6, r6
    e73a:	89a3      	ldrh	r3, [r4, #12]
    e73c:	d421      	bmi.n	e782 <attsProcSignedWrite+0x86>
    e73e:	429e      	cmp	r6, r3
    e740:	d121      	bne.n	e786 <attsProcSignedWrite+0x8a>
    e742:	f109 000f 	add.w	r0, r9, #15
    e746:	b280      	uxth	r0, r0
    e748:	f00a fc68 	bl	1901c <WsfBufAlloc>
    e74c:	4604      	mov	r4, r0
    e74e:	b1d0      	cbz	r0, e786 <attsProcSignedWrite+0x8a>
    e750:	6047      	str	r7, [r0, #4]
    e752:	8105      	strh	r5, [r0, #8]
    e754:	8146      	strh	r6, [r0, #10]
    e756:	7f3b      	ldrb	r3, [r7, #28]
    e758:	7303      	strb	r3, [r0, #12]
    e75a:	464a      	mov	r2, r9
    e75c:	f108 0108 	add.w	r1, r8, #8
    e760:	300d      	adds	r0, #13
    e762:	f7fd fccd 	bl	c100 <memcpy>
    e766:	7f38      	ldrb	r0, [r7, #28]
    e768:	4a0a      	ldr	r2, [pc, #40]	; (e794 <attsProcSignedWrite+0x98>)
    e76a:	1e43      	subs	r3, r0, #1
    e76c:	200c      	movs	r0, #12
    e76e:	fb00 2003 	mla	r0, r0, r3, r2
    e772:	4621      	mov	r1, r4
    e774:	6883      	ldr	r3, [r0, #8]
    e776:	b14b      	cbz	r3, e78c <attsProcSignedWrite+0x90>
    e778:	f102 0060 	add.w	r0, r2, #96	; 0x60
    e77c:	f00a fd48 	bl	19210 <WsfQueueEnq>
    e780:	e001      	b.n	e786 <attsProcSignedWrite+0x8a>
    e782:	429e      	cmp	r6, r3
    e784:	d9dd      	bls.n	e742 <attsProcSignedWrite+0x46>
    e786:	b003      	add	sp, #12
    e788:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e78c:	f7ff ff88 	bl	e6a0 <attsSignedWriteStart>
    e790:	e7f9      	b.n	e786 <attsProcSignedWrite+0x8a>
    e792:	bf00      	nop
    e794:	10003a6c 	.word	0x10003a6c

0000e798 <attsSignMsgCback>:
    e798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e79c:	7883      	ldrb	r3, [r0, #2]
    e79e:	2b23      	cmp	r3, #35	; 0x23
    e7a0:	b088      	sub	sp, #32
    e7a2:	d152      	bne.n	e84a <attsSignMsgCback+0xb2>
    e7a4:	7806      	ldrb	r6, [r0, #0]
    e7a6:	4d39      	ldr	r5, [pc, #228]	; (e88c <attsSignMsgCback+0xf4>)
    e7a8:	6841      	ldr	r1, [r0, #4]
    e7aa:	3e01      	subs	r6, #1
    e7ac:	270c      	movs	r7, #12
    e7ae:	4377      	muls	r7, r6
    e7b0:	19eb      	adds	r3, r5, r7
    e7b2:	2208      	movs	r2, #8
    e7b4:	689c      	ldr	r4, [r3, #8]
    e7b6:	a806      	add	r0, sp, #24
    e7b8:	f004 fbce 	bl	12f58 <WStrReverseCpy>
    e7bc:	f8b4 a00a 	ldrh.w	sl, [r4, #10]
    e7c0:	f104 090d 	add.w	r9, r4, #13
    e7c4:	f10a 0107 	add.w	r1, sl, #7
    e7c8:	2208      	movs	r2, #8
    e7ca:	4449      	add	r1, r9
    e7cc:	a806      	add	r0, sp, #24
    e7ce:	f011 fd77 	bl	202c0 <memcmp>
    e7d2:	4680      	mov	r8, r0
    e7d4:	bb50      	cbnz	r0, e82c <attsSignMsgCback+0x94>
    e7d6:	eb09 030a 	add.w	r3, r9, sl
    e7da:	795a      	ldrb	r2, [r3, #5]
    e7dc:	7919      	ldrb	r1, [r3, #4]
    e7de:	0412      	lsls	r2, r2, #16
    e7e0:	eb02 2201 	add.w	r2, r2, r1, lsl #8
    e7e4:	78d9      	ldrb	r1, [r3, #3]
    e7e6:	799b      	ldrb	r3, [r3, #6]
    e7e8:	440a      	add	r2, r1
    e7ea:	eb02 6203 	add.w	r2, r2, r3, lsl #24
    e7ee:	59eb      	ldr	r3, [r5, r7]
    e7f0:	429a      	cmp	r2, r3
    e7f2:	d31b      	bcc.n	e82c <attsSignMsgCback+0x94>
    e7f4:	3201      	adds	r2, #1
    e7f6:	51ea      	str	r2, [r5, r7]
    e7f8:	a905      	add	r1, sp, #20
    e7fa:	8920      	ldrh	r0, [r4, #8]
    e7fc:	f7ff f9e6 	bl	dbcc <attsFindByHandle>
    e800:	4607      	mov	r7, r0
    e802:	b198      	cbz	r0, e82c <attsSignMsgCback+0x94>
    e804:	7b82      	ldrb	r2, [r0, #14]
    e806:	0791      	lsls	r1, r2, #30
    e808:	f104 0310 	add.w	r3, r4, #16
    e80c:	d520      	bpl.n	e850 <attsSignMsgCback+0xb8>
    e80e:	9905      	ldr	r1, [sp, #20]
    e810:	f8d1 900c 	ldr.w	r9, [r1, #12]
    e814:	f1b9 0f00 	cmp.w	r9, #0
    e818:	d01a      	beq.n	e850 <attsSignMsgCback+0xb8>
    e81a:	8921      	ldrh	r1, [r4, #8]
    e81c:	7b20      	ldrb	r0, [r4, #12]
    e81e:	e9cd 3701 	strd	r3, r7, [sp, #4]
    e822:	8963      	ldrh	r3, [r4, #10]
    e824:	9300      	str	r3, [sp, #0]
    e826:	22d2      	movs	r2, #210	; 0xd2
    e828:	4643      	mov	r3, r8
    e82a:	47c8      	blx	r9
    e82c:	4620      	mov	r0, r4
    e82e:	f00a fc35 	bl	1909c <WsfBufFree>
    e832:	4817      	ldr	r0, [pc, #92]	; (e890 <attsSignMsgCback+0xf8>)
    e834:	f00a fd0e 	bl	19254 <WsfQueueDeq>
    e838:	4601      	mov	r1, r0
    e83a:	200c      	movs	r0, #12
    e83c:	b309      	cbz	r1, e882 <attsSignMsgCback+0xea>
    e83e:	7b0b      	ldrb	r3, [r1, #12]
    e840:	3b01      	subs	r3, #1
    e842:	fb00 5003 	mla	r0, r0, r3, r5
    e846:	f7ff ff2b 	bl	e6a0 <attsSignedWriteStart>
    e84a:	b008      	add	sp, #32
    e84c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e850:	0692      	lsls	r2, r2, #26
    e852:	d50a      	bpl.n	e86a <attsSignMsgCback+0xd2>
    e854:	4a0f      	ldr	r2, [pc, #60]	; (e894 <attsSignMsgCback+0xfc>)
    e856:	f8d2 8014 	ldr.w	r8, [r2, #20]
    e85a:	f1b8 0f00 	cmp.w	r8, #0
    e85e:	d004      	beq.n	e86a <attsSignMsgCback+0xd2>
    e860:	8922      	ldrh	r2, [r4, #8]
    e862:	7b20      	ldrb	r0, [r4, #12]
    e864:	2109      	movs	r1, #9
    e866:	47c0      	blx	r8
    e868:	e7e0      	b.n	e82c <attsSignMsgCback+0x94>
    e86a:	8962      	ldrh	r2, [r4, #10]
    e86c:	6878      	ldr	r0, [r7, #4]
    e86e:	4619      	mov	r1, r3
    e870:	f7fd fc46 	bl	c100 <memcpy>
    e874:	7bbb      	ldrb	r3, [r7, #14]
    e876:	071b      	lsls	r3, r3, #28
    e878:	bf42      	ittt	mi
    e87a:	68bb      	ldrmi	r3, [r7, #8]
    e87c:	8962      	ldrhmi	r2, [r4, #10]
    e87e:	801a      	strhmi	r2, [r3, #0]
    e880:	e7d4      	b.n	e82c <attsSignMsgCback+0x94>
    e882:	fb00 5506 	mla	r5, r0, r6, r5
    e886:	60a9      	str	r1, [r5, #8]
    e888:	e7df      	b.n	e84a <attsSignMsgCback+0xb2>
    e88a:	bf00      	nop
    e88c:	10003a6c 	.word	0x10003a6c
    e890:	10003acc 	.word	0x10003acc
    e894:	10003a54 	.word	0x10003a54

0000e898 <AttsSignInit>:
    e898:	4b05      	ldr	r3, [pc, #20]	; (e8b0 <AttsSignInit+0x18>)
    e89a:	2200      	movs	r2, #0
    e89c:	e9c3 2218 	strd	r2, r2, [r3, #96]	; 0x60
    e8a0:	4b04      	ldr	r3, [pc, #16]	; (e8b4 <AttsSignInit+0x1c>)
    e8a2:	4a05      	ldr	r2, [pc, #20]	; (e8b8 <AttsSignInit+0x20>)
    e8a4:	60da      	str	r2, [r3, #12]
    e8a6:	4b05      	ldr	r3, [pc, #20]	; (e8bc <AttsSignInit+0x24>)
    e8a8:	4a05      	ldr	r2, [pc, #20]	; (e8c0 <AttsSignInit+0x28>)
    e8aa:	641a      	str	r2, [r3, #64]	; 0x40
    e8ac:	4770      	bx	lr
    e8ae:	bf00      	nop
    e8b0:	10003a6c 	.word	0x10003a6c
    e8b4:	10003a54 	.word	0x10003a54
    e8b8:	0000e799 	.word	0x0000e799
    e8bc:	10002b10 	.word	0x10002b10
    e8c0:	0000e6fd 	.word	0x0000e6fd

0000e8c4 <AttsSetCsrk>:
    e8c4:	4b03      	ldr	r3, [pc, #12]	; (e8d4 <AttsSetCsrk+0x10>)
    e8c6:	3801      	subs	r0, #1
    e8c8:	220c      	movs	r2, #12
    e8ca:	fb02 3000 	mla	r0, r2, r0, r3
    e8ce:	6041      	str	r1, [r0, #4]
    e8d0:	4770      	bx	lr
    e8d2:	bf00      	nop
    e8d4:	10003a6c 	.word	0x10003a6c

0000e8d8 <AttsSetSignCounter>:
    e8d8:	230c      	movs	r3, #12
    e8da:	3801      	subs	r0, #1
    e8dc:	4358      	muls	r0, r3
    e8de:	4b01      	ldr	r3, [pc, #4]	; (e8e4 <AttsSetSignCounter+0xc>)
    e8e0:	5019      	str	r1, [r3, r0]
    e8e2:	4770      	bx	lr
    e8e4:	10003a6c 	.word	0x10003a6c

0000e8e8 <AttsGetSignCounter>:
    e8e8:	230c      	movs	r3, #12
    e8ea:	3801      	subs	r0, #1
    e8ec:	4358      	muls	r0, r3
    e8ee:	4b01      	ldr	r3, [pc, #4]	; (e8f4 <AttsGetSignCounter+0xc>)
    e8f0:	5818      	ldr	r0, [r3, r0]
    e8f2:	4770      	bx	lr
    e8f4:	10003a6c 	.word	0x10003a6c

0000e8f8 <attsProcWrite>:
    e8f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e8fc:	7a93      	ldrb	r3, [r2, #10]
    e8fe:	7a54      	ldrb	r4, [r2, #9]
    e900:	f892 9008 	ldrb.w	r9, [r2, #8]
    e904:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    e908:	b087      	sub	sp, #28
    e90a:	b2a4      	uxth	r4, r4
    e90c:	4680      	mov	r8, r0
    e90e:	460d      	mov	r5, r1
    e910:	4620      	mov	r0, r4
    e912:	a905      	add	r1, sp, #20
    e914:	4617      	mov	r7, r2
    e916:	f7ff f959 	bl	dbcc <attsFindByHandle>
    e91a:	4606      	mov	r6, r0
    e91c:	2800      	cmp	r0, #0
    e91e:	d057      	beq.n	e9d0 <attsProcWrite+0xd8>
    e920:	7bc3      	ldrb	r3, [r0, #15]
    e922:	f898 001c 	ldrb.w	r0, [r8, #28]
    e926:	4622      	mov	r2, r4
    e928:	2110      	movs	r1, #16
    e92a:	f7ff f97b 	bl	dc24 <attsPermissions>
    e92e:	b9c0      	cbnz	r0, e962 <attsProcWrite+0x6a>
    e930:	7bb2      	ldrb	r2, [r6, #14]
    e932:	89b3      	ldrh	r3, [r6, #12]
    e934:	3d03      	subs	r5, #3
    e936:	0710      	lsls	r0, r2, #28
    e938:	b2ad      	uxth	r5, r5
    e93a:	d41d      	bmi.n	e978 <attsProcWrite+0x80>
    e93c:	429d      	cmp	r5, r3
    e93e:	d11d      	bne.n	e97c <attsProcWrite+0x84>
    e940:	0791      	lsls	r1, r2, #30
    e942:	f107 030b 	add.w	r3, r7, #11
    e946:	d51b      	bpl.n	e980 <attsProcWrite+0x88>
    e948:	9905      	ldr	r1, [sp, #20]
    e94a:	68cf      	ldr	r7, [r1, #12]
    e94c:	b1c7      	cbz	r7, e980 <attsProcWrite+0x88>
    e94e:	e9cd 3601 	strd	r3, r6, [sp, #4]
    e952:	f898 001c 	ldrb.w	r0, [r8, #28]
    e956:	9500      	str	r5, [sp, #0]
    e958:	2300      	movs	r3, #0
    e95a:	464a      	mov	r2, r9
    e95c:	4621      	mov	r1, r4
    e95e:	47b8      	blx	r7
    e960:	b318      	cbz	r0, e9aa <attsProcWrite+0xb2>
    e962:	f1b9 0f12 	cmp.w	r9, #18
    e966:	d130      	bne.n	e9ca <attsProcWrite+0xd2>
    e968:	4603      	mov	r3, r0
    e96a:	4622      	mov	r2, r4
    e96c:	4649      	mov	r1, r9
    e96e:	f8b8 0018 	ldrh.w	r0, [r8, #24]
    e972:	f7fe ffd1 	bl	d918 <attsErrRsp>
    e976:	e028      	b.n	e9ca <attsProcWrite+0xd2>
    e978:	429d      	cmp	r5, r3
    e97a:	d9e1      	bls.n	e940 <attsProcWrite+0x48>
    e97c:	200d      	movs	r0, #13
    e97e:	e7f0      	b.n	e962 <attsProcWrite+0x6a>
    e980:	0692      	lsls	r2, r2, #26
    e982:	d508      	bpl.n	e996 <attsProcWrite+0x9e>
    e984:	4a13      	ldr	r2, [pc, #76]	; (e9d4 <attsProcWrite+0xdc>)
    e986:	6957      	ldr	r7, [r2, #20]
    e988:	b12f      	cbz	r7, e996 <attsProcWrite+0x9e>
    e98a:	4622      	mov	r2, r4
    e98c:	2109      	movs	r1, #9
    e98e:	f898 001c 	ldrb.w	r0, [r8, #28]
    e992:	47b8      	blx	r7
    e994:	e7e4      	b.n	e960 <attsProcWrite+0x68>
    e996:	4619      	mov	r1, r3
    e998:	462a      	mov	r2, r5
    e99a:	6870      	ldr	r0, [r6, #4]
    e99c:	f7fd fbb0 	bl	c100 <memcpy>
    e9a0:	7bb3      	ldrb	r3, [r6, #14]
    e9a2:	071b      	lsls	r3, r3, #28
    e9a4:	d501      	bpl.n	e9aa <attsProcWrite+0xb2>
    e9a6:	68b3      	ldr	r3, [r6, #8]
    e9a8:	801d      	strh	r5, [r3, #0]
    e9aa:	f1b9 0f12 	cmp.w	r9, #18
    e9ae:	d10c      	bne.n	e9ca <attsProcWrite+0xd2>
    e9b0:	2009      	movs	r0, #9
    e9b2:	f7fd fd47 	bl	c444 <attMsgAlloc>
    e9b6:	4603      	mov	r3, r0
    e9b8:	b138      	cbz	r0, e9ca <attsProcWrite+0xd2>
    e9ba:	2213      	movs	r2, #19
    e9bc:	7202      	strb	r2, [r0, #8]
    e9be:	f8b8 1018 	ldrh.w	r1, [r8, #24]
    e9c2:	2201      	movs	r2, #1
    e9c4:	2004      	movs	r0, #4
    e9c6:	f001 fec7 	bl	10758 <L2cDataReq>
    e9ca:	b007      	add	sp, #28
    e9cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e9d0:	2001      	movs	r0, #1
    e9d2:	e7c6      	b.n	e962 <attsProcWrite+0x6a>
    e9d4:	10003a54 	.word	0x10003a54

0000e9d8 <attsProcPrepWriteReq>:
    e9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e9dc:	7a93      	ldrb	r3, [r2, #10]
    e9de:	7a54      	ldrb	r4, [r2, #9]
    e9e0:	7ad5      	ldrb	r5, [r2, #11]
    e9e2:	7b16      	ldrb	r6, [r2, #12]
    e9e4:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    e9e8:	b089      	sub	sp, #36	; 0x24
    e9ea:	b2a4      	uxth	r4, r4
    e9ec:	4607      	mov	r7, r0
    e9ee:	468a      	mov	sl, r1
    e9f0:	4620      	mov	r0, r4
    e9f2:	a907      	add	r1, sp, #28
    e9f4:	4693      	mov	fp, r2
    e9f6:	f7ff f8e9 	bl	dbcc <attsFindByHandle>
    e9fa:	4680      	mov	r8, r0
    e9fc:	2800      	cmp	r0, #0
    e9fe:	d079      	beq.n	eaf4 <attsProcPrepWriteReq+0x11c>
    ea00:	7bc3      	ldrb	r3, [r0, #15]
    ea02:	7f38      	ldrb	r0, [r7, #28]
    ea04:	4622      	mov	r2, r4
    ea06:	2110      	movs	r1, #16
    ea08:	f7ff f90c 	bl	dc24 <attsPermissions>
    ea0c:	2800      	cmp	r0, #0
    ea0e:	d153      	bne.n	eab8 <attsProcPrepWriteReq+0xe0>
    ea10:	eb05 2506 	add.w	r5, r5, r6, lsl #8
    ea14:	b2ab      	uxth	r3, r5
    ea16:	9305      	str	r3, [sp, #20]
    ea18:	9a05      	ldr	r2, [sp, #20]
    ea1a:	f898 300e 	ldrb.w	r3, [r8, #14]
    ea1e:	b10a      	cbz	r2, ea24 <attsProcPrepWriteReq+0x4c>
    ea20:	06d9      	lsls	r1, r3, #27
    ea22:	d569      	bpl.n	eaf8 <attsProcPrepWriteReq+0x120>
    ea24:	f1aa 0605 	sub.w	r6, sl, #5
    ea28:	071a      	lsls	r2, r3, #28
    ea2a:	b2b6      	uxth	r6, r6
    ea2c:	d403      	bmi.n	ea36 <attsProcPrepWriteReq+0x5e>
    ea2e:	f8b8 300c 	ldrh.w	r3, [r8, #12]
    ea32:	42b3      	cmp	r3, r6
    ea34:	d162      	bne.n	eafc <attsProcPrepWriteReq+0x124>
    ea36:	4638      	mov	r0, r7
    ea38:	f00a fc94 	bl	19364 <WsfQueueCount>
    ea3c:	4b32      	ldr	r3, [pc, #200]	; (eb08 <attsProcPrepWriteReq+0x130>)
    ea3e:	681b      	ldr	r3, [r3, #0]
    ea40:	79db      	ldrb	r3, [r3, #7]
    ea42:	4283      	cmp	r3, r0
    ea44:	d95c      	bls.n	eb00 <attsProcPrepWriteReq+0x128>
    ea46:	f10a 0006 	add.w	r0, sl, #6
    ea4a:	b280      	uxth	r0, r0
    ea4c:	f00a fae6 	bl	1901c <WsfBufAlloc>
    ea50:	4681      	mov	r9, r0
    ea52:	2800      	cmp	r0, #0
    ea54:	d056      	beq.n	eb04 <attsProcPrepWriteReq+0x12c>
    ea56:	f898 300e 	ldrb.w	r3, [r8, #14]
    ea5a:	079b      	lsls	r3, r3, #30
    ea5c:	f10b 0b0d 	add.w	fp, fp, #13
    ea60:	d41b      	bmi.n	ea9a <attsProcPrepWriteReq+0xc2>
    ea62:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    ea66:	f8a9 3008 	strh.w	r3, [r9, #8]
    ea6a:	4632      	mov	r2, r6
    ea6c:	4659      	mov	r1, fp
    ea6e:	f8a9 6004 	strh.w	r6, [r9, #4]
    ea72:	f8a9 4006 	strh.w	r4, [r9, #6]
    ea76:	f109 000a 	add.w	r0, r9, #10
    ea7a:	f7fd fb41 	bl	c100 <memcpy>
    ea7e:	4649      	mov	r1, r9
    ea80:	4638      	mov	r0, r7
    ea82:	f00a fbc5 	bl	19210 <WsfQueueEnq>
    ea86:	f10a 0008 	add.w	r0, sl, #8
    ea8a:	b280      	uxth	r0, r0
    ea8c:	f7fd fcda 	bl	c444 <attMsgAlloc>
    ea90:	4680      	mov	r8, r0
    ea92:	b9c0      	cbnz	r0, eac6 <attsProcPrepWriteReq+0xee>
    ea94:	b009      	add	sp, #36	; 0x24
    ea96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ea9a:	9b07      	ldr	r3, [sp, #28]
    ea9c:	68db      	ldr	r3, [r3, #12]
    ea9e:	461d      	mov	r5, r3
    eaa0:	2b00      	cmp	r3, #0
    eaa2:	d0de      	beq.n	ea62 <attsProcPrepWriteReq+0x8a>
    eaa4:	7f38      	ldrb	r0, [r7, #28]
    eaa6:	9600      	str	r6, [sp, #0]
    eaa8:	e9cd b801 	strd	fp, r8, [sp, #4]
    eaac:	2300      	movs	r3, #0
    eaae:	2216      	movs	r2, #22
    eab0:	4621      	mov	r1, r4
    eab2:	47a8      	blx	r5
    eab4:	2800      	cmp	r0, #0
    eab6:	d0d4      	beq.n	ea62 <attsProcPrepWriteReq+0x8a>
    eab8:	4603      	mov	r3, r0
    eaba:	4622      	mov	r2, r4
    eabc:	2116      	movs	r1, #22
    eabe:	8b38      	ldrh	r0, [r7, #24]
    eac0:	f7fe ff2a 	bl	d918 <attsErrRsp>
    eac4:	e7e6      	b.n	ea94 <attsProcPrepWriteReq+0xbc>
    eac6:	2317      	movs	r3, #23
    eac8:	7203      	strb	r3, [r0, #8]
    eaca:	f89d 3014 	ldrb.w	r3, [sp, #20]
    eace:	72c3      	strb	r3, [r0, #11]
    ead0:	9b05      	ldr	r3, [sp, #20]
    ead2:	7244      	strb	r4, [r0, #9]
    ead4:	0a1d      	lsrs	r5, r3, #8
    ead6:	0a24      	lsrs	r4, r4, #8
    ead8:	7284      	strb	r4, [r0, #10]
    eada:	7305      	strb	r5, [r0, #12]
    eadc:	4632      	mov	r2, r6
    eade:	4659      	mov	r1, fp
    eae0:	300d      	adds	r0, #13
    eae2:	f7fd fb0d 	bl	c100 <memcpy>
    eae6:	4643      	mov	r3, r8
    eae8:	4652      	mov	r2, sl
    eaea:	8b39      	ldrh	r1, [r7, #24]
    eaec:	2004      	movs	r0, #4
    eaee:	f001 fe33 	bl	10758 <L2cDataReq>
    eaf2:	e7cf      	b.n	ea94 <attsProcPrepWriteReq+0xbc>
    eaf4:	2001      	movs	r0, #1
    eaf6:	e7df      	b.n	eab8 <attsProcPrepWriteReq+0xe0>
    eaf8:	200b      	movs	r0, #11
    eafa:	e7dd      	b.n	eab8 <attsProcPrepWriteReq+0xe0>
    eafc:	200d      	movs	r0, #13
    eafe:	e7db      	b.n	eab8 <attsProcPrepWriteReq+0xe0>
    eb00:	2009      	movs	r0, #9
    eb02:	e7d9      	b.n	eab8 <attsProcPrepWriteReq+0xe0>
    eb04:	2011      	movs	r0, #17
    eb06:	e7d7      	b.n	eab8 <attsProcPrepWriteReq+0xe0>
    eb08:	10002ba4 	.word	0x10002ba4

0000eb0c <attsProcExecWriteReq>:
    eb0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eb10:	7a53      	ldrb	r3, [r2, #9]
    eb12:	b086      	sub	sp, #24
    eb14:	4606      	mov	r6, r0
    eb16:	b973      	cbnz	r3, eb36 <attsProcExecWriteReq+0x2a>
    eb18:	f7fe ff56 	bl	d9c8 <attsClearPrepWrites>
    eb1c:	2009      	movs	r0, #9
    eb1e:	f7fd fc91 	bl	c444 <attMsgAlloc>
    eb22:	4603      	mov	r3, r0
    eb24:	b360      	cbz	r0, eb80 <attsProcExecWriteReq+0x74>
    eb26:	2219      	movs	r2, #25
    eb28:	7202      	strb	r2, [r0, #8]
    eb2a:	8b31      	ldrh	r1, [r6, #24]
    eb2c:	2201      	movs	r2, #1
    eb2e:	2004      	movs	r0, #4
    eb30:	f001 fe12 	bl	10758 <L2cDataReq>
    eb34:	e024      	b.n	eb80 <attsProcExecWriteReq+0x74>
    eb36:	2b01      	cmp	r3, #1
    eb38:	d16e      	bne.n	ec18 <attsProcExecWriteReq+0x10c>
    eb3a:	6804      	ldr	r4, [r0, #0]
    eb3c:	b94c      	cbnz	r4, eb52 <attsProcExecWriteReq+0x46>
    eb3e:	f8df 80dc 	ldr.w	r8, [pc, #220]	; ec1c <attsProcExecWriteReq+0x110>
    eb42:	4630      	mov	r0, r6
    eb44:	f00a fb86 	bl	19254 <WsfQueueDeq>
    eb48:	4605      	mov	r5, r0
    eb4a:	bb00      	cbnz	r0, eb8e <attsProcExecWriteReq+0x82>
    eb4c:	2c00      	cmp	r4, #0
    eb4e:	d0e5      	beq.n	eb1c <attsProcExecWriteReq+0x10>
    eb50:	e010      	b.n	eb74 <attsProcExecWriteReq+0x68>
    eb52:	a904      	add	r1, sp, #16
    eb54:	88e0      	ldrh	r0, [r4, #6]
    eb56:	f7ff f839 	bl	dbcc <attsFindByHandle>
    eb5a:	b1b0      	cbz	r0, eb8a <attsProcExecWriteReq+0x7e>
    eb5c:	8921      	ldrh	r1, [r4, #8]
    eb5e:	8982      	ldrh	r2, [r0, #12]
    eb60:	4291      	cmp	r1, r2
    eb62:	d810      	bhi.n	eb86 <attsProcExecWriteReq+0x7a>
    eb64:	88a3      	ldrh	r3, [r4, #4]
    eb66:	440b      	add	r3, r1
    eb68:	4293      	cmp	r3, r2
    eb6a:	dd0e      	ble.n	eb8a <attsProcExecWriteReq+0x7e>
    eb6c:	240d      	movs	r4, #13
    eb6e:	4630      	mov	r0, r6
    eb70:	f7fe ff2a 	bl	d9c8 <attsClearPrepWrites>
    eb74:	4623      	mov	r3, r4
    eb76:	2200      	movs	r2, #0
    eb78:	2118      	movs	r1, #24
    eb7a:	8b30      	ldrh	r0, [r6, #24]
    eb7c:	f7fe fecc 	bl	d918 <attsErrRsp>
    eb80:	b006      	add	sp, #24
    eb82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eb86:	2407      	movs	r4, #7
    eb88:	e7f1      	b.n	eb6e <attsProcExecWriteReq+0x62>
    eb8a:	6824      	ldr	r4, [r4, #0]
    eb8c:	e7d6      	b.n	eb3c <attsProcExecWriteReq+0x30>
    eb8e:	a905      	add	r1, sp, #20
    eb90:	88e8      	ldrh	r0, [r5, #6]
    eb92:	f7ff f81b 	bl	dbcc <attsFindByHandle>
    eb96:	4607      	mov	r7, r0
    eb98:	b920      	cbnz	r0, eba4 <attsProcExecWriteReq+0x98>
    eb9a:	240e      	movs	r4, #14
    eb9c:	4630      	mov	r0, r6
    eb9e:	f7fe ff13 	bl	d9c8 <attsClearPrepWrites>
    eba2:	e017      	b.n	ebd4 <attsProcExecWriteReq+0xc8>
    eba4:	7bc3      	ldrb	r3, [r0, #15]
    eba6:	06d8      	lsls	r0, r3, #27
    eba8:	d534      	bpl.n	ec14 <attsProcExecWriteReq+0x108>
    ebaa:	7bba      	ldrb	r2, [r7, #14]
    ebac:	0791      	lsls	r1, r2, #30
    ebae:	f105 030a 	add.w	r3, r5, #10
    ebb2:	d513      	bpl.n	ebdc <attsProcExecWriteReq+0xd0>
    ebb4:	9905      	ldr	r1, [sp, #20]
    ebb6:	68cc      	ldr	r4, [r1, #12]
    ebb8:	b184      	cbz	r4, ebdc <attsProcExecWriteReq+0xd0>
    ebba:	892a      	ldrh	r2, [r5, #8]
    ebbc:	88e9      	ldrh	r1, [r5, #6]
    ebbe:	7f30      	ldrb	r0, [r6, #28]
    ebc0:	e9cd 3701 	strd	r3, r7, [sp, #4]
    ebc4:	88ab      	ldrh	r3, [r5, #4]
    ebc6:	9300      	str	r3, [sp, #0]
    ebc8:	4613      	mov	r3, r2
    ebca:	2218      	movs	r2, #24
    ebcc:	47a0      	blx	r4
    ebce:	4604      	mov	r4, r0
    ebd0:	2800      	cmp	r0, #0
    ebd2:	d1e3      	bne.n	eb9c <attsProcExecWriteReq+0x90>
    ebd4:	4628      	mov	r0, r5
    ebd6:	f00a fa61 	bl	1909c <WsfBufFree>
    ebda:	e7b2      	b.n	eb42 <attsProcExecWriteReq+0x36>
    ebdc:	0692      	lsls	r2, r2, #26
    ebde:	d507      	bpl.n	ebf0 <attsProcExecWriteReq+0xe4>
    ebe0:	f8d8 4014 	ldr.w	r4, [r8, #20]
    ebe4:	b124      	cbz	r4, ebf0 <attsProcExecWriteReq+0xe4>
    ebe6:	88ea      	ldrh	r2, [r5, #6]
    ebe8:	7f30      	ldrb	r0, [r6, #28]
    ebea:	2109      	movs	r1, #9
    ebec:	47a0      	blx	r4
    ebee:	e7ee      	b.n	ebce <attsProcExecWriteReq+0xc2>
    ebf0:	892c      	ldrh	r4, [r5, #8]
    ebf2:	6878      	ldr	r0, [r7, #4]
    ebf4:	88aa      	ldrh	r2, [r5, #4]
    ebf6:	4420      	add	r0, r4
    ebf8:	4619      	mov	r1, r3
    ebfa:	f7fd fa81 	bl	c100 <memcpy>
    ebfe:	7bbc      	ldrb	r4, [r7, #14]
    ec00:	f014 0408 	ands.w	r4, r4, #8
    ec04:	d0e6      	beq.n	ebd4 <attsProcExecWriteReq+0xc8>
    ec06:	88ab      	ldrh	r3, [r5, #4]
    ec08:	8929      	ldrh	r1, [r5, #8]
    ec0a:	68ba      	ldr	r2, [r7, #8]
    ec0c:	440b      	add	r3, r1
    ec0e:	8013      	strh	r3, [r2, #0]
    ec10:	2400      	movs	r4, #0
    ec12:	e7df      	b.n	ebd4 <attsProcExecWriteReq+0xc8>
    ec14:	2403      	movs	r4, #3
    ec16:	e7c1      	b.n	eb9c <attsProcExecWriteReq+0x90>
    ec18:	2404      	movs	r4, #4
    ec1a:	e7ab      	b.n	eb74 <attsProcExecWriteReq+0x68>
    ec1c:	10003a54 	.word	0x10003a54

0000ec20 <dmAdvCbInit>:
    ec20:	4b0b      	ldr	r3, [pc, #44]	; (ec50 <dmAdvCbInit+0x30>)
    ec22:	181a      	adds	r2, r3, r0
    ec24:	21ff      	movs	r1, #255	; 0xff
    ec26:	b510      	push	{r4, lr}
    ec28:	7511      	strb	r1, [r2, #20]
    ec2a:	f100 0108 	add.w	r1, r0, #8
    ec2e:	f44f 64c8 	mov.w	r4, #1600	; 0x640
    ec32:	f823 4011 	strh.w	r4, [r3, r1, lsl #1]
    ec36:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    ec3a:	f44f 61f0 	mov.w	r1, #1920	; 0x780
    ec3e:	8059      	strh	r1, [r3, #2]
    ec40:	2307      	movs	r3, #7
    ec42:	7553      	strb	r3, [r2, #21]
    ec44:	4b03      	ldr	r3, [pc, #12]	; (ec54 <dmAdvCbInit+0x34>)
    ec46:	4418      	add	r0, r3
    ec48:	2300      	movs	r3, #0
    ec4a:	7443      	strb	r3, [r0, #17]
    ec4c:	75d3      	strb	r3, [r2, #23]
    ec4e:	bd10      	pop	{r4, pc}
    ec50:	10003ad4 	.word	0x10003ad4
    ec54:	10003c84 	.word	0x10003c84

0000ec58 <dmAdvInit>:
    ec58:	b508      	push	{r3, lr}
    ec5a:	2000      	movs	r0, #0
    ec5c:	f7ff ffe0 	bl	ec20 <dmAdvCbInit>
    ec60:	4b03      	ldr	r3, [pc, #12]	; (ec70 <dmAdvInit+0x18>)
    ec62:	4a04      	ldr	r2, [pc, #16]	; (ec74 <dmAdvInit+0x1c>)
    ec64:	7b19      	ldrb	r1, [r3, #12]
    ec66:	7211      	strb	r1, [r2, #8]
    ec68:	2200      	movs	r2, #0
    ec6a:	739a      	strb	r2, [r3, #14]
    ec6c:	bd08      	pop	{r3, pc}
    ec6e:	bf00      	nop
    ec70:	10003c84 	.word	0x10003c84
    ec74:	10003ad4 	.word	0x10003ad4

0000ec78 <DmAdvConfig>:
    ec78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ec7c:	4607      	mov	r7, r0
    ec7e:	200e      	movs	r0, #14
    ec80:	4688      	mov	r8, r1
    ec82:	4616      	mov	r6, r2
    ec84:	461d      	mov	r5, r3
    ec86:	f00a fa59 	bl	1913c <WsfMsgAlloc>
    ec8a:	4604      	mov	r4, r0
    ec8c:	b180      	cbz	r0, ecb0 <DmAdvConfig+0x38>
    ec8e:	2300      	movs	r3, #0
    ec90:	7083      	strb	r3, [r0, #2]
    ec92:	f880 8005 	strb.w	r8, [r0, #5]
    ec96:	7107      	strb	r7, [r0, #4]
    ec98:	7186      	strb	r6, [r0, #6]
    ec9a:	4629      	mov	r1, r5
    ec9c:	3007      	adds	r0, #7
    ec9e:	f004 f8d5 	bl	12e4c <BdaCpy>
    eca2:	4b04      	ldr	r3, [pc, #16]	; (ecb4 <DmAdvConfig+0x3c>)
    eca4:	4621      	mov	r1, r4
    eca6:	7b18      	ldrb	r0, [r3, #12]
    eca8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ecac:	f00a ba6a 	b.w	19184 <WsfMsgSend>
    ecb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ecb4:	10003c84 	.word	0x10003c84

0000ecb8 <DmAdvSetData>:
    ecb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ecbc:	4680      	mov	r8, r0
    ecbe:	200c      	movs	r0, #12
    ecc0:	460f      	mov	r7, r1
    ecc2:	4616      	mov	r6, r2
    ecc4:	461d      	mov	r5, r3
    ecc6:	9c06      	ldr	r4, [sp, #24]
    ecc8:	f00a fa38 	bl	1913c <WsfMsgAlloc>
    eccc:	b170      	cbz	r0, ecec <DmAdvSetData+0x34>
    ecce:	2301      	movs	r3, #1
    ecd0:	7083      	strb	r3, [r0, #2]
    ecd2:	4b07      	ldr	r3, [pc, #28]	; (ecf0 <DmAdvSetData+0x38>)
    ecd4:	f880 8004 	strb.w	r8, [r0, #4]
    ecd8:	7147      	strb	r7, [r0, #5]
    ecda:	7186      	strb	r6, [r0, #6]
    ecdc:	71c5      	strb	r5, [r0, #7]
    ecde:	6084      	str	r4, [r0, #8]
    ece0:	4601      	mov	r1, r0
    ece2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ece6:	7b18      	ldrb	r0, [r3, #12]
    ece8:	f00a ba4c 	b.w	19184 <WsfMsgSend>
    ecec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ecf0:	10003c84 	.word	0x10003c84

0000ecf4 <DmAdvStart>:
    ecf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ecf6:	4604      	mov	r4, r0
    ecf8:	200a      	movs	r0, #10
    ecfa:	460f      	mov	r7, r1
    ecfc:	4616      	mov	r6, r2
    ecfe:	461d      	mov	r5, r3
    ed00:	f00a fa1c 	bl	1913c <WsfMsgAlloc>
    ed04:	b180      	cbz	r0, ed28 <DmAdvStart+0x34>
    ed06:	2302      	movs	r3, #2
    ed08:	7083      	strb	r3, [r0, #2]
    ed0a:	7104      	strb	r4, [r0, #4]
    ed0c:	b12c      	cbz	r4, ed1a <DmAdvStart+0x26>
    ed0e:	783b      	ldrb	r3, [r7, #0]
    ed10:	7143      	strb	r3, [r0, #5]
    ed12:	8833      	ldrh	r3, [r6, #0]
    ed14:	80c3      	strh	r3, [r0, #6]
    ed16:	782b      	ldrb	r3, [r5, #0]
    ed18:	7203      	strb	r3, [r0, #8]
    ed1a:	4b04      	ldr	r3, [pc, #16]	; (ed2c <DmAdvStart+0x38>)
    ed1c:	4601      	mov	r1, r0
    ed1e:	7b18      	ldrb	r0, [r3, #12]
    ed20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ed24:	f00a ba2e 	b.w	19184 <WsfMsgSend>
    ed28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ed2a:	bf00      	nop
    ed2c:	10003c84 	.word	0x10003c84

0000ed30 <DmAdvStop>:
    ed30:	b538      	push	{r3, r4, r5, lr}
    ed32:	4604      	mov	r4, r0
    ed34:	2006      	movs	r0, #6
    ed36:	460d      	mov	r5, r1
    ed38:	f00a fa00 	bl	1913c <WsfMsgAlloc>
    ed3c:	b1a0      	cbz	r0, ed68 <DmAdvStop+0x38>
    ed3e:	2303      	movs	r3, #3
    ed40:	7104      	strb	r4, [r0, #4]
    ed42:	3405      	adds	r4, #5
    ed44:	7083      	strb	r3, [r0, #2]
    ed46:	1e69      	subs	r1, r5, #1
    ed48:	1d43      	adds	r3, r0, #5
    ed4a:	4404      	add	r4, r0
    ed4c:	42a3      	cmp	r3, r4
    ed4e:	d106      	bne.n	ed5e <DmAdvStop+0x2e>
    ed50:	4b06      	ldr	r3, [pc, #24]	; (ed6c <DmAdvStop+0x3c>)
    ed52:	4601      	mov	r1, r0
    ed54:	7b18      	ldrb	r0, [r3, #12]
    ed56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ed5a:	f00a ba13 	b.w	19184 <WsfMsgSend>
    ed5e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    ed62:	f803 2b01 	strb.w	r2, [r3], #1
    ed66:	e7f1      	b.n	ed4c <DmAdvStop+0x1c>
    ed68:	bd38      	pop	{r3, r4, r5, pc}
    ed6a:	bf00      	nop
    ed6c:	10003c84 	.word	0x10003c84

0000ed70 <DmAdvRemoveAdvSet>:
    ed70:	b510      	push	{r4, lr}
    ed72:	4604      	mov	r4, r0
    ed74:	2006      	movs	r0, #6
    ed76:	f00a f9e1 	bl	1913c <WsfMsgAlloc>
    ed7a:	4601      	mov	r1, r0
    ed7c:	b140      	cbz	r0, ed90 <DmAdvRemoveAdvSet+0x20>
    ed7e:	2304      	movs	r3, #4
    ed80:	7083      	strb	r3, [r0, #2]
    ed82:	4b04      	ldr	r3, [pc, #16]	; (ed94 <DmAdvRemoveAdvSet+0x24>)
    ed84:	7104      	strb	r4, [r0, #4]
    ed86:	7b18      	ldrb	r0, [r3, #12]
    ed88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ed8c:	f00a b9fa 	b.w	19184 <WsfMsgSend>
    ed90:	bd10      	pop	{r4, pc}
    ed92:	bf00      	nop
    ed94:	10003c84 	.word	0x10003c84

0000ed98 <DmAdvClearAdvSets>:
    ed98:	b508      	push	{r3, lr}
    ed9a:	2004      	movs	r0, #4
    ed9c:	f00a f9ce 	bl	1913c <WsfMsgAlloc>
    eda0:	4601      	mov	r1, r0
    eda2:	b138      	cbz	r0, edb4 <DmAdvClearAdvSets+0x1c>
    eda4:	2305      	movs	r3, #5
    eda6:	7083      	strb	r3, [r0, #2]
    eda8:	4b03      	ldr	r3, [pc, #12]	; (edb8 <DmAdvClearAdvSets+0x20>)
    edaa:	7b18      	ldrb	r0, [r3, #12]
    edac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    edb0:	f00a b9e8 	b.w	19184 <WsfMsgSend>
    edb4:	bd08      	pop	{r3, pc}
    edb6:	bf00      	nop
    edb8:	10003c84 	.word	0x10003c84

0000edbc <DmAdvSetInterval>:
    edbc:	b570      	push	{r4, r5, r6, lr}
    edbe:	4604      	mov	r4, r0
    edc0:	460e      	mov	r6, r1
    edc2:	4615      	mov	r5, r2
    edc4:	f005 fd5e 	bl	14884 <WsfTaskLock>
    edc8:	f104 0008 	add.w	r0, r4, #8
    edcc:	4b04      	ldr	r3, [pc, #16]	; (ede0 <DmAdvSetInterval+0x24>)
    edce:	f823 6010 	strh.w	r6, [r3, r0, lsl #1]
    edd2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    edd6:	805d      	strh	r5, [r3, #2]
    edd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    eddc:	f005 bd58 	b.w	14890 <WsfTaskUnlock>
    ede0:	10003ad4 	.word	0x10003ad4

0000ede4 <DmAdvSetChannelMap>:
    ede4:	b538      	push	{r3, r4, r5, lr}
    ede6:	4605      	mov	r5, r0
    ede8:	460c      	mov	r4, r1
    edea:	f005 fd4b 	bl	14884 <WsfTaskLock>
    edee:	4803      	ldr	r0, [pc, #12]	; (edfc <DmAdvSetChannelMap+0x18>)
    edf0:	4428      	add	r0, r5
    edf2:	7544      	strb	r4, [r0, #21]
    edf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    edf8:	f005 bd4a 	b.w	14890 <WsfTaskUnlock>
    edfc:	10003ad4 	.word	0x10003ad4

0000ee00 <DmAdvSetAddrType>:
    ee00:	b510      	push	{r4, lr}
    ee02:	4604      	mov	r4, r0
    ee04:	f005 fd3e 	bl	14884 <WsfTaskLock>
    ee08:	4b02      	ldr	r3, [pc, #8]	; (ee14 <DmAdvSetAddrType+0x14>)
    ee0a:	739c      	strb	r4, [r3, #14]
    ee0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ee10:	f005 bd3e 	b.w	14890 <WsfTaskUnlock>
    ee14:	10003c84 	.word	0x10003c84

0000ee18 <DmAdvSetAdValue>:
    ee18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ee1c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    ee20:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
    ee24:	460c      	mov	r4, r1
    ee26:	4691      	mov	r9, r2
    ee28:	8819      	ldrh	r1, [r3, #0]
    ee2a:	4642      	mov	r2, r8
    ee2c:	4683      	mov	fp, r0
    ee2e:	461f      	mov	r7, r3
    ee30:	f000 ff50 	bl	fcd4 <DmFindAdType>
    ee34:	b1f8      	cbz	r0, ee76 <DmAdvSetAdValue+0x5e>
    ee36:	7805      	ldrb	r5, [r0, #0]
    ee38:	1c66      	adds	r6, r4, #1
    ee3a:	42ae      	cmp	r6, r5
    ee3c:	d107      	bne.n	ee4e <DmAdvSetAdValue+0x36>
    ee3e:	4622      	mov	r2, r4
    ee40:	4649      	mov	r1, r9
    ee42:	3002      	adds	r0, #2
    ee44:	f7fd f95c 	bl	c100 <memcpy>
    ee48:	2001      	movs	r0, #1
    ee4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ee4e:	f8b7 c000 	ldrh.w	ip, [r7]
    ee52:	b2ad      	uxth	r5, r5
    ee54:	4466      	add	r6, ip
    ee56:	1b76      	subs	r6, r6, r5
    ee58:	b2b6      	uxth	r6, r6
    ee5a:	4556      	cmp	r6, sl
    ee5c:	d80b      	bhi.n	ee76 <DmAdvSetAdValue+0x5e>
    ee5e:	3501      	adds	r5, #1
    ee60:	1941      	adds	r1, r0, r5
    ee62:	eba1 0208 	sub.w	r2, r1, r8
    ee66:	b2d2      	uxtb	r2, r2
    ee68:	ebac 0202 	sub.w	r2, ip, r2
    ee6c:	f011 fa5a 	bl	20324 <memmove>
    ee70:	883b      	ldrh	r3, [r7, #0]
    ee72:	1b5d      	subs	r5, r3, r5
    ee74:	803d      	strh	r5, [r7, #0]
    ee76:	883b      	ldrh	r3, [r7, #0]
    ee78:	191a      	adds	r2, r3, r4
    ee7a:	3201      	adds	r2, #1
    ee7c:	4552      	cmp	r2, sl
    ee7e:	da10      	bge.n	eea2 <DmAdvSetAdValue+0x8a>
    ee80:	eb08 0003 	add.w	r0, r8, r3
    ee84:	1c62      	adds	r2, r4, #1
    ee86:	f808 2003 	strb.w	r2, [r8, r3]
    ee8a:	4649      	mov	r1, r9
    ee8c:	f880 b001 	strb.w	fp, [r0, #1]
    ee90:	4622      	mov	r2, r4
    ee92:	3002      	adds	r0, #2
    ee94:	f7fd f934 	bl	c100 <memcpy>
    ee98:	883b      	ldrh	r3, [r7, #0]
    ee9a:	3402      	adds	r4, #2
    ee9c:	441c      	add	r4, r3
    ee9e:	803c      	strh	r4, [r7, #0]
    eea0:	e7d2      	b.n	ee48 <DmAdvSetAdValue+0x30>
    eea2:	2000      	movs	r0, #0
    eea4:	e7d1      	b.n	ee4a <DmAdvSetAdValue+0x32>

0000eea6 <DmAdvSetName>:
    eea6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    eeaa:	4614      	mov	r4, r2
    eeac:	4606      	mov	r6, r0
    eeae:	460f      	mov	r7, r1
    eeb0:	461a      	mov	r2, r3
    eeb2:	8821      	ldrh	r1, [r4, #0]
    eeb4:	f8bd 5020 	ldrh.w	r5, [sp, #32]
    eeb8:	2009      	movs	r0, #9
    eeba:	4698      	mov	r8, r3
    eebc:	f000 ff0a 	bl	fcd4 <DmFindAdType>
    eec0:	b928      	cbnz	r0, eece <DmAdvSetName+0x28>
    eec2:	4642      	mov	r2, r8
    eec4:	8821      	ldrh	r1, [r4, #0]
    eec6:	2008      	movs	r0, #8
    eec8:	f000 ff04 	bl	fcd4 <DmFindAdType>
    eecc:	b188      	cbz	r0, eef2 <DmAdvSetName+0x4c>
    eece:	f890 9000 	ldrb.w	r9, [r0]
    eed2:	8822      	ldrh	r2, [r4, #0]
    eed4:	f109 0901 	add.w	r9, r9, #1
    eed8:	eb00 0109 	add.w	r1, r0, r9
    eedc:	eba1 0308 	sub.w	r3, r1, r8
    eee0:	b2db      	uxtb	r3, r3
    eee2:	1ad2      	subs	r2, r2, r3
    eee4:	f011 fa1e 	bl	20324 <memmove>
    eee8:	8823      	ldrh	r3, [r4, #0]
    eeea:	eba3 0909 	sub.w	r9, r3, r9
    eeee:	f8a4 9000 	strh.w	r9, [r4]
    eef2:	8822      	ldrh	r2, [r4, #0]
    eef4:	1e6b      	subs	r3, r5, #1
    eef6:	4293      	cmp	r3, r2
    eef8:	dd1c      	ble.n	ef34 <DmAdvSetName+0x8e>
    eefa:	18b3      	adds	r3, r6, r2
    eefc:	3301      	adds	r3, #1
    eefe:	429d      	cmp	r5, r3
    ef00:	bfde      	ittt	le
    ef02:	3d02      	suble	r5, #2
    ef04:	1aad      	suble	r5, r5, r2
    ef06:	b2ee      	uxtble	r6, r5
    ef08:	eb08 0002 	add.w	r0, r8, r2
    ef0c:	bfd4      	ite	le
    ef0e:	2308      	movle	r3, #8
    ef10:	2309      	movgt	r3, #9
    ef12:	1c71      	adds	r1, r6, #1
    ef14:	f808 1002 	strb.w	r1, [r8, r2]
    ef18:	3002      	adds	r0, #2
    ef1a:	f800 3c01 	strb.w	r3, [r0, #-1]
    ef1e:	4632      	mov	r2, r6
    ef20:	4639      	mov	r1, r7
    ef22:	f7fd f8ed 	bl	c100 <memcpy>
    ef26:	8825      	ldrh	r5, [r4, #0]
    ef28:	3502      	adds	r5, #2
    ef2a:	4435      	add	r5, r6
    ef2c:	8025      	strh	r5, [r4, #0]
    ef2e:	2001      	movs	r0, #1
    ef30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ef34:	2000      	movs	r0, #0
    ef36:	e7fb      	b.n	ef30 <DmAdvSetName+0x8a>

0000ef38 <dmAdvActRemoveSet>:
    ef38:	4770      	bx	lr

0000ef3a <dmAdvMsgHandler>:
    ef3a:	7883      	ldrb	r3, [r0, #2]
    ef3c:	4a02      	ldr	r2, [pc, #8]	; (ef48 <dmAdvMsgHandler+0xe>)
    ef3e:	f003 030f 	and.w	r3, r3, #15
    ef42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef46:	4718      	bx	r3
    ef48:	000246c4 	.word	0x000246c4

0000ef4c <dmAdvConfig>:
    ef4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    ef50:	4e0e      	ldr	r6, [pc, #56]	; (ef8c <dmAdvConfig+0x40>)
    ef52:	4c0f      	ldr	r4, [pc, #60]	; (ef90 <dmAdvConfig+0x44>)
    ef54:	4605      	mov	r5, r0
    ef56:	7bb0      	ldrb	r0, [r6, #14]
    ef58:	8a27      	ldrh	r7, [r4, #16]
    ef5a:	f8b4 8012 	ldrh.w	r8, [r4, #18]
    ef5e:	4689      	mov	r9, r1
    ef60:	4692      	mov	sl, r2
    ef62:	f000 fef1 	bl	fd48 <DmLlAddrType>
    ef66:	7c73      	ldrb	r3, [r6, #17]
    ef68:	9303      	str	r3, [sp, #12]
    ef6a:	7d63      	ldrb	r3, [r4, #21]
    ef6c:	f8cd 9000 	str.w	r9, [sp]
    ef70:	e9cd a301 	strd	sl, r3, [sp, #4]
    ef74:	462a      	mov	r2, r5
    ef76:	4603      	mov	r3, r0
    ef78:	4641      	mov	r1, r8
    ef7a:	4638      	mov	r0, r7
    ef7c:	f006 fe50 	bl	15c20 <HciLeSetAdvParamCmd>
    ef80:	4b04      	ldr	r3, [pc, #16]	; (ef94 <dmAdvConfig+0x48>)
    ef82:	701d      	strb	r5, [r3, #0]
    ef84:	b004      	add	sp, #16
    ef86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ef8a:	bf00      	nop
    ef8c:	10003c84 	.word	0x10003c84
    ef90:	10003ad4 	.word	0x10003ad4
    ef94:	10003af0 	.word	0x10003af0

0000ef98 <dmAdvReset>:
    ef98:	b507      	push	{r0, r1, r2, lr}
    ef9a:	4b0d      	ldr	r3, [pc, #52]	; (efd0 <dmAdvReset+0x38>)
    ef9c:	7dda      	ldrb	r2, [r3, #23]
    ef9e:	2a05      	cmp	r2, #5
    efa0:	d006      	beq.n	efb0 <dmAdvReset+0x18>
    efa2:	2a01      	cmp	r2, #1
    efa4:	d10e      	bne.n	efc4 <dmAdvReset+0x2c>
    efa6:	7d1b      	ldrb	r3, [r3, #20]
    efa8:	2b01      	cmp	r3, #1
    efaa:	d00b      	beq.n	efc4 <dmAdvReset+0x2c>
    efac:	2b04      	cmp	r3, #4
    efae:	d009      	beq.n	efc4 <dmAdvReset+0x2c>
    efb0:	4807      	ldr	r0, [pc, #28]	; (efd0 <dmAdvReset+0x38>)
    efb2:	f00a fa99 	bl	194e8 <WsfTimerStop>
    efb6:	2322      	movs	r3, #34	; 0x22
    efb8:	f8ad 3006 	strh.w	r3, [sp, #6]
    efbc:	4b05      	ldr	r3, [pc, #20]	; (efd4 <dmAdvReset+0x3c>)
    efbe:	a801      	add	r0, sp, #4
    efc0:	689b      	ldr	r3, [r3, #8]
    efc2:	4798      	blx	r3
    efc4:	f7ff fe48 	bl	ec58 <dmAdvInit>
    efc8:	b003      	add	sp, #12
    efca:	f85d fb04 	ldr.w	pc, [sp], #4
    efce:	bf00      	nop
    efd0:	10003ad4 	.word	0x10003ad4
    efd4:	10003c84 	.word	0x10003c84

0000efd8 <dmAdvActConfig>:
    efd8:	4b06      	ldr	r3, [pc, #24]	; (eff4 <dmAdvActConfig+0x1c>)
    efda:	7dda      	ldrb	r2, [r3, #23]
    efdc:	b942      	cbnz	r2, eff0 <dmAdvActConfig+0x18>
    efde:	7d1b      	ldrb	r3, [r3, #20]
    efe0:	2b01      	cmp	r3, #1
    efe2:	d005      	beq.n	eff0 <dmAdvActConfig+0x18>
    efe4:	2b04      	cmp	r3, #4
    efe6:	d003      	beq.n	eff0 <dmAdvActConfig+0x18>
    efe8:	1dc2      	adds	r2, r0, #7
    efea:	7981      	ldrb	r1, [r0, #6]
    efec:	7940      	ldrb	r0, [r0, #5]
    efee:	e7ad      	b.n	ef4c <dmAdvConfig>
    eff0:	4770      	bx	lr
    eff2:	bf00      	nop
    eff4:	10003ad4 	.word	0x10003ad4

0000eff8 <dmAdvActSetData>:
    eff8:	4a06      	ldr	r2, [pc, #24]	; (f014 <dmAdvActSetData+0x1c>)
    effa:	7dd2      	ldrb	r2, [r2, #23]
    effc:	4603      	mov	r3, r0
    effe:	b93a      	cbnz	r2, f010 <dmAdvActSetData+0x18>
    f000:	6899      	ldr	r1, [r3, #8]
    f002:	799b      	ldrb	r3, [r3, #6]
    f004:	79c0      	ldrb	r0, [r0, #7]
    f006:	b90b      	cbnz	r3, f00c <dmAdvActSetData+0x14>
    f008:	f006 bdda 	b.w	15bc0 <HciLeSetAdvDataCmd>
    f00c:	f006 beaa 	b.w	15d64 <HciLeSetScanRespDataCmd>
    f010:	4770      	bx	lr
    f012:	bf00      	nop
    f014:	10003ad4 	.word	0x10003ad4

0000f018 <dmAdvActStart>:
    f018:	4b07      	ldr	r3, [pc, #28]	; (f038 <dmAdvActStart+0x20>)
    f01a:	7dda      	ldrb	r2, [r3, #23]
    f01c:	b95a      	cbnz	r2, f036 <dmAdvActStart+0x1e>
    f01e:	7d1a      	ldrb	r2, [r3, #20]
    f020:	2a01      	cmp	r2, #1
    f022:	d008      	beq.n	f036 <dmAdvActStart+0x1e>
    f024:	2a04      	cmp	r2, #4
    f026:	d006      	beq.n	f036 <dmAdvActStart+0x1e>
    f028:	2203      	movs	r2, #3
    f02a:	75da      	strb	r2, [r3, #23]
    f02c:	88c2      	ldrh	r2, [r0, #6]
    f02e:	831a      	strh	r2, [r3, #24]
    f030:	2001      	movs	r0, #1
    f032:	f006 bda9 	b.w	15b88 <HciLeSetAdvEnableCmd>
    f036:	4770      	bx	lr
    f038:	10003ad4 	.word	0x10003ad4

0000f03c <dmAdvActStop>:
    f03c:	4b07      	ldr	r3, [pc, #28]	; (f05c <dmAdvActStop+0x20>)
    f03e:	7dda      	ldrb	r2, [r3, #23]
    f040:	2a01      	cmp	r2, #1
    f042:	d109      	bne.n	f058 <dmAdvActStop+0x1c>
    f044:	7d1a      	ldrb	r2, [r3, #20]
    f046:	2a01      	cmp	r2, #1
    f048:	d006      	beq.n	f058 <dmAdvActStop+0x1c>
    f04a:	2a04      	cmp	r2, #4
    f04c:	d004      	beq.n	f058 <dmAdvActStop+0x1c>
    f04e:	2205      	movs	r2, #5
    f050:	2000      	movs	r0, #0
    f052:	75da      	strb	r2, [r3, #23]
    f054:	f006 bd98 	b.w	15b88 <HciLeSetAdvEnableCmd>
    f058:	4770      	bx	lr
    f05a:	bf00      	nop
    f05c:	10003ad4 	.word	0x10003ad4

0000f060 <dmAdvActTimeout>:
    f060:	f7ff bfec 	b.w	f03c <dmAdvActStop>

0000f064 <dmAdvHciHandler>:
    f064:	7883      	ldrb	r3, [r0, #2]
    f066:	2b35      	cmp	r3, #53	; 0x35
    f068:	b570      	push	{r4, r5, r6, lr}
    f06a:	4605      	mov	r5, r0
    f06c:	d144      	bne.n	f0f8 <dmAdvHciHandler+0x94>
    f06e:	4c23      	ldr	r4, [pc, #140]	; (f0fc <dmAdvHciHandler+0x98>)
    f070:	7de3      	ldrb	r3, [r4, #23]
    f072:	2b03      	cmp	r3, #3
    f074:	d01d      	beq.n	f0b2 <dmAdvHciHandler+0x4e>
    f076:	2b05      	cmp	r3, #5
    f078:	d138      	bne.n	f0ec <dmAdvHciHandler+0x88>
    f07a:	2622      	movs	r6, #34	; 0x22
    f07c:	78ea      	ldrb	r2, [r5, #3]
    f07e:	2a00      	cmp	r2, #0
    f080:	d12e      	bne.n	f0e0 <dmAdvHciHandler+0x7c>
    f082:	2b05      	cmp	r3, #5
    f084:	d109      	bne.n	f09a <dmAdvHciHandler+0x36>
    f086:	481d      	ldr	r0, [pc, #116]	; (f0fc <dmAdvHciHandler+0x98>)
    f088:	f00a fa2e 	bl	194e8 <WsfTimerStop>
    f08c:	2315      	movs	r3, #21
    f08e:	70ab      	strb	r3, [r5, #2]
    f090:	4b1b      	ldr	r3, [pc, #108]	; (f100 <dmAdvHciHandler+0x9c>)
    f092:	685b      	ldr	r3, [r3, #4]
    f094:	4628      	mov	r0, r5
    f096:	689b      	ldr	r3, [r3, #8]
    f098:	4798      	blx	r3
    f09a:	23ff      	movs	r3, #255	; 0xff
    f09c:	7523      	strb	r3, [r4, #20]
    f09e:	2300      	movs	r3, #0
    f0a0:	75e3      	strb	r3, [r4, #23]
    f0a2:	b34e      	cbz	r6, f0f8 <dmAdvHciHandler+0x94>
    f0a4:	4b17      	ldr	r3, [pc, #92]	; (f104 <dmAdvHciHandler+0xa0>)
    f0a6:	70ae      	strb	r6, [r5, #2]
    f0a8:	4628      	mov	r0, r5
    f0aa:	689b      	ldr	r3, [r3, #8]
    f0ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f0b0:	4718      	bx	r3
    f0b2:	2621      	movs	r6, #33	; 0x21
    f0b4:	78ea      	ldrb	r2, [r5, #3]
    f0b6:	2a00      	cmp	r2, #0
    f0b8:	d1f1      	bne.n	f09e <dmAdvHciHandler+0x3a>
    f0ba:	2b03      	cmp	r3, #3
    f0bc:	d10d      	bne.n	f0da <dmAdvHciHandler+0x76>
    f0be:	8b21      	ldrh	r1, [r4, #24]
    f0c0:	b121      	cbz	r1, f0cc <dmAdvHciHandler+0x68>
    f0c2:	2306      	movs	r3, #6
    f0c4:	480d      	ldr	r0, [pc, #52]	; (f0fc <dmAdvHciHandler+0x98>)
    f0c6:	7323      	strb	r3, [r4, #12]
    f0c8:	f00a f9fa 	bl	194c0 <WsfTimerStartMs>
    f0cc:	2314      	movs	r3, #20
    f0ce:	70ab      	strb	r3, [r5, #2]
    f0d0:	4b0b      	ldr	r3, [pc, #44]	; (f100 <dmAdvHciHandler+0x9c>)
    f0d2:	685b      	ldr	r3, [r3, #4]
    f0d4:	4628      	mov	r0, r5
    f0d6:	689b      	ldr	r3, [r3, #8]
    f0d8:	4798      	blx	r3
    f0da:	4b0b      	ldr	r3, [pc, #44]	; (f108 <dmAdvHciHandler+0xa4>)
    f0dc:	781b      	ldrb	r3, [r3, #0]
    f0de:	7523      	strb	r3, [r4, #20]
    f0e0:	2301      	movs	r3, #1
    f0e2:	e7dd      	b.n	f0a0 <dmAdvHciHandler+0x3c>
    f0e4:	2600      	movs	r6, #0
    f0e6:	e7e5      	b.n	f0b4 <dmAdvHciHandler+0x50>
    f0e8:	2600      	movs	r6, #0
    f0ea:	e7c7      	b.n	f07c <dmAdvHciHandler+0x18>
    f0ec:	2b02      	cmp	r3, #2
    f0ee:	d303      	bcc.n	f0f8 <dmAdvHciHandler+0x94>
    f0f0:	2b03      	cmp	r3, #3
    f0f2:	d9f7      	bls.n	f0e4 <dmAdvHciHandler+0x80>
    f0f4:	2b04      	cmp	r3, #4
    f0f6:	d0f7      	beq.n	f0e8 <dmAdvHciHandler+0x84>
    f0f8:	bd70      	pop	{r4, r5, r6, pc}
    f0fa:	bf00      	nop
    f0fc:	10003ad4 	.word	0x10003ad4
    f100:	10002b54 	.word	0x10002b54
    f104:	10003c84 	.word	0x10003c84
    f108:	10003af0 	.word	0x10003af0

0000f10c <dmAdvActClearSets>:
    f10c:	4770      	bx	lr

0000f10e <dmAdvStartDirected>:
    f10e:	b510      	push	{r4, lr}
    f110:	4c08      	ldr	r4, [pc, #32]	; (f134 <dmAdvStartDirected+0x26>)
    f112:	9a03      	ldr	r2, [sp, #12]
    f114:	7de3      	ldrb	r3, [r4, #23]
    f116:	4608      	mov	r0, r1
    f118:	f89d 1008 	ldrb.w	r1, [sp, #8]
    f11c:	b943      	cbnz	r3, f130 <dmAdvStartDirected+0x22>
    f11e:	f7ff ff15 	bl	ef4c <dmAdvConfig>
    f122:	2302      	movs	r3, #2
    f124:	75e3      	strb	r3, [r4, #23]
    f126:	2001      	movs	r0, #1
    f128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f12c:	f006 bd2c 	b.w	15b88 <HciLeSetAdvEnableCmd>
    f130:	bd10      	pop	{r4, pc}
    f132:	bf00      	nop
    f134:	10003ad4 	.word	0x10003ad4

0000f138 <dmAdvStopDirected>:
    f138:	4b04      	ldr	r3, [pc, #16]	; (f14c <dmAdvStopDirected+0x14>)
    f13a:	7dda      	ldrb	r2, [r3, #23]
    f13c:	2a01      	cmp	r2, #1
    f13e:	d104      	bne.n	f14a <dmAdvStopDirected+0x12>
    f140:	2204      	movs	r2, #4
    f142:	2000      	movs	r0, #0
    f144:	75da      	strb	r2, [r3, #23]
    f146:	f006 bd1f 	b.w	15b88 <HciLeSetAdvEnableCmd>
    f14a:	4770      	bx	lr
    f14c:	10003ad4 	.word	0x10003ad4

0000f150 <dmAdvConnected>:
    f150:	b510      	push	{r4, lr}
    f152:	4c04      	ldr	r4, [pc, #16]	; (f164 <dmAdvConnected+0x14>)
    f154:	4620      	mov	r0, r4
    f156:	f00a f9c7 	bl	194e8 <WsfTimerStop>
    f15a:	23ff      	movs	r3, #255	; 0xff
    f15c:	7523      	strb	r3, [r4, #20]
    f15e:	2300      	movs	r3, #0
    f160:	75e3      	strb	r3, [r4, #23]
    f162:	bd10      	pop	{r4, pc}
    f164:	10003ad4 	.word	0x10003ad4

0000f168 <dmAdvConnectFailed>:
    f168:	f7ff bff2 	b.w	f150 <dmAdvConnected>

0000f16c <DmAdvInit>:
    f16c:	b508      	push	{r3, lr}
    f16e:	f005 fb89 	bl	14884 <WsfTaskLock>
    f172:	4b04      	ldr	r3, [pc, #16]	; (f184 <DmAdvInit+0x18>)
    f174:	4a04      	ldr	r2, [pc, #16]	; (f188 <DmAdvInit+0x1c>)
    f176:	601a      	str	r2, [r3, #0]
    f178:	f7ff fd6e 	bl	ec58 <dmAdvInit>
    f17c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f180:	f005 bb86 	b.w	14890 <WsfTaskUnlock>
    f184:	10002b54 	.word	0x10002b54
    f188:	000246e0 	.word	0x000246e0

0000f18c <DmAdvModeLeg>:
    f18c:	4b03      	ldr	r3, [pc, #12]	; (f19c <DmAdvModeLeg+0x10>)
    f18e:	6818      	ldr	r0, [r3, #0]
    f190:	4b03      	ldr	r3, [pc, #12]	; (f1a0 <DmAdvModeLeg+0x14>)
    f192:	1ac3      	subs	r3, r0, r3
    f194:	4258      	negs	r0, r3
    f196:	4158      	adcs	r0, r3
    f198:	4770      	bx	lr
    f19a:	bf00      	nop
    f19c:	10002b54 	.word	0x10002b54
    f1a0:	000246e0 	.word	0x000246e0

0000f1a4 <dmConnSmActNone>:
    f1a4:	4770      	bx	lr

0000f1a6 <dmConnSmActHciUpdated>:
    f1a6:	2329      	movs	r3, #41	; 0x29
    f1a8:	708b      	strb	r3, [r1, #2]
    f1aa:	4b02      	ldr	r3, [pc, #8]	; (f1b4 <dmConnSmActHciUpdated+0xe>)
    f1ac:	4608      	mov	r0, r1
    f1ae:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
    f1b2:	4718      	bx	r3
    f1b4:	10003af4 	.word	0x10003af4

0000f1b8 <dmConnSmActClose>:
    f1b8:	7909      	ldrb	r1, [r1, #4]
    f1ba:	8980      	ldrh	r0, [r0, #12]
    f1bc:	f006 b96a 	b.w	15494 <HciDisconnectCmd>

0000f1c0 <dmConnReset>:
    f1c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    f1c2:	2339      	movs	r3, #57	; 0x39
    f1c4:	4d14      	ldr	r5, [pc, #80]	; (f218 <dmConnReset+0x58>)
    f1c6:	f8ad 3006 	strh.w	r3, [sp, #6]
    f1ca:	2400      	movs	r4, #0
    f1cc:	2316      	movs	r3, #22
    f1ce:	f88d 4008 	strb.w	r4, [sp, #8]
    f1d2:	f88d 300c 	strb.w	r3, [sp, #12]
    f1d6:	462e      	mov	r6, r5
    f1d8:	1928      	adds	r0, r5, r4
    f1da:	7d83      	ldrb	r3, [r0, #22]
    f1dc:	b13b      	cbz	r3, f1ee <dmConnReset+0x2e>
    f1de:	7c03      	ldrb	r3, [r0, #16]
    f1e0:	f8ad 300a 	strh.w	r3, [sp, #10]
    f1e4:	a901      	add	r1, sp, #4
    f1e6:	f8ad 3004 	strh.w	r3, [sp, #4]
    f1ea:	f000 fca1 	bl	fb30 <dmConnSmExecute>
    f1ee:	342c      	adds	r4, #44	; 0x2c
    f1f0:	f5b4 7fb0 	cmp.w	r4, #352	; 0x160
    f1f4:	d1f0      	bne.n	f1d8 <dmConnReset+0x18>
    f1f6:	4a09      	ldr	r2, [pc, #36]	; (f21c <dmConnReset+0x5c>)
    f1f8:	f04f 1330 	mov.w	r3, #3145776	; 0x300030
    f1fc:	f8c6 3180 	str.w	r3, [r6, #384]	; 0x180
    f200:	6810      	ldr	r0, [r2, #0]
    f202:	6851      	ldr	r1, [r2, #4]
    f204:	4b06      	ldr	r3, [pc, #24]	; (f220 <dmConnReset+0x60>)
    f206:	c303      	stmia	r3!, {r0, r1}
    f208:	6890      	ldr	r0, [r2, #8]
    f20a:	6018      	str	r0, [r3, #0]
    f20c:	4b05      	ldr	r3, [pc, #20]	; (f224 <dmConnReset+0x64>)
    f20e:	2200      	movs	r2, #0
    f210:	74da      	strb	r2, [r3, #19]
    f212:	735a      	strb	r2, [r3, #13]
    f214:	b004      	add	sp, #16
    f216:	bd70      	pop	{r4, r5, r6, pc}
    f218:	10003af4 	.word	0x10003af4
    f21c:	000246ec 	.word	0x000246ec
    f220:	10003c68 	.word	0x10003c68
    f224:	10003c84 	.word	0x10003c84

0000f228 <dmConnSetConnSpec>:
    f228:	b538      	push	{r3, r4, r5, lr}
    f22a:	4605      	mov	r5, r0
    f22c:	460c      	mov	r4, r1
    f22e:	f005 fb29 	bl	14884 <WsfTaskLock>
    f232:	4628      	mov	r0, r5
    f234:	f000 fdc4 	bl	fdc0 <DmInitPhyToIdx>
    f238:	4a07      	ldr	r2, [pc, #28]	; (f258 <dmConnSetConnSpec+0x30>)
    f23a:	6861      	ldr	r1, [r4, #4]
    f23c:	230c      	movs	r3, #12
    f23e:	fb03 2300 	mla	r3, r3, r0, r2
    f242:	6820      	ldr	r0, [r4, #0]
    f244:	f503 73ba 	add.w	r3, r3, #372	; 0x174
    f248:	c303      	stmia	r3!, {r0, r1}
    f24a:	68a0      	ldr	r0, [r4, #8]
    f24c:	6018      	str	r0, [r3, #0]
    f24e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f252:	f005 bb1d 	b.w	14890 <WsfTaskUnlock>
    f256:	bf00      	nop
    f258:	10003af4 	.word	0x10003af4

0000f25c <dmConnCcbAlloc>:
    f25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f25e:	4c0f      	ldr	r4, [pc, #60]	; (f29c <dmConnCcbAlloc+0x40>)
    f260:	4607      	mov	r7, r0
    f262:	2500      	movs	r5, #0
    f264:	7da6      	ldrb	r6, [r4, #22]
    f266:	3501      	adds	r5, #1
    f268:	b2ed      	uxtb	r5, r5
    f26a:	b98e      	cbnz	r6, f290 <dmConnCcbAlloc+0x34>
    f26c:	222c      	movs	r2, #44	; 0x2c
    f26e:	4631      	mov	r1, r6
    f270:	4620      	mov	r0, r4
    f272:	f011 f8bb 	bl	203ec <memset>
    f276:	4639      	mov	r1, r7
    f278:	4620      	mov	r0, r4
    f27a:	f003 fde7 	bl	12e4c <BdaCpy>
    f27e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f282:	81a3      	strh	r3, [r4, #12]
    f284:	2301      	movs	r3, #1
    f286:	7425      	strb	r5, [r4, #16]
    f288:	7466      	strb	r6, [r4, #17]
    f28a:	75a3      	strb	r3, [r4, #22]
    f28c:	4620      	mov	r0, r4
    f28e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f290:	2d08      	cmp	r5, #8
    f292:	f104 042c 	add.w	r4, r4, #44	; 0x2c
    f296:	d1e5      	bne.n	f264 <dmConnCcbAlloc+0x8>
    f298:	2400      	movs	r4, #0
    f29a:	e7f7      	b.n	f28c <dmConnCcbAlloc+0x30>
    f29c:	10003af4 	.word	0x10003af4

0000f2a0 <dmConnCcbDealloc>:
    f2a0:	2300      	movs	r3, #0
    f2a2:	7583      	strb	r3, [r0, #22]
    f2a4:	4770      	bx	lr

0000f2a6 <dmConnCcbByHandle>:
    f2a6:	b510      	push	{r4, lr}
    f2a8:	4907      	ldr	r1, [pc, #28]	; (f2c8 <dmConnCcbByHandle+0x22>)
    f2aa:	2200      	movs	r2, #0
    f2ac:	188b      	adds	r3, r1, r2
    f2ae:	7d9c      	ldrb	r4, [r3, #22]
    f2b0:	b114      	cbz	r4, f2b8 <dmConnCcbByHandle+0x12>
    f2b2:	899c      	ldrh	r4, [r3, #12]
    f2b4:	4284      	cmp	r4, r0
    f2b6:	d004      	beq.n	f2c2 <dmConnCcbByHandle+0x1c>
    f2b8:	322c      	adds	r2, #44	; 0x2c
    f2ba:	f5b2 7fb0 	cmp.w	r2, #352	; 0x160
    f2be:	d1f5      	bne.n	f2ac <dmConnCcbByHandle+0x6>
    f2c0:	2300      	movs	r3, #0
    f2c2:	4618      	mov	r0, r3
    f2c4:	bd10      	pop	{r4, pc}
    f2c6:	bf00      	nop
    f2c8:	10003af4 	.word	0x10003af4

0000f2cc <dmConn2HciHandler>:
    f2cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    f2ce:	4604      	mov	r4, r0
    f2d0:	8800      	ldrh	r0, [r0, #0]
    f2d2:	f7ff ffe8 	bl	f2a6 <dmConnCcbByHandle>
    f2d6:	b138      	cbz	r0, f2e8 <dmConn2HciHandler+0x1c>
    f2d8:	78a3      	ldrb	r3, [r4, #2]
    f2da:	2b23      	cmp	r3, #35	; 0x23
    f2dc:	d02a      	beq.n	f334 <dmConn2HciHandler+0x68>
    f2de:	d805      	bhi.n	f2ec <dmConn2HciHandler+0x20>
    f2e0:	2b07      	cmp	r3, #7
    f2e2:	d00f      	beq.n	f304 <dmConn2HciHandler+0x38>
    f2e4:	2b0b      	cmp	r3, #11
    f2e6:	d052      	beq.n	f38e <dmConn2HciHandler+0xc2>
    f2e8:	b004      	add	sp, #16
    f2ea:	bd10      	pop	{r4, pc}
    f2ec:	2b27      	cmp	r3, #39	; 0x27
    f2ee:	d037      	beq.n	f360 <dmConn2HciHandler+0x94>
    f2f0:	2b28      	cmp	r3, #40	; 0x28
    f2f2:	d042      	beq.n	f37a <dmConn2HciHandler+0xae>
    f2f4:	2b24      	cmp	r3, #36	; 0x24
    f2f6:	d1f7      	bne.n	f2e8 <dmConn2HciHandler+0x1c>
    f2f8:	7c02      	ldrb	r2, [r0, #16]
    f2fa:	8983      	ldrh	r3, [r0, #12]
    f2fc:	f8ad 2000 	strh.w	r2, [sp]
    f300:	2240      	movs	r2, #64	; 0x40
    f302:	e01c      	b.n	f33e <dmConn2HciHandler+0x72>
    f304:	8981      	ldrh	r1, [r0, #12]
    f306:	7923      	ldrb	r3, [r4, #4]
    f308:	7c00      	ldrb	r0, [r0, #16]
    f30a:	f994 2008 	ldrsb.w	r2, [r4, #8]
    f30e:	f8ad 0000 	strh.w	r0, [sp]
    f312:	2438      	movs	r4, #56	; 0x38
    f314:	f88d 4002 	strb.w	r4, [sp, #2]
    f318:	f88d 3003 	strb.w	r3, [sp, #3]
    f31c:	f88d 3004 	strb.w	r3, [sp, #4]
    f320:	f8ad 1006 	strh.w	r1, [sp, #6]
    f324:	f88d 2008 	strb.w	r2, [sp, #8]
    f328:	4b26      	ldr	r3, [pc, #152]	; (f3c4 <dmConn2HciHandler+0xf8>)
    f32a:	4668      	mov	r0, sp
    f32c:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
    f330:	4798      	blx	r3
    f332:	e7d9      	b.n	f2e8 <dmConn2HciHandler+0x1c>
    f334:	7c02      	ldrb	r2, [r0, #16]
    f336:	8983      	ldrh	r3, [r0, #12]
    f338:	f8ad 2000 	strh.w	r2, [sp]
    f33c:	223f      	movs	r2, #63	; 0x3f
    f33e:	f8ad 2002 	strh.w	r2, [sp, #2]
    f342:	f8ad 3004 	strh.w	r3, [sp, #4]
    f346:	88e3      	ldrh	r3, [r4, #6]
    f348:	f8ad 3006 	strh.w	r3, [sp, #6]
    f34c:	8923      	ldrh	r3, [r4, #8]
    f34e:	f8ad 3008 	strh.w	r3, [sp, #8]
    f352:	8963      	ldrh	r3, [r4, #10]
    f354:	f8ad 300a 	strh.w	r3, [sp, #10]
    f358:	89a3      	ldrh	r3, [r4, #12]
    f35a:	f8ad 300c 	strh.w	r3, [sp, #12]
    f35e:	e7e3      	b.n	f328 <dmConn2HciHandler+0x5c>
    f360:	7c01      	ldrb	r1, [r0, #16]
    f362:	7923      	ldrb	r3, [r4, #4]
    f364:	88e2      	ldrh	r2, [r4, #6]
    f366:	f8ad 1000 	strh.w	r1, [sp]
    f36a:	2141      	movs	r1, #65	; 0x41
    f36c:	f8ad 1002 	strh.w	r1, [sp, #2]
    f370:	f8ad 2006 	strh.w	r2, [sp, #6]
    f374:	f88d 3004 	strb.w	r3, [sp, #4]
    f378:	e7d6      	b.n	f328 <dmConn2HciHandler+0x5c>
    f37a:	7c02      	ldrb	r2, [r0, #16]
    f37c:	88a3      	ldrh	r3, [r4, #4]
    f37e:	f8ad 2000 	strh.w	r2, [sp]
    f382:	2242      	movs	r2, #66	; 0x42
    f384:	f8ad 2002 	strh.w	r2, [sp, #2]
    f388:	f8ad 3004 	strh.w	r3, [sp, #4]
    f38c:	e7cc      	b.n	f328 <dmConn2HciHandler+0x5c>
    f38e:	7a62      	ldrb	r2, [r4, #9]
    f390:	7a23      	ldrb	r3, [r4, #8]
    f392:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    f396:	7aa2      	ldrb	r2, [r4, #10]
    f398:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    f39c:	6283      	str	r3, [r0, #40]	; 0x28
    f39e:	7c03      	ldrb	r3, [r0, #16]
    f3a0:	f8ad 3000 	strh.w	r3, [sp]
    f3a4:	2351      	movs	r3, #81	; 0x51
    f3a6:	f8ad 3002 	strh.w	r3, [sp, #2]
    f3aa:	7923      	ldrb	r3, [r4, #4]
    f3ac:	f88d 3004 	strb.w	r3, [sp, #4]
    f3b0:	88e3      	ldrh	r3, [r4, #6]
    f3b2:	f854 0f08 	ldr.w	r0, [r4, #8]!
    f3b6:	f8ad 3006 	strh.w	r3, [sp, #6]
    f3ba:	6861      	ldr	r1, [r4, #4]
    f3bc:	ab02      	add	r3, sp, #8
    f3be:	c303      	stmia	r3!, {r0, r1}
    f3c0:	e7b2      	b.n	f328 <dmConn2HciHandler+0x5c>
    f3c2:	bf00      	nop
    f3c4:	10003af4 	.word	0x10003af4

0000f3c8 <dmConnCcbByBdAddr>:
    f3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f3ca:	4f0a      	ldr	r7, [pc, #40]	; (f3f4 <dmConnCcbByBdAddr+0x2c>)
    f3cc:	4606      	mov	r6, r0
    f3ce:	2500      	movs	r5, #0
    f3d0:	197c      	adds	r4, r7, r5
    f3d2:	7da3      	ldrb	r3, [r4, #22]
    f3d4:	b933      	cbnz	r3, f3e4 <dmConnCcbByBdAddr+0x1c>
    f3d6:	352c      	adds	r5, #44	; 0x2c
    f3d8:	f5b5 7fb0 	cmp.w	r5, #352	; 0x160
    f3dc:	d1f8      	bne.n	f3d0 <dmConnCcbByBdAddr+0x8>
    f3de:	2400      	movs	r4, #0
    f3e0:	4620      	mov	r0, r4
    f3e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f3e4:	4631      	mov	r1, r6
    f3e6:	4620      	mov	r0, r4
    f3e8:	f003 fd3e 	bl	12e68 <BdaCmp>
    f3ec:	2800      	cmp	r0, #0
    f3ee:	d0f2      	beq.n	f3d6 <dmConnCcbByBdAddr+0xe>
    f3f0:	e7f6      	b.n	f3e0 <dmConnCcbByBdAddr+0x18>
    f3f2:	bf00      	nop
    f3f4:	10003af4 	.word	0x10003af4

0000f3f8 <dmConnHciHandler>:
    f3f8:	b538      	push	{r3, r4, r5, lr}
    f3fa:	7884      	ldrb	r4, [r0, #2]
    f3fc:	1e63      	subs	r3, r4, #1
    f3fe:	2b01      	cmp	r3, #1
    f400:	4605      	mov	r5, r0
    f402:	d82d      	bhi.n	f460 <dmConnHciHandler+0x68>
    f404:	f100 040a 	add.w	r4, r0, #10
    f408:	4620      	mov	r0, r4
    f40a:	f7ff ffdd 	bl	f3c8 <dmConnCcbByBdAddr>
    f40e:	b9c8      	cbnz	r0, f444 <dmConnHciHandler+0x4c>
    f410:	4817      	ldr	r0, [pc, #92]	; (f470 <dmConnHciHandler+0x78>)
    f412:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f416:	f500 72b0 	add.w	r2, r0, #352	; 0x160
    f41a:	7d83      	ldrb	r3, [r0, #22]
    f41c:	b13b      	cbz	r3, f42e <dmConnHciHandler+0x36>
    f41e:	7d43      	ldrb	r3, [r0, #21]
    f420:	2b02      	cmp	r3, #2
    f422:	d00f      	beq.n	f444 <dmConnHciHandler+0x4c>
    f424:	2b04      	cmp	r3, #4
    f426:	d102      	bne.n	f42e <dmConnHciHandler+0x36>
    f428:	8983      	ldrh	r3, [r0, #12]
    f42a:	428b      	cmp	r3, r1
    f42c:	d00a      	beq.n	f444 <dmConnHciHandler+0x4c>
    f42e:	302c      	adds	r0, #44	; 0x2c
    f430:	4290      	cmp	r0, r2
    f432:	d1f2      	bne.n	f41a <dmConnHciHandler+0x22>
    f434:	7a2b      	ldrb	r3, [r5, #8]
    f436:	2b01      	cmp	r3, #1
    f438:	d001      	beq.n	f43e <dmConnHciHandler+0x46>
    f43a:	2000      	movs	r0, #0
    f43c:	e002      	b.n	f444 <dmConnHciHandler+0x4c>
    f43e:	4620      	mov	r0, r4
    f440:	f7ff ff0c 	bl	f25c <dmConnCcbAlloc>
    f444:	78eb      	ldrb	r3, [r5, #3]
    f446:	b94b      	cbnz	r3, f45c <dmConnHciHandler+0x64>
    f448:	2338      	movs	r3, #56	; 0x38
    f44a:	70ab      	strb	r3, [r5, #2]
    f44c:	b170      	cbz	r0, f46c <dmConnHciHandler+0x74>
    f44e:	7c03      	ldrb	r3, [r0, #16]
    f450:	802b      	strh	r3, [r5, #0]
    f452:	4629      	mov	r1, r5
    f454:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f458:	f000 bb6a 	b.w	fb30 <dmConnSmExecute>
    f45c:	2337      	movs	r3, #55	; 0x37
    f45e:	e7f4      	b.n	f44a <dmConnHciHandler+0x52>
    f460:	8800      	ldrh	r0, [r0, #0]
    f462:	3436      	adds	r4, #54	; 0x36
    f464:	f7ff ff1f 	bl	f2a6 <dmConnCcbByHandle>
    f468:	70ac      	strb	r4, [r5, #2]
    f46a:	e7ef      	b.n	f44c <dmConnHciHandler+0x54>
    f46c:	bd38      	pop	{r3, r4, r5, pc}
    f46e:	bf00      	nop
    f470:	10003af4 	.word	0x10003af4

0000f474 <dmConnCcbById>:
    f474:	3801      	subs	r0, #1
    f476:	4a05      	ldr	r2, [pc, #20]	; (f48c <dmConnCcbById+0x18>)
    f478:	b2c3      	uxtb	r3, r0
    f47a:	212c      	movs	r1, #44	; 0x2c
    f47c:	fb01 2003 	mla	r0, r1, r3, r2
    f480:	7d80      	ldrb	r0, [r0, #22]
    f482:	b108      	cbz	r0, f488 <dmConnCcbById+0x14>
    f484:	fb03 2001 	mla	r0, r3, r1, r2
    f488:	4770      	bx	lr
    f48a:	bf00      	nop
    f48c:	10003af4 	.word	0x10003af4

0000f490 <dmConnMsgHandler>:
    f490:	b510      	push	{r4, lr}
    f492:	4604      	mov	r4, r0
    f494:	7800      	ldrb	r0, [r0, #0]
    f496:	f7ff ffed 	bl	f474 <dmConnCcbById>
    f49a:	b120      	cbz	r0, f4a6 <dmConnMsgHandler+0x16>
    f49c:	4621      	mov	r1, r4
    f49e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f4a2:	f000 bb45 	b.w	fb30 <dmConnSmExecute>
    f4a6:	bd10      	pop	{r4, pc}

0000f4a8 <dmConn2MsgHandler>:
    f4a8:	b530      	push	{r4, r5, lr}
    f4aa:	4604      	mov	r4, r0
    f4ac:	b085      	sub	sp, #20
    f4ae:	7800      	ldrb	r0, [r0, #0]
    f4b0:	f7ff ffe0 	bl	f474 <dmConnCcbById>
    f4b4:	b1d0      	cbz	r0, f4ec <dmConn2MsgHandler+0x44>
    f4b6:	78a3      	ldrb	r3, [r4, #2]
    f4b8:	3b41      	subs	r3, #65	; 0x41
    f4ba:	2b04      	cmp	r3, #4
    f4bc:	d816      	bhi.n	f4ec <dmConn2MsgHandler+0x44>
    f4be:	e8df f003 	tbb	[pc, r3]
    f4c2:	0903      	.short	0x0903
    f4c4:	1e17      	.short	0x1e17
    f4c6:	26          	.byte	0x26
    f4c7:	00          	.byte	0x00
    f4c8:	8980      	ldrh	r0, [r0, #12]
    f4ca:	b005      	add	sp, #20
    f4cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    f4d0:	f006 bce0 	b.w	15e94 <HciReadRssiCmd>
    f4d4:	89e5      	ldrh	r5, [r4, #14]
    f4d6:	8923      	ldrh	r3, [r4, #8]
    f4d8:	88e2      	ldrh	r2, [r4, #6]
    f4da:	88a1      	ldrh	r1, [r4, #4]
    f4dc:	8980      	ldrh	r0, [r0, #12]
    f4de:	9502      	str	r5, [sp, #8]
    f4e0:	89a5      	ldrh	r5, [r4, #12]
    f4e2:	9501      	str	r5, [sp, #4]
    f4e4:	8964      	ldrh	r4, [r4, #10]
    f4e6:	9400      	str	r4, [sp, #0]
    f4e8:	f006 f8be 	bl	15668 <HciLeRemoteConnParamReqReply>
    f4ec:	b005      	add	sp, #20
    f4ee:	bd30      	pop	{r4, r5, pc}
    f4f0:	7921      	ldrb	r1, [r4, #4]
    f4f2:	8980      	ldrh	r0, [r0, #12]
    f4f4:	b005      	add	sp, #20
    f4f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    f4fa:	f006 b939 	b.w	15770 <HciLeRemoteConnParamReqNegReply>
    f4fe:	88e2      	ldrh	r2, [r4, #6]
    f500:	88a1      	ldrh	r1, [r4, #4]
    f502:	8980      	ldrh	r0, [r0, #12]
    f504:	b005      	add	sp, #20
    f506:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    f50a:	f006 b95f 	b.w	157cc <HciLeSetDataLen>
    f50e:	88a1      	ldrh	r1, [r4, #4]
    f510:	8980      	ldrh	r0, [r0, #12]
    f512:	b005      	add	sp, #20
    f514:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    f518:	f006 bd4a 	b.w	15fb0 <HciWriteAuthPayloadTimeout>

0000f51c <dmConnExecCback>:
    f51c:	b570      	push	{r4, r5, r6, lr}
    f51e:	4e06      	ldr	r6, [pc, #24]	; (f538 <dmConnExecCback+0x1c>)
    f520:	4605      	mov	r5, r0
    f522:	2400      	movs	r4, #0
    f524:	1933      	adds	r3, r6, r4
    f526:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
    f52a:	b10b      	cbz	r3, f530 <dmConnExecCback+0x14>
    f52c:	4628      	mov	r0, r5
    f52e:	4798      	blx	r3
    f530:	3404      	adds	r4, #4
    f532:	2c14      	cmp	r4, #20
    f534:	d1f6      	bne.n	f524 <dmConnExecCback+0x8>
    f536:	bd70      	pop	{r4, r5, r6, pc}
    f538:	10003af4 	.word	0x10003af4

0000f53c <dmConnSmActConnOpened>:
    f53c:	b570      	push	{r4, r5, r6, lr}
    f53e:	460d      	mov	r5, r1
    f540:	4604      	mov	r4, r0
    f542:	310a      	adds	r1, #10
    f544:	f003 fc82 	bl	12e4c <BdaCpy>
    f548:	88eb      	ldrh	r3, [r5, #6]
    f54a:	81a3      	strh	r3, [r4, #12]
    f54c:	7a68      	ldrb	r0, [r5, #9]
    f54e:	f000 fc07 	bl	fd60 <DmHostAddrType>
    f552:	74e0      	strb	r0, [r4, #19]
    f554:	7a2a      	ldrb	r2, [r5, #8]
    f556:	7662      	strb	r2, [r4, #25]
    f558:	4b12      	ldr	r3, [pc, #72]	; (f5a4 <dmConnSmActConnOpened+0x68>)
    f55a:	b9fa      	cbnz	r2, f59c <dmConnSmActConnOpened+0x60>
    f55c:	7b5b      	ldrb	r3, [r3, #13]
    f55e:	7523      	strb	r3, [r4, #20]
    f560:	7d23      	ldrb	r3, [r4, #20]
    f562:	1da6      	adds	r6, r4, #6
    f564:	b9e3      	cbnz	r3, f5a0 <dmConnSmActConnOpened+0x64>
    f566:	f007 fb83 	bl	16c70 <HciGetBdAddr>
    f56a:	4601      	mov	r1, r0
    f56c:	4630      	mov	r0, r6
    f56e:	f003 fc6d 	bl	12e4c <BdaCpy>
    f572:	f105 0117 	add.w	r1, r5, #23
    f576:	f104 001a 	add.w	r0, r4, #26
    f57a:	f003 fc67 	bl	12e4c <BdaCpy>
    f57e:	f104 0020 	add.w	r0, r4, #32
    f582:	f105 011d 	add.w	r1, r5, #29
    f586:	f003 fc61 	bl	12e4c <BdaCpy>
    f58a:	2300      	movs	r3, #0
    f58c:	81e3      	strh	r3, [r4, #14]
    f58e:	2327      	movs	r3, #39	; 0x27
    f590:	70ab      	strb	r3, [r5, #2]
    f592:	4628      	mov	r0, r5
    f594:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f598:	f7ff bfc0 	b.w	f51c <dmConnExecCback>
    f59c:	7b9b      	ldrb	r3, [r3, #14]
    f59e:	e7de      	b.n	f55e <dmConnSmActConnOpened+0x22>
    f5a0:	4900      	ldr	r1, [pc, #0]	; (f5a4 <dmConnSmActConnOpened+0x68>)
    f5a2:	e7e3      	b.n	f56c <dmConnSmActConnOpened+0x30>
    f5a4:	10003c84 	.word	0x10003c84

0000f5a8 <dmConnSmActConnFailed>:
    f5a8:	2300      	movs	r3, #0
    f5aa:	7583      	strb	r3, [r0, #22]
    f5ac:	2328      	movs	r3, #40	; 0x28
    f5ae:	708b      	strb	r3, [r1, #2]
    f5b0:	4608      	mov	r0, r1
    f5b2:	f7ff bfb3 	b.w	f51c <dmConnExecCback>

0000f5b6 <dmConnSmActConnClosed>:
    f5b6:	2300      	movs	r3, #0
    f5b8:	7583      	strb	r3, [r0, #22]
    f5ba:	2328      	movs	r3, #40	; 0x28
    f5bc:	708b      	strb	r3, [r1, #2]
    f5be:	4608      	mov	r0, r1
    f5c0:	f7ff bfac 	b.w	f51c <dmConnExecCback>

0000f5c4 <dmConnOpenAccept>:
    f5c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f5c8:	4607      	mov	r7, r0
    f5ca:	468a      	mov	sl, r1
    f5cc:	4691      	mov	r9, r2
    f5ce:	4698      	mov	r8, r3
    f5d0:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    f5d4:	f005 f956 	bl	14884 <WsfTaskLock>
    f5d8:	980b      	ldr	r0, [sp, #44]	; 0x2c
    f5da:	f7ff fef5 	bl	f3c8 <dmConnCcbByBdAddr>
    f5de:	4605      	mov	r5, r0
    f5e0:	b918      	cbnz	r0, f5ea <dmConnOpenAccept+0x26>
    f5e2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    f5e4:	f7ff fe3a 	bl	f25c <dmConnCcbAlloc>
    f5e8:	4605      	mov	r5, r0
    f5ea:	f005 f951 	bl	14890 <WsfTaskUnlock>
    f5ee:	b39d      	cbz	r5, f658 <dmConnOpenAccept+0x94>
    f5f0:	2014      	movs	r0, #20
    f5f2:	f009 fda3 	bl	1913c <WsfMsgAlloc>
    f5f6:	4604      	mov	r4, r0
    f5f8:	b338      	cbz	r0, f64a <dmConnOpenAccept+0x86>
    f5fa:	7c2b      	ldrb	r3, [r5, #16]
    f5fc:	8003      	strh	r3, [r0, #0]
    f5fe:	2e00      	cmp	r6, #0
    f600:	bf0c      	ite	eq
    f602:	2330      	moveq	r3, #48	; 0x30
    f604:	2332      	movne	r3, #50	; 0x32
    f606:	7083      	strb	r3, [r0, #2]
    f608:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    f60c:	8103      	strh	r3, [r0, #8]
    f60e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    f612:	7283      	strb	r3, [r0, #10]
    f614:	f880 a004 	strb.w	sl, [r0, #4]
    f618:	f880 9005 	strb.w	r9, [r0, #5]
    f61c:	f880 8006 	strb.w	r8, [r0, #6]
    f620:	990b      	ldr	r1, [sp, #44]	; 0x2c
    f622:	300b      	adds	r0, #11
    f624:	f003 fc12 	bl	12e4c <BdaCpy>
    f628:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    f62c:	7463      	strb	r3, [r4, #17]
    f62e:	4b0b      	ldr	r3, [pc, #44]	; (f65c <dmConnOpenAccept+0x98>)
    f630:	74a7      	strb	r7, [r4, #18]
    f632:	7b18      	ldrb	r0, [r3, #12]
    f634:	4621      	mov	r1, r4
    f636:	f009 fda5 	bl	19184 <WsfMsgSend>
    f63a:	f005 f923 	bl	14884 <WsfTaskLock>
    f63e:	766e      	strb	r6, [r5, #25]
    f640:	f005 f926 	bl	14890 <WsfTaskUnlock>
    f644:	7c28      	ldrb	r0, [r5, #16]
    f646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f64a:	f005 f91b 	bl	14884 <WsfTaskLock>
    f64e:	75ac      	strb	r4, [r5, #22]
    f650:	f005 f91e 	bl	14890 <WsfTaskUnlock>
    f654:	4620      	mov	r0, r4
    f656:	e7f6      	b.n	f646 <dmConnOpenAccept+0x82>
    f658:	4628      	mov	r0, r5
    f65a:	e7f4      	b.n	f646 <dmConnOpenAccept+0x82>
    f65c:	10003c84 	.word	0x10003c84

0000f660 <DmConnInit>:
    f660:	4b05      	ldr	r3, [pc, #20]	; (f678 <DmConnInit+0x18>)
    f662:	4a06      	ldr	r2, [pc, #24]	; (f67c <DmConnInit+0x1c>)
    f664:	f103 010c 	add.w	r1, r3, #12
    f668:	60d1      	str	r1, [r2, #12]
    f66a:	f103 0118 	add.w	r1, r3, #24
    f66e:	6111      	str	r1, [r2, #16]
    f670:	4a03      	ldr	r2, [pc, #12]	; (f680 <DmConnInit+0x20>)
    f672:	3324      	adds	r3, #36	; 0x24
    f674:	6013      	str	r3, [r2, #0]
    f676:	4770      	bx	lr
    f678:	000246ec 	.word	0x000246ec
    f67c:	10002b54 	.word	0x10002b54
    f680:	10003c78 	.word	0x10003c78

0000f684 <DmConnRegister>:
    f684:	b538      	push	{r3, r4, r5, lr}
    f686:	4604      	mov	r4, r0
    f688:	460d      	mov	r5, r1
    f68a:	3458      	adds	r4, #88	; 0x58
    f68c:	f005 f8fa 	bl	14884 <WsfTaskLock>
    f690:	4b03      	ldr	r3, [pc, #12]	; (f6a0 <DmConnRegister+0x1c>)
    f692:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
    f696:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f69a:	f005 b8f9 	b.w	14890 <WsfTaskUnlock>
    f69e:	bf00      	nop
    f6a0:	10003af4 	.word	0x10003af4

0000f6a4 <DmConnClose>:
    f6a4:	b570      	push	{r4, r5, r6, lr}
    f6a6:	4604      	mov	r4, r0
    f6a8:	2006      	movs	r0, #6
    f6aa:	460e      	mov	r6, r1
    f6ac:	4615      	mov	r5, r2
    f6ae:	f009 fd45 	bl	1913c <WsfMsgAlloc>
    f6b2:	b158      	cbz	r0, f6cc <DmConnClose+0x28>
    f6b4:	2331      	movs	r3, #49	; 0x31
    f6b6:	7083      	strb	r3, [r0, #2]
    f6b8:	4b05      	ldr	r3, [pc, #20]	; (f6d0 <DmConnClose+0x2c>)
    f6ba:	8006      	strh	r6, [r0, #0]
    f6bc:	7105      	strb	r5, [r0, #4]
    f6be:	7144      	strb	r4, [r0, #5]
    f6c0:	4601      	mov	r1, r0
    f6c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f6c6:	7b18      	ldrb	r0, [r3, #12]
    f6c8:	f009 bd5c 	b.w	19184 <WsfMsgSend>
    f6cc:	bd70      	pop	{r4, r5, r6, pc}
    f6ce:	bf00      	nop
    f6d0:	10003c84 	.word	0x10003c84

0000f6d4 <DmReadRemoteFeatures>:
    f6d4:	b508      	push	{r3, lr}
    f6d6:	f7ff fecd 	bl	f474 <dmConnCcbById>
    f6da:	b120      	cbz	r0, f6e6 <DmReadRemoteFeatures+0x12>
    f6dc:	8980      	ldrh	r0, [r0, #12]
    f6de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f6e2:	f006 b9e3 	b.w	15aac <HciLeReadRemoteFeatCmd>
    f6e6:	bd08      	pop	{r3, pc}

0000f6e8 <DmConnUpdate>:
    f6e8:	b538      	push	{r3, r4, r5, lr}
    f6ea:	4605      	mov	r5, r0
    f6ec:	2010      	movs	r0, #16
    f6ee:	460c      	mov	r4, r1
    f6f0:	f009 fd24 	bl	1913c <WsfMsgAlloc>
    f6f4:	b1d0      	cbz	r0, f72c <DmConnUpdate+0x44>
    f6f6:	4a0e      	ldr	r2, [pc, #56]	; (f730 <DmConnUpdate+0x48>)
    f6f8:	1e6b      	subs	r3, r5, #1
    f6fa:	212c      	movs	r1, #44	; 0x2c
    f6fc:	fb01 2303 	mla	r3, r1, r3, r2
    f700:	4602      	mov	r2, r0
    f702:	7e5b      	ldrb	r3, [r3, #25]
    f704:	2b00      	cmp	r3, #0
    f706:	bf0c      	ite	eq
    f708:	2333      	moveq	r3, #51	; 0x33
    f70a:	2334      	movne	r3, #52	; 0x34
    f70c:	7083      	strb	r3, [r0, #2]
    f70e:	f822 5b04 	strh.w	r5, [r2], #4
    f712:	6823      	ldr	r3, [r4, #0]
    f714:	6043      	str	r3, [r0, #4]
    f716:	6863      	ldr	r3, [r4, #4]
    f718:	6053      	str	r3, [r2, #4]
    f71a:	68a3      	ldr	r3, [r4, #8]
    f71c:	6093      	str	r3, [r2, #8]
    f71e:	4b05      	ldr	r3, [pc, #20]	; (f734 <DmConnUpdate+0x4c>)
    f720:	4601      	mov	r1, r0
    f722:	7b18      	ldrb	r0, [r3, #12]
    f724:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f728:	f009 bd2c 	b.w	19184 <WsfMsgSend>
    f72c:	bd38      	pop	{r3, r4, r5, pc}
    f72e:	bf00      	nop
    f730:	10003af4 	.word	0x10003af4
    f734:	10003c84 	.word	0x10003c84

0000f738 <DmConnSetScanInterval>:
    f738:	b538      	push	{r3, r4, r5, lr}
    f73a:	4605      	mov	r5, r0
    f73c:	460c      	mov	r4, r1
    f73e:	f005 f8a1 	bl	14884 <WsfTaskLock>
    f742:	2001      	movs	r0, #1
    f744:	f000 fb3c 	bl	fdc0 <DmInitPhyToIdx>
    f748:	4b05      	ldr	r3, [pc, #20]	; (f760 <DmConnSetScanInterval+0x28>)
    f74a:	30c0      	adds	r0, #192	; 0xc0
    f74c:	f823 5010 	strh.w	r5, [r3, r0, lsl #1]
    f750:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    f754:	805c      	strh	r4, [r3, #2]
    f756:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f75a:	f005 b899 	b.w	14890 <WsfTaskUnlock>
    f75e:	bf00      	nop
    f760:	10003af4 	.word	0x10003af4

0000f764 <DmExtConnSetScanInterval>:
    f764:	b570      	push	{r4, r5, r6, lr}
    f766:	2400      	movs	r4, #0
    f768:	fa40 f304 	asr.w	r3, r0, r4
    f76c:	07db      	lsls	r3, r3, #31
    f76e:	d515      	bpl.n	f79c <DmExtConnSetScanInterval+0x38>
    f770:	880e      	ldrh	r6, [r1, #0]
    f772:	8815      	ldrh	r5, [r2, #0]
    f774:	f005 f886 	bl	14884 <WsfTaskLock>
    f778:	2001      	movs	r0, #1
    f77a:	40a0      	lsls	r0, r4
    f77c:	b2c0      	uxtb	r0, r0
    f77e:	f000 fb1f 	bl	fdc0 <DmInitPhyToIdx>
    f782:	4b08      	ldr	r3, [pc, #32]	; (f7a4 <DmExtConnSetScanInterval+0x40>)
    f784:	30c0      	adds	r0, #192	; 0xc0
    f786:	f823 6010 	strh.w	r6, [r3, r0, lsl #1]
    f78a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    f78e:	805d      	strh	r5, [r3, #2]
    f790:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f794:	f005 b87c 	b.w	14890 <WsfTaskUnlock>
    f798:	3401      	adds	r4, #1
    f79a:	e7e5      	b.n	f768 <DmExtConnSetScanInterval+0x4>
    f79c:	2c07      	cmp	r4, #7
    f79e:	d1fb      	bne.n	f798 <DmExtConnSetScanInterval+0x34>
    f7a0:	bd70      	pop	{r4, r5, r6, pc}
    f7a2:	bf00      	nop
    f7a4:	10003af4 	.word	0x10003af4

0000f7a8 <DmConnSetConnSpec>:
    f7a8:	4601      	mov	r1, r0
    f7aa:	2001      	movs	r0, #1
    f7ac:	e53c      	b.n	f228 <dmConnSetConnSpec>

0000f7ae <DmExtConnSetConnSpec>:
    f7ae:	2300      	movs	r3, #0
    f7b0:	fa40 f203 	asr.w	r2, r0, r3
    f7b4:	07d2      	lsls	r2, r2, #31
    f7b6:	d505      	bpl.n	f7c4 <DmExtConnSetConnSpec+0x16>
    f7b8:	2001      	movs	r0, #1
    f7ba:	4098      	lsls	r0, r3
    f7bc:	b2c0      	uxtb	r0, r0
    f7be:	e533      	b.n	f228 <dmConnSetConnSpec>
    f7c0:	3301      	adds	r3, #1
    f7c2:	e7f5      	b.n	f7b0 <DmExtConnSetConnSpec+0x2>
    f7c4:	2b07      	cmp	r3, #7
    f7c6:	d1fb      	bne.n	f7c0 <DmExtConnSetConnSpec+0x12>
    f7c8:	4770      	bx	lr

0000f7ca <DmConnReadRssi>:
    f7ca:	b510      	push	{r4, lr}
    f7cc:	4604      	mov	r4, r0
    f7ce:	2004      	movs	r0, #4
    f7d0:	f009 fcb4 	bl	1913c <WsfMsgAlloc>
    f7d4:	4601      	mov	r1, r0
    f7d6:	b140      	cbz	r0, f7ea <DmConnReadRssi+0x20>
    f7d8:	2341      	movs	r3, #65	; 0x41
    f7da:	7083      	strb	r3, [r0, #2]
    f7dc:	4b03      	ldr	r3, [pc, #12]	; (f7ec <DmConnReadRssi+0x22>)
    f7de:	8004      	strh	r4, [r0, #0]
    f7e0:	7b18      	ldrb	r0, [r3, #12]
    f7e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f7e6:	f009 bccd 	b.w	19184 <WsfMsgSend>
    f7ea:	bd10      	pop	{r4, pc}
    f7ec:	10003c84 	.word	0x10003c84

0000f7f0 <DmRemoteConnParamReqReply>:
    f7f0:	b538      	push	{r3, r4, r5, lr}
    f7f2:	4605      	mov	r5, r0
    f7f4:	2010      	movs	r0, #16
    f7f6:	460c      	mov	r4, r1
    f7f8:	f009 fca0 	bl	1913c <WsfMsgAlloc>
    f7fc:	b188      	cbz	r0, f822 <DmRemoteConnParamReqReply+0x32>
    f7fe:	4602      	mov	r2, r0
    f800:	2342      	movs	r3, #66	; 0x42
    f802:	7083      	strb	r3, [r0, #2]
    f804:	f822 5b04 	strh.w	r5, [r2], #4
    f808:	6823      	ldr	r3, [r4, #0]
    f80a:	6043      	str	r3, [r0, #4]
    f80c:	6863      	ldr	r3, [r4, #4]
    f80e:	6053      	str	r3, [r2, #4]
    f810:	68a3      	ldr	r3, [r4, #8]
    f812:	6093      	str	r3, [r2, #8]
    f814:	4b03      	ldr	r3, [pc, #12]	; (f824 <DmRemoteConnParamReqReply+0x34>)
    f816:	4601      	mov	r1, r0
    f818:	7b18      	ldrb	r0, [r3, #12]
    f81a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f81e:	f009 bcb1 	b.w	19184 <WsfMsgSend>
    f822:	bd38      	pop	{r3, r4, r5, pc}
    f824:	10003c84 	.word	0x10003c84

0000f828 <DmRemoteConnParamReqNegReply>:
    f828:	b538      	push	{r3, r4, r5, lr}
    f82a:	4605      	mov	r5, r0
    f82c:	2006      	movs	r0, #6
    f82e:	460c      	mov	r4, r1
    f830:	f009 fc84 	bl	1913c <WsfMsgAlloc>
    f834:	b150      	cbz	r0, f84c <DmRemoteConnParamReqNegReply+0x24>
    f836:	2343      	movs	r3, #67	; 0x43
    f838:	7083      	strb	r3, [r0, #2]
    f83a:	4b05      	ldr	r3, [pc, #20]	; (f850 <DmRemoteConnParamReqNegReply+0x28>)
    f83c:	8005      	strh	r5, [r0, #0]
    f83e:	7104      	strb	r4, [r0, #4]
    f840:	4601      	mov	r1, r0
    f842:	7b18      	ldrb	r0, [r3, #12]
    f844:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f848:	f009 bc9c 	b.w	19184 <WsfMsgSend>
    f84c:	bd38      	pop	{r3, r4, r5, pc}
    f84e:	bf00      	nop
    f850:	10003c84 	.word	0x10003c84

0000f854 <DmConnSetDataLen>:
    f854:	b570      	push	{r4, r5, r6, lr}
    f856:	4606      	mov	r6, r0
    f858:	2008      	movs	r0, #8
    f85a:	460d      	mov	r5, r1
    f85c:	4614      	mov	r4, r2
    f85e:	f009 fc6d 	bl	1913c <WsfMsgAlloc>
    f862:	b158      	cbz	r0, f87c <DmConnSetDataLen+0x28>
    f864:	2344      	movs	r3, #68	; 0x44
    f866:	7083      	strb	r3, [r0, #2]
    f868:	4b05      	ldr	r3, [pc, #20]	; (f880 <DmConnSetDataLen+0x2c>)
    f86a:	8006      	strh	r6, [r0, #0]
    f86c:	8085      	strh	r5, [r0, #4]
    f86e:	80c4      	strh	r4, [r0, #6]
    f870:	4601      	mov	r1, r0
    f872:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f876:	7b18      	ldrb	r0, [r3, #12]
    f878:	f009 bc84 	b.w	19184 <WsfMsgSend>
    f87c:	bd70      	pop	{r4, r5, r6, pc}
    f87e:	bf00      	nop
    f880:	10003c84 	.word	0x10003c84

0000f884 <DmWriteAuthPayloadTimeout>:
    f884:	b538      	push	{r3, r4, r5, lr}
    f886:	4605      	mov	r5, r0
    f888:	2006      	movs	r0, #6
    f88a:	460c      	mov	r4, r1
    f88c:	f009 fc56 	bl	1913c <WsfMsgAlloc>
    f890:	b150      	cbz	r0, f8a8 <DmWriteAuthPayloadTimeout+0x24>
    f892:	2345      	movs	r3, #69	; 0x45
    f894:	7083      	strb	r3, [r0, #2]
    f896:	4b05      	ldr	r3, [pc, #20]	; (f8ac <DmWriteAuthPayloadTimeout+0x28>)
    f898:	8005      	strh	r5, [r0, #0]
    f89a:	8084      	strh	r4, [r0, #4]
    f89c:	4601      	mov	r1, r0
    f89e:	7b18      	ldrb	r0, [r3, #12]
    f8a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f8a4:	f009 bc6e 	b.w	19184 <WsfMsgSend>
    f8a8:	bd38      	pop	{r3, r4, r5, pc}
    f8aa:	bf00      	nop
    f8ac:	10003c84 	.word	0x10003c84

0000f8b0 <DmConnIdByHandle>:
    f8b0:	b510      	push	{r4, lr}
    f8b2:	4908      	ldr	r1, [pc, #32]	; (f8d4 <DmConnIdByHandle+0x24>)
    f8b4:	2300      	movs	r3, #0
    f8b6:	18ca      	adds	r2, r1, r3
    f8b8:	7d94      	ldrb	r4, [r2, #22]
    f8ba:	b124      	cbz	r4, f8c6 <DmConnIdByHandle+0x16>
    f8bc:	8994      	ldrh	r4, [r2, #12]
    f8be:	4284      	cmp	r4, r0
    f8c0:	d101      	bne.n	f8c6 <DmConnIdByHandle+0x16>
    f8c2:	7c10      	ldrb	r0, [r2, #16]
    f8c4:	bd10      	pop	{r4, pc}
    f8c6:	332c      	adds	r3, #44	; 0x2c
    f8c8:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
    f8cc:	d1f3      	bne.n	f8b6 <DmConnIdByHandle+0x6>
    f8ce:	2000      	movs	r0, #0
    f8d0:	e7f8      	b.n	f8c4 <DmConnIdByHandle+0x14>
    f8d2:	bf00      	nop
    f8d4:	10003af4 	.word	0x10003af4

0000f8d8 <DmConnInUse>:
    f8d8:	4b03      	ldr	r3, [pc, #12]	; (f8e8 <DmConnInUse+0x10>)
    f8da:	222c      	movs	r2, #44	; 0x2c
    f8dc:	3801      	subs	r0, #1
    f8de:	fb02 3000 	mla	r0, r2, r0, r3
    f8e2:	7d80      	ldrb	r0, [r0, #22]
    f8e4:	4770      	bx	lr
    f8e6:	bf00      	nop
    f8e8:	10003af4 	.word	0x10003af4

0000f8ec <DmConnPeerAddrType>:
    f8ec:	4b03      	ldr	r3, [pc, #12]	; (f8fc <DmConnPeerAddrType+0x10>)
    f8ee:	222c      	movs	r2, #44	; 0x2c
    f8f0:	3801      	subs	r0, #1
    f8f2:	fb02 3000 	mla	r0, r2, r0, r3
    f8f6:	7cc0      	ldrb	r0, [r0, #19]
    f8f8:	4770      	bx	lr
    f8fa:	bf00      	nop
    f8fc:	10003af4 	.word	0x10003af4

0000f900 <DmConnPeerAddr>:
    f900:	4b02      	ldr	r3, [pc, #8]	; (f90c <DmConnPeerAddr+0xc>)
    f902:	222c      	movs	r2, #44	; 0x2c
    f904:	3801      	subs	r0, #1
    f906:	fb02 3000 	mla	r0, r2, r0, r3
    f90a:	4770      	bx	lr
    f90c:	10003af4 	.word	0x10003af4

0000f910 <DmConnLocalAddrType>:
    f910:	4b03      	ldr	r3, [pc, #12]	; (f920 <DmConnLocalAddrType+0x10>)
    f912:	222c      	movs	r2, #44	; 0x2c
    f914:	3801      	subs	r0, #1
    f916:	fb02 3000 	mla	r0, r2, r0, r3
    f91a:	7d00      	ldrb	r0, [r0, #20]
    f91c:	4770      	bx	lr
    f91e:	bf00      	nop
    f920:	10003af4 	.word	0x10003af4

0000f924 <DmConnLocalAddr>:
    f924:	4b03      	ldr	r3, [pc, #12]	; (f934 <DmConnLocalAddr+0x10>)
    f926:	222c      	movs	r2, #44	; 0x2c
    f928:	3801      	subs	r0, #1
    f92a:	fb02 3000 	mla	r0, r2, r0, r3
    f92e:	3006      	adds	r0, #6
    f930:	4770      	bx	lr
    f932:	bf00      	nop
    f934:	10003af4 	.word	0x10003af4

0000f938 <DmConnPeerRpa>:
    f938:	4b03      	ldr	r3, [pc, #12]	; (f948 <DmConnPeerRpa+0x10>)
    f93a:	222c      	movs	r2, #44	; 0x2c
    f93c:	3801      	subs	r0, #1
    f93e:	fb02 3000 	mla	r0, r2, r0, r3
    f942:	3020      	adds	r0, #32
    f944:	4770      	bx	lr
    f946:	bf00      	nop
    f948:	10003af4 	.word	0x10003af4

0000f94c <DmConnLocalRpa>:
    f94c:	4b03      	ldr	r3, [pc, #12]	; (f95c <DmConnLocalRpa+0x10>)
    f94e:	222c      	movs	r2, #44	; 0x2c
    f950:	3801      	subs	r0, #1
    f952:	fb02 3000 	mla	r0, r2, r0, r3
    f956:	301a      	adds	r0, #26
    f958:	4770      	bx	lr
    f95a:	bf00      	nop
    f95c:	10003af4 	.word	0x10003af4

0000f960 <DmConnSecLevel>:
    f960:	4b03      	ldr	r3, [pc, #12]	; (f970 <DmConnSecLevel+0x10>)
    f962:	222c      	movs	r2, #44	; 0x2c
    f964:	3801      	subs	r0, #1
    f966:	fb02 3000 	mla	r0, r2, r0, r3
    f96a:	7dc0      	ldrb	r0, [r0, #23]
    f96c:	4770      	bx	lr
    f96e:	bf00      	nop
    f970:	10003af4 	.word	0x10003af4

0000f974 <DmConnSetIdle>:
    f974:	b570      	push	{r4, r5, r6, lr}
    f976:	4604      	mov	r4, r0
    f978:	4616      	mov	r6, r2
    f97a:	460d      	mov	r5, r1
    f97c:	f004 ff82 	bl	14884 <WsfTaskLock>
    f980:	4b08      	ldr	r3, [pc, #32]	; (f9a4 <DmConnSetIdle+0x30>)
    f982:	1e60      	subs	r0, r4, #1
    f984:	222c      	movs	r2, #44	; 0x2c
    f986:	fb02 3000 	mla	r0, r2, r0, r3
    f98a:	7d83      	ldrb	r3, [r0, #22]
    f98c:	b123      	cbz	r3, f998 <DmConnSetIdle+0x24>
    f98e:	89c1      	ldrh	r1, [r0, #14]
    f990:	b936      	cbnz	r6, f9a0 <DmConnSetIdle+0x2c>
    f992:	ea21 0505 	bic.w	r5, r1, r5
    f996:	81c5      	strh	r5, [r0, #14]
    f998:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f99c:	f004 bf78 	b.w	14890 <WsfTaskUnlock>
    f9a0:	430d      	orrs	r5, r1
    f9a2:	e7f8      	b.n	f996 <DmConnSetIdle+0x22>
    f9a4:	10003af4 	.word	0x10003af4

0000f9a8 <DmConnCheckIdle>:
    f9a8:	b510      	push	{r4, lr}
    f9aa:	4604      	mov	r4, r0
    f9ac:	f004 ff6a 	bl	14884 <WsfTaskLock>
    f9b0:	4804      	ldr	r0, [pc, #16]	; (f9c4 <DmConnCheckIdle+0x1c>)
    f9b2:	232c      	movs	r3, #44	; 0x2c
    f9b4:	3c01      	subs	r4, #1
    f9b6:	fb03 0404 	mla	r4, r3, r4, r0
    f9ba:	89e4      	ldrh	r4, [r4, #14]
    f9bc:	f004 ff68 	bl	14890 <WsfTaskUnlock>
    f9c0:	4620      	mov	r0, r4
    f9c2:	bd10      	pop	{r4, pc}
    f9c4:	10003af4 	.word	0x10003af4

0000f9c8 <DmConnRole>:
    f9c8:	4b03      	ldr	r3, [pc, #12]	; (f9d8 <DmConnRole+0x10>)
    f9ca:	222c      	movs	r2, #44	; 0x2c
    f9cc:	3801      	subs	r0, #1
    f9ce:	fb02 3000 	mla	r0, r2, r0, r3
    f9d2:	7e40      	ldrb	r0, [r0, #25]
    f9d4:	4770      	bx	lr
    f9d6:	bf00      	nop
    f9d8:	10003af4 	.word	0x10003af4

0000f9dc <dmConnSmActUpdateSlave>:
    f9dc:	b530      	push	{r4, r5, lr}
    f9de:	6a83      	ldr	r3, [r0, #40]	; 0x28
    f9e0:	079a      	lsls	r2, r3, #30
    f9e2:	b085      	sub	sp, #20
    f9e4:	4604      	mov	r4, r0
    f9e6:	460d      	mov	r5, r1
    f9e8:	d509      	bpl.n	f9fe <dmConnSmActUpdateSlave+0x22>
    f9ea:	f007 f957 	bl	16c9c <HciGetLeSupFeat>
    f9ee:	0783      	lsls	r3, r0, #30
    f9f0:	d505      	bpl.n	f9fe <dmConnSmActUpdateSlave+0x22>
    f9f2:	1d29      	adds	r1, r5, #4
    f9f4:	89a0      	ldrh	r0, [r4, #12]
    f9f6:	f005 fdb1 	bl	1555c <HciLeConnUpdateCmd>
    f9fa:	b005      	add	sp, #20
    f9fc:	bd30      	pop	{r4, r5, pc}
    f9fe:	7c63      	ldrb	r3, [r4, #17]
    fa00:	89a0      	ldrh	r0, [r4, #12]
    fa02:	b92b      	cbnz	r3, fa10 <dmConnSmActUpdateSlave+0x34>
    fa04:	2301      	movs	r3, #1
    fa06:	7463      	strb	r3, [r4, #17]
    fa08:	1d29      	adds	r1, r5, #4
    fa0a:	f000 ff09 	bl	10820 <L2cDmConnUpdateReq>
    fa0e:	e7f4      	b.n	f9fa <dmConnSmActUpdateSlave+0x1e>
    fa10:	7c23      	ldrb	r3, [r4, #16]
    fa12:	f8ad 3000 	strh.w	r3, [sp]
    fa16:	f640 4329 	movw	r3, #3113	; 0xc29
    fa1a:	f8ad 3002 	strh.w	r3, [sp, #2]
    fa1e:	230c      	movs	r3, #12
    fa20:	f88d 3004 	strb.w	r3, [sp, #4]
    fa24:	4b03      	ldr	r3, [pc, #12]	; (fa34 <dmConnSmActUpdateSlave+0x58>)
    fa26:	f8ad 0006 	strh.w	r0, [sp, #6]
    fa2a:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
    fa2e:	4668      	mov	r0, sp
    fa30:	4798      	blx	r3
    fa32:	e7e2      	b.n	f9fa <dmConnSmActUpdateSlave+0x1e>
    fa34:	10003af4 	.word	0x10003af4

0000fa38 <dmConnSmActL2cUpdateCnf>:
    fa38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    fa3a:	7c43      	ldrb	r3, [r0, #17]
    fa3c:	b1b3      	cbz	r3, fa6c <dmConnSmActL2cUpdateCnf+0x34>
    fa3e:	2300      	movs	r3, #0
    fa40:	7443      	strb	r3, [r0, #17]
    fa42:	888b      	ldrh	r3, [r1, #4]
    fa44:	b193      	cbz	r3, fa6c <dmConnSmActL2cUpdateCnf+0x34>
    fa46:	b2db      	uxtb	r3, r3
    fa48:	f88d 3003 	strb.w	r3, [sp, #3]
    fa4c:	f88d 3004 	strb.w	r3, [sp, #4]
    fa50:	4b08      	ldr	r3, [pc, #32]	; (fa74 <dmConnSmActL2cUpdateCnf+0x3c>)
    fa52:	8982      	ldrh	r2, [r0, #12]
    fa54:	7c01      	ldrb	r1, [r0, #16]
    fa56:	f8ad 1000 	strh.w	r1, [sp]
    fa5a:	2029      	movs	r0, #41	; 0x29
    fa5c:	f88d 0002 	strb.w	r0, [sp, #2]
    fa60:	f8ad 2006 	strh.w	r2, [sp, #6]
    fa64:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
    fa68:	4668      	mov	r0, sp
    fa6a:	4798      	blx	r3
    fa6c:	b005      	add	sp, #20
    fa6e:	f85d fb04 	ldr.w	pc, [sp], #4
    fa72:	bf00      	nop
    fa74:	10003af4 	.word	0x10003af4

0000fa78 <DmL2cConnUpdateCnf>:
    fa78:	b513      	push	{r0, r1, r4, lr}
    fa7a:	460c      	mov	r4, r1
    fa7c:	f7ff fc13 	bl	f2a6 <dmConnCcbByHandle>
    fa80:	b138      	cbz	r0, fa92 <DmL2cConnUpdateCnf+0x1a>
    fa82:	2336      	movs	r3, #54	; 0x36
    fa84:	4669      	mov	r1, sp
    fa86:	f88d 3002 	strb.w	r3, [sp, #2]
    fa8a:	f8ad 4004 	strh.w	r4, [sp, #4]
    fa8e:	f000 f84f 	bl	fb30 <dmConnSmExecute>
    fa92:	b002      	add	sp, #8
    fa94:	bd10      	pop	{r4, pc}

0000fa96 <DmConnAccept>:
    fa96:	b510      	push	{r4, lr}
    fa98:	b086      	sub	sp, #24
    fa9a:	2401      	movs	r4, #1
    fa9c:	9404      	str	r4, [sp, #16]
    fa9e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    faa0:	9403      	str	r4, [sp, #12]
    faa2:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
    faa6:	9402      	str	r4, [sp, #8]
    faa8:	f89d 4020 	ldrb.w	r4, [sp, #32]
    faac:	e9cd 3400 	strd	r3, r4, [sp]
    fab0:	4613      	mov	r3, r2
    fab2:	460a      	mov	r2, r1
    fab4:	2100      	movs	r1, #0
    fab6:	f7ff fd85 	bl	f5c4 <dmConnOpenAccept>
    faba:	b006      	add	sp, #24
    fabc:	bd10      	pop	{r4, pc}
    fabe:	bf00      	nop

0000fac0 <dmConnSmActAccept>:
    fac0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    fac2:	f101 050b 	add.w	r5, r1, #11
    fac6:	798c      	ldrb	r4, [r1, #6]
    fac8:	7a8b      	ldrb	r3, [r1, #10]
    faca:	890a      	ldrh	r2, [r1, #8]
    facc:	7948      	ldrb	r0, [r1, #5]
    face:	9501      	str	r5, [sp, #4]
    fad0:	7c49      	ldrb	r1, [r1, #17]
    fad2:	9100      	str	r1, [sp, #0]
    fad4:	4621      	mov	r1, r4
    fad6:	f7ff fb1a 	bl	f10e <dmAdvStartDirected>
    fada:	b003      	add	sp, #12
    fadc:	bd30      	pop	{r4, r5, pc}

0000fade <dmConnSmActCancelAccept>:
    fade:	b538      	push	{r3, r4, r5, lr}
    fae0:	4604      	mov	r4, r0
    fae2:	460d      	mov	r5, r1
    fae4:	f7ff fb28 	bl	f138 <dmAdvStopDirected>
    fae8:	4629      	mov	r1, r5
    faea:	4620      	mov	r0, r4
    faec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    faf0:	f7ff bd5a 	b.w	f5a8 <dmConnSmActConnFailed>

0000faf4 <dmConnSmActConnAccepted>:
    faf4:	b538      	push	{r3, r4, r5, lr}
    faf6:	4604      	mov	r4, r0
    faf8:	460d      	mov	r5, r1
    fafa:	f7ff fb29 	bl	f150 <dmAdvConnected>
    fafe:	4629      	mov	r1, r5
    fb00:	4620      	mov	r0, r4
    fb02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    fb06:	f7ff bd19 	b.w	f53c <dmConnSmActConnOpened>

0000fb0a <dmConnSmActAcceptFailed>:
    fb0a:	b538      	push	{r3, r4, r5, lr}
    fb0c:	4604      	mov	r4, r0
    fb0e:	460d      	mov	r5, r1
    fb10:	f7ff fb2a 	bl	f168 <dmAdvConnectFailed>
    fb14:	4629      	mov	r1, r5
    fb16:	4620      	mov	r0, r4
    fb18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    fb1c:	f7ff bd44 	b.w	f5a8 <dmConnSmActConnFailed>

0000fb20 <DmConnSlaveInit>:
    fb20:	4b01      	ldr	r3, [pc, #4]	; (fb28 <DmConnSlaveInit+0x8>)
    fb22:	4a02      	ldr	r2, [pc, #8]	; (fb2c <DmConnSlaveInit+0xc>)
    fb24:	609a      	str	r2, [r3, #8]
    fb26:	4770      	bx	lr
    fb28:	10003c78 	.word	0x10003c78
    fb2c:	00024728 	.word	0x00024728

0000fb30 <dmConnSmExecute>:
    fb30:	788b      	ldrb	r3, [r1, #2]
    fb32:	7d42      	ldrb	r2, [r0, #21]
    fb34:	b470      	push	{r4, r5, r6}
    fb36:	f003 030f 	and.w	r3, r3, #15
    fb3a:	4d0c      	ldr	r5, [pc, #48]	; (fb6c <dmConnSmExecute+0x3c>)
    fb3c:	260d      	movs	r6, #13
    fb3e:	fb06 3202 	mla	r2, r6, r2, r3
    fb42:	eb05 0342 	add.w	r3, r5, r2, lsl #1
    fb46:	f815 2012 	ldrb.w	r2, [r5, r2, lsl #1]
    fb4a:	785b      	ldrb	r3, [r3, #1]
    fb4c:	7542      	strb	r2, [r0, #21]
    fb4e:	091c      	lsrs	r4, r3, #4
    fb50:	4a07      	ldr	r2, [pc, #28]	; (fb70 <dmConnSmExecute+0x40>)
    fb52:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
    fb56:	b12a      	cbz	r2, fb64 <dmConnSmExecute+0x34>
    fb58:	f003 030f 	and.w	r3, r3, #15
    fb5c:	bc70      	pop	{r4, r5, r6}
    fb5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb62:	4718      	bx	r3
    fb64:	bc70      	pop	{r4, r5, r6}
    fb66:	f7ff bb1d 	b.w	f1a4 <dmConnSmActNone>
    fb6a:	bf00      	nop
    fb6c:	00024740 	.word	0x00024740
    fb70:	10003c78 	.word	0x10003c78

0000fb74 <dmDevHciHandler>:
    fb74:	7882      	ldrb	r2, [r0, #2]
    fb76:	4603      	mov	r3, r0
    fb78:	b92a      	cbnz	r2, fb86 <dmDevHciHandler+0x12>
    fb7a:	490b      	ldr	r1, [pc, #44]	; (fba8 <dmDevHciHandler+0x34>)
    fb7c:	740a      	strb	r2, [r1, #16]
    fb7e:	688b      	ldr	r3, [r1, #8]
    fb80:	2220      	movs	r2, #32
    fb82:	7082      	strb	r2, [r0, #2]
    fb84:	4718      	bx	r3
    fb86:	2a13      	cmp	r2, #19
    fb88:	d104      	bne.n	fb94 <dmDevHciHandler+0x20>
    fb8a:	2253      	movs	r2, #83	; 0x53
    fb8c:	709a      	strb	r2, [r3, #2]
    fb8e:	4b06      	ldr	r3, [pc, #24]	; (fba8 <dmDevHciHandler+0x34>)
    fb90:	689b      	ldr	r3, [r3, #8]
    fb92:	e7f7      	b.n	fb84 <dmDevHciHandler+0x10>
    fb94:	2a14      	cmp	r2, #20
    fb96:	d101      	bne.n	fb9c <dmDevHciHandler+0x28>
    fb98:	2255      	movs	r2, #85	; 0x55
    fb9a:	e7f7      	b.n	fb8c <dmDevHciHandler+0x18>
    fb9c:	2a12      	cmp	r2, #18
    fb9e:	d101      	bne.n	fba4 <dmDevHciHandler+0x30>
    fba0:	2254      	movs	r2, #84	; 0x54
    fba2:	e7f3      	b.n	fb8c <dmDevHciHandler+0x18>
    fba4:	4770      	bx	lr
    fba6:	bf00      	nop
    fba8:	10003c84 	.word	0x10003c84

0000fbac <dmDevActReset>:
    fbac:	b538      	push	{r3, r4, r5, lr}
    fbae:	4b08      	ldr	r3, [pc, #32]	; (fbd0 <dmDevActReset+0x24>)
    fbb0:	4d08      	ldr	r5, [pc, #32]	; (fbd4 <dmDevActReset+0x28>)
    fbb2:	2201      	movs	r2, #1
    fbb4:	741a      	strb	r2, [r3, #16]
    fbb6:	2400      	movs	r4, #0
    fbb8:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    fbbc:	3401      	adds	r4, #1
    fbbe:	681b      	ldr	r3, [r3, #0]
    fbc0:	4798      	blx	r3
    fbc2:	2c0c      	cmp	r4, #12
    fbc4:	d1f8      	bne.n	fbb8 <dmDevActReset+0xc>
    fbc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    fbca:	f006 bebf 	b.w	1694c <HciResetSequence>
    fbce:	bf00      	nop
    fbd0:	10003c84 	.word	0x10003c84
    fbd4:	10002b54 	.word	0x10002b54

0000fbd8 <dmDevMsgHandler>:
    fbd8:	f7ff bfe8 	b.w	fbac <dmDevActReset>

0000fbdc <DmDevReset>:
    fbdc:	b508      	push	{r3, lr}
    fbde:	2004      	movs	r0, #4
    fbe0:	f009 faac 	bl	1913c <WsfMsgAlloc>
    fbe4:	4601      	mov	r1, r0
    fbe6:	b138      	cbz	r0, fbf8 <DmDevReset+0x1c>
    fbe8:	2370      	movs	r3, #112	; 0x70
    fbea:	7083      	strb	r3, [r0, #2]
    fbec:	4b03      	ldr	r3, [pc, #12]	; (fbfc <DmDevReset+0x20>)
    fbee:	7b18      	ldrb	r0, [r3, #12]
    fbf0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    fbf4:	f009 bac6 	b.w	19184 <WsfMsgSend>
    fbf8:	bd08      	pop	{r3, pc}
    fbfa:	bf00      	nop
    fbfc:	10003c84 	.word	0x10003c84

0000fc00 <DmDevSetRandAddr>:
    fc00:	b510      	push	{r4, lr}
    fc02:	4601      	mov	r1, r0
    fc04:	4604      	mov	r4, r0
    fc06:	4804      	ldr	r0, [pc, #16]	; (fc18 <DmDevSetRandAddr+0x18>)
    fc08:	f003 f920 	bl	12e4c <BdaCpy>
    fc0c:	4620      	mov	r0, r4
    fc0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fc12:	f006 b889 	b.w	15d28 <HciLeSetRandAddrCmd>
    fc16:	bf00      	nop
    fc18:	10003c84 	.word	0x10003c84

0000fc1c <DmDevWhiteListAdd>:
    fc1c:	f005 bc68 	b.w	154f0 <HciLeAddDevWhiteListCmd>

0000fc20 <DmDevWhiteListRemove>:
    fc20:	f005 bf8e 	b.w	15b40 <HciLeRemoveDevWhiteListCmd>

0000fc24 <DmDevWhiteListClear>:
    fc24:	f005 bc88 	b.w	15538 <HciLeClearWhiteListCmd>

0000fc28 <dmDevSetFilterPolicy>:
    fc28:	2901      	cmp	r1, #1
    fc2a:	d00b      	beq.n	fc44 <dmDevSetFilterPolicy+0x1c>
    fc2c:	d303      	bcc.n	fc36 <dmDevSetFilterPolicy+0xe>
    fc2e:	2902      	cmp	r1, #2
    fc30:	d00d      	beq.n	fc4e <dmDevSetFilterPolicy+0x26>
    fc32:	2000      	movs	r0, #0
    fc34:	4770      	bx	lr
    fc36:	2a03      	cmp	r2, #3
    fc38:	d8fb      	bhi.n	fc32 <dmDevSetFilterPolicy+0xa>
    fc3a:	4b07      	ldr	r3, [pc, #28]	; (fc58 <dmDevSetFilterPolicy+0x30>)
    fc3c:	4418      	add	r0, r3
    fc3e:	7442      	strb	r2, [r0, #17]
    fc40:	2001      	movs	r0, #1
    fc42:	4770      	bx	lr
    fc44:	2a03      	cmp	r2, #3
    fc46:	d8f4      	bhi.n	fc32 <dmDevSetFilterPolicy+0xa>
    fc48:	4b03      	ldr	r3, [pc, #12]	; (fc58 <dmDevSetFilterPolicy+0x30>)
    fc4a:	749a      	strb	r2, [r3, #18]
    fc4c:	e7f8      	b.n	fc40 <dmDevSetFilterPolicy+0x18>
    fc4e:	2a01      	cmp	r2, #1
    fc50:	d8ef      	bhi.n	fc32 <dmDevSetFilterPolicy+0xa>
    fc52:	4b01      	ldr	r3, [pc, #4]	; (fc58 <dmDevSetFilterPolicy+0x30>)
    fc54:	74da      	strb	r2, [r3, #19]
    fc56:	e7f3      	b.n	fc40 <dmDevSetFilterPolicy+0x18>
    fc58:	10003c84 	.word	0x10003c84

0000fc5c <DmDevSetFilterPolicy>:
    fc5c:	460a      	mov	r2, r1
    fc5e:	4601      	mov	r1, r0
    fc60:	2000      	movs	r0, #0
    fc62:	f7ff bfe1 	b.w	fc28 <dmDevSetFilterPolicy>

0000fc66 <DmDevSetExtFilterPolicy>:
    fc66:	f7ff bfdf 	b.w	fc28 <dmDevSetFilterPolicy>

0000fc6a <DmDevVsInit>:
    fc6a:	f009 b923 	b.w	18eb4 <HciVsInit>
    fc6e:	bf00      	nop

0000fc70 <dmHciEvtCback>:
    fc70:	4a06      	ldr	r2, [pc, #24]	; (fc8c <dmHciEvtCback+0x1c>)
    fc72:	7883      	ldrb	r3, [r0, #2]
    fc74:	7c12      	ldrb	r2, [r2, #16]
    fc76:	b102      	cbz	r2, fc7a <dmHciEvtCback+0xa>
    fc78:	b933      	cbnz	r3, fc88 <dmHciEvtCback+0x18>
    fc7a:	4a05      	ldr	r2, [pc, #20]	; (fc90 <dmHciEvtCback+0x20>)
    fc7c:	5cd2      	ldrb	r2, [r2, r3]
    fc7e:	4b05      	ldr	r3, [pc, #20]	; (fc94 <dmHciEvtCback+0x24>)
    fc80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    fc84:	685b      	ldr	r3, [r3, #4]
    fc86:	4718      	bx	r3
    fc88:	4770      	bx	lr
    fc8a:	bf00      	nop
    fc8c:	10003c84 	.word	0x10003c84
    fc90:	000247d0 	.word	0x000247d0
    fc94:	10002b54 	.word	0x10002b54

0000fc98 <dmEmptyReset>:
    fc98:	4770      	bx	lr

0000fc9a <dmEmptyHandler>:
    fc9a:	4770      	bx	lr

0000fc9c <DmRegister>:
    fc9c:	b510      	push	{r4, lr}
    fc9e:	4b0a      	ldr	r3, [pc, #40]	; (fcc8 <DmRegister+0x2c>)
    fca0:	4c0a      	ldr	r4, [pc, #40]	; (fccc <DmRegister+0x30>)
    fca2:	6a1a      	ldr	r2, [r3, #32]
    fca4:	4b0a      	ldr	r3, [pc, #40]	; (fcd0 <DmRegister+0x34>)
    fca6:	60a0      	str	r0, [r4, #8]
    fca8:	429a      	cmp	r2, r3
    fcaa:	b09a      	sub	sp, #104	; 0x68
    fcac:	d00a      	beq.n	fcc4 <DmRegister+0x28>
    fcae:	f007 f805 	bl	16cbc <HciGetMaxRxAclLen>
    fcb2:	2844      	cmp	r0, #68	; 0x44
    fcb4:	d806      	bhi.n	fcc4 <DmRegister+0x28>
    fcb6:	a81a      	add	r0, sp, #104	; 0x68
    fcb8:	f04f 73a9 	mov.w	r3, #22151168	; 0x1520000
    fcbc:	f840 3d64 	str.w	r3, [r0, #-100]!
    fcc0:	68a3      	ldr	r3, [r4, #8]
    fcc2:	4798      	blx	r3
    fcc4:	b01a      	add	sp, #104	; 0x68
    fcc6:	bd10      	pop	{r4, pc}
    fcc8:	10002b54 	.word	0x10002b54
    fccc:	10003c84 	.word	0x10003c84
    fcd0:	0002480c 	.word	0x0002480c

0000fcd4 <DmFindAdType>:
    fcd4:	b530      	push	{r4, r5, lr}
    fcd6:	b121      	cbz	r1, fce2 <DmFindAdType+0xe>
    fcd8:	7813      	ldrb	r3, [r2, #0]
    fcda:	b173      	cbz	r3, fcfa <DmFindAdType+0x26>
    fcdc:	b29c      	uxth	r4, r3
    fcde:	428c      	cmp	r4, r1
    fce0:	d302      	bcc.n	fce8 <DmFindAdType+0x14>
    fce2:	2200      	movs	r2, #0
    fce4:	4610      	mov	r0, r2
    fce6:	bd30      	pop	{r4, r5, pc}
    fce8:	7855      	ldrb	r5, [r2, #1]
    fcea:	4285      	cmp	r5, r0
    fcec:	d0fa      	beq.n	fce4 <DmFindAdType+0x10>
    fcee:	43e4      	mvns	r4, r4
    fcf0:	4421      	add	r1, r4
    fcf2:	3301      	adds	r3, #1
    fcf4:	b289      	uxth	r1, r1
    fcf6:	441a      	add	r2, r3
    fcf8:	e7ed      	b.n	fcd6 <DmFindAdType+0x2>
    fcfa:	461a      	mov	r2, r3
    fcfc:	e7f2      	b.n	fce4 <DmFindAdType+0x10>

0000fcfe <DmHandlerInit>:
    fcfe:	4b04      	ldr	r3, [pc, #16]	; (fd10 <DmHandlerInit+0x12>)
    fd00:	2200      	movs	r2, #0
    fd02:	7318      	strb	r0, [r3, #12]
    fd04:	4803      	ldr	r0, [pc, #12]	; (fd14 <DmHandlerInit+0x16>)
    fd06:	751a      	strb	r2, [r3, #20]
    fd08:	741a      	strb	r2, [r3, #16]
    fd0a:	f003 b84d 	b.w	12da8 <HciEvtRegister>
    fd0e:	bf00      	nop
    fd10:	10003c84 	.word	0x10003c84
    fd14:	0000fc71 	.word	0x0000fc71

0000fd18 <DmHandler>:
    fd18:	b151      	cbz	r1, fd30 <DmHandler+0x18>
    fd1a:	4b06      	ldr	r3, [pc, #24]	; (fd34 <DmHandler+0x1c>)
    fd1c:	7c1b      	ldrb	r3, [r3, #16]
    fd1e:	b93b      	cbnz	r3, fd30 <DmHandler+0x18>
    fd20:	788b      	ldrb	r3, [r1, #2]
    fd22:	4a05      	ldr	r2, [pc, #20]	; (fd38 <DmHandler+0x20>)
    fd24:	091b      	lsrs	r3, r3, #4
    fd26:	4608      	mov	r0, r1
    fd28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd2c:	689b      	ldr	r3, [r3, #8]
    fd2e:	4718      	bx	r3
    fd30:	4770      	bx	lr
    fd32:	bf00      	nop
    fd34:	10003c84 	.word	0x10003c84
    fd38:	10002b54 	.word	0x10002b54

0000fd3c <DmLlPrivEnabled>:
    fd3c:	4b01      	ldr	r3, [pc, #4]	; (fd44 <DmLlPrivEnabled+0x8>)
    fd3e:	7d18      	ldrb	r0, [r3, #20]
    fd40:	4770      	bx	lr
    fd42:	bf00      	nop
    fd44:	10003c84 	.word	0x10003c84

0000fd48 <DmLlAddrType>:
    fd48:	4b04      	ldr	r3, [pc, #16]	; (fd5c <DmLlAddrType+0x14>)
    fd4a:	7d1b      	ldrb	r3, [r3, #20]
    fd4c:	b12b      	cbz	r3, fd5a <DmLlAddrType+0x12>
    fd4e:	b118      	cbz	r0, fd58 <DmLlAddrType+0x10>
    fd50:	2801      	cmp	r0, #1
    fd52:	bf08      	it	eq
    fd54:	2003      	moveq	r0, #3
    fd56:	4770      	bx	lr
    fd58:	2002      	movs	r0, #2
    fd5a:	4770      	bx	lr
    fd5c:	10003c84 	.word	0x10003c84

0000fd60 <DmHostAddrType>:
    fd60:	4b05      	ldr	r3, [pc, #20]	; (fd78 <DmHostAddrType+0x18>)
    fd62:	7d1b      	ldrb	r3, [r3, #20]
    fd64:	b133      	cbz	r3, fd74 <DmHostAddrType+0x14>
    fd66:	2802      	cmp	r0, #2
    fd68:	d003      	beq.n	fd72 <DmHostAddrType+0x12>
    fd6a:	2803      	cmp	r0, #3
    fd6c:	bf08      	it	eq
    fd6e:	2001      	moveq	r0, #1
    fd70:	4770      	bx	lr
    fd72:	2000      	movs	r0, #0
    fd74:	4770      	bx	lr
    fd76:	bf00      	nop
    fd78:	10003c84 	.word	0x10003c84

0000fd7c <DmSizeOfEvt>:
    fd7c:	7883      	ldrb	r3, [r0, #2]
    fd7e:	3b20      	subs	r3, #32
    fd80:	b2da      	uxtb	r2, r3
    fd82:	2a35      	cmp	r2, #53	; 0x35
    fd84:	bf9d      	ittte	ls
    fd86:	4a03      	ldrls	r2, [pc, #12]	; (fd94 <DmSizeOfEvt+0x18>)
    fd88:	eb02 0343 	addls.w	r3, r2, r3, lsl #1
    fd8c:	f8b3 0048 	ldrhls.w	r0, [r3, #72]	; 0x48
    fd90:	2004      	movhi	r0, #4
    fd92:	4770      	bx	lr
    fd94:	000247d0 	.word	0x000247d0

0000fd98 <DmScanPhyToIdx>:
    fd98:	2000      	movs	r0, #0
    fd9a:	4770      	bx	lr

0000fd9c <dmInitPhyToIdx>:
    fd9c:	2801      	cmp	r0, #1
    fd9e:	d00d      	beq.n	fdbc <dmInitPhyToIdx+0x20>
    fda0:	2802      	cmp	r0, #2
    fda2:	d104      	bne.n	fdae <dmInitPhyToIdx+0x12>
    fda4:	f111 30ff 	adds.w	r0, r1, #4294967295
    fda8:	bf18      	it	ne
    fdaa:	2001      	movne	r0, #1
    fdac:	4770      	bx	lr
    fdae:	2901      	cmp	r1, #1
    fdb0:	d004      	beq.n	fdbc <dmInitPhyToIdx+0x20>
    fdb2:	2902      	cmp	r1, #2
    fdb4:	bf0c      	ite	eq
    fdb6:	2001      	moveq	r0, #1
    fdb8:	2002      	movne	r0, #2
    fdba:	4770      	bx	lr
    fdbc:	2000      	movs	r0, #0
    fdbe:	4770      	bx	lr

0000fdc0 <DmInitPhyToIdx>:
    fdc0:	2000      	movs	r0, #0
    fdc2:	4770      	bx	lr

0000fdc4 <dmPrivMsgHandler>:
    fdc4:	7883      	ldrb	r3, [r0, #2]
    fdc6:	4a03      	ldr	r2, [pc, #12]	; (fdd4 <dmPrivMsgHandler+0x10>)
    fdc8:	f003 030f 	and.w	r3, r3, #15
    fdcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fdd0:	4718      	bx	r3
    fdd2:	bf00      	nop
    fdd4:	00024884 	.word	0x00024884

0000fdd8 <dmPrivReset>:
    fdd8:	4a02      	ldr	r2, [pc, #8]	; (fde4 <dmPrivReset+0xc>)
    fdda:	2300      	movs	r3, #0
    fddc:	70d3      	strb	r3, [r2, #3]
    fdde:	4a02      	ldr	r2, [pc, #8]	; (fde8 <dmPrivReset+0x10>)
    fde0:	7513      	strb	r3, [r2, #20]
    fde2:	4770      	bx	lr
    fde4:	10003c9c 	.word	0x10003c9c
    fde8:	10003c84 	.word	0x10003c84

0000fdec <dmPrivActAesCmpl>:
    fdec:	b510      	push	{r4, lr}
    fdee:	6841      	ldr	r1, [r0, #4]
    fdf0:	4604      	mov	r4, r0
    fdf2:	2203      	movs	r2, #3
    fdf4:	4809      	ldr	r0, [pc, #36]	; (fe1c <dmPrivActAesCmpl+0x30>)
    fdf6:	f010 fa63 	bl	202c0 <memcmp>
    fdfa:	b958      	cbnz	r0, fe14 <dmPrivActAesCmpl+0x28>
    fdfc:	70e0      	strb	r0, [r4, #3]
    fdfe:	4b07      	ldr	r3, [pc, #28]	; (fe1c <dmPrivActAesCmpl+0x30>)
    fe00:	2200      	movs	r2, #0
    fe02:	70da      	strb	r2, [r3, #3]
    fe04:	2337      	movs	r3, #55	; 0x37
    fe06:	70a3      	strb	r3, [r4, #2]
    fe08:	4b05      	ldr	r3, [pc, #20]	; (fe20 <dmPrivActAesCmpl+0x34>)
    fe0a:	4620      	mov	r0, r4
    fe0c:	689b      	ldr	r3, [r3, #8]
    fe0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fe12:	4718      	bx	r3
    fe14:	2305      	movs	r3, #5
    fe16:	70e3      	strb	r3, [r4, #3]
    fe18:	e7f1      	b.n	fdfe <dmPrivActAesCmpl+0x12>
    fe1a:	bf00      	nop
    fe1c:	10003c9c 	.word	0x10003c9c
    fe20:	10003c84 	.word	0x10003c84

0000fe24 <dmPrivActAddDevToResList>:
    fe24:	b510      	push	{r4, lr}
    fe26:	f100 031b 	add.w	r3, r0, #27
    fe2a:	4604      	mov	r4, r0
    fe2c:	f100 020b 	add.w	r2, r0, #11
    fe30:	1d41      	adds	r1, r0, #5
    fe32:	7900      	ldrb	r0, [r0, #4]
    fe34:	f006 f8f2 	bl	1601c <HciLeAddDeviceToResolvingListCmd>
    fe38:	4b03      	ldr	r3, [pc, #12]	; (fe48 <dmPrivActAddDevToResList+0x24>)
    fe3a:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
    fe3e:	721a      	strb	r2, [r3, #8]
    fe40:	8822      	ldrh	r2, [r4, #0]
    fe42:	809a      	strh	r2, [r3, #4]
    fe44:	bd10      	pop	{r4, pc}
    fe46:	bf00      	nop
    fe48:	10003c9c 	.word	0x10003c9c

0000fe4c <dmPrivActRemDevFromResList>:
    fe4c:	b510      	push	{r4, lr}
    fe4e:	1d41      	adds	r1, r0, #5
    fe50:	4604      	mov	r4, r0
    fe52:	7900      	ldrb	r0, [r0, #4]
    fe54:	f006 f916 	bl	16084 <HciLeRemoveDeviceFromResolvingList>
    fe58:	4b01      	ldr	r3, [pc, #4]	; (fe60 <dmPrivActRemDevFromResList+0x14>)
    fe5a:	8822      	ldrh	r2, [r4, #0]
    fe5c:	80da      	strh	r2, [r3, #6]
    fe5e:	bd10      	pop	{r4, pc}
    fe60:	10003c9c 	.word	0x10003c9c

0000fe64 <dmPrivActClearResList>:
    fe64:	f006 b932 	b.w	160cc <HciLeClearResolvingList>

0000fe68 <dmPrivActSetPrivacyMode>:
    fe68:	7ac2      	ldrb	r2, [r0, #11]
    fe6a:	1d41      	adds	r1, r0, #5
    fe6c:	7900      	ldrb	r0, [r0, #4]
    fe6e:	f006 b9db 	b.w	16228 <HciLeSetPrivacyModeCmd>

0000fe72 <dmPrivActResolveAddr>:
    fe72:	b570      	push	{r4, r5, r6, lr}
    fe74:	4d15      	ldr	r5, [pc, #84]	; (fecc <dmPrivActResolveAddr+0x5a>)
    fe76:	4e16      	ldr	r6, [pc, #88]	; (fed0 <dmPrivActResolveAddr+0x5e>)
    fe78:	78e9      	ldrb	r1, [r5, #3]
    fe7a:	b086      	sub	sp, #24
    fe7c:	4604      	mov	r4, r0
    fe7e:	b9f9      	cbnz	r1, fec0 <dmPrivActResolveAddr+0x4e>
    fe80:	4603      	mov	r3, r0
    fe82:	f833 2f14 	ldrh.w	r2, [r3, #20]!
    fe86:	802a      	strh	r2, [r5, #0]
    fe88:	789b      	ldrb	r3, [r3, #2]
    fe8a:	70ab      	strb	r3, [r5, #2]
    fe8c:	4603      	mov	r3, r0
    fe8e:	f10d 000b 	add.w	r0, sp, #11
    fe92:	f833 2f17 	ldrh.w	r2, [r3, #23]!
    fe96:	f8ad 2008 	strh.w	r2, [sp, #8]
    fe9a:	789b      	ldrb	r3, [r3, #2]
    fe9c:	f88d 300a 	strb.w	r3, [sp, #10]
    fea0:	220d      	movs	r2, #13
    fea2:	f010 faa3 	bl	203ec <memset>
    fea6:	2301      	movs	r3, #1
    fea8:	4620      	mov	r0, r4
    feaa:	2161      	movs	r1, #97	; 0x61
    feac:	70eb      	strb	r3, [r5, #3]
    feae:	f830 3b04 	ldrh.w	r3, [r0], #4
    feb2:	7b32      	ldrb	r2, [r6, #12]
    feb4:	9100      	str	r1, [sp, #0]
    feb6:	a902      	add	r1, sp, #8
    feb8:	f003 f8c8 	bl	1304c <SecAes>
    febc:	b006      	add	sp, #24
    febe:	bd70      	pop	{r4, r5, r6, pc}
    fec0:	f240 7337 	movw	r3, #1847	; 0x737
    fec4:	8043      	strh	r3, [r0, #2]
    fec6:	68b3      	ldr	r3, [r6, #8]
    fec8:	4798      	blx	r3
    feca:	e7f7      	b.n	febc <dmPrivActResolveAddr+0x4a>
    fecc:	10003c9c 	.word	0x10003c9c
    fed0:	10003c84 	.word	0x10003c84

0000fed4 <dmPrivActSetAddrResEnable>:
    fed4:	b510      	push	{r4, lr}
    fed6:	7904      	ldrb	r4, [r0, #4]
    fed8:	4620      	mov	r0, r4
    feda:	f006 f963 	bl	161a4 <HciLeSetAddrResolutionEnable>
    fede:	4b01      	ldr	r3, [pc, #4]	; (fee4 <dmPrivActSetAddrResEnable+0x10>)
    fee0:	725c      	strb	r4, [r3, #9]
    fee2:	bd10      	pop	{r4, pc}
    fee4:	10003c9c 	.word	0x10003c9c

0000fee8 <dmPrivHciHandler>:
    fee8:	7883      	ldrb	r3, [r0, #2]
    feea:	3b15      	subs	r3, #21
    feec:	b570      	push	{r4, r5, r6, lr}
    feee:	4604      	mov	r4, r0
    fef0:	2b05      	cmp	r3, #5
    fef2:	d83f      	bhi.n	ff74 <dmPrivHciHandler+0x8c>
    fef4:	e8df f003 	tbb	[pc, r3]
    fef8:	2f201a03 	.word	0x2f201a03
    fefc:	3432      	.short	0x3432
    fefe:	4d1e      	ldr	r5, [pc, #120]	; (ff78 <dmPrivHciHandler+0x90>)
    ff00:	2339      	movs	r3, #57	; 0x39
    ff02:	7083      	strb	r3, [r0, #2]
    ff04:	88ab      	ldrh	r3, [r5, #4]
    ff06:	8003      	strh	r3, [r0, #0]
    ff08:	78c3      	ldrb	r3, [r0, #3]
    ff0a:	b94b      	cbnz	r3, ff20 <dmPrivHciHandler+0x38>
    ff0c:	7a2b      	ldrb	r3, [r5, #8]
    ff0e:	b13b      	cbz	r3, ff20 <dmPrivHciHandler+0x38>
    ff10:	4b1a      	ldr	r3, [pc, #104]	; (ff7c <dmPrivHciHandler+0x94>)
    ff12:	7d1b      	ldrb	r3, [r3, #20]
    ff14:	b923      	cbnz	r3, ff20 <dmPrivHciHandler+0x38>
    ff16:	2001      	movs	r0, #1
    ff18:	f006 f944 	bl	161a4 <HciLeSetAddrResolutionEnable>
    ff1c:	2301      	movs	r3, #1
    ff1e:	726b      	strb	r3, [r5, #9]
    ff20:	4b16      	ldr	r3, [pc, #88]	; (ff7c <dmPrivHciHandler+0x94>)
    ff22:	4620      	mov	r0, r4
    ff24:	689b      	ldr	r3, [r3, #8]
    ff26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ff2a:	4718      	bx	r3
    ff2c:	233a      	movs	r3, #58	; 0x3a
    ff2e:	7083      	strb	r3, [r0, #2]
    ff30:	4b11      	ldr	r3, [pc, #68]	; (ff78 <dmPrivHciHandler+0x90>)
    ff32:	88db      	ldrh	r3, [r3, #6]
    ff34:	8003      	strh	r3, [r0, #0]
    ff36:	e7f3      	b.n	ff20 <dmPrivHciHandler+0x38>
    ff38:	78c5      	ldrb	r5, [r0, #3]
    ff3a:	233b      	movs	r3, #59	; 0x3b
    ff3c:	7083      	strb	r3, [r0, #2]
    ff3e:	2d00      	cmp	r5, #0
    ff40:	d1ee      	bne.n	ff20 <dmPrivHciHandler+0x38>
    ff42:	4b0e      	ldr	r3, [pc, #56]	; (ff7c <dmPrivHciHandler+0x94>)
    ff44:	7d1b      	ldrb	r3, [r3, #20]
    ff46:	2b00      	cmp	r3, #0
    ff48:	d0ea      	beq.n	ff20 <dmPrivHciHandler+0x38>
    ff4a:	4628      	mov	r0, r5
    ff4c:	f006 f92a 	bl	161a4 <HciLeSetAddrResolutionEnable>
    ff50:	4b09      	ldr	r3, [pc, #36]	; (ff78 <dmPrivHciHandler+0x90>)
    ff52:	725d      	strb	r5, [r3, #9]
    ff54:	e7e4      	b.n	ff20 <dmPrivHciHandler+0x38>
    ff56:	233c      	movs	r3, #60	; 0x3c
    ff58:	70a3      	strb	r3, [r4, #2]
    ff5a:	e7e1      	b.n	ff20 <dmPrivHciHandler+0x38>
    ff5c:	233d      	movs	r3, #61	; 0x3d
    ff5e:	e7fb      	b.n	ff58 <dmPrivHciHandler+0x70>
    ff60:	233e      	movs	r3, #62	; 0x3e
    ff62:	7083      	strb	r3, [r0, #2]
    ff64:	78c3      	ldrb	r3, [r0, #3]
    ff66:	2b00      	cmp	r3, #0
    ff68:	d1da      	bne.n	ff20 <dmPrivHciHandler+0x38>
    ff6a:	4b03      	ldr	r3, [pc, #12]	; (ff78 <dmPrivHciHandler+0x90>)
    ff6c:	7a5a      	ldrb	r2, [r3, #9]
    ff6e:	4b03      	ldr	r3, [pc, #12]	; (ff7c <dmPrivHciHandler+0x94>)
    ff70:	751a      	strb	r2, [r3, #20]
    ff72:	e7d5      	b.n	ff20 <dmPrivHciHandler+0x38>
    ff74:	bd70      	pop	{r4, r5, r6, pc}
    ff76:	bf00      	nop
    ff78:	10003c9c 	.word	0x10003c9c
    ff7c:	10003c84 	.word	0x10003c84

0000ff80 <DmPrivInit>:
    ff80:	4b01      	ldr	r3, [pc, #4]	; (ff88 <DmPrivInit+0x8>)
    ff82:	4a02      	ldr	r2, [pc, #8]	; (ff8c <DmPrivInit+0xc>)
    ff84:	619a      	str	r2, [r3, #24]
    ff86:	4770      	bx	lr
    ff88:	10002b54 	.word	0x10002b54
    ff8c:	000248a0 	.word	0x000248a0

0000ff90 <DmPrivResolveAddr>:
    ff90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ff92:	4605      	mov	r5, r0
    ff94:	201a      	movs	r0, #26
    ff96:	460e      	mov	r6, r1
    ff98:	4617      	mov	r7, r2
    ff9a:	f009 f8cf 	bl	1913c <WsfMsgAlloc>
    ff9e:	4604      	mov	r4, r0
    ffa0:	b190      	cbz	r0, ffc8 <DmPrivResolveAddr+0x38>
    ffa2:	2360      	movs	r3, #96	; 0x60
    ffa4:	7083      	strb	r3, [r0, #2]
    ffa6:	4631      	mov	r1, r6
    ffa8:	f820 7b04 	strh.w	r7, [r0], #4
    ffac:	f002 ff9a 	bl	12ee4 <Calc128Cpy>
    ffb0:	4629      	mov	r1, r5
    ffb2:	f104 0014 	add.w	r0, r4, #20
    ffb6:	f002 ff49 	bl	12e4c <BdaCpy>
    ffba:	4b04      	ldr	r3, [pc, #16]	; (ffcc <DmPrivResolveAddr+0x3c>)
    ffbc:	4621      	mov	r1, r4
    ffbe:	7b18      	ldrb	r0, [r3, #12]
    ffc0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ffc4:	f009 b8de 	b.w	19184 <WsfMsgSend>
    ffc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ffca:	bf00      	nop
    ffcc:	10003c84 	.word	0x10003c84

0000ffd0 <DmPrivAddDevToResList>:
    ffd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ffd4:	4681      	mov	r9, r0
    ffd6:	202c      	movs	r0, #44	; 0x2c
    ffd8:	4688      	mov	r8, r1
    ffda:	4617      	mov	r7, r2
    ffdc:	461e      	mov	r6, r3
    ffde:	f89d 5020 	ldrb.w	r5, [sp, #32]
    ffe2:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
    ffe6:	f009 f8a9 	bl	1913c <WsfMsgAlloc>
    ffea:	4604      	mov	r4, r0
    ffec:	b1e0      	cbz	r0, 10028 <DmPrivAddDevToResList+0x58>
    ffee:	2362      	movs	r3, #98	; 0x62
    fff0:	7083      	strb	r3, [r0, #2]
    fff2:	f8a0 a000 	strh.w	sl, [r0]
    fff6:	f880 9004 	strb.w	r9, [r0, #4]
    fffa:	4641      	mov	r1, r8
    fffc:	3005      	adds	r0, #5
    fffe:	f002 ff25 	bl	12e4c <BdaCpy>
   10002:	4639      	mov	r1, r7
   10004:	f104 000b 	add.w	r0, r4, #11
   10008:	f002 ff6c 	bl	12ee4 <Calc128Cpy>
   1000c:	4631      	mov	r1, r6
   1000e:	f104 001b 	add.w	r0, r4, #27
   10012:	f002 ff67 	bl	12ee4 <Calc128Cpy>
   10016:	4b05      	ldr	r3, [pc, #20]	; (1002c <DmPrivAddDevToResList+0x5c>)
   10018:	f884 502b 	strb.w	r5, [r4, #43]	; 0x2b
   1001c:	4621      	mov	r1, r4
   1001e:	7b18      	ldrb	r0, [r3, #12]
   10020:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10024:	f009 b8ae 	b.w	19184 <WsfMsgSend>
   10028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1002c:	10003c84 	.word	0x10003c84

00010030 <DmPrivRemDevFromResList>:
   10030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10032:	4606      	mov	r6, r0
   10034:	200c      	movs	r0, #12
   10036:	460d      	mov	r5, r1
   10038:	4617      	mov	r7, r2
   1003a:	f009 f87f 	bl	1913c <WsfMsgAlloc>
   1003e:	4604      	mov	r4, r0
   10040:	b170      	cbz	r0, 10060 <DmPrivRemDevFromResList+0x30>
   10042:	2363      	movs	r3, #99	; 0x63
   10044:	7083      	strb	r3, [r0, #2]
   10046:	8007      	strh	r7, [r0, #0]
   10048:	7106      	strb	r6, [r0, #4]
   1004a:	4629      	mov	r1, r5
   1004c:	3005      	adds	r0, #5
   1004e:	f002 fefd 	bl	12e4c <BdaCpy>
   10052:	4b04      	ldr	r3, [pc, #16]	; (10064 <DmPrivRemDevFromResList+0x34>)
   10054:	4621      	mov	r1, r4
   10056:	7b18      	ldrb	r0, [r3, #12]
   10058:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1005c:	f009 b892 	b.w	19184 <WsfMsgSend>
   10060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10062:	bf00      	nop
   10064:	10003c84 	.word	0x10003c84

00010068 <DmPrivClearResList>:
   10068:	b508      	push	{r3, lr}
   1006a:	202c      	movs	r0, #44	; 0x2c
   1006c:	f009 f866 	bl	1913c <WsfMsgAlloc>
   10070:	4601      	mov	r1, r0
   10072:	b138      	cbz	r0, 10084 <DmPrivClearResList+0x1c>
   10074:	2364      	movs	r3, #100	; 0x64
   10076:	7083      	strb	r3, [r0, #2]
   10078:	4b03      	ldr	r3, [pc, #12]	; (10088 <DmPrivClearResList+0x20>)
   1007a:	7b18      	ldrb	r0, [r3, #12]
   1007c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   10080:	f009 b880 	b.w	19184 <WsfMsgSend>
   10084:	bd08      	pop	{r3, pc}
   10086:	bf00      	nop
   10088:	10003c84 	.word	0x10003c84

0001008c <DmPrivReadPeerResolvableAddr>:
   1008c:	f006 b842 	b.w	16114 <HciLeReadPeerResolvableAddr>

00010090 <DmPrivReadLocalResolvableAddr>:
   10090:	f006 b864 	b.w	1615c <HciLeReadLocalResolvableAddr>

00010094 <DmPrivSetAddrResEnable>:
   10094:	b510      	push	{r4, lr}
   10096:	4604      	mov	r4, r0
   10098:	202c      	movs	r0, #44	; 0x2c
   1009a:	f009 f84f 	bl	1913c <WsfMsgAlloc>
   1009e:	4601      	mov	r1, r0
   100a0:	b150      	cbz	r0, 100b8 <DmPrivSetAddrResEnable+0x24>
   100a2:	2365      	movs	r3, #101	; 0x65
   100a4:	7083      	strb	r3, [r0, #2]
   100a6:	2300      	movs	r3, #0
   100a8:	8003      	strh	r3, [r0, #0]
   100aa:	4b04      	ldr	r3, [pc, #16]	; (100bc <DmPrivSetAddrResEnable+0x28>)
   100ac:	7104      	strb	r4, [r0, #4]
   100ae:	7b18      	ldrb	r0, [r3, #12]
   100b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   100b4:	f009 b866 	b.w	19184 <WsfMsgSend>
   100b8:	bd10      	pop	{r4, pc}
   100ba:	bf00      	nop
   100bc:	10003c84 	.word	0x10003c84

000100c0 <DmPrivSetResolvablePrivateAddrTimeout>:
   100c0:	f006 b88c 	b.w	161dc <HciLeSetResolvablePrivateAddrTimeout>

000100c4 <DmPrivSetPrivacyMode>:
   100c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   100c6:	4607      	mov	r7, r0
   100c8:	200c      	movs	r0, #12
   100ca:	460e      	mov	r6, r1
   100cc:	4615      	mov	r5, r2
   100ce:	f009 f835 	bl	1913c <WsfMsgAlloc>
   100d2:	4604      	mov	r4, r0
   100d4:	b170      	cbz	r0, 100f4 <DmPrivSetPrivacyMode+0x30>
   100d6:	2366      	movs	r3, #102	; 0x66
   100d8:	7083      	strb	r3, [r0, #2]
   100da:	7107      	strb	r7, [r0, #4]
   100dc:	4631      	mov	r1, r6
   100de:	3005      	adds	r0, #5
   100e0:	f002 feb4 	bl	12e4c <BdaCpy>
   100e4:	4b04      	ldr	r3, [pc, #16]	; (100f8 <DmPrivSetPrivacyMode+0x34>)
   100e6:	72e5      	strb	r5, [r4, #11]
   100e8:	4621      	mov	r1, r4
   100ea:	7b18      	ldrb	r0, [r3, #12]
   100ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   100f0:	f009 b848 	b.w	19184 <WsfMsgSend>
   100f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   100f6:	bf00      	nop
   100f8:	10003c84 	.word	0x10003c84

000100fc <dmSecMsgHandler>:
   100fc:	b570      	push	{r4, r5, r6, lr}
   100fe:	4605      	mov	r5, r0
   10100:	7800      	ldrb	r0, [r0, #0]
   10102:	f7ff f9b7 	bl	f474 <dmConnCcbById>
   10106:	4604      	mov	r4, r0
   10108:	b120      	cbz	r0, 10114 <dmSecMsgHandler+0x18>
   1010a:	78ab      	ldrb	r3, [r5, #2]
   1010c:	2b50      	cmp	r3, #80	; 0x50
   1010e:	d002      	beq.n	10116 <dmSecMsgHandler+0x1a>
   10110:	2b51      	cmp	r3, #81	; 0x51
   10112:	d012      	beq.n	1013a <dmSecMsgHandler+0x3e>
   10114:	bd70      	pop	{r4, r5, r6, pc}
   10116:	2201      	movs	r2, #1
   10118:	2102      	movs	r1, #2
   1011a:	7c00      	ldrb	r0, [r0, #16]
   1011c:	f7ff fc2a 	bl	f974 <DmConnSetIdle>
   10120:	7fab      	ldrb	r3, [r5, #30]
   10122:	7623      	strb	r3, [r4, #24]
   10124:	2301      	movs	r3, #1
   10126:	74a3      	strb	r3, [r4, #18]
   10128:	8baa      	ldrh	r2, [r5, #28]
   1012a:	89a0      	ldrh	r0, [r4, #12]
   1012c:	1d2b      	adds	r3, r5, #4
   1012e:	f105 0114 	add.w	r1, r5, #20
   10132:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10136:	f005 be45 	b.w	15dc4 <HciLeStartEncryptionCmd>
   1013a:	7d2a      	ldrb	r2, [r5, #20]
   1013c:	b13a      	cbz	r2, 1014e <dmSecMsgHandler+0x52>
   1013e:	7d6b      	ldrb	r3, [r5, #21]
   10140:	7603      	strb	r3, [r0, #24]
   10142:	1d29      	adds	r1, r5, #4
   10144:	8980      	ldrh	r0, [r0, #12]
   10146:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1014a:	f005 bc4d 	b.w	159e8 <HciLeLtkReqReplCmd>
   1014e:	7c00      	ldrb	r0, [r0, #16]
   10150:	2102      	movs	r1, #2
   10152:	f7ff fc0f 	bl	f974 <DmConnSetIdle>
   10156:	89a0      	ldrh	r0, [r4, #12]
   10158:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1015c:	f005 bc1e 	b.w	1599c <HciLeLtkReqNegReplCmd>

00010160 <dmSecApiLtkMsg>:
   10160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10162:	4606      	mov	r6, r0
   10164:	2020      	movs	r0, #32
   10166:	460d      	mov	r5, r1
   10168:	4614      	mov	r4, r2
   1016a:	461f      	mov	r7, r3
   1016c:	f008 ffe6 	bl	1913c <WsfMsgAlloc>
   10170:	b1a8      	cbz	r0, 1019e <dmSecApiLtkMsg+0x3e>
   10172:	7087      	strb	r7, [r0, #2]
   10174:	8006      	strh	r6, [r0, #0]
   10176:	70c5      	strb	r5, [r0, #3]
   10178:	4622      	mov	r2, r4
   1017a:	1d03      	adds	r3, r0, #4
   1017c:	f104 0118 	add.w	r1, r4, #24
   10180:	f852 4b04 	ldr.w	r4, [r2], #4
   10184:	f843 4b04 	str.w	r4, [r3], #4
   10188:	428a      	cmp	r2, r1
   1018a:	d1f9      	bne.n	10180 <dmSecApiLtkMsg+0x20>
   1018c:	8812      	ldrh	r2, [r2, #0]
   1018e:	801a      	strh	r2, [r3, #0]
   10190:	4b03      	ldr	r3, [pc, #12]	; (101a0 <dmSecApiLtkMsg+0x40>)
   10192:	4601      	mov	r1, r0
   10194:	7b18      	ldrb	r0, [r3, #12]
   10196:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1019a:	f008 bff3 	b.w	19184 <WsfMsgSend>
   1019e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   101a0:	10003c84 	.word	0x10003c84

000101a4 <DmSmpCbackExec>:
   101a4:	7883      	ldrb	r3, [r0, #2]
   101a6:	2b2a      	cmp	r3, #42	; 0x2a
   101a8:	b510      	push	{r4, lr}
   101aa:	4604      	mov	r4, r0
   101ac:	d001      	beq.n	101b2 <DmSmpCbackExec+0xe>
   101ae:	2b2c      	cmp	r3, #44	; 0x2c
   101b0:	d105      	bne.n	101be <DmSmpCbackExec+0x1a>
   101b2:	4b06      	ldr	r3, [pc, #24]	; (101cc <DmSmpCbackExec+0x28>)
   101b4:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
   101b8:	b10b      	cbz	r3, 101be <DmSmpCbackExec+0x1a>
   101ba:	4620      	mov	r0, r4
   101bc:	4798      	blx	r3
   101be:	4b04      	ldr	r3, [pc, #16]	; (101d0 <DmSmpCbackExec+0x2c>)
   101c0:	4620      	mov	r0, r4
   101c2:	689b      	ldr	r3, [r3, #8]
   101c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   101c8:	4718      	bx	r3
   101ca:	bf00      	nop
   101cc:	10003af4 	.word	0x10003af4
   101d0:	10003c84 	.word	0x10003c84

000101d4 <dmSecHciHandler>:
   101d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   101d6:	4605      	mov	r5, r0
   101d8:	8800      	ldrh	r0, [r0, #0]
   101da:	f7ff f864 	bl	f2a6 <dmConnCcbByHandle>
   101de:	4604      	mov	r4, r0
   101e0:	b1c0      	cbz	r0, 10214 <dmSecHciHandler+0x40>
   101e2:	78ab      	ldrb	r3, [r5, #2]
   101e4:	2b10      	cmp	r3, #16
   101e6:	d127      	bne.n	10238 <dmSecHciHandler+0x64>
   101e8:	89eb      	ldrh	r3, [r5, #14]
   101ea:	b9ab      	cbnz	r3, 10218 <dmSecHciHandler+0x44>
   101ec:	2208      	movs	r2, #8
   101ee:	4926      	ldr	r1, [pc, #152]	; (10288 <dmSecHciHandler+0xb4>)
   101f0:	1da8      	adds	r0, r5, #6
   101f2:	f010 f865 	bl	202c0 <memcmp>
   101f6:	4606      	mov	r6, r0
   101f8:	b970      	cbnz	r0, 10218 <dmSecHciHandler+0x44>
   101fa:	4669      	mov	r1, sp
   101fc:	7c20      	ldrb	r0, [r4, #16]
   101fe:	f000 fda3 	bl	10d48 <SmpDmGetStk>
   10202:	4601      	mov	r1, r0
   10204:	b140      	cbz	r0, 10218 <dmSecHciHandler+0x44>
   10206:	f89d 3000 	ldrb.w	r3, [sp]
   1020a:	7623      	strb	r3, [r4, #24]
   1020c:	74a6      	strb	r6, [r4, #18]
   1020e:	8828      	ldrh	r0, [r5, #0]
   10210:	f005 fbea 	bl	159e8 <HciLeLtkReqReplCmd>
   10214:	b002      	add	sp, #8
   10216:	bd70      	pop	{r4, r5, r6, pc}
   10218:	7c20      	ldrb	r0, [r4, #16]
   1021a:	2201      	movs	r2, #1
   1021c:	2102      	movs	r1, #2
   1021e:	f7ff fba9 	bl	f974 <DmConnSetIdle>
   10222:	2301      	movs	r3, #1
   10224:	74a3      	strb	r3, [r4, #18]
   10226:	7c23      	ldrb	r3, [r4, #16]
   10228:	802b      	strh	r3, [r5, #0]
   1022a:	2330      	movs	r3, #48	; 0x30
   1022c:	70ab      	strb	r3, [r5, #2]
   1022e:	4b17      	ldr	r3, [pc, #92]	; (1028c <dmSecHciHandler+0xb8>)
   10230:	4628      	mov	r0, r5
   10232:	689b      	ldr	r3, [r3, #8]
   10234:	4798      	blx	r3
   10236:	e7ed      	b.n	10214 <dmSecHciHandler+0x40>
   10238:	3b0e      	subs	r3, #14
   1023a:	2b01      	cmp	r3, #1
   1023c:	d8ea      	bhi.n	10214 <dmSecHciHandler+0x40>
   1023e:	2200      	movs	r2, #0
   10240:	2102      	movs	r1, #2
   10242:	7c00      	ldrb	r0, [r0, #16]
   10244:	f7ff fb96 	bl	f974 <DmConnSetIdle>
   10248:	7c23      	ldrb	r3, [r4, #16]
   1024a:	f8ad 3000 	strh.w	r3, [sp]
   1024e:	78eb      	ldrb	r3, [r5, #3]
   10250:	f88d 3003 	strb.w	r3, [sp, #3]
   10254:	b9a3      	cbnz	r3, 10280 <dmSecHciHandler+0xac>
   10256:	232c      	movs	r3, #44	; 0x2c
   10258:	f88d 3002 	strb.w	r3, [sp, #2]
   1025c:	7e23      	ldrb	r3, [r4, #24]
   1025e:	75e3      	strb	r3, [r4, #23]
   10260:	7ca3      	ldrb	r3, [r4, #18]
   10262:	f88d 3004 	strb.w	r3, [sp, #4]
   10266:	4668      	mov	r0, sp
   10268:	f7ff ff9c 	bl	101a4 <DmSmpCbackExec>
   1026c:	7c23      	ldrb	r3, [r4, #16]
   1026e:	f8ad 3000 	strh.w	r3, [sp]
   10272:	4668      	mov	r0, sp
   10274:	78eb      	ldrb	r3, [r5, #3]
   10276:	f88d 3003 	strb.w	r3, [sp, #3]
   1027a:	f000 fddf 	bl	10e3c <SmpDmEncryptInd>
   1027e:	e7c9      	b.n	10214 <dmSecHciHandler+0x40>
   10280:	232d      	movs	r3, #45	; 0x2d
   10282:	f88d 3002 	strb.w	r3, [sp, #2]
   10286:	e7ee      	b.n	10266 <dmSecHciHandler+0x92>
   10288:	00025174 	.word	0x00025174
   1028c:	10003c84 	.word	0x10003c84

00010290 <DmSecCancelReq>:
   10290:	b538      	push	{r3, r4, r5, lr}
   10292:	4605      	mov	r5, r0
   10294:	2004      	movs	r0, #4
   10296:	460c      	mov	r4, r1
   10298:	f008 ff50 	bl	1913c <WsfMsgAlloc>
   1029c:	b138      	cbz	r0, 102ae <DmSecCancelReq+0x1e>
   1029e:	2203      	movs	r2, #3
   102a0:	7082      	strb	r2, [r0, #2]
   102a2:	70c4      	strb	r4, [r0, #3]
   102a4:	8005      	strh	r5, [r0, #0]
   102a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   102aa:	f000 bd44 	b.w	10d36 <SmpDmMsgSend>
   102ae:	bd38      	pop	{r3, r4, r5, pc}

000102b0 <DmSecAuthRsp>:
   102b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   102b2:	4607      	mov	r7, r0
   102b4:	2016      	movs	r0, #22
   102b6:	460e      	mov	r6, r1
   102b8:	4615      	mov	r5, r2
   102ba:	f008 ff3f 	bl	1913c <WsfMsgAlloc>
   102be:	4604      	mov	r4, r0
   102c0:	b170      	cbz	r0, 102e0 <DmSecAuthRsp+0x30>
   102c2:	2304      	movs	r3, #4
   102c4:	7083      	strb	r3, [r0, #2]
   102c6:	8007      	strh	r7, [r0, #0]
   102c8:	7506      	strb	r6, [r0, #20]
   102ca:	b125      	cbz	r5, 102d6 <DmSecAuthRsp+0x26>
   102cc:	4632      	mov	r2, r6
   102ce:	4629      	mov	r1, r5
   102d0:	4418      	add	r0, r3
   102d2:	f7fb ff15 	bl	c100 <memcpy>
   102d6:	4620      	mov	r0, r4
   102d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   102dc:	f000 bd2b 	b.w	10d36 <SmpDmMsgSend>
   102e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000102e2 <DmSecInit>:
   102e2:	4b04      	ldr	r3, [pc, #16]	; (102f4 <DmSecInit+0x12>)
   102e4:	4a04      	ldr	r2, [pc, #16]	; (102f8 <DmSecInit+0x16>)
   102e6:	615a      	str	r2, [r3, #20]
   102e8:	4b04      	ldr	r3, [pc, #16]	; (102fc <DmSecInit+0x1a>)
   102ea:	4a05      	ldr	r2, [pc, #20]	; (10300 <DmSecInit+0x1e>)
   102ec:	e9c3 2200 	strd	r2, r2, [r3]
   102f0:	4770      	bx	lr
   102f2:	bf00      	nop
   102f4:	10002b54 	.word	0x10002b54
   102f8:	000248ac 	.word	0x000248ac
   102fc:	10003ca8 	.word	0x10003ca8
   10300:	00025174 	.word	0x00025174

00010304 <DmSecSetLocalCsrk>:
   10304:	b510      	push	{r4, lr}
   10306:	4604      	mov	r4, r0
   10308:	f004 fabc 	bl	14884 <WsfTaskLock>
   1030c:	4b02      	ldr	r3, [pc, #8]	; (10318 <DmSecSetLocalCsrk+0x14>)
   1030e:	605c      	str	r4, [r3, #4]
   10310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10314:	f004 babc 	b.w	14890 <WsfTaskUnlock>
   10318:	10003ca8 	.word	0x10003ca8

0001031c <DmSecSetLocalIrk>:
   1031c:	b510      	push	{r4, lr}
   1031e:	4604      	mov	r4, r0
   10320:	f004 fab0 	bl	14884 <WsfTaskLock>
   10324:	4b02      	ldr	r3, [pc, #8]	; (10330 <DmSecSetLocalIrk+0x14>)
   10326:	601c      	str	r4, [r3, #0]
   10328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1032c:	f004 bab0 	b.w	14890 <WsfTaskUnlock>
   10330:	10003ca8 	.word	0x10003ca8

00010334 <DmSecGetLocalCsrk>:
   10334:	4b01      	ldr	r3, [pc, #4]	; (1033c <DmSecGetLocalCsrk+0x8>)
   10336:	6858      	ldr	r0, [r3, #4]
   10338:	4770      	bx	lr
   1033a:	bf00      	nop
   1033c:	10003ca8 	.word	0x10003ca8

00010340 <DmSecGetLocalIrk>:
   10340:	4b01      	ldr	r3, [pc, #4]	; (10348 <DmSecGetLocalIrk+0x8>)
   10342:	6818      	ldr	r0, [r3, #0]
   10344:	4770      	bx	lr
   10346:	bf00      	nop
   10348:	10003ca8 	.word	0x10003ca8

0001034c <dmSecLescMsgHandler>:
   1034c:	7883      	ldrb	r3, [r0, #2]
   1034e:	2b81      	cmp	r3, #129	; 0x81
   10350:	b570      	push	{r4, r5, r6, lr}
   10352:	4604      	mov	r4, r0
   10354:	d106      	bne.n	10364 <dmSecLescMsgHandler+0x18>
   10356:	2334      	movs	r3, #52	; 0x34
   10358:	7083      	strb	r3, [r0, #2]
   1035a:	4b0d      	ldr	r3, [pc, #52]	; (10390 <dmSecLescMsgHandler+0x44>)
   1035c:	689b      	ldr	r3, [r3, #8]
   1035e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10362:	4718      	bx	r3
   10364:	2b80      	cmp	r3, #128	; 0x80
   10366:	d112      	bne.n	1038e <dmSecLescMsgHandler+0x42>
   10368:	2333      	movs	r3, #51	; 0x33
   1036a:	4d0a      	ldr	r5, [pc, #40]	; (10394 <dmSecLescMsgHandler+0x48>)
   1036c:	7083      	strb	r3, [r0, #2]
   1036e:	6841      	ldr	r1, [r0, #4]
   10370:	3004      	adds	r0, #4
   10372:	f002 fdb7 	bl	12ee4 <Calc128Cpy>
   10376:	6829      	ldr	r1, [r5, #0]
   10378:	f104 0014 	add.w	r0, r4, #20
   1037c:	f002 fdb2 	bl	12ee4 <Calc128Cpy>
   10380:	6828      	ldr	r0, [r5, #0]
   10382:	f008 fe8b 	bl	1909c <WsfBufFree>
   10386:	4b02      	ldr	r3, [pc, #8]	; (10390 <dmSecLescMsgHandler+0x44>)
   10388:	4620      	mov	r0, r4
   1038a:	689b      	ldr	r3, [r3, #8]
   1038c:	e7e7      	b.n	1035e <dmSecLescMsgHandler+0x12>
   1038e:	bd70      	pop	{r4, r5, r6, pc}
   10390:	10003c84 	.word	0x10003c84
   10394:	10003cb0 	.word	0x10003cb0

00010398 <DmSecKeypressReq>:
   10398:	b538      	push	{r3, r4, r5, lr}
   1039a:	4604      	mov	r4, r0
   1039c:	2006      	movs	r0, #6
   1039e:	460d      	mov	r5, r1
   103a0:	f008 fecc 	bl	1913c <WsfMsgAlloc>
   103a4:	b138      	cbz	r0, 103b6 <DmSecKeypressReq+0x1e>
   103a6:	2216      	movs	r2, #22
   103a8:	7105      	strb	r5, [r0, #4]
   103aa:	7082      	strb	r2, [r0, #2]
   103ac:	8004      	strh	r4, [r0, #0]
   103ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   103b2:	f000 bcc0 	b.w	10d36 <SmpDmMsgSend>
   103b6:	bd38      	pop	{r3, r4, r5, pc}

000103b8 <DmSecSetOob>:
   103b8:	f000 bef9 	b.w	111ae <SmpScSetOobCfg>

000103bc <DmSecCalcOobReq>:
   103bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   103be:	4605      	mov	r5, r0
   103c0:	b08d      	sub	sp, #52	; 0x34
   103c2:	2010      	movs	r0, #16
   103c4:	460e      	mov	r6, r1
   103c6:	f008 fe29 	bl	1901c <WsfBufAlloc>
   103ca:	4c1a      	ldr	r4, [pc, #104]	; (10434 <DmSecCalcOobReq+0x78>)
   103cc:	4f1a      	ldr	r7, [pc, #104]	; (10438 <DmSecCalcOobReq+0x7c>)
   103ce:	6020      	str	r0, [r4, #0]
   103d0:	b308      	cbz	r0, 10416 <DmSecCalcOobReq+0x5a>
   103d2:	4629      	mov	r1, r5
   103d4:	f002 fd86 	bl	12ee4 <Calc128Cpy>
   103d8:	2041      	movs	r0, #65	; 0x41
   103da:	f008 fe1f 	bl	1901c <WsfBufAlloc>
   103de:	4605      	mov	r5, r0
   103e0:	b1b0      	cbz	r0, 10410 <DmSecCalcOobReq+0x54>
   103e2:	2220      	movs	r2, #32
   103e4:	4631      	mov	r1, r6
   103e6:	f000 fdff 	bl	10fe8 <SmpScCat>
   103ea:	2220      	movs	r2, #32
   103ec:	4631      	mov	r1, r6
   103ee:	f000 fdfb 	bl	10fe8 <SmpScCat>
   103f2:	2200      	movs	r2, #0
   103f4:	7002      	strb	r2, [r0, #0]
   103f6:	2180      	movs	r1, #128	; 0x80
   103f8:	7b3b      	ldrb	r3, [r7, #12]
   103fa:	6820      	ldr	r0, [r4, #0]
   103fc:	e9cd 2100 	strd	r2, r1, [sp]
   10400:	2241      	movs	r2, #65	; 0x41
   10402:	4629      	mov	r1, r5
   10404:	f002 fff0 	bl	133e8 <SecCmac>
   10408:	b988      	cbnz	r0, 1042e <DmSecCalcOobReq+0x72>
   1040a:	4628      	mov	r0, r5
   1040c:	f008 fe46 	bl	1909c <WsfBufFree>
   10410:	6820      	ldr	r0, [r4, #0]
   10412:	f008 fe43 	bl	1909c <WsfBufFree>
   10416:	2224      	movs	r2, #36	; 0x24
   10418:	2100      	movs	r1, #0
   1041a:	a803      	add	r0, sp, #12
   1041c:	f00f ffe6 	bl	203ec <memset>
   10420:	f240 7333 	movw	r3, #1843	; 0x733
   10424:	f8ad 300e 	strh.w	r3, [sp, #14]
   10428:	a803      	add	r0, sp, #12
   1042a:	68bb      	ldr	r3, [r7, #8]
   1042c:	4798      	blx	r3
   1042e:	b00d      	add	sp, #52	; 0x34
   10430:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10432:	bf00      	nop
   10434:	10003cb0 	.word	0x10003cb0
   10438:	10003c84 	.word	0x10003c84

0001043c <DmSecGenerateEccKeyReq>:
   1043c:	4b02      	ldr	r3, [pc, #8]	; (10448 <DmSecGenerateEccKeyReq+0xc>)
   1043e:	2281      	movs	r2, #129	; 0x81
   10440:	2100      	movs	r1, #0
   10442:	7b18      	ldrb	r0, [r3, #12]
   10444:	f003 b882 	b.w	1354c <SecEccGenKey>
   10448:	10003c84 	.word	0x10003c84

0001044c <DmSecSetDebugEccKey>:
   1044c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1044e:	4b24      	ldr	r3, [pc, #144]	; (104e0 <DmSecSetDebugEccKey+0x94>)
   10450:	b099      	sub	sp, #100	; 0x64
   10452:	466a      	mov	r2, sp
   10454:	f103 0620 	add.w	r6, r3, #32
   10458:	4615      	mov	r5, r2
   1045a:	6818      	ldr	r0, [r3, #0]
   1045c:	6859      	ldr	r1, [r3, #4]
   1045e:	4614      	mov	r4, r2
   10460:	c403      	stmia	r4!, {r0, r1}
   10462:	3308      	adds	r3, #8
   10464:	42b3      	cmp	r3, r6
   10466:	4622      	mov	r2, r4
   10468:	d1f7      	bne.n	1045a <DmSecSetDebugEccKey+0xe>
   1046a:	4b1e      	ldr	r3, [pc, #120]	; (104e4 <DmSecSetDebugEccKey+0x98>)
   1046c:	ac08      	add	r4, sp, #32
   1046e:	f103 0720 	add.w	r7, r3, #32
   10472:	4622      	mov	r2, r4
   10474:	6818      	ldr	r0, [r3, #0]
   10476:	6859      	ldr	r1, [r3, #4]
   10478:	4626      	mov	r6, r4
   1047a:	c603      	stmia	r6!, {r0, r1}
   1047c:	3308      	adds	r3, #8
   1047e:	42bb      	cmp	r3, r7
   10480:	4634      	mov	r4, r6
   10482:	d1f7      	bne.n	10474 <DmSecSetDebugEccKey+0x28>
   10484:	4c18      	ldr	r4, [pc, #96]	; (104e8 <DmSecSetDebugEccKey+0x9c>)
   10486:	ae10      	add	r6, sp, #64	; 0x40
   10488:	f104 0c20 	add.w	ip, r4, #32
   1048c:	4633      	mov	r3, r6
   1048e:	6820      	ldr	r0, [r4, #0]
   10490:	6861      	ldr	r1, [r4, #4]
   10492:	4637      	mov	r7, r6
   10494:	c703      	stmia	r7!, {r0, r1}
   10496:	3408      	adds	r4, #8
   10498:	4564      	cmp	r4, ip
   1049a:	463e      	mov	r6, r7
   1049c:	d1f7      	bne.n	1048e <DmSecSetDebugEccKey+0x42>
   1049e:	4e13      	ldr	r6, [pc, #76]	; (104ec <DmSecSetDebugEccKey+0xa0>)
   104a0:	462c      	mov	r4, r5
   104a2:	cc03      	ldmia	r4!, {r0, r1}
   104a4:	4294      	cmp	r4, r2
   104a6:	6030      	str	r0, [r6, #0]
   104a8:	6071      	str	r1, [r6, #4]
   104aa:	4625      	mov	r5, r4
   104ac:	f106 0608 	add.w	r6, r6, #8
   104b0:	d1f6      	bne.n	104a0 <DmSecSetDebugEccKey+0x54>
   104b2:	4d0f      	ldr	r5, [pc, #60]	; (104f0 <DmSecSetDebugEccKey+0xa4>)
   104b4:	4614      	mov	r4, r2
   104b6:	cc03      	ldmia	r4!, {r0, r1}
   104b8:	429c      	cmp	r4, r3
   104ba:	6028      	str	r0, [r5, #0]
   104bc:	6069      	str	r1, [r5, #4]
   104be:	4622      	mov	r2, r4
   104c0:	f105 0508 	add.w	r5, r5, #8
   104c4:	d1f6      	bne.n	104b4 <DmSecSetDebugEccKey+0x68>
   104c6:	4c0b      	ldr	r4, [pc, #44]	; (104f4 <DmSecSetDebugEccKey+0xa8>)
   104c8:	ad18      	add	r5, sp, #96	; 0x60
   104ca:	461a      	mov	r2, r3
   104cc:	ca03      	ldmia	r2!, {r0, r1}
   104ce:	42aa      	cmp	r2, r5
   104d0:	6020      	str	r0, [r4, #0]
   104d2:	6061      	str	r1, [r4, #4]
   104d4:	4613      	mov	r3, r2
   104d6:	f104 0408 	add.w	r4, r4, #8
   104da:	d1f6      	bne.n	104ca <DmSecSetDebugEccKey+0x7e>
   104dc:	b019      	add	sp, #100	; 0x64
   104de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   104e0:	000248b8 	.word	0x000248b8
   104e4:	000248d8 	.word	0x000248d8
   104e8:	000248f8 	.word	0x000248f8
   104ec:	10003cf4 	.word	0x10003cf4
   104f0:	10003cb4 	.word	0x10003cb4
   104f4:	10003cd4 	.word	0x10003cd4

000104f8 <DmSecSetEccKey>:
   104f8:	b508      	push	{r3, lr}
   104fa:	4601      	mov	r1, r0
   104fc:	2260      	movs	r2, #96	; 0x60
   104fe:	4802      	ldr	r0, [pc, #8]	; (10508 <DmSecSetEccKey+0x10>)
   10500:	f7fb fdfe 	bl	c100 <memcpy>
   10504:	bd08      	pop	{r3, pc}
   10506:	bf00      	nop
   10508:	10003cb4 	.word	0x10003cb4

0001050c <DmSecGetEccKey>:
   1050c:	4800      	ldr	r0, [pc, #0]	; (10510 <DmSecGetEccKey+0x4>)
   1050e:	4770      	bx	lr
   10510:	10003cb4 	.word	0x10003cb4

00010514 <DmSecCompareRsp>:
   10514:	b538      	push	{r3, r4, r5, lr}
   10516:	4605      	mov	r5, r0
   10518:	2016      	movs	r0, #22
   1051a:	460c      	mov	r4, r1
   1051c:	f008 fe0e 	bl	1913c <WsfMsgAlloc>
   10520:	b158      	cbz	r0, 1053a <DmSecCompareRsp+0x26>
   10522:	8005      	strh	r5, [r0, #0]
   10524:	b12c      	cbz	r4, 10532 <DmSecCompareRsp+0x1e>
   10526:	2315      	movs	r3, #21
   10528:	7083      	strb	r3, [r0, #2]
   1052a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1052e:	f000 bc02 	b.w	10d36 <SmpDmMsgSend>
   10532:	f240 4303 	movw	r3, #1027	; 0x403
   10536:	8043      	strh	r3, [r0, #2]
   10538:	e7f7      	b.n	1052a <DmSecCompareRsp+0x16>
   1053a:	bd38      	pop	{r3, r4, r5, pc}

0001053c <DmSecGetCompareValue>:
   1053c:	7b43      	ldrb	r3, [r0, #13]
   1053e:	7b82      	ldrb	r2, [r0, #14]
   10540:	041b      	lsls	r3, r3, #16
   10542:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   10546:	7bc2      	ldrb	r2, [r0, #15]
   10548:	7b00      	ldrb	r0, [r0, #12]
   1054a:	4413      	add	r3, r2
   1054c:	4a03      	ldr	r2, [pc, #12]	; (1055c <DmSecGetCompareValue+0x20>)
   1054e:	eb03 6300 	add.w	r3, r3, r0, lsl #24
   10552:	fbb3 f0f2 	udiv	r0, r3, r2
   10556:	fb02 3010 	mls	r0, r2, r0, r3
   1055a:	4770      	bx	lr
   1055c:	000f4240 	.word	0x000f4240

00010560 <DmSecLescInit>:
   10560:	4b01      	ldr	r3, [pc, #4]	; (10568 <DmSecLescInit+0x8>)
   10562:	4a02      	ldr	r2, [pc, #8]	; (1056c <DmSecLescInit+0xc>)
   10564:	621a      	str	r2, [r3, #32]
   10566:	4770      	bx	lr
   10568:	10002b54 	.word	0x10002b54
   1056c:	00024918 	.word	0x00024918

00010570 <DmSecPairRsp>:
   10570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10574:	4681      	mov	r9, r0
   10576:	2008      	movs	r0, #8
   10578:	4688      	mov	r8, r1
   1057a:	4617      	mov	r7, r2
   1057c:	461e      	mov	r6, r3
   1057e:	f89d 5020 	ldrb.w	r5, [sp, #32]
   10582:	f008 fddb 	bl	1913c <WsfMsgAlloc>
   10586:	b180      	cbz	r0, 105aa <DmSecPairRsp+0x3a>
   10588:	2302      	movs	r3, #2
   1058a:	f006 0607 	and.w	r6, r6, #7
   1058e:	f005 0507 	and.w	r5, r5, #7
   10592:	7083      	strb	r3, [r0, #2]
   10594:	f880 8004 	strb.w	r8, [r0, #4]
   10598:	7147      	strb	r7, [r0, #5]
   1059a:	7186      	strb	r6, [r0, #6]
   1059c:	71c5      	strb	r5, [r0, #7]
   1059e:	f8a0 9000 	strh.w	r9, [r0]
   105a2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   105a6:	f000 bbc6 	b.w	10d36 <SmpDmMsgSend>
   105aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000105ae <DmSecSlaveReq>:
   105ae:	b538      	push	{r3, r4, r5, lr}
   105b0:	4605      	mov	r5, r0
   105b2:	2006      	movs	r0, #6
   105b4:	460c      	mov	r4, r1
   105b6:	f008 fdc1 	bl	1913c <WsfMsgAlloc>
   105ba:	b138      	cbz	r0, 105cc <DmSecSlaveReq+0x1e>
   105bc:	2205      	movs	r2, #5
   105be:	7082      	strb	r2, [r0, #2]
   105c0:	7104      	strb	r4, [r0, #4]
   105c2:	8005      	strh	r5, [r0, #0]
   105c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   105c8:	f000 bbb5 	b.w	10d36 <SmpDmMsgSend>
   105cc:	bd38      	pop	{r3, r4, r5, pc}

000105ce <DmSecLtkRsp>:
   105ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   105d2:	4680      	mov	r8, r0
   105d4:	2016      	movs	r0, #22
   105d6:	460d      	mov	r5, r1
   105d8:	4617      	mov	r7, r2
   105da:	461e      	mov	r6, r3
   105dc:	f008 fdae 	bl	1913c <WsfMsgAlloc>
   105e0:	4604      	mov	r4, r0
   105e2:	b188      	cbz	r0, 10608 <DmSecLtkRsp+0x3a>
   105e4:	2351      	movs	r3, #81	; 0x51
   105e6:	7083      	strb	r3, [r0, #2]
   105e8:	f8a0 8000 	strh.w	r8, [r0]
   105ec:	7505      	strb	r5, [r0, #20]
   105ee:	7547      	strb	r7, [r0, #21]
   105f0:	b11d      	cbz	r5, 105fa <DmSecLtkRsp+0x2c>
   105f2:	4631      	mov	r1, r6
   105f4:	3004      	adds	r0, #4
   105f6:	f002 fc75 	bl	12ee4 <Calc128Cpy>
   105fa:	4b04      	ldr	r3, [pc, #16]	; (1060c <DmSecLtkRsp+0x3e>)
   105fc:	4621      	mov	r1, r4
   105fe:	7b18      	ldrb	r0, [r3, #12]
   10600:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   10604:	f008 bdbe 	b.w	19184 <WsfMsgSend>
   10608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1060c:	10003c84 	.word	0x10003c84

00010610 <l2cDefaultDataCback>:
   10610:	4770      	bx	lr

00010612 <l2cDefaultDataCidCback>:
   10612:	4770      	bx	lr

00010614 <l2cDefaultCtrlCback>:
   10614:	4770      	bx	lr

00010616 <l2cHciFlowCback>:
   10616:	b537      	push	{r0, r1, r2, r4, r5, lr}
   10618:	460d      	mov	r5, r1
   1061a:	f7ff f949 	bl	f8b0 <DmConnIdByHandle>
   1061e:	b280      	uxth	r0, r0
   10620:	f8ad 0004 	strh.w	r0, [sp, #4]
   10624:	b178      	cbz	r0, 10646 <l2cHciFlowCback+0x30>
   10626:	4c09      	ldr	r4, [pc, #36]	; (1064c <l2cHciFlowCback+0x36>)
   10628:	f88d 5006 	strb.w	r5, [sp, #6]
   1062c:	68e3      	ldr	r3, [r4, #12]
   1062e:	a801      	add	r0, sp, #4
   10630:	4798      	blx	r3
   10632:	6923      	ldr	r3, [r4, #16]
   10634:	f88d 5006 	strb.w	r5, [sp, #6]
   10638:	a801      	add	r0, sp, #4
   1063a:	4798      	blx	r3
   1063c:	f88d 5006 	strb.w	r5, [sp, #6]
   10640:	6963      	ldr	r3, [r4, #20]
   10642:	a801      	add	r0, sp, #4
   10644:	4798      	blx	r3
   10646:	b003      	add	sp, #12
   10648:	bd30      	pop	{r4, r5, pc}
   1064a:	bf00      	nop
   1064c:	10003d14 	.word	0x10003d14

00010650 <l2cHciAclCback>:
   10650:	b570      	push	{r4, r5, r6, lr}
   10652:	78c2      	ldrb	r2, [r0, #3]
   10654:	7883      	ldrb	r3, [r0, #2]
   10656:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   1065a:	b29b      	uxth	r3, r3
   1065c:	2b03      	cmp	r3, #3
   1065e:	bf83      	ittte	hi
   10660:	7942      	ldrbhi	r2, [r0, #5]
   10662:	7901      	ldrbhi	r1, [r0, #4]
   10664:	eb01 2102 	addhi.w	r1, r1, r2, lsl #8
   10668:	2100      	movls	r1, #0
   1066a:	bf8a      	itet	hi
   1066c:	b289      	uxthhi	r1, r1
   1066e:	1d02      	addls	r2, r0, #4
   10670:	1d82      	addhi	r2, r0, #6
   10672:	4604      	mov	r4, r0
   10674:	1d08      	adds	r0, r1, #4
   10676:	4283      	cmp	r3, r0
   10678:	d116      	bne.n	106a8 <l2cHciAclCback+0x58>
   1067a:	7863      	ldrb	r3, [r4, #1]
   1067c:	7820      	ldrb	r0, [r4, #0]
   1067e:	7815      	ldrb	r5, [r2, #0]
   10680:	eb00 2003 	add.w	r0, r0, r3, lsl #8
   10684:	7853      	ldrb	r3, [r2, #1]
   10686:	eb05 2503 	add.w	r5, r5, r3, lsl #8
   1068a:	b2ad      	uxth	r5, r5
   1068c:	2d05      	cmp	r5, #5
   1068e:	f3c0 000b 	ubfx	r0, r0, #0, #12
   10692:	4b0c      	ldr	r3, [pc, #48]	; (106c4 <l2cHciAclCback+0x74>)
   10694:	d005      	beq.n	106a2 <l2cHciAclCback+0x52>
   10696:	2d06      	cmp	r5, #6
   10698:	d00b      	beq.n	106b2 <l2cHciAclCback+0x62>
   1069a:	2d04      	cmp	r5, #4
   1069c:	d10b      	bne.n	106b6 <l2cHciAclCback+0x66>
   1069e:	681b      	ldr	r3, [r3, #0]
   106a0:	e000      	b.n	106a4 <l2cHciAclCback+0x54>
   106a2:	689b      	ldr	r3, [r3, #8]
   106a4:	4622      	mov	r2, r4
   106a6:	4798      	blx	r3
   106a8:	4620      	mov	r0, r4
   106aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   106ae:	f008 bd5d 	b.w	1916c <WsfMsgFree>
   106b2:	685b      	ldr	r3, [r3, #4]
   106b4:	e7f6      	b.n	106a4 <l2cHciAclCback+0x54>
   106b6:	6a1e      	ldr	r6, [r3, #32]
   106b8:	460a      	mov	r2, r1
   106ba:	4623      	mov	r3, r4
   106bc:	4629      	mov	r1, r5
   106be:	47b0      	blx	r6
   106c0:	e7f2      	b.n	106a8 <l2cHciAclCback+0x58>
   106c2:	bf00      	nop
   106c4:	10003d14 	.word	0x10003d14

000106c8 <l2cRxSignalingPkt>:
   106c8:	b570      	push	{r4, r5, r6, lr}
   106ca:	460d      	mov	r5, r1
   106cc:	4616      	mov	r6, r2
   106ce:	4604      	mov	r4, r0
   106d0:	f7ff f8ee 	bl	f8b0 <DmConnIdByHandle>
   106d4:	f7ff f978 	bl	f9c8 <DmConnRole>
   106d8:	b940      	cbnz	r0, 106ec <l2cRxSignalingPkt+0x24>
   106da:	4b07      	ldr	r3, [pc, #28]	; (106f8 <l2cRxSignalingPkt+0x30>)
   106dc:	699b      	ldr	r3, [r3, #24]
   106de:	b153      	cbz	r3, 106f6 <l2cRxSignalingPkt+0x2e>
   106e0:	4632      	mov	r2, r6
   106e2:	4629      	mov	r1, r5
   106e4:	4620      	mov	r0, r4
   106e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   106ea:	4718      	bx	r3
   106ec:	2801      	cmp	r0, #1
   106ee:	d102      	bne.n	106f6 <l2cRxSignalingPkt+0x2e>
   106f0:	4b01      	ldr	r3, [pc, #4]	; (106f8 <l2cRxSignalingPkt+0x30>)
   106f2:	69db      	ldr	r3, [r3, #28]
   106f4:	e7f3      	b.n	106de <l2cRxSignalingPkt+0x16>
   106f6:	bd70      	pop	{r4, r5, r6, pc}
   106f8:	10003d14 	.word	0x10003d14

000106fc <l2cMsgAlloc>:
   106fc:	2100      	movs	r1, #0
   106fe:	f008 bd07 	b.w	19110 <WsfMsgDataAlloc>

00010702 <L2cInit>:
   10702:	4b09      	ldr	r3, [pc, #36]	; (10728 <L2cInit+0x26>)
   10704:	4a09      	ldr	r2, [pc, #36]	; (1072c <L2cInit+0x2a>)
   10706:	490a      	ldr	r1, [pc, #40]	; (10730 <L2cInit+0x2e>)
   10708:	480a      	ldr	r0, [pc, #40]	; (10734 <L2cInit+0x32>)
   1070a:	e9c3 2200 	strd	r2, r2, [r3]
   1070e:	4a0a      	ldr	r2, [pc, #40]	; (10738 <L2cInit+0x36>)
   10710:	609a      	str	r2, [r3, #8]
   10712:	4a0a      	ldr	r2, [pc, #40]	; (1073c <L2cInit+0x3a>)
   10714:	615a      	str	r2, [r3, #20]
   10716:	e9c3 2203 	strd	r2, r2, [r3, #12]
   1071a:	4a09      	ldr	r2, [pc, #36]	; (10740 <L2cInit+0x3e>)
   1071c:	621a      	str	r2, [r3, #32]
   1071e:	2201      	movs	r2, #1
   10720:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   10724:	f002 bb5c 	b.w	12de0 <HciAclRegister>
   10728:	10003d14 	.word	0x10003d14
   1072c:	00010611 	.word	0x00010611
   10730:	00010617 	.word	0x00010617
   10734:	00010651 	.word	0x00010651
   10738:	000106c9 	.word	0x000106c9
   1073c:	00010615 	.word	0x00010615
   10740:	00010613 	.word	0x00010613

00010744 <L2cRegister>:
   10744:	4b03      	ldr	r3, [pc, #12]	; (10754 <L2cRegister+0x10>)
   10746:	2804      	cmp	r0, #4
   10748:	bf07      	ittee	eq
   1074a:	6019      	streq	r1, [r3, #0]
   1074c:	60da      	streq	r2, [r3, #12]
   1074e:	6059      	strne	r1, [r3, #4]
   10750:	611a      	strne	r2, [r3, #16]
   10752:	4770      	bx	lr
   10754:	10003d14 	.word	0x10003d14

00010758 <L2cDataReq>:
   10758:	b410      	push	{r4}
   1075a:	7019      	strb	r1, [r3, #0]
   1075c:	b2d4      	uxtb	r4, r2
   1075e:	0a09      	lsrs	r1, r1, #8
   10760:	7059      	strb	r1, [r3, #1]
   10762:	1d21      	adds	r1, r4, #4
   10764:	7099      	strb	r1, [r3, #2]
   10766:	1d11      	adds	r1, r2, #4
   10768:	1209      	asrs	r1, r1, #8
   1076a:	0a12      	lsrs	r2, r2, #8
   1076c:	7198      	strb	r0, [r3, #6]
   1076e:	0a00      	lsrs	r0, r0, #8
   10770:	711c      	strb	r4, [r3, #4]
   10772:	71d8      	strb	r0, [r3, #7]
   10774:	70d9      	strb	r1, [r3, #3]
   10776:	715a      	strb	r2, [r3, #5]
   10778:	4618      	mov	r0, r3
   1077a:	f85d 4b04 	ldr.w	r4, [sp], #4
   1077e:	f006 b943 	b.w	16a08 <HciSendAclData>

00010782 <l2cSendCmdReject>:
   10782:	b570      	push	{r4, r5, r6, lr}
   10784:	4605      	mov	r5, r0
   10786:	200e      	movs	r0, #14
   10788:	460e      	mov	r6, r1
   1078a:	4614      	mov	r4, r2
   1078c:	f7ff ffb6 	bl	106fc <l2cMsgAlloc>
   10790:	4603      	mov	r3, r0
   10792:	b180      	cbz	r0, 107b6 <l2cSendCmdReject+0x34>
   10794:	2201      	movs	r2, #1
   10796:	7202      	strb	r2, [r0, #8]
   10798:	2202      	movs	r2, #2
   1079a:	7282      	strb	r2, [r0, #10]
   1079c:	7304      	strb	r4, [r0, #12]
   1079e:	2200      	movs	r2, #0
   107a0:	0a24      	lsrs	r4, r4, #8
   107a2:	72c2      	strb	r2, [r0, #11]
   107a4:	7246      	strb	r6, [r0, #9]
   107a6:	7344      	strb	r4, [r0, #13]
   107a8:	4629      	mov	r1, r5
   107aa:	2206      	movs	r2, #6
   107ac:	2005      	movs	r0, #5
   107ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   107b2:	f7ff bfd1 	b.w	10758 <L2cDataReq>
   107b6:	bd70      	pop	{r4, r5, r6, pc}

000107b8 <l2cSlaveRxSignalingPkt>:
   107b8:	b538      	push	{r3, r4, r5, lr}
   107ba:	4605      	mov	r5, r0
   107bc:	4613      	mov	r3, r2
   107be:	7ad0      	ldrb	r0, [r2, #11]
   107c0:	7a92      	ldrb	r2, [r2, #10]
   107c2:	eb02 2200 	add.w	r2, r2, r0, lsl #8
   107c6:	b292      	uxth	r2, r2
   107c8:	1d10      	adds	r0, r2, #4
   107ca:	4281      	cmp	r1, r0
   107cc:	d116      	bne.n	107fc <l2cSlaveRxSignalingPkt+0x44>
   107ce:	7a19      	ldrb	r1, [r3, #8]
   107d0:	2913      	cmp	r1, #19
   107d2:	d10f      	bne.n	107f4 <l2cSlaveRxSignalingPkt+0x3c>
   107d4:	2a02      	cmp	r2, #2
   107d6:	d111      	bne.n	107fc <l2cSlaveRxSignalingPkt+0x44>
   107d8:	7b5c      	ldrb	r4, [r3, #13]
   107da:	7b19      	ldrb	r1, [r3, #12]
   107dc:	eb01 2104 	add.w	r1, r1, r4, lsl #8
   107e0:	b28c      	uxth	r4, r1
   107e2:	480a      	ldr	r0, [pc, #40]	; (1080c <l2cSlaveRxSignalingPkt+0x54>)
   107e4:	f008 fe80 	bl	194e8 <WsfTimerStop>
   107e8:	4621      	mov	r1, r4
   107ea:	4628      	mov	r0, r5
   107ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   107f0:	f7ff b942 	b.w	fa78 <DmL2cConnUpdateCnf>
   107f4:	2901      	cmp	r1, #1
   107f6:	d101      	bne.n	107fc <l2cSlaveRxSignalingPkt+0x44>
   107f8:	460c      	mov	r4, r1
   107fa:	e7f2      	b.n	107e2 <l2cSlaveRxSignalingPkt+0x2a>
   107fc:	7a59      	ldrb	r1, [r3, #9]
   107fe:	4628      	mov	r0, r5
   10800:	2200      	movs	r2, #0
   10802:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10806:	f7ff bfbc 	b.w	10782 <l2cSendCmdReject>
   1080a:	bf00      	nop
   1080c:	10003d3c 	.word	0x10003d3c

00010810 <L2cSlaveInit>:
   10810:	4b01      	ldr	r3, [pc, #4]	; (10818 <L2cSlaveInit+0x8>)
   10812:	4a02      	ldr	r2, [pc, #8]	; (1081c <L2cSlaveInit+0xc>)
   10814:	61da      	str	r2, [r3, #28]
   10816:	4770      	bx	lr
   10818:	10003d14 	.word	0x10003d14
   1081c:	000107b9 	.word	0x000107b9

00010820 <L2cDmConnUpdateReq>:
   10820:	b570      	push	{r4, r5, r6, lr}
   10822:	4e1e      	ldr	r6, [pc, #120]	; (1089c <L2cDmConnUpdateReq+0x7c>)
   10824:	4605      	mov	r5, r0
   10826:	460c      	mov	r4, r1
   10828:	4630      	mov	r0, r6
   1082a:	211e      	movs	r1, #30
   1082c:	f008 fe38 	bl	194a0 <WsfTimerStartSec>
   10830:	2014      	movs	r0, #20
   10832:	8175      	strh	r5, [r6, #10]
   10834:	f7ff ff62 	bl	106fc <l2cMsgAlloc>
   10838:	4603      	mov	r3, r0
   1083a:	b368      	cbz	r0, 10898 <L2cDmConnUpdateReq+0x78>
   1083c:	4918      	ldr	r1, [pc, #96]	; (108a0 <L2cDmConnUpdateReq+0x80>)
   1083e:	2212      	movs	r2, #18
   10840:	7202      	strb	r2, [r0, #8]
   10842:	f891 2024 	ldrb.w	r2, [r1, #36]	; 0x24
   10846:	7242      	strb	r2, [r0, #9]
   10848:	f891 2024 	ldrb.w	r2, [r1, #36]	; 0x24
   1084c:	2aff      	cmp	r2, #255	; 0xff
   1084e:	bf1a      	itte	ne
   10850:	3201      	addne	r2, #1
   10852:	b2d2      	uxtbne	r2, r2
   10854:	2201      	moveq	r2, #1
   10856:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
   1085a:	2208      	movs	r2, #8
   1085c:	7282      	strb	r2, [r0, #10]
   1085e:	2200      	movs	r2, #0
   10860:	72c2      	strb	r2, [r0, #11]
   10862:	8822      	ldrh	r2, [r4, #0]
   10864:	7302      	strb	r2, [r0, #12]
   10866:	8822      	ldrh	r2, [r4, #0]
   10868:	0a12      	lsrs	r2, r2, #8
   1086a:	7342      	strb	r2, [r0, #13]
   1086c:	8862      	ldrh	r2, [r4, #2]
   1086e:	7382      	strb	r2, [r0, #14]
   10870:	8862      	ldrh	r2, [r4, #2]
   10872:	0a12      	lsrs	r2, r2, #8
   10874:	73c2      	strb	r2, [r0, #15]
   10876:	88a2      	ldrh	r2, [r4, #4]
   10878:	7402      	strb	r2, [r0, #16]
   1087a:	88a2      	ldrh	r2, [r4, #4]
   1087c:	0a12      	lsrs	r2, r2, #8
   1087e:	7442      	strb	r2, [r0, #17]
   10880:	88e2      	ldrh	r2, [r4, #6]
   10882:	7482      	strb	r2, [r0, #18]
   10884:	88e2      	ldrh	r2, [r4, #6]
   10886:	0a12      	lsrs	r2, r2, #8
   10888:	74c2      	strb	r2, [r0, #19]
   1088a:	4629      	mov	r1, r5
   1088c:	220c      	movs	r2, #12
   1088e:	2005      	movs	r0, #5
   10890:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10894:	f7ff bf60 	b.w	10758 <L2cDataReq>
   10898:	bd70      	pop	{r4, r5, r6, pc}
   1089a:	bf00      	nop
   1089c:	10003d3c 	.word	0x10003d3c
   108a0:	10003d14 	.word	0x10003d14

000108a4 <L2cSlaveHandlerInit>:
   108a4:	4b02      	ldr	r3, [pc, #8]	; (108b0 <L2cSlaveHandlerInit+0xc>)
   108a6:	2201      	movs	r2, #1
   108a8:	731a      	strb	r2, [r3, #12]
   108aa:	7218      	strb	r0, [r3, #8]
   108ac:	7418      	strb	r0, [r3, #16]
   108ae:	4770      	bx	lr
   108b0:	10003d3c 	.word	0x10003d3c

000108b4 <L2cSlaveHandler>:
   108b4:	460b      	mov	r3, r1
   108b6:	b129      	cbz	r1, 108c4 <L2cSlaveHandler+0x10>
   108b8:	7889      	ldrb	r1, [r1, #2]
   108ba:	2901      	cmp	r1, #1
   108bc:	d102      	bne.n	108c4 <L2cSlaveHandler+0x10>
   108be:	8818      	ldrh	r0, [r3, #0]
   108c0:	f7ff b8da 	b.w	fa78 <DmL2cConnUpdateCnf>
   108c4:	4770      	bx	lr
   108c6:	bf00      	nop

000108c8 <smpDmConnCback>:
   108c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   108ca:	4605      	mov	r5, r0
   108cc:	8803      	ldrh	r3, [r0, #0]
   108ce:	78aa      	ldrb	r2, [r5, #2]
   108d0:	4e23      	ldr	r6, [pc, #140]	; (10960 <smpDmConnCback+0x98>)
   108d2:	b2d8      	uxtb	r0, r3
   108d4:	2a27      	cmp	r2, #39	; 0x27
   108d6:	f100 34ff 	add.w	r4, r0, #4294967295
   108da:	d120      	bne.n	1091e <smpDmConnCback+0x56>
   108dc:	f7ff f874 	bl	f9c8 <DmConnRole>
   108e0:	2338      	movs	r3, #56	; 0x38
   108e2:	fb03 6304 	mla	r3, r3, r4, r6
   108e6:	b9a8      	cbnz	r0, 10914 <smpDmConnCback+0x4c>
   108e8:	2201      	movs	r2, #1
   108ea:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
   108ee:	220b      	movs	r2, #11
   108f0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   108f4:	2338      	movs	r3, #56	; 0x38
   108f6:	fb03 6404 	mla	r4, r3, r4, r6
   108fa:	88eb      	ldrh	r3, [r5, #6]
   108fc:	8523      	strh	r3, [r4, #40]	; 0x28
   108fe:	882b      	ldrh	r3, [r5, #0]
   10900:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
   10904:	2300      	movs	r3, #0
   10906:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
   1090a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
   1090e:	8663      	strh	r3, [r4, #50]	; 0x32
   10910:	b002      	add	sp, #8
   10912:	bd70      	pop	{r4, r5, r6, pc}
   10914:	2200      	movs	r2, #0
   10916:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
   1091a:	2201      	movs	r2, #1
   1091c:	e7e8      	b.n	108f0 <smpDmConnCback+0x28>
   1091e:	2138      	movs	r1, #56	; 0x38
   10920:	fb01 6404 	mla	r4, r1, r4, r6
   10924:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
   10928:	2900      	cmp	r1, #0
   1092a:	d0f1      	beq.n	10910 <smpDmConnCback+0x48>
   1092c:	2a28      	cmp	r2, #40	; 0x28
   1092e:	d1ef      	bne.n	10910 <smpDmConnCback+0x48>
   10930:	f8ad 3004 	strh.w	r3, [sp, #4]
   10934:	230a      	movs	r3, #10
   10936:	f88d 3006 	strb.w	r3, [sp, #6]
   1093a:	7a2b      	ldrb	r3, [r5, #8]
   1093c:	4620      	mov	r0, r4
   1093e:	3320      	adds	r3, #32
   10940:	a901      	add	r1, sp, #4
   10942:	f88d 3007 	strb.w	r3, [sp, #7]
   10946:	f001 fb0a 	bl	11f5e <smpSmExecute>
   1094a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1094c:	2500      	movs	r5, #0
   1094e:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
   10952:	2800      	cmp	r0, #0
   10954:	d0dc      	beq.n	10910 <smpDmConnCback+0x48>
   10956:	f008 fc09 	bl	1916c <WsfMsgFree>
   1095a:	6265      	str	r5, [r4, #36]	; 0x24
   1095c:	e7d8      	b.n	10910 <smpDmConnCback+0x48>
   1095e:	bf00      	nop
   10960:	10003d50 	.word	0x10003d50

00010964 <smpCcbByHandle>:
   10964:	b508      	push	{r3, lr}
   10966:	f7fe ffa3 	bl	f8b0 <DmConnIdByHandle>
   1096a:	b120      	cbz	r0, 10976 <smpCcbByHandle+0x12>
   1096c:	4b02      	ldr	r3, [pc, #8]	; (10978 <smpCcbByHandle+0x14>)
   1096e:	3801      	subs	r0, #1
   10970:	2238      	movs	r2, #56	; 0x38
   10972:	fb02 3000 	mla	r0, r2, r0, r3
   10976:	bd08      	pop	{r3, pc}
   10978:	10003d50 	.word	0x10003d50

0001097c <smpL2cDataCback>:
   1097c:	b530      	push	{r4, r5, lr}
   1097e:	b087      	sub	sp, #28
   10980:	460d      	mov	r5, r1
   10982:	4614      	mov	r4, r2
   10984:	f7ff ffee 	bl	10964 <smpCcbByHandle>
   10988:	b1d8      	cbz	r0, 109c2 <smpL2cDataCback+0x46>
   1098a:	7a23      	ldrb	r3, [r4, #8]
   1098c:	1e5a      	subs	r2, r3, #1
   1098e:	2a0d      	cmp	r2, #13
   10990:	d817      	bhi.n	109c2 <smpL2cDataCback+0x46>
   10992:	4a10      	ldr	r2, [pc, #64]	; (109d4 <smpL2cDataCback+0x58>)
   10994:	5cd2      	ldrb	r2, [r2, r3]
   10996:	42aa      	cmp	r2, r5
   10998:	d113      	bne.n	109c2 <smpL2cDataCback+0x46>
   1099a:	f890 202f 	ldrb.w	r2, [r0, #47]	; 0x2f
   1099e:	429a      	cmp	r2, r3
   109a0:	d011      	beq.n	109c6 <smpL2cDataCback+0x4a>
   109a2:	2b05      	cmp	r3, #5
   109a4:	d10d      	bne.n	109c2 <smpL2cDataCback+0x46>
   109a6:	2307      	movs	r3, #7
   109a8:	f88d 3002 	strb.w	r3, [sp, #2]
   109ac:	7a63      	ldrb	r3, [r4, #9]
   109ae:	f88d 3003 	strb.w	r3, [sp, #3]
   109b2:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   109b6:	f8ad 3000 	strh.w	r3, [sp]
   109ba:	4669      	mov	r1, sp
   109bc:	9401      	str	r4, [sp, #4]
   109be:	f001 face 	bl	11f5e <smpSmExecute>
   109c2:	b007      	add	sp, #28
   109c4:	bd30      	pop	{r4, r5, pc}
   109c6:	2a05      	cmp	r2, #5
   109c8:	d0ed      	beq.n	109a6 <smpL2cDataCback+0x2a>
   109ca:	2306      	movs	r3, #6
   109cc:	f88d 3002 	strb.w	r3, [sp, #2]
   109d0:	e7ef      	b.n	109b2 <smpL2cDataCback+0x36>
   109d2:	bf00      	nop
   109d4:	00024924 	.word	0x00024924

000109d8 <smpCcbByConnId>:
   109d8:	4b02      	ldr	r3, [pc, #8]	; (109e4 <smpCcbByConnId+0xc>)
   109da:	2238      	movs	r2, #56	; 0x38
   109dc:	3801      	subs	r0, #1
   109de:	fb02 3000 	mla	r0, r2, r0, r3
   109e2:	4770      	bx	lr
   109e4:	10003d50 	.word	0x10003d50

000109e8 <smpCalcC1Part1>:
   109e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   109ea:	4604      	mov	r4, r0
   109ec:	b089      	sub	sp, #36	; 0x24
   109ee:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   109f2:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   109f6:	460f      	mov	r7, r1
   109f8:	4615      	mov	r5, r2
   109fa:	2b00      	cmp	r3, #0
   109fc:	d05a      	beq.n	10ab4 <smpCalcC1Part1+0xcc>
   109fe:	f7fe ffa5 	bl	f94c <DmConnLocalRpa>
   10a02:	f002 fa55 	bl	12eb0 <BdaIsZeros>
   10a06:	2800      	cmp	r0, #0
   10a08:	d052      	beq.n	10ab0 <smpCalcC1Part1+0xc8>
   10a0a:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10a0e:	f7fe ff7f 	bl	f910 <DmConnLocalAddrType>
   10a12:	4606      	mov	r6, r0
   10a14:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10a18:	f7fe ff8e 	bl	f938 <DmConnPeerRpa>
   10a1c:	f002 fa48 	bl	12eb0 <BdaIsZeros>
   10a20:	2800      	cmp	r0, #0
   10a22:	d05f      	beq.n	10ae4 <smpCalcC1Part1+0xfc>
   10a24:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10a28:	f7fe ff60 	bl	f8ec <DmConnPeerAddrType>
   10a2c:	462b      	mov	r3, r5
   10a2e:	f10d 0112 	add.w	r1, sp, #18
   10a32:	f813 2b02 	ldrb.w	r2, [r3], #2
   10a36:	4056      	eors	r6, r2
   10a38:	786a      	ldrb	r2, [r5, #1]
   10a3a:	f88d 6010 	strb.w	r6, [sp, #16]
   10a3e:	4050      	eors	r0, r2
   10a40:	f88d 0011 	strb.w	r0, [sp, #17]
   10a44:	f105 0609 	add.w	r6, r5, #9
   10a48:	f104 0010 	add.w	r0, r4, #16
   10a4c:	f813 cb01 	ldrb.w	ip, [r3], #1
   10a50:	f810 2b01 	ldrb.w	r2, [r0], #1
   10a54:	42b3      	cmp	r3, r6
   10a56:	ea82 020c 	eor.w	r2, r2, ip
   10a5a:	f801 2b01 	strb.w	r2, [r1], #1
   10a5e:	d1f5      	bne.n	10a4c <smpCalcC1Part1+0x64>
   10a60:	f104 0017 	add.w	r0, r4, #23
   10a64:	3510      	adds	r5, #16
   10a66:	f10d 0119 	add.w	r1, sp, #25
   10a6a:	f813 6b01 	ldrb.w	r6, [r3], #1
   10a6e:	f810 2b01 	ldrb.w	r2, [r0], #1
   10a72:	42ab      	cmp	r3, r5
   10a74:	ea82 0206 	eor.w	r2, r2, r6
   10a78:	f801 2b01 	strb.w	r2, [r1], #1
   10a7c:	d1f5      	bne.n	10a6a <smpCalcC1Part1+0x82>
   10a7e:	4a1a      	ldr	r2, [pc, #104]	; (10ae8 <smpCalcC1Part1+0x100>)
   10a80:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   10a84:	f892 21c8 	ldrb.w	r2, [r2, #456]	; 0x1c8
   10a88:	210b      	movs	r1, #11
   10a8a:	9100      	str	r1, [sp, #0]
   10a8c:	4638      	mov	r0, r7
   10a8e:	a904      	add	r1, sp, #16
   10a90:	f002 fadc 	bl	1304c <SecAes>
   10a94:	28ff      	cmp	r0, #255	; 0xff
   10a96:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
   10a9a:	d107      	bne.n	10aac <smpCalcC1Part1+0xc4>
   10a9c:	f640 0303 	movw	r3, #2051	; 0x803
   10aa0:	a903      	add	r1, sp, #12
   10aa2:	4620      	mov	r0, r4
   10aa4:	f8ad 300e 	strh.w	r3, [sp, #14]
   10aa8:	f001 fa59 	bl	11f5e <smpSmExecute>
   10aac:	b009      	add	sp, #36	; 0x24
   10aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10ab0:	2601      	movs	r6, #1
   10ab2:	e7af      	b.n	10a14 <smpCalcC1Part1+0x2c>
   10ab4:	f7fe ff40 	bl	f938 <DmConnPeerRpa>
   10ab8:	f002 f9fa 	bl	12eb0 <BdaIsZeros>
   10abc:	b180      	cbz	r0, 10ae0 <smpCalcC1Part1+0xf8>
   10abe:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10ac2:	f7fe ff13 	bl	f8ec <DmConnPeerAddrType>
   10ac6:	4606      	mov	r6, r0
   10ac8:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10acc:	f7fe ff3e 	bl	f94c <DmConnLocalRpa>
   10ad0:	f002 f9ee 	bl	12eb0 <BdaIsZeros>
   10ad4:	b130      	cbz	r0, 10ae4 <smpCalcC1Part1+0xfc>
   10ad6:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10ada:	f7fe ff19 	bl	f910 <DmConnLocalAddrType>
   10ade:	e7a5      	b.n	10a2c <smpCalcC1Part1+0x44>
   10ae0:	2601      	movs	r6, #1
   10ae2:	e7f1      	b.n	10ac8 <smpCalcC1Part1+0xe0>
   10ae4:	2001      	movs	r0, #1
   10ae6:	e7a1      	b.n	10a2c <smpCalcC1Part1+0x44>
   10ae8:	10003d50 	.word	0x10003d50

00010aec <smpCalcC1Part2>:
   10aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10af0:	4604      	mov	r4, r0
   10af2:	b088      	sub	sp, #32
   10af4:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   10af8:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   10afc:	4688      	mov	r8, r1
   10afe:	4615      	mov	r5, r2
   10b00:	2b00      	cmp	r3, #0
   10b02:	d058      	beq.n	10bb6 <smpCalcC1Part2+0xca>
   10b04:	f7fe ff22 	bl	f94c <DmConnLocalRpa>
   10b08:	4606      	mov	r6, r0
   10b0a:	f002 f9d1 	bl	12eb0 <BdaIsZeros>
   10b0e:	b120      	cbz	r0, 10b1a <smpCalcC1Part2+0x2e>
   10b10:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10b14:	f7fe ff06 	bl	f924 <DmConnLocalAddr>
   10b18:	4606      	mov	r6, r0
   10b1a:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10b1e:	f7fe ff0b 	bl	f938 <DmConnPeerRpa>
   10b22:	4607      	mov	r7, r0
   10b24:	f002 f9c4 	bl	12eb0 <BdaIsZeros>
   10b28:	b120      	cbz	r0, 10b34 <smpCalcC1Part2+0x48>
   10b2a:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10b2e:	f7fe fee7 	bl	f900 <DmConnPeerAddr>
   10b32:	4607      	mov	r7, r0
   10b34:	4628      	mov	r0, r5
   10b36:	2300      	movs	r3, #0
   10b38:	a904      	add	r1, sp, #16
   10b3a:	f817 2b01 	ldrb.w	r2, [r7], #1
   10b3e:	f810 cb01 	ldrb.w	ip, [r0], #1
   10b42:	ea82 020c 	eor.w	r2, r2, ip
   10b46:	545a      	strb	r2, [r3, r1]
   10b48:	3301      	adds	r3, #1
   10b4a:	2b06      	cmp	r3, #6
   10b4c:	d1f5      	bne.n	10b3a <smpCalcC1Part2+0x4e>
   10b4e:	1dab      	adds	r3, r5, #6
   10b50:	f105 070c 	add.w	r7, r5, #12
   10b54:	f10d 0016 	add.w	r0, sp, #22
   10b58:	f816 2b01 	ldrb.w	r2, [r6], #1
   10b5c:	f813 cb01 	ldrb.w	ip, [r3], #1
   10b60:	ea82 020c 	eor.w	r2, r2, ip
   10b64:	42bb      	cmp	r3, r7
   10b66:	f800 2b01 	strb.w	r2, [r0], #1
   10b6a:	d1f5      	bne.n	10b58 <smpCalcC1Part2+0x6c>
   10b6c:	7b2b      	ldrb	r3, [r5, #12]
   10b6e:	f88d 301c 	strb.w	r3, [sp, #28]
   10b72:	7b6b      	ldrb	r3, [r5, #13]
   10b74:	f88d 301d 	strb.w	r3, [sp, #29]
   10b78:	4a1b      	ldr	r2, [pc, #108]	; (10be8 <smpCalcC1Part2+0xfc>)
   10b7a:	7bab      	ldrb	r3, [r5, #14]
   10b7c:	f88d 301e 	strb.w	r3, [sp, #30]
   10b80:	200b      	movs	r0, #11
   10b82:	7beb      	ldrb	r3, [r5, #15]
   10b84:	f88d 301f 	strb.w	r3, [sp, #31]
   10b88:	f892 21c8 	ldrb.w	r2, [r2, #456]	; 0x1c8
   10b8c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   10b90:	9000      	str	r0, [sp, #0]
   10b92:	4640      	mov	r0, r8
   10b94:	f002 fa5a 	bl	1304c <SecAes>
   10b98:	28ff      	cmp	r0, #255	; 0xff
   10b9a:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
   10b9e:	d107      	bne.n	10bb0 <smpCalcC1Part2+0xc4>
   10ba0:	f640 0303 	movw	r3, #2051	; 0x803
   10ba4:	a903      	add	r1, sp, #12
   10ba6:	4620      	mov	r0, r4
   10ba8:	f8ad 300e 	strh.w	r3, [sp, #14]
   10bac:	f001 f9d7 	bl	11f5e <smpSmExecute>
   10bb0:	b008      	add	sp, #32
   10bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10bb6:	f7fe febf 	bl	f938 <DmConnPeerRpa>
   10bba:	4606      	mov	r6, r0
   10bbc:	f002 f978 	bl	12eb0 <BdaIsZeros>
   10bc0:	b120      	cbz	r0, 10bcc <smpCalcC1Part2+0xe0>
   10bc2:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10bc6:	f7fe fe9b 	bl	f900 <DmConnPeerAddr>
   10bca:	4606      	mov	r6, r0
   10bcc:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10bd0:	f7fe febc 	bl	f94c <DmConnLocalRpa>
   10bd4:	4607      	mov	r7, r0
   10bd6:	f002 f96b 	bl	12eb0 <BdaIsZeros>
   10bda:	2800      	cmp	r0, #0
   10bdc:	d0aa      	beq.n	10b34 <smpCalcC1Part2+0x48>
   10bde:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10be2:	f7fe fe9f 	bl	f924 <DmConnLocalAddr>
   10be6:	e7a4      	b.n	10b32 <smpCalcC1Part2+0x46>
   10be8:	10003d50 	.word	0x10003d50

00010bec <smpCalcS1>:
   10bec:	b570      	push	{r4, r5, r6, lr}
   10bee:	b088      	sub	sp, #32
   10bf0:	4616      	mov	r6, r2
   10bf2:	4604      	mov	r4, r0
   10bf4:	460d      	mov	r5, r1
   10bf6:	a804      	add	r0, sp, #16
   10bf8:	4619      	mov	r1, r3
   10bfa:	f002 f981 	bl	12f00 <Calc128Cpy64>
   10bfe:	4631      	mov	r1, r6
   10c00:	a806      	add	r0, sp, #24
   10c02:	f002 f97d 	bl	12f00 <Calc128Cpy64>
   10c06:	4a0c      	ldr	r2, [pc, #48]	; (10c38 <smpCalcS1+0x4c>)
   10c08:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   10c0c:	f892 21c8 	ldrb.w	r2, [r2, #456]	; 0x1c8
   10c10:	210b      	movs	r1, #11
   10c12:	9100      	str	r1, [sp, #0]
   10c14:	4628      	mov	r0, r5
   10c16:	a904      	add	r1, sp, #16
   10c18:	f002 fa18 	bl	1304c <SecAes>
   10c1c:	28ff      	cmp	r0, #255	; 0xff
   10c1e:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
   10c22:	d107      	bne.n	10c34 <smpCalcS1+0x48>
   10c24:	f640 0303 	movw	r3, #2051	; 0x803
   10c28:	a903      	add	r1, sp, #12
   10c2a:	4620      	mov	r0, r4
   10c2c:	f8ad 300e 	strh.w	r3, [sp, #14]
   10c30:	f001 f995 	bl	11f5e <smpSmExecute>
   10c34:	b008      	add	sp, #32
   10c36:	bd70      	pop	{r4, r5, r6, pc}
   10c38:	10003d50 	.word	0x10003d50

00010c3c <smpGenerateLtk>:
   10c3c:	b570      	push	{r4, r5, r6, lr}
   10c3e:	6a04      	ldr	r4, [r0, #32]
   10c40:	1d26      	adds	r6, r4, #4
   10c42:	4605      	mov	r5, r0
   10c44:	f894 1020 	ldrb.w	r1, [r4, #32]
   10c48:	4630      	mov	r0, r6
   10c4a:	f002 fdc5 	bl	137d8 <SecRand>
   10c4e:	f894 0020 	ldrb.w	r0, [r4, #32]
   10c52:	2100      	movs	r1, #0
   10c54:	f1c0 0210 	rsb	r2, r0, #16
   10c58:	4430      	add	r0, r6
   10c5a:	f00f fbc7 	bl	203ec <memset>
   10c5e:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
   10c62:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   10c66:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   10c6a:	4622      	mov	r2, r4
   10c6c:	83a3      	strh	r3, [r4, #28]
   10c6e:	f852 3f32 	ldr.w	r3, [r2, #50]!
   10c72:	6163      	str	r3, [r4, #20]
   10c74:	6853      	ldr	r3, [r2, #4]
   10c76:	61a3      	str	r3, [r4, #24]
   10c78:	2301      	movs	r3, #1
   10c7a:	77a3      	strb	r3, [r4, #30]
   10c7c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   10c80:	f013 0f04 	tst.w	r3, #4
   10c84:	bf14      	ite	ne
   10c86:	2302      	movne	r3, #2
   10c88:	2301      	moveq	r3, #1
   10c8a:	77e3      	strb	r3, [r4, #31]
   10c8c:	232f      	movs	r3, #47	; 0x2f
   10c8e:	70a3      	strb	r3, [r4, #2]
   10c90:	4620      	mov	r0, r4
   10c92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10c96:	f7ff ba85 	b.w	101a4 <DmSmpCbackExec>

00010c9a <smpSendPkt>:
   10c9a:	b570      	push	{r4, r5, r6, lr}
   10c9c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   10ca0:	4604      	mov	r4, r0
   10ca2:	460d      	mov	r5, r1
   10ca4:	b12b      	cbz	r3, 10cb2 <smpSendPkt+0x18>
   10ca6:	6a40      	ldr	r0, [r0, #36]	; 0x24
   10ca8:	b108      	cbz	r0, 10cae <smpSendPkt+0x14>
   10caa:	f008 fa5f 	bl	1916c <WsfMsgFree>
   10cae:	6265      	str	r5, [r4, #36]	; 0x24
   10cb0:	bd70      	pop	{r4, r5, r6, pc}
   10cb2:	7a0a      	ldrb	r2, [r1, #8]
   10cb4:	460b      	mov	r3, r1
   10cb6:	4904      	ldr	r1, [pc, #16]	; (10cc8 <smpSendPkt+0x2e>)
   10cb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10cbc:	5c8a      	ldrb	r2, [r1, r2]
   10cbe:	8d01      	ldrh	r1, [r0, #40]	; 0x28
   10cc0:	2006      	movs	r0, #6
   10cc2:	f7ff bd49 	b.w	10758 <L2cDataReq>
   10cc6:	bf00      	nop
   10cc8:	00024924 	.word	0x00024924

00010ccc <smpL2cCtrlCback>:
   10ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10cce:	7805      	ldrb	r5, [r0, #0]
   10cd0:	4f13      	ldr	r7, [pc, #76]	; (10d20 <smpL2cCtrlCback+0x54>)
   10cd2:	3d01      	subs	r5, #1
   10cd4:	2438      	movs	r4, #56	; 0x38
   10cd6:	fb04 7405 	mla	r4, r4, r5, r7
   10cda:	4606      	mov	r6, r0
   10cdc:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
   10ce0:	b1e2      	cbz	r2, 10d1c <smpL2cCtrlCback+0x50>
   10ce2:	7883      	ldrb	r3, [r0, #2]
   10ce4:	2b01      	cmp	r3, #1
   10ce6:	bf0c      	ite	eq
   10ce8:	2301      	moveq	r3, #1
   10cea:	2300      	movne	r3, #0
   10cec:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
   10cf0:	d014      	beq.n	10d1c <smpL2cCtrlCback+0x50>
   10cf2:	6a61      	ldr	r1, [r4, #36]	; 0x24
   10cf4:	b121      	cbz	r1, 10d00 <smpL2cCtrlCback+0x34>
   10cf6:	2300      	movs	r3, #0
   10cf8:	6263      	str	r3, [r4, #36]	; 0x24
   10cfa:	4620      	mov	r0, r4
   10cfc:	f7ff ffcd 	bl	10c9a <smpSendPkt>
   10d00:	2338      	movs	r3, #56	; 0x38
   10d02:	fb03 7505 	mla	r5, r3, r5, r7
   10d06:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   10d0a:	b13b      	cbz	r3, 10d1c <smpL2cCtrlCback+0x50>
   10d0c:	230c      	movs	r3, #12
   10d0e:	70b3      	strb	r3, [r6, #2]
   10d10:	4631      	mov	r1, r6
   10d12:	4620      	mov	r0, r4
   10d14:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   10d18:	f001 b921 	b.w	11f5e <smpSmExecute>
   10d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10d1e:	bf00      	nop
   10d20:	10003d50 	.word	0x10003d50

00010d24 <smpStateIdle>:
   10d24:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
   10d28:	fab0 f080 	clz	r0, r0
   10d2c:	0940      	lsrs	r0, r0, #5
   10d2e:	4770      	bx	lr

00010d30 <smpMsgAlloc>:
   10d30:	2100      	movs	r1, #0
   10d32:	f008 b9ed 	b.w	19110 <WsfMsgDataAlloc>

00010d36 <SmpDmMsgSend>:
   10d36:	4b03      	ldr	r3, [pc, #12]	; (10d44 <SmpDmMsgSend+0xe>)
   10d38:	4601      	mov	r1, r0
   10d3a:	f893 01c8 	ldrb.w	r0, [r3, #456]	; 0x1c8
   10d3e:	f008 ba21 	b.w	19184 <WsfMsgSend>
   10d42:	bf00      	nop
   10d44:	10003d50 	.word	0x10003d50

00010d48 <SmpDmGetStk>:
   10d48:	b530      	push	{r4, r5, lr}
   10d4a:	4c12      	ldr	r4, [pc, #72]	; (10d94 <SmpDmGetStk+0x4c>)
   10d4c:	f894 21d4 	ldrb.w	r2, [r4, #468]	; 0x1d4
   10d50:	3801      	subs	r0, #1
   10d52:	4623      	mov	r3, r4
   10d54:	b16a      	cbz	r2, 10d72 <SmpDmGetStk+0x2a>
   10d56:	2238      	movs	r2, #56	; 0x38
   10d58:	fb02 4200 	mla	r2, r2, r0, r4
   10d5c:	6b54      	ldr	r4, [r2, #52]	; 0x34
   10d5e:	7825      	ldrb	r5, [r4, #0]
   10d60:	b13d      	cbz	r5, 10d72 <SmpDmGetStk+0x2a>
   10d62:	6924      	ldr	r4, [r4, #16]
   10d64:	b12c      	cbz	r4, 10d72 <SmpDmGetStk+0x2a>
   10d66:	2303      	movs	r3, #3
   10d68:	700b      	strb	r3, [r1, #0]
   10d6a:	6b53      	ldr	r3, [r2, #52]	; 0x34
   10d6c:	6918      	ldr	r0, [r3, #16]
   10d6e:	3010      	adds	r0, #16
   10d70:	bd30      	pop	{r4, r5, pc}
   10d72:	2238      	movs	r2, #56	; 0x38
   10d74:	fb02 3300 	mla	r3, r2, r0, r3
   10d78:	6a18      	ldr	r0, [r3, #32]
   10d7a:	2800      	cmp	r0, #0
   10d7c:	d0f8      	beq.n	10d70 <SmpDmGetStk+0x28>
   10d7e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   10d82:	f012 0f04 	tst.w	r2, #4
   10d86:	bf14      	ite	ne
   10d88:	2202      	movne	r2, #2
   10d8a:	2201      	moveq	r2, #1
   10d8c:	700a      	strb	r2, [r1, #0]
   10d8e:	6a18      	ldr	r0, [r3, #32]
   10d90:	3020      	adds	r0, #32
   10d92:	e7ed      	b.n	10d70 <SmpDmGetStk+0x28>
   10d94:	10003d50 	.word	0x10003d50

00010d98 <SmpDmGetLtk>:
   10d98:	4a05      	ldr	r2, [pc, #20]	; (10db0 <SmpDmGetLtk+0x18>)
   10d9a:	1e43      	subs	r3, r0, #1
   10d9c:	f892 01d4 	ldrb.w	r0, [r2, #468]	; 0x1d4
   10da0:	b128      	cbz	r0, 10dae <SmpDmGetLtk+0x16>
   10da2:	2038      	movs	r0, #56	; 0x38
   10da4:	fb00 2003 	mla	r0, r0, r3, r2
   10da8:	6b43      	ldr	r3, [r0, #52]	; 0x34
   10daa:	6918      	ldr	r0, [r3, #16]
   10dac:	3010      	adds	r0, #16
   10dae:	4770      	bx	lr
   10db0:	10003d50 	.word	0x10003d50

00010db4 <SmpHandlerInit>:
   10db4:	b508      	push	{r3, lr}
   10db6:	4b0d      	ldr	r3, [pc, #52]	; (10dec <SmpHandlerInit+0x38>)
   10db8:	2201      	movs	r2, #1
   10dba:	f883 01c8 	strb.w	r0, [r3, #456]	; 0x1c8
   10dbe:	3338      	adds	r3, #56	; 0x38
   10dc0:	f823 2c2e 	strh.w	r2, [r3, #-46]
   10dc4:	3201      	adds	r2, #1
   10dc6:	b292      	uxth	r2, r2
   10dc8:	2a09      	cmp	r2, #9
   10dca:	f803 0c30 	strb.w	r0, [r3, #-48]
   10dce:	f103 0338 	add.w	r3, r3, #56	; 0x38
   10dd2:	d1f5      	bne.n	10dc0 <SmpHandlerInit+0xc>
   10dd4:	4906      	ldr	r1, [pc, #24]	; (10df0 <SmpHandlerInit+0x3c>)
   10dd6:	4a07      	ldr	r2, [pc, #28]	; (10df4 <SmpHandlerInit+0x40>)
   10dd8:	2006      	movs	r0, #6
   10dda:	f7ff fcb3 	bl	10744 <L2cRegister>
   10dde:	4906      	ldr	r1, [pc, #24]	; (10df8 <SmpHandlerInit+0x44>)
   10de0:	2001      	movs	r0, #1
   10de2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   10de6:	f7fe bc4d 	b.w	f684 <DmConnRegister>
   10dea:	bf00      	nop
   10dec:	10003d50 	.word	0x10003d50
   10df0:	0001097d 	.word	0x0001097d
   10df4:	00010ccd 	.word	0x00010ccd
   10df8:	000108c9 	.word	0x000108c9

00010dfc <SmpHandler>:
   10dfc:	b410      	push	{r4}
   10dfe:	b1b9      	cbz	r1, 10e30 <SmpHandler+0x34>
   10e00:	780b      	ldrb	r3, [r1, #0]
   10e02:	480d      	ldr	r0, [pc, #52]	; (10e38 <SmpHandler+0x3c>)
   10e04:	3b01      	subs	r3, #1
   10e06:	2238      	movs	r2, #56	; 0x38
   10e08:	fb02 0203 	mla	r2, r2, r3, r0
   10e0c:	f892 402d 	ldrb.w	r4, [r2, #45]	; 0x2d
   10e10:	b174      	cbz	r4, 10e30 <SmpHandler+0x34>
   10e12:	788c      	ldrb	r4, [r1, #2]
   10e14:	2c0b      	cmp	r4, #11
   10e16:	d104      	bne.n	10e22 <SmpHandler+0x26>
   10e18:	f892 4031 	ldrb.w	r4, [r2, #49]	; 0x31
   10e1c:	78ca      	ldrb	r2, [r1, #3]
   10e1e:	4294      	cmp	r4, r2
   10e20:	d106      	bne.n	10e30 <SmpHandler+0x34>
   10e22:	2238      	movs	r2, #56	; 0x38
   10e24:	fb02 0003 	mla	r0, r2, r3, r0
   10e28:	f85d 4b04 	ldr.w	r4, [sp], #4
   10e2c:	f001 b897 	b.w	11f5e <smpSmExecute>
   10e30:	f85d 4b04 	ldr.w	r4, [sp], #4
   10e34:	4770      	bx	lr
   10e36:	bf00      	nop
   10e38:	10003d50 	.word	0x10003d50

00010e3c <SmpDmEncryptInd>:
   10e3c:	78c3      	ldrb	r3, [r0, #3]
   10e3e:	2b00      	cmp	r3, #0
   10e40:	bf0c      	ite	eq
   10e42:	2308      	moveq	r3, #8
   10e44:	2309      	movne	r3, #9
   10e46:	4601      	mov	r1, r0
   10e48:	7083      	strb	r3, [r0, #2]
   10e4a:	2000      	movs	r0, #0
   10e4c:	f7ff bfd6 	b.w	10dfc <SmpHandler>

00010e50 <SmpScAllocScratchBuffers>:
   10e50:	b538      	push	{r3, r4, r5, lr}
   10e52:	6b45      	ldr	r5, [r0, #52]	; 0x34
   10e54:	68eb      	ldr	r3, [r5, #12]
   10e56:	4604      	mov	r4, r0
   10e58:	b91b      	cbnz	r3, 10e62 <SmpScAllocScratchBuffers+0x12>
   10e5a:	2060      	movs	r0, #96	; 0x60
   10e5c:	f008 f8de 	bl	1901c <WsfBufAlloc>
   10e60:	60e8      	str	r0, [r5, #12]
   10e62:	6b65      	ldr	r5, [r4, #52]	; 0x34
   10e64:	68ab      	ldr	r3, [r5, #8]
   10e66:	b91b      	cbnz	r3, 10e70 <SmpScAllocScratchBuffers+0x20>
   10e68:	2040      	movs	r0, #64	; 0x40
   10e6a:	f008 f8d7 	bl	1901c <WsfBufAlloc>
   10e6e:	60a8      	str	r0, [r5, #8]
   10e70:	6b65      	ldr	r5, [r4, #52]	; 0x34
   10e72:	692b      	ldr	r3, [r5, #16]
   10e74:	b91b      	cbnz	r3, 10e7e <SmpScAllocScratchBuffers+0x2e>
   10e76:	2020      	movs	r0, #32
   10e78:	f008 f8d0 	bl	1901c <WsfBufAlloc>
   10e7c:	6128      	str	r0, [r5, #16]
   10e7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   10e80:	68d8      	ldr	r0, [r3, #12]
   10e82:	b128      	cbz	r0, 10e90 <SmpScAllocScratchBuffers+0x40>
   10e84:	6898      	ldr	r0, [r3, #8]
   10e86:	b118      	cbz	r0, 10e90 <SmpScAllocScratchBuffers+0x40>
   10e88:	6918      	ldr	r0, [r3, #16]
   10e8a:	3000      	adds	r0, #0
   10e8c:	bf18      	it	ne
   10e8e:	2001      	movne	r0, #1
   10e90:	bd38      	pop	{r3, r4, r5, pc}

00010e92 <SmpScFreeScratchBuffers>:
   10e92:	6b43      	ldr	r3, [r0, #52]	; 0x34
   10e94:	b510      	push	{r4, lr}
   10e96:	4604      	mov	r4, r0
   10e98:	68d8      	ldr	r0, [r3, #12]
   10e9a:	b120      	cbz	r0, 10ea6 <SmpScFreeScratchBuffers+0x14>
   10e9c:	f008 f8fe 	bl	1909c <WsfBufFree>
   10ea0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   10ea2:	2200      	movs	r2, #0
   10ea4:	60da      	str	r2, [r3, #12]
   10ea6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   10ea8:	6898      	ldr	r0, [r3, #8]
   10eaa:	b120      	cbz	r0, 10eb6 <SmpScFreeScratchBuffers+0x24>
   10eac:	f008 f8f6 	bl	1909c <WsfBufFree>
   10eb0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   10eb2:	2200      	movs	r2, #0
   10eb4:	609a      	str	r2, [r3, #8]
   10eb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   10eb8:	6918      	ldr	r0, [r3, #16]
   10eba:	b120      	cbz	r0, 10ec6 <SmpScFreeScratchBuffers+0x34>
   10ebc:	f008 f8ee 	bl	1909c <WsfBufFree>
   10ec0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   10ec2:	2200      	movs	r2, #0
   10ec4:	611a      	str	r2, [r3, #16]
   10ec6:	bd10      	pop	{r4, pc}

00010ec8 <SmpScCmac>:
   10ec8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   10eca:	461c      	mov	r4, r3
   10ecc:	4b0b      	ldr	r3, [pc, #44]	; (10efc <SmpScCmac+0x34>)
   10ece:	9d06      	ldr	r5, [sp, #24]
   10ed0:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
   10ed4:	261b      	movs	r6, #27
   10ed6:	9601      	str	r6, [sp, #4]
   10ed8:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
   10edc:	9600      	str	r6, [sp, #0]
   10ede:	f002 fa83 	bl	133e8 <SecCmac>
   10ee2:	b948      	cbnz	r0, 10ef8 <SmpScCmac+0x30>
   10ee4:	f640 0303 	movw	r3, #2051	; 0x803
   10ee8:	4629      	mov	r1, r5
   10eea:	4620      	mov	r0, r4
   10eec:	806b      	strh	r3, [r5, #2]
   10eee:	b002      	add	sp, #8
   10ef0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10ef4:	f001 b833 	b.w	11f5e <smpSmExecute>
   10ef8:	b002      	add	sp, #8
   10efa:	bd70      	pop	{r4, r5, r6, pc}
   10efc:	10003d50 	.word	0x10003d50

00010f00 <SmpScAlloc>:
   10f00:	b570      	push	{r4, r5, r6, lr}
   10f02:	460e      	mov	r6, r1
   10f04:	4615      	mov	r5, r2
   10f06:	f008 f889 	bl	1901c <WsfBufAlloc>
   10f0a:	4604      	mov	r4, r0
   10f0c:	b930      	cbnz	r0, 10f1c <SmpScAlloc+0x1c>
   10f0e:	f640 0303 	movw	r3, #2051	; 0x803
   10f12:	806b      	strh	r3, [r5, #2]
   10f14:	4629      	mov	r1, r5
   10f16:	4630      	mov	r0, r6
   10f18:	f001 f821 	bl	11f5e <smpSmExecute>
   10f1c:	4620      	mov	r0, r4
   10f1e:	bd70      	pop	{r4, r5, r6, pc}

00010f20 <SmpScFree>:
   10f20:	f008 b8bc 	b.w	1909c <WsfBufFree>

00010f24 <SmpScCalcF4>:
   10f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10f28:	4606      	mov	r6, r0
   10f2a:	460f      	mov	r7, r1
   10f2c:	4615      	mov	r5, r2
   10f2e:	460a      	mov	r2, r1
   10f30:	4601      	mov	r1, r0
   10f32:	2041      	movs	r0, #65	; 0x41
   10f34:	461c      	mov	r4, r3
   10f36:	f89d 9020 	ldrb.w	r9, [sp, #32]
   10f3a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   10f3e:	f7ff ffdf 	bl	10f00 <SmpScAlloc>
   10f42:	4601      	mov	r1, r0
   10f44:	b1f0      	cbz	r0, 10f84 <SmpScCalcF4+0x60>
   10f46:	4603      	mov	r3, r0
   10f48:	462a      	mov	r2, r5
   10f4a:	f105 0020 	add.w	r0, r5, #32
   10f4e:	f852 5b04 	ldr.w	r5, [r2], #4
   10f52:	f843 5b04 	str.w	r5, [r3], #4
   10f56:	4282      	cmp	r2, r0
   10f58:	d1f9      	bne.n	10f4e <SmpScCalcF4+0x2a>
   10f5a:	4623      	mov	r3, r4
   10f5c:	f101 0220 	add.w	r2, r1, #32
   10f60:	f104 0020 	add.w	r0, r4, #32
   10f64:	f853 4b04 	ldr.w	r4, [r3], #4
   10f68:	f842 4b04 	str.w	r4, [r2], #4
   10f6c:	4283      	cmp	r3, r0
   10f6e:	d1f9      	bne.n	10f64 <SmpScCalcF4+0x40>
   10f70:	f881 9040 	strb.w	r9, [r1, #64]	; 0x40
   10f74:	4633      	mov	r3, r6
   10f76:	9708      	str	r7, [sp, #32]
   10f78:	4640      	mov	r0, r8
   10f7a:	2241      	movs	r2, #65	; 0x41
   10f7c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10f80:	f7ff bfa2 	b.w	10ec8 <SmpScCmac>
   10f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00010f88 <SmpScInit>:
   10f88:	4a13      	ldr	r2, [pc, #76]	; (10fd8 <SmpScInit+0x50>)
   10f8a:	4b14      	ldr	r3, [pc, #80]	; (10fdc <SmpScInit+0x54>)
   10f8c:	f102 0114 	add.w	r1, r2, #20
   10f90:	66d9      	str	r1, [r3, #108]	; 0x6c
   10f92:	f102 0128 	add.w	r1, r2, #40	; 0x28
   10f96:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4
   10f9a:	f102 013c 	add.w	r1, r2, #60	; 0x3c
   10f9e:	f8c3 10dc 	str.w	r1, [r3, #220]	; 0xdc
   10fa2:	f102 0150 	add.w	r1, r2, #80	; 0x50
   10fa6:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
   10faa:	f102 0164 	add.w	r1, r2, #100	; 0x64
   10fae:	635a      	str	r2, [r3, #52]	; 0x34
   10fb0:	f8c3 114c 	str.w	r1, [r3, #332]	; 0x14c
   10fb4:	f102 0178 	add.w	r1, r2, #120	; 0x78
   10fb8:	328c      	adds	r2, #140	; 0x8c
   10fba:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
   10fbe:	4a08      	ldr	r2, [pc, #32]	; (10fe0 <SmpScInit+0x58>)
   10fc0:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
   10fc4:	4a07      	ldr	r2, [pc, #28]	; (10fe4 <SmpScInit+0x5c>)
   10fc6:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
   10fca:	2201      	movs	r2, #1
   10fcc:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
   10fd0:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
   10fd4:	4770      	bx	lr
   10fd6:	bf00      	nop
   10fd8:	10003f28 	.word	0x10003f28
   10fdc:	10003d50 	.word	0x10003d50
   10fe0:	00011311 	.word	0x00011311
   10fe4:	000114e9 	.word	0x000114e9

00010fe8 <SmpScCat>:
   10fe8:	b510      	push	{r4, lr}
   10fea:	4614      	mov	r4, r2
   10fec:	f7fb f888 	bl	c100 <memcpy>
   10ff0:	4420      	add	r0, r4
   10ff2:	bd10      	pop	{r4, pc}

00010ff4 <SmpScCat128>:
   10ff4:	b510      	push	{r4, lr}
   10ff6:	4604      	mov	r4, r0
   10ff8:	f001 ff74 	bl	12ee4 <Calc128Cpy>
   10ffc:	f104 0010 	add.w	r0, r4, #16
   11000:	bd10      	pop	{r4, pc}

00011002 <smpScSendPubKey>:
   11002:	b570      	push	{r4, r5, r6, lr}
   11004:	2201      	movs	r2, #1
   11006:	4605      	mov	r5, r0
   11008:	460e      	mov	r6, r1
   1100a:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   1100e:	4611      	mov	r1, r2
   11010:	f7fe fcb0 	bl	f974 <DmConnSetIdle>
   11014:	4628      	mov	r0, r5
   11016:	f000 fd8f 	bl	11b38 <smpStartRspTimer>
   1101a:	2049      	movs	r0, #73	; 0x49
   1101c:	f7ff fe88 	bl	10d30 <smpMsgAlloc>
   11020:	4604      	mov	r4, r0
   11022:	b1b8      	cbz	r0, 11054 <smpScSendPubKey+0x52>
   11024:	230c      	movs	r3, #12
   11026:	7203      	strb	r3, [r0, #8]
   11028:	f7ff fa70 	bl	1050c <DmSecGetEccKey>
   1102c:	2220      	movs	r2, #32
   1102e:	4601      	mov	r1, r0
   11030:	f104 0009 	add.w	r0, r4, #9
   11034:	f001 ff90 	bl	12f58 <WStrReverseCpy>
   11038:	f7ff fa68 	bl	1050c <DmSecGetEccKey>
   1103c:	2220      	movs	r2, #32
   1103e:	1881      	adds	r1, r0, r2
   11040:	f104 0029 	add.w	r0, r4, #41	; 0x29
   11044:	f001 ff88 	bl	12f58 <WStrReverseCpy>
   11048:	4621      	mov	r1, r4
   1104a:	4628      	mov	r0, r5
   1104c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11050:	f7ff be23 	b.w	10c9a <smpSendPkt>
   11054:	f640 0303 	movw	r3, #2051	; 0x803
   11058:	8073      	strh	r3, [r6, #2]
   1105a:	4631      	mov	r1, r6
   1105c:	4628      	mov	r0, r5
   1105e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11062:	f000 bf7c 	b.w	11f5e <smpSmExecute>

00011066 <smpScSendDHKeyCheck>:
   11066:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11068:	4617      	mov	r7, r2
   1106a:	2201      	movs	r2, #1
   1106c:	4604      	mov	r4, r0
   1106e:	460e      	mov	r6, r1
   11070:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   11074:	4611      	mov	r1, r2
   11076:	f7fe fc7d 	bl	f974 <DmConnSetIdle>
   1107a:	4620      	mov	r0, r4
   1107c:	f000 fd5c 	bl	11b38 <smpStartRspTimer>
   11080:	2019      	movs	r0, #25
   11082:	f7ff fe55 	bl	10d30 <smpMsgAlloc>
   11086:	4605      	mov	r5, r0
   11088:	b160      	cbz	r0, 110a4 <smpScSendDHKeyCheck+0x3e>
   1108a:	230d      	movs	r3, #13
   1108c:	7203      	strb	r3, [r0, #8]
   1108e:	4639      	mov	r1, r7
   11090:	3009      	adds	r0, #9
   11092:	2210      	movs	r2, #16
   11094:	f001 ff60 	bl	12f58 <WStrReverseCpy>
   11098:	4629      	mov	r1, r5
   1109a:	4620      	mov	r0, r4
   1109c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   110a0:	f7ff bdfb 	b.w	10c9a <smpSendPkt>
   110a4:	f640 0303 	movw	r3, #2051	; 0x803
   110a8:	8073      	strh	r3, [r6, #2]
   110aa:	4631      	mov	r1, r6
   110ac:	4620      	mov	r0, r4
   110ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   110b2:	f000 bf54 	b.w	11f5e <smpSmExecute>

000110b6 <smpScSendRand>:
   110b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   110b8:	4617      	mov	r7, r2
   110ba:	2201      	movs	r2, #1
   110bc:	4604      	mov	r4, r0
   110be:	460e      	mov	r6, r1
   110c0:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   110c4:	4611      	mov	r1, r2
   110c6:	f7fe fc55 	bl	f974 <DmConnSetIdle>
   110ca:	4620      	mov	r0, r4
   110cc:	f000 fd34 	bl	11b38 <smpStartRspTimer>
   110d0:	2019      	movs	r0, #25
   110d2:	f7ff fe2d 	bl	10d30 <smpMsgAlloc>
   110d6:	4605      	mov	r5, r0
   110d8:	b160      	cbz	r0, 110f4 <smpScSendRand+0x3e>
   110da:	2304      	movs	r3, #4
   110dc:	7203      	strb	r3, [r0, #8]
   110de:	4639      	mov	r1, r7
   110e0:	3009      	adds	r0, #9
   110e2:	2210      	movs	r2, #16
   110e4:	f001 ff38 	bl	12f58 <WStrReverseCpy>
   110e8:	4629      	mov	r1, r5
   110ea:	4620      	mov	r0, r4
   110ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   110f0:	f7ff bdd3 	b.w	10c9a <smpSendPkt>
   110f4:	f640 0303 	movw	r3, #2051	; 0x803
   110f8:	8073      	strh	r3, [r6, #2]
   110fa:	4631      	mov	r1, r6
   110fc:	4620      	mov	r0, r4
   110fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   11102:	f000 bf2c 	b.w	11f5e <smpSmExecute>

00011106 <smpScSendPairCnf>:
   11106:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11108:	4617      	mov	r7, r2
   1110a:	2201      	movs	r2, #1
   1110c:	4604      	mov	r4, r0
   1110e:	460e      	mov	r6, r1
   11110:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   11114:	4611      	mov	r1, r2
   11116:	f7fe fc2d 	bl	f974 <DmConnSetIdle>
   1111a:	4620      	mov	r0, r4
   1111c:	f000 fd0c 	bl	11b38 <smpStartRspTimer>
   11120:	2019      	movs	r0, #25
   11122:	f7ff fe05 	bl	10d30 <smpMsgAlloc>
   11126:	4605      	mov	r5, r0
   11128:	b160      	cbz	r0, 11144 <smpScSendPairCnf+0x3e>
   1112a:	2303      	movs	r3, #3
   1112c:	7203      	strb	r3, [r0, #8]
   1112e:	4639      	mov	r1, r7
   11130:	3009      	adds	r0, #9
   11132:	2210      	movs	r2, #16
   11134:	f001 ff10 	bl	12f58 <WStrReverseCpy>
   11138:	4629      	mov	r1, r5
   1113a:	4620      	mov	r0, r4
   1113c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   11140:	f7ff bdab 	b.w	10c9a <smpSendPkt>
   11144:	f640 0303 	movw	r3, #2051	; 0x803
   11148:	8073      	strh	r3, [r6, #2]
   1114a:	4631      	mov	r1, r6
   1114c:	4620      	mov	r0, r4
   1114e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   11152:	f000 bf04 	b.w	11f5e <smpSmExecute>

00011156 <smpGetPkBit>:
   11156:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11158:	78da      	ldrb	r2, [r3, #3]
   1115a:	68d9      	ldr	r1, [r3, #12]
   1115c:	08d3      	lsrs	r3, r2, #3
   1115e:	f1c3 030f 	rsb	r3, r3, #15
   11162:	fa51 f383 	uxtab	r3, r1, r3
   11166:	f002 0207 	and.w	r2, r2, #7
   1116a:	f893 3020 	ldrb.w	r3, [r3, #32]
   1116e:	fa43 f202 	asr.w	r2, r3, r2
   11172:	f012 0f01 	tst.w	r2, #1
   11176:	bf14      	ite	ne
   11178:	2081      	movne	r0, #129	; 0x81
   1117a:	2080      	moveq	r0, #128	; 0x80
   1117c:	4770      	bx	lr

0001117e <smpGetPeerPublicKey>:
   1117e:	b508      	push	{r3, lr}
   11180:	f7ff fc2a 	bl	109d8 <smpCcbByConnId>
   11184:	6b40      	ldr	r0, [r0, #52]	; 0x34
   11186:	b100      	cbz	r0, 1118a <smpGetPeerPublicKey+0xc>
   11188:	6880      	ldr	r0, [r0, #8]
   1118a:	bd08      	pop	{r3, pc}

0001118c <smpSetPeerPublicKey>:
   1118c:	b510      	push	{r4, lr}
   1118e:	460c      	mov	r4, r1
   11190:	f7ff fc22 	bl	109d8 <smpCcbByConnId>
   11194:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11196:	b14b      	cbz	r3, 111ac <smpSetPeerPublicKey+0x20>
   11198:	689b      	ldr	r3, [r3, #8]
   1119a:	4621      	mov	r1, r4
   1119c:	f104 0240 	add.w	r2, r4, #64	; 0x40
   111a0:	f851 0b04 	ldr.w	r0, [r1], #4
   111a4:	f843 0b04 	str.w	r0, [r3], #4
   111a8:	4291      	cmp	r1, r2
   111aa:	d1f9      	bne.n	111a0 <smpSetPeerPublicKey+0x14>
   111ac:	bd10      	pop	{r4, pc}

000111ae <SmpScSetOobCfg>:
   111ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   111b0:	460d      	mov	r5, r1
   111b2:	f7ff fc11 	bl	109d8 <smpCcbByConnId>
   111b6:	f890 202a 	ldrb.w	r2, [r0, #42]	; 0x2a
   111ba:	6b43      	ldr	r3, [r0, #52]	; 0x34
   111bc:	4604      	mov	r4, r0
   111be:	f105 0110 	add.w	r1, r5, #16
   111c2:	f105 0730 	add.w	r7, r5, #48	; 0x30
   111c6:	f105 0620 	add.w	r6, r5, #32
   111ca:	68d8      	ldr	r0, [r3, #12]
   111cc:	b1b2      	cbz	r2, 111fc <SmpScSetOobCfg+0x4e>
   111ce:	3050      	adds	r0, #80	; 0x50
   111d0:	f001 fe88 	bl	12ee4 <Calc128Cpy>
   111d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   111d6:	68d8      	ldr	r0, [r3, #12]
   111d8:	4629      	mov	r1, r5
   111da:	3020      	adds	r0, #32
   111dc:	f001 fe82 	bl	12ee4 <Calc128Cpy>
   111e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   111e2:	68d8      	ldr	r0, [r3, #12]
   111e4:	4639      	mov	r1, r7
   111e6:	3040      	adds	r0, #64	; 0x40
   111e8:	f001 fe7c 	bl	12ee4 <Calc128Cpy>
   111ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
   111ee:	68d8      	ldr	r0, [r3, #12]
   111f0:	4631      	mov	r1, r6
   111f2:	3030      	adds	r0, #48	; 0x30
   111f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   111f8:	f001 be74 	b.w	12ee4 <Calc128Cpy>
   111fc:	3040      	adds	r0, #64	; 0x40
   111fe:	f001 fe71 	bl	12ee4 <Calc128Cpy>
   11202:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11204:	68d8      	ldr	r0, [r3, #12]
   11206:	4629      	mov	r1, r5
   11208:	3030      	adds	r0, #48	; 0x30
   1120a:	f001 fe6b 	bl	12ee4 <Calc128Cpy>
   1120e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11210:	68d8      	ldr	r0, [r3, #12]
   11212:	4639      	mov	r1, r7
   11214:	3050      	adds	r0, #80	; 0x50
   11216:	f001 fe65 	bl	12ee4 <Calc128Cpy>
   1121a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1121c:	68d8      	ldr	r0, [r3, #12]
   1121e:	4631      	mov	r1, r6
   11220:	3020      	adds	r0, #32
   11222:	e7e7      	b.n	111f4 <SmpScSetOobCfg+0x46>

00011224 <smpEventStr>:
   11224:	3801      	subs	r0, #1
   11226:	b2c0      	uxtb	r0, r0
   11228:	281b      	cmp	r0, #27
   1122a:	bf9a      	itte	ls
   1122c:	4b02      	ldrls	r3, [pc, #8]	; (11238 <smpEventStr+0x14>)
   1122e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   11232:	4802      	ldrhi	r0, [pc, #8]	; (1123c <smpEventStr+0x18>)
   11234:	4770      	bx	lr
   11236:	bf00      	nop
   11238:	00024934 	.word	0x00024934
   1123c:	000257a7 	.word	0x000257a7

00011240 <smpStateStr>:
   11240:	4b03      	ldr	r3, [pc, #12]	; (11250 <smpStateStr+0x10>)
   11242:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
   11246:	b10b      	cbz	r3, 1124c <smpStateStr+0xc>
   11248:	f000 bbea 	b.w	11a20 <smpiStateStr>
   1124c:	f000 bbfe 	b.w	11a4c <smprStateStr>
   11250:	10003d50 	.word	0x10003d50

00011254 <smpLogByteArray>:
   11254:	4770      	bx	lr
   11256:	bf00      	nop

00011258 <smpScCatInitiatorBdAddr>:
   11258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1125a:	4607      	mov	r7, r0
   1125c:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   11260:	460c      	mov	r4, r1
   11262:	f7fe f907 	bl	f474 <dmConnCcbById>
   11266:	4605      	mov	r5, r0
   11268:	b1b0      	cbz	r0, 11298 <smpScCatInitiatorBdAddr+0x40>
   1126a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
   1126e:	1c66      	adds	r6, r4, #1
   11270:	b1a3      	cbz	r3, 1129c <smpScCatInitiatorBdAddr+0x44>
   11272:	f100 071a 	add.w	r7, r0, #26
   11276:	4638      	mov	r0, r7
   11278:	f001 fe1a 	bl	12eb0 <BdaIsZeros>
   1127c:	b920      	cbnz	r0, 11288 <smpScCatInitiatorBdAddr+0x30>
   1127e:	2301      	movs	r3, #1
   11280:	7023      	strb	r3, [r4, #0]
   11282:	2206      	movs	r2, #6
   11284:	4639      	mov	r1, r7
   11286:	e003      	b.n	11290 <smpScCatInitiatorBdAddr+0x38>
   11288:	7d2b      	ldrb	r3, [r5, #20]
   1128a:	7023      	strb	r3, [r4, #0]
   1128c:	2206      	movs	r2, #6
   1128e:	18a9      	adds	r1, r5, r2
   11290:	4630      	mov	r0, r6
   11292:	f001 fe61 	bl	12f58 <WStrReverseCpy>
   11296:	3407      	adds	r4, #7
   11298:	4620      	mov	r0, r4
   1129a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1129c:	f100 0720 	add.w	r7, r0, #32
   112a0:	4638      	mov	r0, r7
   112a2:	f001 fe05 	bl	12eb0 <BdaIsZeros>
   112a6:	2800      	cmp	r0, #0
   112a8:	d0e9      	beq.n	1127e <smpScCatInitiatorBdAddr+0x26>
   112aa:	7ceb      	ldrb	r3, [r5, #19]
   112ac:	7023      	strb	r3, [r4, #0]
   112ae:	2206      	movs	r2, #6
   112b0:	4629      	mov	r1, r5
   112b2:	e7ed      	b.n	11290 <smpScCatInitiatorBdAddr+0x38>

000112b4 <smpScCatResponderBdAddr>:
   112b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   112b6:	4607      	mov	r7, r0
   112b8:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   112bc:	460c      	mov	r4, r1
   112be:	f7fe f8d9 	bl	f474 <dmConnCcbById>
   112c2:	4605      	mov	r5, r0
   112c4:	b1b0      	cbz	r0, 112f4 <smpScCatResponderBdAddr+0x40>
   112c6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
   112ca:	1c66      	adds	r6, r4, #1
   112cc:	b1a3      	cbz	r3, 112f8 <smpScCatResponderBdAddr+0x44>
   112ce:	f100 0720 	add.w	r7, r0, #32
   112d2:	4638      	mov	r0, r7
   112d4:	f001 fdec 	bl	12eb0 <BdaIsZeros>
   112d8:	b920      	cbnz	r0, 112e4 <smpScCatResponderBdAddr+0x30>
   112da:	2301      	movs	r3, #1
   112dc:	7023      	strb	r3, [r4, #0]
   112de:	2206      	movs	r2, #6
   112e0:	4639      	mov	r1, r7
   112e2:	e003      	b.n	112ec <smpScCatResponderBdAddr+0x38>
   112e4:	7ceb      	ldrb	r3, [r5, #19]
   112e6:	7023      	strb	r3, [r4, #0]
   112e8:	2206      	movs	r2, #6
   112ea:	4629      	mov	r1, r5
   112ec:	4630      	mov	r0, r6
   112ee:	f001 fe33 	bl	12f58 <WStrReverseCpy>
   112f2:	3407      	adds	r4, #7
   112f4:	4620      	mov	r0, r4
   112f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   112f8:	f100 071a 	add.w	r7, r0, #26
   112fc:	4638      	mov	r0, r7
   112fe:	f001 fdd7 	bl	12eb0 <BdaIsZeros>
   11302:	2800      	cmp	r0, #0
   11304:	d0e9      	beq.n	112da <smpScCatResponderBdAddr+0x26>
   11306:	7d2b      	ldrb	r3, [r5, #20]
   11308:	7023      	strb	r3, [r4, #0]
   1130a:	2206      	movs	r2, #6
   1130c:	18a9      	adds	r1, r5, r2
   1130e:	e7ed      	b.n	112ec <smpScCatResponderBdAddr+0x38>

00011310 <smpScProcPairing>:
   11310:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11312:	2300      	movs	r3, #0
   11314:	7013      	strb	r3, [r2, #0]
   11316:	700b      	strb	r3, [r1, #0]
   11318:	7cc3      	ldrb	r3, [r0, #19]
   1131a:	7c85      	ldrb	r5, [r0, #18]
   1131c:	f013 0f08 	tst.w	r3, #8
   11320:	4604      	mov	r4, r0
   11322:	d039      	beq.n	11398 <smpScProcPairing+0x88>
   11324:	7e83      	ldrb	r3, [r0, #26]
   11326:	071e      	lsls	r6, r3, #28
   11328:	d536      	bpl.n	11398 <smpScProcPairing+0x88>
   1132a:	2d01      	cmp	r5, #1
   1132c:	d002      	beq.n	11334 <smpScProcPairing+0x24>
   1132e:	7e43      	ldrb	r3, [r0, #25]
   11330:	2b01      	cmp	r3, #1
   11332:	d137      	bne.n	113a4 <smpScProcPairing+0x94>
   11334:	2301      	movs	r3, #1
   11336:	700b      	strb	r3, [r1, #0]
   11338:	2500      	movs	r5, #0
   1133a:	780b      	ldrb	r3, [r1, #0]
   1133c:	b97b      	cbnz	r3, 1135e <smpScProcPairing+0x4e>
   1133e:	7ce3      	ldrb	r3, [r4, #19]
   11340:	0758      	lsls	r0, r3, #29
   11342:	d402      	bmi.n	1134a <smpScProcPairing+0x3a>
   11344:	7ea3      	ldrb	r3, [r4, #26]
   11346:	075b      	lsls	r3, r3, #29
   11348:	d509      	bpl.n	1135e <smpScProcPairing+0x4e>
   1134a:	7c60      	ldrb	r0, [r4, #17]
   1134c:	2803      	cmp	r0, #3
   1134e:	d006      	beq.n	1135e <smpScProcPairing+0x4e>
   11350:	7e23      	ldrb	r3, [r4, #24]
   11352:	2b03      	cmp	r3, #3
   11354:	d003      	beq.n	1135e <smpScProcPairing+0x4e>
   11356:	2801      	cmp	r0, #1
   11358:	d826      	bhi.n	113a8 <smpScProcPairing+0x98>
   1135a:	2b01      	cmp	r3, #1
   1135c:	d83d      	bhi.n	113da <smpScProcPairing+0xca>
   1135e:	f894 c013 	ldrb.w	ip, [r4, #19]
   11362:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   11366:	f01c 0f08 	tst.w	ip, #8
   1136a:	f000 808e 	beq.w	1148a <smpScProcPairing+0x17a>
   1136e:	7ea7      	ldrb	r7, [r4, #26]
   11370:	073e      	lsls	r6, r7, #28
   11372:	f140 808a 	bpl.w	1148a <smpScProcPairing+0x17a>
   11376:	4b5a      	ldr	r3, [pc, #360]	; (114e0 <smpScProcPairing+0x1d0>)
   11378:	f893 61d4 	ldrb.w	r6, [r3, #468]	; 0x1d4
   1137c:	bb7e      	cbnz	r6, 113de <smpScProcPairing+0xce>
   1137e:	f8ad 0004 	strh.w	r0, [sp, #4]
   11382:	f240 3303 	movw	r3, #771	; 0x303
   11386:	a901      	add	r1, sp, #4
   11388:	4620      	mov	r0, r4
   1138a:	f8ad 3006 	strh.w	r3, [sp, #6]
   1138e:	f000 fde6 	bl	11f5e <smpSmExecute>
   11392:	4630      	mov	r0, r6
   11394:	b003      	add	sp, #12
   11396:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11398:	2d01      	cmp	r5, #1
   1139a:	d103      	bne.n	113a4 <smpScProcPairing+0x94>
   1139c:	7e63      	ldrb	r3, [r4, #25]
   1139e:	2b01      	cmp	r3, #1
   113a0:	d1cb      	bne.n	1133a <smpScProcPairing+0x2a>
   113a2:	e7c7      	b.n	11334 <smpScProcPairing+0x24>
   113a4:	2501      	movs	r5, #1
   113a6:	e7c8      	b.n	1133a <smpScProcPairing+0x2a>
   113a8:	2804      	cmp	r0, #4
   113aa:	d114      	bne.n	113d6 <smpScProcPairing+0xc6>
   113ac:	2b02      	cmp	r3, #2
   113ae:	d014      	beq.n	113da <smpScProcPairing+0xca>
   113b0:	1f1f      	subs	r7, r3, #4
   113b2:	427b      	negs	r3, r7
   113b4:	417b      	adcs	r3, r7
   113b6:	7013      	strb	r3, [r2, #0]
   113b8:	7e20      	ldrb	r0, [r4, #24]
   113ba:	2802      	cmp	r0, #2
   113bc:	d102      	bne.n	113c4 <smpScProcPairing+0xb4>
   113be:	7c60      	ldrb	r0, [r4, #17]
   113c0:	2802      	cmp	r0, #2
   113c2:	d006      	beq.n	113d2 <smpScProcPairing+0xc2>
   113c4:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
   113c8:	2800      	cmp	r0, #0
   113ca:	bf08      	it	eq
   113cc:	f083 0301 	eoreq.w	r3, r3, #1
   113d0:	7013      	strb	r3, [r2, #0]
   113d2:	2500      	movs	r5, #0
   113d4:	e7c3      	b.n	1135e <smpScProcPairing+0x4e>
   113d6:	2300      	movs	r3, #0
   113d8:	e7ed      	b.n	113b6 <smpScProcPairing+0xa6>
   113da:	2301      	movs	r3, #1
   113dc:	e7eb      	b.n	113b6 <smpScProcPairing+0xa6>
   113de:	6b63      	ldr	r3, [r4, #52]	; 0x34
   113e0:	f240 1601 	movw	r6, #257	; 0x101
   113e4:	801e      	strh	r6, [r3, #0]
   113e6:	7812      	ldrb	r2, [r2, #0]
   113e8:	711a      	strb	r2, [r3, #4]
   113ea:	780a      	ldrb	r2, [r1, #0]
   113ec:	b112      	cbz	r2, 113f4 <smpScProcPairing+0xe4>
   113ee:	2202      	movs	r2, #2
   113f0:	705a      	strb	r2, [r3, #1]
   113f2:	e017      	b.n	11424 <smpScProcPairing+0x114>
   113f4:	7e22      	ldrb	r2, [r4, #24]
   113f6:	b9fd      	cbnz	r5, 11438 <smpScProcPairing+0x128>
   113f8:	2103      	movs	r1, #3
   113fa:	2a04      	cmp	r2, #4
   113fc:	7059      	strb	r1, [r3, #1]
   113fe:	d106      	bne.n	1140e <smpScProcPairing+0xfe>
   11400:	7c62      	ldrb	r2, [r4, #17]
   11402:	2a01      	cmp	r2, #1
   11404:	d001      	beq.n	1140a <smpScProcPairing+0xfa>
   11406:	2a04      	cmp	r2, #4
   11408:	d105      	bne.n	11416 <smpScProcPairing+0x106>
   1140a:	2204      	movs	r2, #4
   1140c:	e7f0      	b.n	113f0 <smpScProcPairing+0xe0>
   1140e:	2a01      	cmp	r2, #1
   11410:	d101      	bne.n	11416 <smpScProcPairing+0x106>
   11412:	7c62      	ldrb	r2, [r4, #17]
   11414:	e7f7      	b.n	11406 <smpScProcPairing+0xf6>
   11416:	f01c 0f10 	tst.w	ip, #16
   1141a:	d003      	beq.n	11424 <smpScProcPairing+0x114>
   1141c:	06fa      	lsls	r2, r7, #27
   1141e:	d501      	bpl.n	11424 <smpScProcPairing+0x114>
   11420:	2201      	movs	r2, #1
   11422:	709a      	strb	r2, [r3, #2]
   11424:	f8ad 0004 	strh.w	r0, [sp, #4]
   11428:	4620      	mov	r0, r4
   1142a:	f7ff fd11 	bl	10e50 <SmpScAllocScratchBuffers>
   1142e:	b148      	cbz	r0, 11444 <smpScProcPairing+0x134>
   11430:	2310      	movs	r3, #16
   11432:	f88d 3006 	strb.w	r3, [sp, #6]
   11436:	e009      	b.n	1144c <smpScProcPairing+0x13c>
   11438:	2a01      	cmp	r2, #1
   1143a:	d1f3      	bne.n	11424 <smpScProcPairing+0x114>
   1143c:	7c62      	ldrb	r2, [r4, #17]
   1143e:	2a01      	cmp	r2, #1
   11440:	d1f0      	bne.n	11424 <smpScProcPairing+0x114>
   11442:	e7e2      	b.n	1140a <smpScProcPairing+0xfa>
   11444:	f640 0303 	movw	r3, #2051	; 0x803
   11448:	f8ad 3006 	strh.w	r3, [sp, #6]
   1144c:	a901      	add	r1, sp, #4
   1144e:	4620      	mov	r0, r4
   11450:	f000 fd85 	bl	11f5e <smpSmExecute>
   11454:	7ce2      	ldrb	r2, [r4, #19]
   11456:	7ea1      	ldrb	r1, [r4, #26]
   11458:	ea01 0302 	and.w	r3, r1, r2
   1145c:	bb6d      	cbnz	r5, 114ba <smpScProcPairing+0x1aa>
   1145e:	f043 0304 	orr.w	r3, r3, #4
   11462:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
   11466:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   1146a:	2b00      	cmp	r3, #0
   1146c:	bf08      	it	eq
   1146e:	460a      	moveq	r2, r1
   11470:	4b1c      	ldr	r3, [pc, #112]	; (114e4 <smpScProcPairing+0x1d4>)
   11472:	6819      	ldr	r1, [r3, #0]
   11474:	b325      	cbz	r5, 114c0 <smpScProcPairing+0x1b0>
   11476:	798b      	ldrb	r3, [r1, #6]
   11478:	f003 0304 	and.w	r3, r3, #4
   1147c:	421a      	tst	r2, r3
   1147e:	d01f      	beq.n	114c0 <smpScProcPairing+0x1b0>
   11480:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   11484:	f8ad 3004 	strh.w	r3, [sp, #4]
   11488:	e007      	b.n	1149a <smpScProcPairing+0x18a>
   1148a:	4b16      	ldr	r3, [pc, #88]	; (114e4 <smpScProcPairing+0x1d4>)
   1148c:	681b      	ldr	r3, [r3, #0]
   1148e:	799b      	ldrb	r3, [r3, #6]
   11490:	f013 0308 	ands.w	r3, r3, #8
   11494:	d00b      	beq.n	114ae <smpScProcPairing+0x19e>
   11496:	f8ad 0004 	strh.w	r0, [sp, #4]
   1149a:	f240 3303 	movw	r3, #771	; 0x303
   1149e:	a901      	add	r1, sp, #4
   114a0:	4620      	mov	r0, r4
   114a2:	f8ad 3006 	strh.w	r3, [sp, #6]
   114a6:	2600      	movs	r6, #0
   114a8:	f000 fd59 	bl	11f5e <smpSmExecute>
   114ac:	e771      	b.n	11392 <smpScProcPairing+0x82>
   114ae:	6b62      	ldr	r2, [r4, #52]	; 0x34
   114b0:	7013      	strb	r3, [r2, #0]
   114b2:	f8ad 0004 	strh.w	r0, [sp, #4]
   114b6:	2311      	movs	r3, #17
   114b8:	e7bb      	b.n	11432 <smpScProcPairing+0x122>
   114ba:	f023 0304 	bic.w	r3, r3, #4
   114be:	e7d0      	b.n	11462 <smpScProcPairing+0x152>
   114c0:	78cb      	ldrb	r3, [r1, #3]
   114c2:	7d22      	ldrb	r2, [r4, #20]
   114c4:	429a      	cmp	r2, r3
   114c6:	d302      	bcc.n	114ce <smpScProcPairing+0x1be>
   114c8:	7ee2      	ldrb	r2, [r4, #27]
   114ca:	429a      	cmp	r2, r3
   114cc:	d206      	bcs.n	114dc <smpScProcPairing+0x1cc>
   114ce:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   114d2:	f8ad 3004 	strh.w	r3, [sp, #4]
   114d6:	f240 6303 	movw	r3, #1539	; 0x603
   114da:	e7e0      	b.n	1149e <smpScProcPairing+0x18e>
   114dc:	2601      	movs	r6, #1
   114de:	e758      	b.n	11392 <smpScProcPairing+0x82>
   114e0:	10003d50 	.word	0x10003d50
   114e4:	10002ba8 	.word	0x10002ba8

000114e8 <smpScAuthReq>:
   114e8:	b530      	push	{r4, r5, lr}
   114ea:	6b44      	ldr	r4, [r0, #52]	; 0x34
   114ec:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   114f0:	7825      	ldrb	r5, [r4, #0]
   114f2:	b087      	sub	sp, #28
   114f4:	b98d      	cbnz	r5, 1151a <smpScAuthReq+0x32>
   114f6:	f890 4030 	ldrb.w	r4, [r0, #48]	; 0x30
   114fa:	0764      	lsls	r4, r4, #29
   114fc:	d510      	bpl.n	11520 <smpScAuthReq+0x38>
   114fe:	f8ad 3000 	strh.w	r3, [sp]
   11502:	4668      	mov	r0, sp
   11504:	232e      	movs	r3, #46	; 0x2e
   11506:	f88d 3002 	strb.w	r3, [sp, #2]
   1150a:	f88d 1004 	strb.w	r1, [sp, #4]
   1150e:	f88d 2005 	strb.w	r2, [sp, #5]
   11512:	f7fe fe47 	bl	101a4 <DmSmpCbackExec>
   11516:	b007      	add	sp, #28
   11518:	bd30      	pop	{r4, r5, pc}
   1151a:	7864      	ldrb	r4, [r4, #1]
   1151c:	2c02      	cmp	r4, #2
   1151e:	d0ee      	beq.n	114fe <smpScAuthReq+0x16>
   11520:	f8ad 3000 	strh.w	r3, [sp]
   11524:	2304      	movs	r3, #4
   11526:	f88d 3002 	strb.w	r3, [sp, #2]
   1152a:	2300      	movs	r3, #0
   1152c:	f8ad 3004 	strh.w	r3, [sp, #4]
   11530:	f88d 3006 	strb.w	r3, [sp, #6]
   11534:	4669      	mov	r1, sp
   11536:	2303      	movs	r3, #3
   11538:	f88d 3014 	strb.w	r3, [sp, #20]
   1153c:	f000 fd0f 	bl	11f5e <smpSmExecute>
   11540:	e7e9      	b.n	11516 <smpScAuthReq+0x2e>

00011542 <smpScActCleanup>:
   11542:	b510      	push	{r4, lr}
   11544:	4604      	mov	r4, r0
   11546:	f000 fb17 	bl	11b78 <smpActCleanup>
   1154a:	4620      	mov	r0, r4
   1154c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11550:	f7ff bc9f 	b.w	10e92 <SmpScFreeScratchBuffers>

00011554 <smpScActPairingFailed>:
   11554:	b538      	push	{r3, r4, r5, lr}
   11556:	4604      	mov	r4, r0
   11558:	460d      	mov	r5, r1
   1155a:	f7ff fff2 	bl	11542 <smpScActCleanup>
   1155e:	4629      	mov	r1, r5
   11560:	4620      	mov	r0, r4
   11562:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11566:	f000 bb1a 	b.w	11b9e <smpActPairingFailed>

0001156a <smpScActPairingCancel>:
   1156a:	b538      	push	{r3, r4, r5, lr}
   1156c:	4605      	mov	r5, r0
   1156e:	460c      	mov	r4, r1
   11570:	78c9      	ldrb	r1, [r1, #3]
   11572:	f000 fb03 	bl	11b7c <smpSendPairingFailed>
   11576:	4621      	mov	r1, r4
   11578:	4628      	mov	r0, r5
   1157a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1157e:	f7ff bfe9 	b.w	11554 <smpScActPairingFailed>

00011582 <smpScActAuthSelect>:
   11582:	b537      	push	{r0, r1, r2, r4, r5, lr}
   11584:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11586:	684d      	ldr	r5, [r1, #4]
   11588:	4604      	mov	r4, r0
   1158a:	2220      	movs	r2, #32
   1158c:	6898      	ldr	r0, [r3, #8]
   1158e:	f105 0109 	add.w	r1, r5, #9
   11592:	f001 fce1 	bl	12f58 <WStrReverseCpy>
   11596:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11598:	6898      	ldr	r0, [r3, #8]
   1159a:	2220      	movs	r2, #32
   1159c:	f105 0129 	add.w	r1, r5, #41	; 0x29
   115a0:	4410      	add	r0, r2
   115a2:	f001 fcd9 	bl	12f58 <WStrReverseCpy>
   115a6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   115aa:	f8ad 3004 	strh.w	r3, [sp, #4]
   115ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
   115b0:	785b      	ldrb	r3, [r3, #1]
   115b2:	3b01      	subs	r3, #1
   115b4:	2b03      	cmp	r3, #3
   115b6:	d810      	bhi.n	115da <smpScActAuthSelect+0x58>
   115b8:	e8df f003 	tbb	[pc, r3]
   115bc:	020d0b02 	.word	0x020d0b02
   115c0:	2312      	movs	r3, #18
   115c2:	f88d 3006 	strb.w	r3, [sp, #6]
   115c6:	a901      	add	r1, sp, #4
   115c8:	4620      	mov	r0, r4
   115ca:	f000 fcc8 	bl	11f5e <smpSmExecute>
   115ce:	b003      	add	sp, #12
   115d0:	bd30      	pop	{r4, r5, pc}
   115d2:	2314      	movs	r3, #20
   115d4:	e7f5      	b.n	115c2 <smpScActAuthSelect+0x40>
   115d6:	2313      	movs	r3, #19
   115d8:	e7f3      	b.n	115c2 <smpScActAuthSelect+0x40>
   115da:	f640 0303 	movw	r3, #2051	; 0x803
   115de:	f8ad 3006 	strh.w	r3, [sp, #6]
   115e2:	e7f0      	b.n	115c6 <smpScActAuthSelect+0x44>

000115e4 <smpScActPkSetup>:
   115e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   115e6:	6b43      	ldr	r3, [r0, #52]	; 0x34
   115e8:	2200      	movs	r2, #0
   115ea:	70da      	strb	r2, [r3, #3]
   115ec:	2103      	movs	r1, #3
   115ee:	f880 102f 	strb.w	r1, [r0, #47]	; 0x2f
   115f2:	f88d 2004 	strb.w	r2, [sp, #4]
   115f6:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
   115fa:	f8ad 1000 	strh.w	r1, [sp]
   115fe:	791b      	ldrb	r3, [r3, #4]
   11600:	f88d 3005 	strb.w	r3, [sp, #5]
   11604:	212e      	movs	r1, #46	; 0x2e
   11606:	4668      	mov	r0, sp
   11608:	f88d 1002 	strb.w	r1, [sp, #2]
   1160c:	f7fe fdca 	bl	101a4 <DmSmpCbackExec>
   11610:	b007      	add	sp, #28
   11612:	f85d fb04 	ldr.w	pc, [sp], #4

00011616 <smpScActJwncCalcF4>:
   11616:	b573      	push	{r0, r1, r4, r5, r6, lr}
   11618:	f890 602a 	ldrb.w	r6, [r0, #42]	; 0x2a
   1161c:	4604      	mov	r4, r0
   1161e:	460d      	mov	r5, r1
   11620:	b18e      	cbz	r6, 11646 <smpScActJwncCalcF4+0x30>
   11622:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11624:	689e      	ldr	r6, [r3, #8]
   11626:	f7fe ff71 	bl	1050c <DmSecGetEccKey>
   1162a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1162c:	68db      	ldr	r3, [r3, #12]
   1162e:	3310      	adds	r3, #16
   11630:	9301      	str	r3, [sp, #4]
   11632:	2300      	movs	r3, #0
   11634:	9300      	str	r3, [sp, #0]
   11636:	4632      	mov	r2, r6
   11638:	4603      	mov	r3, r0
   1163a:	4629      	mov	r1, r5
   1163c:	4620      	mov	r0, r4
   1163e:	f7ff fc71 	bl	10f24 <SmpScCalcF4>
   11642:	b002      	add	sp, #8
   11644:	bd70      	pop	{r4, r5, r6, pc}
   11646:	f7fe ff61 	bl	1050c <DmSecGetEccKey>
   1164a:	6b62      	ldr	r2, [r4, #52]	; 0x34
   1164c:	68d3      	ldr	r3, [r2, #12]
   1164e:	3310      	adds	r3, #16
   11650:	e9cd 6300 	strd	r6, r3, [sp]
   11654:	6893      	ldr	r3, [r2, #8]
   11656:	4602      	mov	r2, r0
   11658:	e7ef      	b.n	1163a <smpScActJwncCalcF4+0x24>

0001165a <smpScActJwncCalcG2>:
   1165a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1165c:	460a      	mov	r2, r1
   1165e:	4604      	mov	r4, r0
   11660:	460e      	mov	r6, r1
   11662:	4601      	mov	r1, r0
   11664:	2050      	movs	r0, #80	; 0x50
   11666:	f7ff fc4b 	bl	10f00 <SmpScAlloc>
   1166a:	4605      	mov	r5, r0
   1166c:	b1d8      	cbz	r0, 116a6 <smpScActJwncCalcG2+0x4c>
   1166e:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   11672:	b1d3      	cbz	r3, 116aa <smpScActJwncCalcG2+0x50>
   11674:	f7fe ff4a 	bl	1050c <DmSecGetEccKey>
   11678:	2220      	movs	r2, #32
   1167a:	4601      	mov	r1, r0
   1167c:	4628      	mov	r0, r5
   1167e:	f7ff fcb3 	bl	10fe8 <SmpScCat>
   11682:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11684:	6899      	ldr	r1, [r3, #8]
   11686:	2220      	movs	r2, #32
   11688:	f7ff fcae 	bl	10fe8 <SmpScCat>
   1168c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1168e:	68d9      	ldr	r1, [r3, #12]
   11690:	3110      	adds	r1, #16
   11692:	f7ff fcaf 	bl	10ff4 <SmpScCat128>
   11696:	6b60      	ldr	r0, [r4, #52]	; 0x34
   11698:	9600      	str	r6, [sp, #0]
   1169a:	4623      	mov	r3, r4
   1169c:	2250      	movs	r2, #80	; 0x50
   1169e:	4629      	mov	r1, r5
   116a0:	68c0      	ldr	r0, [r0, #12]
   116a2:	f7ff fc11 	bl	10ec8 <SmpScCmac>
   116a6:	b003      	add	sp, #12
   116a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   116aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
   116ac:	2220      	movs	r2, #32
   116ae:	6899      	ldr	r1, [r3, #8]
   116b0:	f7ff fc9a 	bl	10fe8 <SmpScCat>
   116b4:	4607      	mov	r7, r0
   116b6:	f7fe ff29 	bl	1050c <DmSecGetEccKey>
   116ba:	2220      	movs	r2, #32
   116bc:	4601      	mov	r1, r0
   116be:	4638      	mov	r0, r7
   116c0:	e7e2      	b.n	11688 <smpScActJwncCalcG2+0x2e>

000116c2 <smpScActJwncDisplay>:
   116c2:	b510      	push	{r4, lr}
   116c4:	6b43      	ldr	r3, [r0, #52]	; 0x34
   116c6:	785b      	ldrb	r3, [r3, #1]
   116c8:	2b04      	cmp	r3, #4
   116ca:	b086      	sub	sp, #24
   116cc:	4604      	mov	r4, r0
   116ce:	d10f      	bne.n	116f0 <smpScActJwncDisplay+0x2e>
   116d0:	a802      	add	r0, sp, #8
   116d2:	6849      	ldr	r1, [r1, #4]
   116d4:	f001 fc06 	bl	12ee4 <Calc128Cpy>
   116d8:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   116dc:	f8ad 3004 	strh.w	r3, [sp, #4]
   116e0:	a801      	add	r0, sp, #4
   116e2:	2335      	movs	r3, #53	; 0x35
   116e4:	f88d 3006 	strb.w	r3, [sp, #6]
   116e8:	f7fe fd5c 	bl	101a4 <DmSmpCbackExec>
   116ec:	b006      	add	sp, #24
   116ee:	bd10      	pop	{r4, pc}
   116f0:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   116f4:	f8ad 3004 	strh.w	r3, [sp, #4]
   116f8:	a901      	add	r1, sp, #4
   116fa:	2315      	movs	r3, #21
   116fc:	f88d 3006 	strb.w	r3, [sp, #6]
   11700:	f000 fc2d 	bl	11f5e <smpSmExecute>
   11704:	e7f2      	b.n	116ec <smpScActJwncDisplay+0x2a>

00011706 <smpScActPkKeypress>:
   11706:	b537      	push	{r0, r1, r2, r4, r5, lr}
   11708:	684c      	ldr	r4, [r1, #4]
   1170a:	7a22      	ldrb	r2, [r4, #8]
   1170c:	2a0e      	cmp	r2, #14
   1170e:	d10e      	bne.n	1172e <smpScActPkKeypress+0x28>
   11710:	7a63      	ldrb	r3, [r4, #9]
   11712:	f88d 3004 	strb.w	r3, [sp, #4]
   11716:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   1171a:	f8ad 3000 	strh.w	r3, [sp]
   1171e:	4668      	mov	r0, sp
   11720:	2336      	movs	r3, #54	; 0x36
   11722:	f88d 3002 	strb.w	r3, [sp, #2]
   11726:	f7fe fd3d 	bl	101a4 <DmSmpCbackExec>
   1172a:	b003      	add	sp, #12
   1172c:	bd30      	pop	{r4, r5, pc}
   1172e:	2a03      	cmp	r2, #3
   11730:	d1fb      	bne.n	1172a <smpScActPkKeypress+0x24>
   11732:	221d      	movs	r2, #29
   11734:	708a      	strb	r2, [r1, #2]
   11736:	f000 fc12 	bl	11f5e <smpSmExecute>
   1173a:	e7f6      	b.n	1172a <smpScActPkKeypress+0x24>

0001173c <smpScActPkSendKeypress>:
   1173c:	b538      	push	{r3, r4, r5, lr}
   1173e:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11740:	789b      	ldrb	r3, [r3, #2]
   11742:	4604      	mov	r4, r0
   11744:	460d      	mov	r5, r1
   11746:	b1c3      	cbz	r3, 1177a <smpScActPkSendKeypress+0x3e>
   11748:	f000 f9f6 	bl	11b38 <smpStartRspTimer>
   1174c:	200a      	movs	r0, #10
   1174e:	f7ff faef 	bl	10d30 <smpMsgAlloc>
   11752:	b148      	cbz	r0, 11768 <smpScActPkSendKeypress+0x2c>
   11754:	230e      	movs	r3, #14
   11756:	7203      	strb	r3, [r0, #8]
   11758:	792b      	ldrb	r3, [r5, #4]
   1175a:	7243      	strb	r3, [r0, #9]
   1175c:	4601      	mov	r1, r0
   1175e:	4620      	mov	r0, r4
   11760:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11764:	f7ff ba99 	b.w	10c9a <smpSendPkt>
   11768:	f640 0303 	movw	r3, #2051	; 0x803
   1176c:	806b      	strh	r3, [r5, #2]
   1176e:	4629      	mov	r1, r5
   11770:	4620      	mov	r0, r4
   11772:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11776:	f000 bbf2 	b.w	11f5e <smpSmExecute>
   1177a:	bd38      	pop	{r3, r4, r5, pc}

0001177c <smpScActCalcSharedSecret>:
   1177c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1177e:	b099      	sub	sp, #100	; 0x64
   11780:	4605      	mov	r5, r0
   11782:	f7fe fec3 	bl	1050c <DmSecGetEccKey>
   11786:	ae10      	add	r6, sp, #64	; 0x40
   11788:	f100 0340 	add.w	r3, r0, #64	; 0x40
   1178c:	f100 0260 	add.w	r2, r0, #96	; 0x60
   11790:	6818      	ldr	r0, [r3, #0]
   11792:	6859      	ldr	r1, [r3, #4]
   11794:	4634      	mov	r4, r6
   11796:	c403      	stmia	r4!, {r0, r1}
   11798:	3308      	adds	r3, #8
   1179a:	4293      	cmp	r3, r2
   1179c:	4626      	mov	r6, r4
   1179e:	d1f7      	bne.n	11790 <smpScActCalcSharedSecret+0x14>
   117a0:	6b6e      	ldr	r6, [r5, #52]	; 0x34
   117a2:	68b3      	ldr	r3, [r6, #8]
   117a4:	466a      	mov	r2, sp
   117a6:	f103 0c20 	add.w	ip, r3, #32
   117aa:	4617      	mov	r7, r2
   117ac:	6818      	ldr	r0, [r3, #0]
   117ae:	6859      	ldr	r1, [r3, #4]
   117b0:	4614      	mov	r4, r2
   117b2:	c403      	stmia	r4!, {r0, r1}
   117b4:	3308      	adds	r3, #8
   117b6:	4563      	cmp	r3, ip
   117b8:	4622      	mov	r2, r4
   117ba:	d1f7      	bne.n	117ac <smpScActCalcSharedSecret+0x30>
   117bc:	68b3      	ldr	r3, [r6, #8]
   117be:	ac08      	add	r4, sp, #32
   117c0:	f103 0640 	add.w	r6, r3, #64	; 0x40
   117c4:	3320      	adds	r3, #32
   117c6:	6818      	ldr	r0, [r3, #0]
   117c8:	6859      	ldr	r1, [r3, #4]
   117ca:	4622      	mov	r2, r4
   117cc:	c203      	stmia	r2!, {r0, r1}
   117ce:	3308      	adds	r3, #8
   117d0:	42b3      	cmp	r3, r6
   117d2:	4614      	mov	r4, r2
   117d4:	d1f7      	bne.n	117c6 <smpScActCalcSharedSecret+0x4a>
   117d6:	4905      	ldr	r1, [pc, #20]	; (117ec <smpScActCalcSharedSecret+0x70>)
   117d8:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
   117dc:	f891 11c8 	ldrb.w	r1, [r1, #456]	; 0x1c8
   117e0:	2318      	movs	r3, #24
   117e2:	4638      	mov	r0, r7
   117e4:	f001 fee0 	bl	135a8 <SecEccGenSharedSecret>
   117e8:	b019      	add	sp, #100	; 0x64
   117ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   117ec:	10003d50 	.word	0x10003d50

000117f0 <smpScActCalcF5TKey>:
   117f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   117f4:	460a      	mov	r2, r1
   117f6:	b086      	sub	sp, #24
   117f8:	4680      	mov	r8, r0
   117fa:	460c      	mov	r4, r1
   117fc:	4601      	mov	r1, r0
   117fe:	2020      	movs	r0, #32
   11800:	f7ff fb7e 	bl	10f00 <SmpScAlloc>
   11804:	4607      	mov	r7, r0
   11806:	b1e8      	cbz	r0, 11844 <smpScActCalcF5TKey+0x54>
   11808:	4a10      	ldr	r2, [pc, #64]	; (1184c <smpScActCalcF5TKey+0x5c>)
   1180a:	ad02      	add	r5, sp, #8
   1180c:	f102 0310 	add.w	r3, r2, #16
   11810:	46ac      	mov	ip, r5
   11812:	6810      	ldr	r0, [r2, #0]
   11814:	6851      	ldr	r1, [r2, #4]
   11816:	462e      	mov	r6, r5
   11818:	c603      	stmia	r6!, {r0, r1}
   1181a:	3208      	adds	r2, #8
   1181c:	429a      	cmp	r2, r3
   1181e:	4635      	mov	r5, r6
   11820:	d1f7      	bne.n	11812 <smpScActCalcF5TKey+0x22>
   11822:	1d22      	adds	r2, r4, #4
   11824:	463b      	mov	r3, r7
   11826:	f104 0124 	add.w	r1, r4, #36	; 0x24
   1182a:	f852 0b04 	ldr.w	r0, [r2], #4
   1182e:	f843 0b04 	str.w	r0, [r3], #4
   11832:	428a      	cmp	r2, r1
   11834:	d1f9      	bne.n	1182a <smpScActCalcF5TKey+0x3a>
   11836:	9400      	str	r4, [sp, #0]
   11838:	4643      	mov	r3, r8
   1183a:	2220      	movs	r2, #32
   1183c:	4639      	mov	r1, r7
   1183e:	4660      	mov	r0, ip
   11840:	f7ff fb42 	bl	10ec8 <SmpScCmac>
   11844:	b006      	add	sp, #24
   11846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1184a:	bf00      	nop
   1184c:	000249a4 	.word	0x000249a4

00011850 <smpScActCalcF5MacKey>:
   11850:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11852:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11854:	4604      	mov	r4, r0
   11856:	6918      	ldr	r0, [r3, #16]
   11858:	460e      	mov	r6, r1
   1185a:	3010      	adds	r0, #16
   1185c:	6849      	ldr	r1, [r1, #4]
   1185e:	f001 fb41 	bl	12ee4 <Calc128Cpy>
   11862:	4632      	mov	r2, r6
   11864:	4621      	mov	r1, r4
   11866:	2035      	movs	r0, #53	; 0x35
   11868:	f7ff fb4a 	bl	10f00 <SmpScAlloc>
   1186c:	4605      	mov	r5, r0
   1186e:	b318      	cbz	r0, 118b8 <smpScActCalcF5MacKey+0x68>
   11870:	2700      	movs	r7, #0
   11872:	2204      	movs	r2, #4
   11874:	7007      	strb	r7, [r0, #0]
   11876:	4911      	ldr	r1, [pc, #68]	; (118bc <smpScActCalcF5MacKey+0x6c>)
   11878:	3001      	adds	r0, #1
   1187a:	f7ff fbb5 	bl	10fe8 <SmpScCat>
   1187e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11880:	68d9      	ldr	r1, [r3, #12]
   11882:	f7ff fbb7 	bl	10ff4 <SmpScCat128>
   11886:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11888:	68d9      	ldr	r1, [r3, #12]
   1188a:	3110      	adds	r1, #16
   1188c:	f7ff fbb2 	bl	10ff4 <SmpScCat128>
   11890:	4601      	mov	r1, r0
   11892:	4620      	mov	r0, r4
   11894:	f7ff fce0 	bl	11258 <smpScCatInitiatorBdAddr>
   11898:	4601      	mov	r1, r0
   1189a:	4620      	mov	r0, r4
   1189c:	f7ff fd0a 	bl	112b4 <smpScCatResponderBdAddr>
   118a0:	2301      	movs	r3, #1
   118a2:	7003      	strb	r3, [r0, #0]
   118a4:	7047      	strb	r7, [r0, #1]
   118a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   118a8:	6918      	ldr	r0, [r3, #16]
   118aa:	9600      	str	r6, [sp, #0]
   118ac:	4623      	mov	r3, r4
   118ae:	2235      	movs	r2, #53	; 0x35
   118b0:	4629      	mov	r1, r5
   118b2:	3010      	adds	r0, #16
   118b4:	f7ff fb08 	bl	10ec8 <SmpScCmac>
   118b8:	b003      	add	sp, #12
   118ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   118bc:	000249b4 	.word	0x000249b4

000118c0 <smpScActCalcF5Ltk>:
   118c0:	6b43      	ldr	r3, [r0, #52]	; 0x34
   118c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   118c4:	4604      	mov	r4, r0
   118c6:	460e      	mov	r6, r1
   118c8:	6918      	ldr	r0, [r3, #16]
   118ca:	6849      	ldr	r1, [r1, #4]
   118cc:	f001 fb0a 	bl	12ee4 <Calc128Cpy>
   118d0:	4632      	mov	r2, r6
   118d2:	4621      	mov	r1, r4
   118d4:	2035      	movs	r0, #53	; 0x35
   118d6:	f7ff fb13 	bl	10f00 <SmpScAlloc>
   118da:	4605      	mov	r5, r0
   118dc:	b318      	cbz	r0, 11926 <smpScActCalcF5Ltk+0x66>
   118de:	2701      	movs	r7, #1
   118e0:	2204      	movs	r2, #4
   118e2:	7007      	strb	r7, [r0, #0]
   118e4:	4911      	ldr	r1, [pc, #68]	; (1192c <smpScActCalcF5Ltk+0x6c>)
   118e6:	4438      	add	r0, r7
   118e8:	f7ff fb7e 	bl	10fe8 <SmpScCat>
   118ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
   118ee:	68d9      	ldr	r1, [r3, #12]
   118f0:	f7ff fb80 	bl	10ff4 <SmpScCat128>
   118f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   118f6:	68d9      	ldr	r1, [r3, #12]
   118f8:	3110      	adds	r1, #16
   118fa:	f7ff fb7b 	bl	10ff4 <SmpScCat128>
   118fe:	4601      	mov	r1, r0
   11900:	4620      	mov	r0, r4
   11902:	f7ff fca9 	bl	11258 <smpScCatInitiatorBdAddr>
   11906:	4601      	mov	r1, r0
   11908:	4620      	mov	r0, r4
   1190a:	f7ff fcd3 	bl	112b4 <smpScCatResponderBdAddr>
   1190e:	2300      	movs	r3, #0
   11910:	7007      	strb	r7, [r0, #0]
   11912:	7043      	strb	r3, [r0, #1]
   11914:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11916:	6918      	ldr	r0, [r3, #16]
   11918:	9600      	str	r6, [sp, #0]
   1191a:	4623      	mov	r3, r4
   1191c:	2235      	movs	r2, #53	; 0x35
   1191e:	4629      	mov	r1, r5
   11920:	3010      	adds	r0, #16
   11922:	f7ff fad1 	bl	10ec8 <SmpScCmac>
   11926:	b003      	add	sp, #12
   11928:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1192a:	bf00      	nop
   1192c:	000249b4 	.word	0x000249b4

00011930 <smpScActDHKeyCalcF6Ea>:
   11930:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11932:	b573      	push	{r0, r1, r4, r5, r6, lr}
   11934:	4604      	mov	r4, r0
   11936:	6918      	ldr	r0, [r3, #16]
   11938:	2210      	movs	r2, #16
   1193a:	4410      	add	r0, r2
   1193c:	460d      	mov	r5, r1
   1193e:	6849      	ldr	r1, [r1, #4]
   11940:	f001 fb0a 	bl	12f58 <WStrReverseCpy>
   11944:	462a      	mov	r2, r5
   11946:	4621      	mov	r1, r4
   11948:	2041      	movs	r0, #65	; 0x41
   1194a:	f7ff fad9 	bl	10f00 <SmpScAlloc>
   1194e:	4606      	mov	r6, r0
   11950:	b318      	cbz	r0, 1199a <smpScActDHKeyCalcF6Ea+0x6a>
   11952:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11954:	68d9      	ldr	r1, [r3, #12]
   11956:	f7ff fb4d 	bl	10ff4 <SmpScCat128>
   1195a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1195c:	68d9      	ldr	r1, [r3, #12]
   1195e:	3110      	adds	r1, #16
   11960:	f7ff fb48 	bl	10ff4 <SmpScCat128>
   11964:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11966:	68d9      	ldr	r1, [r3, #12]
   11968:	3130      	adds	r1, #48	; 0x30
   1196a:	f7ff fb43 	bl	10ff4 <SmpScCat128>
   1196e:	7ce3      	ldrb	r3, [r4, #19]
   11970:	7003      	strb	r3, [r0, #0]
   11972:	7ca3      	ldrb	r3, [r4, #18]
   11974:	7043      	strb	r3, [r0, #1]
   11976:	7c63      	ldrb	r3, [r4, #17]
   11978:	7083      	strb	r3, [r0, #2]
   1197a:	1cc1      	adds	r1, r0, #3
   1197c:	4620      	mov	r0, r4
   1197e:	f7ff fc6b 	bl	11258 <smpScCatInitiatorBdAddr>
   11982:	4601      	mov	r1, r0
   11984:	4620      	mov	r0, r4
   11986:	f7ff fc95 	bl	112b4 <smpScCatResponderBdAddr>
   1198a:	6b60      	ldr	r0, [r4, #52]	; 0x34
   1198c:	9500      	str	r5, [sp, #0]
   1198e:	4623      	mov	r3, r4
   11990:	2241      	movs	r2, #65	; 0x41
   11992:	4631      	mov	r1, r6
   11994:	6900      	ldr	r0, [r0, #16]
   11996:	f7ff fa97 	bl	10ec8 <SmpScCmac>
   1199a:	b002      	add	sp, #8
   1199c:	bd70      	pop	{r4, r5, r6, pc}

0001199e <smpScActDHKeyCalcF6Eb>:
   1199e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   119a0:	460a      	mov	r2, r1
   119a2:	4604      	mov	r4, r0
   119a4:	460d      	mov	r5, r1
   119a6:	4601      	mov	r1, r0
   119a8:	2041      	movs	r0, #65	; 0x41
   119aa:	f7ff faa9 	bl	10f00 <SmpScAlloc>
   119ae:	4606      	mov	r6, r0
   119b0:	b318      	cbz	r0, 119fa <smpScActDHKeyCalcF6Eb+0x5c>
   119b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   119b4:	68d9      	ldr	r1, [r3, #12]
   119b6:	3110      	adds	r1, #16
   119b8:	f7ff fb1c 	bl	10ff4 <SmpScCat128>
   119bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   119be:	68d9      	ldr	r1, [r3, #12]
   119c0:	f7ff fb18 	bl	10ff4 <SmpScCat128>
   119c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   119c6:	68d9      	ldr	r1, [r3, #12]
   119c8:	3120      	adds	r1, #32
   119ca:	f7ff fb13 	bl	10ff4 <SmpScCat128>
   119ce:	7ea3      	ldrb	r3, [r4, #26]
   119d0:	7003      	strb	r3, [r0, #0]
   119d2:	7e63      	ldrb	r3, [r4, #25]
   119d4:	7043      	strb	r3, [r0, #1]
   119d6:	7e23      	ldrb	r3, [r4, #24]
   119d8:	7083      	strb	r3, [r0, #2]
   119da:	1cc1      	adds	r1, r0, #3
   119dc:	4620      	mov	r0, r4
   119de:	f7ff fc69 	bl	112b4 <smpScCatResponderBdAddr>
   119e2:	4601      	mov	r1, r0
   119e4:	4620      	mov	r0, r4
   119e6:	f7ff fc37 	bl	11258 <smpScCatInitiatorBdAddr>
   119ea:	6b60      	ldr	r0, [r4, #52]	; 0x34
   119ec:	9500      	str	r5, [sp, #0]
   119ee:	4623      	mov	r3, r4
   119f0:	2241      	movs	r2, #65	; 0x41
   119f2:	4631      	mov	r1, r6
   119f4:	6900      	ldr	r0, [r0, #16]
   119f6:	f7ff fa67 	bl	10ec8 <SmpScCmac>
   119fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
   119fc:	6869      	ldr	r1, [r5, #4]
   119fe:	68d8      	ldr	r0, [r3, #12]
   11a00:	b002      	add	sp, #8
   11a02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11a06:	f001 ba6d 	b.w	12ee4 <Calc128Cpy>
   11a0a:	bf00      	nop

00011a0c <SmpiScInit>:
   11a0c:	4b02      	ldr	r3, [pc, #8]	; (11a18 <SmpiScInit+0xc>)
   11a0e:	4a03      	ldr	r2, [pc, #12]	; (11a1c <SmpiScInit+0x10>)
   11a10:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
   11a14:	f7ff bab8 	b.w	10f88 <SmpScInit>
   11a18:	10003d50 	.word	0x10003d50
   11a1c:	000249b8 	.word	0x000249b8

00011a20 <smpiStateStr>:
   11a20:	2824      	cmp	r0, #36	; 0x24
   11a22:	bf9d      	ittte	ls
   11a24:	4b02      	ldrls	r3, [pc, #8]	; (11a30 <smpiStateStr+0x10>)
   11a26:	eb03 0080 	addls.w	r0, r3, r0, lsl #2
   11a2a:	68c0      	ldrls	r0, [r0, #12]
   11a2c:	4801      	ldrhi	r0, [pc, #4]	; (11a34 <smpiStateStr+0x14>)
   11a2e:	4770      	bx	lr
   11a30:	000249b8 	.word	0x000249b8
   11a34:	000257a5 	.word	0x000257a5

00011a38 <SmprScInit>:
   11a38:	4b02      	ldr	r3, [pc, #8]	; (11a44 <SmprScInit+0xc>)
   11a3a:	4a03      	ldr	r2, [pc, #12]	; (11a48 <SmprScInit+0x10>)
   11a3c:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
   11a40:	f7ff baa2 	b.w	10f88 <SmpScInit>
   11a44:	10003d50 	.word	0x10003d50
   11a48:	00024ce4 	.word	0x00024ce4

00011a4c <smprStateStr>:
   11a4c:	2824      	cmp	r0, #36	; 0x24
   11a4e:	bf9d      	ittte	ls
   11a50:	4b02      	ldrls	r3, [pc, #8]	; (11a5c <smprStateStr+0x10>)
   11a52:	eb03 0080 	addls.w	r0, r3, r0, lsl #2
   11a56:	68c0      	ldrls	r0, [r0, #12]
   11a58:	4801      	ldrhi	r0, [pc, #4]	; (11a60 <smprStateStr+0x14>)
   11a5a:	4770      	bx	lr
   11a5c:	00024ce4 	.word	0x00024ce4
   11a60:	00025979 	.word	0x00025979

00011a64 <SmprInit>:
   11a64:	4b05      	ldr	r3, [pc, #20]	; (11a7c <SmprInit+0x18>)
   11a66:	4a06      	ldr	r2, [pc, #24]	; (11a80 <SmprInit+0x1c>)
   11a68:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
   11a6c:	4a05      	ldr	r2, [pc, #20]	; (11a84 <SmprInit+0x20>)
   11a6e:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
   11a72:	4a05      	ldr	r2, [pc, #20]	; (11a88 <SmprInit+0x24>)
   11a74:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
   11a78:	4770      	bx	lr
   11a7a:	bf00      	nop
   11a7c:	10003d50 	.word	0x10003d50
   11a80:	00025030 	.word	0x00025030
   11a84:	00011fc1 	.word	0x00011fc1
   11a88:	000120ad 	.word	0x000120ad

00011a8c <DmSmpEncryptReq>:
   11a8c:	b570      	push	{r4, r5, r6, lr}
   11a8e:	460d      	mov	r5, r1
   11a90:	4614      	mov	r4, r2
   11a92:	f7fd fcef 	bl	f474 <dmConnCcbById>
   11a96:	b148      	cbz	r0, 11aac <DmSmpEncryptReq+0x20>
   11a98:	2200      	movs	r2, #0
   11a9a:	7605      	strb	r5, [r0, #24]
   11a9c:	7482      	strb	r2, [r0, #18]
   11a9e:	4623      	mov	r3, r4
   11aa0:	4903      	ldr	r1, [pc, #12]	; (11ab0 <DmSmpEncryptReq+0x24>)
   11aa2:	8980      	ldrh	r0, [r0, #12]
   11aa4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11aa8:	f004 b98c 	b.w	15dc4 <HciLeStartEncryptionCmd>
   11aac:	bd70      	pop	{r4, r5, r6, pc}
   11aae:	bf00      	nop
   11ab0:	00025174 	.word	0x00025174

00011ab4 <DmSecPairReq>:
   11ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11ab8:	4681      	mov	r9, r0
   11aba:	2008      	movs	r0, #8
   11abc:	4688      	mov	r8, r1
   11abe:	4617      	mov	r7, r2
   11ac0:	461e      	mov	r6, r3
   11ac2:	f89d 5020 	ldrb.w	r5, [sp, #32]
   11ac6:	f007 fb39 	bl	1913c <WsfMsgAlloc>
   11aca:	b180      	cbz	r0, 11aee <DmSecPairReq+0x3a>
   11acc:	2301      	movs	r3, #1
   11ace:	f006 0607 	and.w	r6, r6, #7
   11ad2:	f005 0507 	and.w	r5, r5, #7
   11ad6:	7083      	strb	r3, [r0, #2]
   11ad8:	f880 8004 	strb.w	r8, [r0, #4]
   11adc:	7147      	strb	r7, [r0, #5]
   11ade:	7186      	strb	r6, [r0, #6]
   11ae0:	71c5      	strb	r5, [r0, #7]
   11ae2:	f8a0 9000 	strh.w	r9, [r0]
   11ae6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11aea:	f7ff b924 	b.w	10d36 <SmpDmMsgSend>
   11aee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00011af2 <DmSecEncryptReq>:
   11af2:	b570      	push	{r4, r5, r6, lr}
   11af4:	4606      	mov	r6, r0
   11af6:	2020      	movs	r0, #32
   11af8:	460d      	mov	r5, r1
   11afa:	4614      	mov	r4, r2
   11afc:	f007 fb1e 	bl	1913c <WsfMsgAlloc>
   11b00:	b1b8      	cbz	r0, 11b32 <DmSecEncryptReq+0x40>
   11b02:	2350      	movs	r3, #80	; 0x50
   11b04:	7083      	strb	r3, [r0, #2]
   11b06:	4603      	mov	r3, r0
   11b08:	4622      	mov	r2, r4
   11b0a:	f823 6b04 	strh.w	r6, [r3], #4
   11b0e:	f104 0118 	add.w	r1, r4, #24
   11b12:	f852 4b04 	ldr.w	r4, [r2], #4
   11b16:	f843 4b04 	str.w	r4, [r3], #4
   11b1a:	428a      	cmp	r2, r1
   11b1c:	d1f9      	bne.n	11b12 <DmSecEncryptReq+0x20>
   11b1e:	8812      	ldrh	r2, [r2, #0]
   11b20:	801a      	strh	r2, [r3, #0]
   11b22:	4b04      	ldr	r3, [pc, #16]	; (11b34 <DmSecEncryptReq+0x42>)
   11b24:	7785      	strb	r5, [r0, #30]
   11b26:	4601      	mov	r1, r0
   11b28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11b2c:	7b18      	ldrb	r0, [r3, #12]
   11b2e:	f007 bb29 	b.w	19184 <WsfMsgSend>
   11b32:	bd70      	pop	{r4, r5, r6, pc}
   11b34:	10003c84 	.word	0x10003c84

00011b38 <smpStartRspTimer>:
   11b38:	f24e 130f 	movw	r3, #57615	; 0xe10f
   11b3c:	8183      	strh	r3, [r0, #12]
   11b3e:	211e      	movs	r1, #30
   11b40:	f007 bcae 	b.w	194a0 <WsfTimerStartSec>

00011b44 <smpActNone>:
   11b44:	4770      	bx	lr

00011b46 <smpCleanup>:
   11b46:	b510      	push	{r4, lr}
   11b48:	4604      	mov	r4, r0
   11b4a:	6a00      	ldr	r0, [r0, #32]
   11b4c:	b118      	cbz	r0, 11b56 <smpCleanup+0x10>
   11b4e:	f007 faa5 	bl	1909c <WsfBufFree>
   11b52:	2300      	movs	r3, #0
   11b54:	6223      	str	r3, [r4, #32]
   11b56:	4620      	mov	r0, r4
   11b58:	f007 fcc6 	bl	194e8 <WsfTimerStop>
   11b5c:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
   11b60:	2300      	movs	r3, #0
   11b62:	429a      	cmp	r2, r3
   11b64:	bf14      	ite	ne
   11b66:	220b      	movne	r2, #11
   11b68:	2201      	moveq	r2, #1
   11b6a:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
   11b6e:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
   11b72:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   11b76:	bd10      	pop	{r4, pc}

00011b78 <smpActCleanup>:
   11b78:	f7ff bfe5 	b.w	11b46 <smpCleanup>

00011b7c <smpSendPairingFailed>:
   11b7c:	b538      	push	{r3, r4, r5, lr}
   11b7e:	4604      	mov	r4, r0
   11b80:	200a      	movs	r0, #10
   11b82:	460d      	mov	r5, r1
   11b84:	f7ff f8d4 	bl	10d30 <smpMsgAlloc>
   11b88:	b140      	cbz	r0, 11b9c <smpSendPairingFailed+0x20>
   11b8a:	2305      	movs	r3, #5
   11b8c:	7203      	strb	r3, [r0, #8]
   11b8e:	7245      	strb	r5, [r0, #9]
   11b90:	4601      	mov	r1, r0
   11b92:	4620      	mov	r0, r4
   11b94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11b98:	f7ff b87f 	b.w	10c9a <smpSendPkt>
   11b9c:	bd38      	pop	{r3, r4, r5, pc}

00011b9e <smpActPairingFailed>:
   11b9e:	b538      	push	{r3, r4, r5, lr}
   11ba0:	4605      	mov	r5, r0
   11ba2:	460c      	mov	r4, r1
   11ba4:	f7ff ffcf 	bl	11b46 <smpCleanup>
   11ba8:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
   11bac:	2200      	movs	r2, #0
   11bae:	2101      	movs	r1, #1
   11bb0:	f7fd fee0 	bl	f974 <DmConnSetIdle>
   11bb4:	232b      	movs	r3, #43	; 0x2b
   11bb6:	70a3      	strb	r3, [r4, #2]
   11bb8:	4620      	mov	r0, r4
   11bba:	f7fe faf3 	bl	101a4 <DmSmpCbackExec>
   11bbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11bc2:	f7fe bca3 	b.w	1050c <DmSecGetEccKey>

00011bc6 <smpActPairingCancel>:
   11bc6:	b538      	push	{r3, r4, r5, lr}
   11bc8:	4605      	mov	r5, r0
   11bca:	460c      	mov	r4, r1
   11bcc:	78c9      	ldrb	r1, [r1, #3]
   11bce:	f7ff ffd5 	bl	11b7c <smpSendPairingFailed>
   11bd2:	4621      	mov	r1, r4
   11bd4:	4628      	mov	r0, r5
   11bd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11bda:	f7ff bfe0 	b.w	11b9e <smpActPairingFailed>

00011bde <smpActStorePin>:
   11bde:	b538      	push	{r3, r4, r5, lr}
   11be0:	460c      	mov	r4, r1
   11be2:	7d0a      	ldrb	r2, [r1, #20]
   11be4:	4605      	mov	r5, r0
   11be6:	3104      	adds	r1, #4
   11be8:	6a00      	ldr	r0, [r0, #32]
   11bea:	f7fa fa89 	bl	c100 <memcpy>
   11bee:	7d23      	ldrb	r3, [r4, #20]
   11bf0:	2b03      	cmp	r3, #3
   11bf2:	d107      	bne.n	11c04 <smpActStorePin+0x26>
   11bf4:	6a28      	ldr	r0, [r5, #32]
   11bf6:	220d      	movs	r2, #13
   11bf8:	2100      	movs	r1, #0
   11bfa:	3003      	adds	r0, #3
   11bfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11c00:	f00e bbf4 	b.w	203ec <memset>
   11c04:	bd38      	pop	{r3, r4, r5, pc}

00011c06 <smpActPairCnfCalc1>:
   11c06:	b510      	push	{r4, lr}
   11c08:	4604      	mov	r4, r0
   11c0a:	f7ff ffe8 	bl	11bde <smpActStorePin>
   11c0e:	6a20      	ldr	r0, [r4, #32]
   11c10:	2110      	movs	r1, #16
   11c12:	3030      	adds	r0, #48	; 0x30
   11c14:	f001 fde0 	bl	137d8 <SecRand>
   11c18:	6a21      	ldr	r1, [r4, #32]
   11c1a:	4620      	mov	r0, r4
   11c1c:	f101 0230 	add.w	r2, r1, #48	; 0x30
   11c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11c24:	f7fe bee0 	b.w	109e8 <smpCalcC1Part1>

00011c28 <smpActPairCnfCalc2>:
   11c28:	684a      	ldr	r2, [r1, #4]
   11c2a:	6a01      	ldr	r1, [r0, #32]
   11c2c:	f7fe bf5e 	b.w	10aec <smpCalcC1Part2>

00011c30 <smpActSendPairCnf>:
   11c30:	b538      	push	{r3, r4, r5, lr}
   11c32:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   11c36:	2b00      	cmp	r3, #0
   11c38:	bf14      	ite	ne
   11c3a:	2303      	movne	r3, #3
   11c3c:	2304      	moveq	r3, #4
   11c3e:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
   11c42:	4604      	mov	r4, r0
   11c44:	460d      	mov	r5, r1
   11c46:	f7ff ff77 	bl	11b38 <smpStartRspTimer>
   11c4a:	2019      	movs	r0, #25
   11c4c:	f7ff f870 	bl	10d30 <smpMsgAlloc>
   11c50:	b190      	cbz	r0, 11c78 <smpActSendPairCnf+0x48>
   11c52:	2303      	movs	r3, #3
   11c54:	7203      	strb	r3, [r0, #8]
   11c56:	686b      	ldr	r3, [r5, #4]
   11c58:	f100 0209 	add.w	r2, r0, #9
   11c5c:	f103 0110 	add.w	r1, r3, #16
   11c60:	f853 5b04 	ldr.w	r5, [r3], #4
   11c64:	f842 5b04 	str.w	r5, [r2], #4
   11c68:	428b      	cmp	r3, r1
   11c6a:	d1f9      	bne.n	11c60 <smpActSendPairCnf+0x30>
   11c6c:	4601      	mov	r1, r0
   11c6e:	4620      	mov	r0, r4
   11c70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11c74:	f7ff b811 	b.w	10c9a <smpSendPkt>
   11c78:	bd38      	pop	{r3, r4, r5, pc}

00011c7a <smpActPairCnfVerCalc1>:
   11c7a:	684b      	ldr	r3, [r1, #4]
   11c7c:	6a01      	ldr	r1, [r0, #32]
   11c7e:	f103 0209 	add.w	r2, r3, #9
   11c82:	b430      	push	{r4, r5}
   11c84:	3110      	adds	r1, #16
   11c86:	4614      	mov	r4, r2
   11c88:	3319      	adds	r3, #25
   11c8a:	f854 5b04 	ldr.w	r5, [r4], #4
   11c8e:	f841 5b04 	str.w	r5, [r1], #4
   11c92:	429c      	cmp	r4, r3
   11c94:	d1f9      	bne.n	11c8a <smpActPairCnfVerCalc1+0x10>
   11c96:	6a01      	ldr	r1, [r0, #32]
   11c98:	bc30      	pop	{r4, r5}
   11c9a:	f7fe bea5 	b.w	109e8 <smpCalcC1Part1>

00011c9e <smpActPairCnfVerCalc2>:
   11c9e:	f7ff bfc3 	b.w	11c28 <smpActPairCnfCalc2>

00011ca2 <smpSendKey>:
   11ca2:	b5f0      	push	{r4, r5, r6, r7, lr}
   11ca4:	4f5d      	ldr	r7, [pc, #372]	; (11e1c <smpSendKey+0x17a>)
   11ca6:	f897 31d4 	ldrb.w	r3, [r7, #468]	; 0x1d4
   11caa:	b08b      	sub	sp, #44	; 0x2c
   11cac:	4604      	mov	r4, r0
   11cae:	460e      	mov	r6, r1
   11cb0:	b343      	cbz	r3, 11d04 <smpSendKey+0x62>
   11cb2:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11cb4:	781b      	ldrb	r3, [r3, #0]
   11cb6:	b32b      	cbz	r3, 11d04 <smpSendKey+0x62>
   11cb8:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
   11cbc:	bb13      	cbnz	r3, 11d04 <smpSendKey+0x62>
   11cbe:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   11cc2:	f7fd fe81 	bl	f9c8 <DmConnRole>
   11cc6:	bb48      	cbnz	r0, 11d1c <smpSendKey+0x7a>
   11cc8:	2302      	movs	r3, #2
   11cca:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   11cce:	232f      	movs	r3, #47	; 0x2f
   11cd0:	f88d 3006 	strb.w	r3, [sp, #6]
   11cd4:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   11cd8:	f8ad 3004 	strh.w	r3, [sp, #4]
   11cdc:	2303      	movs	r3, #3
   11cde:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
   11ce2:	2300      	movs	r3, #0
   11ce4:	e9cd 3306 	strd	r3, r3, [sp, #24]
   11ce8:	f8ad 3020 	strh.w	r3, [sp, #32]
   11cec:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11cee:	6919      	ldr	r1, [r3, #16]
   11cf0:	a802      	add	r0, sp, #8
   11cf2:	3110      	adds	r1, #16
   11cf4:	f001 f8f6 	bl	12ee4 <Calc128Cpy>
   11cf8:	a801      	add	r0, sp, #4
   11cfa:	f7fe fa53 	bl	101a4 <DmSmpCbackExec>
   11cfe:	2307      	movs	r3, #7
   11d00:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   11d04:	2e00      	cmp	r6, #0
   11d06:	f000 8086 	beq.w	11e16 <smpSendKey+0x174>
   11d0a:	2e01      	cmp	r6, #1
   11d0c:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
   11d10:	d106      	bne.n	11d20 <smpSendKey+0x7e>
   11d12:	2b07      	cmp	r3, #7
   11d14:	d106      	bne.n	11d24 <smpSendKey+0x82>
   11d16:	4630      	mov	r0, r6
   11d18:	b00b      	add	sp, #44	; 0x2c
   11d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11d1c:	2301      	movs	r3, #1
   11d1e:	e7d4      	b.n	11cca <smpSendKey+0x28>
   11d20:	2e03      	cmp	r6, #3
   11d22:	d801      	bhi.n	11d28 <smpSendKey+0x86>
   11d24:	2b09      	cmp	r3, #9
   11d26:	d076      	beq.n	11e16 <smpSendKey+0x174>
   11d28:	2b0a      	cmp	r3, #10
   11d2a:	d074      	beq.n	11e16 <smpSendKey+0x174>
   11d2c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   11d30:	b10b      	cbz	r3, 11d36 <smpSendKey+0x94>
   11d32:	2600      	movs	r6, #0
   11d34:	e7ef      	b.n	11d16 <smpSendKey+0x74>
   11d36:	2019      	movs	r0, #25
   11d38:	f7fe fffa 	bl	10d30 <smpMsgAlloc>
   11d3c:	4605      	mov	r5, r0
   11d3e:	2800      	cmp	r0, #0
   11d40:	d0f7      	beq.n	11d32 <smpSendKey+0x90>
   11d42:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
   11d46:	b96b      	cbnz	r3, 11d64 <smpSendKey+0xc2>
   11d48:	07f0      	lsls	r0, r6, #31
   11d4a:	d539      	bpl.n	11dc0 <smpSendKey+0x11e>
   11d4c:	4620      	mov	r0, r4
   11d4e:	f7fe ff75 	bl	10c3c <smpGenerateLtk>
   11d52:	2306      	movs	r3, #6
   11d54:	722b      	strb	r3, [r5, #8]
   11d56:	6a21      	ldr	r1, [r4, #32]
   11d58:	3104      	adds	r1, #4
   11d5a:	f105 0009 	add.w	r0, r5, #9
   11d5e:	f001 f8c1 	bl	12ee4 <Calc128Cpy>
   11d62:	e012      	b.n	11d8a <smpSendKey+0xe8>
   11d64:	2b06      	cmp	r3, #6
   11d66:	d12b      	bne.n	11dc0 <smpSendKey+0x11e>
   11d68:	2307      	movs	r3, #7
   11d6a:	7203      	strb	r3, [r0, #8]
   11d6c:	6a23      	ldr	r3, [r4, #32]
   11d6e:	8b9b      	ldrh	r3, [r3, #28]
   11d70:	7243      	strb	r3, [r0, #9]
   11d72:	6a23      	ldr	r3, [r4, #32]
   11d74:	8b9b      	ldrh	r3, [r3, #28]
   11d76:	0a1b      	lsrs	r3, r3, #8
   11d78:	7283      	strb	r3, [r0, #10]
   11d7a:	6a22      	ldr	r2, [r4, #32]
   11d7c:	f852 3f14 	ldr.w	r3, [r2, #20]!
   11d80:	f8c0 300b 	str.w	r3, [r0, #11]
   11d84:	6853      	ldr	r3, [r2, #4]
   11d86:	f8c0 300f 	str.w	r3, [r0, #15]
   11d8a:	7a2b      	ldrb	r3, [r5, #8]
   11d8c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   11d90:	4629      	mov	r1, r5
   11d92:	4620      	mov	r0, r4
   11d94:	f7fe ff81 	bl	10c9a <smpSendPkt>
   11d98:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
   11d9c:	2e00      	cmp	r6, #0
   11d9e:	d1c8      	bne.n	11d32 <smpSendKey+0x90>
   11da0:	2004      	movs	r0, #4
   11da2:	f007 f9cb 	bl	1913c <WsfMsgAlloc>
   11da6:	4601      	mov	r1, r0
   11da8:	2800      	cmp	r0, #0
   11daa:	d0c2      	beq.n	11d32 <smpSendKey+0x90>
   11dac:	230c      	movs	r3, #12
   11dae:	7083      	strb	r3, [r0, #2]
   11db0:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   11db4:	8003      	strh	r3, [r0, #0]
   11db6:	f897 01c8 	ldrb.w	r0, [r7, #456]	; 0x1c8
   11dba:	f007 f9e3 	bl	19184 <WsfMsgSend>
   11dbe:	e7aa      	b.n	11d16 <smpSendKey+0x74>
   11dc0:	07b1      	lsls	r1, r6, #30
   11dc2:	d508      	bpl.n	11dd6 <smpSendKey+0x134>
   11dc4:	b10b      	cbz	r3, 11dca <smpSendKey+0x128>
   11dc6:	2b07      	cmp	r3, #7
   11dc8:	d105      	bne.n	11dd6 <smpSendKey+0x134>
   11dca:	2308      	movs	r3, #8
   11dcc:	722b      	strb	r3, [r5, #8]
   11dce:	f7fe fab7 	bl	10340 <DmSecGetLocalIrk>
   11dd2:	4601      	mov	r1, r0
   11dd4:	e7c1      	b.n	11d5a <smpSendKey+0xb8>
   11dd6:	2b08      	cmp	r3, #8
   11dd8:	d10b      	bne.n	11df2 <smpSendKey+0x150>
   11dda:	2309      	movs	r3, #9
   11ddc:	722b      	strb	r3, [r5, #8]
   11dde:	2300      	movs	r3, #0
   11de0:	726b      	strb	r3, [r5, #9]
   11de2:	f004 ff45 	bl	16c70 <HciGetBdAddr>
   11de6:	4601      	mov	r1, r0
   11de8:	f105 000a 	add.w	r0, r5, #10
   11dec:	f001 f82e 	bl	12e4c <BdaCpy>
   11df0:	e7cb      	b.n	11d8a <smpSendKey+0xe8>
   11df2:	0772      	lsls	r2, r6, #29
   11df4:	d50c      	bpl.n	11e10 <smpSendKey+0x16e>
   11df6:	2b09      	cmp	r3, #9
   11df8:	d80a      	bhi.n	11e10 <smpSendKey+0x16e>
   11dfa:	f240 2281 	movw	r2, #641	; 0x281
   11dfe:	fa22 f303 	lsr.w	r3, r2, r3
   11e02:	07db      	lsls	r3, r3, #31
   11e04:	d504      	bpl.n	11e10 <smpSendKey+0x16e>
   11e06:	230a      	movs	r3, #10
   11e08:	722b      	strb	r3, [r5, #8]
   11e0a:	f7fe fa93 	bl	10334 <DmSecGetLocalCsrk>
   11e0e:	e7e0      	b.n	11dd2 <smpSendKey+0x130>
   11e10:	4628      	mov	r0, r5
   11e12:	f007 f9ab 	bl	1916c <WsfMsgFree>
   11e16:	2601      	movs	r6, #1
   11e18:	e77d      	b.n	11d16 <smpSendKey+0x74>
   11e1a:	bf00      	nop
   11e1c:	10003d50 	.word	0x10003d50

00011e20 <smpProcRcvKey>:
   11e20:	b570      	push	{r4, r5, r6, lr}
   11e22:	461e      	mov	r6, r3
   11e24:	7a13      	ldrb	r3, [r2, #8]
   11e26:	2b06      	cmp	r3, #6
   11e28:	460c      	mov	r4, r1
   11e2a:	4605      	mov	r5, r0
   11e2c:	f102 0109 	add.w	r1, r2, #9
   11e30:	d104      	bne.n	11e3c <smpProcRcvKey+0x1c>
   11e32:	1d20      	adds	r0, r4, #4
   11e34:	f001 f856 	bl	12ee4 <Calc128Cpy>
   11e38:	2200      	movs	r2, #0
   11e3a:	e016      	b.n	11e6a <smpProcRcvKey+0x4a>
   11e3c:	2b07      	cmp	r3, #7
   11e3e:	d126      	bne.n	11e8e <smpProcRcvKey+0x6e>
   11e40:	7a91      	ldrb	r1, [r2, #10]
   11e42:	7a53      	ldrb	r3, [r2, #9]
   11e44:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   11e48:	83a3      	strh	r3, [r4, #28]
   11e4a:	f852 3f0b 	ldr.w	r3, [r2, #11]!
   11e4e:	6163      	str	r3, [r4, #20]
   11e50:	6853      	ldr	r3, [r2, #4]
   11e52:	61a3      	str	r3, [r4, #24]
   11e54:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
   11e58:	f013 0f04 	tst.w	r3, #4
   11e5c:	bf14      	ite	ne
   11e5e:	2302      	movne	r3, #2
   11e60:	2301      	moveq	r3, #1
   11e62:	77e3      	strb	r3, [r4, #31]
   11e64:	2302      	movs	r3, #2
   11e66:	77a3      	strb	r3, [r4, #30]
   11e68:	2201      	movs	r2, #1
   11e6a:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   11e6e:	2b06      	cmp	r3, #6
   11e70:	d001      	beq.n	11e76 <smpProcRcvKey+0x56>
   11e72:	2b08      	cmp	r3, #8
   11e74:	d120      	bne.n	11eb8 <smpProcRcvKey+0x98>
   11e76:	3301      	adds	r3, #1
   11e78:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
   11e7c:	2500      	movs	r5, #0
   11e7e:	b122      	cbz	r2, 11e8a <smpProcRcvKey+0x6a>
   11e80:	232f      	movs	r3, #47	; 0x2f
   11e82:	70a3      	strb	r3, [r4, #2]
   11e84:	4620      	mov	r0, r4
   11e86:	f7fe f98d 	bl	101a4 <DmSmpCbackExec>
   11e8a:	4628      	mov	r0, r5
   11e8c:	bd70      	pop	{r4, r5, r6, pc}
   11e8e:	2b08      	cmp	r3, #8
   11e90:	d0cf      	beq.n	11e32 <smpProcRcvKey+0x12>
   11e92:	2b09      	cmp	r3, #9
   11e94:	d109      	bne.n	11eaa <smpProcRcvKey+0x8a>
   11e96:	7a53      	ldrb	r3, [r2, #9]
   11e98:	76a3      	strb	r3, [r4, #26]
   11e9a:	f102 010a 	add.w	r1, r2, #10
   11e9e:	f104 0014 	add.w	r0, r4, #20
   11ea2:	f000 ffd3 	bl	12e4c <BdaCpy>
   11ea6:	2304      	movs	r3, #4
   11ea8:	e7dd      	b.n	11e66 <smpProcRcvKey+0x46>
   11eaa:	2b0a      	cmp	r3, #10
   11eac:	d1c4      	bne.n	11e38 <smpProcRcvKey+0x18>
   11eae:	1d20      	adds	r0, r4, #4
   11eb0:	f001 f818 	bl	12ee4 <Calc128Cpy>
   11eb4:	2308      	movs	r3, #8
   11eb6:	e7d6      	b.n	11e66 <smpProcRcvKey+0x46>
   11eb8:	07b0      	lsls	r0, r6, #30
   11eba:	d503      	bpl.n	11ec4 <smpProcRcvKey+0xa4>
   11ebc:	2b07      	cmp	r3, #7
   11ebe:	d101      	bne.n	11ec4 <smpProcRcvKey+0xa4>
   11ec0:	2308      	movs	r3, #8
   11ec2:	e7d9      	b.n	11e78 <smpProcRcvKey+0x58>
   11ec4:	0771      	lsls	r1, r6, #29
   11ec6:	d505      	bpl.n	11ed4 <smpProcRcvKey+0xb4>
   11ec8:	2b07      	cmp	r3, #7
   11eca:	d001      	beq.n	11ed0 <smpProcRcvKey+0xb0>
   11ecc:	2b09      	cmp	r3, #9
   11ece:	d101      	bne.n	11ed4 <smpProcRcvKey+0xb4>
   11ed0:	230a      	movs	r3, #10
   11ed2:	e7d1      	b.n	11e78 <smpProcRcvKey+0x58>
   11ed4:	2501      	movs	r5, #1
   11ed6:	e7d2      	b.n	11e7e <smpProcRcvKey+0x5e>

00011ed8 <smpActMaxAttempts>:
   11ed8:	b510      	push	{r4, lr}
   11eda:	4604      	mov	r4, r0
   11edc:	f7ff fe73 	bl	11bc6 <smpActPairingCancel>
   11ee0:	230f      	movs	r3, #15
   11ee2:	7323      	strb	r3, [r4, #12]
   11ee4:	4b04      	ldr	r3, [pc, #16]	; (11ef8 <smpActMaxAttempts+0x20>)
   11ee6:	681b      	ldr	r3, [r3, #0]
   11ee8:	4620      	mov	r0, r4
   11eea:	8819      	ldrh	r1, [r3, #0]
   11eec:	f007 fae8 	bl	194c0 <WsfTimerStartMs>
   11ef0:	2300      	movs	r3, #0
   11ef2:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
   11ef6:	bd10      	pop	{r4, pc}
   11ef8:	10002ba8 	.word	0x10002ba8

00011efc <smpActAttemptRcvd>:
   11efc:	2301      	movs	r3, #1
   11efe:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
   11f02:	4770      	bx	lr

00011f04 <smpActCheckAttempts>:
   11f04:	b510      	push	{r4, lr}
   11f06:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
   11f0a:	4604      	mov	r4, r0
   11f0c:	b153      	cbz	r3, 11f24 <smpActCheckAttempts+0x20>
   11f0e:	2300      	movs	r3, #0
   11f10:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
   11f14:	2109      	movs	r1, #9
   11f16:	f7ff fe31 	bl	11b7c <smpSendPairingFailed>
   11f1a:	4620      	mov	r0, r4
   11f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11f20:	f7ff be11 	b.w	11b46 <smpCleanup>
   11f24:	bd10      	pop	{r4, pc}

00011f26 <smpActPairingCmpl>:
   11f26:	b513      	push	{r0, r1, r4, lr}
   11f28:	4604      	mov	r4, r0
   11f2a:	f7ff fe0c 	bl	11b46 <smpCleanup>
   11f2e:	2200      	movs	r2, #0
   11f30:	2101      	movs	r1, #1
   11f32:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   11f36:	f7fd fd1d 	bl	f974 <DmConnSetIdle>
   11f3a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   11f3e:	f88d 3004 	strb.w	r3, [sp, #4]
   11f42:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   11f46:	f8ad 3000 	strh.w	r3, [sp]
   11f4a:	4668      	mov	r0, sp
   11f4c:	232a      	movs	r3, #42	; 0x2a
   11f4e:	f88d 3002 	strb.w	r3, [sp, #2]
   11f52:	f7fe f927 	bl	101a4 <DmSmpCbackExec>
   11f56:	f7fe fad9 	bl	1050c <DmSecGetEccKey>
   11f5a:	b002      	add	sp, #8
   11f5c:	bd10      	pop	{r4, pc}

00011f5e <smpSmExecute>:
   11f5e:	b570      	push	{r4, r5, r6, lr}
   11f60:	4604      	mov	r4, r0
   11f62:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   11f66:	460d      	mov	r5, r1
   11f68:	f7fd fd2e 	bl	f9c8 <DmConnRole>
   11f6c:	4b13      	ldr	r3, [pc, #76]	; (11fbc <smpSmExecute+0x5e>)
   11f6e:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
   11f72:	f8d3 21c0 	ldr.w	r2, [r3, #448]	; 0x1c0
   11f76:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
   11f7a:	78ae      	ldrb	r6, [r5, #2]
   11f7c:	2801      	cmp	r0, #1
   11f7e:	bf18      	it	ne
   11f80:	461a      	movne	r2, r3
   11f82:	6813      	ldr	r3, [r2, #0]
   11f84:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   11f88:	4603      	mov	r3, r0
   11f8a:	7819      	ldrb	r1, [r3, #0]
   11f8c:	42b1      	cmp	r1, r6
   11f8e:	d10b      	bne.n	11fa8 <smpSmExecute+0x4a>
   11f90:	7859      	ldrb	r1, [r3, #1]
   11f92:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
   11f96:	7899      	ldrb	r1, [r3, #2]
   11f98:	6853      	ldr	r3, [r2, #4]
   11f9a:	4620      	mov	r0, r4
   11f9c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   11fa0:	4629      	mov	r1, r5
   11fa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11fa6:	4718      	bx	r3
   11fa8:	f813 1f03 	ldrb.w	r1, [r3, #3]!
   11fac:	2900      	cmp	r1, #0
   11fae:	d1ec      	bne.n	11f8a <smpSmExecute+0x2c>
   11fb0:	6890      	ldr	r0, [r2, #8]
   11fb2:	f100 010c 	add.w	r1, r0, #12
   11fb6:	4299      	cmp	r1, r3
   11fb8:	d1e6      	bne.n	11f88 <smpSmExecute+0x2a>
   11fba:	bd70      	pop	{r4, r5, r6, pc}
   11fbc:	10003d50 	.word	0x10003d50

00011fc0 <smpProcPairing>:
   11fc0:	b513      	push	{r0, r1, r4, lr}
   11fc2:	2300      	movs	r3, #0
   11fc4:	7013      	strb	r3, [r2, #0]
   11fc6:	700b      	strb	r3, [r1, #0]
   11fc8:	7c83      	ldrb	r3, [r0, #18]
   11fca:	2b01      	cmp	r3, #1
   11fcc:	d127      	bne.n	1201e <smpProcPairing+0x5e>
   11fce:	7e43      	ldrb	r3, [r0, #25]
   11fd0:	2b01      	cmp	r3, #1
   11fd2:	d124      	bne.n	1201e <smpProcPairing+0x5e>
   11fd4:	700b      	strb	r3, [r1, #0]
   11fd6:	7cc3      	ldrb	r3, [r0, #19]
   11fd8:	7e82      	ldrb	r2, [r0, #26]
   11fda:	4013      	ands	r3, r2
   11fdc:	f043 0304 	orr.w	r3, r3, #4
   11fe0:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
   11fe4:	2300      	movs	r3, #0
   11fe6:	f890 202a 	ldrb.w	r2, [r0, #42]	; 0x2a
   11fea:	2a00      	cmp	r2, #0
   11fec:	d049      	beq.n	12082 <smpProcPairing+0xc2>
   11fee:	7cc1      	ldrb	r1, [r0, #19]
   11ff0:	4a2d      	ldr	r2, [pc, #180]	; (120a8 <smpProcPairing+0xe8>)
   11ff2:	6812      	ldr	r2, [r2, #0]
   11ff4:	2b00      	cmp	r3, #0
   11ff6:	d046      	beq.n	12086 <smpProcPairing+0xc6>
   11ff8:	7993      	ldrb	r3, [r2, #6]
   11ffa:	f003 0304 	and.w	r3, r3, #4
   11ffe:	4219      	tst	r1, r3
   12000:	d041      	beq.n	12086 <smpProcPairing+0xc6>
   12002:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   12006:	f8ad 3004 	strh.w	r3, [sp, #4]
   1200a:	f240 3303 	movw	r3, #771	; 0x303
   1200e:	a901      	add	r1, sp, #4
   12010:	f8ad 3006 	strh.w	r3, [sp, #6]
   12014:	f7ff ffa3 	bl	11f5e <smpSmExecute>
   12018:	2000      	movs	r0, #0
   1201a:	b002      	add	sp, #8
   1201c:	bd10      	pop	{r4, pc}
   1201e:	7cc1      	ldrb	r1, [r0, #19]
   12020:	074b      	lsls	r3, r1, #29
   12022:	d402      	bmi.n	1202a <smpProcPairing+0x6a>
   12024:	7e83      	ldrb	r3, [r0, #26]
   12026:	075c      	lsls	r4, r3, #29
   12028:	d509      	bpl.n	1203e <smpProcPairing+0x7e>
   1202a:	7c44      	ldrb	r4, [r0, #17]
   1202c:	2c03      	cmp	r4, #3
   1202e:	d006      	beq.n	1203e <smpProcPairing+0x7e>
   12030:	7e03      	ldrb	r3, [r0, #24]
   12032:	2b03      	cmp	r3, #3
   12034:	d003      	beq.n	1203e <smpProcPairing+0x7e>
   12036:	2c01      	cmp	r4, #1
   12038:	d809      	bhi.n	1204e <smpProcPairing+0x8e>
   1203a:	2b01      	cmp	r3, #1
   1203c:	d81f      	bhi.n	1207e <smpProcPairing+0xbe>
   1203e:	7e83      	ldrb	r3, [r0, #26]
   12040:	4019      	ands	r1, r3
   12042:	f021 0104 	bic.w	r1, r1, #4
   12046:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
   1204a:	2301      	movs	r3, #1
   1204c:	e7cb      	b.n	11fe6 <smpProcPairing+0x26>
   1204e:	2c04      	cmp	r4, #4
   12050:	d113      	bne.n	1207a <smpProcPairing+0xba>
   12052:	2b02      	cmp	r3, #2
   12054:	d013      	beq.n	1207e <smpProcPairing+0xbe>
   12056:	1f19      	subs	r1, r3, #4
   12058:	424b      	negs	r3, r1
   1205a:	414b      	adcs	r3, r1
   1205c:	7013      	strb	r3, [r2, #0]
   1205e:	7e01      	ldrb	r1, [r0, #24]
   12060:	2902      	cmp	r1, #2
   12062:	d102      	bne.n	1206a <smpProcPairing+0xaa>
   12064:	7c41      	ldrb	r1, [r0, #17]
   12066:	2902      	cmp	r1, #2
   12068:	d0b5      	beq.n	11fd6 <smpProcPairing+0x16>
   1206a:	f890 102a 	ldrb.w	r1, [r0, #42]	; 0x2a
   1206e:	2900      	cmp	r1, #0
   12070:	bf08      	it	eq
   12072:	f083 0301 	eoreq.w	r3, r3, #1
   12076:	7013      	strb	r3, [r2, #0]
   12078:	e7ad      	b.n	11fd6 <smpProcPairing+0x16>
   1207a:	2300      	movs	r3, #0
   1207c:	e7ee      	b.n	1205c <smpProcPairing+0x9c>
   1207e:	2301      	movs	r3, #1
   12080:	e7ec      	b.n	1205c <smpProcPairing+0x9c>
   12082:	7e81      	ldrb	r1, [r0, #26]
   12084:	e7b4      	b.n	11ff0 <smpProcPairing+0x30>
   12086:	78d3      	ldrb	r3, [r2, #3]
   12088:	7d02      	ldrb	r2, [r0, #20]
   1208a:	429a      	cmp	r2, r3
   1208c:	d302      	bcc.n	12094 <smpProcPairing+0xd4>
   1208e:	7ec2      	ldrb	r2, [r0, #27]
   12090:	429a      	cmp	r2, r3
   12092:	d206      	bcs.n	120a2 <smpProcPairing+0xe2>
   12094:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   12098:	f8ad 3004 	strh.w	r3, [sp, #4]
   1209c:	f240 6303 	movw	r3, #1539	; 0x603
   120a0:	e7b5      	b.n	1200e <smpProcPairing+0x4e>
   120a2:	2001      	movs	r0, #1
   120a4:	e7b9      	b.n	1201a <smpProcPairing+0x5a>
   120a6:	bf00      	nop
   120a8:	10002ba8 	.word	0x10002ba8

000120ac <smpAuthReq>:
   120ac:	b510      	push	{r4, lr}
   120ae:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
   120b2:	f890 402d 	ldrb.w	r4, [r0, #45]	; 0x2d
   120b6:	b086      	sub	sp, #24
   120b8:	f013 0304 	ands.w	r3, r3, #4
   120bc:	f8ad 4000 	strh.w	r4, [sp]
   120c0:	d00b      	beq.n	120da <smpAuthReq+0x2e>
   120c2:	232e      	movs	r3, #46	; 0x2e
   120c4:	4668      	mov	r0, sp
   120c6:	f88d 3002 	strb.w	r3, [sp, #2]
   120ca:	f88d 1004 	strb.w	r1, [sp, #4]
   120ce:	f88d 2005 	strb.w	r2, [sp, #5]
   120d2:	f7fe f867 	bl	101a4 <DmSmpCbackExec>
   120d6:	b006      	add	sp, #24
   120d8:	bd10      	pop	{r4, pc}
   120da:	2204      	movs	r2, #4
   120dc:	f8ad 3004 	strh.w	r3, [sp, #4]
   120e0:	f88d 3006 	strb.w	r3, [sp, #6]
   120e4:	4669      	mov	r1, sp
   120e6:	2303      	movs	r3, #3
   120e8:	f88d 2002 	strb.w	r2, [sp, #2]
   120ec:	f88d 3014 	strb.w	r3, [sp, #20]
   120f0:	f7ff ff35 	bl	11f5e <smpSmExecute>
   120f4:	e7ef      	b.n	120d6 <smpAuthReq+0x2a>
   120f6:	bf00      	nop

000120f8 <smpiActPairReq>:
   120f8:	b538      	push	{r3, r4, r5, lr}
   120fa:	2201      	movs	r2, #1
   120fc:	4604      	mov	r4, r0
   120fe:	460d      	mov	r5, r1
   12100:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   12104:	4611      	mov	r1, r2
   12106:	f7fd fc35 	bl	f974 <DmConnSetIdle>
   1210a:	2302      	movs	r3, #2
   1210c:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   12110:	4620      	mov	r0, r4
   12112:	f7ff fd11 	bl	11b38 <smpStartRspTimer>
   12116:	2040      	movs	r0, #64	; 0x40
   12118:	f006 ff80 	bl	1901c <WsfBufAlloc>
   1211c:	6220      	str	r0, [r4, #32]
   1211e:	200f      	movs	r0, #15
   12120:	f7fe fe06 	bl	10d30 <smpMsgAlloc>
   12124:	4601      	mov	r1, r0
   12126:	b1e0      	cbz	r0, 12162 <smpiActPairReq+0x6a>
   12128:	2301      	movs	r3, #1
   1212a:	7203      	strb	r3, [r0, #8]
   1212c:	4b0d      	ldr	r3, [pc, #52]	; (12164 <smpiActPairReq+0x6c>)
   1212e:	681b      	ldr	r3, [r3, #0]
   12130:	789a      	ldrb	r2, [r3, #2]
   12132:	7242      	strb	r2, [r0, #9]
   12134:	792a      	ldrb	r2, [r5, #4]
   12136:	7282      	strb	r2, [r0, #10]
   12138:	796a      	ldrb	r2, [r5, #5]
   1213a:	72c2      	strb	r2, [r0, #11]
   1213c:	791b      	ldrb	r3, [r3, #4]
   1213e:	7303      	strb	r3, [r0, #12]
   12140:	79ab      	ldrb	r3, [r5, #6]
   12142:	7343      	strb	r3, [r0, #13]
   12144:	79eb      	ldrb	r3, [r5, #7]
   12146:	7383      	strb	r3, [r0, #14]
   12148:	4603      	mov	r3, r0
   1214a:	f853 0f08 	ldr.w	r0, [r3, #8]!
   1214e:	6120      	str	r0, [r4, #16]
   12150:	8898      	ldrh	r0, [r3, #4]
   12152:	82a0      	strh	r0, [r4, #20]
   12154:	799b      	ldrb	r3, [r3, #6]
   12156:	75a3      	strb	r3, [r4, #22]
   12158:	4620      	mov	r0, r4
   1215a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1215e:	f7fe bd9c 	b.w	10c9a <smpSendPkt>
   12162:	bd38      	pop	{r3, r4, r5, pc}
   12164:	10002ba8 	.word	0x10002ba8

00012168 <smpiActCheckSecurityReq>:
   12168:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
   1216c:	b12a      	cbz	r2, 1217a <smpiActCheckSecurityReq+0x12>
   1216e:	2200      	movs	r2, #0
   12170:	f880 202b 	strb.w	r2, [r0, #43]	; 0x2b
   12174:	78c9      	ldrb	r1, [r1, #3]
   12176:	f7ff bd01 	b.w	11b7c <smpSendPairingFailed>
   1217a:	4770      	bx	lr

0001217c <smpiActProcSecurityReq>:
   1217c:	b507      	push	{r0, r1, r2, lr}
   1217e:	2301      	movs	r3, #1
   12180:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
   12184:	684b      	ldr	r3, [r1, #4]
   12186:	7a5b      	ldrb	r3, [r3, #9]
   12188:	f88d 3004 	strb.w	r3, [sp, #4]
   1218c:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   12190:	f8ad 3000 	strh.w	r3, [sp]
   12194:	4668      	mov	r0, sp
   12196:	2332      	movs	r3, #50	; 0x32
   12198:	f88d 3002 	strb.w	r3, [sp, #2]
   1219c:	f7fe f802 	bl	101a4 <DmSmpCbackExec>
   121a0:	b003      	add	sp, #12
   121a2:	f85d fb04 	ldr.w	pc, [sp], #4

000121a6 <smpiActProcPairRsp>:
   121a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   121a8:	684a      	ldr	r2, [r1, #4]
   121aa:	7d45      	ldrb	r5, [r0, #21]
   121ac:	4613      	mov	r3, r2
   121ae:	4604      	mov	r4, r0
   121b0:	f853 6f08 	ldr.w	r6, [r3, #8]!
   121b4:	f8c0 6017 	str.w	r6, [r0, #23]
   121b8:	889e      	ldrh	r6, [r3, #4]
   121ba:	f8a0 601b 	strh.w	r6, [r0, #27]
   121be:	799b      	ldrb	r3, [r3, #6]
   121c0:	7743      	strb	r3, [r0, #29]
   121c2:	7b53      	ldrb	r3, [r2, #13]
   121c4:	43ab      	bics	r3, r5
   121c6:	d103      	bne.n	121d0 <smpiActProcPairRsp+0x2a>
   121c8:	7d85      	ldrb	r5, [r0, #22]
   121ca:	7b93      	ldrb	r3, [r2, #14]
   121cc:	43ab      	bics	r3, r5
   121ce:	d007      	beq.n	121e0 <smpiActProcPairRsp+0x3a>
   121d0:	f640 2303 	movw	r3, #2563	; 0xa03
   121d4:	804b      	strh	r3, [r1, #2]
   121d6:	4620      	mov	r0, r4
   121d8:	f7ff fec1 	bl	11f5e <smpSmExecute>
   121dc:	b002      	add	sp, #8
   121de:	bd70      	pop	{r4, r5, r6, pc}
   121e0:	4d09      	ldr	r5, [pc, #36]	; (12208 <smpiActProcPairRsp+0x62>)
   121e2:	f10d 0207 	add.w	r2, sp, #7
   121e6:	f8d5 31cc 	ldr.w	r3, [r5, #460]	; 0x1cc
   121ea:	f10d 0106 	add.w	r1, sp, #6
   121ee:	4798      	blx	r3
   121f0:	2800      	cmp	r0, #0
   121f2:	d0f3      	beq.n	121dc <smpiActProcPairRsp+0x36>
   121f4:	f8d5 31d0 	ldr.w	r3, [r5, #464]	; 0x1d0
   121f8:	f89d 2007 	ldrb.w	r2, [sp, #7]
   121fc:	f89d 1006 	ldrb.w	r1, [sp, #6]
   12200:	4620      	mov	r0, r4
   12202:	4798      	blx	r3
   12204:	e7ea      	b.n	121dc <smpiActProcPairRsp+0x36>
   12206:	bf00      	nop
   12208:	10003d50 	.word	0x10003d50

0001220c <smpiActProcPairCnf>:
   1220c:	b538      	push	{r3, r4, r5, lr}
   1220e:	6a02      	ldr	r2, [r0, #32]
   12210:	684b      	ldr	r3, [r1, #4]
   12212:	4604      	mov	r4, r0
   12214:	f103 0109 	add.w	r1, r3, #9
   12218:	3220      	adds	r2, #32
   1221a:	3319      	adds	r3, #25
   1221c:	f851 0b04 	ldr.w	r0, [r1], #4
   12220:	f842 0b04 	str.w	r0, [r2], #4
   12224:	4299      	cmp	r1, r3
   12226:	d1f9      	bne.n	1221c <smpiActProcPairCnf+0x10>
   12228:	2504      	movs	r5, #4
   1222a:	4620      	mov	r0, r4
   1222c:	f884 502f 	strb.w	r5, [r4, #47]	; 0x2f
   12230:	f7ff fc82 	bl	11b38 <smpStartRspTimer>
   12234:	2019      	movs	r0, #25
   12236:	f7fe fd7b 	bl	10d30 <smpMsgAlloc>
   1223a:	4601      	mov	r1, r0
   1223c:	b180      	cbz	r0, 12260 <smpiActProcPairCnf+0x54>
   1223e:	7205      	strb	r5, [r0, #8]
   12240:	6a23      	ldr	r3, [r4, #32]
   12242:	3009      	adds	r0, #9
   12244:	f103 0230 	add.w	r2, r3, #48	; 0x30
   12248:	3340      	adds	r3, #64	; 0x40
   1224a:	f852 5b04 	ldr.w	r5, [r2], #4
   1224e:	f840 5b04 	str.w	r5, [r0], #4
   12252:	429a      	cmp	r2, r3
   12254:	d1f9      	bne.n	1224a <smpiActProcPairCnf+0x3e>
   12256:	4620      	mov	r0, r4
   12258:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1225c:	f7fe bd1d 	b.w	10c9a <smpSendPkt>
   12260:	bd38      	pop	{r3, r4, r5, pc}

00012262 <smpiActCnfVerify>:
   12262:	b570      	push	{r4, r5, r6, lr}
   12264:	460e      	mov	r6, r1
   12266:	6a05      	ldr	r5, [r0, #32]
   12268:	4604      	mov	r4, r0
   1226a:	2210      	movs	r2, #16
   1226c:	f105 0120 	add.w	r1, r5, #32
   12270:	6870      	ldr	r0, [r6, #4]
   12272:	f00e f825 	bl	202c0 <memcmp>
   12276:	b1c8      	cbz	r0, 122ac <smpiActCnfVerify+0x4a>
   12278:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   1227c:	b19b      	cbz	r3, 122a6 <smpiActCnfVerify+0x44>
   1227e:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
   12282:	4a0f      	ldr	r2, [pc, #60]	; (122c0 <smpiActCnfVerify+0x5e>)
   12284:	3301      	adds	r3, #1
   12286:	b2db      	uxtb	r3, r3
   12288:	6812      	ldr	r2, [r2, #0]
   1228a:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
   1228e:	7952      	ldrb	r2, [r2, #5]
   12290:	429a      	cmp	r2, r3
   12292:	d108      	bne.n	122a6 <smpiActCnfVerify+0x44>
   12294:	f640 130d 	movw	r3, #2317	; 0x90d
   12298:	8073      	strh	r3, [r6, #2]
   1229a:	4631      	mov	r1, r6
   1229c:	4620      	mov	r0, r4
   1229e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   122a2:	f7ff be5c 	b.w	11f5e <smpSmExecute>
   122a6:	f240 4303 	movw	r3, #1027	; 0x403
   122aa:	e7f5      	b.n	12298 <smpiActCnfVerify+0x36>
   122ac:	f105 0330 	add.w	r3, r5, #48	; 0x30
   122b0:	f105 0210 	add.w	r2, r5, #16
   122b4:	4629      	mov	r1, r5
   122b6:	4620      	mov	r0, r4
   122b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   122bc:	f7fe bc96 	b.w	10bec <smpCalcS1>
   122c0:	10002ba8 	.word	0x10002ba8

000122c4 <smpiActStkEncrypt>:
   122c4:	b530      	push	{r4, r5, lr}
   122c6:	7ec4      	ldrb	r4, [r0, #27]
   122c8:	7d03      	ldrb	r3, [r0, #20]
   122ca:	6849      	ldr	r1, [r1, #4]
   122cc:	429c      	cmp	r4, r3
   122ce:	b085      	sub	sp, #20
   122d0:	bf28      	it	cs
   122d2:	461c      	movcs	r4, r3
   122d4:	4605      	mov	r5, r0
   122d6:	4622      	mov	r2, r4
   122d8:	4668      	mov	r0, sp
   122da:	f7f9 ff11 	bl	c100 <memcpy>
   122de:	2100      	movs	r1, #0
   122e0:	f1c4 0210 	rsb	r2, r4, #16
   122e4:	eb0d 0004 	add.w	r0, sp, r4
   122e8:	f00e f880 	bl	203ec <memset>
   122ec:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   122f0:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
   122f4:	f013 0f04 	tst.w	r3, #4
   122f8:	466a      	mov	r2, sp
   122fa:	bf14      	ite	ne
   122fc:	2102      	movne	r1, #2
   122fe:	2101      	moveq	r1, #1
   12300:	f7ff fbc4 	bl	11a8c <DmSmpEncryptReq>
   12304:	b005      	add	sp, #20
   12306:	bd30      	pop	{r4, r5, pc}

00012308 <smpiActSetupKeyDist>:
   12308:	b538      	push	{r3, r4, r5, lr}
   1230a:	4604      	mov	r4, r0
   1230c:	460d      	mov	r5, r1
   1230e:	f7ff fc13 	bl	11b38 <smpStartRspTimer>
   12312:	6a23      	ldr	r3, [r4, #32]
   12314:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
   12318:	801a      	strh	r2, [r3, #0]
   1231a:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
   1231e:	f012 0f04 	tst.w	r2, #4
   12322:	bf14      	ite	ne
   12324:	2202      	movne	r2, #2
   12326:	2201      	moveq	r2, #1
   12328:	77da      	strb	r2, [r3, #31]
   1232a:	7ee2      	ldrb	r2, [r4, #27]
   1232c:	7d21      	ldrb	r1, [r4, #20]
   1232e:	428a      	cmp	r2, r1
   12330:	bf28      	it	cs
   12332:	460a      	movcs	r2, r1
   12334:	f883 2020 	strb.w	r2, [r3, #32]
   12338:	2300      	movs	r3, #0
   1233a:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   1233e:	7f62      	ldrb	r2, [r4, #29]
   12340:	7da3      	ldrb	r3, [r4, #22]
   12342:	4013      	ands	r3, r2
   12344:	07d8      	lsls	r0, r3, #31
   12346:	d518      	bpl.n	1237a <smpiActSetupKeyDist+0x72>
   12348:	4a0f      	ldr	r2, [pc, #60]	; (12388 <smpiActSetupKeyDist+0x80>)
   1234a:	f892 21d4 	ldrb.w	r2, [r2, #468]	; 0x1d4
   1234e:	b192      	cbz	r2, 12376 <smpiActSetupKeyDist+0x6e>
   12350:	6b62      	ldr	r2, [r4, #52]	; 0x34
   12352:	7812      	ldrb	r2, [r2, #0]
   12354:	b17a      	cbz	r2, 12376 <smpiActSetupKeyDist+0x6e>
   12356:	0799      	lsls	r1, r3, #30
   12358:	d502      	bpl.n	12360 <smpiActSetupKeyDist+0x58>
   1235a:	2308      	movs	r3, #8
   1235c:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   12360:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   12364:	b97b      	cbnz	r3, 12386 <smpiActSetupKeyDist+0x7e>
   12366:	230c      	movs	r3, #12
   12368:	70ab      	strb	r3, [r5, #2]
   1236a:	4629      	mov	r1, r5
   1236c:	4620      	mov	r0, r4
   1236e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12372:	f7ff bdf4 	b.w	11f5e <smpSmExecute>
   12376:	2306      	movs	r3, #6
   12378:	e7f0      	b.n	1235c <smpiActSetupKeyDist+0x54>
   1237a:	079a      	lsls	r2, r3, #30
   1237c:	d4ed      	bmi.n	1235a <smpiActSetupKeyDist+0x52>
   1237e:	075b      	lsls	r3, r3, #29
   12380:	d5ee      	bpl.n	12360 <smpiActSetupKeyDist+0x58>
   12382:	230a      	movs	r3, #10
   12384:	e7ea      	b.n	1235c <smpiActSetupKeyDist+0x54>
   12386:	bd38      	pop	{r3, r4, r5, pc}
   12388:	10003d50 	.word	0x10003d50

0001238c <smpiActRcvKey>:
   1238c:	b538      	push	{r3, r4, r5, lr}
   1238e:	7d82      	ldrb	r2, [r0, #22]
   12390:	7f43      	ldrb	r3, [r0, #29]
   12392:	460d      	mov	r5, r1
   12394:	4013      	ands	r3, r2
   12396:	684a      	ldr	r2, [r1, #4]
   12398:	6a01      	ldr	r1, [r0, #32]
   1239a:	4604      	mov	r4, r0
   1239c:	f7ff fd40 	bl	11e20 <smpProcRcvKey>
   123a0:	b150      	cbz	r0, 123b8 <smpiActRcvKey+0x2c>
   123a2:	2300      	movs	r3, #0
   123a4:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   123a8:	230c      	movs	r3, #12
   123aa:	70ab      	strb	r3, [r5, #2]
   123ac:	4629      	mov	r1, r5
   123ae:	4620      	mov	r0, r4
   123b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   123b4:	f7ff bdd3 	b.w	11f5e <smpSmExecute>
   123b8:	bd38      	pop	{r3, r4, r5, pc}

000123ba <smpiActSendKey>:
   123ba:	b538      	push	{r3, r4, r5, lr}
   123bc:	460d      	mov	r5, r1
   123be:	7f03      	ldrb	r3, [r0, #28]
   123c0:	7d41      	ldrb	r1, [r0, #21]
   123c2:	4019      	ands	r1, r3
   123c4:	4604      	mov	r4, r0
   123c6:	f7ff fc6c 	bl	11ca2 <smpSendKey>
   123ca:	b138      	cbz	r0, 123dc <smpiActSendKey+0x22>
   123cc:	230e      	movs	r3, #14
   123ce:	70ab      	strb	r3, [r5, #2]
   123d0:	4629      	mov	r1, r5
   123d2:	4620      	mov	r0, r4
   123d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   123d8:	f7ff bdc1 	b.w	11f5e <smpSmExecute>
   123dc:	bd38      	pop	{r3, r4, r5, pc}
   123de:	bf00      	nop

000123e0 <smpiScActAuthSelect>:
   123e0:	f7ff b8cf 	b.w	11582 <smpScActAuthSelect>

000123e4 <smpiScActSendPubKey>:
   123e4:	230c      	movs	r3, #12
   123e6:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
   123ea:	f7fe be0a 	b.w	11002 <smpScSendPubKey>

000123ee <smpiScActJwncSetup>:
   123ee:	b538      	push	{r3, r4, r5, lr}
   123f0:	6b43      	ldr	r3, [r0, #52]	; 0x34
   123f2:	4d0b      	ldr	r5, [pc, #44]	; (12420 <smpiScActJwncSetup+0x32>)
   123f4:	4604      	mov	r4, r0
   123f6:	2110      	movs	r1, #16
   123f8:	68d8      	ldr	r0, [r3, #12]
   123fa:	f001 f9ed 	bl	137d8 <SecRand>
   123fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12400:	68d8      	ldr	r0, [r3, #12]
   12402:	4629      	mov	r1, r5
   12404:	3020      	adds	r0, #32
   12406:	f000 fd6d 	bl	12ee4 <Calc128Cpy>
   1240a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1240c:	68d8      	ldr	r0, [r3, #12]
   1240e:	4629      	mov	r1, r5
   12410:	3030      	adds	r0, #48	; 0x30
   12412:	f000 fd67 	bl	12ee4 <Calc128Cpy>
   12416:	2303      	movs	r3, #3
   12418:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   1241c:	bd38      	pop	{r3, r4, r5, pc}
   1241e:	bf00      	nop
   12420:	00025174 	.word	0x00025174

00012424 <smpiScActJwncSendRand>:
   12424:	b538      	push	{r3, r4, r5, lr}
   12426:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12428:	4604      	mov	r4, r0
   1242a:	460d      	mov	r5, r1
   1242c:	68d8      	ldr	r0, [r3, #12]
   1242e:	6849      	ldr	r1, [r1, #4]
   12430:	2210      	movs	r2, #16
   12432:	3109      	adds	r1, #9
   12434:	3040      	adds	r0, #64	; 0x40
   12436:	f000 fd8f 	bl	12f58 <WStrReverseCpy>
   1243a:	2304      	movs	r3, #4
   1243c:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   12440:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12442:	4629      	mov	r1, r5
   12444:	68da      	ldr	r2, [r3, #12]
   12446:	4620      	mov	r0, r4
   12448:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1244c:	f7fe be33 	b.w	110b6 <smpScSendRand>

00012450 <smpiScActJwncCalcF4>:
   12450:	b538      	push	{r3, r4, r5, lr}
   12452:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12454:	4604      	mov	r4, r0
   12456:	460d      	mov	r5, r1
   12458:	68d8      	ldr	r0, [r3, #12]
   1245a:	6849      	ldr	r1, [r1, #4]
   1245c:	2210      	movs	r2, #16
   1245e:	3109      	adds	r1, #9
   12460:	4410      	add	r0, r2
   12462:	f000 fd79 	bl	12f58 <WStrReverseCpy>
   12466:	4629      	mov	r1, r5
   12468:	4620      	mov	r0, r4
   1246a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1246e:	f7ff b8d2 	b.w	11616 <smpScActJwncCalcF4>

00012472 <smpiScActJwncCalcG2>:
   12472:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12474:	b537      	push	{r0, r1, r2, r4, r5, lr}
   12476:	4604      	mov	r4, r0
   12478:	68d8      	ldr	r0, [r3, #12]
   1247a:	460d      	mov	r5, r1
   1247c:	2210      	movs	r2, #16
   1247e:	6849      	ldr	r1, [r1, #4]
   12480:	3040      	adds	r0, #64	; 0x40
   12482:	f00d ff1d 	bl	202c0 <memcmp>
   12486:	b168      	cbz	r0, 124a4 <smpiScActJwncCalcG2+0x32>
   12488:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   1248c:	f8ad 3004 	strh.w	r3, [sp, #4]
   12490:	a901      	add	r1, sp, #4
   12492:	f240 4303 	movw	r3, #1027	; 0x403
   12496:	4620      	mov	r0, r4
   12498:	f8ad 3006 	strh.w	r3, [sp, #6]
   1249c:	f7ff fd5f 	bl	11f5e <smpSmExecute>
   124a0:	b003      	add	sp, #12
   124a2:	bd30      	pop	{r4, r5, pc}
   124a4:	4629      	mov	r1, r5
   124a6:	4620      	mov	r0, r4
   124a8:	f7ff f8d7 	bl	1165a <smpScActJwncCalcG2>
   124ac:	e7f8      	b.n	124a0 <smpiScActJwncCalcG2+0x2e>

000124ae <smpiScActPkCalcCa>:
   124ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   124b0:	6b43      	ldr	r3, [r0, #52]	; 0x34
   124b2:	78da      	ldrb	r2, [r3, #3]
   124b4:	4604      	mov	r4, r0
   124b6:	460d      	mov	r5, r1
   124b8:	b9da      	cbnz	r2, 124f2 <smpiScActPkCalcCa+0x44>
   124ba:	68d8      	ldr	r0, [r3, #12]
   124bc:	4919      	ldr	r1, [pc, #100]	; (12524 <smpiScActPkCalcCa+0x76>)
   124be:	3020      	adds	r0, #32
   124c0:	f000 fd10 	bl	12ee4 <Calc128Cpy>
   124c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   124c6:	4917      	ldr	r1, [pc, #92]	; (12524 <smpiScActPkCalcCa+0x76>)
   124c8:	68d8      	ldr	r0, [r3, #12]
   124ca:	3030      	adds	r0, #48	; 0x30
   124cc:	f000 fd0a 	bl	12ee4 <Calc128Cpy>
   124d0:	7d2a      	ldrb	r2, [r5, #20]
   124d2:	2a03      	cmp	r2, #3
   124d4:	d80d      	bhi.n	124f2 <smpiScActPkCalcCa+0x44>
   124d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   124d8:	68d8      	ldr	r0, [r3, #12]
   124da:	1d2e      	adds	r6, r5, #4
   124dc:	4631      	mov	r1, r6
   124de:	302d      	adds	r0, #45	; 0x2d
   124e0:	f000 fd3a 	bl	12f58 <WStrReverseCpy>
   124e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   124e6:	7d2a      	ldrb	r2, [r5, #20]
   124e8:	68d8      	ldr	r0, [r3, #12]
   124ea:	4631      	mov	r1, r6
   124ec:	303d      	adds	r0, #61	; 0x3d
   124ee:	f000 fd33 	bl	12f58 <WStrReverseCpy>
   124f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   124f4:	2110      	movs	r1, #16
   124f6:	68d8      	ldr	r0, [r3, #12]
   124f8:	f001 f96e 	bl	137d8 <SecRand>
   124fc:	f7fe f806 	bl	1050c <DmSecGetEccKey>
   12500:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12502:	4606      	mov	r6, r0
   12504:	4620      	mov	r0, r4
   12506:	689f      	ldr	r7, [r3, #8]
   12508:	f7fe fe25 	bl	11156 <smpGetPkBit>
   1250c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1250e:	68db      	ldr	r3, [r3, #12]
   12510:	4632      	mov	r2, r6
   12512:	e9cd 0300 	strd	r0, r3, [sp]
   12516:	4629      	mov	r1, r5
   12518:	463b      	mov	r3, r7
   1251a:	4620      	mov	r0, r4
   1251c:	f7fe fd02 	bl	10f24 <SmpScCalcF4>
   12520:	b003      	add	sp, #12
   12522:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12524:	00025174 	.word	0x00025174

00012528 <smpiScActPkCalcCb>:
   12528:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1252a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1252c:	4604      	mov	r4, r0
   1252e:	460d      	mov	r5, r1
   12530:	68d8      	ldr	r0, [r3, #12]
   12532:	6849      	ldr	r1, [r1, #4]
   12534:	2210      	movs	r2, #16
   12536:	3109      	adds	r1, #9
   12538:	4410      	add	r0, r2
   1253a:	f000 fd0d 	bl	12f58 <WStrReverseCpy>
   1253e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12540:	689e      	ldr	r6, [r3, #8]
   12542:	f7fd ffe3 	bl	1050c <DmSecGetEccKey>
   12546:	4607      	mov	r7, r0
   12548:	4620      	mov	r0, r4
   1254a:	f7fe fe04 	bl	11156 <smpGetPkBit>
   1254e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12550:	68d9      	ldr	r1, [r3, #12]
   12552:	3110      	adds	r1, #16
   12554:	e9cd 0100 	strd	r0, r1, [sp]
   12558:	463b      	mov	r3, r7
   1255a:	4632      	mov	r2, r6
   1255c:	4629      	mov	r1, r5
   1255e:	4620      	mov	r0, r4
   12560:	f7fe fce0 	bl	10f24 <SmpScCalcF4>
   12564:	b003      	add	sp, #12
   12566:	bdf0      	pop	{r4, r5, r6, r7, pc}

00012568 <smpiScActPkSendCnf>:
   12568:	684a      	ldr	r2, [r1, #4]
   1256a:	f7fe bdcc 	b.w	11106 <smpScSendPairCnf>

0001256e <smpiScActPkSendRand>:
   1256e:	f7ff bf59 	b.w	12424 <smpiScActJwncSendRand>

00012572 <smpiScActPkCheck>:
   12572:	b537      	push	{r0, r1, r2, r4, r5, lr}
   12574:	6b45      	ldr	r5, [r0, #52]	; 0x34
   12576:	6849      	ldr	r1, [r1, #4]
   12578:	4604      	mov	r4, r0
   1257a:	68e8      	ldr	r0, [r5, #12]
   1257c:	2210      	movs	r2, #16
   1257e:	3040      	adds	r0, #64	; 0x40
   12580:	f00d fe9e 	bl	202c0 <memcmp>
   12584:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
   12588:	b158      	cbz	r0, 125a2 <smpiScActPkCheck+0x30>
   1258a:	f240 4303 	movw	r3, #1027	; 0x403
   1258e:	f8ad 2004 	strh.w	r2, [sp, #4]
   12592:	f8ad 3006 	strh.w	r3, [sp, #6]
   12596:	a901      	add	r1, sp, #4
   12598:	4620      	mov	r0, r4
   1259a:	f7ff fce0 	bl	11f5e <smpSmExecute>
   1259e:	b003      	add	sp, #12
   125a0:	bd30      	pop	{r4, r5, pc}
   125a2:	78eb      	ldrb	r3, [r5, #3]
   125a4:	3301      	adds	r3, #1
   125a6:	b2db      	uxtb	r3, r3
   125a8:	2b13      	cmp	r3, #19
   125aa:	70eb      	strb	r3, [r5, #3]
   125ac:	bf97      	itett	ls
   125ae:	2303      	movls	r3, #3
   125b0:	231a      	movhi	r3, #26
   125b2:	f884 302f 	strbls.w	r3, [r4, #47]	; 0x2f
   125b6:	2319      	movls	r3, #25
   125b8:	f88d 3006 	strb.w	r3, [sp, #6]
   125bc:	f8ad 2004 	strh.w	r2, [sp, #4]
   125c0:	e7e9      	b.n	12596 <smpiScActPkCheck+0x24>

000125c2 <smpiScActOobCalcCb>:
   125c2:	b530      	push	{r4, r5, lr}
   125c4:	7c83      	ldrb	r3, [r0, #18]
   125c6:	2b01      	cmp	r3, #1
   125c8:	b085      	sub	sp, #20
   125ca:	4604      	mov	r4, r0
   125cc:	460d      	mov	r5, r1
   125ce:	d005      	beq.n	125dc <smpiScActOobCalcCb+0x1a>
   125d0:	6b43      	ldr	r3, [r0, #52]	; 0x34
   125d2:	4913      	ldr	r1, [pc, #76]	; (12620 <smpiScActOobCalcCb+0x5e>)
   125d4:	68d8      	ldr	r0, [r3, #12]
   125d6:	3020      	adds	r0, #32
   125d8:	f000 fc84 	bl	12ee4 <Calc128Cpy>
   125dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   125de:	7e62      	ldrb	r2, [r4, #25]
   125e0:	68d8      	ldr	r0, [r3, #12]
   125e2:	2a01      	cmp	r2, #1
   125e4:	f100 0030 	add.w	r0, r0, #48	; 0x30
   125e8:	d10a      	bne.n	12600 <smpiScActOobCalcCb+0x3e>
   125ea:	689b      	ldr	r3, [r3, #8]
   125ec:	9001      	str	r0, [sp, #4]
   125ee:	2200      	movs	r2, #0
   125f0:	9200      	str	r2, [sp, #0]
   125f2:	4629      	mov	r1, r5
   125f4:	461a      	mov	r2, r3
   125f6:	4620      	mov	r0, r4
   125f8:	f7fe fc94 	bl	10f24 <SmpScCalcF4>
   125fc:	b005      	add	sp, #20
   125fe:	bd30      	pop	{r4, r5, pc}
   12600:	4907      	ldr	r1, [pc, #28]	; (12620 <smpiScActOobCalcCb+0x5e>)
   12602:	f000 fc6f 	bl	12ee4 <Calc128Cpy>
   12606:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   1260a:	f8ad 300c 	strh.w	r3, [sp, #12]
   1260e:	a903      	add	r1, sp, #12
   12610:	231b      	movs	r3, #27
   12612:	4620      	mov	r0, r4
   12614:	f88d 300e 	strb.w	r3, [sp, #14]
   12618:	f7ff fca1 	bl	11f5e <smpSmExecute>
   1261c:	e7ee      	b.n	125fc <smpiScActOobCalcCb+0x3a>
   1261e:	bf00      	nop
   12620:	00025174 	.word	0x00025174

00012624 <smpiScActOobSendRand>:
   12624:	b573      	push	{r0, r1, r4, r5, r6, lr}
   12626:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12628:	68de      	ldr	r6, [r3, #12]
   1262a:	7e43      	ldrb	r3, [r0, #25]
   1262c:	2b01      	cmp	r3, #1
   1262e:	4604      	mov	r4, r0
   12630:	460d      	mov	r5, r1
   12632:	d114      	bne.n	1265e <smpiScActOobSendRand+0x3a>
   12634:	2210      	movs	r2, #16
   12636:	6849      	ldr	r1, [r1, #4]
   12638:	f106 0040 	add.w	r0, r6, #64	; 0x40
   1263c:	f00d fe40 	bl	202c0 <memcmp>
   12640:	b168      	cbz	r0, 1265e <smpiScActOobSendRand+0x3a>
   12642:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   12646:	f8ad 3004 	strh.w	r3, [sp, #4]
   1264a:	a901      	add	r1, sp, #4
   1264c:	f240 4303 	movw	r3, #1027	; 0x403
   12650:	4620      	mov	r0, r4
   12652:	f8ad 3006 	strh.w	r3, [sp, #6]
   12656:	f7ff fc82 	bl	11f5e <smpSmExecute>
   1265a:	b002      	add	sp, #8
   1265c:	bd70      	pop	{r4, r5, r6, pc}
   1265e:	2304      	movs	r3, #4
   12660:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   12664:	4630      	mov	r0, r6
   12666:	2110      	movs	r1, #16
   12668:	f001 f8b6 	bl	137d8 <SecRand>
   1266c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1266e:	4629      	mov	r1, r5
   12670:	68da      	ldr	r2, [r3, #12]
   12672:	4620      	mov	r0, r4
   12674:	f7fe fd1f 	bl	110b6 <smpScSendRand>
   12678:	e7ef      	b.n	1265a <smpiScActOobSendRand+0x36>

0001267a <smpiScActOobProcRand>:
   1267a:	b538      	push	{r3, r4, r5, lr}
   1267c:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1267e:	4604      	mov	r4, r0
   12680:	460d      	mov	r5, r1
   12682:	68d8      	ldr	r0, [r3, #12]
   12684:	6849      	ldr	r1, [r1, #4]
   12686:	2210      	movs	r2, #16
   12688:	3109      	adds	r1, #9
   1268a:	4410      	add	r0, r2
   1268c:	f000 fc64 	bl	12f58 <WStrReverseCpy>
   12690:	4629      	mov	r1, r5
   12692:	4620      	mov	r0, r4
   12694:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12698:	f7ff b870 	b.w	1177c <smpScActCalcSharedSecret>

0001269c <smpiScActDHKeyCheckSend>:
   1269c:	b538      	push	{r3, r4, r5, lr}
   1269e:	6b43      	ldr	r3, [r0, #52]	; 0x34
   126a0:	4604      	mov	r4, r0
   126a2:	68d8      	ldr	r0, [r3, #12]
   126a4:	2210      	movs	r2, #16
   126a6:	460d      	mov	r5, r1
   126a8:	4410      	add	r0, r2
   126aa:	6849      	ldr	r1, [r1, #4]
   126ac:	f000 fc54 	bl	12f58 <WStrReverseCpy>
   126b0:	230d      	movs	r3, #13
   126b2:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   126b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   126b8:	4629      	mov	r1, r5
   126ba:	68da      	ldr	r2, [r3, #12]
   126bc:	4620      	mov	r0, r4
   126be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   126c2:	f7fe bcd0 	b.w	11066 <smpScSendDHKeyCheck>

000126c6 <smpiScActDHKeyCheckVerify>:
   126c6:	b5f0      	push	{r4, r5, r6, r7, lr}
   126c8:	6b47      	ldr	r7, [r0, #52]	; 0x34
   126ca:	4604      	mov	r4, r0
   126cc:	68fb      	ldr	r3, [r7, #12]
   126ce:	6848      	ldr	r0, [r1, #4]
   126d0:	2210      	movs	r2, #16
   126d2:	b085      	sub	sp, #20
   126d4:	1899      	adds	r1, r3, r2
   126d6:	3009      	adds	r0, #9
   126d8:	f00d fdf2 	bl	202c0 <memcmp>
   126dc:	f894 502d 	ldrb.w	r5, [r4, #45]	; 0x2d
   126e0:	4606      	mov	r6, r0
   126e2:	b9c0      	cbnz	r0, 12716 <smpiScActDHKeyCheckVerify+0x50>
   126e4:	7ee3      	ldrb	r3, [r4, #27]
   126e6:	7d24      	ldrb	r4, [r4, #20]
   126e8:	6939      	ldr	r1, [r7, #16]
   126ea:	429c      	cmp	r4, r3
   126ec:	bf28      	it	cs
   126ee:	461c      	movcs	r4, r3
   126f0:	4622      	mov	r2, r4
   126f2:	3110      	adds	r1, #16
   126f4:	4668      	mov	r0, sp
   126f6:	f7f9 fd03 	bl	c100 <memcpy>
   126fa:	f1c4 0210 	rsb	r2, r4, #16
   126fe:	4631      	mov	r1, r6
   12700:	eb0d 0004 	add.w	r0, sp, r4
   12704:	f00d fe72 	bl	203ec <memset>
   12708:	466a      	mov	r2, sp
   1270a:	2103      	movs	r1, #3
   1270c:	4628      	mov	r0, r5
   1270e:	f7ff f9bd 	bl	11a8c <DmSmpEncryptReq>
   12712:	b005      	add	sp, #20
   12714:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12716:	f640 331c 	movw	r3, #2844	; 0xb1c
   1271a:	4669      	mov	r1, sp
   1271c:	4620      	mov	r0, r4
   1271e:	f8ad 5000 	strh.w	r5, [sp]
   12722:	f8ad 3002 	strh.w	r3, [sp, #2]
   12726:	f7ff fc1a 	bl	11f5e <smpSmExecute>
   1272a:	e7f2      	b.n	12712 <smpiScActDHKeyCheckVerify+0x4c>

0001272c <smprActSendSecurityReq>:
   1272c:	b538      	push	{r3, r4, r5, lr}
   1272e:	2301      	movs	r3, #1
   12730:	4604      	mov	r4, r0
   12732:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
   12736:	200a      	movs	r0, #10
   12738:	460d      	mov	r5, r1
   1273a:	f7fe faf9 	bl	10d30 <smpMsgAlloc>
   1273e:	b148      	cbz	r0, 12754 <smprActSendSecurityReq+0x28>
   12740:	230b      	movs	r3, #11
   12742:	7203      	strb	r3, [r0, #8]
   12744:	792b      	ldrb	r3, [r5, #4]
   12746:	7243      	strb	r3, [r0, #9]
   12748:	4601      	mov	r1, r0
   1274a:	4620      	mov	r0, r4
   1274c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12750:	f7fe baa3 	b.w	10c9a <smpSendPkt>
   12754:	bd38      	pop	{r3, r4, r5, pc}

00012756 <smprActCheckSecurityReq>:
   12756:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
   1275a:	b10b      	cbz	r3, 12760 <smprActCheckSecurityReq+0xa>
   1275c:	f7ff ba1f 	b.w	11b9e <smpActPairingFailed>
   12760:	4770      	bx	lr

00012762 <smprActClearSecurityReq>:
   12762:	2300      	movs	r3, #0
   12764:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
   12768:	4770      	bx	lr

0001276a <smprActProcPairReq>:
   1276a:	6a03      	ldr	r3, [r0, #32]
   1276c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1276e:	4604      	mov	r4, r0
   12770:	460d      	mov	r5, r1
   12772:	b96b      	cbnz	r3, 12790 <smprActProcPairReq+0x26>
   12774:	2040      	movs	r0, #64	; 0x40
   12776:	f006 fc51 	bl	1901c <WsfBufAlloc>
   1277a:	6220      	str	r0, [r4, #32]
   1277c:	b940      	cbnz	r0, 12790 <smprActProcPairReq+0x26>
   1277e:	f640 0303 	movw	r3, #2051	; 0x803
   12782:	806b      	strh	r3, [r5, #2]
   12784:	4629      	mov	r1, r5
   12786:	4620      	mov	r0, r4
   12788:	f7ff fbe9 	bl	11f5e <smpSmExecute>
   1278c:	b003      	add	sp, #12
   1278e:	bd30      	pop	{r4, r5, pc}
   12790:	2201      	movs	r2, #1
   12792:	4611      	mov	r1, r2
   12794:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   12798:	f7fd f8ec 	bl	f974 <DmConnSetIdle>
   1279c:	686b      	ldr	r3, [r5, #4]
   1279e:	461a      	mov	r2, r3
   127a0:	f852 0f08 	ldr.w	r0, [r2, #8]!
   127a4:	6120      	str	r0, [r4, #16]
   127a6:	8890      	ldrh	r0, [r2, #4]
   127a8:	82a0      	strh	r0, [r4, #20]
   127aa:	7992      	ldrb	r2, [r2, #6]
   127ac:	75a2      	strb	r2, [r4, #22]
   127ae:	7a9a      	ldrb	r2, [r3, #10]
   127b0:	f88d 2005 	strb.w	r2, [sp, #5]
   127b4:	7ada      	ldrb	r2, [r3, #11]
   127b6:	f88d 2004 	strb.w	r2, [sp, #4]
   127ba:	7b5a      	ldrb	r2, [r3, #13]
   127bc:	7b9b      	ldrb	r3, [r3, #14]
   127be:	f88d 3007 	strb.w	r3, [sp, #7]
   127c2:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   127c6:	f8ad 3000 	strh.w	r3, [sp]
   127ca:	4668      	mov	r0, sp
   127cc:	2331      	movs	r3, #49	; 0x31
   127ce:	f88d 2006 	strb.w	r2, [sp, #6]
   127d2:	f88d 3002 	strb.w	r3, [sp, #2]
   127d6:	f7fd fce5 	bl	101a4 <DmSmpCbackExec>
   127da:	e7d7      	b.n	1278c <smprActProcPairReq+0x22>

000127dc <smprActSendPairRsp>:
   127dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   127de:	2302      	movs	r3, #2
   127e0:	75c3      	strb	r3, [r0, #23]
   127e2:	4b20      	ldr	r3, [pc, #128]	; (12864 <smprActSendPairRsp+0x88>)
   127e4:	4e20      	ldr	r6, [pc, #128]	; (12868 <smprActSendPairRsp+0x8c>)
   127e6:	681b      	ldr	r3, [r3, #0]
   127e8:	789a      	ldrb	r2, [r3, #2]
   127ea:	7602      	strb	r2, [r0, #24]
   127ec:	790a      	ldrb	r2, [r1, #4]
   127ee:	7642      	strb	r2, [r0, #25]
   127f0:	794a      	ldrb	r2, [r1, #5]
   127f2:	7682      	strb	r2, [r0, #26]
   127f4:	791b      	ldrb	r3, [r3, #4]
   127f6:	76c3      	strb	r3, [r0, #27]
   127f8:	798b      	ldrb	r3, [r1, #6]
   127fa:	7703      	strb	r3, [r0, #28]
   127fc:	79cb      	ldrb	r3, [r1, #7]
   127fe:	7743      	strb	r3, [r0, #29]
   12800:	460d      	mov	r5, r1
   12802:	f8d6 31cc 	ldr.w	r3, [r6, #460]	; 0x1cc
   12806:	f10d 0207 	add.w	r2, sp, #7
   1280a:	f10d 0106 	add.w	r1, sp, #6
   1280e:	4604      	mov	r4, r0
   12810:	4798      	blx	r3
   12812:	b320      	cbz	r0, 1285e <smprActSendPairRsp+0x82>
   12814:	796b      	ldrb	r3, [r5, #5]
   12816:	7ce2      	ldrb	r2, [r4, #19]
   12818:	f003 0308 	and.w	r3, r3, #8
   1281c:	4213      	tst	r3, r2
   1281e:	bf14      	ite	ne
   12820:	230c      	movne	r3, #12
   12822:	2303      	moveq	r3, #3
   12824:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   12828:	4620      	mov	r0, r4
   1282a:	f7ff f985 	bl	11b38 <smpStartRspTimer>
   1282e:	200f      	movs	r0, #15
   12830:	f7fe fa7e 	bl	10d30 <smpMsgAlloc>
   12834:	4601      	mov	r1, r0
   12836:	b150      	cbz	r0, 1284e <smprActSendPairRsp+0x72>
   12838:	4623      	mov	r3, r4
   1283a:	f853 0f17 	ldr.w	r0, [r3, #23]!
   1283e:	6088      	str	r0, [r1, #8]
   12840:	8898      	ldrh	r0, [r3, #4]
   12842:	8188      	strh	r0, [r1, #12]
   12844:	799b      	ldrb	r3, [r3, #6]
   12846:	738b      	strb	r3, [r1, #14]
   12848:	4620      	mov	r0, r4
   1284a:	f7fe fa26 	bl	10c9a <smpSendPkt>
   1284e:	f8d6 31d0 	ldr.w	r3, [r6, #464]	; 0x1d0
   12852:	f89d 2007 	ldrb.w	r2, [sp, #7]
   12856:	f89d 1006 	ldrb.w	r1, [sp, #6]
   1285a:	4620      	mov	r0, r4
   1285c:	4798      	blx	r3
   1285e:	b002      	add	sp, #8
   12860:	bd70      	pop	{r4, r5, r6, pc}
   12862:	bf00      	nop
   12864:	10002ba8 	.word	0x10002ba8
   12868:	10003d50 	.word	0x10003d50

0001286c <smprActProcPairCnf>:
   1286c:	b510      	push	{r4, lr}
   1286e:	684b      	ldr	r3, [r1, #4]
   12870:	6a02      	ldr	r2, [r0, #32]
   12872:	f103 0109 	add.w	r1, r3, #9
   12876:	3220      	adds	r2, #32
   12878:	3319      	adds	r3, #25
   1287a:	f851 4b04 	ldr.w	r4, [r1], #4
   1287e:	f842 4b04 	str.w	r4, [r2], #4
   12882:	4299      	cmp	r1, r3
   12884:	d1f9      	bne.n	1287a <smprActProcPairCnf+0xe>
   12886:	2300      	movs	r3, #0
   12888:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
   1288c:	bd10      	pop	{r4, pc}

0001288e <smprActProcPairCnfCalc1>:
   1288e:	b510      	push	{r4, lr}
   12890:	4604      	mov	r4, r0
   12892:	f7ff ffeb 	bl	1286c <smprActProcPairCnf>
   12896:	6a00      	ldr	r0, [r0, #32]
   12898:	2110      	movs	r1, #16
   1289a:	3030      	adds	r0, #48	; 0x30
   1289c:	f000 ff9c 	bl	137d8 <SecRand>
   128a0:	6a21      	ldr	r1, [r4, #32]
   128a2:	4620      	mov	r0, r4
   128a4:	f101 0230 	add.w	r2, r1, #48	; 0x30
   128a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   128ac:	f7fe b89c 	b.w	109e8 <smpCalcC1Part1>

000128b0 <smprActCnfVerify>:
   128b0:	b570      	push	{r4, r5, r6, lr}
   128b2:	460e      	mov	r6, r1
   128b4:	6a05      	ldr	r5, [r0, #32]
   128b6:	4604      	mov	r4, r0
   128b8:	2210      	movs	r2, #16
   128ba:	f105 0120 	add.w	r1, r5, #32
   128be:	6870      	ldr	r0, [r6, #4]
   128c0:	f00d fcfe 	bl	202c0 <memcmp>
   128c4:	b1a8      	cbz	r0, 128f2 <smprActCnfVerify+0x42>
   128c6:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
   128ca:	4a0f      	ldr	r2, [pc, #60]	; (12908 <smprActCnfVerify+0x58>)
   128cc:	3301      	adds	r3, #1
   128ce:	b2db      	uxtb	r3, r3
   128d0:	6812      	ldr	r2, [r2, #0]
   128d2:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
   128d6:	7952      	ldrb	r2, [r2, #5]
   128d8:	429a      	cmp	r2, r3
   128da:	bf0c      	ite	eq
   128dc:	f240 430d 	movweq	r3, #1037	; 0x40d
   128e0:	f240 4303 	movwne	r3, #1027	; 0x403
   128e4:	8073      	strh	r3, [r6, #2]
   128e6:	4631      	mov	r1, r6
   128e8:	4620      	mov	r0, r4
   128ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   128ee:	f7ff bb36 	b.w	11f5e <smpSmExecute>
   128f2:	f105 0310 	add.w	r3, r5, #16
   128f6:	f105 0230 	add.w	r2, r5, #48	; 0x30
   128fa:	4629      	mov	r1, r5
   128fc:	4620      	mov	r0, r4
   128fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12902:	f7fe b973 	b.w	10bec <smpCalcS1>
   12906:	bf00      	nop
   12908:	10002ba8 	.word	0x10002ba8

0001290c <smprActSendPairRandom>:
   1290c:	b538      	push	{r3, r4, r5, lr}
   1290e:	7ec5      	ldrb	r5, [r0, #27]
   12910:	7d03      	ldrb	r3, [r0, #20]
   12912:	6849      	ldr	r1, [r1, #4]
   12914:	429d      	cmp	r5, r3
   12916:	4604      	mov	r4, r0
   12918:	6a00      	ldr	r0, [r0, #32]
   1291a:	bf28      	it	cs
   1291c:	461d      	movcs	r5, r3
   1291e:	462a      	mov	r2, r5
   12920:	3020      	adds	r0, #32
   12922:	f7f9 fbed 	bl	c100 <memcpy>
   12926:	6a20      	ldr	r0, [r4, #32]
   12928:	3020      	adds	r0, #32
   1292a:	2100      	movs	r1, #0
   1292c:	f1c5 0210 	rsb	r2, r5, #16
   12930:	4428      	add	r0, r5
   12932:	f00d fd5b 	bl	203ec <memset>
   12936:	4620      	mov	r0, r4
   12938:	f7ff f8fe 	bl	11b38 <smpStartRspTimer>
   1293c:	2019      	movs	r0, #25
   1293e:	f7fe f9f7 	bl	10d30 <smpMsgAlloc>
   12942:	4601      	mov	r1, r0
   12944:	b188      	cbz	r0, 1296a <smprActSendPairRandom+0x5e>
   12946:	2304      	movs	r3, #4
   12948:	7203      	strb	r3, [r0, #8]
   1294a:	6a23      	ldr	r3, [r4, #32]
   1294c:	3009      	adds	r0, #9
   1294e:	f103 0230 	add.w	r2, r3, #48	; 0x30
   12952:	3340      	adds	r3, #64	; 0x40
   12954:	f852 5b04 	ldr.w	r5, [r2], #4
   12958:	f840 5b04 	str.w	r5, [r0], #4
   1295c:	429a      	cmp	r2, r3
   1295e:	d1f9      	bne.n	12954 <smprActSendPairRandom+0x48>
   12960:	4620      	mov	r0, r4
   12962:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12966:	f7fe b998 	b.w	10c9a <smpSendPkt>
   1296a:	bd38      	pop	{r3, r4, r5, pc}

0001296c <smprActSendKey>:
   1296c:	b538      	push	{r3, r4, r5, lr}
   1296e:	460d      	mov	r5, r1
   12970:	7f43      	ldrb	r3, [r0, #29]
   12972:	7d81      	ldrb	r1, [r0, #22]
   12974:	4019      	ands	r1, r3
   12976:	4604      	mov	r4, r0
   12978:	f7ff f993 	bl	11ca2 <smpSendKey>
   1297c:	b330      	cbz	r0, 129cc <smprActSendKey+0x60>
   1297e:	2300      	movs	r3, #0
   12980:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   12984:	7f22      	ldrb	r2, [r4, #28]
   12986:	7d63      	ldrb	r3, [r4, #21]
   12988:	4013      	ands	r3, r2
   1298a:	07d8      	lsls	r0, r3, #31
   1298c:	d518      	bpl.n	129c0 <smprActSendKey+0x54>
   1298e:	4a10      	ldr	r2, [pc, #64]	; (129d0 <smprActSendKey+0x64>)
   12990:	f892 21d4 	ldrb.w	r2, [r2, #468]	; 0x1d4
   12994:	b192      	cbz	r2, 129bc <smprActSendKey+0x50>
   12996:	6b62      	ldr	r2, [r4, #52]	; 0x34
   12998:	7812      	ldrb	r2, [r2, #0]
   1299a:	b17a      	cbz	r2, 129bc <smprActSendKey+0x50>
   1299c:	0799      	lsls	r1, r3, #30
   1299e:	d502      	bpl.n	129a6 <smprActSendKey+0x3a>
   129a0:	2308      	movs	r3, #8
   129a2:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   129a6:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   129aa:	b97b      	cbnz	r3, 129cc <smprActSendKey+0x60>
   129ac:	230e      	movs	r3, #14
   129ae:	70ab      	strb	r3, [r5, #2]
   129b0:	4629      	mov	r1, r5
   129b2:	4620      	mov	r0, r4
   129b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   129b8:	f7ff bad1 	b.w	11f5e <smpSmExecute>
   129bc:	2306      	movs	r3, #6
   129be:	e7f0      	b.n	129a2 <smprActSendKey+0x36>
   129c0:	079a      	lsls	r2, r3, #30
   129c2:	d4ed      	bmi.n	129a0 <smprActSendKey+0x34>
   129c4:	075b      	lsls	r3, r3, #29
   129c6:	d5ee      	bpl.n	129a6 <smprActSendKey+0x3a>
   129c8:	230a      	movs	r3, #10
   129ca:	e7ea      	b.n	129a2 <smprActSendKey+0x36>
   129cc:	bd38      	pop	{r3, r4, r5, pc}
   129ce:	bf00      	nop
   129d0:	10003d50 	.word	0x10003d50

000129d4 <smprActSetupKeyDist>:
   129d4:	b538      	push	{r3, r4, r5, lr}
   129d6:	4604      	mov	r4, r0
   129d8:	2300      	movs	r3, #0
   129da:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
   129de:	460d      	mov	r5, r1
   129e0:	f7ff f8aa 	bl	11b38 <smpStartRspTimer>
   129e4:	6a23      	ldr	r3, [r4, #32]
   129e6:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
   129ea:	801a      	strh	r2, [r3, #0]
   129ec:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
   129f0:	f012 0f04 	tst.w	r2, #4
   129f4:	bf14      	ite	ne
   129f6:	2202      	movne	r2, #2
   129f8:	2201      	moveq	r2, #1
   129fa:	77da      	strb	r2, [r3, #31]
   129fc:	7d21      	ldrb	r1, [r4, #20]
   129fe:	7ee2      	ldrb	r2, [r4, #27]
   12a00:	428a      	cmp	r2, r1
   12a02:	bf28      	it	cs
   12a04:	460a      	movcs	r2, r1
   12a06:	f883 2020 	strb.w	r2, [r3, #32]
   12a0a:	4629      	mov	r1, r5
   12a0c:	4620      	mov	r0, r4
   12a0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12a12:	f7ff bfab 	b.w	1296c <smprActSendKey>

00012a16 <smprActRcvKey>:
   12a16:	b538      	push	{r3, r4, r5, lr}
   12a18:	7d42      	ldrb	r2, [r0, #21]
   12a1a:	7f03      	ldrb	r3, [r0, #28]
   12a1c:	460d      	mov	r5, r1
   12a1e:	4013      	ands	r3, r2
   12a20:	684a      	ldr	r2, [r1, #4]
   12a22:	6a01      	ldr	r1, [r0, #32]
   12a24:	4604      	mov	r4, r0
   12a26:	f7ff f9fb 	bl	11e20 <smpProcRcvKey>
   12a2a:	b138      	cbz	r0, 12a3c <smprActRcvKey+0x26>
   12a2c:	230e      	movs	r3, #14
   12a2e:	70ab      	strb	r3, [r5, #2]
   12a30:	4629      	mov	r1, r5
   12a32:	4620      	mov	r0, r4
   12a34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12a38:	f7ff ba91 	b.w	11f5e <smpSmExecute>
   12a3c:	bd38      	pop	{r3, r4, r5, pc}
   12a3e:	bf00      	nop

00012a40 <smprScActStoreLescPin>:
   12a40:	b570      	push	{r4, r5, r6, lr}
   12a42:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12a44:	785a      	ldrb	r2, [r3, #1]
   12a46:	2a03      	cmp	r2, #3
   12a48:	4604      	mov	r4, r0
   12a4a:	460d      	mov	r5, r1
   12a4c:	d11d      	bne.n	12a8a <smprScActStoreLescPin+0x4a>
   12a4e:	68d8      	ldr	r0, [r3, #12]
   12a50:	490e      	ldr	r1, [pc, #56]	; (12a8c <smprScActStoreLescPin+0x4c>)
   12a52:	3020      	adds	r0, #32
   12a54:	f000 fa46 	bl	12ee4 <Calc128Cpy>
   12a58:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12a5a:	490c      	ldr	r1, [pc, #48]	; (12a8c <smprScActStoreLescPin+0x4c>)
   12a5c:	68d8      	ldr	r0, [r3, #12]
   12a5e:	3030      	adds	r0, #48	; 0x30
   12a60:	f000 fa40 	bl	12ee4 <Calc128Cpy>
   12a64:	7d2a      	ldrb	r2, [r5, #20]
   12a66:	2a03      	cmp	r2, #3
   12a68:	d80f      	bhi.n	12a8a <smprScActStoreLescPin+0x4a>
   12a6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12a6c:	68d8      	ldr	r0, [r3, #12]
   12a6e:	1d2e      	adds	r6, r5, #4
   12a70:	4631      	mov	r1, r6
   12a72:	302d      	adds	r0, #45	; 0x2d
   12a74:	f000 fa70 	bl	12f58 <WStrReverseCpy>
   12a78:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12a7a:	7d2a      	ldrb	r2, [r5, #20]
   12a7c:	68d8      	ldr	r0, [r3, #12]
   12a7e:	4631      	mov	r1, r6
   12a80:	303d      	adds	r0, #61	; 0x3d
   12a82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12a86:	f000 ba67 	b.w	12f58 <WStrReverseCpy>
   12a8a:	bd70      	pop	{r4, r5, r6, pc}
   12a8c:	00025174 	.word	0x00025174

00012a90 <smprScActSendPubKey>:
   12a90:	b538      	push	{r3, r4, r5, lr}
   12a92:	4604      	mov	r4, r0
   12a94:	460d      	mov	r5, r1
   12a96:	f7fe fd74 	bl	11582 <smpScActAuthSelect>
   12a9a:	4629      	mov	r1, r5
   12a9c:	4620      	mov	r0, r4
   12a9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12aa2:	f7fe baae 	b.w	11002 <smpScSendPubKey>

00012aa6 <smprScActJwncSetup>:
   12aa6:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12aa8:	b570      	push	{r4, r5, r6, lr}
   12aaa:	4604      	mov	r4, r0
   12aac:	68d8      	ldr	r0, [r3, #12]
   12aae:	4d0d      	ldr	r5, [pc, #52]	; (12ae4 <smprScActJwncSetup+0x3e>)
   12ab0:	460e      	mov	r6, r1
   12ab2:	2110      	movs	r1, #16
   12ab4:	4408      	add	r0, r1
   12ab6:	f000 fe8f 	bl	137d8 <SecRand>
   12aba:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12abc:	68d8      	ldr	r0, [r3, #12]
   12abe:	4629      	mov	r1, r5
   12ac0:	3020      	adds	r0, #32
   12ac2:	f000 fa0f 	bl	12ee4 <Calc128Cpy>
   12ac6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12ac8:	68d8      	ldr	r0, [r3, #12]
   12aca:	4629      	mov	r1, r5
   12acc:	3030      	adds	r0, #48	; 0x30
   12ace:	f000 fa09 	bl	12ee4 <Calc128Cpy>
   12ad2:	2304      	movs	r3, #4
   12ad4:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   12ad8:	4631      	mov	r1, r6
   12ada:	4620      	mov	r0, r4
   12adc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12ae0:	f7fe bd99 	b.w	11616 <smpScActJwncCalcF4>
   12ae4:	00025174 	.word	0x00025174

00012ae8 <smprScActJwncSendCnf>:
   12ae8:	684a      	ldr	r2, [r1, #4]
   12aea:	f7fe bb0c 	b.w	11106 <smpScSendPairCnf>

00012aee <smprScActJwncCalcG2>:
   12aee:	b538      	push	{r3, r4, r5, lr}
   12af0:	460d      	mov	r5, r1
   12af2:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12af4:	6849      	ldr	r1, [r1, #4]
   12af6:	4604      	mov	r4, r0
   12af8:	3109      	adds	r1, #9
   12afa:	68d8      	ldr	r0, [r3, #12]
   12afc:	2210      	movs	r2, #16
   12afe:	f000 fa2b 	bl	12f58 <WStrReverseCpy>
   12b02:	4629      	mov	r1, r5
   12b04:	4620      	mov	r0, r4
   12b06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12b0a:	f7fe bda6 	b.w	1165a <smpScActJwncCalcG2>

00012b0e <smprScActPkStoreCnf>:
   12b0e:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12b10:	6849      	ldr	r1, [r1, #4]
   12b12:	68d8      	ldr	r0, [r3, #12]
   12b14:	2210      	movs	r2, #16
   12b16:	3109      	adds	r1, #9
   12b18:	3050      	adds	r0, #80	; 0x50
   12b1a:	f000 ba1d 	b.w	12f58 <WStrReverseCpy>

00012b1e <smprScActPkCalcCb>:
   12b1e:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12b20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12b22:	4604      	mov	r4, r0
   12b24:	68d8      	ldr	r0, [r3, #12]
   12b26:	460d      	mov	r5, r1
   12b28:	2110      	movs	r1, #16
   12b2a:	4408      	add	r0, r1
   12b2c:	f000 fe54 	bl	137d8 <SecRand>
   12b30:	2304      	movs	r3, #4
   12b32:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   12b36:	f7fd fce9 	bl	1050c <DmSecGetEccKey>
   12b3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12b3c:	4606      	mov	r6, r0
   12b3e:	4620      	mov	r0, r4
   12b40:	689f      	ldr	r7, [r3, #8]
   12b42:	f7fe fb08 	bl	11156 <smpGetPkBit>
   12b46:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12b48:	68d9      	ldr	r1, [r3, #12]
   12b4a:	3110      	adds	r1, #16
   12b4c:	e9cd 0100 	strd	r0, r1, [sp]
   12b50:	463b      	mov	r3, r7
   12b52:	4632      	mov	r2, r6
   12b54:	4629      	mov	r1, r5
   12b56:	4620      	mov	r0, r4
   12b58:	f7fe f9e4 	bl	10f24 <SmpScCalcF4>
   12b5c:	b003      	add	sp, #12
   12b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00012b60 <smprScActPkStoreCnfAndCalcCb>:
   12b60:	b538      	push	{r3, r4, r5, lr}
   12b62:	4604      	mov	r4, r0
   12b64:	460d      	mov	r5, r1
   12b66:	f7ff ffd2 	bl	12b0e <smprScActPkStoreCnf>
   12b6a:	4629      	mov	r1, r5
   12b6c:	4620      	mov	r0, r4
   12b6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12b72:	f7ff bfd4 	b.w	12b1e <smprScActPkCalcCb>

00012b76 <smprScActPkStorePinAndCalcCb>:
   12b76:	b538      	push	{r3, r4, r5, lr}
   12b78:	4604      	mov	r4, r0
   12b7a:	460d      	mov	r5, r1
   12b7c:	f7ff ff60 	bl	12a40 <smprScActStoreLescPin>
   12b80:	4629      	mov	r1, r5
   12b82:	4620      	mov	r0, r4
   12b84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12b88:	f7ff bfc9 	b.w	12b1e <smprScActPkCalcCb>

00012b8c <smprScActPkSendCnf>:
   12b8c:	f7ff bfac 	b.w	12ae8 <smprScActJwncSendCnf>

00012b90 <smprScActPkCalcCa>:
   12b90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12b92:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12b94:	460d      	mov	r5, r1
   12b96:	6849      	ldr	r1, [r1, #4]
   12b98:	4604      	mov	r4, r0
   12b9a:	2210      	movs	r2, #16
   12b9c:	3109      	adds	r1, #9
   12b9e:	68d8      	ldr	r0, [r3, #12]
   12ba0:	f000 f9da 	bl	12f58 <WStrReverseCpy>
   12ba4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12ba6:	689e      	ldr	r6, [r3, #8]
   12ba8:	f7fd fcb0 	bl	1050c <DmSecGetEccKey>
   12bac:	4607      	mov	r7, r0
   12bae:	4620      	mov	r0, r4
   12bb0:	f7fe fad1 	bl	11156 <smpGetPkBit>
   12bb4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12bb6:	68db      	ldr	r3, [r3, #12]
   12bb8:	4632      	mov	r2, r6
   12bba:	e9cd 0300 	strd	r0, r3, [sp]
   12bbe:	4629      	mov	r1, r5
   12bc0:	463b      	mov	r3, r7
   12bc2:	4620      	mov	r0, r4
   12bc4:	f7fe f9ae 	bl	10f24 <SmpScCalcF4>
   12bc8:	b003      	add	sp, #12
   12bca:	bdf0      	pop	{r4, r5, r6, r7, pc}

00012bcc <smprScActPkSendRand>:
   12bcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12bce:	6b45      	ldr	r5, [r0, #52]	; 0x34
   12bd0:	68ef      	ldr	r7, [r5, #12]
   12bd2:	4604      	mov	r4, r0
   12bd4:	460e      	mov	r6, r1
   12bd6:	2210      	movs	r2, #16
   12bd8:	6849      	ldr	r1, [r1, #4]
   12bda:	f107 0050 	add.w	r0, r7, #80	; 0x50
   12bde:	f00d fb6f 	bl	202c0 <memcmp>
   12be2:	b168      	cbz	r0, 12c00 <smprScActPkSendRand+0x34>
   12be4:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   12be8:	f8ad 3004 	strh.w	r3, [sp, #4]
   12bec:	f240 4303 	movw	r3, #1027	; 0x403
   12bf0:	f8ad 3006 	strh.w	r3, [sp, #6]
   12bf4:	a901      	add	r1, sp, #4
   12bf6:	4620      	mov	r0, r4
   12bf8:	f7ff f9b1 	bl	11f5e <smpSmExecute>
   12bfc:	b003      	add	sp, #12
   12bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12c00:	78eb      	ldrb	r3, [r5, #3]
   12c02:	3301      	adds	r3, #1
   12c04:	b2db      	uxtb	r3, r3
   12c06:	2b13      	cmp	r3, #19
   12c08:	70eb      	strb	r3, [r5, #3]
   12c0a:	d907      	bls.n	12c1c <smprScActPkSendRand+0x50>
   12c0c:	231a      	movs	r3, #26
   12c0e:	f88d 3006 	strb.w	r3, [sp, #6]
   12c12:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   12c16:	f8ad 3004 	strh.w	r3, [sp, #4]
   12c1a:	e7eb      	b.n	12bf4 <smprScActPkSendRand+0x28>
   12c1c:	2303      	movs	r3, #3
   12c1e:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   12c22:	f107 0210 	add.w	r2, r7, #16
   12c26:	2319      	movs	r3, #25
   12c28:	4631      	mov	r1, r6
   12c2a:	4620      	mov	r0, r4
   12c2c:	f88d 3006 	strb.w	r3, [sp, #6]
   12c30:	f7fe fa41 	bl	110b6 <smpScSendRand>
   12c34:	e7ed      	b.n	12c12 <smprScActPkSendRand+0x46>

00012c36 <smprScActOobSetup>:
   12c36:	2304      	movs	r3, #4
   12c38:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
   12c3c:	4770      	bx	lr

00012c3e <smprScActOobCalcCa>:
   12c3e:	b530      	push	{r4, r5, lr}
   12c40:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12c42:	460d      	mov	r5, r1
   12c44:	6849      	ldr	r1, [r1, #4]
   12c46:	4604      	mov	r4, r0
   12c48:	b085      	sub	sp, #20
   12c4a:	68d8      	ldr	r0, [r3, #12]
   12c4c:	2210      	movs	r2, #16
   12c4e:	3109      	adds	r1, #9
   12c50:	f000 f982 	bl	12f58 <WStrReverseCpy>
   12c54:	7e63      	ldrb	r3, [r4, #25]
   12c56:	2b01      	cmp	r3, #1
   12c58:	d005      	beq.n	12c66 <smprScActOobCalcCa+0x28>
   12c5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12c5c:	4912      	ldr	r1, [pc, #72]	; (12ca8 <smprScActOobCalcCa+0x6a>)
   12c5e:	68d8      	ldr	r0, [r3, #12]
   12c60:	3030      	adds	r0, #48	; 0x30
   12c62:	f000 f93f 	bl	12ee4 <Calc128Cpy>
   12c66:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12c68:	7ca2      	ldrb	r2, [r4, #18]
   12c6a:	68d8      	ldr	r0, [r3, #12]
   12c6c:	2a01      	cmp	r2, #1
   12c6e:	f100 0020 	add.w	r0, r0, #32
   12c72:	d10a      	bne.n	12c8a <smprScActOobCalcCa+0x4c>
   12c74:	689b      	ldr	r3, [r3, #8]
   12c76:	9001      	str	r0, [sp, #4]
   12c78:	2200      	movs	r2, #0
   12c7a:	9200      	str	r2, [sp, #0]
   12c7c:	4629      	mov	r1, r5
   12c7e:	461a      	mov	r2, r3
   12c80:	4620      	mov	r0, r4
   12c82:	f7fe f94f 	bl	10f24 <SmpScCalcF4>
   12c86:	b005      	add	sp, #20
   12c88:	bd30      	pop	{r4, r5, pc}
   12c8a:	4907      	ldr	r1, [pc, #28]	; (12ca8 <smprScActOobCalcCa+0x6a>)
   12c8c:	f000 f92a 	bl	12ee4 <Calc128Cpy>
   12c90:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   12c94:	f8ad 300c 	strh.w	r3, [sp, #12]
   12c98:	a903      	add	r1, sp, #12
   12c9a:	231b      	movs	r3, #27
   12c9c:	4620      	mov	r0, r4
   12c9e:	f88d 300e 	strb.w	r3, [sp, #14]
   12ca2:	f7ff f95c 	bl	11f5e <smpSmExecute>
   12ca6:	e7ee      	b.n	12c86 <smprScActOobCalcCa+0x48>
   12ca8:	00025174 	.word	0x00025174

00012cac <smprScActOobSendRand>:
   12cac:	b573      	push	{r0, r1, r4, r5, r6, lr}
   12cae:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12cb0:	68de      	ldr	r6, [r3, #12]
   12cb2:	7c83      	ldrb	r3, [r0, #18]
   12cb4:	2b01      	cmp	r3, #1
   12cb6:	4604      	mov	r4, r0
   12cb8:	460d      	mov	r5, r1
   12cba:	d114      	bne.n	12ce6 <smprScActOobSendRand+0x3a>
   12cbc:	2210      	movs	r2, #16
   12cbe:	6849      	ldr	r1, [r1, #4]
   12cc0:	f106 0050 	add.w	r0, r6, #80	; 0x50
   12cc4:	f00d fafc 	bl	202c0 <memcmp>
   12cc8:	b168      	cbz	r0, 12ce6 <smprScActOobSendRand+0x3a>
   12cca:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   12cce:	f8ad 3004 	strh.w	r3, [sp, #4]
   12cd2:	a901      	add	r1, sp, #4
   12cd4:	f240 4303 	movw	r3, #1027	; 0x403
   12cd8:	4620      	mov	r0, r4
   12cda:	f8ad 3006 	strh.w	r3, [sp, #6]
   12cde:	f7ff f93e 	bl	11f5e <smpSmExecute>
   12ce2:	b002      	add	sp, #8
   12ce4:	bd70      	pop	{r4, r5, r6, pc}
   12ce6:	230d      	movs	r3, #13
   12ce8:	2110      	movs	r1, #16
   12cea:	1870      	adds	r0, r6, r1
   12cec:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   12cf0:	f000 fd72 	bl	137d8 <SecRand>
   12cf4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12cf6:	68da      	ldr	r2, [r3, #12]
   12cf8:	4629      	mov	r1, r5
   12cfa:	3210      	adds	r2, #16
   12cfc:	4620      	mov	r0, r4
   12cfe:	f7fe f9da 	bl	110b6 <smpScSendRand>
   12d02:	e7ee      	b.n	12ce2 <smprScActOobSendRand+0x36>

00012d04 <smprScActWaitDhCheck>:
   12d04:	220d      	movs	r2, #13
   12d06:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12d08:	f880 202f 	strb.w	r2, [r0, #47]	; 0x2f
   12d0c:	785a      	ldrb	r2, [r3, #1]
   12d0e:	2a02      	cmp	r2, #2
   12d10:	d003      	beq.n	12d1a <smprScActWaitDhCheck+0x16>
   12d12:	68da      	ldr	r2, [r3, #12]
   12d14:	3210      	adds	r2, #16
   12d16:	f7fe b9ce 	b.w	110b6 <smpScSendRand>
   12d1a:	4770      	bx	lr

00012d1c <smprScActCalcDHKey>:
   12d1c:	b538      	push	{r3, r4, r5, lr}
   12d1e:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12d20:	4604      	mov	r4, r0
   12d22:	460d      	mov	r5, r1
   12d24:	68d8      	ldr	r0, [r3, #12]
   12d26:	6849      	ldr	r1, [r1, #4]
   12d28:	3050      	adds	r0, #80	; 0x50
   12d2a:	3109      	adds	r1, #9
   12d2c:	2210      	movs	r2, #16
   12d2e:	f000 f913 	bl	12f58 <WStrReverseCpy>
   12d32:	4629      	mov	r1, r5
   12d34:	4620      	mov	r0, r4
   12d36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12d3a:	f7fe bd1f 	b.w	1177c <smpScActCalcSharedSecret>

00012d3e <smprScActDHKeyCheckSend>:
   12d3e:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12d40:	b573      	push	{r0, r1, r4, r5, r6, lr}
   12d42:	4604      	mov	r4, r0
   12d44:	68d8      	ldr	r0, [r3, #12]
   12d46:	460e      	mov	r6, r1
   12d48:	3010      	adds	r0, #16
   12d4a:	6849      	ldr	r1, [r1, #4]
   12d4c:	f000 f8ca 	bl	12ee4 <Calc128Cpy>
   12d50:	6b65      	ldr	r5, [r4, #52]	; 0x34
   12d52:	68e9      	ldr	r1, [r5, #12]
   12d54:	2210      	movs	r2, #16
   12d56:	f101 0050 	add.w	r0, r1, #80	; 0x50
   12d5a:	f00d fab1 	bl	202c0 <memcmp>
   12d5e:	4601      	mov	r1, r0
   12d60:	b9a0      	cbnz	r0, 12d8c <smprScActDHKeyCheckSend+0x4e>
   12d62:	7d20      	ldrb	r0, [r4, #20]
   12d64:	7ee3      	ldrb	r3, [r4, #27]
   12d66:	692d      	ldr	r5, [r5, #16]
   12d68:	4298      	cmp	r0, r3
   12d6a:	bf28      	it	cs
   12d6c:	4618      	movcs	r0, r3
   12d6e:	3510      	adds	r5, #16
   12d70:	f1c0 0210 	rsb	r2, r0, #16
   12d74:	4428      	add	r0, r5
   12d76:	f00d fb39 	bl	203ec <memset>
   12d7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12d7c:	68da      	ldr	r2, [r3, #12]
   12d7e:	4631      	mov	r1, r6
   12d80:	3210      	adds	r2, #16
   12d82:	4620      	mov	r0, r4
   12d84:	f7fe f96f 	bl	11066 <smpScSendDHKeyCheck>
   12d88:	b002      	add	sp, #8
   12d8a:	bd70      	pop	{r4, r5, r6, pc}
   12d8c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   12d90:	f8ad 3004 	strh.w	r3, [sp, #4]
   12d94:	a901      	add	r1, sp, #4
   12d96:	f640 331c 	movw	r3, #2844	; 0xb1c
   12d9a:	4620      	mov	r0, r4
   12d9c:	f8ad 3006 	strh.w	r3, [sp, #6]
   12da0:	f7ff f8dd 	bl	11f5e <smpSmExecute>
   12da4:	e7f0      	b.n	12d88 <smprScActDHKeyCheckSend+0x4a>
   12da6:	bf00      	nop

00012da8 <HciEvtRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciEvtRegister(hciEvtCback_t evtCback)
{
   12da8:	b480      	push	{r7}
   12daa:	b083      	sub	sp, #12
   12dac:	af00      	add	r7, sp, #0
   12dae:	6078      	str	r0, [r7, #4]
  hciCb.evtCback = evtCback;
   12db0:	4a03      	ldr	r2, [pc, #12]	; (12dc0 <HciEvtRegister+0x18>)
   12db2:	687b      	ldr	r3, [r7, #4]
   12db4:	6093      	str	r3, [r2, #8]
}
   12db6:	370c      	adds	r7, #12
   12db8:	46bd      	mov	sp, r7
   12dba:	f85d 7b04 	ldr.w	r7, [sp], #4
   12dbe:	4770      	bx	lr
   12dc0:	1000916c 	.word	0x1000916c

00012dc4 <HciSecRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSecRegister(hciSecCback_t secCback)
{
   12dc4:	b480      	push	{r7}
   12dc6:	b083      	sub	sp, #12
   12dc8:	af00      	add	r7, sp, #0
   12dca:	6078      	str	r0, [r7, #4]
  hciCb.secCback = secCback;
   12dcc:	4a03      	ldr	r2, [pc, #12]	; (12ddc <HciSecRegister+0x18>)
   12dce:	687b      	ldr	r3, [r7, #4]
   12dd0:	60d3      	str	r3, [r2, #12]
}
   12dd2:	370c      	adds	r7, #12
   12dd4:	46bd      	mov	sp, r7
   12dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
   12dda:	4770      	bx	lr
   12ddc:	1000916c 	.word	0x1000916c

00012de0 <HciAclRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciAclRegister(hciAclCback_t aclCback, hciFlowCback_t flowCback)
{
   12de0:	b480      	push	{r7}
   12de2:	b083      	sub	sp, #12
   12de4:	af00      	add	r7, sp, #0
   12de6:	6078      	str	r0, [r7, #4]
   12de8:	6039      	str	r1, [r7, #0]
  hciCb.aclCback = aclCback;
   12dea:	4a05      	ldr	r2, [pc, #20]	; (12e00 <HciAclRegister+0x20>)
   12dec:	687b      	ldr	r3, [r7, #4]
   12dee:	6113      	str	r3, [r2, #16]
  hciCb.flowCback = flowCback;
   12df0:	4a03      	ldr	r2, [pc, #12]	; (12e00 <HciAclRegister+0x20>)
   12df2:	683b      	ldr	r3, [r7, #0]
   12df4:	6153      	str	r3, [r2, #20]
}
   12df6:	370c      	adds	r7, #12
   12df8:	46bd      	mov	sp, r7
   12dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
   12dfe:	4770      	bx	lr
   12e00:	1000916c 	.word	0x1000916c

00012e04 <HciHandlerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciHandlerInit(wsfHandlerId_t handlerId)
{
   12e04:	b580      	push	{r7, lr}
   12e06:	b082      	sub	sp, #8
   12e08:	af00      	add	r7, sp, #0
   12e0a:	4603      	mov	r3, r0
   12e0c:	71fb      	strb	r3, [r7, #7]
  /* store handler ID */
  hciCb.handlerId = handlerId;
   12e0e:	4a07      	ldr	r2, [pc, #28]	; (12e2c <HciHandlerInit+0x28>)
   12e10:	79fb      	ldrb	r3, [r7, #7]
   12e12:	7613      	strb	r3, [r2, #24]

  /* init rx queue */
  WSF_QUEUE_INIT(&hciCb.rxQueue);
   12e14:	4b05      	ldr	r3, [pc, #20]	; (12e2c <HciHandlerInit+0x28>)
   12e16:	2200      	movs	r2, #0
   12e18:	601a      	str	r2, [r3, #0]
   12e1a:	4b04      	ldr	r3, [pc, #16]	; (12e2c <HciHandlerInit+0x28>)
   12e1c:	2200      	movs	r2, #0
   12e1e:	605a      	str	r2, [r3, #4]
    
  /* perform other hci initialization */
  HciCoreInit();
   12e20:	f003 fd5e 	bl	168e0 <HciCoreInit>
}
   12e24:	3708      	adds	r7, #8
   12e26:	46bd      	mov	sp, r7
   12e28:	bd80      	pop	{r7, pc}
   12e2a:	bf00      	nop
   12e2c:	1000916c 	.word	0x1000916c

00012e30 <HciHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   12e30:	b580      	push	{r7, lr}
   12e32:	b082      	sub	sp, #8
   12e34:	af00      	add	r7, sp, #0
   12e36:	4603      	mov	r3, r0
   12e38:	6039      	str	r1, [r7, #0]
   12e3a:	71fb      	strb	r3, [r7, #7]
  HciCoreHandler(event, pMsg);
   12e3c:	79fb      	ldrb	r3, [r7, #7]
   12e3e:	4618      	mov	r0, r3
   12e40:	6839      	ldr	r1, [r7, #0]
   12e42:	f003 fed3 	bl	16bec <HciCoreHandler>
}
   12e46:	3708      	adds	r7, #8
   12e48:	46bd      	mov	sp, r7
   12e4a:	bd80      	pop	{r7, pc}

00012e4c <BdaCpy>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void BdaCpy(uint8_t *pDst, const uint8_t *pSrc)
{
   12e4c:	b580      	push	{r7, lr}
   12e4e:	b082      	sub	sp, #8
   12e50:	af00      	add	r7, sp, #0
   12e52:	6078      	str	r0, [r7, #4]
   12e54:	6039      	str	r1, [r7, #0]
  memcpy(pDst, pSrc, BDA_ADDR_LEN);
   12e56:	6878      	ldr	r0, [r7, #4]
   12e58:	6839      	ldr	r1, [r7, #0]
   12e5a:	2206      	movs	r2, #6
   12e5c:	f7f9 f950 	bl	c100 <memcpy>
}
   12e60:	3708      	adds	r7, #8
   12e62:	46bd      	mov	sp, r7
   12e64:	bd80      	pop	{r7, pc}
   12e66:	bf00      	nop

00012e68 <BdaCmp>:
 *
 *  \return TRUE if addresses match, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t BdaCmp(const uint8_t *pAddr1, const uint8_t *pAddr2)
{
   12e68:	b580      	push	{r7, lr}
   12e6a:	b082      	sub	sp, #8
   12e6c:	af00      	add	r7, sp, #0
   12e6e:	6078      	str	r0, [r7, #4]
   12e70:	6039      	str	r1, [r7, #0]
  return (memcmp(pAddr1, pAddr2, BDA_ADDR_LEN) == 0);
   12e72:	6878      	ldr	r0, [r7, #4]
   12e74:	6839      	ldr	r1, [r7, #0]
   12e76:	2206      	movs	r2, #6
   12e78:	f00d fa22 	bl	202c0 <memcmp>
   12e7c:	4603      	mov	r3, r0
   12e7e:	2b00      	cmp	r3, #0
   12e80:	bf0c      	ite	eq
   12e82:	2301      	moveq	r3, #1
   12e84:	2300      	movne	r3, #0
   12e86:	b2db      	uxtb	r3, r3
}
   12e88:	4618      	mov	r0, r3
   12e8a:	3708      	adds	r7, #8
   12e8c:	46bd      	mov	sp, r7
   12e8e:	bd80      	pop	{r7, pc}

00012e90 <BdaClr>:
 *
 *  \return pDst + BDA_ADDR_LEN
 */
/*************************************************************************************************/
uint8_t *BdaClr(uint8_t *pDst)
{
   12e90:	b580      	push	{r7, lr}
   12e92:	b082      	sub	sp, #8
   12e94:	af00      	add	r7, sp, #0
   12e96:	6078      	str	r0, [r7, #4]
  memset(pDst, 0, BDA_ADDR_LEN);
   12e98:	6878      	ldr	r0, [r7, #4]
   12e9a:	2100      	movs	r1, #0
   12e9c:	2206      	movs	r2, #6
   12e9e:	f00d faa5 	bl	203ec <memset>

  return (pDst + BDA_ADDR_LEN);
   12ea2:	687b      	ldr	r3, [r7, #4]
   12ea4:	3306      	adds	r3, #6
}
   12ea6:	4618      	mov	r0, r3
   12ea8:	3708      	adds	r7, #8
   12eaa:	46bd      	mov	sp, r7
   12eac:	bd80      	pop	{r7, pc}
   12eae:	bf00      	nop

00012eb0 <BdaIsZeros>:
*
*  \return TRUE if address is all zeros, FALSE otherwise.
*/
/*************************************************************************************************/
bool_t BdaIsZeros(const uint8_t *pAddr)
{
   12eb0:	b580      	push	{r7, lr}
   12eb2:	b084      	sub	sp, #16
   12eb4:	af00      	add	r7, sp, #0
   12eb6:	6078      	str	r0, [r7, #4]
  uint8_t addrZeros[BDA_ADDR_LEN] = { 0 };
   12eb8:	2300      	movs	r3, #0
   12eba:	60bb      	str	r3, [r7, #8]
   12ebc:	2300      	movs	r3, #0
   12ebe:	81bb      	strh	r3, [r7, #12]

  return (memcmp(pAddr, addrZeros, BDA_ADDR_LEN) == 0);
   12ec0:	f107 0308 	add.w	r3, r7, #8
   12ec4:	6878      	ldr	r0, [r7, #4]
   12ec6:	4619      	mov	r1, r3
   12ec8:	2206      	movs	r2, #6
   12eca:	f00d f9f9 	bl	202c0 <memcmp>
   12ece:	4603      	mov	r3, r0
   12ed0:	2b00      	cmp	r3, #0
   12ed2:	bf0c      	ite	eq
   12ed4:	2301      	moveq	r3, #1
   12ed6:	2300      	movne	r3, #0
   12ed8:	b2db      	uxtb	r3, r3
}
   12eda:	4618      	mov	r0, r3
   12edc:	3710      	adds	r7, #16
   12ede:	46bd      	mov	sp, r7
   12ee0:	bd80      	pop	{r7, pc}
   12ee2:	bf00      	nop

00012ee4 <Calc128Cpy>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void Calc128Cpy(uint8_t *pDst, uint8_t *pSrc)
{
   12ee4:	b580      	push	{r7, lr}
   12ee6:	b082      	sub	sp, #8
   12ee8:	af00      	add	r7, sp, #0
   12eea:	6078      	str	r0, [r7, #4]
   12eec:	6039      	str	r1, [r7, #0]
  memcpy(pDst, pSrc, CALC128_LEN);
   12eee:	6878      	ldr	r0, [r7, #4]
   12ef0:	6839      	ldr	r1, [r7, #0]
   12ef2:	2210      	movs	r2, #16
   12ef4:	f7f9 f904 	bl	c100 <memcpy>
}
   12ef8:	3708      	adds	r7, #8
   12efa:	46bd      	mov	sp, r7
   12efc:	bd80      	pop	{r7, pc}
   12efe:	bf00      	nop

00012f00 <Calc128Cpy64>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void Calc128Cpy64(uint8_t *pDst, uint8_t *pSrc)
{
   12f00:	b580      	push	{r7, lr}
   12f02:	b082      	sub	sp, #8
   12f04:	af00      	add	r7, sp, #0
   12f06:	6078      	str	r0, [r7, #4]
   12f08:	6039      	str	r1, [r7, #0]
  memcpy(pDst, pSrc, CALC128_LEN/2);
   12f0a:	6878      	ldr	r0, [r7, #4]
   12f0c:	6839      	ldr	r1, [r7, #0]
   12f0e:	2208      	movs	r2, #8
   12f10:	f7f9 f8f6 	bl	c100 <memcpy>
}
   12f14:	3708      	adds	r7, #8
   12f16:	46bd      	mov	sp, r7
   12f18:	bd80      	pop	{r7, pc}
   12f1a:	bf00      	nop

00012f1c <Calc128Xor>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void Calc128Xor(uint8_t *pDst, uint8_t *pSrc)
{
   12f1c:	b480      	push	{r7}
   12f1e:	b085      	sub	sp, #20
   12f20:	af00      	add	r7, sp, #0
   12f22:	6078      	str	r0, [r7, #4]
   12f24:	6039      	str	r1, [r7, #0]
  uint8_t i;
  
  for (i = CALC128_LEN; i > 0; i--)
   12f26:	2310      	movs	r3, #16
   12f28:	73fb      	strb	r3, [r7, #15]
   12f2a:	e00d      	b.n	12f48 <Calc128Xor+0x2c>
  {
    *pDst++ ^= *pSrc++;
   12f2c:	683b      	ldr	r3, [r7, #0]
   12f2e:	1c5a      	adds	r2, r3, #1
   12f30:	603a      	str	r2, [r7, #0]
   12f32:	781a      	ldrb	r2, [r3, #0]
   12f34:	687b      	ldr	r3, [r7, #4]
   12f36:	1c59      	adds	r1, r3, #1
   12f38:	6079      	str	r1, [r7, #4]
   12f3a:	7819      	ldrb	r1, [r3, #0]
   12f3c:	404a      	eors	r2, r1
   12f3e:	b2d2      	uxtb	r2, r2
   12f40:	701a      	strb	r2, [r3, #0]
/*************************************************************************************************/
void Calc128Xor(uint8_t *pDst, uint8_t *pSrc)
{
  uint8_t i;
  
  for (i = CALC128_LEN; i > 0; i--)
   12f42:	7bfb      	ldrb	r3, [r7, #15]
   12f44:	3b01      	subs	r3, #1
   12f46:	73fb      	strb	r3, [r7, #15]
   12f48:	7bfb      	ldrb	r3, [r7, #15]
   12f4a:	2b00      	cmp	r3, #0
   12f4c:	d1ee      	bne.n	12f2c <Calc128Xor+0x10>
  {
    *pDst++ ^= *pSrc++;
  }
}
   12f4e:	3714      	adds	r7, #20
   12f50:	46bd      	mov	sp, r7
   12f52:	f85d 7b04 	ldr.w	r7, [sp], #4
   12f56:	4770      	bx	lr

00012f58 <WStrReverseCpy>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WStrReverseCpy(uint8_t *pBuf1, const uint8_t *pBuf2, uint16_t len)
{
   12f58:	b480      	push	{r7}
   12f5a:	b087      	sub	sp, #28
   12f5c:	af00      	add	r7, sp, #0
   12f5e:	60f8      	str	r0, [r7, #12]
   12f60:	60b9      	str	r1, [r7, #8]
   12f62:	4613      	mov	r3, r2
   12f64:	80fb      	strh	r3, [r7, #6]
  int16_t i;

  for (i=0; i<len; i++)
   12f66:	2300      	movs	r3, #0
   12f68:	82fb      	strh	r3, [r7, #22]
   12f6a:	e012      	b.n	12f92 <WStrReverseCpy+0x3a>
  {
    pBuf1[len-1-i] = pBuf2[i];
   12f6c:	88fb      	ldrh	r3, [r7, #6]
   12f6e:	1e5a      	subs	r2, r3, #1
   12f70:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
   12f74:	1ad3      	subs	r3, r2, r3
   12f76:	461a      	mov	r2, r3
   12f78:	68fb      	ldr	r3, [r7, #12]
   12f7a:	4413      	add	r3, r2
   12f7c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
   12f80:	68b9      	ldr	r1, [r7, #8]
   12f82:	440a      	add	r2, r1
   12f84:	7812      	ldrb	r2, [r2, #0]
   12f86:	701a      	strb	r2, [r3, #0]
/*************************************************************************************************/
void WStrReverseCpy(uint8_t *pBuf1, const uint8_t *pBuf2, uint16_t len)
{
  int16_t i;

  for (i=0; i<len; i++)
   12f88:	8afb      	ldrh	r3, [r7, #22]
   12f8a:	b29b      	uxth	r3, r3
   12f8c:	3301      	adds	r3, #1
   12f8e:	b29b      	uxth	r3, r3
   12f90:	82fb      	strh	r3, [r7, #22]
   12f92:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
   12f96:	88fb      	ldrh	r3, [r7, #6]
   12f98:	429a      	cmp	r2, r3
   12f9a:	dbe7      	blt.n	12f6c <WStrReverseCpy+0x14>
  {
    pBuf1[len-1-i] = pBuf2[i];
  }
}
   12f9c:	371c      	adds	r7, #28
   12f9e:	46bd      	mov	sp, r7
   12fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
   12fa4:	4770      	bx	lr
   12fa6:	bf00      	nop

00012fa8 <WStrReverse>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WStrReverse(uint8_t *pBuf, uint8_t len)
{
   12fa8:	b480      	push	{r7}
   12faa:	b085      	sub	sp, #20
   12fac:	af00      	add	r7, sp, #0
   12fae:	6078      	str	r0, [r7, #4]
   12fb0:	460b      	mov	r3, r1
   12fb2:	70fb      	strb	r3, [r7, #3]
  uint8_t i, temp;

  for (i=0; i<len/2; i++)
   12fb4:	2300      	movs	r3, #0
   12fb6:	73fb      	strb	r3, [r7, #15]
   12fb8:	e01a      	b.n	12ff0 <WStrReverse+0x48>
  {
    temp = pBuf[len-i-1];
   12fba:	78fa      	ldrb	r2, [r7, #3]
   12fbc:	7bfb      	ldrb	r3, [r7, #15]
   12fbe:	1ad3      	subs	r3, r2, r3
   12fc0:	3b01      	subs	r3, #1
   12fc2:	687a      	ldr	r2, [r7, #4]
   12fc4:	4413      	add	r3, r2
   12fc6:	781b      	ldrb	r3, [r3, #0]
   12fc8:	73bb      	strb	r3, [r7, #14]
    pBuf[len-i-1] = pBuf[i];
   12fca:	78fa      	ldrb	r2, [r7, #3]
   12fcc:	7bfb      	ldrb	r3, [r7, #15]
   12fce:	1ad3      	subs	r3, r2, r3
   12fd0:	3b01      	subs	r3, #1
   12fd2:	687a      	ldr	r2, [r7, #4]
   12fd4:	4413      	add	r3, r2
   12fd6:	7bfa      	ldrb	r2, [r7, #15]
   12fd8:	6879      	ldr	r1, [r7, #4]
   12fda:	440a      	add	r2, r1
   12fdc:	7812      	ldrb	r2, [r2, #0]
   12fde:	701a      	strb	r2, [r3, #0]
    pBuf[i] = temp;
   12fe0:	7bfb      	ldrb	r3, [r7, #15]
   12fe2:	687a      	ldr	r2, [r7, #4]
   12fe4:	4413      	add	r3, r2
   12fe6:	7bba      	ldrb	r2, [r7, #14]
   12fe8:	701a      	strb	r2, [r3, #0]
/*************************************************************************************************/
void WStrReverse(uint8_t *pBuf, uint8_t len)
{
  uint8_t i, temp;

  for (i=0; i<len/2; i++)
   12fea:	7bfb      	ldrb	r3, [r7, #15]
   12fec:	3301      	adds	r3, #1
   12fee:	73fb      	strb	r3, [r7, #15]
   12ff0:	78fb      	ldrb	r3, [r7, #3]
   12ff2:	085b      	lsrs	r3, r3, #1
   12ff4:	b2db      	uxtb	r3, r3
   12ff6:	7bfa      	ldrb	r2, [r7, #15]
   12ff8:	429a      	cmp	r2, r3
   12ffa:	d3de      	bcc.n	12fba <WStrReverse+0x12>
  {
    temp = pBuf[len-i-1];
    pBuf[len-i-1] = pBuf[i];
    pBuf[i] = temp;
  }
}
   12ffc:	3714      	adds	r7, #20
   12ffe:	46bd      	mov	sp, r7
   13000:	f85d 7b04 	ldr.w	r7, [sp], #4
   13004:	4770      	bx	lr
   13006:	bf00      	nop

00013008 <getNextToken>:
 *
 *  \return Token value.
 */
/*************************************************************************************************/
static uint8_t getNextToken()
{
   13008:	b480      	push	{r7}
   1300a:	b083      	sub	sp, #12
   1300c:	af00      	add	r7, sp, #0
  uint8_t token = secCb.token++;
   1300e:	4b0e      	ldr	r3, [pc, #56]	; (13048 <getNextToken+0x40>)
   13010:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   13014:	1c5a      	adds	r2, r3, #1
   13016:	b2d1      	uxtb	r1, r2
   13018:	4a0b      	ldr	r2, [pc, #44]	; (13048 <getNextToken+0x40>)
   1301a:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
   1301e:	71fb      	strb	r3, [r7, #7]

  if (token == SEC_TOKEN_INVALID)
   13020:	79fb      	ldrb	r3, [r7, #7]
   13022:	2bff      	cmp	r3, #255	; 0xff
   13024:	d108      	bne.n	13038 <getNextToken+0x30>
  {
    token = secCb.token++;
   13026:	4b08      	ldr	r3, [pc, #32]	; (13048 <getNextToken+0x40>)
   13028:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   1302c:	1c5a      	adds	r2, r3, #1
   1302e:	b2d1      	uxtb	r1, r2
   13030:	4a05      	ldr	r2, [pc, #20]	; (13048 <getNextToken+0x40>)
   13032:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
   13036:	71fb      	strb	r3, [r7, #7]
  }

  return token;
   13038:	79fb      	ldrb	r3, [r7, #7]
}
   1303a:	4618      	mov	r0, r3
   1303c:	370c      	adds	r7, #12
   1303e:	46bd      	mov	sp, r7
   13040:	f85d 7b04 	ldr.w	r7, [sp], #4
   13044:	4770      	bx	lr
   13046:	bf00      	nop
   13048:	10009188 	.word	0x10009188

0001304c <SecAes>:
 *  \return Token value.
 */
/*************************************************************************************************/
uint8_t SecAes(uint8_t *pKey, uint8_t *pPlaintext, wsfHandlerId_t handlerId,
               uint16_t param, uint8_t event)
{
   1304c:	b580      	push	{r7, lr}
   1304e:	b086      	sub	sp, #24
   13050:	af00      	add	r7, sp, #0
   13052:	60f8      	str	r0, [r7, #12]
   13054:	60b9      	str	r1, [r7, #8]
   13056:	4611      	mov	r1, r2
   13058:	461a      	mov	r2, r3
   1305a:	460b      	mov	r3, r1
   1305c:	71fb      	strb	r3, [r7, #7]
   1305e:	4613      	mov	r3, r2
   13060:	80bb      	strh	r3, [r7, #4]
  secQueueBuf_t  *pBuf;
  
  /* allocate a buffer */
  if ((pBuf = WsfMsgAlloc(sizeof(secQueueBuf_t))) != NULL)
   13062:	2030      	movs	r0, #48	; 0x30
   13064:	f006 f86a 	bl	1913c <WsfMsgAlloc>
   13068:	6178      	str	r0, [r7, #20]
   1306a:	697b      	ldr	r3, [r7, #20]
   1306c:	2b00      	cmp	r3, #0
   1306e:	d01d      	beq.n	130ac <SecAes+0x60>
  {
    pBuf->msg.hdr.status = getNextToken();
   13070:	f7ff ffca 	bl	13008 <getNextToken>
   13074:	4603      	mov	r3, r0
   13076:	461a      	mov	r2, r3
   13078:	697b      	ldr	r3, [r7, #20]
   1307a:	70da      	strb	r2, [r3, #3]
    pBuf->msg.hdr.param = param;
   1307c:	697b      	ldr	r3, [r7, #20]
   1307e:	88ba      	ldrh	r2, [r7, #4]
   13080:	801a      	strh	r2, [r3, #0]
    pBuf->msg.hdr.event = event;
   13082:	697b      	ldr	r3, [r7, #20]
   13084:	f897 2020 	ldrb.w	r2, [r7, #32]
   13088:	709a      	strb	r2, [r3, #2]
   
    pBuf->type = SEC_TYPE_AES;
   1308a:	697b      	ldr	r3, [r7, #20]
   1308c:	2200      	movs	r2, #0
   1308e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* queue buffer */
    WsfMsgEnq(&secCb.queue, handlerId, pBuf);
   13092:	79fb      	ldrb	r3, [r7, #7]
   13094:	4808      	ldr	r0, [pc, #32]	; (130b8 <SecAes+0x6c>)
   13096:	4619      	mov	r1, r3
   13098:	697a      	ldr	r2, [r7, #20]
   1309a:	f006 f88d 	bl	191b8 <WsfMsgEnq>
    
    /* call HCI encrypt function */
    HciLeEncryptCmd(pKey, pPlaintext);
   1309e:	68f8      	ldr	r0, [r7, #12]
   130a0:	68b9      	ldr	r1, [r7, #8]
   130a2:	f002 fc57 	bl	15954 <HciLeEncryptCmd>

    return pBuf->msg.hdr.status;
   130a6:	697b      	ldr	r3, [r7, #20]
   130a8:	78db      	ldrb	r3, [r3, #3]
   130aa:	e000      	b.n	130ae <SecAes+0x62>
  }
  
  return SEC_TOKEN_INVALID;
   130ac:	23ff      	movs	r3, #255	; 0xff
}
   130ae:	4618      	mov	r0, r3
   130b0:	3718      	adds	r7, #24
   130b2:	46bd      	mov	sp, r7
   130b4:	bd80      	pop	{r7, pc}
   130b6:	bf00      	nop
   130b8:	100091a8 	.word	0x100091a8

000130bc <SecAesHciCback>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SecAesHciCback(secQueueBuf_t *pBuf, hciEvt_t *pEvent, wsfHandlerId_t handlerId)
{
   130bc:	b580      	push	{r7, lr}
   130be:	b086      	sub	sp, #24
   130c0:	af00      	add	r7, sp, #0
   130c2:	60f8      	str	r0, [r7, #12]
   130c4:	60b9      	str	r1, [r7, #8]
   130c6:	4613      	mov	r3, r2
   130c8:	71fb      	strb	r3, [r7, #7]
  secAes_t *pAes = (secAes_t *) &pBuf->msg;
   130ca:	68fb      	ldr	r3, [r7, #12]
   130cc:	617b      	str	r3, [r7, #20]
  
  /* set encrypted data pointer and copy */
  pAes->pCiphertext = pBuf->ciphertext;
   130ce:	68fb      	ldr	r3, [r7, #12]
   130d0:	f103 0208 	add.w	r2, r3, #8
   130d4:	697b      	ldr	r3, [r7, #20]
   130d6:	605a      	str	r2, [r3, #4]
  Calc128Cpy(pAes->pCiphertext, pEvent->leEncryptCmdCmpl.data);
   130d8:	697b      	ldr	r3, [r7, #20]
   130da:	685a      	ldr	r2, [r3, #4]
   130dc:	68bb      	ldr	r3, [r7, #8]
   130de:	3305      	adds	r3, #5
   130e0:	4610      	mov	r0, r2
   130e2:	4619      	mov	r1, r3
   130e4:	f7ff fefe 	bl	12ee4 <Calc128Cpy>

  /* send message */
  WsfMsgSend(handlerId, pAes);
   130e8:	79fb      	ldrb	r3, [r7, #7]
   130ea:	4618      	mov	r0, r3
   130ec:	6979      	ldr	r1, [r7, #20]
   130ee:	f006 f849 	bl	19184 <WsfMsgSend>
}
   130f2:	3718      	adds	r7, #24
   130f4:	46bd      	mov	sp, r7
   130f6:	bd80      	pop	{r7, pc}

000130f8 <SecAesInit>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SecAesInit()
{
   130f8:	b480      	push	{r7}
   130fa:	af00      	add	r7, sp, #0
  secCb.hciCbackTbl[SEC_TYPE_AES] = SecAesHciCback;
   130fc:	4b03      	ldr	r3, [pc, #12]	; (1310c <SecAesInit+0x14>)
   130fe:	4a04      	ldr	r2, [pc, #16]	; (13110 <SecAesInit+0x18>)
   13100:	62da      	str	r2, [r3, #44]	; 0x2c
}
   13102:	46bd      	mov	sp, r7
   13104:	f85d 7b04 	ldr.w	r7, [sp], #4
   13108:	4770      	bx	lr
   1310a:	bf00      	nop
   1310c:	10009188 	.word	0x10009188
   13110:	000130bd 	.word	0x000130bd

00013114 <secCmacProcessBlock>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secCmacProcessBlock(secQueueBuf_t *pBuf)
{
   13114:	b580      	push	{r7, lr}
   13116:	b08a      	sub	sp, #40	; 0x28
   13118:	af00      	add	r7, sp, #0
   1311a:	6078      	str	r0, [r7, #4]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
   1311c:	687b      	ldr	r3, [r7, #4]
   1311e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13120:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t buf[SEC_BLOCK_LEN];
  uint8_t *pMn = pCmac->pPlainText + pCmac->position;
   13122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13124:	681b      	ldr	r3, [r3, #0]
   13126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   13128:	8c92      	ldrh	r2, [r2, #36]	; 0x24
   1312a:	4413      	add	r3, r2
   1312c:	623b      	str	r3, [r7, #32]
  int8_t remaining = (int16_t) pCmac->len - pCmac->position;
   1312e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13130:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   13132:	b2da      	uxtb	r2, r3
   13134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13136:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   13138:	b2db      	uxtb	r3, r3
   1313a:	1ad3      	subs	r3, r2, r3
   1313c:	b2db      	uxtb	r3, r3
   1313e:	77fb      	strb	r3, [r7, #31]

  /* Check for Last Block */
  if (remaining <= SEC_BLOCK_LEN)
   13140:	f997 301f 	ldrsb.w	r3, [r7, #31]
   13144:	2b10      	cmp	r3, #16
   13146:	dc2c      	bgt.n	131a2 <secCmacProcessBlock+0x8e>
  {
    WStrReverseCpy(buf, pMn, SEC_BLOCK_LEN);
   13148:	f107 030c 	add.w	r3, r7, #12
   1314c:	4618      	mov	r0, r3
   1314e:	6a39      	ldr	r1, [r7, #32]
   13150:	2210      	movs	r2, #16
   13152:	f7ff ff01 	bl	12f58 <WStrReverseCpy>

    /* Pad the message if necessary */
    if (remaining != SEC_BLOCK_LEN)
   13156:	f997 301f 	ldrsb.w	r3, [r7, #31]
   1315a:	2b10      	cmp	r3, #16
   1315c:	d014      	beq.n	13188 <secCmacProcessBlock+0x74>
    {
      memset(buf, 0, SEC_BLOCK_LEN - remaining);
   1315e:	f997 301f 	ldrsb.w	r3, [r7, #31]
   13162:	f1c3 0310 	rsb	r3, r3, #16
   13166:	461a      	mov	r2, r3
   13168:	f107 030c 	add.w	r3, r7, #12
   1316c:	4618      	mov	r0, r3
   1316e:	2100      	movs	r1, #0
   13170:	f00d f93c 	bl	203ec <memset>
      buf[SEC_BLOCK_LEN-remaining-1] = 0x80;
   13174:	f997 301f 	ldrsb.w	r3, [r7, #31]
   13178:	f1c3 030f 	rsb	r3, r3, #15
   1317c:	f107 0228 	add.w	r2, r7, #40	; 0x28
   13180:	4413      	add	r3, r2
   13182:	2280      	movs	r2, #128	; 0x80
   13184:	f803 2c1c 	strb.w	r2, [r3, #-28]
    }

    /* XOr the subkey */
    Calc128Xor(buf, pCmac->subkey);
   13188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1318a:	3314      	adds	r3, #20
   1318c:	f107 020c 	add.w	r2, r7, #12
   13190:	4610      	mov	r0, r2
   13192:	4619      	mov	r1, r3
   13194:	f7ff fec2 	bl	12f1c <Calc128Xor>
    pCmac->state = SEC_CMAC_STATE_COMPLETE;
   13198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1319a:	2202      	movs	r2, #2
   1319c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
   131a0:	e006      	b.n	131b0 <secCmacProcessBlock+0x9c>
  }
  else
  {
    /* Copy the block to the buffer */
    WStrReverseCpy(buf, pMn, SEC_BLOCK_LEN);
   131a2:	f107 030c 	add.w	r3, r7, #12
   131a6:	4618      	mov	r0, r3
   131a8:	6a39      	ldr	r1, [r7, #32]
   131aa:	2210      	movs	r2, #16
   131ac:	f7ff fed4 	bl	12f58 <WStrReverseCpy>
  }

  if (pCmac->position != 0)
   131b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   131b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   131b4:	2b00      	cmp	r3, #0
   131b6:	d007      	beq.n	131c8 <secCmacProcessBlock+0xb4>
  {
    /* Except for first block, XOr the previous AES calculation */
    Calc128Xor(buf, pBuf->ciphertext);
   131b8:	687b      	ldr	r3, [r7, #4]
   131ba:	3308      	adds	r3, #8
   131bc:	f107 020c 	add.w	r2, r7, #12
   131c0:	4610      	mov	r0, r2
   131c2:	4619      	mov	r1, r3
   131c4:	f7ff feaa 	bl	12f1c <Calc128Xor>
  }

  pCmac->position += SEC_BLOCK_LEN;
   131c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   131ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   131cc:	3310      	adds	r3, #16
   131ce:	b29a      	uxth	r2, r3
   131d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   131d2:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Enqueue and perform AES operation */
  WsfMsgEnq(&secCb.queue, pCmac->handlerId, pBuf);
   131d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   131d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   131da:	4808      	ldr	r0, [pc, #32]	; (131fc <secCmacProcessBlock+0xe8>)
   131dc:	4619      	mov	r1, r3
   131de:	687a      	ldr	r2, [r7, #4]
   131e0:	f005 ffea 	bl	191b8 <WsfMsgEnq>
  HciLeEncryptCmd(pCmac->key, buf);
   131e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   131e6:	1d1a      	adds	r2, r3, #4
   131e8:	f107 030c 	add.w	r3, r7, #12
   131ec:	4610      	mov	r0, r2
   131ee:	4619      	mov	r1, r3
   131f0:	f002 fbb0 	bl	15954 <HciLeEncryptCmd>
}
   131f4:	3728      	adds	r7, #40	; 0x28
   131f6:	46bd      	mov	sp, r7
   131f8:	bd80      	pop	{r7, pc}
   131fa:	bf00      	nop
   131fc:	100091a8 	.word	0x100091a8

00013200 <secCmacGenSubkey1>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secCmacGenSubkey1(secQueueBuf_t *pBuf)
{
   13200:	b580      	push	{r7, lr}
   13202:	b088      	sub	sp, #32
   13204:	af00      	add	r7, sp, #0
   13206:	6078      	str	r0, [r7, #4]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
   13208:	687b      	ldr	r3, [r7, #4]
   1320a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1320c:	61fb      	str	r3, [r7, #28]
  uint8_t buf[SEC_BLOCK_LEN];

  /* Perform aes on the key with a constant zero */
  memset(buf, 0, SEC_BLOCK_LEN);
   1320e:	f107 030c 	add.w	r3, r7, #12
   13212:	4618      	mov	r0, r3
   13214:	2100      	movs	r1, #0
   13216:	2210      	movs	r2, #16
   13218:	f00d f8e8 	bl	203ec <memset>

  WsfMsgEnq(&secCb.queue, pCmac->handlerId, pBuf);
   1321c:	69fb      	ldr	r3, [r7, #28]
   1321e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   13222:	4808      	ldr	r0, [pc, #32]	; (13244 <secCmacGenSubkey1+0x44>)
   13224:	4619      	mov	r1, r3
   13226:	687a      	ldr	r2, [r7, #4]
   13228:	f005 ffc6 	bl	191b8 <WsfMsgEnq>
  HciLeEncryptCmd(pCmac->key, buf);
   1322c:	69fb      	ldr	r3, [r7, #28]
   1322e:	1d1a      	adds	r2, r3, #4
   13230:	f107 030c 	add.w	r3, r7, #12
   13234:	4610      	mov	r0, r2
   13236:	4619      	mov	r1, r3
   13238:	f002 fb8c 	bl	15954 <HciLeEncryptCmd>
}
   1323c:	3720      	adds	r7, #32
   1323e:	46bd      	mov	sp, r7
   13240:	bd80      	pop	{r7, pc}
   13242:	bf00      	nop
   13244:	100091a8 	.word	0x100091a8

00013248 <secCmacKeyShift>:
 *
 *  \return The overflow of the operaiton.
 */
/*************************************************************************************************/
static uint8_t secCmacKeyShift(uint8_t *pBuf, uint8_t shift)
{
   13248:	b480      	push	{r7}
   1324a:	b085      	sub	sp, #20
   1324c:	af00      	add	r7, sp, #0
   1324e:	6078      	str	r0, [r7, #4]
   13250:	460b      	mov	r3, r1
   13252:	70fb      	strb	r3, [r7, #3]
  uint8_t bits, i, prevBits = 0;
   13254:	2300      	movs	r3, #0
   13256:	73bb      	strb	r3, [r7, #14]

  for (i = 0; i < SEC_CMAC_KEY_LEN; i++)
   13258:	2300      	movs	r3, #0
   1325a:	73fb      	strb	r3, [r7, #15]
   1325c:	e020      	b.n	132a0 <secCmacKeyShift+0x58>
  {
    /* store shifted bits for next byte */
    bits = pBuf[i] >> (8 - shift);
   1325e:	7bfb      	ldrb	r3, [r7, #15]
   13260:	687a      	ldr	r2, [r7, #4]
   13262:	4413      	add	r3, r2
   13264:	781b      	ldrb	r3, [r3, #0]
   13266:	461a      	mov	r2, r3
   13268:	78fb      	ldrb	r3, [r7, #3]
   1326a:	f1c3 0308 	rsb	r3, r3, #8
   1326e:	fa42 f303 	asr.w	r3, r2, r3
   13272:	737b      	strb	r3, [r7, #13]

    /* shift byte and OR in shifted bits from previous byte */
    pBuf[i] = (pBuf[i] << shift) | prevBits;
   13274:	7bfb      	ldrb	r3, [r7, #15]
   13276:	687a      	ldr	r2, [r7, #4]
   13278:	4413      	add	r3, r2
   1327a:	7bfa      	ldrb	r2, [r7, #15]
   1327c:	6879      	ldr	r1, [r7, #4]
   1327e:	440a      	add	r2, r1
   13280:	7812      	ldrb	r2, [r2, #0]
   13282:	4611      	mov	r1, r2
   13284:	78fa      	ldrb	r2, [r7, #3]
   13286:	fa01 f202 	lsl.w	r2, r1, r2
   1328a:	b2d1      	uxtb	r1, r2
   1328c:	7bba      	ldrb	r2, [r7, #14]
   1328e:	430a      	orrs	r2, r1
   13290:	b2d2      	uxtb	r2, r2
   13292:	b2d2      	uxtb	r2, r2
   13294:	701a      	strb	r2, [r3, #0]

    prevBits = bits;
   13296:	7b7b      	ldrb	r3, [r7, #13]
   13298:	73bb      	strb	r3, [r7, #14]
/*************************************************************************************************/
static uint8_t secCmacKeyShift(uint8_t *pBuf, uint8_t shift)
{
  uint8_t bits, i, prevBits = 0;

  for (i = 0; i < SEC_CMAC_KEY_LEN; i++)
   1329a:	7bfb      	ldrb	r3, [r7, #15]
   1329c:	3301      	adds	r3, #1
   1329e:	73fb      	strb	r3, [r7, #15]
   132a0:	7bfb      	ldrb	r3, [r7, #15]
   132a2:	2b0f      	cmp	r3, #15
   132a4:	d9db      	bls.n	1325e <secCmacKeyShift+0x16>
    pBuf[i] = (pBuf[i] << shift) | prevBits;

    prevBits = bits;
  }

  return prevBits;
   132a6:	7bbb      	ldrb	r3, [r7, #14]
}
   132a8:	4618      	mov	r0, r3
   132aa:	3714      	adds	r7, #20
   132ac:	46bd      	mov	sp, r7
   132ae:	f85d 7b04 	ldr.w	r7, [sp], #4
   132b2:	4770      	bx	lr

000132b4 <secCmacGenSubkey2>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secCmacGenSubkey2(secQueueBuf_t *pBuf)
{
   132b4:	b580      	push	{r7, lr}
   132b6:	b084      	sub	sp, #16
   132b8:	af00      	add	r7, sp, #0
   132ba:	6078      	str	r0, [r7, #4]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
   132bc:	687b      	ldr	r3, [r7, #4]
   132be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   132c0:	60fb      	str	r3, [r7, #12]
  uint8_t overflow;

  /* Copy the result of the AES oepration */
  Calc128Cpy(pCmac->subkey, pBuf->ciphertext);
   132c2:	68fb      	ldr	r3, [r7, #12]
   132c4:	f103 0214 	add.w	r2, r3, #20
   132c8:	687b      	ldr	r3, [r7, #4]
   132ca:	3308      	adds	r3, #8
   132cc:	4610      	mov	r0, r2
   132ce:	4619      	mov	r1, r3
   132d0:	f7ff fe08 	bl	12ee4 <Calc128Cpy>

  /* Calculate the K1 subkey */
  overflow = secCmacKeyShift(pCmac->subkey, 1);
   132d4:	68fb      	ldr	r3, [r7, #12]
   132d6:	3314      	adds	r3, #20
   132d8:	4618      	mov	r0, r3
   132da:	2101      	movs	r1, #1
   132dc:	f7ff ffb4 	bl	13248 <secCmacKeyShift>
   132e0:	4603      	mov	r3, r0
   132e2:	72fb      	strb	r3, [r7, #11]

  if (overflow)
   132e4:	7afb      	ldrb	r3, [r7, #11]
   132e6:	2b00      	cmp	r3, #0
   132e8:	d007      	beq.n	132fa <secCmacGenSubkey2+0x46>
  {
    pCmac->subkey[0] ^= SEC_CMAC_RB;
   132ea:	68fb      	ldr	r3, [r7, #12]
   132ec:	7d1b      	ldrb	r3, [r3, #20]
   132ee:	f083 0378 	eor.w	r3, r3, #120	; 0x78
   132f2:	43db      	mvns	r3, r3
   132f4:	b2da      	uxtb	r2, r3
   132f6:	68fb      	ldr	r3, [r7, #12]
   132f8:	751a      	strb	r2, [r3, #20]
  }

  if (pCmac->len % SEC_BLOCK_LEN != 0)
   132fa:	68fb      	ldr	r3, [r7, #12]
   132fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   132fe:	f003 030f 	and.w	r3, r3, #15
   13302:	b29b      	uxth	r3, r3
   13304:	2b00      	cmp	r3, #0
   13306:	d012      	beq.n	1332e <secCmacGenSubkey2+0x7a>
  {
    /* If the message len is not a multiple of SEC_BLOCK_LEN */
    /* Continue with generation of the K2 subkey based on the K1 key */
    overflow = secCmacKeyShift(pCmac->subkey, 1);
   13308:	68fb      	ldr	r3, [r7, #12]
   1330a:	3314      	adds	r3, #20
   1330c:	4618      	mov	r0, r3
   1330e:	2101      	movs	r1, #1
   13310:	f7ff ff9a 	bl	13248 <secCmacKeyShift>
   13314:	4603      	mov	r3, r0
   13316:	72fb      	strb	r3, [r7, #11]

    if (overflow)
   13318:	7afb      	ldrb	r3, [r7, #11]
   1331a:	2b00      	cmp	r3, #0
   1331c:	d007      	beq.n	1332e <secCmacGenSubkey2+0x7a>
    {
      pCmac->subkey[0] ^= SEC_CMAC_RB;
   1331e:	68fb      	ldr	r3, [r7, #12]
   13320:	7d1b      	ldrb	r3, [r3, #20]
   13322:	f083 0378 	eor.w	r3, r3, #120	; 0x78
   13326:	43db      	mvns	r3, r3
   13328:	b2da      	uxtb	r2, r3
   1332a:	68fb      	ldr	r3, [r7, #12]
   1332c:	751a      	strb	r2, [r3, #20]
    }
  }

  /* Begin CMAC calculation */
  pCmac->state = SEC_CMAC_STATE_BLOCK;
   1332e:	68fb      	ldr	r3, [r7, #12]
   13330:	2201      	movs	r2, #1
   13332:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  secCmacProcessBlock(pBuf);
   13336:	6878      	ldr	r0, [r7, #4]
   13338:	f7ff feec 	bl	13114 <secCmacProcessBlock>
}
   1333c:	3710      	adds	r7, #16
   1333e:	46bd      	mov	sp, r7
   13340:	bd80      	pop	{r7, pc}
   13342:	bf00      	nop

00013344 <secCmacComplete>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secCmacComplete(secQueueBuf_t *pBuf)
{
   13344:	b580      	push	{r7, lr}
   13346:	b084      	sub	sp, #16
   13348:	af00      	add	r7, sp, #0
   1334a:	6078      	str	r0, [r7, #4]
  /* CMAC is complete, copy and send result to handler */
  secCmacMsg_t *pMsg = (secCmacMsg_t *) &pBuf->msg;
   1334c:	687b      	ldr	r3, [r7, #4]
   1334e:	60fb      	str	r3, [r7, #12]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
   13350:	687b      	ldr	r3, [r7, #4]
   13352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13354:	60bb      	str	r3, [r7, #8]

  WStrReverse(pBuf->ciphertext, SEC_CMAC_KEY_LEN);
   13356:	687b      	ldr	r3, [r7, #4]
   13358:	3308      	adds	r3, #8
   1335a:	4618      	mov	r0, r3
   1335c:	2110      	movs	r1, #16
   1335e:	f7ff fe23 	bl	12fa8 <WStrReverse>
  pMsg->pCiphertext = pBuf->ciphertext;
   13362:	687b      	ldr	r3, [r7, #4]
   13364:	f103 0208 	add.w	r2, r3, #8
   13368:	68fb      	ldr	r3, [r7, #12]
   1336a:	605a      	str	r2, [r3, #4]
  WsfBufFree(pCmac->pPlainText);
   1336c:	68bb      	ldr	r3, [r7, #8]
   1336e:	681b      	ldr	r3, [r3, #0]
   13370:	4618      	mov	r0, r3
   13372:	f005 fe93 	bl	1909c <WsfBufFree>

  WsfMsgSend(pCmac->handlerId, pMsg);
   13376:	68bb      	ldr	r3, [r7, #8]
   13378:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   1337c:	4618      	mov	r0, r3
   1337e:	68f9      	ldr	r1, [r7, #12]
   13380:	f005 ff00 	bl	19184 <WsfMsgSend>
}
   13384:	3710      	adds	r7, #16
   13386:	46bd      	mov	sp, r7
   13388:	bd80      	pop	{r7, pc}
   1338a:	bf00      	nop

0001338c <SecCmacHciCback>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SecCmacHciCback(secQueueBuf_t *pBuf, hciEvt_t *pEvent, wsfHandlerId_t handlerId)
{
   1338c:	b580      	push	{r7, lr}
   1338e:	b086      	sub	sp, #24
   13390:	af00      	add	r7, sp, #0
   13392:	60f8      	str	r0, [r7, #12]
   13394:	60b9      	str	r1, [r7, #8]
   13396:	4613      	mov	r3, r2
   13398:	71fb      	strb	r3, [r7, #7]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t *) pBuf->pCb;
   1339a:	68fb      	ldr	r3, [r7, #12]
   1339c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1339e:	617b      	str	r3, [r7, #20]

  if (pCmac)
   133a0:	697b      	ldr	r3, [r7, #20]
   133a2:	2b00      	cmp	r3, #0
   133a4:	d01d      	beq.n	133e2 <SecCmacHciCback+0x56>
  {
    Calc128Cpy(pBuf->ciphertext, pEvent->leEncryptCmdCmpl.data);
   133a6:	68fb      	ldr	r3, [r7, #12]
   133a8:	f103 0208 	add.w	r2, r3, #8
   133ac:	68bb      	ldr	r3, [r7, #8]
   133ae:	3305      	adds	r3, #5
   133b0:	4610      	mov	r0, r2
   133b2:	4619      	mov	r1, r3
   133b4:	f7ff fd96 	bl	12ee4 <Calc128Cpy>

    switch (pCmac->state)
   133b8:	697b      	ldr	r3, [r7, #20]
   133ba:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
   133be:	2b01      	cmp	r3, #1
   133c0:	d007      	beq.n	133d2 <SecCmacHciCback+0x46>
   133c2:	2b02      	cmp	r3, #2
   133c4:	d009      	beq.n	133da <SecCmacHciCback+0x4e>
   133c6:	2b00      	cmp	r3, #0
   133c8:	d10b      	bne.n	133e2 <SecCmacHciCback+0x56>
    {
    case SEC_CMAC_STATE_SUBKEY:
      secCmacGenSubkey2(pBuf);
   133ca:	68f8      	ldr	r0, [r7, #12]
   133cc:	f7ff ff72 	bl	132b4 <secCmacGenSubkey2>
      break;
   133d0:	e007      	b.n	133e2 <SecCmacHciCback+0x56>

    case SEC_CMAC_STATE_BLOCK:
      secCmacProcessBlock(pBuf);
   133d2:	68f8      	ldr	r0, [r7, #12]
   133d4:	f7ff fe9e 	bl	13114 <secCmacProcessBlock>
      break;
   133d8:	e003      	b.n	133e2 <SecCmacHciCback+0x56>

    case SEC_CMAC_STATE_COMPLETE:
      secCmacComplete(pBuf);
   133da:	68f8      	ldr	r0, [r7, #12]
   133dc:	f7ff ffb2 	bl	13344 <secCmacComplete>
      break;
   133e0:	bf00      	nop
    }
  }
}
   133e2:	3718      	adds	r7, #24
   133e4:	46bd      	mov	sp, r7
   133e6:	bd80      	pop	{r7, pc}

000133e8 <SecCmac>:
 *  \return TRUE if successful, else FALSE.
 */
/*************************************************************************************************/
bool_t SecCmac(const uint8_t *pKey, uint8_t *pPlainText, uint8_t textLen, wsfHandlerId_t handlerId,
               uint16_t param, uint8_t event)
{
   133e8:	b580      	push	{r7, lr}
   133ea:	b088      	sub	sp, #32
   133ec:	af00      	add	r7, sp, #0
   133ee:	60f8      	str	r0, [r7, #12]
   133f0:	60b9      	str	r1, [r7, #8]
   133f2:	4611      	mov	r1, r2
   133f4:	461a      	mov	r2, r3
   133f6:	460b      	mov	r3, r1
   133f8:	71fb      	strb	r3, [r7, #7]
   133fa:	4613      	mov	r3, r2
   133fc:	71bb      	strb	r3, [r7, #6]
  secQueueBuf_t *pBuf;
  uint16_t bufSize = sizeof(secQueueBuf_t) + sizeof(secCmacSecCb_t);
   133fe:	235c      	movs	r3, #92	; 0x5c
   13400:	83fb      	strh	r3, [r7, #30]

  if ((pBuf = WsfMsgAlloc(bufSize)) != NULL)
   13402:	8bfb      	ldrh	r3, [r7, #30]
   13404:	4618      	mov	r0, r3
   13406:	f005 fe99 	bl	1913c <WsfMsgAlloc>
   1340a:	61b8      	str	r0, [r7, #24]
   1340c:	69bb      	ldr	r3, [r7, #24]
   1340e:	2b00      	cmp	r3, #0
   13410:	d038      	beq.n	13484 <SecCmac+0x9c>
  {
    secCmacSecCb_t *pCmacCb = (secCmacSecCb_t *) (pBuf + 1);
   13412:	69bb      	ldr	r3, [r7, #24]
   13414:	3330      	adds	r3, #48	; 0x30
   13416:	617b      	str	r3, [r7, #20]

    /* Setup queue buffer */
    pBuf->pCb = pCmacCb;
   13418:	69bb      	ldr	r3, [r7, #24]
   1341a:	697a      	ldr	r2, [r7, #20]
   1341c:	629a      	str	r2, [r3, #40]	; 0x28
    pBuf->type = SEC_TYPE_CMAC;
   1341e:	69bb      	ldr	r3, [r7, #24]
   13420:	2201      	movs	r2, #1
   13422:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    pBuf->msg.hdr.status = secCb.token++;
   13426:	4b1a      	ldr	r3, [pc, #104]	; (13490 <SecCmac+0xa8>)
   13428:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   1342c:	1c5a      	adds	r2, r3, #1
   1342e:	b2d1      	uxtb	r1, r2
   13430:	4a17      	ldr	r2, [pc, #92]	; (13490 <SecCmac+0xa8>)
   13432:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
   13436:	69ba      	ldr	r2, [r7, #24]
   13438:	70d3      	strb	r3, [r2, #3]
    pBuf->msg.hdr.param = param;
   1343a:	69bb      	ldr	r3, [r7, #24]
   1343c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
   1343e:	801a      	strh	r2, [r3, #0]
    pBuf->msg.hdr.event = event;
   13440:	69bb      	ldr	r3, [r7, #24]
   13442:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   13446:	709a      	strb	r2, [r3, #2]

    pCmacCb->pPlainText = pPlainText;
   13448:	697b      	ldr	r3, [r7, #20]
   1344a:	68ba      	ldr	r2, [r7, #8]
   1344c:	601a      	str	r2, [r3, #0]

    pCmacCb->len = textLen;
   1344e:	79fb      	ldrb	r3, [r7, #7]
   13450:	b29a      	uxth	r2, r3
   13452:	697b      	ldr	r3, [r7, #20]
   13454:	84da      	strh	r2, [r3, #38]	; 0x26
    pCmacCb->position = 0;
   13456:	697b      	ldr	r3, [r7, #20]
   13458:	2200      	movs	r2, #0
   1345a:	849a      	strh	r2, [r3, #36]	; 0x24
    pCmacCb->handlerId = handlerId;
   1345c:	697b      	ldr	r3, [r7, #20]
   1345e:	79ba      	ldrb	r2, [r7, #6]
   13460:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    pCmacCb->state = SEC_CMAC_STATE_SUBKEY;
   13464:	697b      	ldr	r3, [r7, #20]
   13466:	2200      	movs	r2, #0
   13468:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    /* Copy key */
    WStrReverseCpy(pCmacCb->key, pKey, SEC_CMAC_KEY_LEN);
   1346c:	697b      	ldr	r3, [r7, #20]
   1346e:	3304      	adds	r3, #4
   13470:	4618      	mov	r0, r3
   13472:	68f9      	ldr	r1, [r7, #12]
   13474:	2210      	movs	r2, #16
   13476:	f7ff fd6f 	bl	12f58 <WStrReverseCpy>

    /* Start the CMAC process by calculating the subkey */
    secCmacGenSubkey1(pBuf);
   1347a:	69b8      	ldr	r0, [r7, #24]
   1347c:	f7ff fec0 	bl	13200 <secCmacGenSubkey1>

    return TRUE;
   13480:	2301      	movs	r3, #1
   13482:	e000      	b.n	13486 <SecCmac+0x9e>
  }

  return FALSE;
   13484:	2300      	movs	r3, #0
}
   13486:	4618      	mov	r0, r3
   13488:	3720      	adds	r7, #32
   1348a:	46bd      	mov	sp, r7
   1348c:	bd80      	pop	{r7, pc}
   1348e:	bf00      	nop
   13490:	10009188 	.word	0x10009188

00013494 <SecCmacInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecCmacInit()
{
   13494:	b480      	push	{r7}
   13496:	af00      	add	r7, sp, #0
  secCb.hciCbackTbl[SEC_TYPE_CMAC] = SecCmacHciCback;
   13498:	4b03      	ldr	r3, [pc, #12]	; (134a8 <SecCmacInit+0x14>)
   1349a:	4a04      	ldr	r2, [pc, #16]	; (134ac <SecCmacInit+0x18>)
   1349c:	631a      	str	r2, [r3, #48]	; 0x30
}
   1349e:	46bd      	mov	sp, r7
   134a0:	f85d 7b04 	ldr.w	r7, [sp], #4
   134a4:	4770      	bx	lr
   134a6:	bf00      	nop
   134a8:	10009188 	.word	0x10009188
   134ac:	0001338d 	.word	0x0001338d

000134b0 <SecEccHciCback>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SecEccHciCback(secQueueBuf_t *pBuf, hciEvt_t *pEvent, wsfHandlerId_t handlerId)
{
   134b0:	b580      	push	{r7, lr}
   134b2:	b086      	sub	sp, #24
   134b4:	af00      	add	r7, sp, #0
   134b6:	60f8      	str	r0, [r7, #12]
   134b8:	60b9      	str	r1, [r7, #8]
   134ba:	4613      	mov	r3, r2
   134bc:	71fb      	strb	r3, [r7, #7]
  secEccMsg_t *pMsg = (secEccMsg_t *) &pBuf->msg;
   134be:	68fb      	ldr	r3, [r7, #12]
   134c0:	617b      	str	r3, [r7, #20]

  if (pEvent->hdr.event == HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_CBACK_EVT)
   134c2:	68bb      	ldr	r3, [r7, #8]
   134c4:	789b      	ldrb	r3, [r3, #2]
   134c6:	2b25      	cmp	r3, #37	; 0x25
   134c8:	d11c      	bne.n	13504 <SecEccHciCback+0x54>
  {
    /* Reverse copy the public key (to big endian) */
    WStrReverseCpy(pMsg->data.key.pubKey_x, pEvent->leP256.key, SEC_ECC_KEY_LEN);
   134ca:	697b      	ldr	r3, [r7, #20]
   134cc:	1d1a      	adds	r2, r3, #4
   134ce:	68bb      	ldr	r3, [r7, #8]
   134d0:	3305      	adds	r3, #5
   134d2:	4610      	mov	r0, r2
   134d4:	4619      	mov	r1, r3
   134d6:	2220      	movs	r2, #32
   134d8:	f7ff fd3e 	bl	12f58 <WStrReverseCpy>
    WStrReverseCpy(pMsg->data.key.pubKey_y, pEvent->leP256.key + SEC_ECC_KEY_LEN, SEC_ECC_KEY_LEN);
   134dc:	697b      	ldr	r3, [r7, #20]
   134de:	f103 0224 	add.w	r2, r3, #36	; 0x24
   134e2:	68bb      	ldr	r3, [r7, #8]
   134e4:	3325      	adds	r3, #37	; 0x25
   134e6:	4610      	mov	r0, r2
   134e8:	4619      	mov	r1, r3
   134ea:	2220      	movs	r2, #32
   134ec:	f7ff fd34 	bl	12f58 <WStrReverseCpy>

    /* Send shared secret to handler */
    pMsg->hdr.status = pEvent->leP256.status;
   134f0:	68bb      	ldr	r3, [r7, #8]
   134f2:	791a      	ldrb	r2, [r3, #4]
   134f4:	697b      	ldr	r3, [r7, #20]
   134f6:	70da      	strb	r2, [r3, #3]
    WsfMsgSend(handlerId, pMsg);
   134f8:	79fb      	ldrb	r3, [r7, #7]
   134fa:	4618      	mov	r0, r3
   134fc:	6979      	ldr	r1, [r7, #20]
   134fe:	f005 fe41 	bl	19184 <WsfMsgSend>
   13502:	e020      	b.n	13546 <SecEccHciCback+0x96>
  }
  else if (pEvent->hdr.event == HCI_LE_GENERATE_DHKEY_CMPL_CBACK_EVT)
   13504:	68bb      	ldr	r3, [r7, #8]
   13506:	789b      	ldrb	r3, [r3, #2]
   13508:	2b26      	cmp	r3, #38	; 0x26
   1350a:	d11c      	bne.n	13546 <SecEccHciCback+0x96>
  {
    /* Reverse copy the DH key (to big endian) */
    WStrReverseCpy(pMsg->data.sharedSecret.secret, pEvent->leGenDHKey.key, SEC_ECC_KEY_LEN);
   1350c:	697b      	ldr	r3, [r7, #20]
   1350e:	1d1a      	adds	r2, r3, #4
   13510:	68bb      	ldr	r3, [r7, #8]
   13512:	3305      	adds	r3, #5
   13514:	4610      	mov	r0, r2
   13516:	4619      	mov	r1, r3
   13518:	2220      	movs	r2, #32
   1351a:	f7ff fd1d 	bl	12f58 <WStrReverseCpy>

    // Invalid point from remote will return HCI_ERR_INVALID_PARAM as per Core Spec Errata (10734)
    if(pEvent->leGenDHKey.status != HCI_SUCCESS) {
   1351e:	68bb      	ldr	r3, [r7, #8]
   13520:	791b      	ldrb	r3, [r3, #4]
   13522:	2b00      	cmp	r3, #0
   13524:	d006      	beq.n	13534 <SecEccHciCback+0x84>
      // all octets of the DHKey event parameter should be set to 0xFF
      memset(pMsg->data.sharedSecret.secret, 0xFF, SEC_ECC_KEY_LEN);
   13526:	697b      	ldr	r3, [r7, #20]
   13528:	3304      	adds	r3, #4
   1352a:	4618      	mov	r0, r3
   1352c:	21ff      	movs	r1, #255	; 0xff
   1352e:	2220      	movs	r2, #32
   13530:	f00c ff5c 	bl	203ec <memset>
    }
    /* Send shared secret to handler */
    pMsg->hdr.status = pEvent->leGenDHKey.status;
   13534:	68bb      	ldr	r3, [r7, #8]
   13536:	791a      	ldrb	r2, [r3, #4]
   13538:	697b      	ldr	r3, [r7, #20]
   1353a:	70da      	strb	r2, [r3, #3]
    WsfMsgSend(handlerId, pMsg);
   1353c:	79fb      	ldrb	r3, [r7, #7]
   1353e:	4618      	mov	r0, r3
   13540:	6979      	ldr	r1, [r7, #20]
   13542:	f005 fe1f 	bl	19184 <WsfMsgSend>
  }
}
   13546:	3718      	adds	r7, #24
   13548:	46bd      	mov	sp, r7
   1354a:	bd80      	pop	{r7, pc}

0001354c <SecEccGenKey>:
 *
 *  \return TRUE if successful, else FALSE.
 */
/*************************************************************************************************/
bool_t SecEccGenKey(wsfHandlerId_t handlerId, uint16_t param, uint8_t event)
{
   1354c:	b580      	push	{r7, lr}
   1354e:	b084      	sub	sp, #16
   13550:	af00      	add	r7, sp, #0
   13552:	4603      	mov	r3, r0
   13554:	71fb      	strb	r3, [r7, #7]
   13556:	460b      	mov	r3, r1
   13558:	80bb      	strh	r3, [r7, #4]
   1355a:	4613      	mov	r3, r2
   1355c:	71bb      	strb	r3, [r7, #6]
  secQueueBuf_t *pBuf;
  uint16_t bufSize = sizeof(secQueueBuf_t) + sizeof(secEccMsg_t);
   1355e:	2394      	movs	r3, #148	; 0x94
   13560:	81fb      	strh	r3, [r7, #14]

  if ((pBuf = WsfMsgAlloc(bufSize)) != NULL)
   13562:	89fb      	ldrh	r3, [r7, #14]
   13564:	4618      	mov	r0, r3
   13566:	f005 fde9 	bl	1913c <WsfMsgAlloc>
   1356a:	60b8      	str	r0, [r7, #8]
   1356c:	68bb      	ldr	r3, [r7, #8]
   1356e:	2b00      	cmp	r3, #0
   13570:	d013      	beq.n	1359a <SecEccGenKey+0x4e>
  {
    /* Record the event and parameter for use in the HCI response */
    pBuf->msg.hdr.param = param;
   13572:	68bb      	ldr	r3, [r7, #8]
   13574:	88ba      	ldrh	r2, [r7, #4]
   13576:	801a      	strh	r2, [r3, #0]
    pBuf->msg.hdr.event = event;
   13578:	68bb      	ldr	r3, [r7, #8]
   1357a:	79ba      	ldrb	r2, [r7, #6]
   1357c:	709a      	strb	r2, [r3, #2]
    pBuf->type = SEC_TYPE_DH;
   1357e:	68bb      	ldr	r3, [r7, #8]
   13580:	2202      	movs	r2, #2
   13582:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* queue buffer */
    WsfMsgEnq(&secCb.queue, handlerId, pBuf);
   13586:	79fb      	ldrb	r3, [r7, #7]
   13588:	4806      	ldr	r0, [pc, #24]	; (135a4 <SecEccGenKey+0x58>)
   1358a:	4619      	mov	r1, r3
   1358c:	68ba      	ldr	r2, [r7, #8]
   1358e:	f005 fe13 	bl	191b8 <WsfMsgEnq>

    /* Request the local public key via HCI */
    HciLeReadLocalP256PubKey();
   13592:	f002 f997 	bl	158c4 <HciLeReadLocalP256PubKey>

    return TRUE;
   13596:	2301      	movs	r3, #1
   13598:	e000      	b.n	1359c <SecEccGenKey+0x50>
  }

  return FALSE;
   1359a:	2300      	movs	r3, #0
}
   1359c:	4618      	mov	r0, r3
   1359e:	3710      	adds	r7, #16
   135a0:	46bd      	mov	sp, r7
   135a2:	bd80      	pop	{r7, pc}
   135a4:	100091a8 	.word	0x100091a8

000135a8 <SecEccGenSharedSecret>:
 *
 *  \return TRUE if successful, else FALSE.
 */
/*************************************************************************************************/
bool_t SecEccGenSharedSecret(secEccKey_t *pKey, wsfHandlerId_t handlerId, uint16_t param, uint8_t event)
{
   135a8:	b580      	push	{r7, lr}
   135aa:	b09e      	sub	sp, #120	; 0x78
   135ac:	af00      	add	r7, sp, #0
   135ae:	6078      	str	r0, [r7, #4]
   135b0:	4608      	mov	r0, r1
   135b2:	4611      	mov	r1, r2
   135b4:	461a      	mov	r2, r3
   135b6:	4603      	mov	r3, r0
   135b8:	70fb      	strb	r3, [r7, #3]
   135ba:	460b      	mov	r3, r1
   135bc:	803b      	strh	r3, [r7, #0]
   135be:	4613      	mov	r3, r2
   135c0:	70bb      	strb	r3, [r7, #2]
  secQueueBuf_t *pBuf;
  uint16_t bufSize = sizeof(secQueueBuf_t) + sizeof(secEccMsg_t);
   135c2:	2394      	movs	r3, #148	; 0x94
   135c4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

  if ((pBuf = WsfMsgAlloc(bufSize)) != NULL)
   135c8:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
   135cc:	4618      	mov	r0, r3
   135ce:	f005 fdb5 	bl	1913c <WsfMsgAlloc>
   135d2:	6738      	str	r0, [r7, #112]	; 0x70
   135d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   135d6:	2b00      	cmp	r3, #0
   135d8:	d061      	beq.n	1369e <SecEccGenSharedSecret+0xf6>
  {
	  secEccKey_t           temp_ecc_key;

    /* Reverse keys (to little endian) */
    WStrReverseCpy(temp_ecc_key.pubKey_x, pKey->pubKey_x, SEC_ECC_KEY_LEN);
   135da:	687b      	ldr	r3, [r7, #4]
   135dc:	f107 020c 	add.w	r2, r7, #12
   135e0:	4610      	mov	r0, r2
   135e2:	4619      	mov	r1, r3
   135e4:	2220      	movs	r2, #32
   135e6:	f7ff fcb7 	bl	12f58 <WStrReverseCpy>
    WStrReverseCpy(temp_ecc_key.pubKey_y, pKey->pubKey_y, SEC_ECC_KEY_LEN);
   135ea:	687b      	ldr	r3, [r7, #4]
   135ec:	f103 0220 	add.w	r2, r3, #32
   135f0:	f107 030c 	add.w	r3, r7, #12
   135f4:	3320      	adds	r3, #32
   135f6:	4618      	mov	r0, r3
   135f8:	4611      	mov	r1, r2
   135fa:	2220      	movs	r2, #32
   135fc:	f7ff fcac 	bl	12f58 <WStrReverseCpy>
	
    #if defined(AM_PART_APOLLO) || defined(AM_PART_APOLLO2)
    {
    #else
    if(!APOLLO3_B0) 
   13600:	4b29      	ldr	r3, [pc, #164]	; (136a8 <SecEccGenSharedSecret+0x100>)
   13602:	68db      	ldr	r3, [r3, #12]
   13604:	b2db      	uxtb	r3, r3
   13606:	2b21      	cmp	r3, #33	; 0x21
   13608:	d02e      	beq.n	13668 <SecEccGenSharedSecret+0xc0>
    {
    #endif
      // at this time only B0 has fix for the security vulnerability.
      if(!uECC_valid_public_key(temp_ecc_key.pubKey_x, uECC_secp256r1()))
   1360a:	f00d ff01 	bl	21410 <uECC_secp256r1>
   1360e:	4602      	mov	r2, r0
   13610:	f107 030c 	add.w	r3, r7, #12
   13614:	4618      	mov	r0, r3
   13616:	4611      	mov	r1, r2
   13618:	f00d ff74 	bl	21504 <uECC_valid_public_key>
   1361c:	4603      	mov	r3, r0
   1361e:	2b00      	cmp	r3, #0
   13620:	d122      	bne.n	13668 <SecEccGenSharedSecret+0xc0>
      {

        WsfMsgFree(pBuf);
   13622:	6f38      	ldr	r0, [r7, #112]	; 0x70
   13624:	f005 fda2 	bl	1916c <WsfMsgFree>

        secEccMsg_t *pMsg = WsfMsgAlloc(sizeof(secEccMsg_t));
   13628:	2064      	movs	r0, #100	; 0x64
   1362a:	f005 fd87 	bl	1913c <WsfMsgAlloc>
   1362e:	66f8      	str	r0, [r7, #108]	; 0x6c

        if (pMsg)
   13630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   13632:	2b00      	cmp	r3, #0
   13634:	d016      	beq.n	13664 <SecEccGenSharedSecret+0xbc>
        {
          // set invalid shared key as suggested by the security errata
          memset(pMsg->data.sharedSecret.secret, 0xFF, SEC_ECC_KEY_LEN);
   13636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   13638:	3304      	adds	r3, #4
   1363a:	4618      	mov	r0, r3
   1363c:	21ff      	movs	r1, #255	; 0xff
   1363e:	2220      	movs	r2, #32
   13640:	f00c fed4 	bl	203ec <memset>
          /* Send shared secret to handler */  
          pMsg->hdr.event = event;
   13644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   13646:	78ba      	ldrb	r2, [r7, #2]
   13648:	709a      	strb	r2, [r3, #2]
          pMsg->hdr.param = param;
   1364a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1364c:	883a      	ldrh	r2, [r7, #0]
   1364e:	801a      	strh	r2, [r3, #0]
          pMsg->hdr.status = HCI_SUCCESS;
   13650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   13652:	2200      	movs	r2, #0
   13654:	70da      	strb	r2, [r3, #3]
          WsfMsgSend(handlerId, pMsg);
   13656:	78fb      	ldrb	r3, [r7, #3]
   13658:	4618      	mov	r0, r3
   1365a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
   1365c:	f005 fd92 	bl	19184 <WsfMsgSend>
          return TRUE;
   13660:	2301      	movs	r3, #1
   13662:	e01d      	b.n	136a0 <SecEccGenSharedSecret+0xf8>
        }
        else {
          return FALSE;
   13664:	2300      	movs	r3, #0
   13666:	e01b      	b.n	136a0 <SecEccGenSharedSecret+0xf8>
    // At this point either remote public key is valid or controller has
    // the fix for the security vulnerability.
    // 

    /* Record the event and parameter for use in the HCI response */
    pBuf->msg.hdr.param = param;
   13668:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1366a:	883a      	ldrh	r2, [r7, #0]
   1366c:	801a      	strh	r2, [r3, #0]
    pBuf->msg.hdr.event = event;
   1366e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   13670:	78ba      	ldrb	r2, [r7, #2]
   13672:	709a      	strb	r2, [r3, #2]
    pBuf->type = SEC_TYPE_DH;
   13674:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   13676:	2202      	movs	r2, #2
   13678:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* queue buffer */
    WsfMsgEnq(&secCb.queue, handlerId, pBuf);
   1367c:	78fb      	ldrb	r3, [r7, #3]
   1367e:	480b      	ldr	r0, [pc, #44]	; (136ac <SecEccGenSharedSecret+0x104>)
   13680:	4619      	mov	r1, r3
   13682:	6f3a      	ldr	r2, [r7, #112]	; 0x70
   13684:	f005 fd98 	bl	191b8 <WsfMsgEnq>

    /* Request the DH Key via HCI */
    HciLeGenerateDHKey(temp_ecc_key.pubKey_x, temp_ecc_key.pubKey_y);
   13688:	f107 020c 	add.w	r2, r7, #12
   1368c:	f107 030c 	add.w	r3, r7, #12
   13690:	3320      	adds	r3, #32
   13692:	4610      	mov	r0, r2
   13694:	4619      	mov	r1, r3
   13696:	f002 f927 	bl	158e8 <HciLeGenerateDHKey>

    return TRUE;
   1369a:	2301      	movs	r3, #1
   1369c:	e000      	b.n	136a0 <SecEccGenSharedSecret+0xf8>
  }

  return FALSE;
   1369e:	2300      	movs	r3, #0
}
   136a0:	4618      	mov	r0, r3
   136a2:	3778      	adds	r7, #120	; 0x78
   136a4:	46bd      	mov	sp, r7
   136a6:	bd80      	pop	{r7, pc}
   136a8:	40020000 	.word	0x40020000
   136ac:	100091a8 	.word	0x100091a8

000136b0 <SecEccInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecEccInit()
{
   136b0:	b480      	push	{r7}
   136b2:	af00      	add	r7, sp, #0
  secCb.hciCbackTbl[SEC_TYPE_DH] = SecEccHciCback;
   136b4:	4b03      	ldr	r3, [pc, #12]	; (136c4 <SecEccInit+0x14>)
   136b6:	4a04      	ldr	r2, [pc, #16]	; (136c8 <SecEccInit+0x18>)
   136b8:	635a      	str	r2, [r3, #52]	; 0x34
}
   136ba:	46bd      	mov	sp, r7
   136bc:	f85d 7b04 	ldr.w	r7, [sp], #4
   136c0:	4770      	bx	lr
   136c2:	bf00      	nop
   136c4:	10009188 	.word	0x10009188
   136c8:	000134b1 	.word	0x000134b1

000136cc <secHciCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secHciCback(hciEvt_t *pEvent)
{
   136cc:	b580      	push	{r7, lr}
   136ce:	b084      	sub	sp, #16
   136d0:	af00      	add	r7, sp, #0
   136d2:	6078      	str	r0, [r7, #4]
  secQueueBuf_t  *pBuf  = NULL;
   136d4:	2300      	movs	r3, #0
   136d6:	60fb      	str	r3, [r7, #12]
  wsfHandlerId_t    handlerId = 0;
   136d8:	2300      	movs	r3, #0
   136da:	72fb      	strb	r3, [r7, #11]
  
  /* handle random number event */
  if (pEvent->hdr.event == HCI_LE_RAND_CMD_CMPL_CBACK_EVT)
   136dc:	687b      	ldr	r3, [r7, #4]
   136de:	789b      	ldrb	r3, [r3, #2]
   136e0:	2b1c      	cmp	r3, #28
   136e2:	d10c      	bne.n	136fe <secHciCback+0x32>
  {
    /* move up data by eight bytes */    
    memmove(&secCb.rand[HCI_RAND_LEN], secCb.rand, HCI_RAND_LEN * (SEC_HCI_RAND_MULT-1));
   136e4:	482d      	ldr	r0, [pc, #180]	; (1379c <secHciCback+0xd0>)
   136e6:	492e      	ldr	r1, [pc, #184]	; (137a0 <secHciCback+0xd4>)
   136e8:	2218      	movs	r2, #24
   136ea:	f00c fe1b 	bl	20324 <memmove>
    
    /* copy new data to random data buffer */
    memcpy(secCb.rand, pEvent->leRandCmdCmpl.randNum, HCI_RAND_LEN);
   136ee:	687b      	ldr	r3, [r7, #4]
   136f0:	3305      	adds	r3, #5
   136f2:	482b      	ldr	r0, [pc, #172]	; (137a0 <secHciCback+0xd4>)
   136f4:	4619      	mov	r1, r3
   136f6:	2208      	movs	r2, #8
   136f8:	f7f8 fd02 	bl	c100 <memcpy>
   136fc:	e04a      	b.n	13794 <secHciCback+0xc8>
  }
  /* handle encryption event */
  else if (pEvent->hdr.event == HCI_LE_ENCRYPT_CMD_CMPL_CBACK_EVT ||
   136fe:	687b      	ldr	r3, [r7, #4]
   13700:	789b      	ldrb	r3, [r3, #2]
   13702:	2b1b      	cmp	r3, #27
   13704:	d007      	beq.n	13716 <secHciCback+0x4a>
           pEvent->hdr.event == HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_CBACK_EVT ||
   13706:	687b      	ldr	r3, [r7, #4]
   13708:	789b      	ldrb	r3, [r3, #2]
    
    /* copy new data to random data buffer */
    memcpy(secCb.rand, pEvent->leRandCmdCmpl.randNum, HCI_RAND_LEN);
  }
  /* handle encryption event */
  else if (pEvent->hdr.event == HCI_LE_ENCRYPT_CMD_CMPL_CBACK_EVT ||
   1370a:	2b25      	cmp	r3, #37	; 0x25
   1370c:	d003      	beq.n	13716 <secHciCback+0x4a>
           pEvent->hdr.event == HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_CBACK_EVT ||
           pEvent->hdr.event == HCI_LE_GENERATE_DHKEY_CMPL_CBACK_EVT)
   1370e:	687b      	ldr	r3, [r7, #4]
   13710:	789b      	ldrb	r3, [r3, #2]
    /* copy new data to random data buffer */
    memcpy(secCb.rand, pEvent->leRandCmdCmpl.randNum, HCI_RAND_LEN);
  }
  /* handle encryption event */
  else if (pEvent->hdr.event == HCI_LE_ENCRYPT_CMD_CMPL_CBACK_EVT ||
           pEvent->hdr.event == HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_CBACK_EVT ||
   13712:	2b26      	cmp	r3, #38	; 0x26
   13714:	d128      	bne.n	13768 <secHciCback+0x9c>
           pEvent->hdr.event == HCI_LE_GENERATE_DHKEY_CMPL_CBACK_EVT)
  {
    if ((pBuf = WsfMsgDeq(&secCb.queue, &handlerId)) != NULL)
   13716:	f107 030b 	add.w	r3, r7, #11
   1371a:	4822      	ldr	r0, [pc, #136]	; (137a4 <secHciCback+0xd8>)
   1371c:	4619      	mov	r1, r3
   1371e:	f005 fd5f 	bl	191e0 <WsfMsgDeq>
   13722:	60f8      	str	r0, [r7, #12]
   13724:	68fb      	ldr	r3, [r7, #12]
   13726:	2b00      	cmp	r3, #0
   13728:	d01a      	beq.n	13760 <secHciCback+0x94>
    {
      /* Process HCI callback based on type of encryption */ 
      if (secCb.hciCbackTbl[pBuf->type])
   1372a:	68fb      	ldr	r3, [r7, #12]
   1372c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   13730:	4a1b      	ldr	r2, [pc, #108]	; (137a0 <secHciCback+0xd4>)
   13732:	330a      	adds	r3, #10
   13734:	009b      	lsls	r3, r3, #2
   13736:	4413      	add	r3, r2
   13738:	685b      	ldr	r3, [r3, #4]
   1373a:	2b00      	cmp	r3, #0
   1373c:	d00c      	beq.n	13758 <secHciCback+0x8c>
      {
        secCb.hciCbackTbl[pBuf->type](pBuf, pEvent, handlerId);
   1373e:	68fb      	ldr	r3, [r7, #12]
   13740:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   13744:	4a16      	ldr	r2, [pc, #88]	; (137a0 <secHciCback+0xd4>)
   13746:	330a      	adds	r3, #10
   13748:	009b      	lsls	r3, r3, #2
   1374a:	4413      	add	r3, r2
   1374c:	685b      	ldr	r3, [r3, #4]
   1374e:	7afa      	ldrb	r2, [r7, #11]
   13750:	68f8      	ldr	r0, [r7, #12]
   13752:	6879      	ldr	r1, [r7, #4]
   13754:	4798      	blx	r3
  /* handle encryption event */
  else if (pEvent->hdr.event == HCI_LE_ENCRYPT_CMD_CMPL_CBACK_EVT ||
           pEvent->hdr.event == HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_CBACK_EVT ||
           pEvent->hdr.event == HCI_LE_GENERATE_DHKEY_CMPL_CBACK_EVT)
  {
    if ((pBuf = WsfMsgDeq(&secCb.queue, &handlerId)) != NULL)
   13756:	e01d      	b.n	13794 <secHciCback+0xc8>
      {
        secCb.hciCbackTbl[pBuf->type](pBuf, pEvent, handlerId);
      }
      else
      {
        WSF_TRACE_WARN0("WSF sec not registered");
   13758:	4813      	ldr	r0, [pc, #76]	; (137a8 <secHciCback+0xdc>)
   1375a:	f001 fa03 	bl	14b64 <WsfTrace>
  /* handle encryption event */
  else if (pEvent->hdr.event == HCI_LE_ENCRYPT_CMD_CMPL_CBACK_EVT ||
           pEvent->hdr.event == HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_CBACK_EVT ||
           pEvent->hdr.event == HCI_LE_GENERATE_DHKEY_CMPL_CBACK_EVT)
  {
    if ((pBuf = WsfMsgDeq(&secCb.queue, &handlerId)) != NULL)
   1375e:	e019      	b.n	13794 <secHciCback+0xc8>
        WSF_TRACE_WARN0("WSF sec not registered");
      }
    }
    else
    {
      WSF_TRACE_WARN0("WSF sec queue empty!");
   13760:	4812      	ldr	r0, [pc, #72]	; (137ac <secHciCback+0xe0>)
   13762:	f001 f9ff 	bl	14b64 <WsfTrace>
  /* handle encryption event */
  else if (pEvent->hdr.event == HCI_LE_ENCRYPT_CMD_CMPL_CBACK_EVT ||
           pEvent->hdr.event == HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_CBACK_EVT ||
           pEvent->hdr.event == HCI_LE_GENERATE_DHKEY_CMPL_CBACK_EVT)
  {
    if ((pBuf = WsfMsgDeq(&secCb.queue, &handlerId)) != NULL)
   13766:	e015      	b.n	13794 <secHciCback+0xc8>
    else
    {
      WSF_TRACE_WARN0("WSF sec queue empty!");
    }
  }
  else if (pEvent->hdr.event == HCI_HW_ERROR_CBACK_EVT)
   13768:	687b      	ldr	r3, [r7, #4]
   1376a:	789b      	ldrb	r3, [r3, #2]
   1376c:	2b14      	cmp	r3, #20
   1376e:	d111      	bne.n	13794 <secHciCback+0xc8>
  {
    while((pBuf = WsfMsgDeq(&secCb.queue, &handlerId)) != NULL)
   13770:	e002      	b.n	13778 <secHciCback+0xac>
    {
      WsfMsgFree(pBuf);
   13772:	68f8      	ldr	r0, [r7, #12]
   13774:	f005 fcfa 	bl	1916c <WsfMsgFree>
      WSF_TRACE_WARN0("WSF sec queue empty!");
    }
  }
  else if (pEvent->hdr.event == HCI_HW_ERROR_CBACK_EVT)
  {
    while((pBuf = WsfMsgDeq(&secCb.queue, &handlerId)) != NULL)
   13778:	f107 030b 	add.w	r3, r7, #11
   1377c:	4809      	ldr	r0, [pc, #36]	; (137a4 <secHciCback+0xd8>)
   1377e:	4619      	mov	r1, r3
   13780:	f005 fd2e 	bl	191e0 <WsfMsgDeq>
   13784:	60f8      	str	r0, [r7, #12]
   13786:	68fb      	ldr	r3, [r7, #12]
   13788:	2b00      	cmp	r3, #0
   1378a:	d1f2      	bne.n	13772 <secHciCback+0xa6>
    {
      WsfMsgFree(pBuf);
    }  
    
    secCb.token = 0;
   1378c:	4b04      	ldr	r3, [pc, #16]	; (137a0 <secHciCback+0xd4>)
   1378e:	2200      	movs	r2, #0
   13790:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  }
}
   13794:	3710      	adds	r7, #16
   13796:	46bd      	mov	sp, r7
   13798:	bd80      	pop	{r7, pc}
   1379a:	bf00      	nop
   1379c:	10009190 	.word	0x10009190
   137a0:	10009188 	.word	0x10009188
   137a4:	100091a8 	.word	0x100091a8
   137a8:	00023a04 	.word	0x00023a04
   137ac:	00023a1c 	.word	0x00023a1c

000137b0 <SecInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecInit(void)
{
   137b0:	b580      	push	{r7, lr}
   137b2:	af00      	add	r7, sp, #0
  WSF_QUEUE_INIT(&secCb.queue);
   137b4:	4b06      	ldr	r3, [pc, #24]	; (137d0 <SecInit+0x20>)
   137b6:	2200      	movs	r2, #0
   137b8:	621a      	str	r2, [r3, #32]
   137ba:	4b05      	ldr	r3, [pc, #20]	; (137d0 <SecInit+0x20>)
   137bc:	2200      	movs	r2, #0
   137be:	625a      	str	r2, [r3, #36]	; 0x24
  secCb.token = 0;
   137c0:	4b03      	ldr	r3, [pc, #12]	; (137d0 <SecInit+0x20>)
   137c2:	2200      	movs	r2, #0
   137c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Register callback with HCI */
  HciSecRegister(secHciCback);
   137c8:	4802      	ldr	r0, [pc, #8]	; (137d4 <SecInit+0x24>)
   137ca:	f7ff fafb 	bl	12dc4 <HciSecRegister>
}
   137ce:	bd80      	pop	{r7, pc}
   137d0:	10009188 	.word	0x10009188
   137d4:	000136cd 	.word	0x000136cd

000137d8 <SecRand>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecRand(uint8_t *pRand, uint8_t randLen)
{
   137d8:	b580      	push	{r7, lr}
   137da:	b084      	sub	sp, #16
   137dc:	af00      	add	r7, sp, #0
   137de:	6078      	str	r0, [r7, #4]
   137e0:	460b      	mov	r3, r1
   137e2:	70fb      	strb	r3, [r7, #3]
  int8_t count = (randLen + HCI_RAND_LEN - 1) / HCI_RAND_LEN;
   137e4:	78fb      	ldrb	r3, [r7, #3]
   137e6:	3307      	adds	r3, #7
   137e8:	2b00      	cmp	r3, #0
   137ea:	da00      	bge.n	137ee <SecRand+0x16>
   137ec:	3307      	adds	r3, #7
   137ee:	10db      	asrs	r3, r3, #3
   137f0:	73fb      	strb	r3, [r7, #15]

  WSF_ASSERT(randLen <= HCI_RAND_LEN * SEC_HCI_RAND_MULT);

  /* copy data */
  memcpy(pRand, secCb.rand, randLen);
   137f2:	78fb      	ldrb	r3, [r7, #3]
   137f4:	6878      	ldr	r0, [r7, #4]
   137f6:	4908      	ldr	r1, [pc, #32]	; (13818 <SecRand+0x40>)
   137f8:	461a      	mov	r2, r3
   137fa:	f7f8 fc81 	bl	c100 <memcpy>
  
  /* get new random numbers */
  while (count--)
   137fe:	e001      	b.n	13804 <SecRand+0x2c>
  {
    HciLeRandCmd();
   13800:	f002 f91e 	bl	15a40 <HciLeRandCmd>

  /* copy data */
  memcpy(pRand, secCb.rand, randLen);
  
  /* get new random numbers */
  while (count--)
   13804:	7bfb      	ldrb	r3, [r7, #15]
   13806:	b2da      	uxtb	r2, r3
   13808:	3a01      	subs	r2, #1
   1380a:	b2d2      	uxtb	r2, r2
   1380c:	73fa      	strb	r2, [r7, #15]
   1380e:	2b00      	cmp	r3, #0
   13810:	d1f6      	bne.n	13800 <SecRand+0x28>
  {
    HciLeRandCmd();
  }
}
   13812:	3710      	adds	r7, #16
   13814:	46bd      	mov	sp, r7
   13816:	bd80      	pop	{r7, pc}
   13818:	10009188 	.word	0x10009188

0001381c <GattDiscover>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void GattDiscover(dmConnId_t connId, uint16_t *pHdlList)
{
   1381c:	b580      	push	{r7, lr}
   1381e:	b084      	sub	sp, #16
   13820:	af02      	add	r7, sp, #8
   13822:	4603      	mov	r3, r0
   13824:	6039      	str	r1, [r7, #0]
   13826:	71fb      	strb	r3, [r7, #7]
  AppDiscFindService(connId, ATT_16_UUID_LEN, (uint8_t *) attGattSvcUuid,
   13828:	79fa      	ldrb	r2, [r7, #7]
   1382a:	4b06      	ldr	r3, [pc, #24]	; (13844 <GattDiscover+0x28>)
   1382c:	9300      	str	r3, [sp, #0]
   1382e:	683b      	ldr	r3, [r7, #0]
   13830:	9301      	str	r3, [sp, #4]
   13832:	4610      	mov	r0, r2
   13834:	2102      	movs	r1, #2
   13836:	4a04      	ldr	r2, [pc, #16]	; (13848 <GattDiscover+0x2c>)
   13838:	2302      	movs	r3, #2
   1383a:	f007 fe99 	bl	1b570 <AppDiscFindService>
                     GATT_HDL_LIST_LEN, (attcDiscChar_t **) gattDiscCharList, pHdlList);
}
   1383e:	3708      	adds	r7, #8
   13840:	46bd      	mov	sp, r7
   13842:	bd80      	pop	{r7, pc}
   13844:	10002b84 	.word	0x10002b84
   13848:	00024610 	.word	0x00024610

0001384c <GattValueUpdate>:
 *
 *  \return ATT_SUCCESS if handle is found, ATT_ERR_NOT_FOUND otherwise.
 */
/*************************************************************************************************/
uint8_t GattValueUpdate(uint16_t *pHdlList, attEvt_t *pMsg)
{
   1384c:	b580      	push	{r7, lr}
   1384e:	b084      	sub	sp, #16
   13850:	af00      	add	r7, sp, #0
   13852:	6078      	str	r0, [r7, #4]
   13854:	6039      	str	r1, [r7, #0]
  uint8_t status = ATT_SUCCESS;
   13856:	2300      	movs	r3, #0
   13858:	73fb      	strb	r3, [r7, #15]
  
  /* service changed */
  if (pMsg->handle == pHdlList[GATT_SC_HDL_IDX])
   1385a:	683b      	ldr	r3, [r7, #0]
   1385c:	895a      	ldrh	r2, [r3, #10]
   1385e:	687b      	ldr	r3, [r7, #4]
   13860:	881b      	ldrh	r3, [r3, #0]
   13862:	429a      	cmp	r2, r3
   13864:	d103      	bne.n	1386e <GattValueUpdate+0x22>
  {
    /* perform service changed */
    AppDiscServiceChanged(pMsg);
   13866:	6838      	ldr	r0, [r7, #0]
   13868:	f007 ff1c 	bl	1b6a4 <AppDiscServiceChanged>
   1386c:	e001      	b.n	13872 <GattValueUpdate+0x26>
  }
  /* handle not found in list */
  else
  {
    status = ATT_ERR_NOT_FOUND;
   1386e:	230a      	movs	r3, #10
   13870:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
   13872:	7bfb      	ldrb	r3, [r7, #15]
}
   13874:	4618      	mov	r0, r3
   13876:	3710      	adds	r7, #16
   13878:	46bd      	mov	sp, r7
   1387a:	bd80      	pop	{r7, pc}

0001387c <AnccSvcDiscover>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AnccSvcDiscover(dmConnId_t connId, uint16_t *pHdlList)
{
   1387c:	b580      	push	{r7, lr}
   1387e:	b084      	sub	sp, #16
   13880:	af02      	add	r7, sp, #8
   13882:	4603      	mov	r3, r0
   13884:	6039      	str	r1, [r7, #0]
   13886:	71fb      	strb	r3, [r7, #7]
    AppDiscFindService(connId, ATT_128_UUID_LEN, (uint8_t *) anccAncsSvcUuid,
   13888:	79fa      	ldrb	r2, [r7, #7]
   1388a:	4b06      	ldr	r3, [pc, #24]	; (138a4 <AnccSvcDiscover+0x28>)
   1388c:	9300      	str	r3, [sp, #0]
   1388e:	683b      	ldr	r3, [r7, #0]
   13890:	9301      	str	r3, [sp, #4]
   13892:	4610      	mov	r0, r2
   13894:	2110      	movs	r1, #16
   13896:	4a04      	ldr	r2, [pc, #16]	; (138a8 <AnccSvcDiscover+0x2c>)
   13898:	2305      	movs	r3, #5
   1389a:	f007 fe69 	bl	1b570 <AppDiscFindService>
                     ANCC_HDL_LIST_LEN, (attcDiscChar_t **) anccSvcDiscCharList, pHdlList);
}
   1389e:	3708      	adds	r7, #8
   138a0:	46bd      	mov	sp, r7
   138a2:	bd80      	pop	{r7, pc}
   138a4:	10002b8c 	.word	0x10002b8c
   138a8:	00025194 	.word	0x00025194

000138ac <AnccInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AnccInit(wsfHandlerId_t handlerId, anccCfg_t* cfg, uint8_t disctimer_event)
{
   138ac:	b580      	push	{r7, lr}
   138ae:	b082      	sub	sp, #8
   138b0:	af00      	add	r7, sp, #0
   138b2:	4603      	mov	r3, r0
   138b4:	6039      	str	r1, [r7, #0]
   138b6:	71fb      	strb	r3, [r7, #7]
   138b8:	4613      	mov	r3, r2
   138ba:	71bb      	strb	r3, [r7, #6]
    memset(anccCb.anccList, 0, ANCC_LIST_ELEMENTS * sizeof(ancc_notif_t));
   138bc:	480b      	ldr	r0, [pc, #44]	; (138ec <AnccInit+0x40>)
   138be:	2100      	movs	r1, #0
   138c0:	f44f 7240 	mov.w	r2, #768	; 0x300
   138c4:	f00c fd92 	bl	203ec <memset>
    anccCb.cfg.period = cfg->period;
   138c8:	683b      	ldr	r3, [r7, #0]
   138ca:	681b      	ldr	r3, [r3, #0]
   138cc:	4a08      	ldr	r2, [pc, #32]	; (138f0 <AnccInit+0x44>)
   138ce:	6093      	str	r3, [r2, #8]
    anccCb.actionTimer.handlerId = handlerId;
   138d0:	4a07      	ldr	r2, [pc, #28]	; (138f0 <AnccInit+0x44>)
   138d2:	79fb      	ldrb	r3, [r7, #7]
   138d4:	7513      	strb	r3, [r2, #20]
    anccCb.discoverTimer.handlerId = handlerId;
   138d6:	4a06      	ldr	r2, [pc, #24]	; (138f0 <AnccInit+0x44>)
   138d8:	79fb      	ldrb	r3, [r7, #7]
   138da:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    anccCb.discoverTimer.msg.event = disctimer_event;
   138de:	4a04      	ldr	r2, [pc, #16]	; (138f0 <AnccInit+0x44>)
   138e0:	79bb      	ldrb	r3, [r7, #6]
   138e2:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
}
   138e6:	3708      	adds	r7, #8
   138e8:	46bd      	mov	sp, r7
   138ea:	bd80      	pop	{r7, pc}
   138ec:	100091ec 	.word	0x100091ec
   138f0:	100091c0 	.word	0x100091c0

000138f4 <AnccConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AnccConnOpen(dmConnId_t connId, uint16_t* hdlList)
{
   138f4:	b580      	push	{r7, lr}
   138f6:	b082      	sub	sp, #8
   138f8:	af00      	add	r7, sp, #0
   138fa:	4603      	mov	r3, r0
   138fc:	6039      	str	r1, [r7, #0]
   138fe:	71fb      	strb	r3, [r7, #7]
    anccCb.connId = connId;
   13900:	4a08      	ldr	r2, [pc, #32]	; (13924 <AnccConnOpen+0x30>)
   13902:	79fb      	ldrb	r3, [r7, #7]
   13904:	7013      	strb	r3, [r2, #0]
    anccCb.hdlList = hdlList;
   13906:	4a07      	ldr	r2, [pc, #28]	; (13924 <AnccConnOpen+0x30>)
   13908:	683b      	ldr	r3, [r7, #0]
   1390a:	6053      	str	r3, [r2, #4]

    WsfTimerStop(&anccCb.discoverTimer);
   1390c:	4806      	ldr	r0, [pc, #24]	; (13928 <AnccConnOpen+0x34>)
   1390e:	f005 fdeb 	bl	194e8 <WsfTimerStop>
    WsfTimerStartMs(&anccCb.discoverTimer, DISCOVER_TIMER_DELAY);
   13912:	4805      	ldr	r0, [pc, #20]	; (13928 <AnccConnOpen+0x34>)
   13914:	f640 31b8 	movw	r1, #3000	; 0xbb8
   13918:	f005 fdd2 	bl	194c0 <WsfTimerStartMs>
}
   1391c:	3708      	adds	r7, #8
   1391e:	46bd      	mov	sp, r7
   13920:	bd80      	pop	{r7, pc}
   13922:	bf00      	nop
   13924:	100091c0 	.word	0x100091c0
   13928:	100091dc 	.word	0x100091dc

0001392c <AnccConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AnccConnClose(void)
{
   1392c:	b580      	push	{r7, lr}
   1392e:	af00      	add	r7, sp, #0
    WsfTimerStop(&anccCb.discoverTimer);
   13930:	4803      	ldr	r0, [pc, #12]	; (13940 <AnccConnClose+0x14>)
   13932:	f005 fdd9 	bl	194e8 <WsfTimerStop>
    anccCb.connId = DM_CONN_ID_NONE;
   13936:	4b03      	ldr	r3, [pc, #12]	; (13944 <AnccConnClose+0x18>)
   13938:	2200      	movs	r2, #0
   1393a:	701a      	strb	r2, [r3, #0]
}
   1393c:	bd80      	pop	{r7, pc}
   1393e:	bf00      	nop
   13940:	100091dc 	.word	0x100091dc
   13944:	100091c0 	.word	0x100091c0

00013948 <anccNoConnActive>:
 *
 *  \return TRUE if no connections active.
 */
/*************************************************************************************************/
static bool_t anccNoConnActive(void)
{
   13948:	b480      	push	{r7}
   1394a:	af00      	add	r7, sp, #0
    if (anccCb.connId != DM_CONN_ID_NONE)
   1394c:	4b05      	ldr	r3, [pc, #20]	; (13964 <anccNoConnActive+0x1c>)
   1394e:	781b      	ldrb	r3, [r3, #0]
   13950:	2b00      	cmp	r3, #0
   13952:	d001      	beq.n	13958 <anccNoConnActive+0x10>
    {
        return FALSE;
   13954:	2300      	movs	r3, #0
   13956:	e000      	b.n	1395a <anccNoConnActive+0x12>
    }
    return TRUE;
   13958:	2301      	movs	r3, #1
}
   1395a:	4618      	mov	r0, r3
   1395c:	46bd      	mov	sp, r7
   1395e:	f85d 7b04 	ldr.w	r7, [sp], #4
   13962:	4770      	bx	lr
   13964:	100091c0 	.word	0x100091c0

00013968 <anccActionListPush>:
 *  \return TRUE if element is added/updated to the list.
 *          FALSE if list is full.
 */
/*************************************************************************************************/
static bool_t anccActionListPush(ancc_notif_t* pElement)
{
   13968:	b480      	push	{r7}
   1396a:	b085      	sub	sp, #20
   1396c:	af00      	add	r7, sp, #0
   1396e:	6078      	str	r0, [r7, #4]
    uint16_t i;
    for ( i = 0; i < ANCC_LIST_ELEMENTS; i++ )
   13970:	2300      	movs	r3, #0
   13972:	81fb      	strh	r3, [r7, #14]
   13974:	e057      	b.n	13a26 <anccActionListPush+0xbe>
    {
        if ( (anccCb.anccList[i].notification_uid == pElement->notification_uid ) && (anccCb.anccList[i].noti_valid == true) )
   13976:	89fa      	ldrh	r2, [r7, #14]
   13978:	495d      	ldr	r1, [pc, #372]	; (13af0 <anccActionListPush+0x188>)
   1397a:	4613      	mov	r3, r2
   1397c:	005b      	lsls	r3, r3, #1
   1397e:	4413      	add	r3, r2
   13980:	009b      	lsls	r3, r3, #2
   13982:	440b      	add	r3, r1
   13984:	3328      	adds	r3, #40	; 0x28
   13986:	689a      	ldr	r2, [r3, #8]
   13988:	687b      	ldr	r3, [r7, #4]
   1398a:	685b      	ldr	r3, [r3, #4]
   1398c:	429a      	cmp	r2, r3
   1398e:	d147      	bne.n	13a20 <anccActionListPush+0xb8>
   13990:	89fa      	ldrh	r2, [r7, #14]
   13992:	4957      	ldr	r1, [pc, #348]	; (13af0 <anccActionListPush+0x188>)
   13994:	4613      	mov	r3, r2
   13996:	005b      	lsls	r3, r3, #1
   13998:	4413      	add	r3, r2
   1399a:	009b      	lsls	r3, r3, #2
   1399c:	440b      	add	r3, r1
   1399e:	3330      	adds	r3, #48	; 0x30
   139a0:	791b      	ldrb	r3, [r3, #4]
   139a2:	2b01      	cmp	r3, #1
   139a4:	d13c      	bne.n	13a20 <anccActionListPush+0xb8>
        {
            // same notification uid received, update the element
            anccCb.anccList[i].notification_uid = pElement->notification_uid;
   139a6:	89fa      	ldrh	r2, [r7, #14]
   139a8:	687b      	ldr	r3, [r7, #4]
   139aa:	6859      	ldr	r1, [r3, #4]
   139ac:	4850      	ldr	r0, [pc, #320]	; (13af0 <anccActionListPush+0x188>)
   139ae:	4613      	mov	r3, r2
   139b0:	005b      	lsls	r3, r3, #1
   139b2:	4413      	add	r3, r2
   139b4:	009b      	lsls	r3, r3, #2
   139b6:	4403      	add	r3, r0
   139b8:	3328      	adds	r3, #40	; 0x28
   139ba:	6099      	str	r1, [r3, #8]
            anccCb.anccList[i].event_id = pElement->event_id;
   139bc:	89fa      	ldrh	r2, [r7, #14]
   139be:	687b      	ldr	r3, [r7, #4]
   139c0:	7818      	ldrb	r0, [r3, #0]
   139c2:	494b      	ldr	r1, [pc, #300]	; (13af0 <anccActionListPush+0x188>)
   139c4:	4613      	mov	r3, r2
   139c6:	005b      	lsls	r3, r3, #1
   139c8:	4413      	add	r3, r2
   139ca:	009b      	lsls	r3, r3, #2
   139cc:	440b      	add	r3, r1
   139ce:	3328      	adds	r3, #40	; 0x28
   139d0:	4602      	mov	r2, r0
   139d2:	711a      	strb	r2, [r3, #4]
            anccCb.anccList[i].event_flags = pElement->event_flags;
   139d4:	89fa      	ldrh	r2, [r7, #14]
   139d6:	687b      	ldr	r3, [r7, #4]
   139d8:	7858      	ldrb	r0, [r3, #1]
   139da:	4945      	ldr	r1, [pc, #276]	; (13af0 <anccActionListPush+0x188>)
   139dc:	4613      	mov	r3, r2
   139de:	005b      	lsls	r3, r3, #1
   139e0:	4413      	add	r3, r2
   139e2:	009b      	lsls	r3, r3, #2
   139e4:	440b      	add	r3, r1
   139e6:	3328      	adds	r3, #40	; 0x28
   139e8:	4602      	mov	r2, r0
   139ea:	715a      	strb	r2, [r3, #5]
            anccCb.anccList[i].category_id = pElement->category_id;
   139ec:	89fa      	ldrh	r2, [r7, #14]
   139ee:	687b      	ldr	r3, [r7, #4]
   139f0:	7898      	ldrb	r0, [r3, #2]
   139f2:	493f      	ldr	r1, [pc, #252]	; (13af0 <anccActionListPush+0x188>)
   139f4:	4613      	mov	r3, r2
   139f6:	005b      	lsls	r3, r3, #1
   139f8:	4413      	add	r3, r2
   139fa:	009b      	lsls	r3, r3, #2
   139fc:	440b      	add	r3, r1
   139fe:	3328      	adds	r3, #40	; 0x28
   13a00:	4602      	mov	r2, r0
   13a02:	719a      	strb	r2, [r3, #6]
            anccCb.anccList[i].category_count = pElement->category_count;
   13a04:	89fa      	ldrh	r2, [r7, #14]
   13a06:	687b      	ldr	r3, [r7, #4]
   13a08:	78d8      	ldrb	r0, [r3, #3]
   13a0a:	4939      	ldr	r1, [pc, #228]	; (13af0 <anccActionListPush+0x188>)
   13a0c:	4613      	mov	r3, r2
   13a0e:	005b      	lsls	r3, r3, #1
   13a10:	4413      	add	r3, r2
   13a12:	009b      	lsls	r3, r3, #2
   13a14:	440b      	add	r3, r1
   13a16:	3328      	adds	r3, #40	; 0x28
   13a18:	4602      	mov	r2, r0
   13a1a:	71da      	strb	r2, [r3, #7]
            return true;
   13a1c:	2301      	movs	r3, #1
   13a1e:	e061      	b.n	13ae4 <anccActionListPush+0x17c>
 */
/*************************************************************************************************/
static bool_t anccActionListPush(ancc_notif_t* pElement)
{
    uint16_t i;
    for ( i = 0; i < ANCC_LIST_ELEMENTS; i++ )
   13a20:	89fb      	ldrh	r3, [r7, #14]
   13a22:	3301      	adds	r3, #1
   13a24:	81fb      	strh	r3, [r7, #14]
   13a26:	89fb      	ldrh	r3, [r7, #14]
   13a28:	2b3f      	cmp	r3, #63	; 0x3f
   13a2a:	d9a4      	bls.n	13976 <anccActionListPush+0xe>
            anccCb.anccList[i].category_count = pElement->category_count;
            return true;
        }
    }

    for ( i = 0; i < ANCC_LIST_ELEMENTS; i++ )
   13a2c:	2300      	movs	r3, #0
   13a2e:	81fb      	strh	r3, [r7, #14]
   13a30:	e054      	b.n	13adc <anccActionListPush+0x174>
    {
        if ( anccCb.anccList[i].noti_valid == false )
   13a32:	89fa      	ldrh	r2, [r7, #14]
   13a34:	492e      	ldr	r1, [pc, #184]	; (13af0 <anccActionListPush+0x188>)
   13a36:	4613      	mov	r3, r2
   13a38:	005b      	lsls	r3, r3, #1
   13a3a:	4413      	add	r3, r2
   13a3c:	009b      	lsls	r3, r3, #2
   13a3e:	440b      	add	r3, r1
   13a40:	3330      	adds	r3, #48	; 0x30
   13a42:	791b      	ldrb	r3, [r3, #4]
   13a44:	2b00      	cmp	r3, #0
   13a46:	d146      	bne.n	13ad6 <anccActionListPush+0x16e>
        {
            // found an empty slot
            anccCb.anccList[i].notification_uid = pElement->notification_uid;
   13a48:	89fa      	ldrh	r2, [r7, #14]
   13a4a:	687b      	ldr	r3, [r7, #4]
   13a4c:	6859      	ldr	r1, [r3, #4]
   13a4e:	4828      	ldr	r0, [pc, #160]	; (13af0 <anccActionListPush+0x188>)
   13a50:	4613      	mov	r3, r2
   13a52:	005b      	lsls	r3, r3, #1
   13a54:	4413      	add	r3, r2
   13a56:	009b      	lsls	r3, r3, #2
   13a58:	4403      	add	r3, r0
   13a5a:	3328      	adds	r3, #40	; 0x28
   13a5c:	6099      	str	r1, [r3, #8]
            anccCb.anccList[i].event_id = pElement->event_id;
   13a5e:	89fa      	ldrh	r2, [r7, #14]
   13a60:	687b      	ldr	r3, [r7, #4]
   13a62:	7818      	ldrb	r0, [r3, #0]
   13a64:	4922      	ldr	r1, [pc, #136]	; (13af0 <anccActionListPush+0x188>)
   13a66:	4613      	mov	r3, r2
   13a68:	005b      	lsls	r3, r3, #1
   13a6a:	4413      	add	r3, r2
   13a6c:	009b      	lsls	r3, r3, #2
   13a6e:	440b      	add	r3, r1
   13a70:	3328      	adds	r3, #40	; 0x28
   13a72:	4602      	mov	r2, r0
   13a74:	711a      	strb	r2, [r3, #4]
            anccCb.anccList[i].event_flags = pElement->event_flags;
   13a76:	89fa      	ldrh	r2, [r7, #14]
   13a78:	687b      	ldr	r3, [r7, #4]
   13a7a:	7858      	ldrb	r0, [r3, #1]
   13a7c:	491c      	ldr	r1, [pc, #112]	; (13af0 <anccActionListPush+0x188>)
   13a7e:	4613      	mov	r3, r2
   13a80:	005b      	lsls	r3, r3, #1
   13a82:	4413      	add	r3, r2
   13a84:	009b      	lsls	r3, r3, #2
   13a86:	440b      	add	r3, r1
   13a88:	3328      	adds	r3, #40	; 0x28
   13a8a:	4602      	mov	r2, r0
   13a8c:	715a      	strb	r2, [r3, #5]
            anccCb.anccList[i].category_id = pElement->category_id;
   13a8e:	89fa      	ldrh	r2, [r7, #14]
   13a90:	687b      	ldr	r3, [r7, #4]
   13a92:	7898      	ldrb	r0, [r3, #2]
   13a94:	4916      	ldr	r1, [pc, #88]	; (13af0 <anccActionListPush+0x188>)
   13a96:	4613      	mov	r3, r2
   13a98:	005b      	lsls	r3, r3, #1
   13a9a:	4413      	add	r3, r2
   13a9c:	009b      	lsls	r3, r3, #2
   13a9e:	440b      	add	r3, r1
   13aa0:	3328      	adds	r3, #40	; 0x28
   13aa2:	4602      	mov	r2, r0
   13aa4:	719a      	strb	r2, [r3, #6]
            anccCb.anccList[i].category_count = pElement->category_count;
   13aa6:	89fa      	ldrh	r2, [r7, #14]
   13aa8:	687b      	ldr	r3, [r7, #4]
   13aaa:	78d8      	ldrb	r0, [r3, #3]
   13aac:	4910      	ldr	r1, [pc, #64]	; (13af0 <anccActionListPush+0x188>)
   13aae:	4613      	mov	r3, r2
   13ab0:	005b      	lsls	r3, r3, #1
   13ab2:	4413      	add	r3, r2
   13ab4:	009b      	lsls	r3, r3, #2
   13ab6:	440b      	add	r3, r1
   13ab8:	3328      	adds	r3, #40	; 0x28
   13aba:	4602      	mov	r2, r0
   13abc:	71da      	strb	r2, [r3, #7]
            anccCb.anccList[i].noti_valid = true;
   13abe:	89fa      	ldrh	r2, [r7, #14]
   13ac0:	490b      	ldr	r1, [pc, #44]	; (13af0 <anccActionListPush+0x188>)
   13ac2:	4613      	mov	r3, r2
   13ac4:	005b      	lsls	r3, r3, #1
   13ac6:	4413      	add	r3, r2
   13ac8:	009b      	lsls	r3, r3, #2
   13aca:	440b      	add	r3, r1
   13acc:	3330      	adds	r3, #48	; 0x30
   13ace:	2201      	movs	r2, #1
   13ad0:	711a      	strb	r2, [r3, #4]
            return true;
   13ad2:	2301      	movs	r3, #1
   13ad4:	e006      	b.n	13ae4 <anccActionListPush+0x17c>
            anccCb.anccList[i].category_count = pElement->category_count;
            return true;
        }
    }

    for ( i = 0; i < ANCC_LIST_ELEMENTS; i++ )
   13ad6:	89fb      	ldrh	r3, [r7, #14]
   13ad8:	3301      	adds	r3, #1
   13ada:	81fb      	strh	r3, [r7, #14]
   13adc:	89fb      	ldrh	r3, [r7, #14]
   13ade:	2b3f      	cmp	r3, #63	; 0x3f
   13ae0:	d9a7      	bls.n	13a32 <anccActionListPush+0xca>
            anccCb.anccList[i].category_count = pElement->category_count;
            anccCb.anccList[i].noti_valid = true;
            return true;
        }
    }
    return false;   //no empty slot left
   13ae2:	2300      	movs	r3, #0
}
   13ae4:	4618      	mov	r0, r3
   13ae6:	3714      	adds	r7, #20
   13ae8:	46bd      	mov	sp, r7
   13aea:	f85d 7b04 	ldr.w	r7, [sp], #4
   13aee:	4770      	bx	lr
   13af0:	100091c0 	.word	0x100091c0

00013af4 <anccActionListPop>:
 *  \return TRUE if element is popped out and removed from the list.
 *          FALSE if list is already empty.
 */
/*************************************************************************************************/
static bool_t anccActionListPop(void)
{
   13af4:	b480      	push	{r7}
   13af6:	b083      	sub	sp, #12
   13af8:	af00      	add	r7, sp, #0
    uint16_t i;
    for ( i = 0; i < ANCC_LIST_ELEMENTS; i++ )
   13afa:	2300      	movs	r3, #0
   13afc:	80fb      	strh	r3, [r7, #6]
   13afe:	e024      	b.n	13b4a <anccActionListPop+0x56>
    {
        if ( anccCb.anccList[ANCC_LIST_ELEMENTS - i - 1].noti_valid == true )
   13b00:	88fb      	ldrh	r3, [r7, #6]
   13b02:	f1c3 023f 	rsb	r2, r3, #63	; 0x3f
   13b06:	4916      	ldr	r1, [pc, #88]	; (13b60 <anccActionListPop+0x6c>)
   13b08:	4613      	mov	r3, r2
   13b0a:	005b      	lsls	r3, r3, #1
   13b0c:	4413      	add	r3, r2
   13b0e:	009b      	lsls	r3, r3, #2
   13b10:	440b      	add	r3, r1
   13b12:	3330      	adds	r3, #48	; 0x30
   13b14:	791b      	ldrb	r3, [r3, #4]
   13b16:	2b01      	cmp	r3, #1
   13b18:	d114      	bne.n	13b44 <anccActionListPop+0x50>
        {
            // found a valid element in the list
            anccCb.anccList[ANCC_LIST_ELEMENTS - i - 1].noti_valid = false;
   13b1a:	88fb      	ldrh	r3, [r7, #6]
   13b1c:	f1c3 023f 	rsb	r2, r3, #63	; 0x3f
   13b20:	490f      	ldr	r1, [pc, #60]	; (13b60 <anccActionListPop+0x6c>)
   13b22:	4613      	mov	r3, r2
   13b24:	005b      	lsls	r3, r3, #1
   13b26:	4413      	add	r3, r2
   13b28:	009b      	lsls	r3, r3, #2
   13b2a:	440b      	add	r3, r1
   13b2c:	3330      	adds	r3, #48	; 0x30
   13b2e:	2200      	movs	r2, #0
   13b30:	711a      	strb	r2, [r3, #4]
            anccCb.active.handle = ANCC_LIST_ELEMENTS - i - 1;
   13b32:	88fb      	ldrh	r3, [r7, #6]
   13b34:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
   13b38:	b29a      	uxth	r2, r3
   13b3a:	4b09      	ldr	r3, [pc, #36]	; (13b60 <anccActionListPop+0x6c>)
   13b3c:	f8a3 232c 	strh.w	r2, [r3, #812]	; 0x32c
            return true;
   13b40:	2301      	movs	r3, #1
   13b42:	e006      	b.n	13b52 <anccActionListPop+0x5e>
 */
/*************************************************************************************************/
static bool_t anccActionListPop(void)
{
    uint16_t i;
    for ( i = 0; i < ANCC_LIST_ELEMENTS; i++ )
   13b44:	88fb      	ldrh	r3, [r7, #6]
   13b46:	3301      	adds	r3, #1
   13b48:	80fb      	strh	r3, [r7, #6]
   13b4a:	88fb      	ldrh	r3, [r7, #6]
   13b4c:	2b3f      	cmp	r3, #63	; 0x3f
   13b4e:	d9d7      	bls.n	13b00 <anccActionListPop+0xc>
            anccCb.anccList[ANCC_LIST_ELEMENTS - i - 1].noti_valid = false;
            anccCb.active.handle = ANCC_LIST_ELEMENTS - i - 1;
            return true;
        }
    }
    return false;   //no element left in the list
   13b50:	2300      	movs	r3, #0
}
   13b52:	4618      	mov	r0, r3
   13b54:	370c      	adds	r7, #12
   13b56:	46bd      	mov	sp, r7
   13b58:	f85d 7b04 	ldr.w	r7, [sp], #4
   13b5c:	4770      	bx	lr
   13b5e:	bf00      	nop
   13b60:	100091c0 	.word	0x100091c0

00013b64 <AnccActionStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AnccActionStart(uint8_t timerEvt)
{
   13b64:	b580      	push	{r7, lr}
   13b66:	b082      	sub	sp, #8
   13b68:	af00      	add	r7, sp, #0
   13b6a:	4603      	mov	r3, r0
   13b6c:	71fb      	strb	r3, [r7, #7]
    /* if this is first connection */
    if (anccNoConnActive() == FALSE)
   13b6e:	f7ff feeb 	bl	13948 <anccNoConnActive>
   13b72:	4603      	mov	r3, r0
   13b74:	2b00      	cmp	r3, #0
   13b76:	d10b      	bne.n	13b90 <AnccActionStart+0x2c>
    {
        /* initialize control block */
        anccCb.actionTimer.msg.event = timerEvt;
   13b78:	4a07      	ldr	r2, [pc, #28]	; (13b98 <AnccActionStart+0x34>)
   13b7a:	79fb      	ldrb	r3, [r7, #7]
   13b7c:	7613      	strb	r3, [r2, #24]

        /* (re-)start timer */
        WsfTimerStop(&anccCb.actionTimer);
   13b7e:	4807      	ldr	r0, [pc, #28]	; (13b9c <AnccActionStart+0x38>)
   13b80:	f005 fcb2 	bl	194e8 <WsfTimerStop>
        WsfTimerStartMs(&anccCb.actionTimer, anccCb.cfg.period);
   13b84:	4b04      	ldr	r3, [pc, #16]	; (13b98 <AnccActionStart+0x34>)
   13b86:	689b      	ldr	r3, [r3, #8]
   13b88:	4804      	ldr	r0, [pc, #16]	; (13b9c <AnccActionStart+0x38>)
   13b8a:	4619      	mov	r1, r3
   13b8c:	f005 fc98 	bl	194c0 <WsfTimerStartMs>
    }
}
   13b90:	3708      	adds	r7, #8
   13b92:	46bd      	mov	sp, r7
   13b94:	bd80      	pop	{r7, pc}
   13b96:	bf00      	nop
   13b98:	100091c0 	.word	0x100091c0
   13b9c:	100091cc 	.word	0x100091cc

00013ba0 <AnccActionStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AnccActionStop(void)
{
   13ba0:	b580      	push	{r7, lr}
   13ba2:	af00      	add	r7, sp, #0
    /* stop timer */
    WsfTimerStop(&anccCb.actionTimer);
   13ba4:	4801      	ldr	r0, [pc, #4]	; (13bac <AnccActionStop+0xc>)
   13ba6:	f005 fc9f 	bl	194e8 <WsfTimerStop>
}
   13baa:	bd80      	pop	{r7, pc}
   13bac:	100091cc 	.word	0x100091cc

00013bb0 <AnccGetNotificationAttribute>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AnccGetNotificationAttribute(uint16_t *pHdlList, uint32_t notiUid)
{
   13bb0:	b580      	push	{r7, lr}
   13bb2:	b08a      	sub	sp, #40	; 0x28
   13bb4:	af00      	add	r7, sp, #0
   13bb6:	6078      	str	r0, [r7, #4]
   13bb8:	6039      	str	r1, [r7, #0]
    // An example to get notification attributes
    uint16_t max_len = 256;
   13bba:	f44f 7380 	mov.w	r3, #256	; 0x100
   13bbe:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint8_t buf[19];   // retrieve the complete attribute list
    if (pHdlList[ANCC_CONTROL_POINT_HDL_IDX] != ATT_HANDLE_NONE)
   13bc0:	687b      	ldr	r3, [r7, #4]
   13bc2:	3304      	adds	r3, #4
   13bc4:	881b      	ldrh	r3, [r3, #0]
   13bc6:	2b00      	cmp	r3, #0
   13bc8:	d054      	beq.n	13c74 <AnccGetNotificationAttribute+0xc4>
    {
        buf[0] = BLE_ANCS_COMMAND_ID_GET_NOTIF_ATTRIBUTES;  // put command
   13bca:	2300      	movs	r3, #0
   13bcc:	733b      	strb	r3, [r7, #12]
        uint8_t * p = &buf[1];
   13bce:	f107 030c 	add.w	r3, r7, #12
   13bd2:	3301      	adds	r3, #1
   13bd4:	623b      	str	r3, [r7, #32]
        UINT32_TO_BSTREAM(p, notiUid);    // encode notification uid
   13bd6:	6a3b      	ldr	r3, [r7, #32]
   13bd8:	1c5a      	adds	r2, r3, #1
   13bda:	623a      	str	r2, [r7, #32]
   13bdc:	683a      	ldr	r2, [r7, #0]
   13bde:	b2d2      	uxtb	r2, r2
   13be0:	701a      	strb	r2, [r3, #0]
   13be2:	6a3b      	ldr	r3, [r7, #32]
   13be4:	1c5a      	adds	r2, r3, #1
   13be6:	623a      	str	r2, [r7, #32]
   13be8:	683a      	ldr	r2, [r7, #0]
   13bea:	0a12      	lsrs	r2, r2, #8
   13bec:	b2d2      	uxtb	r2, r2
   13bee:	701a      	strb	r2, [r3, #0]
   13bf0:	6a3b      	ldr	r3, [r7, #32]
   13bf2:	1c5a      	adds	r2, r3, #1
   13bf4:	623a      	str	r2, [r7, #32]
   13bf6:	683a      	ldr	r2, [r7, #0]
   13bf8:	0c12      	lsrs	r2, r2, #16
   13bfa:	b2d2      	uxtb	r2, r2
   13bfc:	701a      	strb	r2, [r3, #0]
   13bfe:	6a3b      	ldr	r3, [r7, #32]
   13c00:	1c5a      	adds	r2, r3, #1
   13c02:	623a      	str	r2, [r7, #32]
   13c04:	683a      	ldr	r2, [r7, #0]
   13c06:	0e12      	lsrs	r2, r2, #24
   13c08:	b2d2      	uxtb	r2, r2
   13c0a:	701a      	strb	r2, [r3, #0]

        // encode attribute IDs
        buf[5] = BLE_ANCS_NOTIF_ATTR_ID_APP_IDENTIFIER;
   13c0c:	2300      	movs	r3, #0
   13c0e:	747b      	strb	r3, [r7, #17]
        buf[6] = BLE_ANCS_NOTIF_ATTR_ID_TITLE;
   13c10:	2301      	movs	r3, #1
   13c12:	74bb      	strb	r3, [r7, #18]
        // 2 byte length
        buf[7] = max_len;
   13c14:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   13c16:	b2db      	uxtb	r3, r3
   13c18:	74fb      	strb	r3, [r7, #19]
        buf[8] = max_len >> 8;
   13c1a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   13c1c:	0a1b      	lsrs	r3, r3, #8
   13c1e:	b29b      	uxth	r3, r3
   13c20:	b2db      	uxtb	r3, r3
   13c22:	753b      	strb	r3, [r7, #20]
        buf[9] = BLE_ANCS_NOTIF_ATTR_ID_SUBTITLE;
   13c24:	2302      	movs	r3, #2
   13c26:	757b      	strb	r3, [r7, #21]
        buf[10] = max_len;
   13c28:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   13c2a:	b2db      	uxtb	r3, r3
   13c2c:	75bb      	strb	r3, [r7, #22]
        buf[11] = max_len >> 8;
   13c2e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   13c30:	0a1b      	lsrs	r3, r3, #8
   13c32:	b29b      	uxth	r3, r3
   13c34:	b2db      	uxtb	r3, r3
   13c36:	75fb      	strb	r3, [r7, #23]
        buf[12] = BLE_ANCS_NOTIF_ATTR_ID_MESSAGE;
   13c38:	2303      	movs	r3, #3
   13c3a:	763b      	strb	r3, [r7, #24]
        buf[13] = max_len;
   13c3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   13c3e:	b2db      	uxtb	r3, r3
   13c40:	767b      	strb	r3, [r7, #25]
        buf[14] = max_len >> 8;
   13c42:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   13c44:	0a1b      	lsrs	r3, r3, #8
   13c46:	b29b      	uxth	r3, r3
   13c48:	b2db      	uxtb	r3, r3
   13c4a:	76bb      	strb	r3, [r7, #26]
        buf[15] = BLE_ANCS_NOTIF_ATTR_ID_MESSAGE_SIZE;
   13c4c:	2304      	movs	r3, #4
   13c4e:	76fb      	strb	r3, [r7, #27]
        buf[16] = BLE_ANCS_NOTIF_ATTR_ID_DATE;
   13c50:	2305      	movs	r3, #5
   13c52:	773b      	strb	r3, [r7, #28]
        buf[17] = BLE_ANCS_NOTIF_ATTR_ID_POSITIVE_ACTION_LABEL;
   13c54:	2306      	movs	r3, #6
   13c56:	777b      	strb	r3, [r7, #29]
        buf[18] = BLE_ANCS_NOTIF_ATTR_ID_NEGATIVE_ACTION_LABEL;
   13c58:	2307      	movs	r3, #7
   13c5a:	77bb      	strb	r3, [r7, #30]
        AttcWriteReq(anccCb.connId, pHdlList[ANCC_CONTROL_POINT_HDL_IDX], sizeof(buf), buf);
   13c5c:	4b07      	ldr	r3, [pc, #28]	; (13c7c <AnccGetNotificationAttribute+0xcc>)
   13c5e:	7819      	ldrb	r1, [r3, #0]
   13c60:	687b      	ldr	r3, [r7, #4]
   13c62:	3304      	adds	r3, #4
   13c64:	881a      	ldrh	r2, [r3, #0]
   13c66:	f107 030c 	add.w	r3, r7, #12
   13c6a:	4608      	mov	r0, r1
   13c6c:	4611      	mov	r1, r2
   13c6e:	2213      	movs	r2, #19
   13c70:	f7f9 f9e2 	bl	d038 <AttcWriteReq>
    }
}
   13c74:	3728      	adds	r7, #40	; 0x28
   13c76:	46bd      	mov	sp, r7
   13c78:	bd80      	pop	{r7, pc}
   13c7a:	bf00      	nop
   13c7c:	100091c0 	.word	0x100091c0

00013c80 <AncsPerformNotiAction>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AncsPerformNotiAction(uint16_t *pHdlList, uint32_t notiUid, ancc_notif_action_id_values_t actionId)
{
   13c80:	b580      	push	{r7, lr}
   13c82:	b088      	sub	sp, #32
   13c84:	af00      	add	r7, sp, #0
   13c86:	60f8      	str	r0, [r7, #12]
   13c88:	60b9      	str	r1, [r7, #8]
   13c8a:	4613      	mov	r3, r2
   13c8c:	71fb      	strb	r3, [r7, #7]
    // An example to performs notification action
    uint8_t buf[6];   //to hold the command, size of app identifier is unknown
    if (pHdlList[ANCC_CONTROL_POINT_HDL_IDX] != ATT_HANDLE_NONE)
   13c8e:	68fb      	ldr	r3, [r7, #12]
   13c90:	3304      	adds	r3, #4
   13c92:	881b      	ldrh	r3, [r3, #0]
   13c94:	2b00      	cmp	r3, #0
   13c96:	d02e      	beq.n	13cf6 <AncsPerformNotiAction+0x76>
    {
        buf[0] = BLE_ANCS_COMMAND_ID_GET_PERFORM_NOTIF_ACTION;    // put command
   13c98:	2302      	movs	r3, #2
   13c9a:	753b      	strb	r3, [r7, #20]
        uint8_t * p = &buf[1];
   13c9c:	f107 0314 	add.w	r3, r7, #20
   13ca0:	3301      	adds	r3, #1
   13ca2:	61fb      	str	r3, [r7, #28]
        UINT32_TO_BSTREAM(p, notiUid);      // encode notification uid
   13ca4:	69fb      	ldr	r3, [r7, #28]
   13ca6:	1c5a      	adds	r2, r3, #1
   13ca8:	61fa      	str	r2, [r7, #28]
   13caa:	68ba      	ldr	r2, [r7, #8]
   13cac:	b2d2      	uxtb	r2, r2
   13cae:	701a      	strb	r2, [r3, #0]
   13cb0:	69fb      	ldr	r3, [r7, #28]
   13cb2:	1c5a      	adds	r2, r3, #1
   13cb4:	61fa      	str	r2, [r7, #28]
   13cb6:	68ba      	ldr	r2, [r7, #8]
   13cb8:	0a12      	lsrs	r2, r2, #8
   13cba:	b2d2      	uxtb	r2, r2
   13cbc:	701a      	strb	r2, [r3, #0]
   13cbe:	69fb      	ldr	r3, [r7, #28]
   13cc0:	1c5a      	adds	r2, r3, #1
   13cc2:	61fa      	str	r2, [r7, #28]
   13cc4:	68ba      	ldr	r2, [r7, #8]
   13cc6:	0c12      	lsrs	r2, r2, #16
   13cc8:	b2d2      	uxtb	r2, r2
   13cca:	701a      	strb	r2, [r3, #0]
   13ccc:	69fb      	ldr	r3, [r7, #28]
   13cce:	1c5a      	adds	r2, r3, #1
   13cd0:	61fa      	str	r2, [r7, #28]
   13cd2:	68ba      	ldr	r2, [r7, #8]
   13cd4:	0e12      	lsrs	r2, r2, #24
   13cd6:	b2d2      	uxtb	r2, r2
   13cd8:	701a      	strb	r2, [r3, #0]
        buf[5] = actionId;                  //action id
   13cda:	79fb      	ldrb	r3, [r7, #7]
   13cdc:	767b      	strb	r3, [r7, #25]
        AttcWriteReq(anccCb.connId, pHdlList[ANCC_CONTROL_POINT_HDL_IDX], sizeof(buf), buf);
   13cde:	4b07      	ldr	r3, [pc, #28]	; (13cfc <AncsPerformNotiAction+0x7c>)
   13ce0:	7819      	ldrb	r1, [r3, #0]
   13ce2:	68fb      	ldr	r3, [r7, #12]
   13ce4:	3304      	adds	r3, #4
   13ce6:	881a      	ldrh	r2, [r3, #0]
   13ce8:	f107 0314 	add.w	r3, r7, #20
   13cec:	4608      	mov	r0, r1
   13cee:	4611      	mov	r1, r2
   13cf0:	2206      	movs	r2, #6
   13cf2:	f7f9 f9a1 	bl	d038 <AttcWriteReq>
    }
}
   13cf6:	3720      	adds	r7, #32
   13cf8:	46bd      	mov	sp, r7
   13cfa:	bd80      	pop	{r7, pc}
   13cfc:	100091c0 	.word	0x100091c0

00013d00 <AnccActionHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AnccActionHandler(uint8_t actionTimerEvt)
{
   13d00:	b580      	push	{r7, lr}
   13d02:	b082      	sub	sp, #8
   13d04:	af00      	add	r7, sp, #0
   13d06:	4603      	mov	r3, r0
   13d08:	71fb      	strb	r3, [r7, #7]
    // perform action
    if ( anccActionListPop() )
   13d0a:	f7ff fef3 	bl	13af4 <anccActionListPop>
   13d0e:	4603      	mov	r3, r0
   13d10:	2b00      	cmp	r3, #0
   13d12:	d015      	beq.n	13d40 <AnccActionHandler+0x40>
    {
        AnccGetNotificationAttribute(anccCb.hdlList, anccCb.anccList[anccCb.active.handle].notification_uid);
   13d14:	4b0d      	ldr	r3, [pc, #52]	; (13d4c <AnccActionHandler+0x4c>)
   13d16:	6858      	ldr	r0, [r3, #4]
   13d18:	4b0c      	ldr	r3, [pc, #48]	; (13d4c <AnccActionHandler+0x4c>)
   13d1a:	f8b3 332c 	ldrh.w	r3, [r3, #812]	; 0x32c
   13d1e:	4619      	mov	r1, r3
   13d20:	4a0a      	ldr	r2, [pc, #40]	; (13d4c <AnccActionHandler+0x4c>)
   13d22:	460b      	mov	r3, r1
   13d24:	005b      	lsls	r3, r3, #1
   13d26:	440b      	add	r3, r1
   13d28:	009b      	lsls	r3, r3, #2
   13d2a:	4413      	add	r3, r2
   13d2c:	3328      	adds	r3, #40	; 0x28
   13d2e:	689b      	ldr	r3, [r3, #8]
   13d30:	4619      	mov	r1, r3
   13d32:	f7ff ff3d 	bl	13bb0 <AnccGetNotificationAttribute>
        AnccActionStart(actionTimerEvt);
   13d36:	79fb      	ldrb	r3, [r7, #7]
   13d38:	4618      	mov	r0, r3
   13d3a:	f7ff ff13 	bl	13b64 <AnccActionStart>
   13d3e:	e001      	b.n	13d44 <AnccActionHandler+0x44>
    }
    else
    {
        //list empty
        AnccActionStop();
   13d40:	f7ff ff2e 	bl	13ba0 <AnccActionStop>
    }
}
   13d44:	3708      	adds	r7, #8
   13d46:	46bd      	mov	sp, r7
   13d48:	bd80      	pop	{r7, pc}
   13d4a:	bf00      	nop
   13d4c:	100091c0 	.word	0x100091c0

00013d50 <anccAttrHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static bool anccAttrHandler(attEvt_t * pMsg)
{
   13d50:	b580      	push	{r7, lr}
   13d52:	b086      	sub	sp, #24
   13d54:	af00      	add	r7, sp, #0
   13d56:	6078      	str	r0, [r7, #4]
    uint8_t count = 0;
   13d58:	2300      	movs	r3, #0
   13d5a:	75fb      	strb	r3, [r7, #23]
    uint16_t bytesRemaining = 0;
   13d5c:	2300      	movs	r3, #0
   13d5e:	82bb      	strh	r3, [r7, #20]

    switch(anccCb.active.attrState)
   13d60:	4baa      	ldr	r3, [pc, #680]	; (1400c <anccAttrHandler+0x2bc>)
   13d62:	f893 332e 	ldrb.w	r3, [r3, #814]	; 0x32e
   13d66:	2b01      	cmp	r3, #1
   13d68:	f000 809b 	beq.w	13ea2 <anccAttrHandler+0x152>
   13d6c:	2b02      	cmp	r3, #2
   13d6e:	f000 8153 	beq.w	14018 <anccAttrHandler+0x2c8>
   13d72:	2b00      	cmp	r3, #0
   13d74:	f040 818f 	bne.w	14096 <anccAttrHandler+0x346>
    {
        case NOTI_ATTR_NEW_NOTIFICATION:
            // new notification
            anccCb.active.commandId = pMsg->pValue[0];
   13d78:	687b      	ldr	r3, [r7, #4]
   13d7a:	685b      	ldr	r3, [r3, #4]
   13d7c:	781a      	ldrb	r2, [r3, #0]
   13d7e:	4ba3      	ldr	r3, [pc, #652]	; (1400c <anccAttrHandler+0x2bc>)
   13d80:	f883 233a 	strb.w	r2, [r3, #826]	; 0x33a
            if ( anccCb.active.commandId == BLE_ANCS_COMMAND_ID_GET_NOTIF_ATTRIBUTES )
   13d84:	4ba1      	ldr	r3, [pc, #644]	; (1400c <anccAttrHandler+0x2bc>)
   13d86:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
   13d8a:	2b00      	cmp	r3, #0
   13d8c:	d11c      	bne.n	13dc8 <anccAttrHandler+0x78>
            {
                BYTES_TO_UINT32(anccCb.active.notiUid, &(pMsg->pValue[1]));
   13d8e:	687b      	ldr	r3, [r7, #4]
   13d90:	685b      	ldr	r3, [r3, #4]
   13d92:	3301      	adds	r3, #1
   13d94:	781b      	ldrb	r3, [r3, #0]
   13d96:	461a      	mov	r2, r3
   13d98:	687b      	ldr	r3, [r7, #4]
   13d9a:	685b      	ldr	r3, [r3, #4]
   13d9c:	3302      	adds	r3, #2
   13d9e:	781b      	ldrb	r3, [r3, #0]
   13da0:	021b      	lsls	r3, r3, #8
   13da2:	441a      	add	r2, r3
   13da4:	687b      	ldr	r3, [r7, #4]
   13da6:	685b      	ldr	r3, [r3, #4]
   13da8:	3303      	adds	r3, #3
   13daa:	781b      	ldrb	r3, [r3, #0]
   13dac:	041b      	lsls	r3, r3, #16
   13dae:	441a      	add	r2, r3
   13db0:	687b      	ldr	r3, [r7, #4]
   13db2:	685b      	ldr	r3, [r3, #4]
   13db4:	3304      	adds	r3, #4
   13db6:	781b      	ldrb	r3, [r3, #0]
   13db8:	061b      	lsls	r3, r3, #24
   13dba:	4413      	add	r3, r2
   13dbc:	4a93      	ldr	r2, [pc, #588]	; (1400c <anccAttrHandler+0x2bc>)
   13dbe:	f8c2 333c 	str.w	r3, [r2, #828]	; 0x33c
                count = 4;
   13dc2:	2304      	movs	r3, #4
   13dc4:	75fb      	strb	r3, [r7, #23]
   13dc6:	e026      	b.n	13e16 <anccAttrHandler+0xc6>
            }
            else if ( anccCb.active.commandId == BLE_ANCS_COMMAND_ID_GET_APP_ATTRIBUTES )
   13dc8:	4b90      	ldr	r3, [pc, #576]	; (1400c <anccAttrHandler+0x2bc>)
   13dca:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
   13dce:	2b01      	cmp	r3, #1
   13dd0:	d11f      	bne.n	13e12 <anccAttrHandler+0xc2>
            {
                while(pMsg->pValue[count + 1] != 0) // NULL terminated string
   13dd2:	e00e      	b.n	13df2 <anccAttrHandler+0xa2>
                {
                    anccCb.active.appId[count] = pMsg->pValue[count + 1];
   13dd4:	7dfb      	ldrb	r3, [r7, #23]
   13dd6:	687a      	ldr	r2, [r7, #4]
   13dd8:	6851      	ldr	r1, [r2, #4]
   13dda:	7dfa      	ldrb	r2, [r7, #23]
   13ddc:	3201      	adds	r2, #1
   13dde:	440a      	add	r2, r1
   13de0:	7811      	ldrb	r1, [r2, #0]
   13de2:	4a8a      	ldr	r2, [pc, #552]	; (1400c <anccAttrHandler+0x2bc>)
   13de4:	4413      	add	r3, r2
   13de6:	460a      	mov	r2, r1
   13de8:	f883 2340 	strb.w	r2, [r3, #832]	; 0x340
                    count++;
   13dec:	7dfb      	ldrb	r3, [r7, #23]
   13dee:	3301      	adds	r3, #1
   13df0:	75fb      	strb	r3, [r7, #23]
                BYTES_TO_UINT32(anccCb.active.notiUid, &(pMsg->pValue[1]));
                count = 4;
            }
            else if ( anccCb.active.commandId == BLE_ANCS_COMMAND_ID_GET_APP_ATTRIBUTES )
            {
                while(pMsg->pValue[count + 1] != 0) // NULL terminated string
   13df2:	687b      	ldr	r3, [r7, #4]
   13df4:	685a      	ldr	r2, [r3, #4]
   13df6:	7dfb      	ldrb	r3, [r7, #23]
   13df8:	3301      	adds	r3, #1
   13dfa:	4413      	add	r3, r2
   13dfc:	781b      	ldrb	r3, [r3, #0]
   13dfe:	2b00      	cmp	r3, #0
   13e00:	d1e8      	bne.n	13dd4 <anccAttrHandler+0x84>
                {
                    anccCb.active.appId[count] = pMsg->pValue[count + 1];
                    count++;
                }
                anccCb.active.appId[count + 1] = 0; // NULL terminated string
   13e02:	7dfb      	ldrb	r3, [r7, #23]
   13e04:	3301      	adds	r3, #1
   13e06:	4a81      	ldr	r2, [pc, #516]	; (1400c <anccAttrHandler+0x2bc>)
   13e08:	4413      	add	r3, r2
   13e0a:	2200      	movs	r2, #0
   13e0c:	f883 2340 	strb.w	r2, [r3, #832]	; 0x340
   13e10:	e001      	b.n	13e16 <anccAttrHandler+0xc6>
            }
            else
            {
                // BLE_ANCS_COMMAND_ID_GET_PERFORM_NOTIF_ACTION
                return false;
   13e12:	2300      	movs	r3, #0
   13e14:	e140      	b.n	14098 <anccAttrHandler+0x348>
            }
            anccCb.active.parseIndex += count + 1;
   13e16:	4b7d      	ldr	r3, [pc, #500]	; (1400c <anccAttrHandler+0x2bc>)
   13e18:	f8b3 2332 	ldrh.w	r2, [r3, #818]	; 0x332
   13e1c:	7dfb      	ldrb	r3, [r7, #23]
   13e1e:	b29b      	uxth	r3, r3
   13e20:	4413      	add	r3, r2
   13e22:	b29b      	uxth	r3, r3
   13e24:	3301      	adds	r3, #1
   13e26:	b29a      	uxth	r2, r3
   13e28:	4b78      	ldr	r3, [pc, #480]	; (1400c <anccAttrHandler+0x2bc>)
   13e2a:	f8a3 2332 	strh.w	r2, [r3, #818]	; 0x332
            anccCb.active.attrState = NOTI_ATTR_NEW_ATTRIBUTE;
   13e2e:	4b77      	ldr	r3, [pc, #476]	; (1400c <anccAttrHandler+0x2bc>)
   13e30:	2201      	movs	r2, #1
   13e32:	f883 232e 	strb.w	r2, [r3, #814]	; 0x32e
            anccCb.active.attrId = 0;
   13e36:	4b75      	ldr	r3, [pc, #468]	; (1400c <anccAttrHandler+0x2bc>)
   13e38:	2200      	movs	r2, #0
   13e3a:	f883 2336 	strb.w	r2, [r3, #822]	; 0x336
            anccCb.active.attrCount = 0;
   13e3e:	4b73      	ldr	r3, [pc, #460]	; (1400c <anccAttrHandler+0x2bc>)
   13e40:	2200      	movs	r2, #0
   13e42:	f8a3 2338 	strh.w	r2, [r3, #824]	; 0x338

            if ( pMsg->valueLen > ANCC_ATTRI_BUFFER_SIZE_BYTES )
   13e46:	687b      	ldr	r3, [r7, #4]
   13e48:	891b      	ldrh	r3, [r3, #8]
   13e4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   13e4e:	d802      	bhi.n	13e56 <anccAttrHandler+0x106>
            {
                // notification size overflow
            }
            else
            {
                bytesRemaining = pMsg->valueLen;
   13e50:	687b      	ldr	r3, [r7, #4]
   13e52:	891b      	ldrh	r3, [r3, #8]
   13e54:	82bb      	strh	r3, [r7, #20]
            }
            // copy data
            memset(anccCb.active.attrDataBuf, 0, ANCC_ATTRI_BUFFER_SIZE_BYTES);
   13e56:	486e      	ldr	r0, [pc, #440]	; (14010 <anccAttrHandler+0x2c0>)
   13e58:	2100      	movs	r1, #0
   13e5a:	f44f 7200 	mov.w	r2, #512	; 0x200
   13e5e:	f00c fac5 	bl	203ec <memset>
            anccCb.active.bufIndex = 0;
   13e62:	4b6a      	ldr	r3, [pc, #424]	; (1400c <anccAttrHandler+0x2bc>)
   13e64:	2200      	movs	r2, #0
   13e66:	f8a3 2330 	strh.w	r2, [r3, #816]	; 0x330
            for (uint16_t i = 0; i < bytesRemaining; i++)
   13e6a:	2300      	movs	r3, #0
   13e6c:	827b      	strh	r3, [r7, #18]
   13e6e:	e014      	b.n	13e9a <anccAttrHandler+0x14a>
            {
                anccCb.active.attrDataBuf[anccCb.active.bufIndex++] = pMsg->pValue[i];
   13e70:	4b66      	ldr	r3, [pc, #408]	; (1400c <anccAttrHandler+0x2bc>)
   13e72:	f8b3 3330 	ldrh.w	r3, [r3, #816]	; 0x330
   13e76:	1c5a      	adds	r2, r3, #1
   13e78:	b291      	uxth	r1, r2
   13e7a:	4a64      	ldr	r2, [pc, #400]	; (1400c <anccAttrHandler+0x2bc>)
   13e7c:	f8a2 1330 	strh.w	r1, [r2, #816]	; 0x330
   13e80:	4619      	mov	r1, r3
   13e82:	687b      	ldr	r3, [r7, #4]
   13e84:	685a      	ldr	r2, [r3, #4]
   13e86:	8a7b      	ldrh	r3, [r7, #18]
   13e88:	4413      	add	r3, r2
   13e8a:	781a      	ldrb	r2, [r3, #0]
   13e8c:	4b5f      	ldr	r3, [pc, #380]	; (1400c <anccAttrHandler+0x2bc>)
   13e8e:	440b      	add	r3, r1
   13e90:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
                bytesRemaining = pMsg->valueLen;
            }
            // copy data
            memset(anccCb.active.attrDataBuf, 0, ANCC_ATTRI_BUFFER_SIZE_BYTES);
            anccCb.active.bufIndex = 0;
            for (uint16_t i = 0; i < bytesRemaining; i++)
   13e94:	8a7b      	ldrh	r3, [r7, #18]
   13e96:	3301      	adds	r3, #1
   13e98:	827b      	strh	r3, [r7, #18]
   13e9a:	8a7a      	ldrh	r2, [r7, #18]
   13e9c:	8abb      	ldrh	r3, [r7, #20]
   13e9e:	429a      	cmp	r2, r3
   13ea0:	d3e6      	bcc.n	13e70 <anccAttrHandler+0x120>
            }
        // no break here by intention
        case NOTI_ATTR_NEW_ATTRIBUTE:
            // new attribute
            // check consistency of the attribute
            if ( anccCb.active.bufIndex - anccCb.active.parseIndex < 3 ) // 1 byte attribute id + 2 bytes attribute length
   13ea2:	4b5a      	ldr	r3, [pc, #360]	; (1400c <anccAttrHandler+0x2bc>)
   13ea4:	f8b3 3330 	ldrh.w	r3, [r3, #816]	; 0x330
   13ea8:	461a      	mov	r2, r3
   13eaa:	4b58      	ldr	r3, [pc, #352]	; (1400c <anccAttrHandler+0x2bc>)
   13eac:	f8b3 3332 	ldrh.w	r3, [r3, #818]	; 0x332
   13eb0:	1ad3      	subs	r3, r2, r3
   13eb2:	2b02      	cmp	r3, #2
   13eb4:	dc05      	bgt.n	13ec2 <anccAttrHandler+0x172>
            {
                // attribute header not received completely
                anccCb.active.attrState = NOTI_ATTR_RECEIVING_ATTRIBUTE;
   13eb6:	4b55      	ldr	r3, [pc, #340]	; (1400c <anccAttrHandler+0x2bc>)
   13eb8:	2202      	movs	r2, #2
   13eba:	f883 232e 	strb.w	r2, [r3, #814]	; 0x32e
                return false;
   13ebe:	2300      	movs	r3, #0
   13ec0:	e0ea      	b.n	14098 <anccAttrHandler+0x348>
            }

            anccCb.active.attrId = anccCb.active.attrDataBuf[anccCb.active.parseIndex];
   13ec2:	4b52      	ldr	r3, [pc, #328]	; (1400c <anccAttrHandler+0x2bc>)
   13ec4:	f8b3 3332 	ldrh.w	r3, [r3, #818]	; 0x332
   13ec8:	461a      	mov	r2, r3
   13eca:	4b50      	ldr	r3, [pc, #320]	; (1400c <anccAttrHandler+0x2bc>)
   13ecc:	4413      	add	r3, r2
   13ece:	f893 2380 	ldrb.w	r2, [r3, #896]	; 0x380
   13ed2:	4b4e      	ldr	r3, [pc, #312]	; (1400c <anccAttrHandler+0x2bc>)
   13ed4:	f883 2336 	strb.w	r2, [r3, #822]	; 0x336
            BYTES_TO_UINT16(anccCb.active.attrLength, &(anccCb.active.attrDataBuf[anccCb.active.parseIndex + 1]));
   13ed8:	4b4c      	ldr	r3, [pc, #304]	; (1400c <anccAttrHandler+0x2bc>)
   13eda:	f8b3 3332 	ldrh.w	r3, [r3, #818]	; 0x332
   13ede:	3301      	adds	r3, #1
   13ee0:	4a4a      	ldr	r2, [pc, #296]	; (1400c <anccAttrHandler+0x2bc>)
   13ee2:	4413      	add	r3, r2
   13ee4:	f893 3380 	ldrb.w	r3, [r3, #896]	; 0x380
   13ee8:	b29a      	uxth	r2, r3
   13eea:	4b48      	ldr	r3, [pc, #288]	; (1400c <anccAttrHandler+0x2bc>)
   13eec:	f8b3 3332 	ldrh.w	r3, [r3, #818]	; 0x332
   13ef0:	3302      	adds	r3, #2
   13ef2:	4946      	ldr	r1, [pc, #280]	; (1400c <anccAttrHandler+0x2bc>)
   13ef4:	440b      	add	r3, r1
   13ef6:	f893 3380 	ldrb.w	r3, [r3, #896]	; 0x380
   13efa:	b29b      	uxth	r3, r3
   13efc:	021b      	lsls	r3, r3, #8
   13efe:	b29b      	uxth	r3, r3
   13f00:	4413      	add	r3, r2
   13f02:	b29a      	uxth	r2, r3
   13f04:	4b41      	ldr	r3, [pc, #260]	; (1400c <anccAttrHandler+0x2bc>)
   13f06:	f8a3 2334 	strh.w	r2, [r3, #820]	; 0x334

            if ( anccCb.active.attrLength > (anccCb.active.bufIndex - anccCb.active.parseIndex - 3) ) // 1 byte attribute id + 2 bytes attribute length
   13f0a:	4b40      	ldr	r3, [pc, #256]	; (1400c <anccAttrHandler+0x2bc>)
   13f0c:	f8b3 3334 	ldrh.w	r3, [r3, #820]	; 0x334
   13f10:	461a      	mov	r2, r3
   13f12:	4b3e      	ldr	r3, [pc, #248]	; (1400c <anccAttrHandler+0x2bc>)
   13f14:	f8b3 3330 	ldrh.w	r3, [r3, #816]	; 0x330
   13f18:	4619      	mov	r1, r3
   13f1a:	4b3c      	ldr	r3, [pc, #240]	; (1400c <anccAttrHandler+0x2bc>)
   13f1c:	f8b3 3332 	ldrh.w	r3, [r3, #818]	; 0x332
   13f20:	1acb      	subs	r3, r1, r3
   13f22:	3b03      	subs	r3, #3
   13f24:	429a      	cmp	r2, r3
   13f26:	dd05      	ble.n	13f34 <anccAttrHandler+0x1e4>
            {
                // attribute body not received completely
                anccCb.active.attrState = NOTI_ATTR_RECEIVING_ATTRIBUTE;
   13f28:	4b38      	ldr	r3, [pc, #224]	; (1400c <anccAttrHandler+0x2bc>)
   13f2a:	2202      	movs	r2, #2
   13f2c:	f883 232e 	strb.w	r2, [r3, #814]	; 0x32e
                return false;
   13f30:	2300      	movs	r3, #0
   13f32:	e0b1      	b.n	14098 <anccAttrHandler+0x348>
            }

            // parse attribute
            anccCb.active.attrCount++;
   13f34:	4b35      	ldr	r3, [pc, #212]	; (1400c <anccAttrHandler+0x2bc>)
   13f36:	f8b3 3338 	ldrh.w	r3, [r3, #824]	; 0x338
   13f3a:	3301      	adds	r3, #1
   13f3c:	b29a      	uxth	r2, r3
   13f3e:	4b33      	ldr	r3, [pc, #204]	; (1400c <anccAttrHandler+0x2bc>)
   13f40:	f8a3 2338 	strh.w	r2, [r3, #824]	; 0x338
            anccCb.active.parseIndex += 3; // 1 byte attribute id + 2 bytes attribute length
   13f44:	4b31      	ldr	r3, [pc, #196]	; (1400c <anccAttrHandler+0x2bc>)
   13f46:	f8b3 3332 	ldrh.w	r3, [r3, #818]	; 0x332
   13f4a:	3303      	adds	r3, #3
   13f4c:	b29a      	uxth	r2, r3
   13f4e:	4b2f      	ldr	r3, [pc, #188]	; (1400c <anccAttrHandler+0x2bc>)
   13f50:	f8a3 2332 	strh.w	r2, [r3, #818]	; 0x332

            if ( anccCb.active.attrId == BLE_ANCS_NOTIF_ATTR_ID_APP_IDENTIFIER )
   13f54:	4b2d      	ldr	r3, [pc, #180]	; (1400c <anccAttrHandler+0x2bc>)
   13f56:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
   13f5a:	2b00      	cmp	r3, #0
   13f5c:	d127      	bne.n	13fae <anccAttrHandler+0x25e>
            {
                uint8_t temp = 0;
   13f5e:	2300      	movs	r3, #0
   13f60:	747b      	strb	r3, [r7, #17]
                while(anccCb.active.attrDataBuf[anccCb.active.parseIndex + temp] != 0)  // NULL terminated string
   13f62:	e012      	b.n	13f8a <anccAttrHandler+0x23a>
                {
                    anccCb.active.appId[temp] = anccCb.active.attrDataBuf[anccCb.active.parseIndex + temp];
   13f64:	7c7b      	ldrb	r3, [r7, #17]
   13f66:	4a29      	ldr	r2, [pc, #164]	; (1400c <anccAttrHandler+0x2bc>)
   13f68:	f8b2 2332 	ldrh.w	r2, [r2, #818]	; 0x332
   13f6c:	4611      	mov	r1, r2
   13f6e:	7c7a      	ldrb	r2, [r7, #17]
   13f70:	440a      	add	r2, r1
   13f72:	4926      	ldr	r1, [pc, #152]	; (1400c <anccAttrHandler+0x2bc>)
   13f74:	440a      	add	r2, r1
   13f76:	f892 1380 	ldrb.w	r1, [r2, #896]	; 0x380
   13f7a:	4a24      	ldr	r2, [pc, #144]	; (1400c <anccAttrHandler+0x2bc>)
   13f7c:	4413      	add	r3, r2
   13f7e:	460a      	mov	r2, r1
   13f80:	f883 2340 	strb.w	r2, [r3, #832]	; 0x340
                    temp++;
   13f84:	7c7b      	ldrb	r3, [r7, #17]
   13f86:	3301      	adds	r3, #1
   13f88:	747b      	strb	r3, [r7, #17]
            anccCb.active.parseIndex += 3; // 1 byte attribute id + 2 bytes attribute length

            if ( anccCb.active.attrId == BLE_ANCS_NOTIF_ATTR_ID_APP_IDENTIFIER )
            {
                uint8_t temp = 0;
                while(anccCb.active.attrDataBuf[anccCb.active.parseIndex + temp] != 0)  // NULL terminated string
   13f8a:	4b20      	ldr	r3, [pc, #128]	; (1400c <anccAttrHandler+0x2bc>)
   13f8c:	f8b3 3332 	ldrh.w	r3, [r3, #818]	; 0x332
   13f90:	461a      	mov	r2, r3
   13f92:	7c7b      	ldrb	r3, [r7, #17]
   13f94:	4413      	add	r3, r2
   13f96:	4a1d      	ldr	r2, [pc, #116]	; (1400c <anccAttrHandler+0x2bc>)
   13f98:	4413      	add	r3, r2
   13f9a:	f893 3380 	ldrb.w	r3, [r3, #896]	; 0x380
   13f9e:	2b00      	cmp	r3, #0
   13fa0:	d1e0      	bne.n	13f64 <anccAttrHandler+0x214>
                {
                    anccCb.active.appId[temp] = anccCb.active.attrDataBuf[anccCb.active.parseIndex + temp];
                    temp++;
                }
                anccCb.active.appId[temp] = 0;  // NULL terminated string
   13fa2:	7c7b      	ldrb	r3, [r7, #17]
   13fa4:	4a19      	ldr	r2, [pc, #100]	; (1400c <anccAttrHandler+0x2bc>)
   13fa6:	4413      	add	r3, r2
   13fa8:	2200      	movs	r2, #0
   13faa:	f883 2340 	strb.w	r2, [r3, #832]	; 0x340

            //
            // attribute received
            // execute callback function
            //
            (*anccCb.attrCback)(&anccCb.active);
   13fae:	4b17      	ldr	r3, [pc, #92]	; (1400c <anccAttrHandler+0x2bc>)
   13fb0:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
   13fb4:	4817      	ldr	r0, [pc, #92]	; (14014 <anccAttrHandler+0x2c4>)
   13fb6:	4798      	blx	r3

            anccCb.active.parseIndex += anccCb.active.attrLength;
   13fb8:	4b14      	ldr	r3, [pc, #80]	; (1400c <anccAttrHandler+0x2bc>)
   13fba:	f8b3 2332 	ldrh.w	r2, [r3, #818]	; 0x332
   13fbe:	4b13      	ldr	r3, [pc, #76]	; (1400c <anccAttrHandler+0x2bc>)
   13fc0:	f8b3 3334 	ldrh.w	r3, [r3, #820]	; 0x334
   13fc4:	4413      	add	r3, r2
   13fc6:	b29a      	uxth	r2, r3
   13fc8:	4b10      	ldr	r3, [pc, #64]	; (1400c <anccAttrHandler+0x2bc>)
   13fca:	f8a3 2332 	strh.w	r2, [r3, #818]	; 0x332

            if ( anccCb.active.attrCount >= 8 ) //custom criteria
   13fce:	4b0f      	ldr	r3, [pc, #60]	; (1400c <anccAttrHandler+0x2bc>)
   13fd0:	f8b3 3338 	ldrh.w	r3, [r3, #824]	; 0x338
   13fd4:	2b07      	cmp	r3, #7
   13fd6:	d916      	bls.n	14006 <anccAttrHandler+0x2b6>
            {
                //notification reception done
                anccCb.active.attrState = NOTI_ATTR_NEW_NOTIFICATION;
   13fd8:	4b0c      	ldr	r3, [pc, #48]	; (1400c <anccAttrHandler+0x2bc>)
   13fda:	2200      	movs	r2, #0
   13fdc:	f883 232e 	strb.w	r2, [r3, #814]	; 0x32e
                anccCb.active.parseIndex = 0;
   13fe0:	4b0a      	ldr	r3, [pc, #40]	; (1400c <anccAttrHandler+0x2bc>)
   13fe2:	2200      	movs	r2, #0
   13fe4:	f8a3 2332 	strh.w	r2, [r3, #818]	; 0x332
                anccCb.active.bufIndex = 0;
   13fe8:	4b08      	ldr	r3, [pc, #32]	; (1400c <anccAttrHandler+0x2bc>)
   13fea:	2200      	movs	r2, #0
   13fec:	f8a3 2330 	strh.w	r2, [r3, #816]	; 0x330

                //
                // notification received
                // execute callback function
                //
                (*anccCb.notiCback)(&anccCb.active, anccCb.active.notiUid);
   13ff0:	4b06      	ldr	r3, [pc, #24]	; (1400c <anccAttrHandler+0x2bc>)
   13ff2:	f8d3 3584 	ldr.w	r3, [r3, #1412]	; 0x584
   13ff6:	4a05      	ldr	r2, [pc, #20]	; (1400c <anccAttrHandler+0x2bc>)
   13ff8:	f8d2 233c 	ldr.w	r2, [r2, #828]	; 0x33c
   13ffc:	4805      	ldr	r0, [pc, #20]	; (14014 <anccAttrHandler+0x2c4>)
   13ffe:	4611      	mov	r1, r2
   14000:	4798      	blx	r3

                return false;
   14002:	2300      	movs	r3, #0
   14004:	e048      	b.n	14098 <anccAttrHandler+0x348>
            }

            return true; // continue parsing
   14006:	2301      	movs	r3, #1
   14008:	e046      	b.n	14098 <anccAttrHandler+0x348>
   1400a:	bf00      	nop
   1400c:	100091c0 	.word	0x100091c0
   14010:	10009540 	.word	0x10009540
   14014:	100094ec 	.word	0x100094ec
        // no need to break;
        case NOTI_ATTR_RECEIVING_ATTRIBUTE:
            // notification continuing
            bytesRemaining = 0;
   14018:	2300      	movs	r3, #0
   1401a:	82bb      	strh	r3, [r7, #20]
            if ( anccCb.active.bufIndex + pMsg->valueLen > ANCC_ATTRI_BUFFER_SIZE_BYTES )
   1401c:	4b20      	ldr	r3, [pc, #128]	; (140a0 <anccAttrHandler+0x350>)
   1401e:	f8b3 3330 	ldrh.w	r3, [r3, #816]	; 0x330
   14022:	461a      	mov	r2, r3
   14024:	687b      	ldr	r3, [r7, #4]
   14026:	891b      	ldrh	r3, [r3, #8]
   14028:	4413      	add	r3, r2
   1402a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1402e:	dd0d      	ble.n	1404c <anccAttrHandler+0x2fc>
            {
                // notification size overflow
                anccCb.active.attrState = NOTI_ATTR_NEW_NOTIFICATION;
   14030:	4b1b      	ldr	r3, [pc, #108]	; (140a0 <anccAttrHandler+0x350>)
   14032:	2200      	movs	r2, #0
   14034:	f883 232e 	strb.w	r2, [r3, #814]	; 0x32e
                anccCb.active.parseIndex = 0;
   14038:	4b19      	ldr	r3, [pc, #100]	; (140a0 <anccAttrHandler+0x350>)
   1403a:	2200      	movs	r2, #0
   1403c:	f8a3 2332 	strh.w	r2, [r3, #818]	; 0x332
                anccCb.active.bufIndex = 0;
   14040:	4b17      	ldr	r3, [pc, #92]	; (140a0 <anccAttrHandler+0x350>)
   14042:	2200      	movs	r2, #0
   14044:	f8a3 2330 	strh.w	r2, [r3, #816]	; 0x330
                return false;
   14048:	2300      	movs	r3, #0
   1404a:	e025      	b.n	14098 <anccAttrHandler+0x348>
            }
            else
            {
                bytesRemaining = pMsg->valueLen;
   1404c:	687b      	ldr	r3, [r7, #4]
   1404e:	891b      	ldrh	r3, [r3, #8]
   14050:	82bb      	strh	r3, [r7, #20]
            }
            // copy data
            for (uint16_t i = 0; i < bytesRemaining; i++)
   14052:	2300      	movs	r3, #0
   14054:	81fb      	strh	r3, [r7, #14]
   14056:	e014      	b.n	14082 <anccAttrHandler+0x332>
            {
                anccCb.active.attrDataBuf[anccCb.active.bufIndex++] = pMsg->pValue[i];
   14058:	4b11      	ldr	r3, [pc, #68]	; (140a0 <anccAttrHandler+0x350>)
   1405a:	f8b3 3330 	ldrh.w	r3, [r3, #816]	; 0x330
   1405e:	1c5a      	adds	r2, r3, #1
   14060:	b291      	uxth	r1, r2
   14062:	4a0f      	ldr	r2, [pc, #60]	; (140a0 <anccAttrHandler+0x350>)
   14064:	f8a2 1330 	strh.w	r1, [r2, #816]	; 0x330
   14068:	4619      	mov	r1, r3
   1406a:	687b      	ldr	r3, [r7, #4]
   1406c:	685a      	ldr	r2, [r3, #4]
   1406e:	89fb      	ldrh	r3, [r7, #14]
   14070:	4413      	add	r3, r2
   14072:	781a      	ldrb	r2, [r3, #0]
   14074:	4b0a      	ldr	r3, [pc, #40]	; (140a0 <anccAttrHandler+0x350>)
   14076:	440b      	add	r3, r1
   14078:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
            else
            {
                bytesRemaining = pMsg->valueLen;
            }
            // copy data
            for (uint16_t i = 0; i < bytesRemaining; i++)
   1407c:	89fb      	ldrh	r3, [r7, #14]
   1407e:	3301      	adds	r3, #1
   14080:	81fb      	strh	r3, [r7, #14]
   14082:	89fa      	ldrh	r2, [r7, #14]
   14084:	8abb      	ldrh	r3, [r7, #20]
   14086:	429a      	cmp	r2, r3
   14088:	d3e6      	bcc.n	14058 <anccAttrHandler+0x308>
            {
                anccCb.active.attrDataBuf[anccCb.active.bufIndex++] = pMsg->pValue[i];
            }
            anccCb.active.attrState = NOTI_ATTR_NEW_ATTRIBUTE;
   1408a:	4b05      	ldr	r3, [pc, #20]	; (140a0 <anccAttrHandler+0x350>)
   1408c:	2201      	movs	r2, #1
   1408e:	f883 232e 	strb.w	r2, [r3, #814]	; 0x32e
            return true;
   14092:	2301      	movs	r3, #1
   14094:	e000      	b.n	14098 <anccAttrHandler+0x348>
        // no need to break;
    }
    return false;
   14096:	2300      	movs	r3, #0
}
   14098:	4618      	mov	r0, r3
   1409a:	3718      	adds	r7, #24
   1409c:	46bd      	mov	sp, r7
   1409e:	bd80      	pop	{r7, pc}
   140a0:	100091c0 	.word	0x100091c0

000140a4 <AnccNtfValueUpdate>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AnccNtfValueUpdate(uint16_t *pHdlList, attEvt_t * pMsg, uint8_t actionTimerEvt)
{
   140a4:	b580      	push	{r7, lr}
   140a6:	b088      	sub	sp, #32
   140a8:	af00      	add	r7, sp, #0
   140aa:	60f8      	str	r0, [r7, #12]
   140ac:	60b9      	str	r1, [r7, #8]
   140ae:	4613      	mov	r3, r2
   140b0:	71fb      	strb	r3, [r7, #7]
    ancc_notif_t ancs_notif;
    uint8_t *p;

    //notification received
    if (pMsg->handle == pHdlList[ANCC_NOTIFICATION_SOURCE_HDL_IDX])
   140b2:	68bb      	ldr	r3, [r7, #8]
   140b4:	895a      	ldrh	r2, [r3, #10]
   140b6:	68fb      	ldr	r3, [r7, #12]
   140b8:	881b      	ldrh	r3, [r3, #0]
   140ba:	429a      	cmp	r2, r3
   140bc:	d13f      	bne.n	1413e <AnccNtfValueUpdate+0x9a>
    {
        // process notificiation source (brief)
        p = pMsg->pValue;
   140be:	68bb      	ldr	r3, [r7, #8]
   140c0:	685b      	ldr	r3, [r3, #4]
   140c2:	61fb      	str	r3, [r7, #28]
        ancs_notif.event_id = p[0];
   140c4:	69fb      	ldr	r3, [r7, #28]
   140c6:	781b      	ldrb	r3, [r3, #0]
   140c8:	743b      	strb	r3, [r7, #16]
        ancs_notif.event_flags = p[1];
   140ca:	69fb      	ldr	r3, [r7, #28]
   140cc:	785b      	ldrb	r3, [r3, #1]
   140ce:	747b      	strb	r3, [r7, #17]
        ancs_notif.category_id = p[2];
   140d0:	69fb      	ldr	r3, [r7, #28]
   140d2:	789b      	ldrb	r3, [r3, #2]
   140d4:	74bb      	strb	r3, [r7, #18]
        ancs_notif.category_count = p[3];
   140d6:	69fb      	ldr	r3, [r7, #28]
   140d8:	78db      	ldrb	r3, [r3, #3]
   140da:	74fb      	strb	r3, [r7, #19]
        BYTES_TO_UINT32(ancs_notif.notification_uid, &p[4]);
   140dc:	69fb      	ldr	r3, [r7, #28]
   140de:	3304      	adds	r3, #4
   140e0:	781b      	ldrb	r3, [r3, #0]
   140e2:	461a      	mov	r2, r3
   140e4:	69fb      	ldr	r3, [r7, #28]
   140e6:	3305      	adds	r3, #5
   140e8:	781b      	ldrb	r3, [r3, #0]
   140ea:	021b      	lsls	r3, r3, #8
   140ec:	441a      	add	r2, r3
   140ee:	69fb      	ldr	r3, [r7, #28]
   140f0:	3306      	adds	r3, #6
   140f2:	781b      	ldrb	r3, [r3, #0]
   140f4:	041b      	lsls	r3, r3, #16
   140f6:	441a      	add	r2, r3
   140f8:	69fb      	ldr	r3, [r7, #28]
   140fa:	3307      	adds	r3, #7
   140fc:	781b      	ldrb	r3, [r3, #0]
   140fe:	061b      	lsls	r3, r3, #24
   14100:	4413      	add	r3, r2
   14102:	617b      	str	r3, [r7, #20]

        if (BLE_ANCS_EVENT_ID_NOTIFICATION_REMOVED == ancs_notif.event_id)
   14104:	7c3b      	ldrb	r3, [r7, #16]
   14106:	2b02      	cmp	r3, #2
   14108:	d10c      	bne.n	14124 <AnccNtfValueUpdate+0x80>
        {
            if (NULL != anccCb.rmvCback)
   1410a:	4b15      	ldr	r3, [pc, #84]	; (14160 <AnccNtfValueUpdate+0xbc>)
   1410c:	f8d3 3588 	ldr.w	r3, [r3, #1416]	; 0x588
   14110:	2b00      	cmp	r3, #0
   14112:	d022      	beq.n	1415a <AnccNtfValueUpdate+0xb6>
            {
                anccCb.rmvCback(&ancs_notif);
   14114:	4b12      	ldr	r3, [pc, #72]	; (14160 <AnccNtfValueUpdate+0xbc>)
   14116:	f8d3 3588 	ldr.w	r3, [r3, #1416]	; 0x588
   1411a:	f107 0210 	add.w	r2, r7, #16
   1411e:	4610      	mov	r0, r2
   14120:	4798      	blx	r3
   14122:	e01a      	b.n	1415a <AnccNtfValueUpdate+0xb6>
            }
        }
        else if ( !anccActionListPush(&ancs_notif) )
   14124:	f107 0310 	add.w	r3, r7, #16
   14128:	4618      	mov	r0, r3
   1412a:	f7ff fc1d 	bl	13968 <anccActionListPush>
   1412e:	4603      	mov	r3, r0
   14130:	2b00      	cmp	r3, #0
   14132:	d012      	beq.n	1415a <AnccNtfValueUpdate+0xb6>
        else
        {
            //
            // actions to be done with timer delays to avoid generating heavy traffic
            //
            AnccActionStart(actionTimerEvt);
   14134:	79fb      	ldrb	r3, [r7, #7]
   14136:	4618      	mov	r0, r3
   14138:	f7ff fd14 	bl	13b64 <AnccActionStart>
   1413c:	e00d      	b.n	1415a <AnccNtfValueUpdate+0xb6>
            // APP_TRACE_INFO0("added to action list");
        }
    }
    else if ( pMsg->handle == pHdlList[ANCC_DATA_SOURCE_HDL_IDX] )
   1413e:	68bb      	ldr	r3, [r7, #8]
   14140:	895a      	ldrh	r2, [r3, #10]
   14142:	68fb      	ldr	r3, [r7, #12]
   14144:	3306      	adds	r3, #6
   14146:	881b      	ldrh	r3, [r3, #0]
   14148:	429a      	cmp	r2, r3
   1414a:	d106      	bne.n	1415a <AnccNtfValueUpdate+0xb6>
    {
        // process notificiation/app attributes
        while(anccAttrHandler(pMsg));
   1414c:	bf00      	nop
   1414e:	68b8      	ldr	r0, [r7, #8]
   14150:	f7ff fdfe 	bl	13d50 <anccAttrHandler>
   14154:	4603      	mov	r3, r0
   14156:	2b00      	cmp	r3, #0
   14158:	d1f9      	bne.n	1414e <AnccNtfValueUpdate+0xaa>
    }
}
   1415a:	3720      	adds	r7, #32
   1415c:	46bd      	mov	sp, r7
   1415e:	bd80      	pop	{r7, pc}
   14160:	100091c0 	.word	0x100091c0

00014164 <AnccCbackRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AnccCbackRegister(anccAttrRecvCback_t attrCback, anccNotiCmplCback_t notiCback, anccNotiRemoveCback_t rmvCback)
{
   14164:	b480      	push	{r7}
   14166:	b085      	sub	sp, #20
   14168:	af00      	add	r7, sp, #0
   1416a:	60f8      	str	r0, [r7, #12]
   1416c:	60b9      	str	r1, [r7, #8]
   1416e:	607a      	str	r2, [r7, #4]
    anccCb.attrCback = attrCback;
   14170:	4a08      	ldr	r2, [pc, #32]	; (14194 <AnccCbackRegister+0x30>)
   14172:	68fb      	ldr	r3, [r7, #12]
   14174:	f8c2 3580 	str.w	r3, [r2, #1408]	; 0x580
    anccCb.notiCback = notiCback;
   14178:	4a06      	ldr	r2, [pc, #24]	; (14194 <AnccCbackRegister+0x30>)
   1417a:	68bb      	ldr	r3, [r7, #8]
   1417c:	f8c2 3584 	str.w	r3, [r2, #1412]	; 0x584
    anccCb.rmvCback = rmvCback;
   14180:	4a04      	ldr	r2, [pc, #16]	; (14194 <AnccCbackRegister+0x30>)
   14182:	687b      	ldr	r3, [r7, #4]
   14184:	f8c2 3588 	str.w	r3, [r2, #1416]	; 0x588
}
   14188:	3714      	adds	r7, #20
   1418a:	46bd      	mov	sp, r7
   1418c:	f85d 7b04 	ldr.w	r7, [sp], #4
   14190:	4770      	bx	lr
   14192:	bf00      	nop
   14194:	100091c0 	.word	0x100091c0

00014198 <AnccStartServiceDiscovery>:
 *  \return Return TRUE if service discovery is initiated successfully.
 *
 */
/*************************************************************************************************/
 bool_t AnccStartServiceDiscovery(void)
{
   14198:	b580      	push	{r7, lr}
   1419a:	af00      	add	r7, sp, #0
    if (anccCb.connId != DM_CONN_ID_NONE)
   1419c:	4b06      	ldr	r3, [pc, #24]	; (141b8 <AnccStartServiceDiscovery+0x20>)
   1419e:	781b      	ldrb	r3, [r3, #0]
   141a0:	2b00      	cmp	r3, #0
   141a2:	d006      	beq.n	141b2 <AnccStartServiceDiscovery+0x1a>
    {
        appDiscStart(anccCb.connId);
   141a4:	4b04      	ldr	r3, [pc, #16]	; (141b8 <AnccStartServiceDiscovery+0x20>)
   141a6:	781b      	ldrb	r3, [r3, #0]
   141a8:	4618      	mov	r0, r3
   141aa:	f006 febf 	bl	1af2c <appDiscStart>
        return TRUE;
   141ae:	2301      	movs	r3, #1
   141b0:	e000      	b.n	141b4 <AnccStartServiceDiscovery+0x1c>
    }
    return FALSE;
   141b2:	2300      	movs	r3, #0
}
   141b4:	4618      	mov	r0, r3
   141b6:	bd80      	pop	{r7, pc}
   141b8:	100091c0 	.word	0x100091c0

000141bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
   141bc:	b480      	push	{r7}
   141be:	b083      	sub	sp, #12
   141c0:	af00      	add	r7, sp, #0
   141c2:	4603      	mov	r3, r0
   141c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
   141c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
   141ca:	2b00      	cmp	r3, #0
   141cc:	db0b      	blt.n	141e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   141ce:	4908      	ldr	r1, [pc, #32]	; (141f0 <__NVIC_EnableIRQ+0x34>)
   141d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   141d4:	095b      	lsrs	r3, r3, #5
   141d6:	79fa      	ldrb	r2, [r7, #7]
   141d8:	f002 021f 	and.w	r2, r2, #31
   141dc:	2001      	movs	r0, #1
   141de:	fa00 f202 	lsl.w	r2, r0, r2
   141e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
   141e6:	370c      	adds	r7, #12
   141e8:	46bd      	mov	sp, r7
   141ea:	f85d 7b04 	ldr.w	r7, [sp], #4
   141ee:	4770      	bx	lr
   141f0:	e000e100 	.word	0xe000e100

000141f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   141f4:	b480      	push	{r7}
   141f6:	b083      	sub	sp, #12
   141f8:	af00      	add	r7, sp, #0
   141fa:	4603      	mov	r3, r0
   141fc:	6039      	str	r1, [r7, #0]
   141fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
   14200:	f997 3007 	ldrsb.w	r3, [r7, #7]
   14204:	2b00      	cmp	r3, #0
   14206:	db0a      	blt.n	1421e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14208:	490d      	ldr	r1, [pc, #52]	; (14240 <__NVIC_SetPriority+0x4c>)
   1420a:	f997 3007 	ldrsb.w	r3, [r7, #7]
   1420e:	683a      	ldr	r2, [r7, #0]
   14210:	b2d2      	uxtb	r2, r2
   14212:	0152      	lsls	r2, r2, #5
   14214:	b2d2      	uxtb	r2, r2
   14216:	440b      	add	r3, r1
   14218:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
   1421c:	e00a      	b.n	14234 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1421e:	4909      	ldr	r1, [pc, #36]	; (14244 <__NVIC_SetPriority+0x50>)
   14220:	79fb      	ldrb	r3, [r7, #7]
   14222:	f003 030f 	and.w	r3, r3, #15
   14226:	3b04      	subs	r3, #4
   14228:	683a      	ldr	r2, [r7, #0]
   1422a:	b2d2      	uxtb	r2, r2
   1422c:	0152      	lsls	r2, r2, #5
   1422e:	b2d2      	uxtb	r2, r2
   14230:	440b      	add	r3, r1
   14232:	761a      	strb	r2, [r3, #24]
  }
}
   14234:	370c      	adds	r7, #12
   14236:	46bd      	mov	sp, r7
   14238:	f85d 7b04 	ldr.w	r7, [sp], #4
   1423c:	4770      	bx	lr
   1423e:	bf00      	nop
   14240:	e000e100 	.word	0xe000e100
   14244:	e000ed00 	.word	0xe000ed00

00014248 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   14248:	b480      	push	{r7}
   1424a:	b085      	sub	sp, #20
   1424c:	af00      	add	r7, sp, #0
   1424e:	60f8      	str	r0, [r7, #12]
   14250:	60b9      	str	r1, [r7, #8]
   14252:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
   14254:	68fb      	ldr	r3, [r7, #12]
   14256:	3b04      	subs	r3, #4
   14258:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   1425a:	68fb      	ldr	r3, [r7, #12]
   1425c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   14260:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   14262:	68fb      	ldr	r3, [r7, #12]
   14264:	3b04      	subs	r3, #4
   14266:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
   14268:	68bb      	ldr	r3, [r7, #8]
   1426a:	f023 0201 	bic.w	r2, r3, #1
   1426e:	68fb      	ldr	r3, [r7, #12]
   14270:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   14272:	68fb      	ldr	r3, [r7, #12]
   14274:	3b04      	subs	r3, #4
   14276:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   14278:	4a0c      	ldr	r2, [pc, #48]	; (142ac <pxPortInitialiseStack+0x64>)
   1427a:	68fb      	ldr	r3, [r7, #12]
   1427c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   1427e:	68fb      	ldr	r3, [r7, #12]
   14280:	3b14      	subs	r3, #20
   14282:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   14284:	687a      	ldr	r2, [r7, #4]
   14286:	68fb      	ldr	r3, [r7, #12]
   14288:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
   1428a:	68fb      	ldr	r3, [r7, #12]
   1428c:	3b04      	subs	r3, #4
   1428e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
   14290:	68fb      	ldr	r3, [r7, #12]
   14292:	f06f 0202 	mvn.w	r2, #2
   14296:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
   14298:	68fb      	ldr	r3, [r7, #12]
   1429a:	3b20      	subs	r3, #32
   1429c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   1429e:	68fb      	ldr	r3, [r7, #12]
}
   142a0:	4618      	mov	r0, r3
   142a2:	3714      	adds	r7, #20
   142a4:	46bd      	mov	sp, r7
   142a6:	f85d 7b04 	ldr.w	r7, [sp], #4
   142aa:	4770      	bx	lr
   142ac:	000142b1 	.word	0x000142b1

000142b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   142b0:	b480      	push	{r7}
   142b2:	b083      	sub	sp, #12
   142b4:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   142b6:	4b08      	ldr	r3, [pc, #32]	; (142d8 <prvTaskExitError+0x28>)
   142b8:	681b      	ldr	r3, [r3, #0]
   142ba:	f1b3 3fff 	cmp.w	r3, #4294967295
   142be:	d000      	beq.n	142c2 <prvTaskExitError+0x12>
   142c0:	e7fe      	b.n	142c0 <prvTaskExitError+0x10>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
   142c2:	f04f 0380 	mov.w	r3, #128	; 0x80
   142c6:	f383 8811 	msr	BASEPRI, r3
   142ca:	f3bf 8f6f 	isb	sy
   142ce:	f3bf 8f4f 	dsb	sy
   142d2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	for( ;; );
   142d4:	e7fe      	b.n	142d4 <prvTaskExitError+0x24>
   142d6:	bf00      	nop
   142d8:	10002ba0 	.word	0x10002ba0
   142dc:	00000000 	.word	0x00000000

000142e0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
   142e0:	4b07      	ldr	r3, [pc, #28]	; (14300 <pxCurrentTCBConst2>)
   142e2:	6819      	ldr	r1, [r3, #0]
   142e4:	6808      	ldr	r0, [r1, #0]
   142e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142ea:	f380 8809 	msr	PSP, r0
   142ee:	f3bf 8f6f 	isb	sy
   142f2:	f04f 0000 	mov.w	r0, #0
   142f6:	f380 8811 	msr	BASEPRI, r0
   142fa:	4770      	bx	lr
   142fc:	f3af 8000 	nop.w

00014300 <pxCurrentTCBConst2>:
   14300:	10004fb8 	.word	0x10004fb8

00014304 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   14304:	4806      	ldr	r0, [pc, #24]	; (14320 <prvPortStartFirstTask+0x1c>)
   14306:	6800      	ldr	r0, [r0, #0]
   14308:	6800      	ldr	r0, [r0, #0]
   1430a:	f380 8808 	msr	MSP, r0
   1430e:	b662      	cpsie	i
   14310:	b661      	cpsie	f
   14312:	f3bf 8f4f 	dsb	sy
   14316:	f3bf 8f6f 	isb	sy
   1431a:	df00      	svc	0
   1431c:	bf00      	nop
   1431e:	0000      	.short	0x0000
   14320:	e000ed08 	.word	0xe000ed08

00014324 <vPortEnableVFP>:
}
/*-----------------------------------------------------------*/
/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
   14324:	f8df 000c 	ldr.w	r0, [pc, #12]	; 14334 <vPortEnableVFP+0x10>
   14328:	6801      	ldr	r1, [r0, #0]
   1432a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1432e:	6001      	str	r1, [r0, #0]
   14330:	4770      	bx	lr
   14332:	0000      	.short	0x0000
   14334:	e000ed88 	.word	0xe000ed88

00014338 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   14338:	b580      	push	{r7, lr}
   1433a:	b084      	sub	sp, #16
   1433c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
   1433e:	4b37      	ldr	r3, [pc, #220]	; (1441c <xPortStartScheduler+0xe4>)
   14340:	681b      	ldr	r3, [r3, #0]
   14342:	4a37      	ldr	r2, [pc, #220]	; (14420 <xPortStartScheduler+0xe8>)
   14344:	4293      	cmp	r3, r2
   14346:	d100      	bne.n	1434a <xPortStartScheduler+0x12>
   14348:	e7fe      	b.n	14348 <xPortStartScheduler+0x10>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
   1434a:	4b34      	ldr	r3, [pc, #208]	; (1441c <xPortStartScheduler+0xe4>)
   1434c:	681b      	ldr	r3, [r3, #0]
   1434e:	4a35      	ldr	r2, [pc, #212]	; (14424 <xPortStartScheduler+0xec>)
   14350:	4293      	cmp	r3, r2
   14352:	d100      	bne.n	14356 <xPortStartScheduler+0x1e>
   14354:	e7fe      	b.n	14354 <xPortStartScheduler+0x1c>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
   14356:	4b34      	ldr	r3, [pc, #208]	; (14428 <xPortStartScheduler+0xf0>)
   14358:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
   1435a:	68fb      	ldr	r3, [r7, #12]
   1435c:	781b      	ldrb	r3, [r3, #0]
   1435e:	b2db      	uxtb	r3, r3
   14360:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
   14362:	68fb      	ldr	r3, [r7, #12]
   14364:	22ff      	movs	r2, #255	; 0xff
   14366:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
   14368:	68fb      	ldr	r3, [r7, #12]
   1436a:	781b      	ldrb	r3, [r3, #0]
   1436c:	b2db      	uxtb	r3, r3
   1436e:	71fb      	strb	r3, [r7, #7]

		/* The kernel interrupt priority should be set to the lowest
		priority. */
		configASSERT( ucMaxPriorityValue == ( configKERNEL_INTERRUPT_PRIORITY & ucMaxPriorityValue ) );
   14370:	79fb      	ldrb	r3, [r7, #7]
   14372:	b2db      	uxtb	r3, r3
   14374:	f023 031f 	bic.w	r3, r3, #31
   14378:	b2da      	uxtb	r2, r3
   1437a:	79fb      	ldrb	r3, [r7, #7]
   1437c:	b2db      	uxtb	r3, r3
   1437e:	429a      	cmp	r2, r3
   14380:	d000      	beq.n	14384 <xPortStartScheduler+0x4c>
   14382:	e7fe      	b.n	14382 <xPortStartScheduler+0x4a>

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
   14384:	79fb      	ldrb	r3, [r7, #7]
   14386:	b2db      	uxtb	r3, r3
   14388:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   1438c:	b2da      	uxtb	r2, r3
   1438e:	4b27      	ldr	r3, [pc, #156]	; (1442c <xPortStartScheduler+0xf4>)
   14390:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
   14392:	4b27      	ldr	r3, [pc, #156]	; (14430 <xPortStartScheduler+0xf8>)
   14394:	2207      	movs	r2, #7
   14396:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   14398:	e009      	b.n	143ae <xPortStartScheduler+0x76>
		{
			ulMaxPRIGROUPValue--;
   1439a:	4b25      	ldr	r3, [pc, #148]	; (14430 <xPortStartScheduler+0xf8>)
   1439c:	681b      	ldr	r3, [r3, #0]
   1439e:	3b01      	subs	r3, #1
   143a0:	4a23      	ldr	r2, [pc, #140]	; (14430 <xPortStartScheduler+0xf8>)
   143a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
   143a4:	79fb      	ldrb	r3, [r7, #7]
   143a6:	b2db      	uxtb	r3, r3
   143a8:	005b      	lsls	r3, r3, #1
   143aa:	b2db      	uxtb	r3, r3
   143ac:	71fb      	strb	r3, [r7, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   143ae:	79fb      	ldrb	r3, [r7, #7]
   143b0:	b2db      	uxtb	r3, r3
   143b2:	b2db      	uxtb	r3, r3
   143b4:	b25b      	sxtb	r3, r3
   143b6:	2b00      	cmp	r3, #0
   143b8:	dbef      	blt.n	1439a <xPortStartScheduler+0x62>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
   143ba:	4b1d      	ldr	r3, [pc, #116]	; (14430 <xPortStartScheduler+0xf8>)
   143bc:	681b      	ldr	r3, [r3, #0]
   143be:	021b      	lsls	r3, r3, #8
   143c0:	4a1b      	ldr	r2, [pc, #108]	; (14430 <xPortStartScheduler+0xf8>)
   143c2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
   143c4:	4b1a      	ldr	r3, [pc, #104]	; (14430 <xPortStartScheduler+0xf8>)
   143c6:	681b      	ldr	r3, [r3, #0]
   143c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   143cc:	4a18      	ldr	r2, [pc, #96]	; (14430 <xPortStartScheduler+0xf8>)
   143ce:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
   143d0:	68bb      	ldr	r3, [r7, #8]
   143d2:	b2da      	uxtb	r2, r3
   143d4:	68fb      	ldr	r3, [r7, #12]
   143d6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   143d8:	4a16      	ldr	r2, [pc, #88]	; (14434 <xPortStartScheduler+0xfc>)
   143da:	4b16      	ldr	r3, [pc, #88]	; (14434 <xPortStartScheduler+0xfc>)
   143dc:	681b      	ldr	r3, [r3, #0]
   143de:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
   143e2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   143e4:	4a13      	ldr	r2, [pc, #76]	; (14434 <xPortStartScheduler+0xfc>)
   143e6:	4b13      	ldr	r3, [pc, #76]	; (14434 <xPortStartScheduler+0xfc>)
   143e8:	681b      	ldr	r3, [r3, #0]
   143ea:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
   143ee:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   143f0:	f000 f9ce 	bl	14790 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   143f4:	4b10      	ldr	r3, [pc, #64]	; (14438 <xPortStartScheduler+0x100>)
   143f6:	2200      	movs	r2, #0
   143f8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
   143fa:	f7ff ff93 	bl	14324 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
   143fe:	4a0f      	ldr	r2, [pc, #60]	; (1443c <xPortStartScheduler+0x104>)
   14400:	4b0e      	ldr	r3, [pc, #56]	; (1443c <xPortStartScheduler+0x104>)
   14402:	681b      	ldr	r3, [r3, #0]
   14404:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   14408:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   1440a:	f7ff ff7b 	bl	14304 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
   1440e:	f7ff ff4f 	bl	142b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
   14412:	2300      	movs	r3, #0
}
   14414:	4618      	mov	r0, r3
   14416:	3710      	adds	r7, #16
   14418:	46bd      	mov	sp, r7
   1441a:	bd80      	pop	{r7, pc}
   1441c:	e000ed00 	.word	0xe000ed00
   14420:	410fc271 	.word	0x410fc271
   14424:	410fc270 	.word	0x410fc270
   14428:	e000e400 	.word	0xe000e400
   1442c:	10003fcc 	.word	0x10003fcc
   14430:	10003fd0 	.word	0x10003fd0
   14434:	e000ed20 	.word	0xe000ed20
   14438:	10002ba0 	.word	0x10002ba0
   1443c:	e000ef34 	.word	0xe000ef34

00014440 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   14440:	b480      	push	{r7}
   14442:	b083      	sub	sp, #12
   14444:	af00      	add	r7, sp, #0
   14446:	f04f 0380 	mov.w	r3, #128	; 0x80
   1444a:	f383 8811 	msr	BASEPRI, r3
   1444e:	f3bf 8f6f 	isb	sy
   14452:	f3bf 8f4f 	dsb	sy
   14456:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
   14458:	4b09      	ldr	r3, [pc, #36]	; (14480 <vPortEnterCritical+0x40>)
   1445a:	681b      	ldr	r3, [r3, #0]
   1445c:	3301      	adds	r3, #1
   1445e:	4a08      	ldr	r2, [pc, #32]	; (14480 <vPortEnterCritical+0x40>)
   14460:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
   14462:	4b07      	ldr	r3, [pc, #28]	; (14480 <vPortEnterCritical+0x40>)
   14464:	681b      	ldr	r3, [r3, #0]
   14466:	2b01      	cmp	r3, #1
   14468:	d105      	bne.n	14476 <vPortEnterCritical+0x36>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
   1446a:	4b06      	ldr	r3, [pc, #24]	; (14484 <vPortEnterCritical+0x44>)
   1446c:	681b      	ldr	r3, [r3, #0]
   1446e:	b2db      	uxtb	r3, r3
   14470:	2b00      	cmp	r3, #0
   14472:	d000      	beq.n	14476 <vPortEnterCritical+0x36>
   14474:	e7fe      	b.n	14474 <vPortEnterCritical+0x34>
	}
}
   14476:	370c      	adds	r7, #12
   14478:	46bd      	mov	sp, r7
   1447a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1447e:	4770      	bx	lr
   14480:	10002ba0 	.word	0x10002ba0
   14484:	e000ed04 	.word	0xe000ed04

00014488 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   14488:	b480      	push	{r7}
   1448a:	b083      	sub	sp, #12
   1448c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   1448e:	4b0c      	ldr	r3, [pc, #48]	; (144c0 <vPortExitCritical+0x38>)
   14490:	681b      	ldr	r3, [r3, #0]
   14492:	2b00      	cmp	r3, #0
   14494:	d100      	bne.n	14498 <vPortExitCritical+0x10>
   14496:	e7fe      	b.n	14496 <vPortExitCritical+0xe>
	uxCriticalNesting--;
   14498:	4b09      	ldr	r3, [pc, #36]	; (144c0 <vPortExitCritical+0x38>)
   1449a:	681b      	ldr	r3, [r3, #0]
   1449c:	3b01      	subs	r3, #1
   1449e:	4a08      	ldr	r2, [pc, #32]	; (144c0 <vPortExitCritical+0x38>)
   144a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   144a2:	4b07      	ldr	r3, [pc, #28]	; (144c0 <vPortExitCritical+0x38>)
   144a4:	681b      	ldr	r3, [r3, #0]
   144a6:	2b00      	cmp	r3, #0
   144a8:	d104      	bne.n	144b4 <vPortExitCritical+0x2c>
   144aa:	2300      	movs	r3, #0
   144ac:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
   144ae:	687b      	ldr	r3, [r7, #4]
   144b0:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
   144b4:	370c      	adds	r7, #12
   144b6:	46bd      	mov	sp, r7
   144b8:	f85d 7b04 	ldr.w	r7, [sp], #4
   144bc:	4770      	bx	lr
   144be:	bf00      	nop
   144c0:	10002ba0 	.word	0x10002ba0
	...

000144d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   144d0:	f3ef 8009 	mrs	r0, PSP
   144d4:	f3bf 8f6f 	isb	sy
   144d8:	4b15      	ldr	r3, [pc, #84]	; (14530 <pxCurrentTCBConst>)
   144da:	681a      	ldr	r2, [r3, #0]
   144dc:	f01e 0f10 	tst.w	lr, #16
   144e0:	bf08      	it	eq
   144e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
   144e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   144ea:	6010      	str	r0, [r2, #0]
   144ec:	f84d 3d04 	str.w	r3, [sp, #-4]!
   144f0:	f04f 0080 	mov.w	r0, #128	; 0x80
   144f4:	f380 8811 	msr	BASEPRI, r0
   144f8:	f3bf 8f4f 	dsb	sy
   144fc:	f3bf 8f6f 	isb	sy
   14500:	f00a ff54 	bl	1f3ac <vTaskSwitchContext>
   14504:	f04f 0000 	mov.w	r0, #0
   14508:	f380 8811 	msr	BASEPRI, r0
   1450c:	bc08      	pop	{r3}
   1450e:	6819      	ldr	r1, [r3, #0]
   14510:	6808      	ldr	r0, [r1, #0]
   14512:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14516:	f01e 0f10 	tst.w	lr, #16
   1451a:	bf08      	it	eq
   1451c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
   14520:	f380 8809 	msr	PSP, r0
   14524:	f3bf 8f6f 	isb	sy
   14528:	4770      	bx	lr
   1452a:	bf00      	nop
   1452c:	f3af 8000 	nop.w

00014530 <pxCurrentTCBConst>:
   14530:	10004fb8 	.word	0x10004fb8

00014534 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   14534:	b580      	push	{r7, lr}
   14536:	b082      	sub	sp, #8
   14538:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
   1453a:	f04f 0380 	mov.w	r3, #128	; 0x80
   1453e:	f383 8811 	msr	BASEPRI, r3
   14542:	f3bf 8f6f 	isb	sy
   14546:	f3bf 8f4f 	dsb	sy
   1454a:	607b      	str	r3, [r7, #4]
	// Addition for support of SystemView Profiler
	traceISR_ENTER();
	// End addition
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   1454c:	f00a fe88 	bl	1f260 <xTaskIncrementTick>
   14550:	4603      	mov	r3, r0
   14552:	2b00      	cmp	r3, #0
   14554:	d003      	beq.n	1455e <SysTick_Handler+0x2a>
		  traceISR_EXIT_TO_SCHEDULER();
		  // End addition

			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   14556:	4b06      	ldr	r3, [pc, #24]	; (14570 <SysTick_Handler+0x3c>)
   14558:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1455c:	601a      	str	r2, [r3, #0]
   1455e:	2300      	movs	r3, #0
   14560:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
   14562:	683b      	ldr	r3, [r7, #0]
   14564:	f383 8811 	msr	BASEPRI, r3
		  traceISR_EXIT();
		}
		// End addition
	}
	portENABLE_INTERRUPTS();
}
   14568:	3708      	adds	r7, #8
   1456a:	46bd      	mov	sp, r7
   1456c:	bd80      	pop	{r7, pc}
   1456e:	bf00      	nop
   14570:	e000ed04 	.word	0xe000ed04

00014574 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
   14574:	b480      	push	{r7}
   14576:	b083      	sub	sp, #12
   14578:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
   1457a:	f3ef 8305 	mrs	r3, IPSR
   1457e:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
   14580:	687b      	ldr	r3, [r7, #4]
   14582:	2b0f      	cmp	r3, #15
   14584:	d90a      	bls.n	1459c <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
   14586:	4a0c      	ldr	r2, [pc, #48]	; (145b8 <vPortValidateInterruptPriority+0x44>)
   14588:	687b      	ldr	r3, [r7, #4]
   1458a:	4413      	add	r3, r2
   1458c:	781b      	ldrb	r3, [r3, #0]
   1458e:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
   14590:	4b0a      	ldr	r3, [pc, #40]	; (145bc <vPortValidateInterruptPriority+0x48>)
   14592:	781b      	ldrb	r3, [r3, #0]
   14594:	78fa      	ldrb	r2, [r7, #3]
   14596:	429a      	cmp	r2, r3
   14598:	d200      	bcs.n	1459c <vPortValidateInterruptPriority+0x28>
   1459a:	e7fe      	b.n	1459a <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
   1459c:	4b08      	ldr	r3, [pc, #32]	; (145c0 <vPortValidateInterruptPriority+0x4c>)
   1459e:	681b      	ldr	r3, [r3, #0]
   145a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
   145a4:	4b07      	ldr	r3, [pc, #28]	; (145c4 <vPortValidateInterruptPriority+0x50>)
   145a6:	681b      	ldr	r3, [r3, #0]
   145a8:	429a      	cmp	r2, r3
   145aa:	d900      	bls.n	145ae <vPortValidateInterruptPriority+0x3a>
   145ac:	e7fe      	b.n	145ac <vPortValidateInterruptPriority+0x38>
	}
   145ae:	370c      	adds	r7, #12
   145b0:	46bd      	mov	sp, r7
   145b2:	f85d 7b04 	ldr.w	r7, [sp], #4
   145b6:	4770      	bx	lr
   145b8:	e000e3f0 	.word	0xe000e3f0
   145bc:	10003fcc 	.word	0x10003fcc
   145c0:	e000ed0c 	.word	0xe000ed0c
   145c4:	10003fd0 	.word	0x10003fd0

000145c8 <vPortSuppressTicksAndSleep>:
 * resolution of the Tick timer.
 */
	static uint32_t xMaximumPossibleSuppressedTicks = 0;

void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
   145c8:	b580      	push	{r7, lr}
   145ca:	b088      	sub	sp, #32
   145cc:	af00      	add	r7, sp, #0
   145ce:	6078      	str	r0, [r7, #4]
    uint32_t New_Timer, Delta_Sleep;
	TickType_t xModifiableIdleTime;
    uint32_t elapsed_time;

	/* Make sure the SysTick reload value does not overflow the counter. */
	if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
   145d0:	4b35      	ldr	r3, [pc, #212]	; (146a8 <vPortSuppressTicksAndSleep+0xe0>)
   145d2:	681b      	ldr	r3, [r3, #0]
   145d4:	687a      	ldr	r2, [r7, #4]
   145d6:	429a      	cmp	r2, r3
   145d8:	d902      	bls.n	145e0 <vPortSuppressTicksAndSleep+0x18>
	{
		xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
   145da:	4b33      	ldr	r3, [pc, #204]	; (146a8 <vPortSuppressTicksAndSleep+0xe0>)
   145dc:	681b      	ldr	r3, [r3, #0]
   145de:	607b      	str	r3, [r7, #4]


	/* Calculate the reload value required to wait xExpectedIdleTime
	tick periods.  -1 is used because this code will execute part way
	through one of the tick periods. */
	ulReloadValue =  ulTimerCountsForOneTick * ( xExpectedIdleTime - 1 );
   145e0:	687b      	ldr	r3, [r7, #4]
   145e2:	3b01      	subs	r3, #1
   145e4:	4a31      	ldr	r2, [pc, #196]	; (146ac <vPortSuppressTicksAndSleep+0xe4>)
   145e6:	6812      	ldr	r2, [r2, #0]
   145e8:	fb02 f303 	mul.w	r3, r2, r3
   145ec:	61fb      	str	r3, [r7, #28]

	/* Enter a critical section but don't use the taskENTER_CRITICAL()
	method as that will mask interrupts that should exit sleep mode. */
	__asm volatile( "cpsid i" );
   145ee:	b672      	cpsid	i
	__asm volatile( "dsb" );
   145f0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   145f4:	f3bf 8f6f 	isb	sy
#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK
    // Adjust for the time already elapsed
    elapsed_time = am_hal_stimer_counter_get() - g_lastSTimerVal;
   145f8:	f00e fff0 	bl	235dc <am_hal_stimer_counter_get>
   145fc:	4602      	mov	r2, r0
   145fe:	4b2c      	ldr	r3, [pc, #176]	; (146b0 <vPortSuppressTicksAndSleep+0xe8>)
   14600:	681b      	ldr	r3, [r3, #0]
   14602:	1ad3      	subs	r3, r2, r3
   14604:	61bb      	str	r3, [r7, #24]


	/* If a context switch is pending or a task is waiting for the scheduler
	to be unsuspended then abandon the low power entry. */
    /* Abandon low power entry if the sleep time is too short */
	if( (eTaskConfirmSleepModeStatus() == eAbortSleep) || ((elapsed_time + ulTimerCountsForOneTick) > ulReloadValue) )
   14606:	f00b f903 	bl	1f810 <eTaskConfirmSleepModeStatus>
   1460a:	4603      	mov	r3, r0
   1460c:	2b00      	cmp	r3, #0
   1460e:	d006      	beq.n	1461e <vPortSuppressTicksAndSleep+0x56>
   14610:	4b26      	ldr	r3, [pc, #152]	; (146ac <vPortSuppressTicksAndSleep+0xe4>)
   14612:	681a      	ldr	r2, [r3, #0]
   14614:	69bb      	ldr	r3, [r7, #24]
   14616:	441a      	add	r2, r3
   14618:	69fb      	ldr	r3, [r7, #28]
   1461a:	429a      	cmp	r2, r3
   1461c:	d901      	bls.n	14622 <vPortSuppressTicksAndSleep+0x5a>
#ifndef AM_FREERTOS_USE_STIMER_FOR_TICK
        am_hal_ctimer_start(configCTIMER_NUM, AM_HAL_CTIMER_BOTH);
#endif
		/* Re-enable interrupts - see comments above the cpsid instruction()
		above. */
		__asm volatile( "cpsie i" );
   1461e:	b662      	cpsie	i
   14620:	e03f      	b.n	146a2 <vPortSuppressTicksAndSleep+0xda>
	}
	else
	{
        // Adjust for the time already elapsed
        ulReloadValue -= elapsed_time;
   14622:	69fa      	ldr	r2, [r7, #28]
   14624:	69bb      	ldr	r3, [r7, #24]
   14626:	1ad3      	subs	r3, r2, r3
   14628:	61fb      	str	r3, [r7, #28]
        // Initialize new timeout value
#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK
        am_hal_stimer_compare_delta_set(0, ulReloadValue);
   1462a:	2000      	movs	r0, #0
   1462c:	69f9      	ldr	r1, [r7, #28]
   1462e:	f00e ffdb 	bl	235e8 <am_hal_stimer_compare_delta_set>
		/* Sleep until something happens.  configPRE_SLEEP_PROCESSING() can
		set its parameter to 0 to indicate that its implementation contains
		its own wait for interrupt or wait for event instruction, and so wfi
		should not be executed again.  However, the original expected idle
		time variable must remain unmodified, so a copy is taken. */
		xModifiableIdleTime = xExpectedIdleTime;
   14632:	687b      	ldr	r3, [r7, #4]
   14634:	617b      	str	r3, [r7, #20]

		configPRE_SLEEP_PROCESSING( xModifiableIdleTime );       // Turn OFF all Periphials in this function
   14636:	6978      	ldr	r0, [r7, #20]
   14638:	f006 fbdc 	bl	1adf4 <am_freertos_sleep>
   1463c:	6178      	str	r0, [r7, #20]

		if( xModifiableIdleTime > 0 )
   1463e:	697b      	ldr	r3, [r7, #20]
   14640:	2b00      	cmp	r3, #0
   14642:	d004      	beq.n	1464e <vPortSuppressTicksAndSleep+0x86>
		{
			__asm volatile( "dsb" );
   14644:	f3bf 8f4f 	dsb	sy
			__asm volatile( "wfi" );
   14648:	bf30      	wfi
			__asm volatile( "isb" );
   1464a:	f3bf 8f6f 	isb	sy
		}

		configPOST_SLEEP_PROCESSING( xExpectedIdleTime );       // Turn ON all Periphials in this function
   1464e:	6878      	ldr	r0, [r7, #4]
   14650:	f006 fbdc 	bl	1ae0c <am_freertos_wakeup>
        // Before renable interrupts, check how many ticks the processor has been in SLEEP
        // Adjust xTickCount via vTaskStepTick( Delta_Sleep )
        // to keep xTickCount up to date, as if ticks have been running all along

#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK
        New_Timer = am_hal_stimer_counter_get();
   14654:	f00e ffc2 	bl	235dc <am_hal_stimer_counter_get>
   14658:	6138      	str	r0, [r7, #16]
        Delta_Sleep = (signed long) New_Timer - (signed long) g_lastSTimerVal;
   1465a:	693b      	ldr	r3, [r7, #16]
   1465c:	4a14      	ldr	r2, [pc, #80]	; (146b0 <vPortSuppressTicksAndSleep+0xe8>)
   1465e:	6812      	ldr	r2, [r2, #0]
   14660:	1a9b      	subs	r3, r3, r2
   14662:	60fb      	str	r3, [r7, #12]
        g_lastSTimerVal = New_Timer - Delta_Sleep%ulTimerCountsForOneTick;
   14664:	4b11      	ldr	r3, [pc, #68]	; (146ac <vPortSuppressTicksAndSleep+0xe4>)
   14666:	681a      	ldr	r2, [r3, #0]
   14668:	68fb      	ldr	r3, [r7, #12]
   1466a:	fbb3 f1f2 	udiv	r1, r3, r2
   1466e:	fb02 f201 	mul.w	r2, r2, r1
   14672:	1a9b      	subs	r3, r3, r2
   14674:	693a      	ldr	r2, [r7, #16]
   14676:	1ad3      	subs	r3, r2, r3
   14678:	4a0d      	ldr	r2, [pc, #52]	; (146b0 <vPortSuppressTicksAndSleep+0xe8>)
   1467a:	6013      	str	r3, [r2, #0]
        {
            Delta_Sleep = New_Timer; // Indicates the time elapsed since we slept
        }
#endif

        Delta_Sleep /= ulTimerCountsForOneTick;
   1467c:	4b0b      	ldr	r3, [pc, #44]	; (146ac <vPortSuppressTicksAndSleep+0xe4>)
   1467e:	681b      	ldr	r3, [r3, #0]
   14680:	68fa      	ldr	r2, [r7, #12]
   14682:	fbb2 f3f3 	udiv	r3, r2, r3
   14686:	60fb      	str	r3, [r7, #12]

        // Correct System Tick after Sleep
        vTaskStepTick( Delta_Sleep );
   14688:	68f8      	ldr	r0, [r7, #12]
   1468a:	f00a fdcd 	bl	1f228 <vTaskStepTick>

		/* Restart System Tick */
#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK

        // Clear the interrupt - to avoid extra tick counting in ISR
        am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA);
   1468e:	2001      	movs	r0, #1
   14690:	f00f f808 	bl	236a4 <am_hal_stimer_int_clear>
        am_hal_stimer_compare_delta_set(0, ulTimerCountsForOneTick);
   14694:	4b05      	ldr	r3, [pc, #20]	; (146ac <vPortSuppressTicksAndSleep+0xe4>)
   14696:	681b      	ldr	r3, [r3, #0]
   14698:	2000      	movs	r0, #0
   1469a:	4619      	mov	r1, r3
   1469c:	f00e ffa4 	bl	235e8 <am_hal_stimer_compare_delta_set>

        am_hal_ctimer_start(configCTIMER_NUM, AM_HAL_CTIMER_BOTH);
#endif
		/* Re-enable interrupts - see comments above the cpsid instruction()
		above. */
		__asm volatile( "cpsie i" );
   146a0:	b662      	cpsie	i

	}
}
   146a2:	3720      	adds	r7, #32
   146a4:	46bd      	mov	sp, r7
   146a6:	bd80      	pop	{r7, pc}
   146a8:	10003fd8 	.word	0x10003fd8
   146ac:	10003fd4 	.word	0x10003fd4
   146b0:	10003fc8 	.word	0x10003fc8

000146b4 <xPortStimerTickHandler>:
//
//
//*****************************************************************************
void
xPortStimerTickHandler(void)
{
   146b4:	b580      	push	{r7, lr}
   146b6:	b088      	sub	sp, #32
   146b8:	af00      	add	r7, sp, #0
    uint32_t remainder = 0;
   146ba:	2300      	movs	r3, #0
   146bc:	617b      	str	r3, [r7, #20]
    uint32_t curSTimer;
    uint32_t timerCounts;
    uint32_t numTicksElapsed;
    BaseType_t ctxtSwitchReqd = pdFALSE;
   146be:	2300      	movs	r3, #0
   146c0:	61bb      	str	r3, [r7, #24]

    curSTimer = am_hal_stimer_counter_get();
   146c2:	f00e ff8b 	bl	235dc <am_hal_stimer_counter_get>
   146c6:	6138      	str	r0, [r7, #16]
    //
    // Configure the STIMER->COMPARE_0
    //
    am_hal_stimer_compare_delta_set(0, ulTimerCountsForOneTick);
   146c8:	4b24      	ldr	r3, [pc, #144]	; (1475c <xPortStimerTickHandler+0xa8>)
   146ca:	681b      	ldr	r3, [r3, #0]
   146cc:	2000      	movs	r0, #0
   146ce:	4619      	mov	r1, r3
   146d0:	f00e ff8a 	bl	235e8 <am_hal_stimer_compare_delta_set>

    timerCounts = curSTimer - g_lastSTimerVal;
   146d4:	4b22      	ldr	r3, [pc, #136]	; (14760 <xPortStimerTickHandler+0xac>)
   146d6:	681b      	ldr	r3, [r3, #0]
   146d8:	693a      	ldr	r2, [r7, #16]
   146da:	1ad3      	subs	r3, r2, r3
   146dc:	60fb      	str	r3, [r7, #12]
    numTicksElapsed = timerCounts/ulTimerCountsForOneTick;
   146de:	4b1f      	ldr	r3, [pc, #124]	; (1475c <xPortStimerTickHandler+0xa8>)
   146e0:	681b      	ldr	r3, [r3, #0]
   146e2:	68fa      	ldr	r2, [r7, #12]
   146e4:	fbb2 f3f3 	udiv	r3, r2, r3
   146e8:	61fb      	str	r3, [r7, #28]
    remainder = timerCounts % ulTimerCountsForOneTick;
   146ea:	4b1c      	ldr	r3, [pc, #112]	; (1475c <xPortStimerTickHandler+0xa8>)
   146ec:	681a      	ldr	r2, [r3, #0]
   146ee:	68fb      	ldr	r3, [r7, #12]
   146f0:	fbb3 f1f2 	udiv	r1, r3, r2
   146f4:	fb02 f201 	mul.w	r2, r2, r1
   146f8:	1a9b      	subs	r3, r3, r2
   146fa:	617b      	str	r3, [r7, #20]
    g_lastSTimerVal = curSTimer - remainder;
   146fc:	693a      	ldr	r2, [r7, #16]
   146fe:	697b      	ldr	r3, [r7, #20]
   14700:	1ad3      	subs	r3, r2, r3
   14702:	4a17      	ldr	r2, [pc, #92]	; (14760 <xPortStimerTickHandler+0xac>)
   14704:	6013      	str	r3, [r2, #0]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
   14706:	f3ef 8211 	mrs	r2, BASEPRI
   1470a:	f04f 0380 	mov.w	r3, #128	; 0x80
   1470e:	f383 8811 	msr	BASEPRI, r3
   14712:	f3bf 8f6f 	isb	sy
   14716:	f3bf 8f4f 	dsb	sy
   1471a:	60ba      	str	r2, [r7, #8]
   1471c:	607b      	str	r3, [r7, #4]
        //
        // Increment RTOS tick
        // Allowing for need to increment the tick more than one... to avoid accumulation of
        // error in case of interrupt latencies
        //
        while (numTicksElapsed--)
   1471e:	e008      	b.n	14732 <xPortStimerTickHandler+0x7e>
        {
            ctxtSwitchReqd = (( xTaskIncrementTick() != pdFALSE ) ? pdTRUE : ctxtSwitchReqd);
   14720:	f00a fd9e 	bl	1f260 <xTaskIncrementTick>
   14724:	4603      	mov	r3, r0
   14726:	2b00      	cmp	r3, #0
   14728:	d101      	bne.n	1472e <xPortStimerTickHandler+0x7a>
   1472a:	69bb      	ldr	r3, [r7, #24]
   1472c:	e000      	b.n	14730 <xPortStimerTickHandler+0x7c>
   1472e:	2301      	movs	r3, #1
   14730:	61bb      	str	r3, [r7, #24]
        //
        // Increment RTOS tick
        // Allowing for need to increment the tick more than one... to avoid accumulation of
        // error in case of interrupt latencies
        //
        while (numTicksElapsed--)
   14732:	69fb      	ldr	r3, [r7, #28]
   14734:	1e5a      	subs	r2, r3, #1
   14736:	61fa      	str	r2, [r7, #28]
   14738:	2b00      	cmp	r3, #0
   1473a:	d1f1      	bne.n	14720 <xPortStimerTickHandler+0x6c>
        {
            ctxtSwitchReqd = (( xTaskIncrementTick() != pdFALSE ) ? pdTRUE : ctxtSwitchReqd);
        }
        if ( ctxtSwitchReqd != pdFALSE )
   1473c:	69bb      	ldr	r3, [r7, #24]
   1473e:	2b00      	cmp	r3, #0
   14740:	d003      	beq.n	1474a <xPortStimerTickHandler+0x96>
            //
            // A context switch is required.  Context switching is
            // performed in the PendSV interrupt. Pend the PendSV
            // interrupt.
            //
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   14742:	4b08      	ldr	r3, [pc, #32]	; (14764 <xPortStimerTickHandler+0xb0>)
   14744:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   14748:	601a      	str	r2, [r3, #0]
   1474a:	2300      	movs	r3, #0
   1474c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
   1474e:	683b      	ldr	r3, [r7, #0]
   14750:	f383 8811 	msr	BASEPRI, r3
        	traceISR_EXIT();
        }
		// End addition
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR(0);
}
   14754:	3720      	adds	r7, #32
   14756:	46bd      	mov	sp, r7
   14758:	bd80      	pop	{r7, pc}
   1475a:	bf00      	nop
   1475c:	10003fd4 	.word	0x10003fd4
   14760:	10003fc8 	.word	0x10003fc8
   14764:	e000ed04 	.word	0xe000ed04

00014768 <am_stimer_cmpr0_isr>:
// Interrupt handler for the STIMER module Compare 0.
//
//*****************************************************************************
void
am_stimer_cmpr0_isr(void)
{
   14768:	b580      	push	{r7, lr}
   1476a:	b082      	sub	sp, #8
   1476c:	af00      	add	r7, sp, #0

    //
    // Check the timer interrupt status.
    //
    uint32_t ui32Status = am_hal_stimer_int_status_get(false);
   1476e:	2000      	movs	r0, #0
   14770:	f00e ff9e 	bl	236b0 <am_hal_stimer_int_status_get>
   14774:	6078      	str	r0, [r7, #4]
    if (ui32Status & AM_HAL_STIMER_INT_COMPAREA)
   14776:	687b      	ldr	r3, [r7, #4]
   14778:	f003 0301 	and.w	r3, r3, #1
   1477c:	2b00      	cmp	r3, #0
   1477e:	d004      	beq.n	1478a <am_stimer_cmpr0_isr+0x22>
    {
        am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA);
   14780:	2001      	movs	r0, #1
   14782:	f00e ff8f 	bl	236a4 <am_hal_stimer_int_clear>

        //
        // Run handlers for the various possible timer events.
        //
        xPortStimerTickHandler();
   14786:	f7ff ff95 	bl	146b4 <xPortStimerTickHandler>
    }
}
   1478a:	3708      	adds	r7, #8
   1478c:	46bd      	mov	sp, r7
   1478e:	bd80      	pop	{r7, pc}

00014790 <vPortSetupTimerInterrupt>:

#endif // AM_FREERTOS_USE_STIMER_FOR_TICK


void vPortSetupTimerInterrupt( void )
{
   14790:	b580      	push	{r7, lr}
   14792:	b082      	sub	sp, #8
   14794:	af00      	add	r7, sp, #0
#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK
    uint32_t oldCfg;
    /* Calculate the constants required to configure the tick interrupt. */
    #if configUSE_TICKLESS_IDLE == 2
    {
        ulTimerCountsForOneTick = (configSTIMER_CLOCK_HZ /configTICK_RATE_HZ) ; //( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
   14796:	4b19      	ldr	r3, [pc, #100]	; (147fc <vPortSetupTimerInterrupt+0x6c>)
   14798:	2220      	movs	r2, #32
   1479a:	601a      	str	r2, [r3, #0]
        xMaximumPossibleSuppressedTicks = portMAX_32_BIT_NUMBER / ulTimerCountsForOneTick;
   1479c:	4b17      	ldr	r3, [pc, #92]	; (147fc <vPortSetupTimerInterrupt+0x6c>)
   1479e:	681b      	ldr	r3, [r3, #0]
   147a0:	f04f 32ff 	mov.w	r2, #4294967295
   147a4:	fbb2 f3f3 	udiv	r3, r2, r3
   147a8:	4a15      	ldr	r2, [pc, #84]	; (14800 <vPortSetupTimerInterrupt+0x70>)
   147aa:	6013      	str	r3, [r2, #0]
    }
    #endif /* configUSE_TICKLESS_IDLE */
    //
    //
    //
    am_hal_stimer_int_enable(AM_HAL_STIMER_INT_COMPAREA);
   147ac:	2001      	movs	r0, #1
   147ae:	f00e ff6f 	bl	23690 <am_hal_stimer_int_enable>
    //
    // Enable the timer interrupt in the NVIC, making sure to use the
    // appropriate priority level.
    //
#if AM_CMSIS_REGS
    NVIC_SetPriority(STIMER_CMPR0_IRQn, NVIC_configKERNEL_INTERRUPT_PRIORITY);
   147b2:	2017      	movs	r0, #23
   147b4:	2107      	movs	r1, #7
   147b6:	f7ff fd1d 	bl	141f4 <__NVIC_SetPriority>
    NVIC_EnableIRQ(STIMER_CMPR0_IRQn);
   147ba:	2017      	movs	r0, #23
   147bc:	f7ff fcfe 	bl	141bc <__NVIC_EnableIRQ>
#endif // AM_CMSIS_REGS

    //
    // Configure the STIMER
    //
    oldCfg = am_hal_stimer_config(AM_HAL_STIMER_CFG_FREEZE);
   147c0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   147c4:	f00e ff00 	bl	235c8 <am_hal_stimer_config>
   147c8:	6078      	str	r0, [r7, #4]
    g_lastSTimerVal = am_hal_stimer_counter_get();
   147ca:	f00e ff07 	bl	235dc <am_hal_stimer_counter_get>
   147ce:	4602      	mov	r2, r0
   147d0:	4b0c      	ldr	r3, [pc, #48]	; (14804 <vPortSetupTimerInterrupt+0x74>)
   147d2:	601a      	str	r2, [r3, #0]
    am_hal_stimer_compare_delta_set(0, ulTimerCountsForOneTick);
   147d4:	4b09      	ldr	r3, [pc, #36]	; (147fc <vPortSetupTimerInterrupt+0x6c>)
   147d6:	681b      	ldr	r3, [r3, #0]
   147d8:	2000      	movs	r0, #0
   147da:	4619      	mov	r1, r3
   147dc:	f00e ff04 	bl	235e8 <am_hal_stimer_compare_delta_set>
#if AM_CMSIS_REGS
    am_hal_stimer_config((oldCfg & ~(AM_HAL_STIMER_CFG_FREEZE|CTIMER_STCFG_CLKSEL_Msk)) | configSTIMER_CLOCK | AM_HAL_STIMER_CFG_COMPARE_A_ENABLE);
   147e0:	687a      	ldr	r2, [r7, #4]
   147e2:	4b09      	ldr	r3, [pc, #36]	; (14808 <vPortSetupTimerInterrupt+0x78>)
   147e4:	4013      	ands	r3, r2
   147e6:	f443 7381 	orr.w	r3, r3, #258	; 0x102
   147ea:	f043 0301 	orr.w	r3, r3, #1
   147ee:	4618      	mov	r0, r3
   147f0:	f00e feea 	bl	235c8 <am_hal_stimer_config>
    //
    am_hal_ctimer_start(configCTIMER_NUM, AM_HAL_CTIMER_BOTH);


#endif // AM_FREERTOS_USE_STIMER_FOR_TICK
}
   147f4:	3708      	adds	r7, #8
   147f6:	46bd      	mov	sp, r7
   147f8:	bd80      	pop	{r7, pc}
   147fa:	bf00      	nop
   147fc:	10003fd4 	.word	0x10003fd4
   14800:	10003fd8 	.word	0x10003fd8
   14804:	10003fc8 	.word	0x10003fc8
   14808:	7ffffef0 	.word	0x7ffffef0

0001480c <WsfAssert>:
 *  \param  pFile   Name of file originating assert.
 *  \param  line    Line number of assert statement.
 */
/*************************************************************************************************/
void WsfAssert(const char *pFile, uint16_t line)
{
   1480c:	b480      	push	{r7}
   1480e:	b085      	sub	sp, #20
   14810:	af00      	add	r7, sp, #0
   14812:	6078      	str	r0, [r7, #4]
   14814:	460b      	mov	r3, r1
   14816:	807b      	strh	r3, [r7, #2]
  volatile uint8_t escape=0;
   14818:	2300      	movs	r3, #0
   1481a:	73fb      	strb	r3, [r7, #15]
  {
    /*
     *  However, you can exit with a debugger by setting variable 'escape'.
     *  Handy to see where the assert happened if you cannot view the call stack.
    */
    if (escape)
   1481c:	7bfb      	ldrb	r3, [r7, #15]
   1481e:	b2db      	uxtb	r3, r3
   14820:	2b00      	cmp	r3, #0
   14822:	d000      	beq.n	14826 <WsfAssert+0x1a>
    {
      break;
   14824:	e000      	b.n	14828 <WsfAssert+0x1c>
    }
  }
   14826:	e7f9      	b.n	1481c <WsfAssert+0x10>
}
   14828:	3714      	adds	r7, #20
   1482a:	46bd      	mov	sp, r7
   1482c:	f85d 7b04 	ldr.w	r7, [sp], #4
   14830:	4770      	bx	lr
   14832:	bf00      	nop

00014834 <WsfCsEnter>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfCsEnter(void)
{
   14834:	b480      	push	{r7}
   14836:	af00      	add	r7, sp, #0
  if (csNesting == 0)
   14838:	4b07      	ldr	r3, [pc, #28]	; (14858 <WsfCsEnter+0x24>)
   1483a:	781b      	ldrb	r3, [r3, #0]
   1483c:	2b00      	cmp	r3, #0
   1483e:	d100      	bne.n	14842 <WsfCsEnter+0xe>
  {
#ifdef __IAR_SYSTEMS_ICC__
    __disable_interrupt();
#endif
#ifdef __GNUC__
    __asm volatile ("cpsid i");
   14840:	b672      	cpsid	i
#ifdef __CC_ARM
  __disable_irq();
#endif

  }
  csNesting++;
   14842:	4b05      	ldr	r3, [pc, #20]	; (14858 <WsfCsEnter+0x24>)
   14844:	781b      	ldrb	r3, [r3, #0]
   14846:	3301      	adds	r3, #1
   14848:	b2da      	uxtb	r2, r3
   1484a:	4b03      	ldr	r3, [pc, #12]	; (14858 <WsfCsEnter+0x24>)
   1484c:	701a      	strb	r2, [r3, #0]
}
   1484e:	46bd      	mov	sp, r7
   14850:	f85d 7b04 	ldr.w	r7, [sp], #4
   14854:	4770      	bx	lr
   14856:	bf00      	nop
   14858:	10003fdc 	.word	0x10003fdc

0001485c <WsfCsExit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfCsExit(void)
{
   1485c:	b480      	push	{r7}
   1485e:	af00      	add	r7, sp, #0
  WSF_ASSERT(csNesting != 0);

  csNesting--;
   14860:	4b07      	ldr	r3, [pc, #28]	; (14880 <WsfCsExit+0x24>)
   14862:	781b      	ldrb	r3, [r3, #0]
   14864:	3b01      	subs	r3, #1
   14866:	b2da      	uxtb	r2, r3
   14868:	4b05      	ldr	r3, [pc, #20]	; (14880 <WsfCsExit+0x24>)
   1486a:	701a      	strb	r2, [r3, #0]
  if (csNesting == 0)
   1486c:	4b04      	ldr	r3, [pc, #16]	; (14880 <WsfCsExit+0x24>)
   1486e:	781b      	ldrb	r3, [r3, #0]
   14870:	2b00      	cmp	r3, #0
   14872:	d100      	bne.n	14876 <WsfCsExit+0x1a>
  {
#ifdef __IAR_SYSTEMS_ICC__
    __enable_interrupt();
#endif
#ifdef __GNUC__
    __asm volatile ("cpsie i");
   14874:	b662      	cpsie	i
#ifdef __CC_ARM
      __enable_irq();
#endif

  }
}
   14876:	46bd      	mov	sp, r7
   14878:	f85d 7b04 	ldr.w	r7, [sp], #4
   1487c:	4770      	bx	lr
   1487e:	bf00      	nop
   14880:	10003fdc 	.word	0x10003fdc

00014884 <WsfTaskLock>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTaskLock(void)
{
   14884:	b580      	push	{r7, lr}
   14886:	af00      	add	r7, sp, #0
  WsfCsEnter();
   14888:	f7ff ffd4 	bl	14834 <WsfCsEnter>
}
   1488c:	bd80      	pop	{r7, pc}
   1488e:	bf00      	nop

00014890 <WsfTaskUnlock>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTaskUnlock(void)
{
   14890:	b580      	push	{r7, lr}
   14892:	af00      	add	r7, sp, #0
  WsfCsExit();
   14894:	f7ff ffe2 	bl	1485c <WsfCsExit>
}
   14898:	bd80      	pop	{r7, pc}
   1489a:	bf00      	nop

0001489c <WsfSetOsSpecificEvent>:

void WsfSetOsSpecificEvent(void)
{
   1489c:	b580      	push	{r7, lr}
   1489e:	b084      	sub	sp, #16
   148a0:	af00      	add	r7, sp, #0
#ifdef AM_FREERTOS
  if(xRadioTaskEventObject != NULL) 
   148a2:	4b21      	ldr	r3, [pc, #132]	; (14928 <WsfSetOsSpecificEvent+0x8c>)
   148a4:	681b      	ldr	r3, [r3, #0]
   148a6:	2b00      	cmp	r3, #0
   148a8:	d03a      	beq.n	14920 <WsfSetOsSpecificEvent+0x84>
{
uint32_t ulCurrentInterrupt;
BaseType_t xReturn;

	/* Obtain the number of the currently executing interrupt. */
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
   148aa:	f3ef 8305 	mrs	r3, IPSR
   148ae:	60bb      	str	r3, [r7, #8]

	if( ulCurrentInterrupt == 0 )
   148b0:	68bb      	ldr	r3, [r7, #8]
   148b2:	2b00      	cmp	r3, #0
   148b4:	d102      	bne.n	148bc <WsfSetOsSpecificEvent+0x20>
	{
		xReturn = pdFALSE;
   148b6:	2300      	movs	r3, #0
   148b8:	607b      	str	r3, [r7, #4]
   148ba:	e001      	b.n	148c0 <WsfSetOsSpecificEvent+0x24>
	}
	else
	{
		xReturn = pdTRUE;
   148bc:	2301      	movs	r3, #1
   148be:	607b      	str	r3, [r7, #4]
	}

	return xReturn;
   148c0:	687b      	ldr	r3, [r7, #4]
  {

      BaseType_t xHigherPriorityTaskWoken, xResult;

      if(xPortIsInsideInterrupt() == pdTRUE) {
   148c2:	2b01      	cmp	r3, #1
   148c4:	d119      	bne.n	148fa <WsfSetOsSpecificEvent+0x5e>

          //
          // Send an event to the main radio task
          //
          xHigherPriorityTaskWoken = pdFALSE;
   148c6:	2300      	movs	r3, #0
   148c8:	603b      	str	r3, [r7, #0]

          xResult = xEventGroupSetBitsFromISR(xRadioTaskEventObject, 1,
   148ca:	4b17      	ldr	r3, [pc, #92]	; (14928 <WsfSetOsSpecificEvent+0x8c>)
   148cc:	681a      	ldr	r2, [r3, #0]
   148ce:	463b      	mov	r3, r7
   148d0:	4816      	ldr	r0, [pc, #88]	; (1492c <WsfSetOsSpecificEvent+0x90>)
   148d2:	4611      	mov	r1, r2
   148d4:	2201      	movs	r2, #1
   148d6:	f00b fba3 	bl	20020 <xTimerPendFunctionCallFromISR>
   148da:	60f8      	str	r0, [r7, #12]

          //
          // If the radio task is higher-priority than the context we're currently
          // running from, we should yield now and run the radio task.
          //
          if ( xResult != pdFAIL )
   148dc:	68fb      	ldr	r3, [r7, #12]
   148de:	2b00      	cmp	r3, #0
   148e0:	d01e      	beq.n	14920 <WsfSetOsSpecificEvent+0x84>
          {
              portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   148e2:	683b      	ldr	r3, [r7, #0]
   148e4:	2b00      	cmp	r3, #0
   148e6:	d01b      	beq.n	14920 <WsfSetOsSpecificEvent+0x84>
   148e8:	4b11      	ldr	r3, [pc, #68]	; (14930 <WsfSetOsSpecificEvent+0x94>)
   148ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   148ee:	601a      	str	r2, [r3, #0]
   148f0:	f3bf 8f4f 	dsb	sy
   148f4:	f3bf 8f6f 	isb	sy
   148f8:	e012      	b.n	14920 <WsfSetOsSpecificEvent+0x84>
          }    

      }
      else {

          xResult = xEventGroupSetBits(xRadioTaskEventObject, 1);
   148fa:	4b0b      	ldr	r3, [pc, #44]	; (14928 <WsfSetOsSpecificEvent+0x8c>)
   148fc:	681b      	ldr	r3, [r3, #0]
   148fe:	4618      	mov	r0, r3
   14900:	2101      	movs	r1, #1
   14902:	f009 fc0f 	bl	1e124 <xEventGroupSetBits>
   14906:	4603      	mov	r3, r0
   14908:	60fb      	str	r3, [r7, #12]
          //
          // If the radio task is higher priority than the context we're currently
          // running from, we should yield now and run the radio task.
          //
          if ( xResult != pdFAIL )
   1490a:	68fb      	ldr	r3, [r7, #12]
   1490c:	2b00      	cmp	r3, #0
   1490e:	d007      	beq.n	14920 <WsfSetOsSpecificEvent+0x84>
          {
              portYIELD();
   14910:	4b07      	ldr	r3, [pc, #28]	; (14930 <WsfSetOsSpecificEvent+0x94>)
   14912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   14916:	601a      	str	r2, [r3, #0]
   14918:	f3bf 8f4f 	dsb	sy
   1491c:	f3bf 8f6f 	isb	sy
          }
      }

  }    
#endif
}
   14920:	3710      	adds	r7, #16
   14922:	46bd      	mov	sp, r7
   14924:	bd80      	pop	{r7, pc}
   14926:	bf00      	nop
   14928:	10003fe0 	.word	0x10003fe0
   1492c:	0001e215 	.word	0x0001e215
   14930:	e000ed04 	.word	0xe000ed04

00014934 <WsfSetEvent>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfSetEvent(wsfHandlerId_t handlerId, wsfEventMask_t event)
{
   14934:	b580      	push	{r7, lr}
   14936:	b082      	sub	sp, #8
   14938:	af00      	add	r7, sp, #0
   1493a:	4603      	mov	r3, r0
   1493c:	460a      	mov	r2, r1
   1493e:	71fb      	strb	r3, [r7, #7]
   14940:	4613      	mov	r3, r2
   14942:	71bb      	strb	r3, [r7, #6]

  WSF_ASSERT(WSF_HANDLER_FROM_ID(handlerId) < WSF_MAX_HANDLERS);

  WSF_TRACE_INFO2("WsfSetEvent handlerId:%u event:%u", handlerId, event);

  WSF_CS_ENTER(cs);
   14944:	f7ff ff76 	bl	14834 <WsfCsEnter>
  wsfOs.task.handlerEventMask[WSF_HANDLER_FROM_ID(handlerId)] |= event;
   14948:	79fb      	ldrb	r3, [r7, #7]
   1494a:	f003 030f 	and.w	r3, r3, #15
   1494e:	79fa      	ldrb	r2, [r7, #7]
   14950:	f002 020f 	and.w	r2, r2, #15
   14954:	490d      	ldr	r1, [pc, #52]	; (1498c <WsfSetEvent+0x58>)
   14956:	440a      	add	r2, r1
   14958:	f892 1024 	ldrb.w	r1, [r2, #36]	; 0x24
   1495c:	79ba      	ldrb	r2, [r7, #6]
   1495e:	430a      	orrs	r2, r1
   14960:	b2d1      	uxtb	r1, r2
   14962:	4a0a      	ldr	r2, [pc, #40]	; (1498c <WsfSetEvent+0x58>)
   14964:	4413      	add	r3, r2
   14966:	460a      	mov	r2, r1
   14968:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  wsfOs.task.taskEventMask |= WSF_HANDLER_EVENT;
   1496c:	4b07      	ldr	r3, [pc, #28]	; (1498c <WsfSetEvent+0x58>)
   1496e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   14972:	f043 0304 	orr.w	r3, r3, #4
   14976:	b2da      	uxtb	r2, r3
   14978:	4b04      	ldr	r3, [pc, #16]	; (1498c <WsfSetEvent+0x58>)
   1497a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  WSF_CS_EXIT(cs);
   1497e:	f7ff ff6d 	bl	1485c <WsfCsExit>

  /* set event in OS */

  WsfSetOsSpecificEvent();
   14982:	f7ff ff8b 	bl	1489c <WsfSetOsSpecificEvent>
}
   14986:	3708      	adds	r7, #8
   14988:	46bd      	mov	sp, r7
   1498a:	bd80      	pop	{r7, pc}
   1498c:	1000974c 	.word	0x1000974c

00014990 <WsfTaskSetReady>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTaskSetReady(wsfHandlerId_t handlerId, wsfTaskEvent_t event)
{
   14990:	b580      	push	{r7, lr}
   14992:	b082      	sub	sp, #8
   14994:	af00      	add	r7, sp, #0
   14996:	4603      	mov	r3, r0
   14998:	460a      	mov	r2, r1
   1499a:	71fb      	strb	r3, [r7, #7]
   1499c:	4613      	mov	r3, r2
   1499e:	71bb      	strb	r3, [r7, #6]
  WSF_CS_INIT(cs);

  WSF_CS_ENTER(cs);
   149a0:	f7ff ff48 	bl	14834 <WsfCsEnter>
  wsfOs.task.taskEventMask |= event;
   149a4:	4b07      	ldr	r3, [pc, #28]	; (149c4 <WsfTaskSetReady+0x34>)
   149a6:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   149aa:	79bb      	ldrb	r3, [r7, #6]
   149ac:	4313      	orrs	r3, r2
   149ae:	b2da      	uxtb	r2, r3
   149b0:	4b04      	ldr	r3, [pc, #16]	; (149c4 <WsfTaskSetReady+0x34>)
   149b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  WSF_CS_EXIT(cs);
   149b6:	f7ff ff51 	bl	1485c <WsfCsExit>

  /* set event in OS */

  WsfSetOsSpecificEvent();
   149ba:	f7ff ff6f 	bl	1489c <WsfSetOsSpecificEvent>
}
   149be:	3708      	adds	r7, #8
   149c0:	46bd      	mov	sp, r7
   149c2:	bd80      	pop	{r7, pc}
   149c4:	1000974c 	.word	0x1000974c

000149c8 <WsfTaskMsgQueue>:
 *
 *  \return Task message queue.
 */
/*************************************************************************************************/
wsfQueue_t *WsfTaskMsgQueue(wsfHandlerId_t handlerId)
{
   149c8:	b480      	push	{r7}
   149ca:	b083      	sub	sp, #12
   149cc:	af00      	add	r7, sp, #0
   149ce:	4603      	mov	r3, r0
   149d0:	71fb      	strb	r3, [r7, #7]
  return &(wsfOs.task.msgQueue);
   149d2:	4b03      	ldr	r3, [pc, #12]	; (149e0 <WsfTaskMsgQueue+0x18>)
}
   149d4:	4618      	mov	r0, r3
   149d6:	370c      	adds	r7, #12
   149d8:	46bd      	mov	sp, r7
   149da:	f85d 7b04 	ldr.w	r7, [sp], #4
   149de:	4770      	bx	lr
   149e0:	1000977c 	.word	0x1000977c

000149e4 <WsfOsSetNextHandler>:
 *
 *  \return WSF handler ID for this handler.
 */
/*************************************************************************************************/
wsfHandlerId_t WsfOsSetNextHandler(wsfEventHandler_t handler)
{
   149e4:	b480      	push	{r7}
   149e6:	b085      	sub	sp, #20
   149e8:	af00      	add	r7, sp, #0
   149ea:	6078      	str	r0, [r7, #4]
  wsfHandlerId_t handlerId = wsfOs.task.numHandler++;
   149ec:	4b0a      	ldr	r3, [pc, #40]	; (14a18 <WsfOsSetNextHandler+0x34>)
   149ee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   149f2:	1c5a      	adds	r2, r3, #1
   149f4:	b2d1      	uxtb	r1, r2
   149f6:	4a08      	ldr	r2, [pc, #32]	; (14a18 <WsfOsSetNextHandler+0x34>)
   149f8:	f882 1039 	strb.w	r1, [r2, #57]	; 0x39
   149fc:	73fb      	strb	r3, [r7, #15]

  WSF_ASSERT(handlerId < WSF_MAX_HANDLERS);

  wsfOs.task.handler[handlerId] = handler;
   149fe:	7bfb      	ldrb	r3, [r7, #15]
   14a00:	4905      	ldr	r1, [pc, #20]	; (14a18 <WsfOsSetNextHandler+0x34>)
   14a02:	687a      	ldr	r2, [r7, #4]
   14a04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  return handlerId;
   14a08:	7bfb      	ldrb	r3, [r7, #15]
}
   14a0a:	4618      	mov	r0, r3
   14a0c:	3714      	adds	r7, #20
   14a0e:	46bd      	mov	sp, r7
   14a10:	f85d 7b04 	ldr.w	r7, [sp], #4
   14a14:	4770      	bx	lr
   14a16:	bf00      	nop
   14a18:	1000974c 	.word	0x1000974c

00014a1c <wsfOsReadyToSleep>:
 *
 *  \return Return TRUE if there are no pending WSF task events set, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t wsfOsReadyToSleep(void)
{
   14a1c:	b480      	push	{r7}
   14a1e:	af00      	add	r7, sp, #0
  return (wsfOs.task.taskEventMask == 0);
   14a20:	4b06      	ldr	r3, [pc, #24]	; (14a3c <wsfOsReadyToSleep+0x20>)
   14a22:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   14a26:	2b00      	cmp	r3, #0
   14a28:	bf0c      	ite	eq
   14a2a:	2301      	moveq	r3, #1
   14a2c:	2300      	movne	r3, #0
   14a2e:	b2db      	uxtb	r3, r3
}
   14a30:	4618      	mov	r0, r3
   14a32:	46bd      	mov	sp, r7
   14a34:	f85d 7b04 	ldr.w	r7, [sp], #4
   14a38:	4770      	bx	lr
   14a3a:	bf00      	nop
   14a3c:	1000974c 	.word	0x1000974c

00014a40 <wsfOsDispatcher>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void wsfOsDispatcher(void)
{
   14a40:	b580      	push	{r7, lr}
   14a42:	b086      	sub	sp, #24
   14a44:	af00      	add	r7, sp, #0
  wsfHandlerId_t    handlerId;
  uint8_t           i;

  WSF_CS_INIT(cs);

  pTask = &wsfOs.task;
   14a46:	4b3f      	ldr	r3, [pc, #252]	; (14b44 <wsfOsDispatcher+0x104>)
   14a48:	613b      	str	r3, [r7, #16]

  while (pTask->taskEventMask)
   14a4a:	e073      	b.n	14b34 <wsfOsDispatcher+0xf4>
  {
    /* get and then clear task event mask */
    WSF_CS_ENTER(cs);
   14a4c:	f7ff fef2 	bl	14834 <WsfCsEnter>
    taskEventMask = pTask->taskEventMask;
   14a50:	693b      	ldr	r3, [r7, #16]
   14a52:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   14a56:	73fb      	strb	r3, [r7, #15]
    pTask->taskEventMask = 0;
   14a58:	693b      	ldr	r3, [r7, #16]
   14a5a:	2200      	movs	r2, #0
   14a5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    WSF_CS_EXIT(cs);
   14a60:	f7ff fefc 	bl	1485c <WsfCsExit>

    if (taskEventMask & WSF_MSG_QUEUE_EVENT)
   14a64:	7bfb      	ldrb	r3, [r7, #15]
   14a66:	f003 0301 	and.w	r3, r3, #1
   14a6a:	2b00      	cmp	r3, #0
   14a6c:	d017      	beq.n	14a9e <wsfOsDispatcher+0x5e>
    {
      /* handle msg queue */
      while ((pMsg = WsfMsgDeq(&pTask->msgQueue, &handlerId)) != NULL)
   14a6e:	e00a      	b.n	14a86 <wsfOsDispatcher+0x46>
      {
        WSF_ASSERT(handlerId < WSF_MAX_HANDLERS);
        (*pTask->handler[handlerId])(0, pMsg);
   14a70:	78bb      	ldrb	r3, [r7, #2]
   14a72:	461a      	mov	r2, r3
   14a74:	693b      	ldr	r3, [r7, #16]
   14a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14a7a:	2000      	movs	r0, #0
   14a7c:	68b9      	ldr	r1, [r7, #8]
   14a7e:	4798      	blx	r3
        WsfMsgFree(pMsg);
   14a80:	68b8      	ldr	r0, [r7, #8]
   14a82:	f004 fb73 	bl	1916c <WsfMsgFree>
    WSF_CS_EXIT(cs);

    if (taskEventMask & WSF_MSG_QUEUE_EVENT)
    {
      /* handle msg queue */
      while ((pMsg = WsfMsgDeq(&pTask->msgQueue, &handlerId)) != NULL)
   14a86:	693b      	ldr	r3, [r7, #16]
   14a88:	f103 0230 	add.w	r2, r3, #48	; 0x30
   14a8c:	1cbb      	adds	r3, r7, #2
   14a8e:	4610      	mov	r0, r2
   14a90:	4619      	mov	r1, r3
   14a92:	f004 fba5 	bl	191e0 <WsfMsgDeq>
   14a96:	60b8      	str	r0, [r7, #8]
   14a98:	68bb      	ldr	r3, [r7, #8]
   14a9a:	2b00      	cmp	r3, #0
   14a9c:	d1e8      	bne.n	14a70 <wsfOsDispatcher+0x30>
        (*pTask->handler[handlerId])(0, pMsg);
        WsfMsgFree(pMsg);
      }
    }

    if (taskEventMask & WSF_TIMER_EVENT)
   14a9e:	7bfb      	ldrb	r3, [r7, #15]
   14aa0:	f003 0302 	and.w	r3, r3, #2
   14aa4:	2b00      	cmp	r3, #0
   14aa6:	d012      	beq.n	14ace <wsfOsDispatcher+0x8e>
    {
      /* service timers */
      while ((pTimer = WsfTimerServiceExpired(0)) != NULL)
   14aa8:	e00a      	b.n	14ac0 <wsfOsDispatcher+0x80>
      {
        WSF_ASSERT(pTimer->handlerId < WSF_MAX_HANDLERS);
        (*pTask->handler[pTimer->handlerId])(0, &pTimer->msg);
   14aaa:	687b      	ldr	r3, [r7, #4]
   14aac:	7a1b      	ldrb	r3, [r3, #8]
   14aae:	461a      	mov	r2, r3
   14ab0:	693b      	ldr	r3, [r7, #16]
   14ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14ab6:	687a      	ldr	r2, [r7, #4]
   14ab8:	320a      	adds	r2, #10
   14aba:	2000      	movs	r0, #0
   14abc:	4611      	mov	r1, r2
   14abe:	4798      	blx	r3
    }

    if (taskEventMask & WSF_TIMER_EVENT)
    {
      /* service timers */
      while ((pTimer = WsfTimerServiceExpired(0)) != NULL)
   14ac0:	2000      	movs	r0, #0
   14ac2:	f004 fd6b 	bl	1959c <WsfTimerServiceExpired>
   14ac6:	6078      	str	r0, [r7, #4]
   14ac8:	687b      	ldr	r3, [r7, #4]
   14aca:	2b00      	cmp	r3, #0
   14acc:	d1ed      	bne.n	14aaa <wsfOsDispatcher+0x6a>
        WSF_ASSERT(pTimer->handlerId < WSF_MAX_HANDLERS);
        (*pTask->handler[pTimer->handlerId])(0, &pTimer->msg);
      }
    }

    if (taskEventMask & WSF_HANDLER_EVENT)
   14ace:	7bfb      	ldrb	r3, [r7, #15]
   14ad0:	f003 0304 	and.w	r3, r3, #4
   14ad4:	2b00      	cmp	r3, #0
   14ad6:	d02d      	beq.n	14b34 <wsfOsDispatcher+0xf4>
    {
      /* service handlers */
      for (i = 0; i < WSF_MAX_HANDLERS; i++)
   14ad8:	2300      	movs	r3, #0
   14ada:	75fb      	strb	r3, [r7, #23]
   14adc:	e027      	b.n	14b2e <wsfOsDispatcher+0xee>
      {
        if ((pTask->handlerEventMask[i] != 0) && (pTask->handler[i] != NULL))
   14ade:	7dfb      	ldrb	r3, [r7, #23]
   14ae0:	693a      	ldr	r2, [r7, #16]
   14ae2:	4413      	add	r3, r2
   14ae4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   14ae8:	2b00      	cmp	r3, #0
   14aea:	d01d      	beq.n	14b28 <wsfOsDispatcher+0xe8>
   14aec:	7dfa      	ldrb	r2, [r7, #23]
   14aee:	693b      	ldr	r3, [r7, #16]
   14af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14af4:	2b00      	cmp	r3, #0
   14af6:	d017      	beq.n	14b28 <wsfOsDispatcher+0xe8>
        {
          WSF_CS_ENTER(cs);
   14af8:	f7ff fe9c 	bl	14834 <WsfCsEnter>
          eventMask = pTask->handlerEventMask[i];
   14afc:	7dfb      	ldrb	r3, [r7, #23]
   14afe:	693a      	ldr	r2, [r7, #16]
   14b00:	4413      	add	r3, r2
   14b02:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   14b06:	70fb      	strb	r3, [r7, #3]
          pTask->handlerEventMask[i] = 0;
   14b08:	7dfb      	ldrb	r3, [r7, #23]
   14b0a:	693a      	ldr	r2, [r7, #16]
   14b0c:	4413      	add	r3, r2
   14b0e:	2200      	movs	r2, #0
   14b10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          WSF_CS_EXIT(cs);
   14b14:	f7ff fea2 	bl	1485c <WsfCsExit>

          (*pTask->handler[i])(eventMask, NULL);
   14b18:	7dfa      	ldrb	r2, [r7, #23]
   14b1a:	693b      	ldr	r3, [r7, #16]
   14b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   14b20:	78fa      	ldrb	r2, [r7, #3]
   14b22:	4610      	mov	r0, r2
   14b24:	2100      	movs	r1, #0
   14b26:	4798      	blx	r3
    }

    if (taskEventMask & WSF_HANDLER_EVENT)
    {
      /* service handlers */
      for (i = 0; i < WSF_MAX_HANDLERS; i++)
   14b28:	7dfb      	ldrb	r3, [r7, #23]
   14b2a:	3301      	adds	r3, #1
   14b2c:	75fb      	strb	r3, [r7, #23]
   14b2e:	7dfb      	ldrb	r3, [r7, #23]
   14b30:	2b08      	cmp	r3, #8
   14b32:	d9d4      	bls.n	14ade <wsfOsDispatcher+0x9e>

  WSF_CS_INIT(cs);

  pTask = &wsfOs.task;

  while (pTask->taskEventMask)
   14b34:	693b      	ldr	r3, [r7, #16]
   14b36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   14b3a:	2b00      	cmp	r3, #0
   14b3c:	d186      	bne.n	14a4c <wsfOsDispatcher+0xc>
          (*pTask->handler[i])(eventMask, NULL);
        }
      }
    }
  }
}
   14b3e:	3718      	adds	r7, #24
   14b40:	46bd      	mov	sp, r7
   14b42:	bd80      	pop	{r7, pc}
   14b44:	1000974c 	.word	0x1000974c

00014b48 <wsfOsSetEventObject>:


void wsfOsSetEventObject(void *event_object)
{
   14b48:	b480      	push	{r7}
   14b4a:	b083      	sub	sp, #12
   14b4c:	af00      	add	r7, sp, #0
   14b4e:	6078      	str	r0, [r7, #4]
  #ifdef AM_FREERTOS
  xRadioTaskEventObject = (EventGroupHandle_t)event_object;
   14b50:	4a03      	ldr	r2, [pc, #12]	; (14b60 <wsfOsSetEventObject+0x18>)
   14b52:	687b      	ldr	r3, [r7, #4]
   14b54:	6013      	str	r3, [r2, #0]
  #endif
}
   14b56:	370c      	adds	r7, #12
   14b58:	46bd      	mov	sp, r7
   14b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
   14b5e:	4770      	bx	lr
   14b60:	10003fe0 	.word	0x10003fe0

00014b64 <WsfTrace>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTrace(const char *pStr, ...)
{
   14b64:	b40f      	push	{r0, r1, r2, r3}
   14b66:	b580      	push	{r7, lr}
   14b68:	b0c2      	sub	sp, #264	; 0x108
   14b6a:	af00      	add	r7, sp, #0
  char pTraceMsg[AM_PRINTF_BUFSIZE];
  uint32_t ui32NumChars;
  va_list           args;

  va_start(args, pStr);
   14b6c:	f507 728a 	add.w	r2, r7, #276	; 0x114
   14b70:	463b      	mov	r3, r7
   14b72:	601a      	str	r2, [r3, #0]
  am_util_stdio_vsprintf(pTraceMsg, pStr, args);
   14b74:	1d3a      	adds	r2, r7, #4
   14b76:	463b      	mov	r3, r7
   14b78:	4610      	mov	r0, r2
   14b7a:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
   14b7e:	681a      	ldr	r2, [r3, #0]
   14b80:	f008 fee4 	bl	1d94c <am_util_stdio_vsprintf>
  //vprintf(pStr, args);
  va_end(args);
  ui32NumChars = am_util_debug_printf(pTraceMsg);
   14b84:	1d3b      	adds	r3, r7, #4
   14b86:	4618      	mov	r0, r3
   14b88:	f009 f9ea 	bl	1df60 <am_util_stdio_printf>
   14b8c:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  if (!(ui32NumChars < AM_PRINTF_BUFSIZE))
   14b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
   14b94:	2bff      	cmp	r3, #255	; 0xff
   14b96:	d903      	bls.n	14ba0 <WsfTrace+0x3c>
    WsfAssert(__FILE__, (uint16_t) __LINE__);
   14b98:	4806      	ldr	r0, [pc, #24]	; (14bb4 <WsfTrace+0x50>)
   14b9a:	2183      	movs	r1, #131	; 0x83
   14b9c:	f7ff fe36 	bl	1480c <WsfAssert>
  am_util_debug_printf("\n");
   14ba0:	4805      	ldr	r0, [pc, #20]	; (14bb8 <WsfTrace+0x54>)
   14ba2:	f009 f9dd 	bl	1df60 <am_util_stdio_printf>
}
   14ba6:	f507 7784 	add.w	r7, r7, #264	; 0x108
   14baa:	46bd      	mov	sp, r7
   14bac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
   14bb0:	b004      	add	sp, #16
   14bb2:	4770      	bx	lr
   14bb4:	00023a44 	.word	0x00023a44
   14bb8:	00023a3c 	.word	0x00023a3c

00014bbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
   14bbc:	b480      	push	{r7}
   14bbe:	b083      	sub	sp, #12
   14bc0:	af00      	add	r7, sp, #0
   14bc2:	4603      	mov	r3, r0
   14bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
   14bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
   14bca:	2b00      	cmp	r3, #0
   14bcc:	db0b      	blt.n	14be6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14bce:	4908      	ldr	r1, [pc, #32]	; (14bf0 <__NVIC_EnableIRQ+0x34>)
   14bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   14bd4:	095b      	lsrs	r3, r3, #5
   14bd6:	79fa      	ldrb	r2, [r7, #7]
   14bd8:	f002 021f 	and.w	r2, r2, #31
   14bdc:	2001      	movs	r0, #1
   14bde:	fa00 f202 	lsl.w	r2, r0, r2
   14be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
   14be6:	370c      	adds	r7, #12
   14be8:	46bd      	mov	sp, r7
   14bea:	f85d 7b04 	ldr.w	r7, [sp], #4
   14bee:	4770      	bx	lr
   14bf0:	e000e100 	.word	0xe000e100

00014bf4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
   14bf4:	b480      	push	{r7}
   14bf6:	b083      	sub	sp, #12
   14bf8:	af00      	add	r7, sp, #0
   14bfa:	4603      	mov	r3, r0
   14bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
   14bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
   14c02:	2b00      	cmp	r3, #0
   14c04:	db10      	blt.n	14c28 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14c06:	490b      	ldr	r1, [pc, #44]	; (14c34 <__NVIC_DisableIRQ+0x40>)
   14c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
   14c0c:	095b      	lsrs	r3, r3, #5
   14c0e:	79fa      	ldrb	r2, [r7, #7]
   14c10:	f002 021f 	and.w	r2, r2, #31
   14c14:	2001      	movs	r0, #1
   14c16:	fa00 f202 	lsl.w	r2, r0, r2
   14c1a:	3320      	adds	r3, #32
   14c1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   14c20:	f3bf 8f4f 	dsb	sy
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
   14c24:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
   14c28:	370c      	adds	r7, #12
   14c2a:	46bd      	mov	sp, r7
   14c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
   14c30:	4770      	bx	lr
   14c32:	bf00      	nop
   14c34:	e000e100 	.word	0xe000e100

00014c38 <error_check>:
// they will be sent there intead.
//
//*****************************************************************************
static void
error_check(uint32_t ui32Status)
{
   14c38:	b580      	push	{r7, lr}
   14c3a:	b082      	sub	sp, #8
   14c3c:	af00      	add	r7, sp, #0
   14c3e:	6078      	str	r0, [r7, #4]
    //
    // Don't do anything unless there's an error.
    //
    if (ui32Status)
   14c40:	687b      	ldr	r3, [r7, #4]
   14c42:	2b00      	cmp	r3, #0
   14c44:	d00c      	beq.n	14c60 <error_check+0x28>
    {
        //
        // Set the global error status. If there's an error handler function,
        // call it. Otherwise, just print the error status and wait.
        //
        g_ui32FailingStatus = ui32Status;
   14c46:	4a08      	ldr	r2, [pc, #32]	; (14c68 <error_check+0x30>)
   14c48:	687b      	ldr	r3, [r7, #4]
   14c4a:	6013      	str	r3, [r2, #0]

        if (g_hciDrvErrorHandler)
   14c4c:	4b07      	ldr	r3, [pc, #28]	; (14c6c <error_check+0x34>)
   14c4e:	681b      	ldr	r3, [r3, #0]
   14c50:	2b00      	cmp	r3, #0
   14c52:	d005      	beq.n	14c60 <error_check+0x28>
        {
            g_hciDrvErrorHandler(g_ui32FailingStatus);
   14c54:	4b05      	ldr	r3, [pc, #20]	; (14c6c <error_check+0x34>)
   14c56:	681b      	ldr	r3, [r3, #0]
   14c58:	4a03      	ldr	r2, [pc, #12]	; (14c68 <error_check+0x30>)
   14c5a:	6812      	ldr	r2, [r2, #0]
   14c5c:	4610      	mov	r0, r2
   14c5e:	4798      	blx	r3
        {
            CRITICAL_PRINT("Error detected: 0x%08x\n", g_ui32FailingStatus);
            CRITICAL_PRINT("BSTATUS: 0x%08x\n", BLEIF->BSTATUS);
        }
    }
}
   14c60:	3708      	adds	r7, #8
   14c62:	46bd      	mov	sp, r7
   14c64:	bd80      	pop	{r7, pc}
   14c66:	bf00      	nop
   14c68:	10003ff8 	.word	0x10003ff8
   14c6c:	10003ff4 	.word	0x10003ff4

00014c70 <HciDrvRadioBoot>:
// Boot the radio.
//
//*****************************************************************************
void
HciDrvRadioBoot(bool bColdBoot)
{
   14c70:	b5b0      	push	{r4, r5, r7, lr}
   14c72:	b092      	sub	sp, #72	; 0x48
   14c74:	af00      	add	r7, sp, #0
   14c76:	4603      	mov	r3, r0
   14c78:	71fb      	strb	r3, [r7, #7]
    uint32_t ui32NumXtalRetries = 0;
   14c7a:	2300      	movs	r3, #0
   14c7c:	647b      	str	r3, [r7, #68]	; 0x44


    g_ui32NumBytes     = 0;
   14c7e:	4b6b      	ldr	r3, [pc, #428]	; (14e2c <HciDrvRadioBoot+0x1bc>)
   14c80:	2200      	movs	r2, #0
   14c82:	601a      	str	r2, [r3, #0]
    g_consumed_bytes   = 0;
   14c84:	4b6a      	ldr	r3, [pc, #424]	; (14e30 <HciDrvRadioBoot+0x1c0>)
   14c86:	2200      	movs	r2, #0
   14c88:	601a      	str	r2, [r3, #0]


    //
    // Configure and enable the BLE interface.
    //
    uint32_t ui32Status = AM_HAL_STATUS_FAIL;
   14c8a:	2301      	movs	r3, #1
   14c8c:	643b      	str	r3, [r7, #64]	; 0x40
    while (ui32Status != AM_HAL_STATUS_SUCCESS)
   14c8e:	e0a2      	b.n	14dd6 <HciDrvRadioBoot+0x166>
    {
        ERROR_CHECK_VOID(am_hal_ble_initialize(0, &BLE));
   14c90:	2000      	movs	r0, #0
   14c92:	4968      	ldr	r1, [pc, #416]	; (14e34 <HciDrvRadioBoot+0x1c4>)
   14c94:	f00c febe 	bl	21a14 <am_hal_ble_initialize>
   14c98:	63f8      	str	r0, [r7, #60]	; 0x3c
   14c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14c9c:	2b00      	cmp	r3, #0
   14c9e:	d006      	beq.n	14cae <HciDrvRadioBoot+0x3e>
   14ca0:	4865      	ldr	r0, [pc, #404]	; (14e38 <HciDrvRadioBoot+0x1c8>)
   14ca2:	f009 f95d 	bl	1df60 <am_util_stdio_printf>
   14ca6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   14ca8:	f7ff ffc6 	bl	14c38 <error_check>
   14cac:	e0ba      	b.n	14e24 <HciDrvRadioBoot+0x1b4>
        ERROR_CHECK_VOID(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_ACTIVE));
   14cae:	4b61      	ldr	r3, [pc, #388]	; (14e34 <HciDrvRadioBoot+0x1c4>)
   14cb0:	681b      	ldr	r3, [r3, #0]
   14cb2:	4618      	mov	r0, r3
   14cb4:	2100      	movs	r1, #0
   14cb6:	f00c ff9d 	bl	21bf4 <am_hal_ble_power_control>
   14cba:	63b8      	str	r0, [r7, #56]	; 0x38
   14cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14cbe:	2b00      	cmp	r3, #0
   14cc0:	d006      	beq.n	14cd0 <HciDrvRadioBoot+0x60>
   14cc2:	485e      	ldr	r0, [pc, #376]	; (14e3c <HciDrvRadioBoot+0x1cc>)
   14cc4:	f009 f94c 	bl	1df60 <am_util_stdio_printf>
   14cc8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   14cca:	f7ff ffb5 	bl	14c38 <error_check>
   14cce:	e0a9      	b.n	14e24 <HciDrvRadioBoot+0x1b4>

        am_hal_ble_config_t sBleConfig =
   14cd0:	4b5b      	ldr	r3, [pc, #364]	; (14e40 <HciDrvRadioBoot+0x1d0>)
   14cd2:	f107 0408 	add.w	r4, r7, #8
   14cd6:	461d      	mov	r5, r3
   14cd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   14cda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   14cdc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   14ce0:	e884 0007 	stmia.w	r4, {r0, r1, r2}

            // Apply the default patches when am_hal_ble_boot() is called.
            .bUseDefaultPatches = true,
        };

        ERROR_CHECK_VOID(am_hal_ble_config(BLE, &sBleConfig));
   14ce4:	4b53      	ldr	r3, [pc, #332]	; (14e34 <HciDrvRadioBoot+0x1c4>)
   14ce6:	681a      	ldr	r2, [r3, #0]
   14ce8:	f107 0308 	add.w	r3, r7, #8
   14cec:	4610      	mov	r0, r2
   14cee:	4619      	mov	r1, r3
   14cf0:	f00c fef8 	bl	21ae4 <am_hal_ble_config>
   14cf4:	6378      	str	r0, [r7, #52]	; 0x34
   14cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14cf8:	2b00      	cmp	r3, #0
   14cfa:	d006      	beq.n	14d0a <HciDrvRadioBoot+0x9a>
   14cfc:	4851      	ldr	r0, [pc, #324]	; (14e44 <HciDrvRadioBoot+0x1d4>)
   14cfe:	f009 f92f 	bl	1df60 <am_util_stdio_printf>
   14d02:	6b78      	ldr	r0, [r7, #52]	; 0x34
   14d04:	f7ff ff98 	bl	14c38 <error_check>
   14d08:	e08c      	b.n	14e24 <HciDrvRadioBoot+0x1b4>
        //
        // Delay 1s for 32768Hz clock stability. This isn't required unless this is
        // our first run immediately after a power-up.
        //
        if ( bColdBoot )
   14d0a:	79fb      	ldrb	r3, [r7, #7]
   14d0c:	2b00      	cmp	r3, #0
   14d0e:	d003      	beq.n	14d18 <HciDrvRadioBoot+0xa8>
        {
            am_util_delay_ms(1000);
   14d10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   14d14:	f008 f9ce 	bl	1d0b4 <am_util_delay_ms>
        }
        //
        // Attempt to boot the radio.
        //
        ui32Status = am_hal_ble_boot(BLE);
   14d18:	4b46      	ldr	r3, [pc, #280]	; (14e34 <HciDrvRadioBoot+0x1c4>)
   14d1a:	681b      	ldr	r3, [r3, #0]
   14d1c:	4618      	mov	r0, r3
   14d1e:	f00d fe5f 	bl	229e0 <am_hal_ble_boot>
   14d22:	6438      	str	r0, [r7, #64]	; 0x40

        //
        // Check our status.
        //
        if (ui32Status == AM_HAL_STATUS_SUCCESS)
   14d24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   14d26:	2b00      	cmp	r3, #0
   14d28:	d059      	beq.n	14dde <HciDrvRadioBoot+0x16e>
            //
            // If the radio is running, we can exit this loop.
            //
            break;
        }
        else if (ui32Status == AM_HAL_BLE_32K_CLOCK_UNSTABLE)
   14d2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   14d2c:	4a46      	ldr	r2, [pc, #280]	; (14e48 <HciDrvRadioBoot+0x1d8>)
   14d2e:	4293      	cmp	r3, r2
   14d30:	d12b      	bne.n	14d8a <HciDrvRadioBoot+0x11a>
        {
            //
            // If the radio is running, but the clock looks bad, we can try to
            // restart.
            //
            ERROR_CHECK_VOID(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF));
   14d32:	4b40      	ldr	r3, [pc, #256]	; (14e34 <HciDrvRadioBoot+0x1c4>)
   14d34:	681b      	ldr	r3, [r3, #0]
   14d36:	4618      	mov	r0, r3
   14d38:	2101      	movs	r1, #1
   14d3a:	f00c ff5b 	bl	21bf4 <am_hal_ble_power_control>
   14d3e:	6338      	str	r0, [r7, #48]	; 0x30
   14d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   14d42:	2b00      	cmp	r3, #0
   14d44:	d006      	beq.n	14d54 <HciDrvRadioBoot+0xe4>
   14d46:	4841      	ldr	r0, [pc, #260]	; (14e4c <HciDrvRadioBoot+0x1dc>)
   14d48:	f009 f90a 	bl	1df60 <am_util_stdio_printf>
   14d4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
   14d4e:	f7ff ff73 	bl	14c38 <error_check>
   14d52:	e067      	b.n	14e24 <HciDrvRadioBoot+0x1b4>
            ERROR_CHECK_VOID(am_hal_ble_deinitialize(BLE));
   14d54:	4b37      	ldr	r3, [pc, #220]	; (14e34 <HciDrvRadioBoot+0x1c4>)
   14d56:	681b      	ldr	r3, [r3, #0]
   14d58:	4618      	mov	r0, r3
   14d5a:	f00c fe97 	bl	21a8c <am_hal_ble_deinitialize>
   14d5e:	62f8      	str	r0, [r7, #44]	; 0x2c
   14d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14d62:	2b00      	cmp	r3, #0
   14d64:	d006      	beq.n	14d74 <HciDrvRadioBoot+0x104>
   14d66:	483a      	ldr	r0, [pc, #232]	; (14e50 <HciDrvRadioBoot+0x1e0>)
   14d68:	f009 f8fa 	bl	1df60 <am_util_stdio_printf>
   14d6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   14d6e:	f7ff ff63 	bl	14c38 <error_check>
   14d72:	e057      	b.n	14e24 <HciDrvRadioBoot+0x1b4>

            //
            // We won't restart forever. After we hit the maximum number of
            // retries, we'll just return with failure.
            //
            if (ui32NumXtalRetries++ < HCI_DRV_MAX_XTAL_RETRIES)
   14d74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   14d76:	1c5a      	adds	r2, r3, #1
   14d78:	647a      	str	r2, [r7, #68]	; 0x44
   14d7a:	2b09      	cmp	r3, #9
   14d7c:	d804      	bhi.n	14d88 <HciDrvRadioBoot+0x118>
            {
                am_util_delay_ms(1000);
   14d7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   14d82:	f008 f997 	bl	1d0b4 <am_util_delay_ms>
   14d86:	e026      	b.n	14dd6 <HciDrvRadioBoot+0x166>
            }
            else
            {
                return;
   14d88:	e04c      	b.n	14e24 <HciDrvRadioBoot+0x1b4>
            }
        }
        else
        {
            ERROR_CHECK_VOID(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF));
   14d8a:	4b2a      	ldr	r3, [pc, #168]	; (14e34 <HciDrvRadioBoot+0x1c4>)
   14d8c:	681b      	ldr	r3, [r3, #0]
   14d8e:	4618      	mov	r0, r3
   14d90:	2101      	movs	r1, #1
   14d92:	f00c ff2f 	bl	21bf4 <am_hal_ble_power_control>
   14d96:	62b8      	str	r0, [r7, #40]	; 0x28
   14d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14d9a:	2b00      	cmp	r3, #0
   14d9c:	d006      	beq.n	14dac <HciDrvRadioBoot+0x13c>
   14d9e:	482b      	ldr	r0, [pc, #172]	; (14e4c <HciDrvRadioBoot+0x1dc>)
   14da0:	f009 f8de 	bl	1df60 <am_util_stdio_printf>
   14da4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   14da6:	f7ff ff47 	bl	14c38 <error_check>
   14daa:	e03b      	b.n	14e24 <HciDrvRadioBoot+0x1b4>
            ERROR_CHECK_VOID(am_hal_ble_deinitialize(BLE));
   14dac:	4b21      	ldr	r3, [pc, #132]	; (14e34 <HciDrvRadioBoot+0x1c4>)
   14dae:	681b      	ldr	r3, [r3, #0]
   14db0:	4618      	mov	r0, r3
   14db2:	f00c fe6b 	bl	21a8c <am_hal_ble_deinitialize>
   14db6:	6278      	str	r0, [r7, #36]	; 0x24
   14db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14dba:	2b00      	cmp	r3, #0
   14dbc:	d006      	beq.n	14dcc <HciDrvRadioBoot+0x15c>
   14dbe:	4824      	ldr	r0, [pc, #144]	; (14e50 <HciDrvRadioBoot+0x1e0>)
   14dc0:	f009 f8ce 	bl	1df60 <am_util_stdio_printf>
   14dc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
   14dc6:	f7ff ff37 	bl	14c38 <error_check>
   14dca:	e02b      	b.n	14e24 <HciDrvRadioBoot+0x1b4>
            //
            // If the radio failed for some reason other than 32K Clock
            // instability, we should just report the failure and return.
            //
            error_check(ui32Status);
   14dcc:	6c38      	ldr	r0, [r7, #64]	; 0x40
   14dce:	f7ff ff33 	bl	14c38 <error_check>
            return;
   14dd2:	bf00      	nop
   14dd4:	e026      	b.n	14e24 <HciDrvRadioBoot+0x1b4>

    //
    // Configure and enable the BLE interface.
    //
    uint32_t ui32Status = AM_HAL_STATUS_FAIL;
    while (ui32Status != AM_HAL_STATUS_SUCCESS)
   14dd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   14dd8:	2b00      	cmp	r3, #0
   14dda:	f47f af59 	bne.w	14c90 <HciDrvRadioBoot+0x20>
    }

    //
    // Set the BLE TX Output power to 0dBm.
    //
    am_hal_ble_tx_power_set(BLE, 0x8);
   14dde:	4b15      	ldr	r3, [pc, #84]	; (14e34 <HciDrvRadioBoot+0x1c4>)
   14de0:	681b      	ldr	r3, [r3, #0]
   14de2:	4618      	mov	r0, r3
   14de4:	2108      	movs	r1, #8
   14de6:	f00d ff27 	bl	22c38 <am_hal_ble_tx_power_set>
    }
#endif

#else

    am_hal_ble_int_clear(BLE, (AM_HAL_BLE_INT_CMDCMP |
   14dea:	4b12      	ldr	r3, [pc, #72]	; (14e34 <HciDrvRadioBoot+0x1c4>)
   14dec:	681b      	ldr	r3, [r3, #0]
   14dee:	4618      	mov	r0, r3
   14df0:	f240 2181 	movw	r1, #641	; 0x281
   14df4:	f00d fad8 	bl	223a8 <am_hal_ble_int_clear>
                               AM_HAL_BLE_INT_DCMP |
                               AM_HAL_BLE_INT_BLECIRQ));

    am_hal_ble_int_enable(BLE, (AM_HAL_BLE_INT_CMDCMP |
   14df8:	4b0e      	ldr	r3, [pc, #56]	; (14e34 <HciDrvRadioBoot+0x1c4>)
   14dfa:	681b      	ldr	r3, [r3, #0]
   14dfc:	4618      	mov	r0, r3
   14dfe:	f240 2181 	movw	r1, #641	; 0x281
   14e02:	f00d faa3 	bl	2234c <am_hal_ble_int_enable>
#endif

    CRITICAL_PRINT("INTEN:  %d\n", BLEIF->INTEN_b.BLECSSTAT);
    CRITICAL_PRINT("INTENREG:  %d\n", BLEIF->INTEN);

    NVIC_EnableIRQ(BLE_IRQn);
   14e06:	200c      	movs	r0, #12
   14e08:	f7ff fed8 	bl	14bbc <__NVIC_EnableIRQ>

    //
    // Initialize a queue to help us keep track of HCI write buffers.
    //
    am_hal_queue_from_array(&g_sWriteQueue, g_psWriteBuffers);
   14e0c:	4811      	ldr	r0, [pc, #68]	; (14e54 <HciDrvRadioBoot+0x1e4>)
   14e0e:	4912      	ldr	r1, [pc, #72]	; (14e58 <HciDrvRadioBoot+0x1e8>)
   14e10:	f44f 7282 	mov.w	r2, #260	; 0x104
   14e14:	f44f 6302 	mov.w	r3, #2080	; 0x820
   14e18:	f00e fb5a 	bl	234d0 <am_hal_queue_init>

    //
    // Reset the RX interrupt counter.
    //
    g_ui32InterruptsSeen = 0;
   14e1c:	4b0f      	ldr	r3, [pc, #60]	; (14e5c <HciDrvRadioBoot+0x1ec>)
   14e1e:	2200      	movs	r2, #0
   14e20:	601a      	str	r2, [r3, #0]

    return;
   14e22:	bf00      	nop
}
   14e24:	3748      	adds	r7, #72	; 0x48
   14e26:	46bd      	mov	sp, r7
   14e28:	bdb0      	pop	{r4, r5, r7, pc}
   14e2a:	bf00      	nop
   14e2c:	10003fe8 	.word	0x10003fe8
   14e30:	10003fec 	.word	0x10003fec
   14e34:	1000a0d0 	.word	0x1000a0d0
   14e38:	00023a88 	.word	0x00023a88
   14e3c:	00023abc 	.word	0x00023abc
   14e40:	00023bb8 	.word	0x00023bb8
   14e44:	00023b08 	.word	0x00023b08
   14e48:	0800000b 	.word	0x0800000b
   14e4c:	00023b40 	.word	0x00023b40
   14e50:	00023b88 	.word	0x00023b88
   14e54:	10009788 	.word	0x10009788
   14e58:	100098b0 	.word	0x100098b0
   14e5c:	10003ff0 	.word	0x10003ff0

00014e60 <HciDrvRadioShutdown>:
// Shut down the BLE core.
//
//*****************************************************************************
void
HciDrvRadioShutdown(void)
{
   14e60:	b580      	push	{r7, lr}
   14e62:	b082      	sub	sp, #8
   14e64:	af00      	add	r7, sp, #0
    WsfTimerStop(&g_HeartBeatTimer);
   14e66:	481c      	ldr	r0, [pc, #112]	; (14ed8 <HciDrvRadioShutdown+0x78>)
   14e68:	f004 fb3e 	bl	194e8 <WsfTimerStop>

    NVIC_DisableIRQ(BLE_IRQn);
   14e6c:	200c      	movs	r0, #12
   14e6e:	f7ff fec1 	bl	14bf4 <__NVIC_DisableIRQ>

    ERROR_CHECK_VOID(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF));
   14e72:	4b1a      	ldr	r3, [pc, #104]	; (14edc <HciDrvRadioShutdown+0x7c>)
   14e74:	681b      	ldr	r3, [r3, #0]
   14e76:	4618      	mov	r0, r3
   14e78:	2101      	movs	r1, #1
   14e7a:	f00c febb 	bl	21bf4 <am_hal_ble_power_control>
   14e7e:	6078      	str	r0, [r7, #4]
   14e80:	687b      	ldr	r3, [r7, #4]
   14e82:	2b00      	cmp	r3, #0
   14e84:	d006      	beq.n	14e94 <HciDrvRadioShutdown+0x34>
   14e86:	4816      	ldr	r0, [pc, #88]	; (14ee0 <HciDrvRadioShutdown+0x80>)
   14e88:	f009 f86a 	bl	1df60 <am_util_stdio_printf>
   14e8c:	6878      	ldr	r0, [r7, #4]
   14e8e:	f7ff fed3 	bl	14c38 <error_check>
   14e92:	e01e      	b.n	14ed2 <HciDrvRadioShutdown+0x72>

    while ( PWRCTRL->DEVPWREN_b.PWRBLEL );
   14e94:	bf00      	nop
   14e96:	4b13      	ldr	r3, [pc, #76]	; (14ee4 <HciDrvRadioShutdown+0x84>)
   14e98:	689b      	ldr	r3, [r3, #8]
   14e9a:	0b5b      	lsrs	r3, r3, #13
   14e9c:	f003 0301 	and.w	r3, r3, #1
   14ea0:	b2db      	uxtb	r3, r3
   14ea2:	2b00      	cmp	r3, #0
   14ea4:	d1f7      	bne.n	14e96 <HciDrvRadioShutdown+0x36>

    ERROR_CHECK_VOID(am_hal_ble_deinitialize(BLE));
   14ea6:	4b0d      	ldr	r3, [pc, #52]	; (14edc <HciDrvRadioShutdown+0x7c>)
   14ea8:	681b      	ldr	r3, [r3, #0]
   14eaa:	4618      	mov	r0, r3
   14eac:	f00c fdee 	bl	21a8c <am_hal_ble_deinitialize>
   14eb0:	6038      	str	r0, [r7, #0]
   14eb2:	683b      	ldr	r3, [r7, #0]
   14eb4:	2b00      	cmp	r3, #0
   14eb6:	d006      	beq.n	14ec6 <HciDrvRadioShutdown+0x66>
   14eb8:	480b      	ldr	r0, [pc, #44]	; (14ee8 <HciDrvRadioShutdown+0x88>)
   14eba:	f009 f851 	bl	1df60 <am_util_stdio_printf>
   14ebe:	6838      	ldr	r0, [r7, #0]
   14ec0:	f7ff feba 	bl	14c38 <error_check>
   14ec4:	e005      	b.n	14ed2 <HciDrvRadioShutdown+0x72>

    g_ui32NumBytes   = 0;
   14ec6:	4b09      	ldr	r3, [pc, #36]	; (14eec <HciDrvRadioShutdown+0x8c>)
   14ec8:	2200      	movs	r2, #0
   14eca:	601a      	str	r2, [r3, #0]
    g_consumed_bytes = 0;
   14ecc:	4b08      	ldr	r3, [pc, #32]	; (14ef0 <HciDrvRadioShutdown+0x90>)
   14ece:	2200      	movs	r2, #0
   14ed0:	601a      	str	r2, [r3, #0]
}
   14ed2:	3708      	adds	r7, #8
   14ed4:	46bd      	mov	sp, r7
   14ed6:	bd80      	pop	{r7, pc}
   14ed8:	100097a0 	.word	0x100097a0
   14edc:	1000a0d0 	.word	0x1000a0d0
   14ee0:	00023b40 	.word	0x00023b40
   14ee4:	40021000 	.word	0x40021000
   14ee8:	00023b88 	.word	0x00023b88
   14eec:	10003fe8 	.word	0x10003fe8
   14ef0:	10003fec 	.word	0x10003fec

00014ef4 <hciDrvWrite>:
// Internally, the Cordio BLE stack will allocate memory for an HCI message,
//
//*****************************************************************************
uint16_t
hciDrvWrite(uint8_t type, uint16_t len, uint8_t *pData)
{
   14ef4:	b580      	push	{r7, lr}
   14ef6:	b094      	sub	sp, #80	; 0x50
   14ef8:	af00      	add	r7, sp, #0
   14efa:	4603      	mov	r3, r0
   14efc:	603a      	str	r2, [r7, #0]
   14efe:	71fb      	strb	r3, [r7, #7]
   14f00:	460b      	mov	r3, r1
   14f02:	80bb      	strh	r3, [r7, #4]


    //
    // Check to see if we still have buffer space.
    //
    if (am_hal_queue_full(&g_sWriteQueue))
   14f04:	4b3f      	ldr	r3, [pc, #252]	; (15004 <hciDrvWrite+0x110>)
   14f06:	689a      	ldr	r2, [r3, #8]
   14f08:	4b3e      	ldr	r3, [pc, #248]	; (15004 <hciDrvWrite+0x110>)
   14f0a:	68db      	ldr	r3, [r3, #12]
   14f0c:	429a      	cmp	r2, r3
   14f0e:	d105      	bne.n	14f1c <hciDrvWrite+0x28>
    {
        CRITICAL_PRINT("ERROR: Ran out of HCI transmit queue slots.\n");
        ERROR_RETURN(HCI_DRV_TRANSMIT_QUEUE_FULL, len);
   14f10:	f04f 6010 	mov.w	r0, #150994944	; 0x9000000
   14f14:	f7ff fe90 	bl	14c38 <error_check>
   14f18:	88bb      	ldrh	r3, [r7, #4]
   14f1a:	e06f      	b.n	14ffc <hciDrvWrite+0x108>
    }

    if (len > (HCI_DRV_MAX_TX_PACKET-1))  // comparison compensates for the type byte at index 0.
   14f1c:	88bb      	ldrh	r3, [r7, #4]
   14f1e:	2bff      	cmp	r3, #255	; 0xff
   14f20:	d904      	bls.n	14f2c <hciDrvWrite+0x38>
    {
        CRITICAL_PRINT("ERROR: Trying to send an HCI packet larger than the hci driver buffer size (needs %d bytes of space).\n",
                       len);

        ERROR_RETURN(HCI_DRV_TX_PACKET_TOO_LARGE, len);
   14f22:	4839      	ldr	r0, [pc, #228]	; (15008 <hciDrvWrite+0x114>)
   14f24:	f7ff fe88 	bl	14c38 <error_check>
   14f28:	88bb      	ldrh	r3, [r7, #4]
   14f2a:	e067      	b.n	14ffc <hciDrvWrite+0x108>
    }

    //
    // Get a pointer to the next item in the queue.
    //
    psWriteBuffer = am_hal_queue_next_slot(&g_sWriteQueue);
   14f2c:	4b35      	ldr	r3, [pc, #212]	; (15004 <hciDrvWrite+0x110>)
   14f2e:	695a      	ldr	r2, [r3, #20]
   14f30:	4b34      	ldr	r3, [pc, #208]	; (15004 <hciDrvWrite+0x110>)
   14f32:	681b      	ldr	r3, [r3, #0]
   14f34:	4413      	add	r3, r2
   14f36:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // Set all of the fields in the hci write structure.
    //
    psWriteBuffer->ui32Length = len + 1;
   14f38:	88bb      	ldrh	r3, [r7, #4]
   14f3a:	3301      	adds	r3, #1
   14f3c:	461a      	mov	r2, r3
   14f3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   14f40:	601a      	str	r2, [r3, #0]

    pui8Wptr = (uint8_t *) psWriteBuffer->pui32Data;
   14f42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   14f44:	3304      	adds	r3, #4
   14f46:	647b      	str	r3, [r7, #68]	; 0x44

    *pui8Wptr++ = type;
   14f48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   14f4a:	1c5a      	adds	r2, r3, #1
   14f4c:	647a      	str	r2, [r7, #68]	; 0x44
   14f4e:	79fa      	ldrb	r2, [r7, #7]
   14f50:	701a      	strb	r2, [r3, #0]

    for (uint32_t i = 0; i < len; i++)
   14f52:	2300      	movs	r3, #0
   14f54:	64fb      	str	r3, [r7, #76]	; 0x4c
   14f56:	e00a      	b.n	14f6e <hciDrvWrite+0x7a>
    {
        pui8Wptr[i] = pData[i];
   14f58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   14f5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14f5c:	4413      	add	r3, r2
   14f5e:	6839      	ldr	r1, [r7, #0]
   14f60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   14f62:	440a      	add	r2, r1
   14f64:	7812      	ldrb	r2, [r2, #0]
   14f66:	701a      	strb	r2, [r3, #0]

    pui8Wptr = (uint8_t *) psWriteBuffer->pui32Data;

    *pui8Wptr++ = type;

    for (uint32_t i = 0; i < len; i++)
   14f68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14f6a:	3301      	adds	r3, #1
   14f6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   14f6e:	88ba      	ldrh	r2, [r7, #4]
   14f70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14f72:	429a      	cmp	r2, r3
   14f74:	d8f0      	bhi.n	14f58 <hciDrvWrite+0x64>
    }

    //
    // Advance the queue.
    //
    am_hal_queue_item_add(&g_sWriteQueue, 0, 1);
   14f76:	4823      	ldr	r0, [pc, #140]	; (15004 <hciDrvWrite+0x110>)
   14f78:	2100      	movs	r1, #0
   14f7a:	2201      	movs	r2, #1
   14f7c:	f00e fab4 	bl	234e8 <am_hal_queue_item_add>

#else
    //
    // Send an event to the BLE transfer handler function.
    //
    WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   14f80:	4b22      	ldr	r3, [pc, #136]	; (1500c <hciDrvWrite+0x118>)
   14f82:	781b      	ldrb	r3, [r3, #0]
   14f84:	4618      	mov	r0, r3
   14f86:	2101      	movs	r1, #1
   14f88:	f7ff fcd4 	bl	14934 <WsfSetEvent>
#endif

    // Restart heartbeat timer

    if (type == HCI_CMD_TYPE)
   14f8c:	79fb      	ldrb	r3, [r7, #7]
   14f8e:	2b01      	cmp	r3, #1
   14f90:	d133      	bne.n	14ffa <hciDrvWrite+0x106>
    {
        WsfTimerStop(&g_HeartBeatTimer);
   14f92:	481f      	ldr	r0, [pc, #124]	; (15010 <hciDrvWrite+0x11c>)
   14f94:	f004 faa8 	bl	194e8 <WsfTimerStop>
        WsfTimerStartMs(&g_HeartBeatTimer, HEARTBEAT_TIMEOUT_MS);
   14f98:	481d      	ldr	r0, [pc, #116]	; (15010 <hciDrvWrite+0x11c>)
   14f9a:	f242 7110 	movw	r1, #10000	; 0x2710
   14f9e:	f004 fa8f 	bl	194c0 <WsfTimerStartMs>

#ifdef AM_CUSTOM_BDADDR

        uint16_t opcode;
        BYTES_TO_UINT16(opcode, pData);
   14fa2:	683b      	ldr	r3, [r7, #0]
   14fa4:	781b      	ldrb	r3, [r3, #0]
   14fa6:	b29a      	uxth	r2, r3
   14fa8:	683b      	ldr	r3, [r7, #0]
   14faa:	3301      	adds	r3, #1
   14fac:	781b      	ldrb	r3, [r3, #0]
   14fae:	b29b      	uxth	r3, r3
   14fb0:	021b      	lsls	r3, r3, #8
   14fb2:	b29b      	uxth	r3, r3
   14fb4:	4413      	add	r3, r2
   14fb6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

        if (HCI_OPCODE_RESET == opcode)
   14fba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
   14fbe:	f640 4203 	movw	r2, #3075	; 0xc03
   14fc2:	4293      	cmp	r3, r2
   14fc4:	d119      	bne.n	14ffa <hciDrvWrite+0x106>
        {

            extern uint8_t g_BLEMacAddress[6];
            am_hal_mcuctrl_device_t sDevice;
            am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_DEVICEID, &sDevice);
   14fc6:	f107 030c 	add.w	r3, r7, #12
   14fca:	2001      	movs	r0, #1
   14fcc:	4619      	mov	r1, r3
   14fce:	f00e f949 	bl	23264 <am_hal_mcuctrl_info_get>
            g_BLEMacAddress[0] = sDevice.ui32ChipID0;
   14fd2:	693b      	ldr	r3, [r7, #16]
   14fd4:	b2da      	uxtb	r2, r3
   14fd6:	4b0f      	ldr	r3, [pc, #60]	; (15014 <hciDrvWrite+0x120>)
   14fd8:	701a      	strb	r2, [r3, #0]
            g_BLEMacAddress[1] = sDevice.ui32ChipID0 >> 8;
   14fda:	693b      	ldr	r3, [r7, #16]
   14fdc:	0a1b      	lsrs	r3, r3, #8
   14fde:	b2da      	uxtb	r2, r3
   14fe0:	4b0c      	ldr	r3, [pc, #48]	; (15014 <hciDrvWrite+0x120>)
   14fe2:	705a      	strb	r2, [r3, #1]
            g_BLEMacAddress[2] = sDevice.ui32ChipID0 >> 16;
   14fe4:	693b      	ldr	r3, [r7, #16]
   14fe6:	0c1b      	lsrs	r3, r3, #16
   14fe8:	b2da      	uxtb	r2, r3
   14fea:	4b0a      	ldr	r3, [pc, #40]	; (15014 <hciDrvWrite+0x120>)
   14fec:	709a      	strb	r2, [r3, #2]

            HciVendorSpecificCmd(0xFC32, 6, g_BLEMacAddress);
   14fee:	f64f 4032 	movw	r0, #64562	; 0xfc32
   14ff2:	2106      	movs	r1, #6
   14ff4:	4a07      	ldr	r2, [pc, #28]	; (15014 <hciDrvWrite+0x120>)
   14ff6:	f001 f943 	bl	16280 <HciVendorSpecificCmd>
        }
#endif

    }

    return len;
   14ffa:	88bb      	ldrh	r3, [r7, #4]
}
   14ffc:	4618      	mov	r0, r3
   14ffe:	3750      	adds	r7, #80	; 0x50
   15000:	46bd      	mov	sp, r7
   15002:	bd80      	pop	{r7, pc}
   15004:	10009788 	.word	0x10009788
   15008:	09000001 	.word	0x09000001
   1500c:	10003fe4 	.word	0x10003fe4
   15010:	100097a0 	.word	0x100097a0
   15014:	10002bac 	.word	0x10002bac

00015018 <HciDrvHandlerInit>:
//     HciDrvHandler(handlerId);
//
//*****************************************************************************
void
HciDrvHandlerInit(wsfHandlerId_t handlerId)
{
   15018:	b480      	push	{r7}
   1501a:	b083      	sub	sp, #12
   1501c:	af00      	add	r7, sp, #0
   1501e:	4603      	mov	r3, r0
   15020:	71fb      	strb	r3, [r7, #7]
    g_HciDrvHandleID = handlerId;
   15022:	4a0a      	ldr	r2, [pc, #40]	; (1504c <HciDrvHandlerInit+0x34>)
   15024:	79fb      	ldrb	r3, [r7, #7]
   15026:	7013      	strb	r3, [r2, #0]

    g_HeartBeatTimer.handlerId = handlerId;
   15028:	4a09      	ldr	r2, [pc, #36]	; (15050 <HciDrvHandlerInit+0x38>)
   1502a:	79fb      	ldrb	r3, [r7, #7]
   1502c:	7213      	strb	r3, [r2, #8]
    g_HeartBeatTimer.msg.event = BLE_HEARTBEAT_EVENT;
   1502e:	4b08      	ldr	r3, [pc, #32]	; (15050 <HciDrvHandlerInit+0x38>)
   15030:	2202      	movs	r2, #2
   15032:	731a      	strb	r2, [r3, #12]

    g_WakeTimer.handlerId = handlerId;
   15034:	4a07      	ldr	r2, [pc, #28]	; (15054 <HciDrvHandlerInit+0x3c>)
   15036:	79fb      	ldrb	r3, [r7, #7]
   15038:	7213      	strb	r3, [r2, #8]
    g_WakeTimer.msg.event = BLE_SET_WAKEUP;
   1503a:	4b06      	ldr	r3, [pc, #24]	; (15054 <HciDrvHandlerInit+0x3c>)
   1503c:	2203      	movs	r2, #3
   1503e:	731a      	strb	r2, [r3, #12]
}
   15040:	370c      	adds	r7, #12
   15042:	46bd      	mov	sp, r7
   15044:	f85d 7b04 	ldr.w	r7, [sp], #4
   15048:	4770      	bx	lr
   1504a:	bf00      	nop
   1504c:	10003fe4 	.word	0x10003fe4
   15050:	100097a0 	.word	0x100097a0
   15054:	1000a0d4 	.word	0x1000a0d4

00015058 <HciDrvIntService>:
//     HciDrvHandler(handlerId);
//
//*****************************************************************************
void
HciDrvIntService(void)
{
   15058:	b580      	push	{r7, lr}
   1505a:	b082      	sub	sp, #8
   1505c:	af00      	add	r7, sp, #0
    am_hal_gpio_state_write(11, AM_HAL_GPIO_OUTPUT_SET);
   1505e:	200b      	movs	r0, #11
   15060:	2101      	movs	r1, #1
   15062:	f00e f8b3 	bl	231cc <am_hal_gpio_state_write>

    //
    // Read and clear the interrupt status.
    //
    uint32_t ui32Status = am_hal_ble_int_status(BLE, true);
   15066:	4b0f      	ldr	r3, [pc, #60]	; (150a4 <HciDrvIntService+0x4c>)
   15068:	681b      	ldr	r3, [r3, #0]
   1506a:	4618      	mov	r0, r3
   1506c:	2101      	movs	r1, #1
   1506e:	f00d f98d 	bl	2238c <am_hal_ble_int_status>
   15072:	6078      	str	r0, [r7, #4]
    am_hal_ble_int_clear(BLE, ui32Status);
   15074:	4b0b      	ldr	r3, [pc, #44]	; (150a4 <HciDrvIntService+0x4c>)
   15076:	681b      	ldr	r3, [r3, #0]
   15078:	4618      	mov	r0, r3
   1507a:	6879      	ldr	r1, [r7, #4]
   1507c:	f00d f994 	bl	223a8 <am_hal_ble_int_clear>
#else
    //
    // Advance an event counter to make sure we're keeping track of edges
    // correctly.
    //
    g_ui32InterruptsSeen++;
   15080:	4b09      	ldr	r3, [pc, #36]	; (150a8 <HciDrvIntService+0x50>)
   15082:	681b      	ldr	r3, [r3, #0]
   15084:	3301      	adds	r3, #1
   15086:	4a08      	ldr	r2, [pc, #32]	; (150a8 <HciDrvIntService+0x50>)
   15088:	6013      	str	r3, [r2, #0]

    //
    // Send an event to get processed in the HCI handler.
    //
    WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   1508a:	4b08      	ldr	r3, [pc, #32]	; (150ac <HciDrvIntService+0x54>)
   1508c:	781b      	ldrb	r3, [r3, #0]
   1508e:	4618      	mov	r0, r3
   15090:	2101      	movs	r1, #1
   15092:	f7ff fc4f 	bl	14934 <WsfSetEvent>
#endif

    am_hal_gpio_state_write(11, AM_HAL_GPIO_OUTPUT_CLEAR);
   15096:	200b      	movs	r0, #11
   15098:	2100      	movs	r1, #0
   1509a:	f00e f897 	bl	231cc <am_hal_gpio_state_write>

}
   1509e:	3708      	adds	r7, #8
   150a0:	46bd      	mov	sp, r7
   150a2:	bd80      	pop	{r7, pc}
   150a4:	1000a0d0 	.word	0x1000a0d0
   150a8:	10003ff0 	.word	0x10003ff0
   150ac:	10003fe4 	.word	0x10003fe4

000150b0 <HciDrvHandler>:
// correct order.
//
//*****************************************************************************
void
HciDrvHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   150b0:	b580      	push	{r7, lr}
   150b2:	b08a      	sub	sp, #40	; 0x28
   150b4:	af00      	add	r7, sp, #0
   150b6:	4603      	mov	r3, r0
   150b8:	6039      	str	r1, [r7, #0]
   150ba:	71fb      	strb	r3, [r7, #7]
    uint32_t ui32ErrorStatus, ui32TxRetries = 0;
   150bc:	2300      	movs	r3, #0
   150be:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t ui32NumHciTransactions = 0;
   150c0:	2300      	movs	r3, #0
   150c2:	623b      	str	r3, [r7, #32]
    uint32_t read_hci_packet_count = 0;
   150c4:	2300      	movs	r3, #0
   150c6:	61fb      	str	r3, [r7, #28]
    // handle this command without issue. If it doesn't acknowledge the
    // command, we will eventually get an HCI command timeout error, which will
    // alert us to the fact that the BLE core has become unresponsive in
    // general.
    //
    if (pMsg->event == BLE_HEARTBEAT_EVENT)
   150c8:	683b      	ldr	r3, [r7, #0]
   150ca:	789b      	ldrb	r3, [r3, #2]
   150cc:	2b02      	cmp	r3, #2
   150ce:	d107      	bne.n	150e0 <HciDrvHandler+0x30>
    {
        HciReadLocalVerInfoCmd();
   150d0:	f000 fece 	bl	15e70 <HciReadLocalVerInfoCmd>
        WsfTimerStartMs(&g_HeartBeatTimer, HEARTBEAT_TIMEOUT_MS);
   150d4:	4887      	ldr	r0, [pc, #540]	; (152f4 <HciDrvHandler+0x244>)
   150d6:	f242 7110 	movw	r1, #10000	; 0x2710
   150da:	f004 f9f1 	bl	194c0 <WsfTimerStartMs>
        return;
   150de:	e105      	b.n	152ec <HciDrvHandler+0x23c>

    //
    // Check to see if we read any bytes over the HCI interface that we haven't
    // already sent to the BLE stack.
    //
    if (g_ui32NumBytes > g_consumed_bytes)
   150e0:	4b85      	ldr	r3, [pc, #532]	; (152f8 <HciDrvHandler+0x248>)
   150e2:	681a      	ldr	r2, [r3, #0]
   150e4:	4b85      	ldr	r3, [pc, #532]	; (152fc <HciDrvHandler+0x24c>)
   150e6:	681b      	ldr	r3, [r3, #0]
   150e8:	429a      	cmp	r2, r3
   150ea:	d92a      	bls.n	15142 <HciDrvHandler+0x92>
    {
        //
        // If we have any bytes saved, we should send them to the BLE stack
        // now.
        //
        g_consumed_bytes += hciTrSerialRxIncoming(g_pui8ReadBuffer + g_consumed_bytes,
   150ec:	4b84      	ldr	r3, [pc, #528]	; (15300 <HciDrvHandler+0x250>)
   150ee:	681a      	ldr	r2, [r3, #0]
   150f0:	4b82      	ldr	r3, [pc, #520]	; (152fc <HciDrvHandler+0x24c>)
   150f2:	681b      	ldr	r3, [r3, #0]
   150f4:	18d1      	adds	r1, r2, r3
   150f6:	4b80      	ldr	r3, [pc, #512]	; (152f8 <HciDrvHandler+0x248>)
   150f8:	681b      	ldr	r3, [r3, #0]
   150fa:	b29a      	uxth	r2, r3
   150fc:	4b7f      	ldr	r3, [pc, #508]	; (152fc <HciDrvHandler+0x24c>)
   150fe:	681b      	ldr	r3, [r3, #0]
   15100:	b29b      	uxth	r3, r3
   15102:	1ad3      	subs	r3, r2, r3
   15104:	b29b      	uxth	r3, r3
   15106:	4608      	mov	r0, r1
   15108:	4619      	mov	r1, r3
   1510a:	f003 fc13 	bl	18934 <hciTrSerialRxIncoming>
   1510e:	4603      	mov	r3, r0
   15110:	461a      	mov	r2, r3
   15112:	4b7a      	ldr	r3, [pc, #488]	; (152fc <HciDrvHandler+0x24c>)
   15114:	681b      	ldr	r3, [r3, #0]
   15116:	4413      	add	r3, r2
   15118:	4a78      	ldr	r2, [pc, #480]	; (152fc <HciDrvHandler+0x24c>)
   1511a:	6013      	str	r3, [r2, #0]
                                                  g_ui32NumBytes - g_consumed_bytes);

        //
        // If the stack doesn't accept all of the bytes we had,
        //
        if (g_consumed_bytes != g_ui32NumBytes)
   1511c:	4b77      	ldr	r3, [pc, #476]	; (152fc <HciDrvHandler+0x24c>)
   1511e:	681a      	ldr	r2, [r3, #0]
   15120:	4b75      	ldr	r3, [pc, #468]	; (152f8 <HciDrvHandler+0x248>)
   15122:	681b      	ldr	r3, [r3, #0]
   15124:	429a      	cmp	r2, r3
   15126:	d006      	beq.n	15136 <HciDrvHandler+0x86>
        {
            WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   15128:	4b76      	ldr	r3, [pc, #472]	; (15304 <HciDrvHandler+0x254>)
   1512a:	781b      	ldrb	r3, [r3, #0]
   1512c:	4618      	mov	r0, r3
   1512e:	2101      	movs	r1, #1
   15130:	f7ff fc00 	bl	14934 <WsfSetEvent>
            return;
   15134:	e0da      	b.n	152ec <HciDrvHandler+0x23c>
        }
        else
        {
            g_ui32NumBytes   = 0;
   15136:	4b70      	ldr	r3, [pc, #448]	; (152f8 <HciDrvHandler+0x248>)
   15138:	2200      	movs	r2, #0
   1513a:	601a      	str	r2, [r3, #0]
            g_consumed_bytes = 0;
   1513c:	4b6f      	ldr	r3, [pc, #444]	; (152fc <HciDrvHandler+0x24c>)
   1513e:	2200      	movs	r2, #0
   15140:	601a      	str	r2, [r3, #0]

    //
    // Loop indefinitely, checking to see if there are still tranfsers we need
    // to complete.
    //
    while (ui32NumHciTransactions++ < HCI_DRV_MAX_HCI_TRANSACTIONS)
   15142:	e0b9      	b.n	152b8 <HciDrvHandler+0x208>
    {
        //
        // Figure out what kind of transfer the BLE core will accept.
        //
        if ( BLE_IRQ_CHECK() )
   15144:	4b70      	ldr	r3, [pc, #448]	; (15308 <HciDrvHandler+0x258>)
   15146:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   1514a:	09db      	lsrs	r3, r3, #7
   1514c:	f003 0301 	and.w	r3, r3, #1
   15150:	b2db      	uxtb	r3, r3
   15152:	2b00      	cmp	r3, #0
   15154:	d07b      	beq.n	1524e <HciDrvHandler+0x19e>
        {
            uint32_t ui32OldInterruptsSeen = g_ui32InterruptsSeen;
   15156:	4b6d      	ldr	r3, [pc, #436]	; (1530c <HciDrvHandler+0x25c>)
   15158:	681b      	ldr	r3, [r3, #0]
   1515a:	60fb      	str	r3, [r7, #12]

            am_hal_debug_gpio_set(BLE_DEBUG_TRACE_02);

            WsfTimerStop(&g_HeartBeatTimer);
   1515c:	4865      	ldr	r0, [pc, #404]	; (152f4 <HciDrvHandler+0x244>)
   1515e:	f004 f9c3 	bl	194e8 <WsfTimerStop>
            // WsfTimerStartMs(&g_HeartBeatTimer, HEARTBEAT_TIMEOUT_MS);
            //
            // Is the BLE core asking for a read? If so, do that now.
            //
            g_ui32NumBytes = 0;
   15162:	4b65      	ldr	r3, [pc, #404]	; (152f8 <HciDrvHandler+0x248>)
   15164:	2200      	movs	r2, #0
   15166:	601a      	str	r2, [r3, #0]
            ui32ErrorStatus = am_hal_ble_blocking_hci_read(BLE, (uint32_t*)g_pui32ReadBuffer, &g_ui32NumBytes);
   15168:	4b69      	ldr	r3, [pc, #420]	; (15310 <HciDrvHandler+0x260>)
   1516a:	681b      	ldr	r3, [r3, #0]
   1516c:	4618      	mov	r0, r3
   1516e:	4969      	ldr	r1, [pc, #420]	; (15314 <HciDrvHandler+0x264>)
   15170:	4a61      	ldr	r2, [pc, #388]	; (152f8 <HciDrvHandler+0x248>)
   15172:	f00c fec7 	bl	21f04 <am_hal_ble_blocking_hci_read>
   15176:	6138      	str	r0, [r7, #16]

            if (g_ui32NumBytes > HCI_DRV_MAX_RX_PACKET)
   15178:	4b5f      	ldr	r3, [pc, #380]	; (152f8 <HciDrvHandler+0x248>)
   1517a:	681b      	ldr	r3, [r3, #0]
   1517c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   15180:	d908      	bls.n	15194 <HciDrvHandler+0xe4>
            {
                CRITICAL_PRINT("ERROR: Trying to receive an HCI packet larger than the hci driver buffer size (needs %d bytes of space).",
                               g_ui32NumBytes);

                ERROR_CHECK_VOID(HCI_DRV_RX_PACKET_TOO_LARGE);
   15182:	4b65      	ldr	r3, [pc, #404]	; (15318 <HciDrvHandler+0x268>)
   15184:	60bb      	str	r3, [r7, #8]
   15186:	4865      	ldr	r0, [pc, #404]	; (1531c <HciDrvHandler+0x26c>)
   15188:	f008 feea 	bl	1df60 <am_util_stdio_printf>
   1518c:	68b8      	ldr	r0, [r7, #8]
   1518e:	f7ff fd53 	bl	14c38 <error_check>
   15192:	e0ab      	b.n	152ec <HciDrvHandler+0x23c>
            }

            if ( ui32ErrorStatus == AM_HAL_STATUS_SUCCESS)
   15194:	693b      	ldr	r3, [r7, #16]
   15196:	2b00      	cmp	r3, #0
   15198:	d13e      	bne.n	15218 <HciDrvHandler+0x168>
                // If the read succeeded, we need to wait for the IRQ signal to
                // go back down. If we don't we might inadvertently try to read
                // the same packet twice.
                //
                uint32_t ui32IRQRetries;
                for (ui32IRQRetries = 0; ui32IRQRetries < HCI_DRV_MAX_IRQ_TIMEOUT; ui32IRQRetries++)
   1519a:	2300      	movs	r3, #0
   1519c:	61bb      	str	r3, [r7, #24]
   1519e:	e013      	b.n	151c8 <HciDrvHandler+0x118>
                {
                    if (BLE_IRQ_CHECK() == 0 || g_ui32InterruptsSeen != ui32OldInterruptsSeen)
   151a0:	4b59      	ldr	r3, [pc, #356]	; (15308 <HciDrvHandler+0x258>)
   151a2:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   151a6:	09db      	lsrs	r3, r3, #7
   151a8:	f003 0301 	and.w	r3, r3, #1
   151ac:	b2db      	uxtb	r3, r3
   151ae:	2b00      	cmp	r3, #0
   151b0:	d00e      	beq.n	151d0 <HciDrvHandler+0x120>
   151b2:	4b56      	ldr	r3, [pc, #344]	; (1530c <HciDrvHandler+0x25c>)
   151b4:	681a      	ldr	r2, [r3, #0]
   151b6:	68fb      	ldr	r3, [r7, #12]
   151b8:	429a      	cmp	r2, r3
   151ba:	d109      	bne.n	151d0 <HciDrvHandler+0x120>
                    {
                        break;
                    }

                    am_util_delay_us(1);
   151bc:	2001      	movs	r0, #1
   151be:	f007 ff95 	bl	1d0ec <am_util_delay_us>
                // If the read succeeded, we need to wait for the IRQ signal to
                // go back down. If we don't we might inadvertently try to read
                // the same packet twice.
                //
                uint32_t ui32IRQRetries;
                for (ui32IRQRetries = 0; ui32IRQRetries < HCI_DRV_MAX_IRQ_TIMEOUT; ui32IRQRetries++)
   151c2:	69bb      	ldr	r3, [r7, #24]
   151c4:	3301      	adds	r3, #1
   151c6:	61bb      	str	r3, [r7, #24]
   151c8:	69bb      	ldr	r3, [r7, #24]
   151ca:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   151ce:	d3e7      	bcc.n	151a0 <HciDrvHandler+0xf0>
                //
                // Pass the data along to the stack. The stack should be able
                // to read as much data as we send it.  If it can't, we need to
                // know that.
                //
                g_consumed_bytes = hciTrSerialRxIncoming(g_pui8ReadBuffer, g_ui32NumBytes);
   151d0:	4b4b      	ldr	r3, [pc, #300]	; (15300 <HciDrvHandler+0x250>)
   151d2:	681a      	ldr	r2, [r3, #0]
   151d4:	4b48      	ldr	r3, [pc, #288]	; (152f8 <HciDrvHandler+0x248>)
   151d6:	681b      	ldr	r3, [r3, #0]
   151d8:	b29b      	uxth	r3, r3
   151da:	4610      	mov	r0, r2
   151dc:	4619      	mov	r1, r3
   151de:	f003 fba9 	bl	18934 <hciTrSerialRxIncoming>
   151e2:	4603      	mov	r3, r0
   151e4:	461a      	mov	r2, r3
   151e6:	4b45      	ldr	r3, [pc, #276]	; (152fc <HciDrvHandler+0x24c>)
   151e8:	601a      	str	r2, [r3, #0]

                if (g_consumed_bytes != g_ui32NumBytes)
   151ea:	4b44      	ldr	r3, [pc, #272]	; (152fc <HciDrvHandler+0x24c>)
   151ec:	681a      	ldr	r2, [r3, #0]
   151ee:	4b42      	ldr	r3, [pc, #264]	; (152f8 <HciDrvHandler+0x248>)
   151f0:	681b      	ldr	r3, [r3, #0]
   151f2:	429a      	cmp	r2, r3
   151f4:	d006      	beq.n	15204 <HciDrvHandler+0x154>
                {

                    // need to come back again
                    WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   151f6:	4b43      	ldr	r3, [pc, #268]	; (15304 <HciDrvHandler+0x254>)
   151f8:	781b      	ldrb	r3, [r3, #0]
   151fa:	4618      	mov	r0, r3
   151fc:	2101      	movs	r1, #1
   151fe:	f7ff fb99 	bl	14934 <WsfSetEvent>
                    // take a break now

                    // worst case disable BLE_IRQ
                    break;
   15202:	e061      	b.n	152c8 <HciDrvHandler+0x218>
                }

                g_ui32NumBytes   = 0;
   15204:	4b3c      	ldr	r3, [pc, #240]	; (152f8 <HciDrvHandler+0x248>)
   15206:	2200      	movs	r2, #0
   15208:	601a      	str	r2, [r3, #0]
                g_consumed_bytes = 0;
   1520a:	4b3c      	ldr	r3, [pc, #240]	; (152fc <HciDrvHandler+0x24c>)
   1520c:	2200      	movs	r2, #0
   1520e:	601a      	str	r2, [r3, #0]

                read_hci_packet_count++;
   15210:	69fb      	ldr	r3, [r7, #28]
   15212:	3301      	adds	r3, #1
   15214:	61fb      	str	r3, [r7, #28]
   15216:	e00f      	b.n	15238 <HciDrvHandler+0x188>
                // fail.
                //
                CRITICAL_PRINT("HCI READ failed with status %d. Try recording with a logic analyzer to catch the error.\n",
                               ui32ErrorStatus);

                ERROR_RECOVER(ui32ErrorStatus);
   15218:	693b      	ldr	r3, [r7, #16]
   1521a:	2b00      	cmp	r3, #0
   1521c:	d00c      	beq.n	15238 <HciDrvHandler+0x188>
   1521e:	6938      	ldr	r0, [r7, #16]
   15220:	f7ff fd0a 	bl	14c38 <error_check>
   15224:	f7ff fe1c 	bl	14e60 <HciDrvRadioShutdown>
   15228:	2000      	movs	r0, #0
   1522a:	f7ff fd21 	bl	14c70 <HciDrvRadioBoot>
   1522e:	f000 f87b 	bl	15328 <HciDrvEmptyWriteQueue>
   15232:	f7fa fcd3 	bl	fbdc <DmDevReset>
   15236:	e059      	b.n	152ec <HciDrvHandler+0x23c>
            }

            am_hal_debug_gpio_clear(BLE_DEBUG_TRACE_02);

            if (read_hci_packet_count >= HCI_DRV_MAX_READ_PACKET)
   15238:	69fb      	ldr	r3, [r7, #28]
   1523a:	2b03      	cmp	r3, #3
   1523c:	d906      	bls.n	1524c <HciDrvHandler+0x19c>
            {
                // It looks like there's time that we won't get interrupt even though
                // there's packet waiting for host to grab.
                WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   1523e:	4b31      	ldr	r3, [pc, #196]	; (15304 <HciDrvHandler+0x254>)
   15240:	781b      	ldrb	r3, [r3, #0]
   15242:	4618      	mov	r0, r3
   15244:	2101      	movs	r1, #1
   15246:	f7ff fb75 	bl	14934 <WsfSetEvent>

                break;
   1524a:	e03d      	b.n	152c8 <HciDrvHandler+0x218>
   1524c:	e034      	b.n	152b8 <HciDrvHandler+0x208>
        {
            //
            // If we don't have anything to read, we can start checking to see
            // if we have things to write.
            //
            if (am_hal_queue_empty(&g_sWriteQueue))
   1524e:	4b34      	ldr	r3, [pc, #208]	; (15320 <HciDrvHandler+0x270>)
   15250:	689b      	ldr	r3, [r3, #8]
   15252:	2b00      	cmp	r3, #0
   15254:	d100      	bne.n	15258 <HciDrvHandler+0x1a8>
            {
                //
                // If not, we're done!
                //
                break;
   15256:	e037      	b.n	152c8 <HciDrvHandler+0x218>
            {
                //
                // If we do have something to write, just pop a single item
                // from the queue and send it.
                //
                WsfTimerStop(&g_HeartBeatTimer);
   15258:	4826      	ldr	r0, [pc, #152]	; (152f4 <HciDrvHandler+0x244>)
   1525a:	f004 f945 	bl	194e8 <WsfTimerStop>
                // WsfTimerStartMs(&g_HeartBeatTimer, HEARTBEAT_TIMEOUT_MS);
                am_hal_debug_gpio_set(BLE_DEBUG_TRACE_07);

                hci_drv_write_t *psWriteBuffer = am_hal_queue_peek(&g_sWriteQueue);
   1525e:	4b30      	ldr	r3, [pc, #192]	; (15320 <HciDrvHandler+0x270>)
   15260:	695a      	ldr	r2, [r3, #20]
   15262:	4b2f      	ldr	r3, [pc, #188]	; (15320 <HciDrvHandler+0x270>)
   15264:	685b      	ldr	r3, [r3, #4]
   15266:	4413      	add	r3, r2
   15268:	617b      	str	r3, [r7, #20]

                ui32ErrorStatus = am_hal_ble_blocking_hci_write(BLE,
   1526a:	4b29      	ldr	r3, [pc, #164]	; (15310 <HciDrvHandler+0x260>)
   1526c:	6819      	ldr	r1, [r3, #0]
                                                                AM_HAL_BLE_RAW,
                                                                psWriteBuffer->pui32Data,
   1526e:	697b      	ldr	r3, [r7, #20]
   15270:	1d1a      	adds	r2, r3, #4
                // WsfTimerStartMs(&g_HeartBeatTimer, HEARTBEAT_TIMEOUT_MS);
                am_hal_debug_gpio_set(BLE_DEBUG_TRACE_07);

                hci_drv_write_t *psWriteBuffer = am_hal_queue_peek(&g_sWriteQueue);

                ui32ErrorStatus = am_hal_ble_blocking_hci_write(BLE,
   15272:	697b      	ldr	r3, [r7, #20]
   15274:	681b      	ldr	r3, [r3, #0]
   15276:	4608      	mov	r0, r1
   15278:	2100      	movs	r1, #0
   1527a:	f00c fe13 	bl	21ea4 <am_hal_ble_blocking_hci_write>
   1527e:	6138      	str	r0, [r7, #16]

                //
                // If we managed to actually send a packet, we can go ahead and
                // advance the queue.
                //
                if (ui32ErrorStatus == AM_HAL_STATUS_SUCCESS)
   15280:	693b      	ldr	r3, [r7, #16]
   15282:	2b00      	cmp	r3, #0
   15284:	d109      	bne.n	1529a <HciDrvHandler+0x1ea>
                {
                    am_hal_queue_item_get(&g_sWriteQueue, 0, 1);
   15286:	4826      	ldr	r0, [pc, #152]	; (15320 <HciDrvHandler+0x270>)
   15288:	2100      	movs	r1, #0
   1528a:	2201      	movs	r2, #1
   1528c:	f00e f964 	bl	23558 <am_hal_queue_item_get>
                    ui32TxRetries = 0;
   15290:	2300      	movs	r3, #0
   15292:	627b      	str	r3, [r7, #36]	; 0x24
                    // Resetting the cumulative count
                    ui32NumHciTransactions = 0;
   15294:	2300      	movs	r3, #0
   15296:	623b      	str	r3, [r7, #32]
   15298:	e00e      	b.n	152b8 <HciDrvHandler+0x208>
                {
                    //
                    // If we fail too many times in a row, we should throw an
                    // error to avoid a lock-up.
                    //
                    ui32TxRetries++;
   1529a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1529c:	3301      	adds	r3, #1
   1529e:	627b      	str	r3, [r7, #36]	; 0x24

                    if (ui32TxRetries > HCI_DRV_MAX_TX_RETRIES)
   152a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   152a2:	f242 7210 	movw	r2, #10000	; 0x2710
   152a6:	4293      	cmp	r3, r2
   152a8:	d906      	bls.n	152b8 <HciDrvHandler+0x208>
                    {
                        // we need to come back again later.
                        WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   152aa:	4b16      	ldr	r3, [pc, #88]	; (15304 <HciDrvHandler+0x254>)
   152ac:	781b      	ldrb	r3, [r3, #0]
   152ae:	4618      	mov	r0, r3
   152b0:	2101      	movs	r1, #1
   152b2:	f7ff fb3f 	bl	14934 <WsfSetEvent>
                        break;
   152b6:	e007      	b.n	152c8 <HciDrvHandler+0x218>

    //
    // Loop indefinitely, checking to see if there are still tranfsers we need
    // to complete.
    //
    while (ui32NumHciTransactions++ < HCI_DRV_MAX_HCI_TRANSACTIONS)
   152b8:	6a3b      	ldr	r3, [r7, #32]
   152ba:	1c5a      	adds	r2, r3, #1
   152bc:	623a      	str	r2, [r7, #32]
   152be:	f242 720f 	movw	r2, #9999	; 0x270f
   152c2:	4293      	cmp	r3, r2
   152c4:	f67f af3e 	bls.w	15144 <HciDrvHandler+0x94>

            }
        }
    }

    if (ui32NumHciTransactions == HCI_DRV_MAX_HCI_TRANSACTIONS)
   152c8:	6a3b      	ldr	r3, [r7, #32]
   152ca:	f242 7210 	movw	r2, #10000	; 0x2710
   152ce:	4293      	cmp	r3, r2
   152d0:	d10c      	bne.n	152ec <HciDrvHandler+0x23c>
    {
        CRITICAL_PRINT("ERROR: Maximum number of successive HCI transactions exceeded.\n");
        ERROR_RECOVER(HCI_DRV_TOO_MANY_PACKETS);
   152d2:	4814      	ldr	r0, [pc, #80]	; (15324 <HciDrvHandler+0x274>)
   152d4:	f7ff fcb0 	bl	14c38 <error_check>
   152d8:	f7ff fdc2 	bl	14e60 <HciDrvRadioShutdown>
   152dc:	2000      	movs	r0, #0
   152de:	f7ff fcc7 	bl	14c70 <HciDrvRadioBoot>
   152e2:	f000 f821 	bl	15328 <HciDrvEmptyWriteQueue>
   152e6:	f7fa fc79 	bl	fbdc <DmDevReset>
   152ea:	bf00      	nop
    }

    am_hal_debug_gpio_clear(BLE_DEBUG_TRACE_01);
}
   152ec:	3728      	adds	r7, #40	; 0x28
   152ee:	46bd      	mov	sp, r7
   152f0:	bd80      	pop	{r7, pc}
   152f2:	bf00      	nop
   152f4:	100097a0 	.word	0x100097a0
   152f8:	10003fe8 	.word	0x10003fe8
   152fc:	10003fec 	.word	0x10003fec
   15300:	10002bb4 	.word	0x10002bb4
   15304:	10003fe4 	.word	0x10003fe4
   15308:	5000c000 	.word	0x5000c000
   1530c:	10003ff0 	.word	0x10003ff0
   15310:	1000a0d0 	.word	0x1000a0d0
   15314:	100097b0 	.word	0x100097b0
   15318:	09000002 	.word	0x09000002
   1531c:	00023bd4 	.word	0x00023bd4
   15320:	10009788 	.word	0x10009788
   15324:	09000006 	.word	0x09000006

00015328 <HciDrvEmptyWriteQueue>:
// Clear the HCI write queue
//
//*****************************************************************************
void
HciDrvEmptyWriteQueue(void)
{
   15328:	b580      	push	{r7, lr}
   1532a:	af00      	add	r7, sp, #0
    am_hal_queue_from_array(&g_sWriteQueue, g_psWriteBuffers);
   1532c:	4804      	ldr	r0, [pc, #16]	; (15340 <HciDrvEmptyWriteQueue+0x18>)
   1532e:	4905      	ldr	r1, [pc, #20]	; (15344 <HciDrvEmptyWriteQueue+0x1c>)
   15330:	f44f 7282 	mov.w	r2, #260	; 0x104
   15334:	f44f 6302 	mov.w	r3, #2080	; 0x820
   15338:	f00e f8ca 	bl	234d0 <am_hal_queue_init>
}
   1533c:	bd80      	pop	{r7, pc}
   1533e:	bf00      	nop
   15340:	10009788 	.word	0x10009788
   15344:	100098b0 	.word	0x100098b0

00015348 <hciCmdAlloc>:
 *
 *  \return Pointer to WSF msg buffer.
 */
/*************************************************************************************************/
uint8_t *hciCmdAlloc(uint16_t opcode, uint16_t len)
{
   15348:	b580      	push	{r7, lr}
   1534a:	b084      	sub	sp, #16
   1534c:	af00      	add	r7, sp, #0
   1534e:	4603      	mov	r3, r0
   15350:	460a      	mov	r2, r1
   15352:	80fb      	strh	r3, [r7, #6]
   15354:	4613      	mov	r3, r2
   15356:	80bb      	strh	r3, [r7, #4]
  uint8_t   *p;

  /* allocate buffer */
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   15358:	88bb      	ldrh	r3, [r7, #4]
   1535a:	3303      	adds	r3, #3
   1535c:	b29b      	uxth	r3, r3
   1535e:	4618      	mov	r0, r3
   15360:	f003 feec 	bl	1913c <WsfMsgAlloc>
   15364:	60f8      	str	r0, [r7, #12]
   15366:	68fb      	ldr	r3, [r7, #12]
   15368:	2b00      	cmp	r3, #0
   1536a:	d016      	beq.n	1539a <hciCmdAlloc+0x52>
  {
    /* set HCI command header */
    UINT16_TO_BSTREAM(p, opcode);
   1536c:	68fb      	ldr	r3, [r7, #12]
   1536e:	1c5a      	adds	r2, r3, #1
   15370:	60fa      	str	r2, [r7, #12]
   15372:	88fa      	ldrh	r2, [r7, #6]
   15374:	b2d2      	uxtb	r2, r2
   15376:	701a      	strb	r2, [r3, #0]
   15378:	68fb      	ldr	r3, [r7, #12]
   1537a:	1c5a      	adds	r2, r3, #1
   1537c:	60fa      	str	r2, [r7, #12]
   1537e:	88fa      	ldrh	r2, [r7, #6]
   15380:	0a12      	lsrs	r2, r2, #8
   15382:	b292      	uxth	r2, r2
   15384:	b2d2      	uxtb	r2, r2
   15386:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, len);
   15388:	68fb      	ldr	r3, [r7, #12]
   1538a:	1c5a      	adds	r2, r3, #1
   1538c:	60fa      	str	r2, [r7, #12]
   1538e:	88ba      	ldrh	r2, [r7, #4]
   15390:	b2d2      	uxtb	r2, r2
   15392:	701a      	strb	r2, [r3, #0]
    p -= HCI_CMD_HDR_LEN;
   15394:	68fb      	ldr	r3, [r7, #12]
   15396:	3b03      	subs	r3, #3
   15398:	60fb      	str	r3, [r7, #12]
  }

  return p;
   1539a:	68fb      	ldr	r3, [r7, #12]
}
   1539c:	4618      	mov	r0, r3
   1539e:	3710      	adds	r7, #16
   153a0:	46bd      	mov	sp, r7
   153a2:	bd80      	pop	{r7, pc}

000153a4 <hciCmdSend>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdSend(uint8_t *pData)
{
   153a4:	b580      	push	{r7, lr}
   153a6:	b084      	sub	sp, #16
   153a8:	af00      	add	r7, sp, #0
   153aa:	6078      	str	r0, [r7, #4]
  uint8_t         *p;
  wsfHandlerId_t  handlerId;

  /* queue command if present */
  if (pData != NULL)
   153ac:	687b      	ldr	r3, [r7, #4]
   153ae:	2b00      	cmp	r3, #0
   153b0:	d004      	beq.n	153bc <hciCmdSend+0x18>
  {
    /* queue data - message handler ID 'handerId' not used */
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   153b2:	4818      	ldr	r0, [pc, #96]	; (15414 <hciCmdSend+0x70>)
   153b4:	2100      	movs	r1, #0
   153b6:	687a      	ldr	r2, [r7, #4]
   153b8:	f003 fefe 	bl	191b8 <WsfMsgEnq>
  }

  /* service the HCI command queue; first check if controller can accept any commands */
  if (hciCmdCb.numCmdPkts > 0)
   153bc:	4b16      	ldr	r3, [pc, #88]	; (15418 <hciCmdSend+0x74>)
   153be:	7e9b      	ldrb	r3, [r3, #26]
   153c0:	2b00      	cmp	r3, #0
   153c2:	d023      	beq.n	1540c <hciCmdSend+0x68>
  {
    /* if queue not empty */
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   153c4:	f107 030b 	add.w	r3, r7, #11
   153c8:	4812      	ldr	r0, [pc, #72]	; (15414 <hciCmdSend+0x70>)
   153ca:	4619      	mov	r1, r3
   153cc:	f003 ff08 	bl	191e0 <WsfMsgDeq>
   153d0:	60f8      	str	r0, [r7, #12]
   153d2:	68fb      	ldr	r3, [r7, #12]
   153d4:	2b00      	cmp	r3, #0
   153d6:	d019      	beq.n	1540c <hciCmdSend+0x68>
    {
      /* decrement controller command packet count */
      hciCmdCb.numCmdPkts--;
   153d8:	4b0f      	ldr	r3, [pc, #60]	; (15418 <hciCmdSend+0x74>)
   153da:	7e9b      	ldrb	r3, [r3, #26]
   153dc:	3b01      	subs	r3, #1
   153de:	b2da      	uxtb	r2, r3
   153e0:	4b0d      	ldr	r3, [pc, #52]	; (15418 <hciCmdSend+0x74>)
   153e2:	769a      	strb	r2, [r3, #26]

      /* store opcode of command we're sending */
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   153e4:	68fb      	ldr	r3, [r7, #12]
   153e6:	781b      	ldrb	r3, [r3, #0]
   153e8:	b29a      	uxth	r2, r3
   153ea:	68fb      	ldr	r3, [r7, #12]
   153ec:	3301      	adds	r3, #1
   153ee:	781b      	ldrb	r3, [r3, #0]
   153f0:	b29b      	uxth	r3, r3
   153f2:	021b      	lsls	r3, r3, #8
   153f4:	b29b      	uxth	r3, r3
   153f6:	4413      	add	r3, r2
   153f8:	b29a      	uxth	r2, r3
   153fa:	4b07      	ldr	r3, [pc, #28]	; (15418 <hciCmdSend+0x74>)
   153fc:	831a      	strh	r2, [r3, #24]

      /* start command timeout */
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   153fe:	4806      	ldr	r0, [pc, #24]	; (15418 <hciCmdSend+0x74>)
   15400:	210a      	movs	r1, #10
   15402:	f004 f84d 	bl	194a0 <WsfTimerStartSec>

      /* send command to transport */
      hciTrSendCmd(p);
   15406:	68f8      	ldr	r0, [r7, #12]
   15408:	f003 fa78 	bl	188fc <hciTrSendCmd>
    }
  }
}
   1540c:	3710      	adds	r7, #16
   1540e:	46bd      	mov	sp, r7
   15410:	bd80      	pop	{r7, pc}
   15412:	bf00      	nop
   15414:	1000a0f4 	.word	0x1000a0f4
   15418:	1000a0e4 	.word	0x1000a0e4

0001541c <hciCmdInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdInit(void)
{
   1541c:	b480      	push	{r7}
   1541e:	af00      	add	r7, sp, #0
  WSF_QUEUE_INIT(&hciCmdCb.cmdQueue);
   15420:	4b09      	ldr	r3, [pc, #36]	; (15448 <hciCmdInit+0x2c>)
   15422:	2200      	movs	r2, #0
   15424:	611a      	str	r2, [r3, #16]
   15426:	4b08      	ldr	r3, [pc, #32]	; (15448 <hciCmdInit+0x2c>)
   15428:	2200      	movs	r2, #0
   1542a:	615a      	str	r2, [r3, #20]

  /* initialize numCmdPkts for special case of first command */
  hciCmdCb.numCmdPkts = 1;
   1542c:	4b06      	ldr	r3, [pc, #24]	; (15448 <hciCmdInit+0x2c>)
   1542e:	2201      	movs	r2, #1
   15430:	769a      	strb	r2, [r3, #26]

  /* initialize timer */
  hciCmdCb.cmdTimer.msg.event = HCI_MSG_CMD_TIMEOUT;
   15432:	4b05      	ldr	r3, [pc, #20]	; (15448 <hciCmdInit+0x2c>)
   15434:	2201      	movs	r2, #1
   15436:	731a      	strb	r2, [r3, #12]
  hciCmdCb.cmdTimer.handlerId = hciCb.handlerId;
   15438:	4b04      	ldr	r3, [pc, #16]	; (1544c <hciCmdInit+0x30>)
   1543a:	7e1a      	ldrb	r2, [r3, #24]
   1543c:	4b02      	ldr	r3, [pc, #8]	; (15448 <hciCmdInit+0x2c>)
   1543e:	721a      	strb	r2, [r3, #8]
}
   15440:	46bd      	mov	sp, r7
   15442:	f85d 7b04 	ldr.w	r7, [sp], #4
   15446:	4770      	bx	lr
   15448:	1000a0e4 	.word	0x1000a0e4
   1544c:	1000916c 	.word	0x1000916c

00015450 <hciCmdTimeout>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdTimeout(wsfMsgHdr_t *pMsg)
{
   15450:	b580      	push	{r7, lr}
   15452:	b082      	sub	sp, #8
   15454:	af00      	add	r7, sp, #0
   15456:	6078      	str	r0, [r7, #4]
  HCI_TRACE_INFO0("hciCmdTimeout");
  // When it times out, pretty much we have to
  // reset/reboot controller and initialize HCI
  // layer and SPI transport layer again.

  HciDrvRadioShutdown();
   15458:	f7ff fd02 	bl	14e60 <HciDrvRadioShutdown>
  HciDrvRadioBoot(0);
   1545c:	2000      	movs	r0, #0
   1545e:	f7ff fc07 	bl	14c70 <HciDrvRadioBoot>
  DmDevReset();
   15462:	f7fa fbbb 	bl	fbdc <DmDevReset>
}
   15466:	3708      	adds	r7, #8
   15468:	46bd      	mov	sp, r7
   1546a:	bd80      	pop	{r7, pc}

0001546c <hciCmdRecvCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdRecvCmpl(uint8_t numCmdPkts)
{
   1546c:	b580      	push	{r7, lr}
   1546e:	b082      	sub	sp, #8
   15470:	af00      	add	r7, sp, #0
   15472:	4603      	mov	r3, r0
   15474:	71fb      	strb	r3, [r7, #7]
  /* stop the command timeout timer */
  WsfTimerStop(&hciCmdCb.cmdTimer);
   15476:	4806      	ldr	r0, [pc, #24]	; (15490 <hciCmdRecvCmpl+0x24>)
   15478:	f004 f836 	bl	194e8 <WsfTimerStop>
  /*
   * Set the number of commands that can be sent to the controller.  Setting this
   * to 1 rather than incrementing by numCmdPkts allows only one command at a time to
   * be sent to the controller and simplifies the code.
   */
  hciCmdCb.numCmdPkts = 1;
   1547c:	4b04      	ldr	r3, [pc, #16]	; (15490 <hciCmdRecvCmpl+0x24>)
   1547e:	2201      	movs	r2, #1
   15480:	769a      	strb	r2, [r3, #26]

  /* send the next queued command */
  hciCmdSend(NULL);
   15482:	2000      	movs	r0, #0
   15484:	f7ff ff8e 	bl	153a4 <hciCmdSend>
}
   15488:	3708      	adds	r7, #8
   1548a:	46bd      	mov	sp, r7
   1548c:	bd80      	pop	{r7, pc}
   1548e:	bf00      	nop
   15490:	1000a0e4 	.word	0x1000a0e4

00015494 <HciDisconnectCmd>:
 *
 *  \brief  HCI disconnect command.
 */
/*************************************************************************************************/
void HciDisconnectCmd(uint16_t handle, uint8_t reason)
{
   15494:	b580      	push	{r7, lr}
   15496:	b084      	sub	sp, #16
   15498:	af00      	add	r7, sp, #0
   1549a:	4603      	mov	r3, r0
   1549c:	460a      	mov	r2, r1
   1549e:	80fb      	strh	r3, [r7, #6]
   154a0:	4613      	mov	r3, r2
   154a2:	717b      	strb	r3, [r7, #5]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_DISCONNECT, HCI_LEN_DISCONNECT)) != NULL)
   154a4:	f240 4006 	movw	r0, #1030	; 0x406
   154a8:	2103      	movs	r1, #3
   154aa:	f7ff ff4d 	bl	15348 <hciCmdAlloc>
   154ae:	60f8      	str	r0, [r7, #12]
   154b0:	68fb      	ldr	r3, [r7, #12]
   154b2:	2b00      	cmp	r3, #0
   154b4:	d018      	beq.n	154e8 <HciDisconnectCmd+0x54>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   154b6:	68fb      	ldr	r3, [r7, #12]
   154b8:	3303      	adds	r3, #3
   154ba:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   154bc:	68bb      	ldr	r3, [r7, #8]
   154be:	1c5a      	adds	r2, r3, #1
   154c0:	60ba      	str	r2, [r7, #8]
   154c2:	88fa      	ldrh	r2, [r7, #6]
   154c4:	b2d2      	uxtb	r2, r2
   154c6:	701a      	strb	r2, [r3, #0]
   154c8:	68bb      	ldr	r3, [r7, #8]
   154ca:	1c5a      	adds	r2, r3, #1
   154cc:	60ba      	str	r2, [r7, #8]
   154ce:	88fa      	ldrh	r2, [r7, #6]
   154d0:	0a12      	lsrs	r2, r2, #8
   154d2:	b292      	uxth	r2, r2
   154d4:	b2d2      	uxtb	r2, r2
   154d6:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, reason);
   154d8:	68bb      	ldr	r3, [r7, #8]
   154da:	1c5a      	adds	r2, r3, #1
   154dc:	60ba      	str	r2, [r7, #8]
   154de:	797a      	ldrb	r2, [r7, #5]
   154e0:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   154e2:	68f8      	ldr	r0, [r7, #12]
   154e4:	f7ff ff5e 	bl	153a4 <hciCmdSend>
  }
}
   154e8:	3710      	adds	r7, #16
   154ea:	46bd      	mov	sp, r7
   154ec:	bd80      	pop	{r7, pc}
   154ee:	bf00      	nop

000154f0 <HciLeAddDevWhiteListCmd>:
 *
 *  \brief  HCI LE add device white list command.
 */
/*************************************************************************************************/
void HciLeAddDevWhiteListCmd(uint8_t addrType, uint8_t *pAddr)
{
   154f0:	b580      	push	{r7, lr}
   154f2:	b084      	sub	sp, #16
   154f4:	af00      	add	r7, sp, #0
   154f6:	4603      	mov	r3, r0
   154f8:	6039      	str	r1, [r7, #0]
   154fa:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_ADD_DEV_WHITE_LIST, HCI_LEN_LE_ADD_DEV_WHITE_LIST)) != NULL)
   154fc:	f242 0011 	movw	r0, #8209	; 0x2011
   15500:	2107      	movs	r1, #7
   15502:	f7ff ff21 	bl	15348 <hciCmdAlloc>
   15506:	60f8      	str	r0, [r7, #12]
   15508:	68fb      	ldr	r3, [r7, #12]
   1550a:	2b00      	cmp	r3, #0
   1550c:	d011      	beq.n	15532 <HciLeAddDevWhiteListCmd+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1550e:	68fb      	ldr	r3, [r7, #12]
   15510:	3303      	adds	r3, #3
   15512:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, addrType);
   15514:	68bb      	ldr	r3, [r7, #8]
   15516:	1c5a      	adds	r2, r3, #1
   15518:	60ba      	str	r2, [r7, #8]
   1551a:	79fa      	ldrb	r2, [r7, #7]
   1551c:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pAddr);
   1551e:	68b8      	ldr	r0, [r7, #8]
   15520:	6839      	ldr	r1, [r7, #0]
   15522:	f7fd fc93 	bl	12e4c <BdaCpy>
   15526:	68bb      	ldr	r3, [r7, #8]
   15528:	3306      	adds	r3, #6
   1552a:	60bb      	str	r3, [r7, #8]
    hciCmdSend(pBuf);
   1552c:	68f8      	ldr	r0, [r7, #12]
   1552e:	f7ff ff39 	bl	153a4 <hciCmdSend>
  }
}
   15532:	3710      	adds	r7, #16
   15534:	46bd      	mov	sp, r7
   15536:	bd80      	pop	{r7, pc}

00015538 <HciLeClearWhiteListCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeClearWhiteListCmd(void)
{
   15538:	b580      	push	{r7, lr}
   1553a:	b082      	sub	sp, #8
   1553c:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_CLEAR_WHITE_LIST, HCI_LEN_LE_CLEAR_WHITE_LIST)) != NULL)
   1553e:	f242 0010 	movw	r0, #8208	; 0x2010
   15542:	2100      	movs	r1, #0
   15544:	f7ff ff00 	bl	15348 <hciCmdAlloc>
   15548:	6078      	str	r0, [r7, #4]
   1554a:	687b      	ldr	r3, [r7, #4]
   1554c:	2b00      	cmp	r3, #0
   1554e:	d002      	beq.n	15556 <HciLeClearWhiteListCmd+0x1e>
  {
    hciCmdSend(pBuf);
   15550:	6878      	ldr	r0, [r7, #4]
   15552:	f7ff ff27 	bl	153a4 <hciCmdSend>
  }
}
   15556:	3708      	adds	r7, #8
   15558:	46bd      	mov	sp, r7
   1555a:	bd80      	pop	{r7, pc}

0001555c <HciLeConnUpdateCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeConnUpdateCmd(uint16_t handle, hciConnSpec_t *pConnSpec)
{
   1555c:	b580      	push	{r7, lr}
   1555e:	b084      	sub	sp, #16
   15560:	af00      	add	r7, sp, #0
   15562:	4603      	mov	r3, r0
   15564:	6039      	str	r1, [r7, #0]
   15566:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_CONN_UPDATE, HCI_LEN_LE_CONN_UPDATE)) != NULL)
   15568:	f242 0013 	movw	r0, #8211	; 0x2013
   1556c:	210e      	movs	r1, #14
   1556e:	f7ff feeb 	bl	15348 <hciCmdAlloc>
   15572:	60f8      	str	r0, [r7, #12]
   15574:	68fb      	ldr	r3, [r7, #12]
   15576:	2b00      	cmp	r3, #0
   15578:	d073      	beq.n	15662 <HciLeConnUpdateCmd+0x106>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1557a:	68fb      	ldr	r3, [r7, #12]
   1557c:	3303      	adds	r3, #3
   1557e:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   15580:	68bb      	ldr	r3, [r7, #8]
   15582:	1c5a      	adds	r2, r3, #1
   15584:	60ba      	str	r2, [r7, #8]
   15586:	88fa      	ldrh	r2, [r7, #6]
   15588:	b2d2      	uxtb	r2, r2
   1558a:	701a      	strb	r2, [r3, #0]
   1558c:	68bb      	ldr	r3, [r7, #8]
   1558e:	1c5a      	adds	r2, r3, #1
   15590:	60ba      	str	r2, [r7, #8]
   15592:	88fa      	ldrh	r2, [r7, #6]
   15594:	0a12      	lsrs	r2, r2, #8
   15596:	b292      	uxth	r2, r2
   15598:	b2d2      	uxtb	r2, r2
   1559a:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMin);
   1559c:	68bb      	ldr	r3, [r7, #8]
   1559e:	1c5a      	adds	r2, r3, #1
   155a0:	60ba      	str	r2, [r7, #8]
   155a2:	683a      	ldr	r2, [r7, #0]
   155a4:	8812      	ldrh	r2, [r2, #0]
   155a6:	b2d2      	uxtb	r2, r2
   155a8:	701a      	strb	r2, [r3, #0]
   155aa:	68bb      	ldr	r3, [r7, #8]
   155ac:	1c5a      	adds	r2, r3, #1
   155ae:	60ba      	str	r2, [r7, #8]
   155b0:	683a      	ldr	r2, [r7, #0]
   155b2:	8812      	ldrh	r2, [r2, #0]
   155b4:	0a12      	lsrs	r2, r2, #8
   155b6:	b292      	uxth	r2, r2
   155b8:	b2d2      	uxtb	r2, r2
   155ba:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMax);
   155bc:	68bb      	ldr	r3, [r7, #8]
   155be:	1c5a      	adds	r2, r3, #1
   155c0:	60ba      	str	r2, [r7, #8]
   155c2:	683a      	ldr	r2, [r7, #0]
   155c4:	8852      	ldrh	r2, [r2, #2]
   155c6:	b2d2      	uxtb	r2, r2
   155c8:	701a      	strb	r2, [r3, #0]
   155ca:	68bb      	ldr	r3, [r7, #8]
   155cc:	1c5a      	adds	r2, r3, #1
   155ce:	60ba      	str	r2, [r7, #8]
   155d0:	683a      	ldr	r2, [r7, #0]
   155d2:	8852      	ldrh	r2, [r2, #2]
   155d4:	0a12      	lsrs	r2, r2, #8
   155d6:	b292      	uxth	r2, r2
   155d8:	b2d2      	uxtb	r2, r2
   155da:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->connLatency);
   155dc:	68bb      	ldr	r3, [r7, #8]
   155de:	1c5a      	adds	r2, r3, #1
   155e0:	60ba      	str	r2, [r7, #8]
   155e2:	683a      	ldr	r2, [r7, #0]
   155e4:	8892      	ldrh	r2, [r2, #4]
   155e6:	b2d2      	uxtb	r2, r2
   155e8:	701a      	strb	r2, [r3, #0]
   155ea:	68bb      	ldr	r3, [r7, #8]
   155ec:	1c5a      	adds	r2, r3, #1
   155ee:	60ba      	str	r2, [r7, #8]
   155f0:	683a      	ldr	r2, [r7, #0]
   155f2:	8892      	ldrh	r2, [r2, #4]
   155f4:	0a12      	lsrs	r2, r2, #8
   155f6:	b292      	uxth	r2, r2
   155f8:	b2d2      	uxtb	r2, r2
   155fa:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->supTimeout);
   155fc:	68bb      	ldr	r3, [r7, #8]
   155fe:	1c5a      	adds	r2, r3, #1
   15600:	60ba      	str	r2, [r7, #8]
   15602:	683a      	ldr	r2, [r7, #0]
   15604:	88d2      	ldrh	r2, [r2, #6]
   15606:	b2d2      	uxtb	r2, r2
   15608:	701a      	strb	r2, [r3, #0]
   1560a:	68bb      	ldr	r3, [r7, #8]
   1560c:	1c5a      	adds	r2, r3, #1
   1560e:	60ba      	str	r2, [r7, #8]
   15610:	683a      	ldr	r2, [r7, #0]
   15612:	88d2      	ldrh	r2, [r2, #6]
   15614:	0a12      	lsrs	r2, r2, #8
   15616:	b292      	uxth	r2, r2
   15618:	b2d2      	uxtb	r2, r2
   1561a:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->minCeLen);
   1561c:	68bb      	ldr	r3, [r7, #8]
   1561e:	1c5a      	adds	r2, r3, #1
   15620:	60ba      	str	r2, [r7, #8]
   15622:	683a      	ldr	r2, [r7, #0]
   15624:	8912      	ldrh	r2, [r2, #8]
   15626:	b2d2      	uxtb	r2, r2
   15628:	701a      	strb	r2, [r3, #0]
   1562a:	68bb      	ldr	r3, [r7, #8]
   1562c:	1c5a      	adds	r2, r3, #1
   1562e:	60ba      	str	r2, [r7, #8]
   15630:	683a      	ldr	r2, [r7, #0]
   15632:	8912      	ldrh	r2, [r2, #8]
   15634:	0a12      	lsrs	r2, r2, #8
   15636:	b292      	uxth	r2, r2
   15638:	b2d2      	uxtb	r2, r2
   1563a:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->maxCeLen);
   1563c:	68bb      	ldr	r3, [r7, #8]
   1563e:	1c5a      	adds	r2, r3, #1
   15640:	60ba      	str	r2, [r7, #8]
   15642:	683a      	ldr	r2, [r7, #0]
   15644:	8952      	ldrh	r2, [r2, #10]
   15646:	b2d2      	uxtb	r2, r2
   15648:	701a      	strb	r2, [r3, #0]
   1564a:	68bb      	ldr	r3, [r7, #8]
   1564c:	1c5a      	adds	r2, r3, #1
   1564e:	60ba      	str	r2, [r7, #8]
   15650:	683a      	ldr	r2, [r7, #0]
   15652:	8952      	ldrh	r2, [r2, #10]
   15654:	0a12      	lsrs	r2, r2, #8
   15656:	b292      	uxth	r2, r2
   15658:	b2d2      	uxtb	r2, r2
   1565a:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   1565c:	68f8      	ldr	r0, [r7, #12]
   1565e:	f7ff fea1 	bl	153a4 <hciCmdSend>
  }
}
   15662:	3710      	adds	r7, #16
   15664:	46bd      	mov	sp, r7
   15666:	bd80      	pop	{r7, pc}

00015668 <HciLeRemoteConnParamReqReply>:
*  \return None.
*/
/*************************************************************************************************/
void HciLeRemoteConnParamReqReply(uint16_t handle, uint16_t intervalMin, uint16_t intervalMax, uint16_t latency,
                                  uint16_t timeout, uint16_t minCeLen, uint16_t maxCeLen)
{
   15668:	b590      	push	{r4, r7, lr}
   1566a:	b085      	sub	sp, #20
   1566c:	af00      	add	r7, sp, #0
   1566e:	4604      	mov	r4, r0
   15670:	4608      	mov	r0, r1
   15672:	4611      	mov	r1, r2
   15674:	461a      	mov	r2, r3
   15676:	4623      	mov	r3, r4
   15678:	80fb      	strh	r3, [r7, #6]
   1567a:	4603      	mov	r3, r0
   1567c:	80bb      	strh	r3, [r7, #4]
   1567e:	460b      	mov	r3, r1
   15680:	807b      	strh	r3, [r7, #2]
   15682:	4613      	mov	r3, r2
   15684:	803b      	strh	r3, [r7, #0]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_REM_CONN_PARAM_REP, HCI_LEN_LE_REM_CONN_PARAM_REP)) != NULL)
   15686:	f242 0020 	movw	r0, #8224	; 0x2020
   1568a:	210e      	movs	r1, #14
   1568c:	f7ff fe5c 	bl	15348 <hciCmdAlloc>
   15690:	60f8      	str	r0, [r7, #12]
   15692:	68fb      	ldr	r3, [r7, #12]
   15694:	2b00      	cmp	r3, #0
   15696:	d067      	beq.n	15768 <HciLeRemoteConnParamReqReply+0x100>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   15698:	68fb      	ldr	r3, [r7, #12]
   1569a:	3303      	adds	r3, #3
   1569c:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   1569e:	68bb      	ldr	r3, [r7, #8]
   156a0:	1c5a      	adds	r2, r3, #1
   156a2:	60ba      	str	r2, [r7, #8]
   156a4:	88fa      	ldrh	r2, [r7, #6]
   156a6:	b2d2      	uxtb	r2, r2
   156a8:	701a      	strb	r2, [r3, #0]
   156aa:	68bb      	ldr	r3, [r7, #8]
   156ac:	1c5a      	adds	r2, r3, #1
   156ae:	60ba      	str	r2, [r7, #8]
   156b0:	88fa      	ldrh	r2, [r7, #6]
   156b2:	0a12      	lsrs	r2, r2, #8
   156b4:	b292      	uxth	r2, r2
   156b6:	b2d2      	uxtb	r2, r2
   156b8:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, intervalMin);
   156ba:	68bb      	ldr	r3, [r7, #8]
   156bc:	1c5a      	adds	r2, r3, #1
   156be:	60ba      	str	r2, [r7, #8]
   156c0:	88ba      	ldrh	r2, [r7, #4]
   156c2:	b2d2      	uxtb	r2, r2
   156c4:	701a      	strb	r2, [r3, #0]
   156c6:	68bb      	ldr	r3, [r7, #8]
   156c8:	1c5a      	adds	r2, r3, #1
   156ca:	60ba      	str	r2, [r7, #8]
   156cc:	88ba      	ldrh	r2, [r7, #4]
   156ce:	0a12      	lsrs	r2, r2, #8
   156d0:	b292      	uxth	r2, r2
   156d2:	b2d2      	uxtb	r2, r2
   156d4:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, intervalMax);
   156d6:	68bb      	ldr	r3, [r7, #8]
   156d8:	1c5a      	adds	r2, r3, #1
   156da:	60ba      	str	r2, [r7, #8]
   156dc:	887a      	ldrh	r2, [r7, #2]
   156de:	b2d2      	uxtb	r2, r2
   156e0:	701a      	strb	r2, [r3, #0]
   156e2:	68bb      	ldr	r3, [r7, #8]
   156e4:	1c5a      	adds	r2, r3, #1
   156e6:	60ba      	str	r2, [r7, #8]
   156e8:	887a      	ldrh	r2, [r7, #2]
   156ea:	0a12      	lsrs	r2, r2, #8
   156ec:	b292      	uxth	r2, r2
   156ee:	b2d2      	uxtb	r2, r2
   156f0:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, latency);
   156f2:	68bb      	ldr	r3, [r7, #8]
   156f4:	1c5a      	adds	r2, r3, #1
   156f6:	60ba      	str	r2, [r7, #8]
   156f8:	883a      	ldrh	r2, [r7, #0]
   156fa:	b2d2      	uxtb	r2, r2
   156fc:	701a      	strb	r2, [r3, #0]
   156fe:	68bb      	ldr	r3, [r7, #8]
   15700:	1c5a      	adds	r2, r3, #1
   15702:	60ba      	str	r2, [r7, #8]
   15704:	883a      	ldrh	r2, [r7, #0]
   15706:	0a12      	lsrs	r2, r2, #8
   15708:	b292      	uxth	r2, r2
   1570a:	b2d2      	uxtb	r2, r2
   1570c:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, timeout);
   1570e:	68bb      	ldr	r3, [r7, #8]
   15710:	1c5a      	adds	r2, r3, #1
   15712:	60ba      	str	r2, [r7, #8]
   15714:	8c3a      	ldrh	r2, [r7, #32]
   15716:	b2d2      	uxtb	r2, r2
   15718:	701a      	strb	r2, [r3, #0]
   1571a:	68bb      	ldr	r3, [r7, #8]
   1571c:	1c5a      	adds	r2, r3, #1
   1571e:	60ba      	str	r2, [r7, #8]
   15720:	8c3a      	ldrh	r2, [r7, #32]
   15722:	0a12      	lsrs	r2, r2, #8
   15724:	b292      	uxth	r2, r2
   15726:	b2d2      	uxtb	r2, r2
   15728:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, minCeLen);
   1572a:	68bb      	ldr	r3, [r7, #8]
   1572c:	1c5a      	adds	r2, r3, #1
   1572e:	60ba      	str	r2, [r7, #8]
   15730:	8cba      	ldrh	r2, [r7, #36]	; 0x24
   15732:	b2d2      	uxtb	r2, r2
   15734:	701a      	strb	r2, [r3, #0]
   15736:	68bb      	ldr	r3, [r7, #8]
   15738:	1c5a      	adds	r2, r3, #1
   1573a:	60ba      	str	r2, [r7, #8]
   1573c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
   1573e:	0a12      	lsrs	r2, r2, #8
   15740:	b292      	uxth	r2, r2
   15742:	b2d2      	uxtb	r2, r2
   15744:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, maxCeLen);
   15746:	68bb      	ldr	r3, [r7, #8]
   15748:	1c5a      	adds	r2, r3, #1
   1574a:	60ba      	str	r2, [r7, #8]
   1574c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
   1574e:	b2d2      	uxtb	r2, r2
   15750:	701a      	strb	r2, [r3, #0]
   15752:	68bb      	ldr	r3, [r7, #8]
   15754:	1c5a      	adds	r2, r3, #1
   15756:	60ba      	str	r2, [r7, #8]
   15758:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
   1575a:	0a12      	lsrs	r2, r2, #8
   1575c:	b292      	uxth	r2, r2
   1575e:	b2d2      	uxtb	r2, r2
   15760:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   15762:	68f8      	ldr	r0, [r7, #12]
   15764:	f7ff fe1e 	bl	153a4 <hciCmdSend>
  }
}
   15768:	3714      	adds	r7, #20
   1576a:	46bd      	mov	sp, r7
   1576c:	bd90      	pop	{r4, r7, pc}
   1576e:	bf00      	nop

00015770 <HciLeRemoteConnParamReqNegReply>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeRemoteConnParamReqNegReply(uint16_t handle, uint8_t reason)
{
   15770:	b580      	push	{r7, lr}
   15772:	b084      	sub	sp, #16
   15774:	af00      	add	r7, sp, #0
   15776:	4603      	mov	r3, r0
   15778:	460a      	mov	r2, r1
   1577a:	80fb      	strh	r3, [r7, #6]
   1577c:	4613      	mov	r3, r2
   1577e:	717b      	strb	r3, [r7, #5]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_REM_CONN_PARAM_NEG_REP, HCI_LEN_LE_REM_CONN_PARAM_NEG_REP)) != NULL)
   15780:	f242 0021 	movw	r0, #8225	; 0x2021
   15784:	2103      	movs	r1, #3
   15786:	f7ff fddf 	bl	15348 <hciCmdAlloc>
   1578a:	60f8      	str	r0, [r7, #12]
   1578c:	68fb      	ldr	r3, [r7, #12]
   1578e:	2b00      	cmp	r3, #0
   15790:	d018      	beq.n	157c4 <HciLeRemoteConnParamReqNegReply+0x54>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   15792:	68fb      	ldr	r3, [r7, #12]
   15794:	3303      	adds	r3, #3
   15796:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   15798:	68bb      	ldr	r3, [r7, #8]
   1579a:	1c5a      	adds	r2, r3, #1
   1579c:	60ba      	str	r2, [r7, #8]
   1579e:	88fa      	ldrh	r2, [r7, #6]
   157a0:	b2d2      	uxtb	r2, r2
   157a2:	701a      	strb	r2, [r3, #0]
   157a4:	68bb      	ldr	r3, [r7, #8]
   157a6:	1c5a      	adds	r2, r3, #1
   157a8:	60ba      	str	r2, [r7, #8]
   157aa:	88fa      	ldrh	r2, [r7, #6]
   157ac:	0a12      	lsrs	r2, r2, #8
   157ae:	b292      	uxth	r2, r2
   157b0:	b2d2      	uxtb	r2, r2
   157b2:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, reason);
   157b4:	68bb      	ldr	r3, [r7, #8]
   157b6:	1c5a      	adds	r2, r3, #1
   157b8:	60ba      	str	r2, [r7, #8]
   157ba:	797a      	ldrb	r2, [r7, #5]
   157bc:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   157be:	68f8      	ldr	r0, [r7, #12]
   157c0:	f7ff fdf0 	bl	153a4 <hciCmdSend>
  }
}
   157c4:	3710      	adds	r7, #16
   157c6:	46bd      	mov	sp, r7
   157c8:	bd80      	pop	{r7, pc}
   157ca:	bf00      	nop

000157cc <HciLeSetDataLen>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeSetDataLen(uint16_t handle, uint16_t txOctets, uint16_t txTime)
{
   157cc:	b580      	push	{r7, lr}
   157ce:	b084      	sub	sp, #16
   157d0:	af00      	add	r7, sp, #0
   157d2:	4603      	mov	r3, r0
   157d4:	80fb      	strh	r3, [r7, #6]
   157d6:	460b      	mov	r3, r1
   157d8:	80bb      	strh	r3, [r7, #4]
   157da:	4613      	mov	r3, r2
   157dc:	807b      	strh	r3, [r7, #2]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_DATA_LEN, HCI_LEN_LE_SET_DATA_LEN)) != NULL)
   157de:	f242 0022 	movw	r0, #8226	; 0x2022
   157e2:	2106      	movs	r1, #6
   157e4:	f7ff fdb0 	bl	15348 <hciCmdAlloc>
   157e8:	60f8      	str	r0, [r7, #12]
   157ea:	68fb      	ldr	r3, [r7, #12]
   157ec:	2b00      	cmp	r3, #0
   157ee:	d02f      	beq.n	15850 <HciLeSetDataLen+0x84>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   157f0:	68fb      	ldr	r3, [r7, #12]
   157f2:	3303      	adds	r3, #3
   157f4:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   157f6:	68bb      	ldr	r3, [r7, #8]
   157f8:	1c5a      	adds	r2, r3, #1
   157fa:	60ba      	str	r2, [r7, #8]
   157fc:	88fa      	ldrh	r2, [r7, #6]
   157fe:	b2d2      	uxtb	r2, r2
   15800:	701a      	strb	r2, [r3, #0]
   15802:	68bb      	ldr	r3, [r7, #8]
   15804:	1c5a      	adds	r2, r3, #1
   15806:	60ba      	str	r2, [r7, #8]
   15808:	88fa      	ldrh	r2, [r7, #6]
   1580a:	0a12      	lsrs	r2, r2, #8
   1580c:	b292      	uxth	r2, r2
   1580e:	b2d2      	uxtb	r2, r2
   15810:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, txOctets);
   15812:	68bb      	ldr	r3, [r7, #8]
   15814:	1c5a      	adds	r2, r3, #1
   15816:	60ba      	str	r2, [r7, #8]
   15818:	88ba      	ldrh	r2, [r7, #4]
   1581a:	b2d2      	uxtb	r2, r2
   1581c:	701a      	strb	r2, [r3, #0]
   1581e:	68bb      	ldr	r3, [r7, #8]
   15820:	1c5a      	adds	r2, r3, #1
   15822:	60ba      	str	r2, [r7, #8]
   15824:	88ba      	ldrh	r2, [r7, #4]
   15826:	0a12      	lsrs	r2, r2, #8
   15828:	b292      	uxth	r2, r2
   1582a:	b2d2      	uxtb	r2, r2
   1582c:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, txTime);
   1582e:	68bb      	ldr	r3, [r7, #8]
   15830:	1c5a      	adds	r2, r3, #1
   15832:	60ba      	str	r2, [r7, #8]
   15834:	887a      	ldrh	r2, [r7, #2]
   15836:	b2d2      	uxtb	r2, r2
   15838:	701a      	strb	r2, [r3, #0]
   1583a:	68bb      	ldr	r3, [r7, #8]
   1583c:	1c5a      	adds	r2, r3, #1
   1583e:	60ba      	str	r2, [r7, #8]
   15840:	887a      	ldrh	r2, [r7, #2]
   15842:	0a12      	lsrs	r2, r2, #8
   15844:	b292      	uxth	r2, r2
   15846:	b2d2      	uxtb	r2, r2
   15848:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   1584a:	68f8      	ldr	r0, [r7, #12]
   1584c:	f7ff fdaa 	bl	153a4 <hciCmdSend>
  }
}
   15850:	3710      	adds	r7, #16
   15852:	46bd      	mov	sp, r7
   15854:	bd80      	pop	{r7, pc}
   15856:	bf00      	nop

00015858 <HciLeWriteDefDataLen>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeWriteDefDataLen(uint16_t suggestedMaxTxOctets, uint16_t suggestedMaxTxTime)
{
   15858:	b580      	push	{r7, lr}
   1585a:	b084      	sub	sp, #16
   1585c:	af00      	add	r7, sp, #0
   1585e:	4603      	mov	r3, r0
   15860:	460a      	mov	r2, r1
   15862:	80fb      	strh	r3, [r7, #6]
   15864:	4613      	mov	r3, r2
   15866:	80bb      	strh	r3, [r7, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_WRITE_DEF_DATA_LEN, HCI_LEN_LE_WRITE_DEF_DATA_LEN)) != NULL)
   15868:	f242 0024 	movw	r0, #8228	; 0x2024
   1586c:	2104      	movs	r1, #4
   1586e:	f7ff fd6b 	bl	15348 <hciCmdAlloc>
   15872:	60f8      	str	r0, [r7, #12]
   15874:	68fb      	ldr	r3, [r7, #12]
   15876:	2b00      	cmp	r3, #0
   15878:	d021      	beq.n	158be <HciLeWriteDefDataLen+0x66>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1587a:	68fb      	ldr	r3, [r7, #12]
   1587c:	3303      	adds	r3, #3
   1587e:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, suggestedMaxTxOctets);
   15880:	68bb      	ldr	r3, [r7, #8]
   15882:	1c5a      	adds	r2, r3, #1
   15884:	60ba      	str	r2, [r7, #8]
   15886:	88fa      	ldrh	r2, [r7, #6]
   15888:	b2d2      	uxtb	r2, r2
   1588a:	701a      	strb	r2, [r3, #0]
   1588c:	68bb      	ldr	r3, [r7, #8]
   1588e:	1c5a      	adds	r2, r3, #1
   15890:	60ba      	str	r2, [r7, #8]
   15892:	88fa      	ldrh	r2, [r7, #6]
   15894:	0a12      	lsrs	r2, r2, #8
   15896:	b292      	uxth	r2, r2
   15898:	b2d2      	uxtb	r2, r2
   1589a:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, suggestedMaxTxTime);
   1589c:	68bb      	ldr	r3, [r7, #8]
   1589e:	1c5a      	adds	r2, r3, #1
   158a0:	60ba      	str	r2, [r7, #8]
   158a2:	88ba      	ldrh	r2, [r7, #4]
   158a4:	b2d2      	uxtb	r2, r2
   158a6:	701a      	strb	r2, [r3, #0]
   158a8:	68bb      	ldr	r3, [r7, #8]
   158aa:	1c5a      	adds	r2, r3, #1
   158ac:	60ba      	str	r2, [r7, #8]
   158ae:	88ba      	ldrh	r2, [r7, #4]
   158b0:	0a12      	lsrs	r2, r2, #8
   158b2:	b292      	uxth	r2, r2
   158b4:	b2d2      	uxtb	r2, r2
   158b6:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   158b8:	68f8      	ldr	r0, [r7, #12]
   158ba:	f7ff fd73 	bl	153a4 <hciCmdSend>
  }
}
   158be:	3710      	adds	r7, #16
   158c0:	46bd      	mov	sp, r7
   158c2:	bd80      	pop	{r7, pc}

000158c4 <HciLeReadLocalP256PubKey>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeReadLocalP256PubKey(void)
{
   158c4:	b580      	push	{r7, lr}
   158c6:	b082      	sub	sp, #8
   158c8:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_LOCAL_P256_PUB_KEY, HCI_LEN_LE_READ_LOCAL_P256_PUB_KEY)) != NULL)
   158ca:	f242 0025 	movw	r0, #8229	; 0x2025
   158ce:	2100      	movs	r1, #0
   158d0:	f7ff fd3a 	bl	15348 <hciCmdAlloc>
   158d4:	6078      	str	r0, [r7, #4]
   158d6:	687b      	ldr	r3, [r7, #4]
   158d8:	2b00      	cmp	r3, #0
   158da:	d002      	beq.n	158e2 <HciLeReadLocalP256PubKey+0x1e>
  {
    hciCmdSend(pBuf);
   158dc:	6878      	ldr	r0, [r7, #4]
   158de:	f7ff fd61 	bl	153a4 <hciCmdSend>
  }
}
   158e2:	3708      	adds	r7, #8
   158e4:	46bd      	mov	sp, r7
   158e6:	bd80      	pop	{r7, pc}

000158e8 <HciLeGenerateDHKey>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeGenerateDHKey(uint8_t *pPubKeyX, uint8_t *pPubKeyY)
{
   158e8:	b580      	push	{r7, lr}
   158ea:	b084      	sub	sp, #16
   158ec:	af00      	add	r7, sp, #0
   158ee:	6078      	str	r0, [r7, #4]
   158f0:	6039      	str	r1, [r7, #0]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_GENERATE_DHKEY, HCI_LEN_LE_GENERATE_DHKEY)) != NULL)
   158f2:	f242 0026 	movw	r0, #8230	; 0x2026
   158f6:	2140      	movs	r1, #64	; 0x40
   158f8:	f7ff fd26 	bl	15348 <hciCmdAlloc>
   158fc:	60f8      	str	r0, [r7, #12]
   158fe:	68fb      	ldr	r3, [r7, #12]
   15900:	2b00      	cmp	r3, #0
   15902:	d011      	beq.n	15928 <HciLeGenerateDHKey+0x40>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   15904:	68fb      	ldr	r3, [r7, #12]
   15906:	3303      	adds	r3, #3
   15908:	60bb      	str	r3, [r7, #8]
    memcpy(p, pPubKeyX, HCI_DH_KEY_LEN);
   1590a:	68b8      	ldr	r0, [r7, #8]
   1590c:	6879      	ldr	r1, [r7, #4]
   1590e:	2220      	movs	r2, #32
   15910:	f7f6 fbf6 	bl	c100 <memcpy>
    memcpy(p + HCI_DH_KEY_LEN, pPubKeyY, HCI_DH_KEY_LEN);
   15914:	68bb      	ldr	r3, [r7, #8]
   15916:	3320      	adds	r3, #32
   15918:	4618      	mov	r0, r3
   1591a:	6839      	ldr	r1, [r7, #0]
   1591c:	2220      	movs	r2, #32
   1591e:	f7f6 fbef 	bl	c100 <memcpy>
    hciCmdSend(pBuf);
   15922:	68f8      	ldr	r0, [r7, #12]
   15924:	f7ff fd3e 	bl	153a4 <hciCmdSend>
  }
}
   15928:	3710      	adds	r7, #16
   1592a:	46bd      	mov	sp, r7
   1592c:	bd80      	pop	{r7, pc}
   1592e:	bf00      	nop

00015930 <HciLeReadMaxDataLen>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeReadMaxDataLen(void)
{
   15930:	b580      	push	{r7, lr}
   15932:	b082      	sub	sp, #8
   15934:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_MAX_DATA_LEN, HCI_LEN_LE_READ_MAX_DATA_LEN)) != NULL)
   15936:	f242 002f 	movw	r0, #8239	; 0x202f
   1593a:	2100      	movs	r1, #0
   1593c:	f7ff fd04 	bl	15348 <hciCmdAlloc>
   15940:	6078      	str	r0, [r7, #4]
   15942:	687b      	ldr	r3, [r7, #4]
   15944:	2b00      	cmp	r3, #0
   15946:	d002      	beq.n	1594e <HciLeReadMaxDataLen+0x1e>
  {
    hciCmdSend(pBuf);
   15948:	6878      	ldr	r0, [r7, #4]
   1594a:	f7ff fd2b 	bl	153a4 <hciCmdSend>
  }
}
   1594e:	3708      	adds	r7, #8
   15950:	46bd      	mov	sp, r7
   15952:	bd80      	pop	{r7, pc}

00015954 <HciLeEncryptCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeEncryptCmd(uint8_t *pKey, uint8_t *pData)
{
   15954:	b580      	push	{r7, lr}
   15956:	b084      	sub	sp, #16
   15958:	af00      	add	r7, sp, #0
   1595a:	6078      	str	r0, [r7, #4]
   1595c:	6039      	str	r1, [r7, #0]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_ENCRYPT, HCI_LEN_LE_ENCRYPT)) != NULL)
   1595e:	f242 0017 	movw	r0, #8215	; 0x2017
   15962:	2120      	movs	r1, #32
   15964:	f7ff fcf0 	bl	15348 <hciCmdAlloc>
   15968:	60f8      	str	r0, [r7, #12]
   1596a:	68fb      	ldr	r3, [r7, #12]
   1596c:	2b00      	cmp	r3, #0
   1596e:	d012      	beq.n	15996 <HciLeEncryptCmd+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   15970:	68fb      	ldr	r3, [r7, #12]
   15972:	3303      	adds	r3, #3
   15974:	60bb      	str	r3, [r7, #8]
    memcpy(p, pKey, HCI_KEY_LEN);
   15976:	68b8      	ldr	r0, [r7, #8]
   15978:	6879      	ldr	r1, [r7, #4]
   1597a:	2210      	movs	r2, #16
   1597c:	f7f6 fbc0 	bl	c100 <memcpy>
    p += HCI_KEY_LEN;
   15980:	68bb      	ldr	r3, [r7, #8]
   15982:	3310      	adds	r3, #16
   15984:	60bb      	str	r3, [r7, #8]
    memcpy(p, pData, HCI_ENCRYPT_DATA_LEN);
   15986:	68b8      	ldr	r0, [r7, #8]
   15988:	6839      	ldr	r1, [r7, #0]
   1598a:	2210      	movs	r2, #16
   1598c:	f7f6 fbb8 	bl	c100 <memcpy>
    hciCmdSend(pBuf);
   15990:	68f8      	ldr	r0, [r7, #12]
   15992:	f7ff fd07 	bl	153a4 <hciCmdSend>
  }
}
   15996:	3710      	adds	r7, #16
   15998:	46bd      	mov	sp, r7
   1599a:	bd80      	pop	{r7, pc}

0001599c <HciLeLtkReqNegReplCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeLtkReqNegReplCmd(uint16_t handle)
{
   1599c:	b580      	push	{r7, lr}
   1599e:	b084      	sub	sp, #16
   159a0:	af00      	add	r7, sp, #0
   159a2:	4603      	mov	r3, r0
   159a4:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_LTK_REQ_NEG_REPL, HCI_LEN_LE_LTK_REQ_NEG_REPL)) != NULL)
   159a6:	f242 001b 	movw	r0, #8219	; 0x201b
   159aa:	2102      	movs	r1, #2
   159ac:	f7ff fccc 	bl	15348 <hciCmdAlloc>
   159b0:	60f8      	str	r0, [r7, #12]
   159b2:	68fb      	ldr	r3, [r7, #12]
   159b4:	2b00      	cmp	r3, #0
   159b6:	d013      	beq.n	159e0 <HciLeLtkReqNegReplCmd+0x44>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   159b8:	68fb      	ldr	r3, [r7, #12]
   159ba:	3303      	adds	r3, #3
   159bc:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   159be:	68bb      	ldr	r3, [r7, #8]
   159c0:	1c5a      	adds	r2, r3, #1
   159c2:	60ba      	str	r2, [r7, #8]
   159c4:	88fa      	ldrh	r2, [r7, #6]
   159c6:	b2d2      	uxtb	r2, r2
   159c8:	701a      	strb	r2, [r3, #0]
   159ca:	68bb      	ldr	r3, [r7, #8]
   159cc:	1c5a      	adds	r2, r3, #1
   159ce:	60ba      	str	r2, [r7, #8]
   159d0:	88fa      	ldrh	r2, [r7, #6]
   159d2:	0a12      	lsrs	r2, r2, #8
   159d4:	b292      	uxth	r2, r2
   159d6:	b2d2      	uxtb	r2, r2
   159d8:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   159da:	68f8      	ldr	r0, [r7, #12]
   159dc:	f7ff fce2 	bl	153a4 <hciCmdSend>
  }
}
   159e0:	3710      	adds	r7, #16
   159e2:	46bd      	mov	sp, r7
   159e4:	bd80      	pop	{r7, pc}
   159e6:	bf00      	nop

000159e8 <HciLeLtkReqReplCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeLtkReqReplCmd(uint16_t handle, uint8_t *pKey)
{
   159e8:	b580      	push	{r7, lr}
   159ea:	b084      	sub	sp, #16
   159ec:	af00      	add	r7, sp, #0
   159ee:	4603      	mov	r3, r0
   159f0:	6039      	str	r1, [r7, #0]
   159f2:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_LTK_REQ_REPL, HCI_LEN_LE_LTK_REQ_REPL)) != NULL)
   159f4:	f242 001a 	movw	r0, #8218	; 0x201a
   159f8:	2112      	movs	r1, #18
   159fa:	f7ff fca5 	bl	15348 <hciCmdAlloc>
   159fe:	60f8      	str	r0, [r7, #12]
   15a00:	68fb      	ldr	r3, [r7, #12]
   15a02:	2b00      	cmp	r3, #0
   15a04:	d018      	beq.n	15a38 <HciLeLtkReqReplCmd+0x50>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   15a06:	68fb      	ldr	r3, [r7, #12]
   15a08:	3303      	adds	r3, #3
   15a0a:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   15a0c:	68bb      	ldr	r3, [r7, #8]
   15a0e:	1c5a      	adds	r2, r3, #1
   15a10:	60ba      	str	r2, [r7, #8]
   15a12:	88fa      	ldrh	r2, [r7, #6]
   15a14:	b2d2      	uxtb	r2, r2
   15a16:	701a      	strb	r2, [r3, #0]
   15a18:	68bb      	ldr	r3, [r7, #8]
   15a1a:	1c5a      	adds	r2, r3, #1
   15a1c:	60ba      	str	r2, [r7, #8]
   15a1e:	88fa      	ldrh	r2, [r7, #6]
   15a20:	0a12      	lsrs	r2, r2, #8
   15a22:	b292      	uxth	r2, r2
   15a24:	b2d2      	uxtb	r2, r2
   15a26:	701a      	strb	r2, [r3, #0]
    memcpy(p, pKey, HCI_KEY_LEN);
   15a28:	68b8      	ldr	r0, [r7, #8]
   15a2a:	6839      	ldr	r1, [r7, #0]
   15a2c:	2210      	movs	r2, #16
   15a2e:	f7f6 fb67 	bl	c100 <memcpy>
    hciCmdSend(pBuf);
   15a32:	68f8      	ldr	r0, [r7, #12]
   15a34:	f7ff fcb6 	bl	153a4 <hciCmdSend>
  }
}
   15a38:	3710      	adds	r7, #16
   15a3a:	46bd      	mov	sp, r7
   15a3c:	bd80      	pop	{r7, pc}
   15a3e:	bf00      	nop

00015a40 <HciLeRandCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeRandCmd(void)
{
   15a40:	b580      	push	{r7, lr}
   15a42:	b082      	sub	sp, #8
   15a44:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_RAND, HCI_LEN_LE_RAND)) != NULL)
   15a46:	f242 0018 	movw	r0, #8216	; 0x2018
   15a4a:	2100      	movs	r1, #0
   15a4c:	f7ff fc7c 	bl	15348 <hciCmdAlloc>
   15a50:	6078      	str	r0, [r7, #4]
   15a52:	687b      	ldr	r3, [r7, #4]
   15a54:	2b00      	cmp	r3, #0
   15a56:	d002      	beq.n	15a5e <HciLeRandCmd+0x1e>
  {
    hciCmdSend(pBuf);
   15a58:	6878      	ldr	r0, [r7, #4]
   15a5a:	f7ff fca3 	bl	153a4 <hciCmdSend>
  }
}
   15a5e:	3708      	adds	r7, #8
   15a60:	46bd      	mov	sp, r7
   15a62:	bd80      	pop	{r7, pc}

00015a64 <HciLeReadBufSizeCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadBufSizeCmd(void)
{
   15a64:	b580      	push	{r7, lr}
   15a66:	b082      	sub	sp, #8
   15a68:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_BUF_SIZE, HCI_LEN_LE_READ_BUF_SIZE)) != NULL)
   15a6a:	f242 0002 	movw	r0, #8194	; 0x2002
   15a6e:	2100      	movs	r1, #0
   15a70:	f7ff fc6a 	bl	15348 <hciCmdAlloc>
   15a74:	6078      	str	r0, [r7, #4]
   15a76:	687b      	ldr	r3, [r7, #4]
   15a78:	2b00      	cmp	r3, #0
   15a7a:	d002      	beq.n	15a82 <HciLeReadBufSizeCmd+0x1e>
  {
    hciCmdSend(pBuf);
   15a7c:	6878      	ldr	r0, [r7, #4]
   15a7e:	f7ff fc91 	bl	153a4 <hciCmdSend>
  }
}
   15a82:	3708      	adds	r7, #8
   15a84:	46bd      	mov	sp, r7
   15a86:	bd80      	pop	{r7, pc}

00015a88 <HciLeReadLocalSupFeatCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadLocalSupFeatCmd(void)
{
   15a88:	b580      	push	{r7, lr}
   15a8a:	b082      	sub	sp, #8
   15a8c:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_LOCAL_SUP_FEAT, HCI_LEN_LE_READ_LOCAL_SUP_FEAT)) != NULL)
   15a8e:	f242 0003 	movw	r0, #8195	; 0x2003
   15a92:	2100      	movs	r1, #0
   15a94:	f7ff fc58 	bl	15348 <hciCmdAlloc>
   15a98:	6078      	str	r0, [r7, #4]
   15a9a:	687b      	ldr	r3, [r7, #4]
   15a9c:	2b00      	cmp	r3, #0
   15a9e:	d002      	beq.n	15aa6 <HciLeReadLocalSupFeatCmd+0x1e>
  {
    hciCmdSend(pBuf);
   15aa0:	6878      	ldr	r0, [r7, #4]
   15aa2:	f7ff fc7f 	bl	153a4 <hciCmdSend>
  }
}
   15aa6:	3708      	adds	r7, #8
   15aa8:	46bd      	mov	sp, r7
   15aaa:	bd80      	pop	{r7, pc}

00015aac <HciLeReadRemoteFeatCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadRemoteFeatCmd(uint16_t handle)
{
   15aac:	b580      	push	{r7, lr}
   15aae:	b084      	sub	sp, #16
   15ab0:	af00      	add	r7, sp, #0
   15ab2:	4603      	mov	r3, r0
   15ab4:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_REMOTE_FEAT, HCI_LEN_LE_READ_REMOTE_FEAT)) != NULL)
   15ab6:	f242 0016 	movw	r0, #8214	; 0x2016
   15aba:	2102      	movs	r1, #2
   15abc:	f7ff fc44 	bl	15348 <hciCmdAlloc>
   15ac0:	60f8      	str	r0, [r7, #12]
   15ac2:	68fb      	ldr	r3, [r7, #12]
   15ac4:	2b00      	cmp	r3, #0
   15ac6:	d013      	beq.n	15af0 <HciLeReadRemoteFeatCmd+0x44>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   15ac8:	68fb      	ldr	r3, [r7, #12]
   15aca:	3303      	adds	r3, #3
   15acc:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   15ace:	68bb      	ldr	r3, [r7, #8]
   15ad0:	1c5a      	adds	r2, r3, #1
   15ad2:	60ba      	str	r2, [r7, #8]
   15ad4:	88fa      	ldrh	r2, [r7, #6]
   15ad6:	b2d2      	uxtb	r2, r2
   15ad8:	701a      	strb	r2, [r3, #0]
   15ada:	68bb      	ldr	r3, [r7, #8]
   15adc:	1c5a      	adds	r2, r3, #1
   15ade:	60ba      	str	r2, [r7, #8]
   15ae0:	88fa      	ldrh	r2, [r7, #6]
   15ae2:	0a12      	lsrs	r2, r2, #8
   15ae4:	b292      	uxth	r2, r2
   15ae6:	b2d2      	uxtb	r2, r2
   15ae8:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   15aea:	68f8      	ldr	r0, [r7, #12]
   15aec:	f7ff fc5a 	bl	153a4 <hciCmdSend>
  }
}
   15af0:	3710      	adds	r7, #16
   15af2:	46bd      	mov	sp, r7
   15af4:	bd80      	pop	{r7, pc}
   15af6:	bf00      	nop

00015af8 <HciLeReadSupStatesCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadSupStatesCmd(void)
{
   15af8:	b580      	push	{r7, lr}
   15afa:	b082      	sub	sp, #8
   15afc:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_SUP_STATES, HCI_LEN_LE_READ_SUP_STATES)) != NULL)
   15afe:	f242 001c 	movw	r0, #8220	; 0x201c
   15b02:	2100      	movs	r1, #0
   15b04:	f7ff fc20 	bl	15348 <hciCmdAlloc>
   15b08:	6078      	str	r0, [r7, #4]
   15b0a:	687b      	ldr	r3, [r7, #4]
   15b0c:	2b00      	cmp	r3, #0
   15b0e:	d002      	beq.n	15b16 <HciLeReadSupStatesCmd+0x1e>
  {
    hciCmdSend(pBuf);
   15b10:	6878      	ldr	r0, [r7, #4]
   15b12:	f7ff fc47 	bl	153a4 <hciCmdSend>
  }
}
   15b16:	3708      	adds	r7, #8
   15b18:	46bd      	mov	sp, r7
   15b1a:	bd80      	pop	{r7, pc}

00015b1c <HciLeReadWhiteListSizeCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadWhiteListSizeCmd(void)
{
   15b1c:	b580      	push	{r7, lr}
   15b1e:	b082      	sub	sp, #8
   15b20:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_WHITE_LIST_SIZE, HCI_LEN_LE_READ_WHITE_LIST_SIZE)) != NULL)
   15b22:	f242 000f 	movw	r0, #8207	; 0x200f
   15b26:	2100      	movs	r1, #0
   15b28:	f7ff fc0e 	bl	15348 <hciCmdAlloc>
   15b2c:	6078      	str	r0, [r7, #4]
   15b2e:	687b      	ldr	r3, [r7, #4]
   15b30:	2b00      	cmp	r3, #0
   15b32:	d002      	beq.n	15b3a <HciLeReadWhiteListSizeCmd+0x1e>
  {
    hciCmdSend(pBuf);
   15b34:	6878      	ldr	r0, [r7, #4]
   15b36:	f7ff fc35 	bl	153a4 <hciCmdSend>
  }
}
   15b3a:	3708      	adds	r7, #8
   15b3c:	46bd      	mov	sp, r7
   15b3e:	bd80      	pop	{r7, pc}

00015b40 <HciLeRemoveDevWhiteListCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeRemoveDevWhiteListCmd(uint8_t addrType, uint8_t *pAddr)
{
   15b40:	b580      	push	{r7, lr}
   15b42:	b084      	sub	sp, #16
   15b44:	af00      	add	r7, sp, #0
   15b46:	4603      	mov	r3, r0
   15b48:	6039      	str	r1, [r7, #0]
   15b4a:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_REMOVE_DEV_WHITE_LIST, HCI_LEN_LE_REMOVE_DEV_WHITE_LIST)) != NULL)
   15b4c:	f242 0012 	movw	r0, #8210	; 0x2012
   15b50:	2107      	movs	r1, #7
   15b52:	f7ff fbf9 	bl	15348 <hciCmdAlloc>
   15b56:	60f8      	str	r0, [r7, #12]
   15b58:	68fb      	ldr	r3, [r7, #12]
   15b5a:	2b00      	cmp	r3, #0
   15b5c:	d011      	beq.n	15b82 <HciLeRemoveDevWhiteListCmd+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   15b5e:	68fb      	ldr	r3, [r7, #12]
   15b60:	3303      	adds	r3, #3
   15b62:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, addrType);
   15b64:	68bb      	ldr	r3, [r7, #8]
   15b66:	1c5a      	adds	r2, r3, #1
   15b68:	60ba      	str	r2, [r7, #8]
   15b6a:	79fa      	ldrb	r2, [r7, #7]
   15b6c:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pAddr);
   15b6e:	68b8      	ldr	r0, [r7, #8]
   15b70:	6839      	ldr	r1, [r7, #0]
   15b72:	f7fd f96b 	bl	12e4c <BdaCpy>
   15b76:	68bb      	ldr	r3, [r7, #8]
   15b78:	3306      	adds	r3, #6
   15b7a:	60bb      	str	r3, [r7, #8]
    hciCmdSend(pBuf);
   15b7c:	68f8      	ldr	r0, [r7, #12]
   15b7e:	f7ff fc11 	bl	153a4 <hciCmdSend>
  }
}
   15b82:	3710      	adds	r7, #16
   15b84:	46bd      	mov	sp, r7
   15b86:	bd80      	pop	{r7, pc}

00015b88 <HciLeSetAdvEnableCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetAdvEnableCmd(uint8_t enable)
{
   15b88:	b580      	push	{r7, lr}
   15b8a:	b084      	sub	sp, #16
   15b8c:	af00      	add	r7, sp, #0
   15b8e:	4603      	mov	r3, r0
   15b90:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADV_ENABLE, HCI_LEN_LE_SET_ADV_ENABLE)) != NULL)
   15b92:	f242 000a 	movw	r0, #8202	; 0x200a
   15b96:	2101      	movs	r1, #1
   15b98:	f7ff fbd6 	bl	15348 <hciCmdAlloc>
   15b9c:	60f8      	str	r0, [r7, #12]
   15b9e:	68fb      	ldr	r3, [r7, #12]
   15ba0:	2b00      	cmp	r3, #0
   15ba2:	d00a      	beq.n	15bba <HciLeSetAdvEnableCmd+0x32>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   15ba4:	68fb      	ldr	r3, [r7, #12]
   15ba6:	3303      	adds	r3, #3
   15ba8:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, enable);
   15baa:	68bb      	ldr	r3, [r7, #8]
   15bac:	1c5a      	adds	r2, r3, #1
   15bae:	60ba      	str	r2, [r7, #8]
   15bb0:	79fa      	ldrb	r2, [r7, #7]
   15bb2:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   15bb4:	68f8      	ldr	r0, [r7, #12]
   15bb6:	f7ff fbf5 	bl	153a4 <hciCmdSend>
  }
}
   15bba:	3710      	adds	r7, #16
   15bbc:	46bd      	mov	sp, r7
   15bbe:	bd80      	pop	{r7, pc}

00015bc0 <HciLeSetAdvDataCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetAdvDataCmd(uint8_t len, uint8_t *pData)
{
   15bc0:	b580      	push	{r7, lr}
   15bc2:	b084      	sub	sp, #16
   15bc4:	af00      	add	r7, sp, #0
   15bc6:	4603      	mov	r3, r0
   15bc8:	6039      	str	r1, [r7, #0]
   15bca:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADV_DATA, HCI_LEN_LE_SET_ADV_DATA)) != NULL)
   15bcc:	f242 0008 	movw	r0, #8200	; 0x2008
   15bd0:	2120      	movs	r1, #32
   15bd2:	f7ff fbb9 	bl	15348 <hciCmdAlloc>
   15bd6:	60f8      	str	r0, [r7, #12]
   15bd8:	68fb      	ldr	r3, [r7, #12]
   15bda:	2b00      	cmp	r3, #0
   15bdc:	d01c      	beq.n	15c18 <HciLeSetAdvDataCmd+0x58>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   15bde:	68fb      	ldr	r3, [r7, #12]
   15be0:	3303      	adds	r3, #3
   15be2:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, len);
   15be4:	68bb      	ldr	r3, [r7, #8]
   15be6:	1c5a      	adds	r2, r3, #1
   15be8:	60ba      	str	r2, [r7, #8]
   15bea:	79fa      	ldrb	r2, [r7, #7]
   15bec:	701a      	strb	r2, [r3, #0]
    memcpy(p, pData, len);
   15bee:	79fb      	ldrb	r3, [r7, #7]
   15bf0:	68b8      	ldr	r0, [r7, #8]
   15bf2:	6839      	ldr	r1, [r7, #0]
   15bf4:	461a      	mov	r2, r3
   15bf6:	f7f6 fa83 	bl	c100 <memcpy>
    p += len;
   15bfa:	79fb      	ldrb	r3, [r7, #7]
   15bfc:	68ba      	ldr	r2, [r7, #8]
   15bfe:	4413      	add	r3, r2
   15c00:	60bb      	str	r3, [r7, #8]
    memset(p, 0, (HCI_ADV_DATA_LEN - len));
   15c02:	79fb      	ldrb	r3, [r7, #7]
   15c04:	f1c3 031f 	rsb	r3, r3, #31
   15c08:	68b8      	ldr	r0, [r7, #8]
   15c0a:	2100      	movs	r1, #0
   15c0c:	461a      	mov	r2, r3
   15c0e:	f00a fbed 	bl	203ec <memset>
    hciCmdSend(pBuf);
   15c12:	68f8      	ldr	r0, [r7, #12]
   15c14:	f7ff fbc6 	bl	153a4 <hciCmdSend>
  }
}
   15c18:	3710      	adds	r7, #16
   15c1a:	46bd      	mov	sp, r7
   15c1c:	bd80      	pop	{r7, pc}
   15c1e:	bf00      	nop

00015c20 <HciLeSetAdvParamCmd>:
 */
/*************************************************************************************************/
void HciLeSetAdvParamCmd(uint16_t advIntervalMin, uint16_t advIntervalMax, uint8_t advType,
                         uint8_t ownAddrType, uint8_t peerAddrType, uint8_t *pPeerAddr,
                         uint8_t advChanMap, uint8_t advFiltPolicy)
{
   15c20:	b590      	push	{r4, r7, lr}
   15c22:	b085      	sub	sp, #20
   15c24:	af00      	add	r7, sp, #0
   15c26:	4604      	mov	r4, r0
   15c28:	4608      	mov	r0, r1
   15c2a:	4611      	mov	r1, r2
   15c2c:	461a      	mov	r2, r3
   15c2e:	4623      	mov	r3, r4
   15c30:	80fb      	strh	r3, [r7, #6]
   15c32:	4603      	mov	r3, r0
   15c34:	80bb      	strh	r3, [r7, #4]
   15c36:	460b      	mov	r3, r1
   15c38:	70fb      	strb	r3, [r7, #3]
   15c3a:	4613      	mov	r3, r2
   15c3c:	70bb      	strb	r3, [r7, #2]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADV_PARAM, HCI_LEN_LE_SET_ADV_PARAM)) != NULL)
   15c3e:	f242 0006 	movw	r0, #8198	; 0x2006
   15c42:	210f      	movs	r1, #15
   15c44:	f7ff fb80 	bl	15348 <hciCmdAlloc>
   15c48:	60b8      	str	r0, [r7, #8]
   15c4a:	68bb      	ldr	r3, [r7, #8]
   15c4c:	2b00      	cmp	r3, #0
   15c4e:	d04c      	beq.n	15cea <HciLeSetAdvParamCmd+0xca>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   15c50:	68bb      	ldr	r3, [r7, #8]
   15c52:	3303      	adds	r3, #3
   15c54:	60fb      	str	r3, [r7, #12]
    UINT16_TO_BSTREAM(p, advIntervalMin);
   15c56:	68fb      	ldr	r3, [r7, #12]
   15c58:	1c5a      	adds	r2, r3, #1
   15c5a:	60fa      	str	r2, [r7, #12]
   15c5c:	88fa      	ldrh	r2, [r7, #6]
   15c5e:	b2d2      	uxtb	r2, r2
   15c60:	701a      	strb	r2, [r3, #0]
   15c62:	68fb      	ldr	r3, [r7, #12]
   15c64:	1c5a      	adds	r2, r3, #1
   15c66:	60fa      	str	r2, [r7, #12]
   15c68:	88fa      	ldrh	r2, [r7, #6]
   15c6a:	0a12      	lsrs	r2, r2, #8
   15c6c:	b292      	uxth	r2, r2
   15c6e:	b2d2      	uxtb	r2, r2
   15c70:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, advIntervalMax);
   15c72:	68fb      	ldr	r3, [r7, #12]
   15c74:	1c5a      	adds	r2, r3, #1
   15c76:	60fa      	str	r2, [r7, #12]
   15c78:	88ba      	ldrh	r2, [r7, #4]
   15c7a:	b2d2      	uxtb	r2, r2
   15c7c:	701a      	strb	r2, [r3, #0]
   15c7e:	68fb      	ldr	r3, [r7, #12]
   15c80:	1c5a      	adds	r2, r3, #1
   15c82:	60fa      	str	r2, [r7, #12]
   15c84:	88ba      	ldrh	r2, [r7, #4]
   15c86:	0a12      	lsrs	r2, r2, #8
   15c88:	b292      	uxth	r2, r2
   15c8a:	b2d2      	uxtb	r2, r2
   15c8c:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, advType);
   15c8e:	68fb      	ldr	r3, [r7, #12]
   15c90:	1c5a      	adds	r2, r3, #1
   15c92:	60fa      	str	r2, [r7, #12]
   15c94:	78fa      	ldrb	r2, [r7, #3]
   15c96:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, ownAddrType);
   15c98:	68fb      	ldr	r3, [r7, #12]
   15c9a:	1c5a      	adds	r2, r3, #1
   15c9c:	60fa      	str	r2, [r7, #12]
   15c9e:	78ba      	ldrb	r2, [r7, #2]
   15ca0:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, peerAddrType);
   15ca2:	68fb      	ldr	r3, [r7, #12]
   15ca4:	1c5a      	adds	r2, r3, #1
   15ca6:	60fa      	str	r2, [r7, #12]
   15ca8:	f897 2020 	ldrb.w	r2, [r7, #32]
   15cac:	701a      	strb	r2, [r3, #0]
    if (pPeerAddr != NULL)
   15cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15cb0:	2b00      	cmp	r3, #0
   15cb2:	d007      	beq.n	15cc4 <HciLeSetAdvParamCmd+0xa4>
    {
      BDA_TO_BSTREAM(p, pPeerAddr);
   15cb4:	68f8      	ldr	r0, [r7, #12]
   15cb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
   15cb8:	f7fd f8c8 	bl	12e4c <BdaCpy>
   15cbc:	68fb      	ldr	r3, [r7, #12]
   15cbe:	3306      	adds	r3, #6
   15cc0:	60fb      	str	r3, [r7, #12]
   15cc2:	e003      	b.n	15ccc <HciLeSetAdvParamCmd+0xac>
    }
    else
    {
      p = BdaClr(p);
   15cc4:	68f8      	ldr	r0, [r7, #12]
   15cc6:	f7fd f8e3 	bl	12e90 <BdaClr>
   15cca:	60f8      	str	r0, [r7, #12]
    }
    UINT8_TO_BSTREAM(p, advChanMap);
   15ccc:	68fb      	ldr	r3, [r7, #12]
   15cce:	1c5a      	adds	r2, r3, #1
   15cd0:	60fa      	str	r2, [r7, #12]
   15cd2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
   15cd6:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, advFiltPolicy);
   15cd8:	68fb      	ldr	r3, [r7, #12]
   15cda:	1c5a      	adds	r2, r3, #1
   15cdc:	60fa      	str	r2, [r7, #12]
   15cde:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   15ce2:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   15ce4:	68b8      	ldr	r0, [r7, #8]
   15ce6:	f7ff fb5d 	bl	153a4 <hciCmdSend>
  }
}
   15cea:	3714      	adds	r7, #20
   15cec:	46bd      	mov	sp, r7
   15cee:	bd90      	pop	{r4, r7, pc}

00015cf0 <HciLeSetEventMaskCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetEventMaskCmd(uint8_t *pLeEventMask)
{
   15cf0:	b580      	push	{r7, lr}
   15cf2:	b084      	sub	sp, #16
   15cf4:	af00      	add	r7, sp, #0
   15cf6:	6078      	str	r0, [r7, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_EVENT_MASK, HCI_LEN_LE_SET_EVENT_MASK)) != NULL)
   15cf8:	f242 0001 	movw	r0, #8193	; 0x2001
   15cfc:	2108      	movs	r1, #8
   15cfe:	f7ff fb23 	bl	15348 <hciCmdAlloc>
   15d02:	60f8      	str	r0, [r7, #12]
   15d04:	68fb      	ldr	r3, [r7, #12]
   15d06:	2b00      	cmp	r3, #0
   15d08:	d00a      	beq.n	15d20 <HciLeSetEventMaskCmd+0x30>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   15d0a:	68fb      	ldr	r3, [r7, #12]
   15d0c:	3303      	adds	r3, #3
   15d0e:	60bb      	str	r3, [r7, #8]
    memcpy(p, pLeEventMask, HCI_LE_EVT_MASK_LEN);
   15d10:	68b8      	ldr	r0, [r7, #8]
   15d12:	6879      	ldr	r1, [r7, #4]
   15d14:	2208      	movs	r2, #8
   15d16:	f7f6 f9f3 	bl	c100 <memcpy>
    hciCmdSend(pBuf);
   15d1a:	68f8      	ldr	r0, [r7, #12]
   15d1c:	f7ff fb42 	bl	153a4 <hciCmdSend>
  }
}
   15d20:	3710      	adds	r7, #16
   15d22:	46bd      	mov	sp, r7
   15d24:	bd80      	pop	{r7, pc}
   15d26:	bf00      	nop

00015d28 <HciLeSetRandAddrCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetRandAddrCmd(uint8_t *pAddr)
{
   15d28:	b580      	push	{r7, lr}
   15d2a:	b084      	sub	sp, #16
   15d2c:	af00      	add	r7, sp, #0
   15d2e:	6078      	str	r0, [r7, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_RAND_ADDR, HCI_LEN_LE_SET_RAND_ADDR)) != NULL)
   15d30:	f242 0005 	movw	r0, #8197	; 0x2005
   15d34:	2106      	movs	r1, #6
   15d36:	f7ff fb07 	bl	15348 <hciCmdAlloc>
   15d3a:	60f8      	str	r0, [r7, #12]
   15d3c:	68fb      	ldr	r3, [r7, #12]
   15d3e:	2b00      	cmp	r3, #0
   15d40:	d00c      	beq.n	15d5c <HciLeSetRandAddrCmd+0x34>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   15d42:	68fb      	ldr	r3, [r7, #12]
   15d44:	3303      	adds	r3, #3
   15d46:	60bb      	str	r3, [r7, #8]
    BDA_TO_BSTREAM(p, pAddr);
   15d48:	68b8      	ldr	r0, [r7, #8]
   15d4a:	6879      	ldr	r1, [r7, #4]
   15d4c:	f7fd f87e 	bl	12e4c <BdaCpy>
   15d50:	68bb      	ldr	r3, [r7, #8]
   15d52:	3306      	adds	r3, #6
   15d54:	60bb      	str	r3, [r7, #8]
    hciCmdSend(pBuf);
   15d56:	68f8      	ldr	r0, [r7, #12]
   15d58:	f7ff fb24 	bl	153a4 <hciCmdSend>
  }
}
   15d5c:	3710      	adds	r7, #16
   15d5e:	46bd      	mov	sp, r7
   15d60:	bd80      	pop	{r7, pc}
   15d62:	bf00      	nop

00015d64 <HciLeSetScanRespDataCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetScanRespDataCmd(uint8_t len, uint8_t *pData)
{
   15d64:	b580      	push	{r7, lr}
   15d66:	b084      	sub	sp, #16
   15d68:	af00      	add	r7, sp, #0
   15d6a:	4603      	mov	r3, r0
   15d6c:	6039      	str	r1, [r7, #0]
   15d6e:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_SCAN_RESP_DATA, HCI_LEN_LE_SET_SCAN_RESP_DATA)) != NULL)
   15d70:	f242 0009 	movw	r0, #8201	; 0x2009
   15d74:	2120      	movs	r1, #32
   15d76:	f7ff fae7 	bl	15348 <hciCmdAlloc>
   15d7a:	60f8      	str	r0, [r7, #12]
   15d7c:	68fb      	ldr	r3, [r7, #12]
   15d7e:	2b00      	cmp	r3, #0
   15d80:	d01c      	beq.n	15dbc <HciLeSetScanRespDataCmd+0x58>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   15d82:	68fb      	ldr	r3, [r7, #12]
   15d84:	3303      	adds	r3, #3
   15d86:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, len);
   15d88:	68bb      	ldr	r3, [r7, #8]
   15d8a:	1c5a      	adds	r2, r3, #1
   15d8c:	60ba      	str	r2, [r7, #8]
   15d8e:	79fa      	ldrb	r2, [r7, #7]
   15d90:	701a      	strb	r2, [r3, #0]
    memcpy(p, pData, len);
   15d92:	79fb      	ldrb	r3, [r7, #7]
   15d94:	68b8      	ldr	r0, [r7, #8]
   15d96:	6839      	ldr	r1, [r7, #0]
   15d98:	461a      	mov	r2, r3
   15d9a:	f7f6 f9b1 	bl	c100 <memcpy>
    p += len;
   15d9e:	79fb      	ldrb	r3, [r7, #7]
   15da0:	68ba      	ldr	r2, [r7, #8]
   15da2:	4413      	add	r3, r2
   15da4:	60bb      	str	r3, [r7, #8]
    memset(p, 0, (HCI_SCAN_DATA_LEN - len));
   15da6:	79fb      	ldrb	r3, [r7, #7]
   15da8:	f1c3 031f 	rsb	r3, r3, #31
   15dac:	68b8      	ldr	r0, [r7, #8]
   15dae:	2100      	movs	r1, #0
   15db0:	461a      	mov	r2, r3
   15db2:	f00a fb1b 	bl	203ec <memset>
    hciCmdSend(pBuf);
   15db6:	68f8      	ldr	r0, [r7, #12]
   15db8:	f7ff faf4 	bl	153a4 <hciCmdSend>
  }
}
   15dbc:	3710      	adds	r7, #16
   15dbe:	46bd      	mov	sp, r7
   15dc0:	bd80      	pop	{r7, pc}
   15dc2:	bf00      	nop

00015dc4 <HciLeStartEncryptionCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeStartEncryptionCmd(uint16_t handle, uint8_t *pRand, uint16_t diversifier, uint8_t *pKey)
{
   15dc4:	b580      	push	{r7, lr}
   15dc6:	b086      	sub	sp, #24
   15dc8:	af00      	add	r7, sp, #0
   15dca:	60b9      	str	r1, [r7, #8]
   15dcc:	607b      	str	r3, [r7, #4]
   15dce:	4603      	mov	r3, r0
   15dd0:	81fb      	strh	r3, [r7, #14]
   15dd2:	4613      	mov	r3, r2
   15dd4:	81bb      	strh	r3, [r7, #12]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_START_ENCRYPTION, HCI_LEN_LE_START_ENCRYPTION)) != NULL)
   15dd6:	f242 0019 	movw	r0, #8217	; 0x2019
   15dda:	211c      	movs	r1, #28
   15ddc:	f7ff fab4 	bl	15348 <hciCmdAlloc>
   15de0:	6178      	str	r0, [r7, #20]
   15de2:	697b      	ldr	r3, [r7, #20]
   15de4:	2b00      	cmp	r3, #0
   15de6:	d02e      	beq.n	15e46 <HciLeStartEncryptionCmd+0x82>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   15de8:	697b      	ldr	r3, [r7, #20]
   15dea:	3303      	adds	r3, #3
   15dec:	613b      	str	r3, [r7, #16]
    UINT16_TO_BSTREAM(p, handle);
   15dee:	693b      	ldr	r3, [r7, #16]
   15df0:	1c5a      	adds	r2, r3, #1
   15df2:	613a      	str	r2, [r7, #16]
   15df4:	89fa      	ldrh	r2, [r7, #14]
   15df6:	b2d2      	uxtb	r2, r2
   15df8:	701a      	strb	r2, [r3, #0]
   15dfa:	693b      	ldr	r3, [r7, #16]
   15dfc:	1c5a      	adds	r2, r3, #1
   15dfe:	613a      	str	r2, [r7, #16]
   15e00:	89fa      	ldrh	r2, [r7, #14]
   15e02:	0a12      	lsrs	r2, r2, #8
   15e04:	b292      	uxth	r2, r2
   15e06:	b2d2      	uxtb	r2, r2
   15e08:	701a      	strb	r2, [r3, #0]
    memcpy(p, pRand, HCI_RAND_LEN);
   15e0a:	6938      	ldr	r0, [r7, #16]
   15e0c:	68b9      	ldr	r1, [r7, #8]
   15e0e:	2208      	movs	r2, #8
   15e10:	f7f6 f976 	bl	c100 <memcpy>
    p += HCI_RAND_LEN;
   15e14:	693b      	ldr	r3, [r7, #16]
   15e16:	3308      	adds	r3, #8
   15e18:	613b      	str	r3, [r7, #16]
    UINT16_TO_BSTREAM(p, diversifier);
   15e1a:	693b      	ldr	r3, [r7, #16]
   15e1c:	1c5a      	adds	r2, r3, #1
   15e1e:	613a      	str	r2, [r7, #16]
   15e20:	89ba      	ldrh	r2, [r7, #12]
   15e22:	b2d2      	uxtb	r2, r2
   15e24:	701a      	strb	r2, [r3, #0]
   15e26:	693b      	ldr	r3, [r7, #16]
   15e28:	1c5a      	adds	r2, r3, #1
   15e2a:	613a      	str	r2, [r7, #16]
   15e2c:	89ba      	ldrh	r2, [r7, #12]
   15e2e:	0a12      	lsrs	r2, r2, #8
   15e30:	b292      	uxth	r2, r2
   15e32:	b2d2      	uxtb	r2, r2
   15e34:	701a      	strb	r2, [r3, #0]
    memcpy(p, pKey, HCI_KEY_LEN);
   15e36:	6938      	ldr	r0, [r7, #16]
   15e38:	6879      	ldr	r1, [r7, #4]
   15e3a:	2210      	movs	r2, #16
   15e3c:	f7f6 f960 	bl	c100 <memcpy>
    hciCmdSend(pBuf);
   15e40:	6978      	ldr	r0, [r7, #20]
   15e42:	f7ff faaf 	bl	153a4 <hciCmdSend>
  }
}
   15e46:	3718      	adds	r7, #24
   15e48:	46bd      	mov	sp, r7
   15e4a:	bd80      	pop	{r7, pc}

00015e4c <HciReadBdAddrCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciReadBdAddrCmd(void)
{
   15e4c:	b580      	push	{r7, lr}
   15e4e:	b082      	sub	sp, #8
   15e50:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_READ_BD_ADDR, HCI_LEN_READ_BD_ADDR)) != NULL)
   15e52:	f241 0009 	movw	r0, #4105	; 0x1009
   15e56:	2100      	movs	r1, #0
   15e58:	f7ff fa76 	bl	15348 <hciCmdAlloc>
   15e5c:	6078      	str	r0, [r7, #4]
   15e5e:	687b      	ldr	r3, [r7, #4]
   15e60:	2b00      	cmp	r3, #0
   15e62:	d002      	beq.n	15e6a <HciReadBdAddrCmd+0x1e>
  {
    hciCmdSend(pBuf);
   15e64:	6878      	ldr	r0, [r7, #4]
   15e66:	f7ff fa9d 	bl	153a4 <hciCmdSend>
  }
}
   15e6a:	3708      	adds	r7, #8
   15e6c:	46bd      	mov	sp, r7
   15e6e:	bd80      	pop	{r7, pc}

00015e70 <HciReadLocalVerInfoCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciReadLocalVerInfoCmd(void)
{
   15e70:	b580      	push	{r7, lr}
   15e72:	b082      	sub	sp, #8
   15e74:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_READ_LOCAL_VER_INFO, HCI_LEN_READ_LOCAL_VER_INFO)) != NULL)
   15e76:	f241 0001 	movw	r0, #4097	; 0x1001
   15e7a:	2100      	movs	r1, #0
   15e7c:	f7ff fa64 	bl	15348 <hciCmdAlloc>
   15e80:	6078      	str	r0, [r7, #4]
   15e82:	687b      	ldr	r3, [r7, #4]
   15e84:	2b00      	cmp	r3, #0
   15e86:	d002      	beq.n	15e8e <HciReadLocalVerInfoCmd+0x1e>
  {
    hciCmdSend(pBuf);
   15e88:	6878      	ldr	r0, [r7, #4]
   15e8a:	f7ff fa8b 	bl	153a4 <hciCmdSend>
  }
}
   15e8e:	3708      	adds	r7, #8
   15e90:	46bd      	mov	sp, r7
   15e92:	bd80      	pop	{r7, pc}

00015e94 <HciReadRssiCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciReadRssiCmd(uint16_t handle)
{
   15e94:	b580      	push	{r7, lr}
   15e96:	b084      	sub	sp, #16
   15e98:	af00      	add	r7, sp, #0
   15e9a:	4603      	mov	r3, r0
   15e9c:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_READ_RSSI, HCI_LEN_READ_RSSI)) != NULL)
   15e9e:	f241 4005 	movw	r0, #5125	; 0x1405
   15ea2:	2102      	movs	r1, #2
   15ea4:	f7ff fa50 	bl	15348 <hciCmdAlloc>
   15ea8:	60f8      	str	r0, [r7, #12]
   15eaa:	68fb      	ldr	r3, [r7, #12]
   15eac:	2b00      	cmp	r3, #0
   15eae:	d013      	beq.n	15ed8 <HciReadRssiCmd+0x44>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   15eb0:	68fb      	ldr	r3, [r7, #12]
   15eb2:	3303      	adds	r3, #3
   15eb4:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   15eb6:	68bb      	ldr	r3, [r7, #8]
   15eb8:	1c5a      	adds	r2, r3, #1
   15eba:	60ba      	str	r2, [r7, #8]
   15ebc:	88fa      	ldrh	r2, [r7, #6]
   15ebe:	b2d2      	uxtb	r2, r2
   15ec0:	701a      	strb	r2, [r3, #0]
   15ec2:	68bb      	ldr	r3, [r7, #8]
   15ec4:	1c5a      	adds	r2, r3, #1
   15ec6:	60ba      	str	r2, [r7, #8]
   15ec8:	88fa      	ldrh	r2, [r7, #6]
   15eca:	0a12      	lsrs	r2, r2, #8
   15ecc:	b292      	uxth	r2, r2
   15ece:	b2d2      	uxtb	r2, r2
   15ed0:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   15ed2:	68f8      	ldr	r0, [r7, #12]
   15ed4:	f7ff fa66 	bl	153a4 <hciCmdSend>
  }
}
   15ed8:	3710      	adds	r7, #16
   15eda:	46bd      	mov	sp, r7
   15edc:	bd80      	pop	{r7, pc}
   15ede:	bf00      	nop

00015ee0 <HciResetCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciResetCmd(void)
{
   15ee0:	b580      	push	{r7, lr}
   15ee2:	b084      	sub	sp, #16
   15ee4:	af00      	add	r7, sp, #0
  uint8_t *pBuf;
  wsfHandlerId_t  handlerId;
  hciHwErrorEvt_t evt;

  // let security module to clean up pending request/command
  evt.hdr.event = HCI_HW_ERROR_CBACK_EVT;
   15ee6:	2314      	movs	r3, #20
   15ee8:	71bb      	strb	r3, [r7, #6]

  hciCb.secCback((hciEvt_t *)&evt);
   15eea:	4b12      	ldr	r3, [pc, #72]	; (15f34 <HciResetCmd+0x54>)
   15eec:	68db      	ldr	r3, [r3, #12]
   15eee:	1d3a      	adds	r2, r7, #4
   15ef0:	4610      	mov	r0, r2
   15ef2:	4798      	blx	r3

  // Free up any unsent HCI commandss
  while((pBuf = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   15ef4:	e002      	b.n	15efc <HciResetCmd+0x1c>
  {
    WsfMsgFree(pBuf);
   15ef6:	68f8      	ldr	r0, [r7, #12]
   15ef8:	f003 f938 	bl	1916c <WsfMsgFree>
  evt.hdr.event = HCI_HW_ERROR_CBACK_EVT;

  hciCb.secCback((hciEvt_t *)&evt);

  // Free up any unsent HCI commandss
  while((pBuf = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   15efc:	f107 030b 	add.w	r3, r7, #11
   15f00:	480d      	ldr	r0, [pc, #52]	; (15f38 <HciResetCmd+0x58>)
   15f02:	4619      	mov	r1, r3
   15f04:	f003 f96c 	bl	191e0 <WsfMsgDeq>
   15f08:	60f8      	str	r0, [r7, #12]
   15f0a:	68fb      	ldr	r3, [r7, #12]
   15f0c:	2b00      	cmp	r3, #0
   15f0e:	d1f2      	bne.n	15ef6 <HciResetCmd+0x16>
  {
    WsfMsgFree(pBuf);
  }

  /* initialize numCmdPkts for special case of reset command */
  hciCmdCb.numCmdPkts = 1;
   15f10:	4b0a      	ldr	r3, [pc, #40]	; (15f3c <HciResetCmd+0x5c>)
   15f12:	2201      	movs	r2, #1
   15f14:	769a      	strb	r2, [r3, #26]

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_RESET, HCI_LEN_RESET)) != NULL)
   15f16:	f640 4003 	movw	r0, #3075	; 0xc03
   15f1a:	2100      	movs	r1, #0
   15f1c:	f7ff fa14 	bl	15348 <hciCmdAlloc>
   15f20:	60f8      	str	r0, [r7, #12]
   15f22:	68fb      	ldr	r3, [r7, #12]
   15f24:	2b00      	cmp	r3, #0
   15f26:	d002      	beq.n	15f2e <HciResetCmd+0x4e>
  {
    hciCmdSend(pBuf);
   15f28:	68f8      	ldr	r0, [r7, #12]
   15f2a:	f7ff fa3b 	bl	153a4 <hciCmdSend>
  }
}
   15f2e:	3710      	adds	r7, #16
   15f30:	46bd      	mov	sp, r7
   15f32:	bd80      	pop	{r7, pc}
   15f34:	1000916c 	.word	0x1000916c
   15f38:	1000a0f4 	.word	0x1000a0f4
   15f3c:	1000a0e4 	.word	0x1000a0e4

00015f40 <HciSetEventMaskCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSetEventMaskCmd(uint8_t *pEventMask)
{
   15f40:	b580      	push	{r7, lr}
   15f42:	b084      	sub	sp, #16
   15f44:	af00      	add	r7, sp, #0
   15f46:	6078      	str	r0, [r7, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_SET_EVENT_MASK, HCI_LEN_SET_EVENT_MASK)) != NULL)
   15f48:	f640 4001 	movw	r0, #3073	; 0xc01
   15f4c:	2108      	movs	r1, #8
   15f4e:	f7ff f9fb 	bl	15348 <hciCmdAlloc>
   15f52:	60f8      	str	r0, [r7, #12]
   15f54:	68fb      	ldr	r3, [r7, #12]
   15f56:	2b00      	cmp	r3, #0
   15f58:	d00a      	beq.n	15f70 <HciSetEventMaskCmd+0x30>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   15f5a:	68fb      	ldr	r3, [r7, #12]
   15f5c:	3303      	adds	r3, #3
   15f5e:	60bb      	str	r3, [r7, #8]
    memcpy(p, pEventMask, HCI_EVT_MASK_LEN);
   15f60:	68b8      	ldr	r0, [r7, #8]
   15f62:	6879      	ldr	r1, [r7, #4]
   15f64:	2208      	movs	r2, #8
   15f66:	f7f6 f8cb 	bl	c100 <memcpy>
    hciCmdSend(pBuf);
   15f6a:	68f8      	ldr	r0, [r7, #12]
   15f6c:	f7ff fa1a 	bl	153a4 <hciCmdSend>
  }
}
   15f70:	3710      	adds	r7, #16
   15f72:	46bd      	mov	sp, r7
   15f74:	bd80      	pop	{r7, pc}
   15f76:	bf00      	nop

00015f78 <HciSetEventMaskPage2Cmd>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciSetEventMaskPage2Cmd(uint8_t *pEventMask)
{
   15f78:	b580      	push	{r7, lr}
   15f7a:	b084      	sub	sp, #16
   15f7c:	af00      	add	r7, sp, #0
   15f7e:	6078      	str	r0, [r7, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_SET_EVENT_MASK_PAGE2, HCI_LEN_SET_EVENT_MASK_PAGE2)) != NULL)
   15f80:	f640 4063 	movw	r0, #3171	; 0xc63
   15f84:	2108      	movs	r1, #8
   15f86:	f7ff f9df 	bl	15348 <hciCmdAlloc>
   15f8a:	60f8      	str	r0, [r7, #12]
   15f8c:	68fb      	ldr	r3, [r7, #12]
   15f8e:	2b00      	cmp	r3, #0
   15f90:	d00a      	beq.n	15fa8 <HciSetEventMaskPage2Cmd+0x30>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   15f92:	68fb      	ldr	r3, [r7, #12]
   15f94:	3303      	adds	r3, #3
   15f96:	60bb      	str	r3, [r7, #8]
    memcpy(p, pEventMask, HCI_EVT_MASK_PAGE_2_LEN);
   15f98:	68b8      	ldr	r0, [r7, #8]
   15f9a:	6879      	ldr	r1, [r7, #4]
   15f9c:	2208      	movs	r2, #8
   15f9e:	f7f6 f8af 	bl	c100 <memcpy>
    hciCmdSend(pBuf);
   15fa2:	68f8      	ldr	r0, [r7, #12]
   15fa4:	f7ff f9fe 	bl	153a4 <hciCmdSend>
  }
}
   15fa8:	3710      	adds	r7, #16
   15faa:	46bd      	mov	sp, r7
   15fac:	bd80      	pop	{r7, pc}
   15fae:	bf00      	nop

00015fb0 <HciWriteAuthPayloadTimeout>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciWriteAuthPayloadTimeout(uint16_t handle, uint16_t timeout)
{
   15fb0:	b580      	push	{r7, lr}
   15fb2:	b084      	sub	sp, #16
   15fb4:	af00      	add	r7, sp, #0
   15fb6:	4603      	mov	r3, r0
   15fb8:	460a      	mov	r2, r1
   15fba:	80fb      	strh	r3, [r7, #6]
   15fbc:	4613      	mov	r3, r2
   15fbe:	80bb      	strh	r3, [r7, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_WRITE_AUTH_PAYLOAD_TO, HCI_LEN_WRITE_AUTH_PAYLOAD_TO)) != NULL)
   15fc0:	f640 407c 	movw	r0, #3196	; 0xc7c
   15fc4:	2104      	movs	r1, #4
   15fc6:	f7ff f9bf 	bl	15348 <hciCmdAlloc>
   15fca:	60f8      	str	r0, [r7, #12]
   15fcc:	68fb      	ldr	r3, [r7, #12]
   15fce:	2b00      	cmp	r3, #0
   15fd0:	d021      	beq.n	16016 <HciWriteAuthPayloadTimeout+0x66>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   15fd2:	68fb      	ldr	r3, [r7, #12]
   15fd4:	3303      	adds	r3, #3
   15fd6:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   15fd8:	68bb      	ldr	r3, [r7, #8]
   15fda:	1c5a      	adds	r2, r3, #1
   15fdc:	60ba      	str	r2, [r7, #8]
   15fde:	88fa      	ldrh	r2, [r7, #6]
   15fe0:	b2d2      	uxtb	r2, r2
   15fe2:	701a      	strb	r2, [r3, #0]
   15fe4:	68bb      	ldr	r3, [r7, #8]
   15fe6:	1c5a      	adds	r2, r3, #1
   15fe8:	60ba      	str	r2, [r7, #8]
   15fea:	88fa      	ldrh	r2, [r7, #6]
   15fec:	0a12      	lsrs	r2, r2, #8
   15fee:	b292      	uxth	r2, r2
   15ff0:	b2d2      	uxtb	r2, r2
   15ff2:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, timeout);
   15ff4:	68bb      	ldr	r3, [r7, #8]
   15ff6:	1c5a      	adds	r2, r3, #1
   15ff8:	60ba      	str	r2, [r7, #8]
   15ffa:	88ba      	ldrh	r2, [r7, #4]
   15ffc:	b2d2      	uxtb	r2, r2
   15ffe:	701a      	strb	r2, [r3, #0]
   16000:	68bb      	ldr	r3, [r7, #8]
   16002:	1c5a      	adds	r2, r3, #1
   16004:	60ba      	str	r2, [r7, #8]
   16006:	88ba      	ldrh	r2, [r7, #4]
   16008:	0a12      	lsrs	r2, r2, #8
   1600a:	b292      	uxth	r2, r2
   1600c:	b2d2      	uxtb	r2, r2
   1600e:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   16010:	68f8      	ldr	r0, [r7, #12]
   16012:	f7ff f9c7 	bl	153a4 <hciCmdSend>
  }
}
   16016:	3710      	adds	r7, #16
   16018:	46bd      	mov	sp, r7
   1601a:	bd80      	pop	{r7, pc}

0001601c <HciLeAddDeviceToResolvingListCmd>:
 *  \return None.
 */
/*************************************************************************************************/
void HciLeAddDeviceToResolvingListCmd(uint8_t peerAddrType, const uint8_t *pPeerIdentityAddr,
                                      const uint8_t *pPeerIrk, const uint8_t *pLocalIrk)
{
   1601c:	b580      	push	{r7, lr}
   1601e:	b086      	sub	sp, #24
   16020:	af00      	add	r7, sp, #0
   16022:	60b9      	str	r1, [r7, #8]
   16024:	607a      	str	r2, [r7, #4]
   16026:	603b      	str	r3, [r7, #0]
   16028:	4603      	mov	r3, r0
   1602a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_ADD_DEV_RES_LIST, HCI_LEN_LE_ADD_DEV_RES_LIST)) != NULL)
   1602c:	f242 0027 	movw	r0, #8231	; 0x2027
   16030:	2127      	movs	r1, #39	; 0x27
   16032:	f7ff f989 	bl	15348 <hciCmdAlloc>
   16036:	6178      	str	r0, [r7, #20]
   16038:	697b      	ldr	r3, [r7, #20]
   1603a:	2b00      	cmp	r3, #0
   1603c:	d01e      	beq.n	1607c <HciLeAddDeviceToResolvingListCmd+0x60>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1603e:	697b      	ldr	r3, [r7, #20]
   16040:	3303      	adds	r3, #3
   16042:	613b      	str	r3, [r7, #16]
    UINT8_TO_BSTREAM(p, peerAddrType);
   16044:	693b      	ldr	r3, [r7, #16]
   16046:	1c5a      	adds	r2, r3, #1
   16048:	613a      	str	r2, [r7, #16]
   1604a:	7bfa      	ldrb	r2, [r7, #15]
   1604c:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pPeerIdentityAddr);
   1604e:	6938      	ldr	r0, [r7, #16]
   16050:	68b9      	ldr	r1, [r7, #8]
   16052:	f7fc fefb 	bl	12e4c <BdaCpy>
   16056:	693b      	ldr	r3, [r7, #16]
   16058:	3306      	adds	r3, #6
   1605a:	613b      	str	r3, [r7, #16]
    memcpy(p, pPeerIrk, HCI_KEY_LEN);
   1605c:	6938      	ldr	r0, [r7, #16]
   1605e:	6879      	ldr	r1, [r7, #4]
   16060:	2210      	movs	r2, #16
   16062:	f7f6 f84d 	bl	c100 <memcpy>
    p += HCI_KEY_LEN;
   16066:	693b      	ldr	r3, [r7, #16]
   16068:	3310      	adds	r3, #16
   1606a:	613b      	str	r3, [r7, #16]
    memcpy(p, pLocalIrk, HCI_KEY_LEN);
   1606c:	6938      	ldr	r0, [r7, #16]
   1606e:	6839      	ldr	r1, [r7, #0]
   16070:	2210      	movs	r2, #16
   16072:	f7f6 f845 	bl	c100 <memcpy>
    hciCmdSend(pBuf);
   16076:	6978      	ldr	r0, [r7, #20]
   16078:	f7ff f994 	bl	153a4 <hciCmdSend>
  }
}
   1607c:	3718      	adds	r7, #24
   1607e:	46bd      	mov	sp, r7
   16080:	bd80      	pop	{r7, pc}
   16082:	bf00      	nop

00016084 <HciLeRemoveDeviceFromResolvingList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeRemoveDeviceFromResolvingList(uint8_t peerAddrType, const uint8_t *pPeerIdentityAddr)
{
   16084:	b580      	push	{r7, lr}
   16086:	b084      	sub	sp, #16
   16088:	af00      	add	r7, sp, #0
   1608a:	4603      	mov	r3, r0
   1608c:	6039      	str	r1, [r7, #0]
   1608e:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_REMOVE_DEV_RES_LIST, HCI_LEN_LE_REMOVE_DEV_RES_LIST)) != NULL)
   16090:	f242 0028 	movw	r0, #8232	; 0x2028
   16094:	2107      	movs	r1, #7
   16096:	f7ff f957 	bl	15348 <hciCmdAlloc>
   1609a:	60f8      	str	r0, [r7, #12]
   1609c:	68fb      	ldr	r3, [r7, #12]
   1609e:	2b00      	cmp	r3, #0
   160a0:	d011      	beq.n	160c6 <HciLeRemoveDeviceFromResolvingList+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   160a2:	68fb      	ldr	r3, [r7, #12]
   160a4:	3303      	adds	r3, #3
   160a6:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, peerAddrType);
   160a8:	68bb      	ldr	r3, [r7, #8]
   160aa:	1c5a      	adds	r2, r3, #1
   160ac:	60ba      	str	r2, [r7, #8]
   160ae:	79fa      	ldrb	r2, [r7, #7]
   160b0:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pPeerIdentityAddr);
   160b2:	68b8      	ldr	r0, [r7, #8]
   160b4:	6839      	ldr	r1, [r7, #0]
   160b6:	f7fc fec9 	bl	12e4c <BdaCpy>
   160ba:	68bb      	ldr	r3, [r7, #8]
   160bc:	3306      	adds	r3, #6
   160be:	60bb      	str	r3, [r7, #8]
    hciCmdSend(pBuf);
   160c0:	68f8      	ldr	r0, [r7, #12]
   160c2:	f7ff f96f 	bl	153a4 <hciCmdSend>
  }
}
   160c6:	3710      	adds	r7, #16
   160c8:	46bd      	mov	sp, r7
   160ca:	bd80      	pop	{r7, pc}

000160cc <HciLeClearResolvingList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeClearResolvingList(void)
{
   160cc:	b580      	push	{r7, lr}
   160ce:	b082      	sub	sp, #8
   160d0:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_CLEAR_RES_LIST, HCI_LEN_LE_CLEAR_RES_LIST)) != NULL)
   160d2:	f242 0029 	movw	r0, #8233	; 0x2029
   160d6:	2100      	movs	r1, #0
   160d8:	f7ff f936 	bl	15348 <hciCmdAlloc>
   160dc:	6078      	str	r0, [r7, #4]
   160de:	687b      	ldr	r3, [r7, #4]
   160e0:	2b00      	cmp	r3, #0
   160e2:	d002      	beq.n	160ea <HciLeClearResolvingList+0x1e>
  {
    hciCmdSend(pBuf);
   160e4:	6878      	ldr	r0, [r7, #4]
   160e6:	f7ff f95d 	bl	153a4 <hciCmdSend>
  }
}
   160ea:	3708      	adds	r7, #8
   160ec:	46bd      	mov	sp, r7
   160ee:	bd80      	pop	{r7, pc}

000160f0 <HciLeReadResolvingListSize>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadResolvingListSize(void)
{
   160f0:	b580      	push	{r7, lr}
   160f2:	b082      	sub	sp, #8
   160f4:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_RES_LIST_SIZE, HCI_LEN_LE_READ_RES_LIST_SIZE)) != NULL)
   160f6:	f242 002a 	movw	r0, #8234	; 0x202a
   160fa:	2100      	movs	r1, #0
   160fc:	f7ff f924 	bl	15348 <hciCmdAlloc>
   16100:	6078      	str	r0, [r7, #4]
   16102:	687b      	ldr	r3, [r7, #4]
   16104:	2b00      	cmp	r3, #0
   16106:	d002      	beq.n	1610e <HciLeReadResolvingListSize+0x1e>
  {
    hciCmdSend(pBuf);
   16108:	6878      	ldr	r0, [r7, #4]
   1610a:	f7ff f94b 	bl	153a4 <hciCmdSend>
  }
}
   1610e:	3708      	adds	r7, #8
   16110:	46bd      	mov	sp, r7
   16112:	bd80      	pop	{r7, pc}

00016114 <HciLeReadPeerResolvableAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadPeerResolvableAddr(uint8_t addrType, const uint8_t *pIdentityAddr)
{
   16114:	b580      	push	{r7, lr}
   16116:	b084      	sub	sp, #16
   16118:	af00      	add	r7, sp, #0
   1611a:	4603      	mov	r3, r0
   1611c:	6039      	str	r1, [r7, #0]
   1611e:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_PEER_RES_ADDR, HCI_LEN_LE_READ_PEER_RES_ADDR)) != NULL)
   16120:	f242 002b 	movw	r0, #8235	; 0x202b
   16124:	2107      	movs	r1, #7
   16126:	f7ff f90f 	bl	15348 <hciCmdAlloc>
   1612a:	60f8      	str	r0, [r7, #12]
   1612c:	68fb      	ldr	r3, [r7, #12]
   1612e:	2b00      	cmp	r3, #0
   16130:	d011      	beq.n	16156 <HciLeReadPeerResolvableAddr+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   16132:	68fb      	ldr	r3, [r7, #12]
   16134:	3303      	adds	r3, #3
   16136:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, addrType);
   16138:	68bb      	ldr	r3, [r7, #8]
   1613a:	1c5a      	adds	r2, r3, #1
   1613c:	60ba      	str	r2, [r7, #8]
   1613e:	79fa      	ldrb	r2, [r7, #7]
   16140:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pIdentityAddr);
   16142:	68b8      	ldr	r0, [r7, #8]
   16144:	6839      	ldr	r1, [r7, #0]
   16146:	f7fc fe81 	bl	12e4c <BdaCpy>
   1614a:	68bb      	ldr	r3, [r7, #8]
   1614c:	3306      	adds	r3, #6
   1614e:	60bb      	str	r3, [r7, #8]
    hciCmdSend(pBuf);
   16150:	68f8      	ldr	r0, [r7, #12]
   16152:	f7ff f927 	bl	153a4 <hciCmdSend>
  }
}
   16156:	3710      	adds	r7, #16
   16158:	46bd      	mov	sp, r7
   1615a:	bd80      	pop	{r7, pc}

0001615c <HciLeReadLocalResolvableAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadLocalResolvableAddr(uint8_t addrType, const uint8_t *pIdentityAddr)
{
   1615c:	b580      	push	{r7, lr}
   1615e:	b084      	sub	sp, #16
   16160:	af00      	add	r7, sp, #0
   16162:	4603      	mov	r3, r0
   16164:	6039      	str	r1, [r7, #0]
   16166:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_LOCAL_RES_ADDR, HCI_LEN_LE_READ_LOCAL_RES_ADDR)) != NULL)
   16168:	f242 002c 	movw	r0, #8236	; 0x202c
   1616c:	2107      	movs	r1, #7
   1616e:	f7ff f8eb 	bl	15348 <hciCmdAlloc>
   16172:	60f8      	str	r0, [r7, #12]
   16174:	68fb      	ldr	r3, [r7, #12]
   16176:	2b00      	cmp	r3, #0
   16178:	d011      	beq.n	1619e <HciLeReadLocalResolvableAddr+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1617a:	68fb      	ldr	r3, [r7, #12]
   1617c:	3303      	adds	r3, #3
   1617e:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, addrType);
   16180:	68bb      	ldr	r3, [r7, #8]
   16182:	1c5a      	adds	r2, r3, #1
   16184:	60ba      	str	r2, [r7, #8]
   16186:	79fa      	ldrb	r2, [r7, #7]
   16188:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pIdentityAddr);
   1618a:	68b8      	ldr	r0, [r7, #8]
   1618c:	6839      	ldr	r1, [r7, #0]
   1618e:	f7fc fe5d 	bl	12e4c <BdaCpy>
   16192:	68bb      	ldr	r3, [r7, #8]
   16194:	3306      	adds	r3, #6
   16196:	60bb      	str	r3, [r7, #8]
    hciCmdSend(pBuf);
   16198:	68f8      	ldr	r0, [r7, #12]
   1619a:	f7ff f903 	bl	153a4 <hciCmdSend>
  }
}
   1619e:	3710      	adds	r7, #16
   161a0:	46bd      	mov	sp, r7
   161a2:	bd80      	pop	{r7, pc}

000161a4 <HciLeSetAddrResolutionEnable>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetAddrResolutionEnable(uint8_t enable)
{
   161a4:	b580      	push	{r7, lr}
   161a6:	b084      	sub	sp, #16
   161a8:	af00      	add	r7, sp, #0
   161aa:	4603      	mov	r3, r0
   161ac:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADDR_RES_ENABLE, HCI_LEN_LE_SET_ADDR_RES_ENABLE)) != NULL)
   161ae:	f242 002d 	movw	r0, #8237	; 0x202d
   161b2:	2101      	movs	r1, #1
   161b4:	f7ff f8c8 	bl	15348 <hciCmdAlloc>
   161b8:	60f8      	str	r0, [r7, #12]
   161ba:	68fb      	ldr	r3, [r7, #12]
   161bc:	2b00      	cmp	r3, #0
   161be:	d00a      	beq.n	161d6 <HciLeSetAddrResolutionEnable+0x32>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   161c0:	68fb      	ldr	r3, [r7, #12]
   161c2:	3303      	adds	r3, #3
   161c4:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, enable);
   161c6:	68bb      	ldr	r3, [r7, #8]
   161c8:	1c5a      	adds	r2, r3, #1
   161ca:	60ba      	str	r2, [r7, #8]
   161cc:	79fa      	ldrb	r2, [r7, #7]
   161ce:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   161d0:	68f8      	ldr	r0, [r7, #12]
   161d2:	f7ff f8e7 	bl	153a4 <hciCmdSend>
  }
}
   161d6:	3710      	adds	r7, #16
   161d8:	46bd      	mov	sp, r7
   161da:	bd80      	pop	{r7, pc}

000161dc <HciLeSetResolvablePrivateAddrTimeout>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetResolvablePrivateAddrTimeout(uint16_t rpaTimeout)
{
   161dc:	b580      	push	{r7, lr}
   161de:	b084      	sub	sp, #16
   161e0:	af00      	add	r7, sp, #0
   161e2:	4603      	mov	r3, r0
   161e4:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_RES_PRIV_ADDR_TO, HCI_LEN_LE_SET_RES_PRIV_ADDR_TO)) != NULL)
   161e6:	f242 002e 	movw	r0, #8238	; 0x202e
   161ea:	2102      	movs	r1, #2
   161ec:	f7ff f8ac 	bl	15348 <hciCmdAlloc>
   161f0:	60f8      	str	r0, [r7, #12]
   161f2:	68fb      	ldr	r3, [r7, #12]
   161f4:	2b00      	cmp	r3, #0
   161f6:	d013      	beq.n	16220 <HciLeSetResolvablePrivateAddrTimeout+0x44>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   161f8:	68fb      	ldr	r3, [r7, #12]
   161fa:	3303      	adds	r3, #3
   161fc:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, rpaTimeout);
   161fe:	68bb      	ldr	r3, [r7, #8]
   16200:	1c5a      	adds	r2, r3, #1
   16202:	60ba      	str	r2, [r7, #8]
   16204:	88fa      	ldrh	r2, [r7, #6]
   16206:	b2d2      	uxtb	r2, r2
   16208:	701a      	strb	r2, [r3, #0]
   1620a:	68bb      	ldr	r3, [r7, #8]
   1620c:	1c5a      	adds	r2, r3, #1
   1620e:	60ba      	str	r2, [r7, #8]
   16210:	88fa      	ldrh	r2, [r7, #6]
   16212:	0a12      	lsrs	r2, r2, #8
   16214:	b292      	uxth	r2, r2
   16216:	b2d2      	uxtb	r2, r2
   16218:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   1621a:	68f8      	ldr	r0, [r7, #12]
   1621c:	f7ff f8c2 	bl	153a4 <hciCmdSend>
  }
}
   16220:	3710      	adds	r7, #16
   16222:	46bd      	mov	sp, r7
   16224:	bd80      	pop	{r7, pc}
   16226:	bf00      	nop

00016228 <HciLeSetPrivacyModeCmd>:
 *
 *  \return     None.
 */
/*************************************************************************************************/
void HciLeSetPrivacyModeCmd(uint8_t addrType, uint8_t *pAddr, uint8_t mode)
{
   16228:	b580      	push	{r7, lr}
   1622a:	b084      	sub	sp, #16
   1622c:	af00      	add	r7, sp, #0
   1622e:	4603      	mov	r3, r0
   16230:	6039      	str	r1, [r7, #0]
   16232:	71fb      	strb	r3, [r7, #7]
   16234:	4613      	mov	r3, r2
   16236:	71bb      	strb	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_PRIVACY_MODE, HCI_LEN_LE_SET_PRIVACY_MODE)) != NULL)
   16238:	f242 004e 	movw	r0, #8270	; 0x204e
   1623c:	2108      	movs	r1, #8
   1623e:	f7ff f883 	bl	15348 <hciCmdAlloc>
   16242:	60f8      	str	r0, [r7, #12]
   16244:	68fb      	ldr	r3, [r7, #12]
   16246:	2b00      	cmp	r3, #0
   16248:	d016      	beq.n	16278 <HciLeSetPrivacyModeCmd+0x50>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1624a:	68fb      	ldr	r3, [r7, #12]
   1624c:	3303      	adds	r3, #3
   1624e:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, addrType);
   16250:	68bb      	ldr	r3, [r7, #8]
   16252:	1c5a      	adds	r2, r3, #1
   16254:	60ba      	str	r2, [r7, #8]
   16256:	79fa      	ldrb	r2, [r7, #7]
   16258:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pAddr);
   1625a:	68b8      	ldr	r0, [r7, #8]
   1625c:	6839      	ldr	r1, [r7, #0]
   1625e:	f7fc fdf5 	bl	12e4c <BdaCpy>
   16262:	68bb      	ldr	r3, [r7, #8]
   16264:	3306      	adds	r3, #6
   16266:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, mode);
   16268:	68bb      	ldr	r3, [r7, #8]
   1626a:	1c5a      	adds	r2, r3, #1
   1626c:	60ba      	str	r2, [r7, #8]
   1626e:	79ba      	ldrb	r2, [r7, #6]
   16270:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   16272:	68f8      	ldr	r0, [r7, #12]
   16274:	f7ff f896 	bl	153a4 <hciCmdSend>
  }
}
   16278:	3710      	adds	r7, #16
   1627a:	46bd      	mov	sp, r7
   1627c:	bd80      	pop	{r7, pc}
   1627e:	bf00      	nop

00016280 <HciVendorSpecificCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciVendorSpecificCmd(uint16_t opcode, uint8_t len, uint8_t *pData)
{
   16280:	b580      	push	{r7, lr}
   16282:	b084      	sub	sp, #16
   16284:	af00      	add	r7, sp, #0
   16286:	4603      	mov	r3, r0
   16288:	603a      	str	r2, [r7, #0]
   1628a:	80fb      	strh	r3, [r7, #6]
   1628c:	460b      	mov	r3, r1
   1628e:	717b      	strb	r3, [r7, #5]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(opcode, len)) != NULL)
   16290:	797b      	ldrb	r3, [r7, #5]
   16292:	b29b      	uxth	r3, r3
   16294:	88fa      	ldrh	r2, [r7, #6]
   16296:	4610      	mov	r0, r2
   16298:	4619      	mov	r1, r3
   1629a:	f7ff f855 	bl	15348 <hciCmdAlloc>
   1629e:	60f8      	str	r0, [r7, #12]
   162a0:	68fb      	ldr	r3, [r7, #12]
   162a2:	2b00      	cmp	r3, #0
   162a4:	d00b      	beq.n	162be <HciVendorSpecificCmd+0x3e>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   162a6:	68fb      	ldr	r3, [r7, #12]
   162a8:	3303      	adds	r3, #3
   162aa:	60bb      	str	r3, [r7, #8]
    memcpy(p, pData, len);
   162ac:	797b      	ldrb	r3, [r7, #5]
   162ae:	68b8      	ldr	r0, [r7, #8]
   162b0:	6839      	ldr	r1, [r7, #0]
   162b2:	461a      	mov	r2, r3
   162b4:	f7f5 ff24 	bl	c100 <memcpy>
    hciCmdSend(pBuf);
   162b8:	68f8      	ldr	r0, [r7, #12]
   162ba:	f7ff f873 	bl	153a4 <hciCmdSend>
  }
}
   162be:	3710      	adds	r7, #16
   162c0:	46bd      	mov	sp, r7
   162c2:	bd80      	pop	{r7, pc}

000162c4 <hciCoreConnAlloc>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciCoreConnAlloc(uint16_t handle)
{
   162c4:	b480      	push	{r7}
   162c6:	b085      	sub	sp, #20
   162c8:	af00      	add	r7, sp, #0
   162ca:	4603      	mov	r3, r0
   162cc:	80fb      	strh	r3, [r7, #6]
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   162ce:	4b13      	ldr	r3, [pc, #76]	; (1631c <hciCoreConnAlloc+0x58>)
   162d0:	60bb      	str	r3, [r7, #8]

  /* find available connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   162d2:	2308      	movs	r3, #8
   162d4:	73fb      	strb	r3, [r7, #15]
   162d6:	e018      	b.n	1630a <hciCoreConnAlloc+0x46>
  {
    if (pConn->handle == HCI_HANDLE_NONE)
   162d8:	68bb      	ldr	r3, [r7, #8]
   162da:	8a1b      	ldrh	r3, [r3, #16]
   162dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   162e0:	4293      	cmp	r3, r2
   162e2:	d10c      	bne.n	162fe <hciCoreConnAlloc+0x3a>
    {
      /* allocate and initialize */
      pConn->handle = handle;
   162e4:	68bb      	ldr	r3, [r7, #8]
   162e6:	88fa      	ldrh	r2, [r7, #6]
   162e8:	821a      	strh	r2, [r3, #16]
      pConn->flowDisabled = FALSE;
   162ea:	68bb      	ldr	r3, [r7, #8]
   162ec:	2200      	movs	r2, #0
   162ee:	75da      	strb	r2, [r3, #23]
      pConn->outBufs = 0;
   162f0:	68bb      	ldr	r3, [r7, #8]
   162f2:	2200      	movs	r2, #0
   162f4:	765a      	strb	r2, [r3, #25]
      pConn->queuedBufs = 0;
   162f6:	68bb      	ldr	r3, [r7, #8]
   162f8:	2200      	movs	r2, #0
   162fa:	761a      	strb	r2, [r3, #24]

      return;
   162fc:	e008      	b.n	16310 <hciCoreConnAlloc+0x4c>
{
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;

  /* find available connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   162fe:	7bfb      	ldrb	r3, [r7, #15]
   16300:	3b01      	subs	r3, #1
   16302:	73fb      	strb	r3, [r7, #15]
   16304:	68bb      	ldr	r3, [r7, #8]
   16306:	331c      	adds	r3, #28
   16308:	60bb      	str	r3, [r7, #8]
   1630a:	7bfb      	ldrb	r3, [r7, #15]
   1630c:	2b00      	cmp	r3, #0
   1630e:	d1e3      	bne.n	162d8 <hciCoreConnAlloc+0x14>
      return;
    }
  }

  HCI_TRACE_WARN0("HCI conn struct alloc failure");
}
   16310:	3714      	adds	r7, #20
   16312:	46bd      	mov	sp, r7
   16314:	f85d 7b04 	ldr.w	r7, [sp], #4
   16318:	4770      	bx	lr
   1631a:	bf00      	nop
   1631c:	1000a100 	.word	0x1000a100

00016320 <hciCoreConnFree>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciCoreConnFree(uint16_t handle)
{
   16320:	b580      	push	{r7, lr}
   16322:	b084      	sub	sp, #16
   16324:	af00      	add	r7, sp, #0
   16326:	4603      	mov	r3, r0
   16328:	80fb      	strh	r3, [r7, #6]
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   1632a:	4b1d      	ldr	r3, [pc, #116]	; (163a0 <hciCoreConnFree+0x80>)
   1632c:	60bb      	str	r3, [r7, #8]

  /* find connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   1632e:	2308      	movs	r3, #8
   16330:	73fb      	strb	r3, [r7, #15]
   16332:	e02f      	b.n	16394 <hciCoreConnFree+0x74>
  {
    if (pConn->handle == handle)
   16334:	68bb      	ldr	r3, [r7, #8]
   16336:	8a1b      	ldrh	r3, [r3, #16]
   16338:	88fa      	ldrh	r2, [r7, #6]
   1633a:	429a      	cmp	r2, r3
   1633c:	d124      	bne.n	16388 <hciCoreConnFree+0x68>
    {
      /* free any fragmenting ACL packet */
      if (pConn->pTxAclPkt != NULL)
   1633e:	68bb      	ldr	r3, [r7, #8]
   16340:	681b      	ldr	r3, [r3, #0]
   16342:	2b00      	cmp	r3, #0
   16344:	d007      	beq.n	16356 <hciCoreConnFree+0x36>
      {
        WsfMsgFree(pConn->pTxAclPkt);
   16346:	68bb      	ldr	r3, [r7, #8]
   16348:	681b      	ldr	r3, [r3, #0]
   1634a:	4618      	mov	r0, r3
   1634c:	f002 ff0e 	bl	1916c <WsfMsgFree>
        pConn->pTxAclPkt = NULL;
   16350:	68bb      	ldr	r3, [r7, #8]
   16352:	2200      	movs	r2, #0
   16354:	601a      	str	r2, [r3, #0]
      }
      pConn->fragmenting = FALSE;
   16356:	68bb      	ldr	r3, [r7, #8]
   16358:	2200      	movs	r2, #0
   1635a:	759a      	strb	r2, [r3, #22]

      if (pConn->pRxAclPkt != NULL)
   1635c:	68bb      	ldr	r3, [r7, #8]
   1635e:	689b      	ldr	r3, [r3, #8]
   16360:	2b00      	cmp	r3, #0
   16362:	d007      	beq.n	16374 <hciCoreConnFree+0x54>
      {
        WsfMsgFree(pConn->pRxAclPkt);
   16364:	68bb      	ldr	r3, [r7, #8]
   16366:	689b      	ldr	r3, [r3, #8]
   16368:	4618      	mov	r0, r3
   1636a:	f002 feff 	bl	1916c <WsfMsgFree>
        pConn->pRxAclPkt = NULL;
   1636e:	68bb      	ldr	r3, [r7, #8]
   16370:	2200      	movs	r2, #0
   16372:	609a      	str	r2, [r3, #8]
      }

      /* free structure */
      pConn->handle = HCI_HANDLE_NONE;
   16374:	68bb      	ldr	r3, [r7, #8]
   16376:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1637a:	821a      	strh	r2, [r3, #16]

      /* optional: iterate through tx ACL queue and free any buffers with this handle */

      /* outstanding buffers are now available; service TX data path */
      hciCoreTxReady(pConn->outBufs);
   1637c:	68bb      	ldr	r3, [r7, #8]
   1637e:	7e5b      	ldrb	r3, [r3, #25]
   16380:	4618      	mov	r0, r3
   16382:	f000 f893 	bl	164ac <hciCoreTxReady>

      return;
   16386:	e008      	b.n	1639a <hciCoreConnFree+0x7a>
{
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;

  /* find connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   16388:	7bfb      	ldrb	r3, [r7, #15]
   1638a:	3b01      	subs	r3, #1
   1638c:	73fb      	strb	r3, [r7, #15]
   1638e:	68bb      	ldr	r3, [r7, #8]
   16390:	331c      	adds	r3, #28
   16392:	60bb      	str	r3, [r7, #8]
   16394:	7bfb      	ldrb	r3, [r7, #15]
   16396:	2b00      	cmp	r3, #0
   16398:	d1cc      	bne.n	16334 <hciCoreConnFree+0x14>
      return;
    }
  }

  HCI_TRACE_WARN1("hciCoreConnFree handle not found:%u", handle);
}
   1639a:	3710      	adds	r7, #16
   1639c:	46bd      	mov	sp, r7
   1639e:	bd80      	pop	{r7, pc}
   163a0:	1000a100 	.word	0x1000a100

000163a4 <hciCoreConnByHandle>:
 *
 *  \return Pointer to connection structure or NULL if not found.
 */
/*************************************************************************************************/
hciCoreConn_t *hciCoreConnByHandle(uint16_t handle)
{
   163a4:	b480      	push	{r7}
   163a6:	b085      	sub	sp, #20
   163a8:	af00      	add	r7, sp, #0
   163aa:	4603      	mov	r3, r0
   163ac:	80fb      	strh	r3, [r7, #6]
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   163ae:	4b0e      	ldr	r3, [pc, #56]	; (163e8 <hciCoreConnByHandle+0x44>)
   163b0:	60bb      	str	r3, [r7, #8]

  /* find available connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   163b2:	2308      	movs	r3, #8
   163b4:	73fb      	strb	r3, [r7, #15]
   163b6:	e00c      	b.n	163d2 <hciCoreConnByHandle+0x2e>
  {
    if (pConn->handle == handle)
   163b8:	68bb      	ldr	r3, [r7, #8]
   163ba:	8a1b      	ldrh	r3, [r3, #16]
   163bc:	88fa      	ldrh	r2, [r7, #6]
   163be:	429a      	cmp	r2, r3
   163c0:	d101      	bne.n	163c6 <hciCoreConnByHandle+0x22>
    {
      return pConn;
   163c2:	68bb      	ldr	r3, [r7, #8]
   163c4:	e009      	b.n	163da <hciCoreConnByHandle+0x36>
{
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;

  /* find available connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   163c6:	7bfb      	ldrb	r3, [r7, #15]
   163c8:	3b01      	subs	r3, #1
   163ca:	73fb      	strb	r3, [r7, #15]
   163cc:	68bb      	ldr	r3, [r7, #8]
   163ce:	331c      	adds	r3, #28
   163d0:	60bb      	str	r3, [r7, #8]
   163d2:	7bfb      	ldrb	r3, [r7, #15]
   163d4:	2b00      	cmp	r3, #0
   163d6:	d1ef      	bne.n	163b8 <hciCoreConnByHandle+0x14>
    {
      return pConn;
    }
  }

  return NULL;
   163d8:	2300      	movs	r3, #0
}
   163da:	4618      	mov	r0, r3
   163dc:	3714      	adds	r7, #20
   163de:	46bd      	mov	sp, r7
   163e0:	f85d 7b04 	ldr.w	r7, [sp], #4
   163e4:	4770      	bx	lr
   163e6:	bf00      	nop
   163e8:	1000a100 	.word	0x1000a100

000163ec <hciCoreNextConnFragment>:
 *
 *  \return Pointer to connection structure or NULL if not found.
 */
/*************************************************************************************************/
static hciCoreConn_t *hciCoreNextConnFragment(void)
{
   163ec:	b480      	push	{r7}
   163ee:	b083      	sub	sp, #12
   163f0:	af00      	add	r7, sp, #0
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   163f2:	4b10      	ldr	r3, [pc, #64]	; (16434 <hciCoreNextConnFragment+0x48>)
   163f4:	603b      	str	r3, [r7, #0]

  /* find connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   163f6:	2308      	movs	r3, #8
   163f8:	71fb      	strb	r3, [r7, #7]
   163fa:	e011      	b.n	16420 <hciCoreNextConnFragment+0x34>
  {
    if (pConn->handle != HCI_HANDLE_NONE && pConn->fragmenting)
   163fc:	683b      	ldr	r3, [r7, #0]
   163fe:	8a1b      	ldrh	r3, [r3, #16]
   16400:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16404:	4293      	cmp	r3, r2
   16406:	d005      	beq.n	16414 <hciCoreNextConnFragment+0x28>
   16408:	683b      	ldr	r3, [r7, #0]
   1640a:	7d9b      	ldrb	r3, [r3, #22]
   1640c:	2b00      	cmp	r3, #0
   1640e:	d001      	beq.n	16414 <hciCoreNextConnFragment+0x28>
    {
      return pConn;
   16410:	683b      	ldr	r3, [r7, #0]
   16412:	e009      	b.n	16428 <hciCoreNextConnFragment+0x3c>
{
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;

  /* find connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   16414:	79fb      	ldrb	r3, [r7, #7]
   16416:	3b01      	subs	r3, #1
   16418:	71fb      	strb	r3, [r7, #7]
   1641a:	683b      	ldr	r3, [r7, #0]
   1641c:	331c      	adds	r3, #28
   1641e:	603b      	str	r3, [r7, #0]
   16420:	79fb      	ldrb	r3, [r7, #7]
   16422:	2b00      	cmp	r3, #0
   16424:	d1ea      	bne.n	163fc <hciCoreNextConnFragment+0x10>
    {
      return pConn;
    }
  }

  return NULL;
   16426:	2300      	movs	r3, #0
}
   16428:	4618      	mov	r0, r3
   1642a:	370c      	adds	r7, #12
   1642c:	46bd      	mov	sp, r7
   1642e:	f85d 7b04 	ldr.w	r7, [sp], #4
   16432:	4770      	bx	lr
   16434:	1000a100 	.word	0x1000a100

00016438 <hciCoreConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreConnOpen(uint16_t handle)
{
   16438:	b580      	push	{r7, lr}
   1643a:	b082      	sub	sp, #8
   1643c:	af00      	add	r7, sp, #0
   1643e:	4603      	mov	r3, r0
   16440:	80fb      	strh	r3, [r7, #6]
  /* allocate connection structure */
  hciCoreConnAlloc(handle);
   16442:	88fb      	ldrh	r3, [r7, #6]
   16444:	4618      	mov	r0, r3
   16446:	f7ff ff3d 	bl	162c4 <hciCoreConnAlloc>
}
   1644a:	3708      	adds	r7, #8
   1644c:	46bd      	mov	sp, r7
   1644e:	bd80      	pop	{r7, pc}

00016450 <hciCoreConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreConnClose(uint16_t handle)
{
   16450:	b580      	push	{r7, lr}
   16452:	b082      	sub	sp, #8
   16454:	af00      	add	r7, sp, #0
   16456:	4603      	mov	r3, r0
   16458:	80fb      	strh	r3, [r7, #6]
  /* free connection structure */
  hciCoreConnFree(handle);
   1645a:	88fb      	ldrh	r3, [r7, #6]
   1645c:	4618      	mov	r0, r3
   1645e:	f7ff ff5f 	bl	16320 <hciCoreConnFree>
}
   16462:	3708      	adds	r7, #8
   16464:	46bd      	mov	sp, r7
   16466:	bd80      	pop	{r7, pc}

00016468 <hciCoreSendAclData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreSendAclData(hciCoreConn_t *pConn, uint8_t *pData)
{
   16468:	b580      	push	{r7, lr}
   1646a:	b082      	sub	sp, #8
   1646c:	af00      	add	r7, sp, #0
   1646e:	6078      	str	r0, [r7, #4]
   16470:	6039      	str	r1, [r7, #0]
  /* increment outstanding buf count for handle */
  pConn->outBufs++;
   16472:	687b      	ldr	r3, [r7, #4]
   16474:	7e5b      	ldrb	r3, [r3, #25]
   16476:	3301      	adds	r3, #1
   16478:	b2da      	uxtb	r2, r3
   1647a:	687b      	ldr	r3, [r7, #4]
   1647c:	765a      	strb	r2, [r3, #25]

  /* send to transport */
  hciTrSendAclData(pConn, pData);
   1647e:	6878      	ldr	r0, [r7, #4]
   16480:	6839      	ldr	r1, [r7, #0]
   16482:	f002 fa15 	bl	188b0 <hciTrSendAclData>

  /* decrement available buffer count */
  if (hciCoreCb.availBufs > 0)
   16486:	4b08      	ldr	r3, [pc, #32]	; (164a8 <hciCoreSendAclData+0x40>)
   16488:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
   1648c:	2b00      	cmp	r3, #0
   1648e:	d007      	beq.n	164a0 <hciCoreSendAclData+0x38>
  {
    hciCoreCb.availBufs--;
   16490:	4b05      	ldr	r3, [pc, #20]	; (164a8 <hciCoreSendAclData+0x40>)
   16492:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
   16496:	3b01      	subs	r3, #1
   16498:	b2da      	uxtb	r2, r3
   1649a:	4b03      	ldr	r3, [pc, #12]	; (164a8 <hciCoreSendAclData+0x40>)
   1649c:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
  }
  else
  {
    HCI_TRACE_WARN0("hciCoreSendAclData availBufs=0");
  }
}
   164a0:	3708      	adds	r7, #8
   164a2:	46bd      	mov	sp, r7
   164a4:	bd80      	pop	{r7, pc}
   164a6:	bf00      	nop
   164a8:	1000a100 	.word	0x1000a100

000164ac <hciCoreTxReady>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreTxReady(uint8_t bufs)
{
   164ac:	b580      	push	{r7, lr}
   164ae:	b086      	sub	sp, #24
   164b0:	af00      	add	r7, sp, #0
   164b2:	4603      	mov	r3, r0
   164b4:	71fb      	strb	r3, [r7, #7]
  uint16_t        handle;
  uint16_t        len;
  hciCoreConn_t   *pConn;

  /* increment available buffers, with ceiling */
  if (bufs > 0)
   164b6:	79fb      	ldrb	r3, [r7, #7]
   164b8:	2b00      	cmp	r3, #0
   164ba:	d016      	beq.n	164ea <hciCoreTxReady+0x3e>
  {
    hciCoreCb.availBufs += bufs;
   164bc:	4b2d      	ldr	r3, [pc, #180]	; (16574 <hciCoreTxReady+0xc8>)
   164be:	f893 2102 	ldrb.w	r2, [r3, #258]	; 0x102
   164c2:	79fb      	ldrb	r3, [r7, #7]
   164c4:	4413      	add	r3, r2
   164c6:	b2da      	uxtb	r2, r3
   164c8:	4b2a      	ldr	r3, [pc, #168]	; (16574 <hciCoreTxReady+0xc8>)
   164ca:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
    if (hciCoreCb.availBufs > hciCoreCb.numBufs)
   164ce:	4b29      	ldr	r3, [pc, #164]	; (16574 <hciCoreTxReady+0xc8>)
   164d0:	f893 2102 	ldrb.w	r2, [r3, #258]	; 0x102
   164d4:	4b27      	ldr	r3, [pc, #156]	; (16574 <hciCoreTxReady+0xc8>)
   164d6:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
   164da:	429a      	cmp	r2, r3
   164dc:	d905      	bls.n	164ea <hciCoreTxReady+0x3e>
    {
      hciCoreCb.availBufs = hciCoreCb.numBufs;
   164de:	4b25      	ldr	r3, [pc, #148]	; (16574 <hciCoreTxReady+0xc8>)
   164e0:	f893 2103 	ldrb.w	r2, [r3, #259]	; 0x103
   164e4:	4b23      	ldr	r3, [pc, #140]	; (16574 <hciCoreTxReady+0xc8>)
   164e6:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
    }
  }

  /* service ACL data queue and send as many buffers as we can */
  while (hciCoreCb.availBufs > 0)
   164ea:	e03a      	b.n	16562 <hciCoreTxReady+0xb6>
  {
    /* send continuation of any fragments first */
    if (hciCoreTxAclContinue(NULL) == FALSE)
   164ec:	2000      	movs	r0, #0
   164ee:	f000 f88b 	bl	16608 <hciCoreTxAclContinue>
   164f2:	4603      	mov	r3, r0
   164f4:	2b00      	cmp	r3, #0
   164f6:	d134      	bne.n	16562 <hciCoreTxReady+0xb6>
    {
      /* if no fragments then check for any queued ACL data */
      if ((pData = WsfMsgDeq(&hciCoreCb.aclQueue, &handlerId)) != NULL)
   164f8:	f107 030b 	add.w	r3, r7, #11
   164fc:	481e      	ldr	r0, [pc, #120]	; (16578 <hciCoreTxReady+0xcc>)
   164fe:	4619      	mov	r1, r3
   16500:	f002 fe6e 	bl	191e0 <WsfMsgDeq>
   16504:	6178      	str	r0, [r7, #20]
   16506:	697b      	ldr	r3, [r7, #20]
   16508:	2b00      	cmp	r3, #0
   1650a:	d029      	beq.n	16560 <hciCoreTxReady+0xb4>
      {
        /* parse handle and length */
        BYTES_TO_UINT16(handle, pData);
   1650c:	697b      	ldr	r3, [r7, #20]
   1650e:	781b      	ldrb	r3, [r3, #0]
   16510:	b29a      	uxth	r2, r3
   16512:	697b      	ldr	r3, [r7, #20]
   16514:	3301      	adds	r3, #1
   16516:	781b      	ldrb	r3, [r3, #0]
   16518:	b29b      	uxth	r3, r3
   1651a:	021b      	lsls	r3, r3, #8
   1651c:	b29b      	uxth	r3, r3
   1651e:	4413      	add	r3, r2
   16520:	827b      	strh	r3, [r7, #18]
        BYTES_TO_UINT16(len, &pData[2]);
   16522:	697b      	ldr	r3, [r7, #20]
   16524:	3302      	adds	r3, #2
   16526:	781b      	ldrb	r3, [r3, #0]
   16528:	b29a      	uxth	r2, r3
   1652a:	697b      	ldr	r3, [r7, #20]
   1652c:	3303      	adds	r3, #3
   1652e:	781b      	ldrb	r3, [r3, #0]
   16530:	b29b      	uxth	r3, r3
   16532:	021b      	lsls	r3, r3, #8
   16534:	b29b      	uxth	r3, r3
   16536:	4413      	add	r3, r2
   16538:	823b      	strh	r3, [r7, #16]

        /* look up conn structure and send data */
        if ((pConn = hciCoreConnByHandle(handle)) != NULL)
   1653a:	8a7b      	ldrh	r3, [r7, #18]
   1653c:	4618      	mov	r0, r3
   1653e:	f7ff ff31 	bl	163a4 <hciCoreConnByHandle>
   16542:	60f8      	str	r0, [r7, #12]
   16544:	68fb      	ldr	r3, [r7, #12]
   16546:	2b00      	cmp	r3, #0
   16548:	d006      	beq.n	16558 <hciCoreTxReady+0xac>
        {
          hciCoreTxAclStart(pConn, len, pData);
   1654a:	8a3b      	ldrh	r3, [r7, #16]
   1654c:	68f8      	ldr	r0, [r7, #12]
   1654e:	4619      	mov	r1, r3
   16550:	697a      	ldr	r2, [r7, #20]
   16552:	f000 f813 	bl	1657c <hciCoreTxAclStart>
   16556:	e004      	b.n	16562 <hciCoreTxReady+0xb6>
        }
        /* handle not found, connection must be closed */
        else
        {
          /* discard buffer */
          WsfMsgFree(pData);
   16558:	6978      	ldr	r0, [r7, #20]
   1655a:	f002 fe07 	bl	1916c <WsfMsgFree>
   1655e:	e000      	b.n	16562 <hciCoreTxReady+0xb6>
        }
      }
      else
      {
        /* no fragments or queued data to send; we're done */
        break;
   16560:	e004      	b.n	1656c <hciCoreTxReady+0xc0>
      hciCoreCb.availBufs = hciCoreCb.numBufs;
    }
  }

  /* service ACL data queue and send as many buffers as we can */
  while (hciCoreCb.availBufs > 0)
   16562:	4b04      	ldr	r3, [pc, #16]	; (16574 <hciCoreTxReady+0xc8>)
   16564:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
   16568:	2b00      	cmp	r3, #0
   1656a:	d1bf      	bne.n	164ec <hciCoreTxReady+0x40>
        /* no fragments or queued data to send; we're done */
        break;
      }
    }
  }
}
   1656c:	3718      	adds	r7, #24
   1656e:	46bd      	mov	sp, r7
   16570:	bd80      	pop	{r7, pc}
   16572:	bf00      	nop
   16574:	1000a100 	.word	0x1000a100
   16578:	1000a1f0 	.word	0x1000a1f0

0001657c <hciCoreTxAclStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreTxAclStart(hciCoreConn_t *pConn, uint16_t len, uint8_t *pData)
{
   1657c:	b580      	push	{r7, lr}
   1657e:	b086      	sub	sp, #24
   16580:	af00      	add	r7, sp, #0
   16582:	60f8      	str	r0, [r7, #12]
   16584:	460b      	mov	r3, r1
   16586:	607a      	str	r2, [r7, #4]
   16588:	817b      	strh	r3, [r7, #10]
  uint16_t hciLen;

  /* make sure not already fragmenting on this connection */
  WSF_ASSERT(pConn->fragmenting == FALSE);

  hciLen = HciGetBufSize();
   1658a:	f000 fb7b 	bl	16c84 <HciGetBufSize>
   1658e:	4603      	mov	r3, r0
   16590:	82fb      	strh	r3, [r7, #22]

  HCI_TRACE_INFO1("hciCoreTxAclStart len=%u", len);

  /* if acl len > controller acl buf len */
  if (len > hciLen)
   16592:	897a      	ldrh	r2, [r7, #10]
   16594:	8afb      	ldrh	r3, [r7, #22]
   16596:	429a      	cmp	r2, r3
   16598:	d92d      	bls.n	165f6 <hciCoreTxAclStart+0x7a>
  {
    /* store remaining acl len = acl len - hci acl buf len */
    pConn->txAclRemLen = len - hciLen;
   1659a:	897a      	ldrh	r2, [r7, #10]
   1659c:	8afb      	ldrh	r3, [r7, #22]
   1659e:	1ad3      	subs	r3, r2, r3
   165a0:	b29a      	uxth	r2, r3
   165a2:	68fb      	ldr	r3, [r7, #12]
   165a4:	825a      	strh	r2, [r3, #18]

    /* store position for next fragment */
    pConn->pNextTxFrag = pData + hciLen;
   165a6:	8afb      	ldrh	r3, [r7, #22]
   165a8:	687a      	ldr	r2, [r7, #4]
   165aa:	441a      	add	r2, r3
   165ac:	68fb      	ldr	r3, [r7, #12]
   165ae:	605a      	str	r2, [r3, #4]

    /* store information required for fragmentation */
    pConn->pTxAclPkt = pData;
   165b0:	68fb      	ldr	r3, [r7, #12]
   165b2:	687a      	ldr	r2, [r7, #4]
   165b4:	601a      	str	r2, [r3, #0]
    pConn->fragmenting = TRUE;
   165b6:	68fb      	ldr	r3, [r7, #12]
   165b8:	2201      	movs	r2, #1
   165ba:	759a      	strb	r2, [r3, #22]

    /* set acl len in packet to hci acl buf len */
    UINT16_TO_BUF(&pData[2], hciLen);
   165bc:	687b      	ldr	r3, [r7, #4]
   165be:	3302      	adds	r3, #2
   165c0:	8afa      	ldrh	r2, [r7, #22]
   165c2:	b2d2      	uxtb	r2, r2
   165c4:	701a      	strb	r2, [r3, #0]
   165c6:	687b      	ldr	r3, [r7, #4]
   165c8:	3303      	adds	r3, #3
   165ca:	8afa      	ldrh	r2, [r7, #22]
   165cc:	0a12      	lsrs	r2, r2, #8
   165ce:	b292      	uxth	r2, r2
   165d0:	b2d2      	uxtb	r2, r2
   165d2:	701a      	strb	r2, [r3, #0]

    /* send the packet */
    hciCoreSendAclData(pConn, pData);
   165d4:	68f8      	ldr	r0, [r7, #12]
   165d6:	6879      	ldr	r1, [r7, #4]
   165d8:	f7ff ff46 	bl	16468 <hciCoreSendAclData>

    /* send additional fragments while there are HCI buffers available */
    while ((hciCoreCb.availBufs > 0) && hciCoreTxAclContinue(pConn));
   165dc:	bf00      	nop
   165de:	4b09      	ldr	r3, [pc, #36]	; (16604 <hciCoreTxAclStart+0x88>)
   165e0:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
   165e4:	2b00      	cmp	r3, #0
   165e6:	d00a      	beq.n	165fe <hciCoreTxAclStart+0x82>
   165e8:	68f8      	ldr	r0, [r7, #12]
   165ea:	f000 f80d 	bl	16608 <hciCoreTxAclContinue>
   165ee:	4603      	mov	r3, r0
   165f0:	2b00      	cmp	r3, #0
   165f2:	d1f4      	bne.n	165de <hciCoreTxAclStart+0x62>
   165f4:	e003      	b.n	165fe <hciCoreTxAclStart+0x82>
  }
  else
  {
    /* no fragmentation, just send the packet */
    hciCoreSendAclData(pConn, pData);
   165f6:	68f8      	ldr	r0, [r7, #12]
   165f8:	6879      	ldr	r1, [r7, #4]
   165fa:	f7ff ff35 	bl	16468 <hciCoreSendAclData>
  }
}
   165fe:	3718      	adds	r7, #24
   16600:	46bd      	mov	sp, r7
   16602:	bd80      	pop	{r7, pc}
   16604:	1000a100 	.word	0x1000a100

00016608 <hciCoreTxAclContinue>:
 *
 *  \return TRUE if packet sent, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t hciCoreTxAclContinue(hciCoreConn_t *pConn)
{
   16608:	b590      	push	{r4, r7, lr}
   1660a:	b085      	sub	sp, #20
   1660c:	af00      	add	r7, sp, #0
   1660e:	6078      	str	r0, [r7, #4]
  uint16_t aclLen;

  if (pConn == NULL)
   16610:	687b      	ldr	r3, [r7, #4]
   16612:	2b00      	cmp	r3, #0
   16614:	d102      	bne.n	1661c <hciCoreTxAclContinue+0x14>
  {
    pConn = hciCoreNextConnFragment();
   16616:	f7ff fee9 	bl	163ec <hciCoreNextConnFragment>
   1661a:	6078      	str	r0, [r7, #4]
  }

  if (pConn != NULL)
   1661c:	687b      	ldr	r3, [r7, #4]
   1661e:	2b00      	cmp	r3, #0
   16620:	d049      	beq.n	166b6 <hciCoreTxAclContinue+0xae>
  {
    /* get next fragment length */
    aclLen = (pConn->txAclRemLen < HciGetBufSize()) ? pConn->txAclRemLen : HciGetBufSize();
   16622:	687b      	ldr	r3, [r7, #4]
   16624:	8a5c      	ldrh	r4, [r3, #18]
   16626:	f000 fb2d 	bl	16c84 <HciGetBufSize>
   1662a:	4603      	mov	r3, r0
   1662c:	429c      	cmp	r4, r3
   1662e:	d202      	bcs.n	16636 <hciCoreTxAclContinue+0x2e>
   16630:	687b      	ldr	r3, [r7, #4]
   16632:	8a5b      	ldrh	r3, [r3, #18]
   16634:	e002      	b.n	1663c <hciCoreTxAclContinue+0x34>
   16636:	f000 fb25 	bl	16c84 <HciGetBufSize>
   1663a:	4603      	mov	r3, r0
   1663c:	81fb      	strh	r3, [r7, #14]

    if (aclLen > 0)
   1663e:	89fb      	ldrh	r3, [r7, #14]
   16640:	2b00      	cmp	r3, #0
   16642:	d038      	beq.n	166b6 <hciCoreTxAclContinue+0xae>
    {
      /* decrement remaining length */
      pConn->txAclRemLen -= aclLen;
   16644:	687b      	ldr	r3, [r7, #4]
   16646:	8a5a      	ldrh	r2, [r3, #18]
   16648:	89fb      	ldrh	r3, [r7, #14]
   1664a:	1ad3      	subs	r3, r2, r3
   1664c:	b29a      	uxth	r2, r3
   1664e:	687b      	ldr	r3, [r7, #4]
   16650:	825a      	strh	r2, [r3, #18]

      /* set handle in packet with continuation bit set */
      UINT16_TO_BUF(pConn->pNextTxFrag, (pConn->handle | HCI_PB_CONTINUE));
   16652:	687b      	ldr	r3, [r7, #4]
   16654:	685b      	ldr	r3, [r3, #4]
   16656:	687a      	ldr	r2, [r7, #4]
   16658:	8a12      	ldrh	r2, [r2, #16]
   1665a:	b2d2      	uxtb	r2, r2
   1665c:	701a      	strb	r2, [r3, #0]
   1665e:	687b      	ldr	r3, [r7, #4]
   16660:	685b      	ldr	r3, [r3, #4]
   16662:	3301      	adds	r3, #1
   16664:	687a      	ldr	r2, [r7, #4]
   16666:	8a12      	ldrh	r2, [r2, #16]
   16668:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   1666c:	b292      	uxth	r2, r2
   1666e:	0a12      	lsrs	r2, r2, #8
   16670:	b292      	uxth	r2, r2
   16672:	b2d2      	uxtb	r2, r2
   16674:	701a      	strb	r2, [r3, #0]

      /* set acl len in packet */
      UINT16_TO_BUF(&(pConn->pNextTxFrag[2]), aclLen);
   16676:	687b      	ldr	r3, [r7, #4]
   16678:	685b      	ldr	r3, [r3, #4]
   1667a:	3302      	adds	r3, #2
   1667c:	89fa      	ldrh	r2, [r7, #14]
   1667e:	b2d2      	uxtb	r2, r2
   16680:	701a      	strb	r2, [r3, #0]
   16682:	687b      	ldr	r3, [r7, #4]
   16684:	685b      	ldr	r3, [r3, #4]
   16686:	3303      	adds	r3, #3
   16688:	89fa      	ldrh	r2, [r7, #14]
   1668a:	0a12      	lsrs	r2, r2, #8
   1668c:	b292      	uxth	r2, r2
   1668e:	b2d2      	uxtb	r2, r2
   16690:	701a      	strb	r2, [r3, #0]

      HCI_TRACE_INFO2("hciCoreTxAclContinue aclLen=%u remLen=%u", aclLen, pConn->txAclRemLen);

      /* send the packet */
      hciCoreSendAclData(pConn, pConn->pNextTxFrag);
   16692:	687b      	ldr	r3, [r7, #4]
   16694:	685b      	ldr	r3, [r3, #4]
   16696:	6878      	ldr	r0, [r7, #4]
   16698:	4619      	mov	r1, r3
   1669a:	f7ff fee5 	bl	16468 <hciCoreSendAclData>

      /* set up pointer to next fragment */
      if (pConn->txAclRemLen > 0)
   1669e:	687b      	ldr	r3, [r7, #4]
   166a0:	8a5b      	ldrh	r3, [r3, #18]
   166a2:	2b00      	cmp	r3, #0
   166a4:	d005      	beq.n	166b2 <hciCoreTxAclContinue+0xaa>
      {
        pConn->pNextTxFrag += aclLen;
   166a6:	687b      	ldr	r3, [r7, #4]
   166a8:	685a      	ldr	r2, [r3, #4]
   166aa:	89fb      	ldrh	r3, [r7, #14]
   166ac:	441a      	add	r2, r3
   166ae:	687b      	ldr	r3, [r7, #4]
   166b0:	605a      	str	r2, [r3, #4]
      }

      return TRUE;
   166b2:	2301      	movs	r3, #1
   166b4:	e000      	b.n	166b8 <hciCoreTxAclContinue+0xb0>
    }
  }

  return FALSE;
   166b6:	2300      	movs	r3, #0
}
   166b8:	4618      	mov	r0, r3
   166ba:	3714      	adds	r7, #20
   166bc:	46bd      	mov	sp, r7
   166be:	bd90      	pop	{r4, r7, pc}

000166c0 <hciCoreTxAclComplete>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreTxAclComplete(hciCoreConn_t *pConn, uint8_t *pData)
{
   166c0:	b580      	push	{r7, lr}
   166c2:	b082      	sub	sp, #8
   166c4:	af00      	add	r7, sp, #0
   166c6:	6078      	str	r0, [r7, #4]
   166c8:	6039      	str	r1, [r7, #0]
  /* if fragmenting */
  if (pConn->fragmenting)
   166ca:	687b      	ldr	r3, [r7, #4]
   166cc:	7d9b      	ldrb	r3, [r3, #22]
   166ce:	2b00      	cmp	r3, #0
   166d0:	d00f      	beq.n	166f2 <hciCoreTxAclComplete+0x32>
  {
    /* check if all fragments sent */
    if (pConn->txAclRemLen == 0)
   166d2:	687b      	ldr	r3, [r7, #4]
   166d4:	8a5b      	ldrh	r3, [r3, #18]
   166d6:	2b00      	cmp	r3, #0
   166d8:	d111      	bne.n	166fe <hciCoreTxAclComplete+0x3e>
    {
      /* free original buffer */
      WsfMsgFree(pConn->pTxAclPkt);
   166da:	687b      	ldr	r3, [r7, #4]
   166dc:	681b      	ldr	r3, [r3, #0]
   166de:	4618      	mov	r0, r3
   166e0:	f002 fd44 	bl	1916c <WsfMsgFree>
      pConn->pTxAclPkt = NULL;
   166e4:	687b      	ldr	r3, [r7, #4]
   166e6:	2200      	movs	r2, #0
   166e8:	601a      	str	r2, [r3, #0]
      pConn->fragmenting = FALSE;
   166ea:	687b      	ldr	r3, [r7, #4]
   166ec:	2200      	movs	r2, #0
   166ee:	759a      	strb	r2, [r3, #22]
   166f0:	e005      	b.n	166fe <hciCoreTxAclComplete+0x3e>
      HCI_TRACE_INFO0("hciCoreTxAclComplete free pTxAclPkt");
    }
  }
  else if (pData != NULL)
   166f2:	683b      	ldr	r3, [r7, #0]
   166f4:	2b00      	cmp	r3, #0
   166f6:	d002      	beq.n	166fe <hciCoreTxAclComplete+0x3e>
  {
    WsfMsgFree(pData);
   166f8:	6838      	ldr	r0, [r7, #0]
   166fa:	f002 fd37 	bl	1916c <WsfMsgFree>
  }
}
   166fe:	3708      	adds	r7, #8
   16700:	46bd      	mov	sp, r7
   16702:	bd80      	pop	{r7, pc}

00016704 <hciCoreAclReassembly>:
 *
 *  \return pointer to ACL packet to send, or NULL if no packet to send.
 */
/*************************************************************************************************/
uint8_t *hciCoreAclReassembly(uint8_t *pData)
{
   16704:	b580      	push	{r7, lr}
   16706:	b088      	sub	sp, #32
   16708:	af00      	add	r7, sp, #0
   1670a:	6078      	str	r0, [r7, #4]
  hciCoreConn_t *pConn;
  uint8_t       *pDataRtn = NULL;
   1670c:	2300      	movs	r3, #0
   1670e:	61fb      	str	r3, [r7, #28]
  uint16_t      handle;
  uint16_t      aclLen;
  uint16_t      l2cLen;
  uint16_t      pbf;
  bool_t        freeData = TRUE;
   16710:	2301      	movs	r3, #1
   16712:	76fb      	strb	r3, [r7, #27]

  BYTES_TO_UINT16(handle, pData);
   16714:	687b      	ldr	r3, [r7, #4]
   16716:	781b      	ldrb	r3, [r3, #0]
   16718:	b29a      	uxth	r2, r3
   1671a:	687b      	ldr	r3, [r7, #4]
   1671c:	3301      	adds	r3, #1
   1671e:	781b      	ldrb	r3, [r3, #0]
   16720:	b29b      	uxth	r3, r3
   16722:	021b      	lsls	r3, r3, #8
   16724:	b29b      	uxth	r3, r3
   16726:	4413      	add	r3, r2
   16728:	833b      	strh	r3, [r7, #24]
  pbf = handle & HCI_PB_FLAG_MASK;
   1672a:	8b3b      	ldrh	r3, [r7, #24]
   1672c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
   16730:	82fb      	strh	r3, [r7, #22]
  handle &= HCI_HANDLE_MASK;
   16732:	8b3b      	ldrh	r3, [r7, #24]
   16734:	f3c3 030b 	ubfx	r3, r3, #0, #12
   16738:	833b      	strh	r3, [r7, #24]
  BYTES_TO_UINT16(aclLen, &pData[2]);
   1673a:	687b      	ldr	r3, [r7, #4]
   1673c:	3302      	adds	r3, #2
   1673e:	781b      	ldrb	r3, [r3, #0]
   16740:	b29a      	uxth	r2, r3
   16742:	687b      	ldr	r3, [r7, #4]
   16744:	3303      	adds	r3, #3
   16746:	781b      	ldrb	r3, [r3, #0]
   16748:	b29b      	uxth	r3, r3
   1674a:	021b      	lsls	r3, r3, #8
   1674c:	b29b      	uxth	r3, r3
   1674e:	4413      	add	r3, r2
   16750:	82bb      	strh	r3, [r7, #20]

  /* look up connection */
  if ((pConn = hciCoreConnByHandle(handle)) != NULL)
   16752:	8b3b      	ldrh	r3, [r7, #24]
   16754:	4618      	mov	r0, r3
   16756:	f7ff fe25 	bl	163a4 <hciCoreConnByHandle>
   1675a:	6138      	str	r0, [r7, #16]
   1675c:	693b      	ldr	r3, [r7, #16]
   1675e:	2b00      	cmp	r3, #0
   16760:	f000 80b1 	beq.w	168c6 <hciCoreAclReassembly+0x1c2>
  {
    /* if this is a start packet */
    if (pbf == HCI_PB_START_C2H)
   16764:	8afb      	ldrh	r3, [r7, #22]
   16766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   1676a:	d17e      	bne.n	1686a <hciCoreAclReassembly+0x166>
    {
      /* if currently reassembled packet not complete */
      if (pConn->pRxAclPkt != NULL)
   1676c:	693b      	ldr	r3, [r7, #16]
   1676e:	689b      	ldr	r3, [r3, #8]
   16770:	2b00      	cmp	r3, #0
   16772:	d007      	beq.n	16784 <hciCoreAclReassembly+0x80>
      {
        /* discard currently reassembled packet */
        WsfMsgFree(pConn->pRxAclPkt);
   16774:	693b      	ldr	r3, [r7, #16]
   16776:	689b      	ldr	r3, [r3, #8]
   16778:	4618      	mov	r0, r3
   1677a:	f002 fcf7 	bl	1916c <WsfMsgFree>
        pConn->pRxAclPkt = NULL;
   1677e:	693b      	ldr	r3, [r7, #16]
   16780:	2200      	movs	r2, #0
   16782:	609a      	str	r2, [r3, #8]
        HCI_TRACE_WARN1("disarded hci rx pkt handle=0x%04x", handle);
      }

      /* read l2cap length */
      if (aclLen >= L2C_HDR_LEN)
   16784:	8abb      	ldrh	r3, [r7, #20]
   16786:	2b03      	cmp	r3, #3
   16788:	f240 809d 	bls.w	168c6 <hciCoreAclReassembly+0x1c2>
      {
        BYTES_TO_UINT16(l2cLen, &pData[4]);
   1678c:	687b      	ldr	r3, [r7, #4]
   1678e:	3304      	adds	r3, #4
   16790:	781b      	ldrb	r3, [r3, #0]
   16792:	b29a      	uxth	r2, r3
   16794:	687b      	ldr	r3, [r7, #4]
   16796:	3305      	adds	r3, #5
   16798:	781b      	ldrb	r3, [r3, #0]
   1679a:	b29b      	uxth	r3, r3
   1679c:	021b      	lsls	r3, r3, #8
   1679e:	b29b      	uxth	r3, r3
   167a0:	4413      	add	r3, r2
   167a2:	81fb      	strh	r3, [r7, #14]

        /* check length vs. configured maximum */
        if ((l2cLen + L2C_HDR_LEN) > hciCoreCb.maxRxAclLen)
   167a4:	89fb      	ldrh	r3, [r7, #14]
   167a6:	3304      	adds	r3, #4
   167a8:	4a4c      	ldr	r2, [pc, #304]	; (168dc <hciCoreAclReassembly+0x1d8>)
   167aa:	f8b2 20fc 	ldrh.w	r2, [r2, #252]	; 0xfc
   167ae:	4293      	cmp	r3, r2
   167b0:	f300 8089 	bgt.w	168c6 <hciCoreAclReassembly+0x1c2>
        {
          HCI_TRACE_WARN1("l2c len=0x%04x to large for reassembly", l2cLen);
        }
        /* if reassembly required */
        else if ((l2cLen + L2C_HDR_LEN) > aclLen)
   167b4:	89fb      	ldrh	r3, [r7, #14]
   167b6:	1d1a      	adds	r2, r3, #4
   167b8:	8abb      	ldrh	r3, [r7, #20]
   167ba:	429a      	cmp	r2, r3
   167bc:	dd50      	ble.n	16860 <hciCoreAclReassembly+0x15c>
        {
          /* allocate buffer to store complete l2cap packet */
          if ((pConn->pRxAclPkt = WsfMsgDataAlloc(l2cLen + L2C_HDR_LEN + HCI_ACL_HDR_LEN, 0)) != NULL)
   167be:	89fb      	ldrh	r3, [r7, #14]
   167c0:	3308      	adds	r3, #8
   167c2:	b29b      	uxth	r3, r3
   167c4:	4618      	mov	r0, r3
   167c6:	2100      	movs	r1, #0
   167c8:	f002 fca2 	bl	19110 <WsfMsgDataAlloc>
   167cc:	4602      	mov	r2, r0
   167ce:	693b      	ldr	r3, [r7, #16]
   167d0:	609a      	str	r2, [r3, #8]
   167d2:	693b      	ldr	r3, [r7, #16]
   167d4:	689b      	ldr	r3, [r3, #8]
   167d6:	2b00      	cmp	r3, #0
   167d8:	d075      	beq.n	168c6 <hciCoreAclReassembly+0x1c2>
          {
            /* store buffer for reassembly */
            pConn->pNextRxFrag = pConn->pRxAclPkt;
   167da:	693b      	ldr	r3, [r7, #16]
   167dc:	689a      	ldr	r2, [r3, #8]
   167de:	693b      	ldr	r3, [r7, #16]
   167e0:	60da      	str	r2, [r3, #12]

            /* build acl header and copy data */
            UINT16_TO_BSTREAM(pConn->pNextRxFrag, handle);
   167e2:	693b      	ldr	r3, [r7, #16]
   167e4:	68db      	ldr	r3, [r3, #12]
   167e6:	1c59      	adds	r1, r3, #1
   167e8:	693a      	ldr	r2, [r7, #16]
   167ea:	60d1      	str	r1, [r2, #12]
   167ec:	8b3a      	ldrh	r2, [r7, #24]
   167ee:	b2d2      	uxtb	r2, r2
   167f0:	701a      	strb	r2, [r3, #0]
   167f2:	693b      	ldr	r3, [r7, #16]
   167f4:	68db      	ldr	r3, [r3, #12]
   167f6:	1c59      	adds	r1, r3, #1
   167f8:	693a      	ldr	r2, [r7, #16]
   167fa:	60d1      	str	r1, [r2, #12]
   167fc:	8b3a      	ldrh	r2, [r7, #24]
   167fe:	0a12      	lsrs	r2, r2, #8
   16800:	b292      	uxth	r2, r2
   16802:	b2d2      	uxtb	r2, r2
   16804:	701a      	strb	r2, [r3, #0]
            UINT16_TO_BSTREAM(pConn->pNextRxFrag, l2cLen + L2C_HDR_LEN);
   16806:	693b      	ldr	r3, [r7, #16]
   16808:	68db      	ldr	r3, [r3, #12]
   1680a:	1c59      	adds	r1, r3, #1
   1680c:	693a      	ldr	r2, [r7, #16]
   1680e:	60d1      	str	r1, [r2, #12]
   16810:	89fa      	ldrh	r2, [r7, #14]
   16812:	b2d2      	uxtb	r2, r2
   16814:	3204      	adds	r2, #4
   16816:	b2d2      	uxtb	r2, r2
   16818:	701a      	strb	r2, [r3, #0]
   1681a:	693b      	ldr	r3, [r7, #16]
   1681c:	68db      	ldr	r3, [r3, #12]
   1681e:	1c59      	adds	r1, r3, #1
   16820:	693a      	ldr	r2, [r7, #16]
   16822:	60d1      	str	r1, [r2, #12]
   16824:	89fa      	ldrh	r2, [r7, #14]
   16826:	3204      	adds	r2, #4
   16828:	1212      	asrs	r2, r2, #8
   1682a:	b2d2      	uxtb	r2, r2
   1682c:	701a      	strb	r2, [r3, #0]
            memcpy(pConn->pNextRxFrag, &pData[4], aclLen);
   1682e:	693b      	ldr	r3, [r7, #16]
   16830:	68d9      	ldr	r1, [r3, #12]
   16832:	687b      	ldr	r3, [r7, #4]
   16834:	1d1a      	adds	r2, r3, #4
   16836:	8abb      	ldrh	r3, [r7, #20]
   16838:	4608      	mov	r0, r1
   1683a:	4611      	mov	r1, r2
   1683c:	461a      	mov	r2, r3
   1683e:	f7f5 fc5f 	bl	c100 <memcpy>
            pConn->pNextRxFrag += aclLen;
   16842:	693b      	ldr	r3, [r7, #16]
   16844:	68da      	ldr	r2, [r3, #12]
   16846:	8abb      	ldrh	r3, [r7, #20]
   16848:	441a      	add	r2, r3
   1684a:	693b      	ldr	r3, [r7, #16]
   1684c:	60da      	str	r2, [r3, #12]

            /* store remaining length */
            pConn->rxAclRemLen = l2cLen + L2C_HDR_LEN - aclLen;
   1684e:	89fa      	ldrh	r2, [r7, #14]
   16850:	8abb      	ldrh	r3, [r7, #20]
   16852:	1ad3      	subs	r3, r2, r3
   16854:	b29b      	uxth	r3, r3
   16856:	3304      	adds	r3, #4
   16858:	b29a      	uxth	r2, r3
   1685a:	693b      	ldr	r3, [r7, #16]
   1685c:	829a      	strh	r2, [r3, #20]
   1685e:	e032      	b.n	168c6 <hciCoreAclReassembly+0x1c2>
          }
        }
        else
        {
          /* no reassembly required, pData is ready to go */
          pDataRtn = pData;
   16860:	687b      	ldr	r3, [r7, #4]
   16862:	61fb      	str	r3, [r7, #28]
          freeData = FALSE;
   16864:	2300      	movs	r3, #0
   16866:	76fb      	strb	r3, [r7, #27]
   16868:	e02d      	b.n	168c6 <hciCoreAclReassembly+0x1c2>
        /* invalid l2cap packet; discard */
        HCI_TRACE_WARN1("invalid l2c pkt aclLen=%u", aclLen);
      }
    }
    /* else if this is a continuation packet */
    else if (pbf == HCI_PB_CONTINUE)
   1686a:	8afb      	ldrh	r3, [r7, #22]
   1686c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   16870:	d129      	bne.n	168c6 <hciCoreAclReassembly+0x1c2>
    {
      /* if expecting a continuation */
      if (pConn->pRxAclPkt != NULL)
   16872:	693b      	ldr	r3, [r7, #16]
   16874:	689b      	ldr	r3, [r3, #8]
   16876:	2b00      	cmp	r3, #0
   16878:	d025      	beq.n	168c6 <hciCoreAclReassembly+0x1c2>
      {
        if (aclLen <= pConn->rxAclRemLen)
   1687a:	693b      	ldr	r3, [r7, #16]
   1687c:	8a9b      	ldrh	r3, [r3, #20]
   1687e:	8aba      	ldrh	r2, [r7, #20]
   16880:	429a      	cmp	r2, r3
   16882:	d820      	bhi.n	168c6 <hciCoreAclReassembly+0x1c2>
        {
          /* copy data to start of next fragment */
          memcpy(pConn->pNextRxFrag, &pData[HCI_ACL_HDR_LEN], aclLen);
   16884:	693b      	ldr	r3, [r7, #16]
   16886:	68d9      	ldr	r1, [r3, #12]
   16888:	687b      	ldr	r3, [r7, #4]
   1688a:	1d1a      	adds	r2, r3, #4
   1688c:	8abb      	ldrh	r3, [r7, #20]
   1688e:	4608      	mov	r0, r1
   16890:	4611      	mov	r1, r2
   16892:	461a      	mov	r2, r3
   16894:	f7f5 fc34 	bl	c100 <memcpy>
          pConn->pNextRxFrag += aclLen;
   16898:	693b      	ldr	r3, [r7, #16]
   1689a:	68da      	ldr	r2, [r3, #12]
   1689c:	8abb      	ldrh	r3, [r7, #20]
   1689e:	441a      	add	r2, r3
   168a0:	693b      	ldr	r3, [r7, #16]
   168a2:	60da      	str	r2, [r3, #12]

          /* update remaining length */
          pConn->rxAclRemLen -= aclLen;
   168a4:	693b      	ldr	r3, [r7, #16]
   168a6:	8a9a      	ldrh	r2, [r3, #20]
   168a8:	8abb      	ldrh	r3, [r7, #20]
   168aa:	1ad3      	subs	r3, r2, r3
   168ac:	b29a      	uxth	r2, r3
   168ae:	693b      	ldr	r3, [r7, #16]
   168b0:	829a      	strh	r2, [r3, #20]

          /* if reassembly complete return reassembled packet */
          if (pConn->rxAclRemLen == 0)
   168b2:	693b      	ldr	r3, [r7, #16]
   168b4:	8a9b      	ldrh	r3, [r3, #20]
   168b6:	2b00      	cmp	r3, #0
   168b8:	d105      	bne.n	168c6 <hciCoreAclReassembly+0x1c2>
          {
            pDataRtn = pConn->pRxAclPkt;
   168ba:	693b      	ldr	r3, [r7, #16]
   168bc:	689b      	ldr	r3, [r3, #8]
   168be:	61fb      	str	r3, [r7, #28]
            pConn->pRxAclPkt = NULL;
   168c0:	693b      	ldr	r3, [r7, #16]
   168c2:	2200      	movs	r2, #0
   168c4:	609a      	str	r2, [r3, #8]
  {
    /* connection not found */
    HCI_TRACE_WARN1("pkt rcvd on unknown handle=0x%04x", (handle & HCI_HANDLE_MASK));
  }

  if (freeData)
   168c6:	7efb      	ldrb	r3, [r7, #27]
   168c8:	2b00      	cmp	r3, #0
   168ca:	d002      	beq.n	168d2 <hciCoreAclReassembly+0x1ce>
  {
    WsfMsgFree(pData);
   168cc:	6878      	ldr	r0, [r7, #4]
   168ce:	f002 fc4d 	bl	1916c <WsfMsgFree>
  }

  return pDataRtn;
   168d2:	69fb      	ldr	r3, [r7, #28]
}
   168d4:	4618      	mov	r0, r3
   168d6:	3720      	adds	r7, #32
   168d8:	46bd      	mov	sp, r7
   168da:	bd80      	pop	{r7, pc}
   168dc:	1000a100 	.word	0x1000a100

000168e0 <HciCoreInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciCoreInit(void)
{
   168e0:	b580      	push	{r7, lr}
   168e2:	b082      	sub	sp, #8
   168e4:	af00      	add	r7, sp, #0
  uint8_t   i;

  WSF_QUEUE_INIT(&hciCoreCb.aclQueue);
   168e6:	4b18      	ldr	r3, [pc, #96]	; (16948 <HciCoreInit+0x68>)
   168e8:	2200      	movs	r2, #0
   168ea:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
   168ee:	4b16      	ldr	r3, [pc, #88]	; (16948 <HciCoreInit+0x68>)
   168f0:	2200      	movs	r2, #0
   168f2:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

  for (i = 0; i < DM_CONN_MAX; i++)
   168f6:	2300      	movs	r3, #0
   168f8:	71fb      	strb	r3, [r7, #7]
   168fa:	e00d      	b.n	16918 <HciCoreInit+0x38>
  {
    hciCoreCb.conn[i].handle = HCI_HANDLE_NONE;
   168fc:	79fa      	ldrb	r2, [r7, #7]
   168fe:	4912      	ldr	r1, [pc, #72]	; (16948 <HciCoreInit+0x68>)
   16900:	4613      	mov	r3, r2
   16902:	00db      	lsls	r3, r3, #3
   16904:	1a9b      	subs	r3, r3, r2
   16906:	009b      	lsls	r3, r3, #2
   16908:	440b      	add	r3, r1
   1690a:	3310      	adds	r3, #16
   1690c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16910:	801a      	strh	r2, [r3, #0]
{
  uint8_t   i;

  WSF_QUEUE_INIT(&hciCoreCb.aclQueue);

  for (i = 0; i < DM_CONN_MAX; i++)
   16912:	79fb      	ldrb	r3, [r7, #7]
   16914:	3301      	adds	r3, #1
   16916:	71fb      	strb	r3, [r7, #7]
   16918:	79fb      	ldrb	r3, [r7, #7]
   1691a:	2b07      	cmp	r3, #7
   1691c:	d9ee      	bls.n	168fc <HciCoreInit+0x1c>
  {
    hciCoreCb.conn[i].handle = HCI_HANDLE_NONE;
  }

  hciCoreCb.maxRxAclLen = HCI_MAX_RX_ACL_LEN;
   1691e:	4b0a      	ldr	r3, [pc, #40]	; (16948 <HciCoreInit+0x68>)
   16920:	221b      	movs	r2, #27
   16922:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
  hciCoreCb.aclQueueHi = HCI_ACL_QUEUE_HI;
   16926:	4b08      	ldr	r3, [pc, #32]	; (16948 <HciCoreInit+0x68>)
   16928:	2205      	movs	r2, #5
   1692a:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
  hciCoreCb.aclQueueLo = HCI_ACL_QUEUE_LO;
   1692e:	4b06      	ldr	r3, [pc, #24]	; (16948 <HciCoreInit+0x68>)
   16930:	2203      	movs	r2, #3
   16932:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
  hciCoreCb.extResetSeq = NULL;
   16936:	4b04      	ldr	r3, [pc, #16]	; (16948 <HciCoreInit+0x68>)
   16938:	2200      	movs	r2, #0
   1693a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

  hciCoreInit();
   1693e:	f000 f8cd 	bl	16adc <hciCoreInit>
}
   16942:	3708      	adds	r7, #8
   16944:	46bd      	mov	sp, r7
   16946:	bd80      	pop	{r7, pc}
   16948:	1000a100 	.word	0x1000a100

0001694c <HciResetSequence>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciResetSequence(void)
{
   1694c:	b580      	push	{r7, lr}
   1694e:	b084      	sub	sp, #16
   16950:	af00      	add	r7, sp, #0
  uint8_t         *pBuf;
  wsfHandlerId_t    handlerId;
  
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   16952:	4b23      	ldr	r3, [pc, #140]	; (169e0 <HciResetSequence+0x94>)
   16954:	60bb      	str	r3, [r7, #8]

  // free any pending incoming packets
  while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
   16956:	e002      	b.n	1695e <HciResetSequence+0x12>
  {
    /* Free buffer */
    WsfMsgFree(pBuf);
   16958:	6878      	ldr	r0, [r7, #4]
   1695a:	f002 fc07 	bl	1916c <WsfMsgFree>
  
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;

  // free any pending incoming packets
  while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
   1695e:	1cfb      	adds	r3, r7, #3
   16960:	4820      	ldr	r0, [pc, #128]	; (169e4 <HciResetSequence+0x98>)
   16962:	4619      	mov	r1, r3
   16964:	f002 fc3c 	bl	191e0 <WsfMsgDeq>
   16968:	6078      	str	r0, [r7, #4]
   1696a:	687b      	ldr	r3, [r7, #4]
   1696c:	2b00      	cmp	r3, #0
   1696e:	d1f3      	bne.n	16958 <HciResetSequence+0xc>
  }
  
  HCI_TRACE_INFO0("reset sequence");
  // free any pending tx packets
  /* find connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   16970:	2308      	movs	r3, #8
   16972:	73fb      	strb	r3, [r7, #15]
   16974:	e029      	b.n	169ca <HciResetSequence+0x7e>
  {
    /* free any fragmenting ACL packet */
    if (pConn->pTxAclPkt != NULL)
   16976:	68bb      	ldr	r3, [r7, #8]
   16978:	681b      	ldr	r3, [r3, #0]
   1697a:	2b00      	cmp	r3, #0
   1697c:	d007      	beq.n	1698e <HciResetSequence+0x42>
    {
      WsfMsgFree(pConn->pTxAclPkt);
   1697e:	68bb      	ldr	r3, [r7, #8]
   16980:	681b      	ldr	r3, [r3, #0]
   16982:	4618      	mov	r0, r3
   16984:	f002 fbf2 	bl	1916c <WsfMsgFree>
      pConn->pTxAclPkt = NULL;
   16988:	68bb      	ldr	r3, [r7, #8]
   1698a:	2200      	movs	r2, #0
   1698c:	601a      	str	r2, [r3, #0]
    }
    pConn->fragmenting = FALSE;
   1698e:	68bb      	ldr	r3, [r7, #8]
   16990:	2200      	movs	r2, #0
   16992:	759a      	strb	r2, [r3, #22]

    if (pConn->pRxAclPkt != NULL)
   16994:	68bb      	ldr	r3, [r7, #8]
   16996:	689b      	ldr	r3, [r3, #8]
   16998:	2b00      	cmp	r3, #0
   1699a:	d007      	beq.n	169ac <HciResetSequence+0x60>
    {
      WsfMsgFree(pConn->pRxAclPkt);
   1699c:	68bb      	ldr	r3, [r7, #8]
   1699e:	689b      	ldr	r3, [r3, #8]
   169a0:	4618      	mov	r0, r3
   169a2:	f002 fbe3 	bl	1916c <WsfMsgFree>
      pConn->pRxAclPkt = NULL;
   169a6:	68bb      	ldr	r3, [r7, #8]
   169a8:	2200      	movs	r2, #0
   169aa:	609a      	str	r2, [r3, #8]
    }

    /* free structure */
    pConn->handle = HCI_HANDLE_NONE;
   169ac:	68bb      	ldr	r3, [r7, #8]
   169ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
   169b2:	821a      	strh	r2, [r3, #16]

    /* optional: iterate through tx ACL queue and free any buffers with this handle */

    /* outstanding buffers are now available; service TX data path */
    hciCoreTxReady(pConn->outBufs);
   169b4:	68bb      	ldr	r3, [r7, #8]
   169b6:	7e5b      	ldrb	r3, [r3, #25]
   169b8:	4618      	mov	r0, r3
   169ba:	f7ff fd77 	bl	164ac <hciCoreTxReady>
  }
  
  HCI_TRACE_INFO0("reset sequence");
  // free any pending tx packets
  /* find connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   169be:	7bfb      	ldrb	r3, [r7, #15]
   169c0:	3b01      	subs	r3, #1
   169c2:	73fb      	strb	r3, [r7, #15]
   169c4:	68bb      	ldr	r3, [r7, #8]
   169c6:	331c      	adds	r3, #28
   169c8:	60bb      	str	r3, [r7, #8]
   169ca:	7bfb      	ldrb	r3, [r7, #15]
   169cc:	2b00      	cmp	r3, #0
   169ce:	d1d2      	bne.n	16976 <HciResetSequence+0x2a>
    hciCoreTxReady(pConn->outBufs);

  }

  /* set resetting state */
  hciCb.resetting = TRUE;
   169d0:	4b04      	ldr	r3, [pc, #16]	; (169e4 <HciResetSequence+0x98>)
   169d2:	2201      	movs	r2, #1
   169d4:	765a      	strb	r2, [r3, #25]

  /* start the reset sequence */
  hciCoreResetStart();
   169d6:	f002 f8f1 	bl	18bbc <hciCoreResetStart>
}
   169da:	3710      	adds	r7, #16
   169dc:	46bd      	mov	sp, r7
   169de:	bd80      	pop	{r7, pc}
   169e0:	1000a100 	.word	0x1000a100
   169e4:	1000916c 	.word	0x1000916c

000169e8 <HciSetMaxRxAclLen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSetMaxRxAclLen(uint16_t len)
{
   169e8:	b480      	push	{r7}
   169ea:	b083      	sub	sp, #12
   169ec:	af00      	add	r7, sp, #0
   169ee:	4603      	mov	r3, r0
   169f0:	80fb      	strh	r3, [r7, #6]
  hciCoreCb.maxRxAclLen = len;
   169f2:	4a04      	ldr	r2, [pc, #16]	; (16a04 <HciSetMaxRxAclLen+0x1c>)
   169f4:	88fb      	ldrh	r3, [r7, #6]
   169f6:	f8a2 30fc 	strh.w	r3, [r2, #252]	; 0xfc
}
   169fa:	370c      	adds	r7, #12
   169fc:	46bd      	mov	sp, r7
   169fe:	f85d 7b04 	ldr.w	r7, [sp], #4
   16a02:	4770      	bx	lr
   16a04:	1000a100 	.word	0x1000a100

00016a08 <HciSendAclData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSendAclData(uint8_t *pData)
{
   16a08:	b590      	push	{r4, r7, lr}
   16a0a:	b085      	sub	sp, #20
   16a0c:	af00      	add	r7, sp, #0
   16a0e:	6078      	str	r0, [r7, #4]
  uint16_t        handle;
  uint16_t        len;
  hciCoreConn_t   *pConn;

  /* parse handle and length */
  BYTES_TO_UINT16(handle, pData);
   16a10:	687b      	ldr	r3, [r7, #4]
   16a12:	781b      	ldrb	r3, [r3, #0]
   16a14:	b29a      	uxth	r2, r3
   16a16:	687b      	ldr	r3, [r7, #4]
   16a18:	3301      	adds	r3, #1
   16a1a:	781b      	ldrb	r3, [r3, #0]
   16a1c:	b29b      	uxth	r3, r3
   16a1e:	021b      	lsls	r3, r3, #8
   16a20:	b29b      	uxth	r3, r3
   16a22:	4413      	add	r3, r2
   16a24:	81fb      	strh	r3, [r7, #14]
  BYTES_TO_UINT16(len, &pData[2]);
   16a26:	687b      	ldr	r3, [r7, #4]
   16a28:	3302      	adds	r3, #2
   16a2a:	781b      	ldrb	r3, [r3, #0]
   16a2c:	b29a      	uxth	r2, r3
   16a2e:	687b      	ldr	r3, [r7, #4]
   16a30:	3303      	adds	r3, #3
   16a32:	781b      	ldrb	r3, [r3, #0]
   16a34:	b29b      	uxth	r3, r3
   16a36:	021b      	lsls	r3, r3, #8
   16a38:	b29b      	uxth	r3, r3
   16a3a:	4413      	add	r3, r2
   16a3c:	81bb      	strh	r3, [r7, #12]

  /* look up connection structure */
  if ((pConn = hciCoreConnByHandle(handle)) != NULL)
   16a3e:	89fb      	ldrh	r3, [r7, #14]
   16a40:	4618      	mov	r0, r3
   16a42:	f7ff fcaf 	bl	163a4 <hciCoreConnByHandle>
   16a46:	60b8      	str	r0, [r7, #8]
   16a48:	68bb      	ldr	r3, [r7, #8]
   16a4a:	2b00      	cmp	r3, #0
   16a4c:	d03a      	beq.n	16ac4 <HciSendAclData+0xbc>
  {
    /* if queue empty and buffers available */
    if (WsfQueueEmpty(&hciCoreCb.aclQueue) && hciCoreCb.availBufs > 0)
   16a4e:	4820      	ldr	r0, [pc, #128]	; (16ad0 <HciSendAclData+0xc8>)
   16a50:	f002 fca4 	bl	1939c <WsfQueueEmpty>
   16a54:	4603      	mov	r3, r0
   16a56:	2b00      	cmp	r3, #0
   16a58:	d00b      	beq.n	16a72 <HciSendAclData+0x6a>
   16a5a:	4b1e      	ldr	r3, [pc, #120]	; (16ad4 <HciSendAclData+0xcc>)
   16a5c:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
   16a60:	2b00      	cmp	r3, #0
   16a62:	d006      	beq.n	16a72 <HciSendAclData+0x6a>
    {
      /* send data */
      hciCoreTxAclStart(pConn, len, pData);
   16a64:	89bb      	ldrh	r3, [r7, #12]
   16a66:	68b8      	ldr	r0, [r7, #8]
   16a68:	4619      	mov	r1, r3
   16a6a:	687a      	ldr	r2, [r7, #4]
   16a6c:	f7ff fd86 	bl	1657c <hciCoreTxAclStart>
   16a70:	e004      	b.n	16a7c <HciSendAclData+0x74>
    }
    else
    {
      /* queue data - message handler ID 'handerId' not used */
      WsfMsgEnq(&hciCoreCb.aclQueue, 0, pData);
   16a72:	4817      	ldr	r0, [pc, #92]	; (16ad0 <HciSendAclData+0xc8>)
   16a74:	2100      	movs	r1, #0
   16a76:	687a      	ldr	r2, [r7, #4]
   16a78:	f002 fb9e 	bl	191b8 <WsfMsgEnq>
    }

    /* increment buffer queue count for this connection with consideration for HCI fragmentation */
    pConn->queuedBufs += ((len - 1) / HciGetBufSize()) + 1;
   16a7c:	89bb      	ldrh	r3, [r7, #12]
   16a7e:	1e5c      	subs	r4, r3, #1
   16a80:	f000 f900 	bl	16c84 <HciGetBufSize>
   16a84:	4603      	mov	r3, r0
   16a86:	fb94 f3f3 	sdiv	r3, r4, r3
   16a8a:	1c59      	adds	r1, r3, #1
   16a8c:	68bb      	ldr	r3, [r7, #8]
   16a8e:	7e1a      	ldrb	r2, [r3, #24]
   16a90:	b2cb      	uxtb	r3, r1
   16a92:	4413      	add	r3, r2
   16a94:	b2da      	uxtb	r2, r3
   16a96:	68bb      	ldr	r3, [r7, #8]
   16a98:	761a      	strb	r2, [r3, #24]

    /* manage flow control to stack */
    if (pConn->queuedBufs >= hciCoreCb.aclQueueHi && pConn->flowDisabled == FALSE)
   16a9a:	68bb      	ldr	r3, [r7, #8]
   16a9c:	7e1a      	ldrb	r2, [r3, #24]
   16a9e:	4b0d      	ldr	r3, [pc, #52]	; (16ad4 <HciSendAclData+0xcc>)
   16aa0:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
   16aa4:	429a      	cmp	r2, r3
   16aa6:	d310      	bcc.n	16aca <HciSendAclData+0xc2>
   16aa8:	68bb      	ldr	r3, [r7, #8]
   16aaa:	7ddb      	ldrb	r3, [r3, #23]
   16aac:	2b00      	cmp	r3, #0
   16aae:	d10c      	bne.n	16aca <HciSendAclData+0xc2>
    {
      pConn->flowDisabled = TRUE;
   16ab0:	68bb      	ldr	r3, [r7, #8]
   16ab2:	2201      	movs	r2, #1
   16ab4:	75da      	strb	r2, [r3, #23]
      (*hciCb.flowCback)(handle, TRUE);
   16ab6:	4b08      	ldr	r3, [pc, #32]	; (16ad8 <HciSendAclData+0xd0>)
   16ab8:	695b      	ldr	r3, [r3, #20]
   16aba:	89fa      	ldrh	r2, [r7, #14]
   16abc:	4610      	mov	r0, r2
   16abe:	2101      	movs	r1, #1
   16ac0:	4798      	blx	r3
   16ac2:	e002      	b.n	16aca <HciSendAclData+0xc2>
  }
  /* connection not found, connection must be closed */
  else
  {
    /* discard buffer */
    WsfMsgFree(pData);
   16ac4:	6878      	ldr	r0, [r7, #4]
   16ac6:	f002 fb51 	bl	1916c <WsfMsgFree>

    HCI_TRACE_WARN1("HciSendAclData discarding buffer, handle=%u", handle);
  }
}
   16aca:	3714      	adds	r7, #20
   16acc:	46bd      	mov	sp, r7
   16ace:	bd90      	pop	{r4, r7, pc}
   16ad0:	1000a1f0 	.word	0x1000a1f0
   16ad4:	1000a100 	.word	0x1000a100
   16ad8:	1000916c 	.word	0x1000916c

00016adc <hciCoreInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreInit(void)
{
   16adc:	b580      	push	{r7, lr}
   16ade:	af00      	add	r7, sp, #0
  hciCmdInit();
   16ae0:	f7fe fc9c 	bl	1541c <hciCmdInit>
}
   16ae4:	bd80      	pop	{r7, pc}
   16ae6:	bf00      	nop

00016ae8 <hciCoreNumCmplPkts>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreNumCmplPkts(uint8_t *pMsg)
{
   16ae8:	b580      	push	{r7, lr}
   16aea:	b086      	sub	sp, #24
   16aec:	af00      	add	r7, sp, #0
   16aee:	6078      	str	r0, [r7, #4]
  uint8_t         numHandles;
  uint16_t        bufs;
  uint16_t        handle;
  uint8_t         availBufs = 0;
   16af0:	2300      	movs	r3, #0
   16af2:	75bb      	strb	r3, [r7, #22]
  hciCoreConn_t   *pConn;

  /* parse number of handles */
  BSTREAM_TO_UINT8(numHandles, pMsg);
   16af4:	687b      	ldr	r3, [r7, #4]
   16af6:	1c5a      	adds	r2, r3, #1
   16af8:	607a      	str	r2, [r7, #4]
   16afa:	781b      	ldrb	r3, [r3, #0]
   16afc:	75fb      	strb	r3, [r7, #23]

  /* for each handle in event */
  while (numHandles-- > 0)
   16afe:	e04c      	b.n	16b9a <hciCoreNumCmplPkts+0xb2>
  {
    /* parse handle and number of buffers */
    BSTREAM_TO_UINT16(handle, pMsg);
   16b00:	687b      	ldr	r3, [r7, #4]
   16b02:	781b      	ldrb	r3, [r3, #0]
   16b04:	b29a      	uxth	r2, r3
   16b06:	687b      	ldr	r3, [r7, #4]
   16b08:	3301      	adds	r3, #1
   16b0a:	781b      	ldrb	r3, [r3, #0]
   16b0c:	b29b      	uxth	r3, r3
   16b0e:	021b      	lsls	r3, r3, #8
   16b10:	b29b      	uxth	r3, r3
   16b12:	4413      	add	r3, r2
   16b14:	82bb      	strh	r3, [r7, #20]
   16b16:	687b      	ldr	r3, [r7, #4]
   16b18:	3302      	adds	r3, #2
   16b1a:	607b      	str	r3, [r7, #4]
    BSTREAM_TO_UINT16(bufs, pMsg);
   16b1c:	687b      	ldr	r3, [r7, #4]
   16b1e:	781b      	ldrb	r3, [r3, #0]
   16b20:	b29a      	uxth	r2, r3
   16b22:	687b      	ldr	r3, [r7, #4]
   16b24:	3301      	adds	r3, #1
   16b26:	781b      	ldrb	r3, [r3, #0]
   16b28:	b29b      	uxth	r3, r3
   16b2a:	021b      	lsls	r3, r3, #8
   16b2c:	b29b      	uxth	r3, r3
   16b2e:	4413      	add	r3, r2
   16b30:	827b      	strh	r3, [r7, #18]
   16b32:	687b      	ldr	r3, [r7, #4]
   16b34:	3302      	adds	r3, #2
   16b36:	607b      	str	r3, [r7, #4]

    if ((pConn = hciCoreConnByHandle(handle)) != NULL)
   16b38:	8abb      	ldrh	r3, [r7, #20]
   16b3a:	4618      	mov	r0, r3
   16b3c:	f7ff fc32 	bl	163a4 <hciCoreConnByHandle>
   16b40:	60f8      	str	r0, [r7, #12]
   16b42:	68fb      	ldr	r3, [r7, #12]
   16b44:	2b00      	cmp	r3, #0
   16b46:	d028      	beq.n	16b9a <hciCoreNumCmplPkts+0xb2>
    {
      /* decrement outstanding buffer count to controller */
      pConn->outBufs -= (uint8_t) bufs;
   16b48:	68fb      	ldr	r3, [r7, #12]
   16b4a:	7e5a      	ldrb	r2, [r3, #25]
   16b4c:	8a7b      	ldrh	r3, [r7, #18]
   16b4e:	b2db      	uxtb	r3, r3
   16b50:	1ad3      	subs	r3, r2, r3
   16b52:	b2da      	uxtb	r2, r3
   16b54:	68fb      	ldr	r3, [r7, #12]
   16b56:	765a      	strb	r2, [r3, #25]

      /* decrement queued buffer count for this connection */
      pConn->queuedBufs -= (uint8_t) bufs;
   16b58:	68fb      	ldr	r3, [r7, #12]
   16b5a:	7e1a      	ldrb	r2, [r3, #24]
   16b5c:	8a7b      	ldrh	r3, [r7, #18]
   16b5e:	b2db      	uxtb	r3, r3
   16b60:	1ad3      	subs	r3, r2, r3
   16b62:	b2da      	uxtb	r2, r3
   16b64:	68fb      	ldr	r3, [r7, #12]
   16b66:	761a      	strb	r2, [r3, #24]

      /* increment available buffer count */
      availBufs += (uint8_t) bufs;
   16b68:	8a7b      	ldrh	r3, [r7, #18]
   16b6a:	b2da      	uxtb	r2, r3
   16b6c:	7dbb      	ldrb	r3, [r7, #22]
   16b6e:	4413      	add	r3, r2
   16b70:	75bb      	strb	r3, [r7, #22]

      /* call flow control callback */
      if (pConn->flowDisabled && pConn->queuedBufs <= hciCoreCb.aclQueueLo)
   16b72:	68fb      	ldr	r3, [r7, #12]
   16b74:	7ddb      	ldrb	r3, [r3, #23]
   16b76:	2b00      	cmp	r3, #0
   16b78:	d00f      	beq.n	16b9a <hciCoreNumCmplPkts+0xb2>
   16b7a:	68fb      	ldr	r3, [r7, #12]
   16b7c:	7e1a      	ldrb	r2, [r3, #24]
   16b7e:	4b0d      	ldr	r3, [pc, #52]	; (16bb4 <hciCoreNumCmplPkts+0xcc>)
   16b80:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
   16b84:	429a      	cmp	r2, r3
   16b86:	d808      	bhi.n	16b9a <hciCoreNumCmplPkts+0xb2>
      {
        pConn->flowDisabled = FALSE;
   16b88:	68fb      	ldr	r3, [r7, #12]
   16b8a:	2200      	movs	r2, #0
   16b8c:	75da      	strb	r2, [r3, #23]
        (*hciCb.flowCback)(handle, FALSE);
   16b8e:	4b0a      	ldr	r3, [pc, #40]	; (16bb8 <hciCoreNumCmplPkts+0xd0>)
   16b90:	695b      	ldr	r3, [r3, #20]
   16b92:	8aba      	ldrh	r2, [r7, #20]
   16b94:	4610      	mov	r0, r2
   16b96:	2100      	movs	r1, #0
   16b98:	4798      	blx	r3

  /* parse number of handles */
  BSTREAM_TO_UINT8(numHandles, pMsg);

  /* for each handle in event */
  while (numHandles-- > 0)
   16b9a:	7dfb      	ldrb	r3, [r7, #23]
   16b9c:	1e5a      	subs	r2, r3, #1
   16b9e:	75fa      	strb	r2, [r7, #23]
   16ba0:	2b00      	cmp	r3, #0
   16ba2:	d1ad      	bne.n	16b00 <hciCoreNumCmplPkts+0x18>
      }
    }
  }

  /* service TX data path */
  hciCoreTxReady(availBufs);
   16ba4:	7dbb      	ldrb	r3, [r7, #22]
   16ba6:	4618      	mov	r0, r3
   16ba8:	f7ff fc80 	bl	164ac <hciCoreTxReady>
}
   16bac:	3718      	adds	r7, #24
   16bae:	46bd      	mov	sp, r7
   16bb0:	bd80      	pop	{r7, pc}
   16bb2:	bf00      	nop
   16bb4:	1000a100 	.word	0x1000a100
   16bb8:	1000916c 	.word	0x1000916c

00016bbc <hciCoreRecv>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreRecv(uint8_t msgType, uint8_t *pCoreRecvMsg)
{
   16bbc:	b580      	push	{r7, lr}
   16bbe:	b082      	sub	sp, #8
   16bc0:	af00      	add	r7, sp, #0
   16bc2:	4603      	mov	r3, r0
   16bc4:	6039      	str	r1, [r7, #0]
   16bc6:	71fb      	strb	r3, [r7, #7]
  {
    HCI_PDUMP_RX_ACL(*(pCoreRecvMsg + 2) + HCI_ACL_HDR_LEN, pCoreRecvMsg);
  }

  /* queue buffer */
  WsfMsgEnq(&hciCb.rxQueue, (wsfHandlerId_t) msgType, pCoreRecvMsg);
   16bc8:	79fb      	ldrb	r3, [r7, #7]
   16bca:	4807      	ldr	r0, [pc, #28]	; (16be8 <hciCoreRecv+0x2c>)
   16bcc:	4619      	mov	r1, r3
   16bce:	683a      	ldr	r2, [r7, #0]
   16bd0:	f002 faf2 	bl	191b8 <WsfMsgEnq>

  /* set event */
  WsfSetEvent(hciCb.handlerId, HCI_EVT_RX);
   16bd4:	4b04      	ldr	r3, [pc, #16]	; (16be8 <hciCoreRecv+0x2c>)
   16bd6:	7e1b      	ldrb	r3, [r3, #24]
   16bd8:	4618      	mov	r0, r3
   16bda:	2101      	movs	r1, #1
   16bdc:	f7fd feaa 	bl	14934 <WsfSetEvent>
}
   16be0:	3708      	adds	r7, #8
   16be2:	46bd      	mov	sp, r7
   16be4:	bd80      	pop	{r7, pc}
   16be6:	bf00      	nop
   16be8:	1000916c 	.word	0x1000916c

00016bec <HciCoreHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciCoreHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   16bec:	b580      	push	{r7, lr}
   16bee:	b084      	sub	sp, #16
   16bf0:	af00      	add	r7, sp, #0
   16bf2:	4603      	mov	r3, r0
   16bf4:	6039      	str	r1, [r7, #0]
   16bf6:	71fb      	strb	r3, [r7, #7]
  uint8_t         *pBuf;
  wsfHandlerId_t  handlerId;
  
  /* Handle message */
  if (pMsg != NULL)
   16bf8:	683b      	ldr	r3, [r7, #0]
   16bfa:	2b00      	cmp	r3, #0
   16bfc:	d007      	beq.n	16c0e <HciCoreHandler+0x22>
  {
    /* Handle HCI command timeout */
    if (pMsg->event == HCI_MSG_CMD_TIMEOUT)
   16bfe:	683b      	ldr	r3, [r7, #0]
   16c00:	789b      	ldrb	r3, [r3, #2]
   16c02:	2b01      	cmp	r3, #1
   16c04:	d12f      	bne.n	16c66 <HciCoreHandler+0x7a>
    {
      hciCmdTimeout(pMsg);
   16c06:	6838      	ldr	r0, [r7, #0]
   16c08:	f7fe fc22 	bl	15450 <hciCmdTimeout>
   16c0c:	e02b      	b.n	16c66 <HciCoreHandler+0x7a>
    }
  }
  /* Handle events */
  else if (event & HCI_EVT_RX)
   16c0e:	79fb      	ldrb	r3, [r7, #7]
   16c10:	f003 0301 	and.w	r3, r3, #1
   16c14:	2b00      	cmp	r3, #0
   16c16:	d026      	beq.n	16c66 <HciCoreHandler+0x7a>
  {
    /* Process rx queue */
    while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
   16c18:	e01b      	b.n	16c52 <HciCoreHandler+0x66>
    {
      /* Handle incoming HCI events */
      if (handlerId == HCI_EVT_TYPE)
   16c1a:	7afb      	ldrb	r3, [r7, #11]
   16c1c:	2b04      	cmp	r3, #4
   16c1e:	d10d      	bne.n	16c3c <HciCoreHandler+0x50>
      {
        /* Parse/process events */
        hciEvtProcessMsg(pBuf);
   16c20:	68f8      	ldr	r0, [r7, #12]
   16c22:	f001 fcad 	bl	18580 <hciEvtProcessMsg>

        /* Handle events during reset sequence */
        if (hciCb.resetting)
   16c26:	4b11      	ldr	r3, [pc, #68]	; (16c6c <HciCoreHandler+0x80>)
   16c28:	7e5b      	ldrb	r3, [r3, #25]
   16c2a:	2b00      	cmp	r3, #0
   16c2c:	d002      	beq.n	16c34 <HciCoreHandler+0x48>
        {
          hciCoreResetSequence(pBuf);
   16c2e:	68f8      	ldr	r0, [r7, #12]
   16c30:	f001 ffca 	bl	18bc8 <hciCoreResetSequence>
        }
        
        /* Free buffer */
        WsfMsgFree(pBuf);
   16c34:	68f8      	ldr	r0, [r7, #12]
   16c36:	f002 fa99 	bl	1916c <WsfMsgFree>
   16c3a:	e00a      	b.n	16c52 <HciCoreHandler+0x66>
      }
      /* Handle ACL data */
      else
      {
        /* Reassemble */
        if ((pBuf = hciCoreAclReassembly(pBuf)) != NULL)
   16c3c:	68f8      	ldr	r0, [r7, #12]
   16c3e:	f7ff fd61 	bl	16704 <hciCoreAclReassembly>
   16c42:	60f8      	str	r0, [r7, #12]
   16c44:	68fb      	ldr	r3, [r7, #12]
   16c46:	2b00      	cmp	r3, #0
   16c48:	d003      	beq.n	16c52 <HciCoreHandler+0x66>
        {
          /* Call ACL callback; client will free buffer */
          hciCb.aclCback(pBuf);
   16c4a:	4b08      	ldr	r3, [pc, #32]	; (16c6c <HciCoreHandler+0x80>)
   16c4c:	691b      	ldr	r3, [r3, #16]
   16c4e:	68f8      	ldr	r0, [r7, #12]
   16c50:	4798      	blx	r3
  }
  /* Handle events */
  else if (event & HCI_EVT_RX)
  {
    /* Process rx queue */
    while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
   16c52:	f107 030b 	add.w	r3, r7, #11
   16c56:	4805      	ldr	r0, [pc, #20]	; (16c6c <HciCoreHandler+0x80>)
   16c58:	4619      	mov	r1, r3
   16c5a:	f002 fac1 	bl	191e0 <WsfMsgDeq>
   16c5e:	60f8      	str	r0, [r7, #12]
   16c60:	68fb      	ldr	r3, [r7, #12]
   16c62:	2b00      	cmp	r3, #0
   16c64:	d1d9      	bne.n	16c1a <HciCoreHandler+0x2e>
          hciCb.aclCback(pBuf);
        }
      }
    }
  }
}
   16c66:	3710      	adds	r7, #16
   16c68:	46bd      	mov	sp, r7
   16c6a:	bd80      	pop	{r7, pc}
   16c6c:	1000916c 	.word	0x1000916c

00016c70 <HciGetBdAddr>:
 *
 *  \return Pointer to the BD address.
 */
/*************************************************************************************************/
uint8_t *HciGetBdAddr(void)
{
   16c70:	b480      	push	{r7}
   16c72:	af00      	add	r7, sp, #0
  return hciCoreCb.bdAddr;
   16c74:	4b02      	ldr	r3, [pc, #8]	; (16c80 <HciGetBdAddr+0x10>)
}
   16c76:	4618      	mov	r0, r3
   16c78:	46bd      	mov	sp, r7
   16c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
   16c7e:	4770      	bx	lr
   16c80:	1000a1e8 	.word	0x1000a1e8

00016c84 <HciGetBufSize>:
 *
 *  \return ACL buffer size.
 */
/*************************************************************************************************/
uint16_t HciGetBufSize(void)
{
   16c84:	b480      	push	{r7}
   16c86:	af00      	add	r7, sp, #0
  return hciCoreCb.bufSize;
   16c88:	4b03      	ldr	r3, [pc, #12]	; (16c98 <HciGetBufSize+0x14>)
   16c8a:	f8b3 30fe 	ldrh.w	r3, [r3, #254]	; 0xfe
}
   16c8e:	4618      	mov	r0, r3
   16c90:	46bd      	mov	sp, r7
   16c92:	f85d 7b04 	ldr.w	r7, [sp], #4
   16c96:	4770      	bx	lr
   16c98:	1000a100 	.word	0x1000a100

00016c9c <HciGetLeSupFeat>:
 *
 *  \return Supported features.
 */
/*************************************************************************************************/
uint16_t HciGetLeSupFeat(void)
{
   16c9c:	b480      	push	{r7}
   16c9e:	af00      	add	r7, sp, #0
  // disable LL connection parameter update feature for a better
  // interoperability with Android phones (especially older Android OS).
  return hciCoreCb.leSupFeat & ~HCI_LE_SUP_FEAT_CONN_PARAM_REQ_PROC;
   16ca0:	4b05      	ldr	r3, [pc, #20]	; (16cb8 <HciGetLeSupFeat+0x1c>)
   16ca2:	f8b3 3106 	ldrh.w	r3, [r3, #262]	; 0x106
   16ca6:	f023 0302 	bic.w	r3, r3, #2
   16caa:	b29b      	uxth	r3, r3
}
   16cac:	4618      	mov	r0, r3
   16cae:	46bd      	mov	sp, r7
   16cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
   16cb4:	4770      	bx	lr
   16cb6:	bf00      	nop
   16cb8:	1000a100 	.word	0x1000a100

00016cbc <HciGetMaxRxAclLen>:
 *
 *  \return ACL packet length.
 */
/*************************************************************************************************/
uint16_t HciGetMaxRxAclLen(void)
{
   16cbc:	b480      	push	{r7}
   16cbe:	af00      	add	r7, sp, #0
  return hciCoreCb.maxRxAclLen;
   16cc0:	4b03      	ldr	r3, [pc, #12]	; (16cd0 <HciGetMaxRxAclLen+0x14>)
   16cc2:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
}
   16cc6:	4618      	mov	r0, r3
   16cc8:	46bd      	mov	sp, r7
   16cca:	f85d 7b04 	ldr.w	r7, [sp], #4
   16cce:	4770      	bx	lr
   16cd0:	1000a100 	.word	0x1000a100

00016cd4 <HciLlPrivacySupported>:
 *
 *  \return TRUE if LL Privacy is supported. FALSE, otherwise.
 */
/*************************************************************************************************/
bool_t HciLlPrivacySupported(void)
{
   16cd4:	b480      	push	{r7}
   16cd6:	af00      	add	r7, sp, #0
  return (hciCoreCb.resListSize > 0) ? TRUE : FALSE;
   16cd8:	4b06      	ldr	r3, [pc, #24]	; (16cf4 <HciLlPrivacySupported+0x20>)
   16cda:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
   16cde:	2b00      	cmp	r3, #0
   16ce0:	bf14      	ite	ne
   16ce2:	2301      	movne	r3, #1
   16ce4:	2300      	moveq	r3, #0
   16ce6:	b2db      	uxtb	r3, r3
}
   16ce8:	4618      	mov	r0, r3
   16cea:	46bd      	mov	sp, r7
   16cec:	f85d 7b04 	ldr.w	r7, [sp], #4
   16cf0:	4770      	bx	lr
   16cf2:	bf00      	nop
   16cf4:	1000a100 	.word	0x1000a100

00016cf8 <hciEvtParseLeConnCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeConnCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   16cf8:	b580      	push	{r7, lr}
   16cfa:	b084      	sub	sp, #16
   16cfc:	af00      	add	r7, sp, #0
   16cfe:	60f8      	str	r0, [r7, #12]
   16d00:	60b9      	str	r1, [r7, #8]
   16d02:	4613      	mov	r3, r2
   16d04:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.status, p);
   16d06:	68bb      	ldr	r3, [r7, #8]
   16d08:	1c5a      	adds	r2, r3, #1
   16d0a:	60ba      	str	r2, [r7, #8]
   16d0c:	781a      	ldrb	r2, [r3, #0]
   16d0e:	68fb      	ldr	r3, [r7, #12]
   16d10:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.handle, p);
   16d12:	68bb      	ldr	r3, [r7, #8]
   16d14:	781b      	ldrb	r3, [r3, #0]
   16d16:	b29a      	uxth	r2, r3
   16d18:	68bb      	ldr	r3, [r7, #8]
   16d1a:	3301      	adds	r3, #1
   16d1c:	781b      	ldrb	r3, [r3, #0]
   16d1e:	b29b      	uxth	r3, r3
   16d20:	021b      	lsls	r3, r3, #8
   16d22:	b29b      	uxth	r3, r3
   16d24:	4413      	add	r3, r2
   16d26:	b29a      	uxth	r2, r3
   16d28:	68fb      	ldr	r3, [r7, #12]
   16d2a:	80da      	strh	r2, [r3, #6]
   16d2c:	68bb      	ldr	r3, [r7, #8]
   16d2e:	3302      	adds	r3, #2
   16d30:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.role, p);
   16d32:	68bb      	ldr	r3, [r7, #8]
   16d34:	1c5a      	adds	r2, r3, #1
   16d36:	60ba      	str	r2, [r7, #8]
   16d38:	781a      	ldrb	r2, [r3, #0]
   16d3a:	68fb      	ldr	r3, [r7, #12]
   16d3c:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.addrType, p);
   16d3e:	68bb      	ldr	r3, [r7, #8]
   16d40:	1c5a      	adds	r2, r3, #1
   16d42:	60ba      	str	r2, [r7, #8]
   16d44:	781a      	ldrb	r2, [r3, #0]
   16d46:	68fb      	ldr	r3, [r7, #12]
   16d48:	725a      	strb	r2, [r3, #9]
  BSTREAM_TO_BDA(pMsg->leConnCmpl.peerAddr, p);
   16d4a:	68fb      	ldr	r3, [r7, #12]
   16d4c:	330a      	adds	r3, #10
   16d4e:	4618      	mov	r0, r3
   16d50:	68b9      	ldr	r1, [r7, #8]
   16d52:	f7fc f87b 	bl	12e4c <BdaCpy>
   16d56:	68bb      	ldr	r3, [r7, #8]
   16d58:	3306      	adds	r3, #6
   16d5a:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connInterval, p);
   16d5c:	68bb      	ldr	r3, [r7, #8]
   16d5e:	781b      	ldrb	r3, [r3, #0]
   16d60:	b29a      	uxth	r2, r3
   16d62:	68bb      	ldr	r3, [r7, #8]
   16d64:	3301      	adds	r3, #1
   16d66:	781b      	ldrb	r3, [r3, #0]
   16d68:	b29b      	uxth	r3, r3
   16d6a:	021b      	lsls	r3, r3, #8
   16d6c:	b29b      	uxth	r3, r3
   16d6e:	4413      	add	r3, r2
   16d70:	b29a      	uxth	r2, r3
   16d72:	68fb      	ldr	r3, [r7, #12]
   16d74:	821a      	strh	r2, [r3, #16]
   16d76:	68bb      	ldr	r3, [r7, #8]
   16d78:	3302      	adds	r3, #2
   16d7a:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connLatency, p);
   16d7c:	68bb      	ldr	r3, [r7, #8]
   16d7e:	781b      	ldrb	r3, [r3, #0]
   16d80:	b29a      	uxth	r2, r3
   16d82:	68bb      	ldr	r3, [r7, #8]
   16d84:	3301      	adds	r3, #1
   16d86:	781b      	ldrb	r3, [r3, #0]
   16d88:	b29b      	uxth	r3, r3
   16d8a:	021b      	lsls	r3, r3, #8
   16d8c:	b29b      	uxth	r3, r3
   16d8e:	4413      	add	r3, r2
   16d90:	b29a      	uxth	r2, r3
   16d92:	68fb      	ldr	r3, [r7, #12]
   16d94:	825a      	strh	r2, [r3, #18]
   16d96:	68bb      	ldr	r3, [r7, #8]
   16d98:	3302      	adds	r3, #2
   16d9a:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.supTimeout, p);
   16d9c:	68bb      	ldr	r3, [r7, #8]
   16d9e:	781b      	ldrb	r3, [r3, #0]
   16da0:	b29a      	uxth	r2, r3
   16da2:	68bb      	ldr	r3, [r7, #8]
   16da4:	3301      	adds	r3, #1
   16da6:	781b      	ldrb	r3, [r3, #0]
   16da8:	b29b      	uxth	r3, r3
   16daa:	021b      	lsls	r3, r3, #8
   16dac:	b29b      	uxth	r3, r3
   16dae:	4413      	add	r3, r2
   16db0:	b29a      	uxth	r2, r3
   16db2:	68fb      	ldr	r3, [r7, #12]
   16db4:	829a      	strh	r2, [r3, #20]
   16db6:	68bb      	ldr	r3, [r7, #8]
   16db8:	3302      	adds	r3, #2
   16dba:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.clockAccuracy, p);
   16dbc:	68bb      	ldr	r3, [r7, #8]
   16dbe:	1c5a      	adds	r2, r3, #1
   16dc0:	60ba      	str	r2, [r7, #8]
   16dc2:	781a      	ldrb	r2, [r3, #0]
   16dc4:	68fb      	ldr	r3, [r7, #12]
   16dc6:	759a      	strb	r2, [r3, #22]

  /* zero out unused fields */
  memset(pMsg->leConnCmpl.localRpa, 0, BDA_ADDR_LEN);
   16dc8:	68fb      	ldr	r3, [r7, #12]
   16dca:	3317      	adds	r3, #23
   16dcc:	4618      	mov	r0, r3
   16dce:	2100      	movs	r1, #0
   16dd0:	2206      	movs	r2, #6
   16dd2:	f009 fb0b 	bl	203ec <memset>
  memset(pMsg->leConnCmpl.peerRpa, 0, BDA_ADDR_LEN);
   16dd6:	68fb      	ldr	r3, [r7, #12]
   16dd8:	331d      	adds	r3, #29
   16dda:	4618      	mov	r0, r3
   16ddc:	2100      	movs	r1, #0
   16dde:	2206      	movs	r2, #6
   16de0:	f009 fb04 	bl	203ec <memset>

  pMsg->hdr.param = pMsg->leConnCmpl.handle;
   16de4:	68fb      	ldr	r3, [r7, #12]
   16de6:	88da      	ldrh	r2, [r3, #6]
   16de8:	68fb      	ldr	r3, [r7, #12]
   16dea:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leConnCmpl.status;
   16dec:	68fb      	ldr	r3, [r7, #12]
   16dee:	791a      	ldrb	r2, [r3, #4]
   16df0:	68fb      	ldr	r3, [r7, #12]
   16df2:	70da      	strb	r2, [r3, #3]
}
   16df4:	3710      	adds	r7, #16
   16df6:	46bd      	mov	sp, r7
   16df8:	bd80      	pop	{r7, pc}
   16dfa:	bf00      	nop

00016dfc <hciEvtParseLeEnhancedConnCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeEnhancedConnCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   16dfc:	b580      	push	{r7, lr}
   16dfe:	b084      	sub	sp, #16
   16e00:	af00      	add	r7, sp, #0
   16e02:	60f8      	str	r0, [r7, #12]
   16e04:	60b9      	str	r1, [r7, #8]
   16e06:	4613      	mov	r3, r2
   16e08:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.status, p);
   16e0a:	68bb      	ldr	r3, [r7, #8]
   16e0c:	1c5a      	adds	r2, r3, #1
   16e0e:	60ba      	str	r2, [r7, #8]
   16e10:	781a      	ldrb	r2, [r3, #0]
   16e12:	68fb      	ldr	r3, [r7, #12]
   16e14:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.handle, p);
   16e16:	68bb      	ldr	r3, [r7, #8]
   16e18:	781b      	ldrb	r3, [r3, #0]
   16e1a:	b29a      	uxth	r2, r3
   16e1c:	68bb      	ldr	r3, [r7, #8]
   16e1e:	3301      	adds	r3, #1
   16e20:	781b      	ldrb	r3, [r3, #0]
   16e22:	b29b      	uxth	r3, r3
   16e24:	021b      	lsls	r3, r3, #8
   16e26:	b29b      	uxth	r3, r3
   16e28:	4413      	add	r3, r2
   16e2a:	b29a      	uxth	r2, r3
   16e2c:	68fb      	ldr	r3, [r7, #12]
   16e2e:	80da      	strh	r2, [r3, #6]
   16e30:	68bb      	ldr	r3, [r7, #8]
   16e32:	3302      	adds	r3, #2
   16e34:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.role, p);
   16e36:	68bb      	ldr	r3, [r7, #8]
   16e38:	1c5a      	adds	r2, r3, #1
   16e3a:	60ba      	str	r2, [r7, #8]
   16e3c:	781a      	ldrb	r2, [r3, #0]
   16e3e:	68fb      	ldr	r3, [r7, #12]
   16e40:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.addrType, p);
   16e42:	68bb      	ldr	r3, [r7, #8]
   16e44:	1c5a      	adds	r2, r3, #1
   16e46:	60ba      	str	r2, [r7, #8]
   16e48:	781a      	ldrb	r2, [r3, #0]
   16e4a:	68fb      	ldr	r3, [r7, #12]
   16e4c:	725a      	strb	r2, [r3, #9]
  BSTREAM_TO_BDA(pMsg->leConnCmpl.peerAddr, p);
   16e4e:	68fb      	ldr	r3, [r7, #12]
   16e50:	330a      	adds	r3, #10
   16e52:	4618      	mov	r0, r3
   16e54:	68b9      	ldr	r1, [r7, #8]
   16e56:	f7fb fff9 	bl	12e4c <BdaCpy>
   16e5a:	68bb      	ldr	r3, [r7, #8]
   16e5c:	3306      	adds	r3, #6
   16e5e:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_BDA(pMsg->leConnCmpl.localRpa, p);
   16e60:	68fb      	ldr	r3, [r7, #12]
   16e62:	3317      	adds	r3, #23
   16e64:	4618      	mov	r0, r3
   16e66:	68b9      	ldr	r1, [r7, #8]
   16e68:	f7fb fff0 	bl	12e4c <BdaCpy>
   16e6c:	68bb      	ldr	r3, [r7, #8]
   16e6e:	3306      	adds	r3, #6
   16e70:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_BDA(pMsg->leConnCmpl.peerRpa, p);
   16e72:	68fb      	ldr	r3, [r7, #12]
   16e74:	331d      	adds	r3, #29
   16e76:	4618      	mov	r0, r3
   16e78:	68b9      	ldr	r1, [r7, #8]
   16e7a:	f7fb ffe7 	bl	12e4c <BdaCpy>
   16e7e:	68bb      	ldr	r3, [r7, #8]
   16e80:	3306      	adds	r3, #6
   16e82:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connInterval, p);
   16e84:	68bb      	ldr	r3, [r7, #8]
   16e86:	781b      	ldrb	r3, [r3, #0]
   16e88:	b29a      	uxth	r2, r3
   16e8a:	68bb      	ldr	r3, [r7, #8]
   16e8c:	3301      	adds	r3, #1
   16e8e:	781b      	ldrb	r3, [r3, #0]
   16e90:	b29b      	uxth	r3, r3
   16e92:	021b      	lsls	r3, r3, #8
   16e94:	b29b      	uxth	r3, r3
   16e96:	4413      	add	r3, r2
   16e98:	b29a      	uxth	r2, r3
   16e9a:	68fb      	ldr	r3, [r7, #12]
   16e9c:	821a      	strh	r2, [r3, #16]
   16e9e:	68bb      	ldr	r3, [r7, #8]
   16ea0:	3302      	adds	r3, #2
   16ea2:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connLatency, p);
   16ea4:	68bb      	ldr	r3, [r7, #8]
   16ea6:	781b      	ldrb	r3, [r3, #0]
   16ea8:	b29a      	uxth	r2, r3
   16eaa:	68bb      	ldr	r3, [r7, #8]
   16eac:	3301      	adds	r3, #1
   16eae:	781b      	ldrb	r3, [r3, #0]
   16eb0:	b29b      	uxth	r3, r3
   16eb2:	021b      	lsls	r3, r3, #8
   16eb4:	b29b      	uxth	r3, r3
   16eb6:	4413      	add	r3, r2
   16eb8:	b29a      	uxth	r2, r3
   16eba:	68fb      	ldr	r3, [r7, #12]
   16ebc:	825a      	strh	r2, [r3, #18]
   16ebe:	68bb      	ldr	r3, [r7, #8]
   16ec0:	3302      	adds	r3, #2
   16ec2:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.supTimeout, p);
   16ec4:	68bb      	ldr	r3, [r7, #8]
   16ec6:	781b      	ldrb	r3, [r3, #0]
   16ec8:	b29a      	uxth	r2, r3
   16eca:	68bb      	ldr	r3, [r7, #8]
   16ecc:	3301      	adds	r3, #1
   16ece:	781b      	ldrb	r3, [r3, #0]
   16ed0:	b29b      	uxth	r3, r3
   16ed2:	021b      	lsls	r3, r3, #8
   16ed4:	b29b      	uxth	r3, r3
   16ed6:	4413      	add	r3, r2
   16ed8:	b29a      	uxth	r2, r3
   16eda:	68fb      	ldr	r3, [r7, #12]
   16edc:	829a      	strh	r2, [r3, #20]
   16ede:	68bb      	ldr	r3, [r7, #8]
   16ee0:	3302      	adds	r3, #2
   16ee2:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.clockAccuracy, p);
   16ee4:	68bb      	ldr	r3, [r7, #8]
   16ee6:	1c5a      	adds	r2, r3, #1
   16ee8:	60ba      	str	r2, [r7, #8]
   16eea:	781a      	ldrb	r2, [r3, #0]
   16eec:	68fb      	ldr	r3, [r7, #12]
   16eee:	759a      	strb	r2, [r3, #22]

  pMsg->hdr.param = pMsg->leConnCmpl.handle;
   16ef0:	68fb      	ldr	r3, [r7, #12]
   16ef2:	88da      	ldrh	r2, [r3, #6]
   16ef4:	68fb      	ldr	r3, [r7, #12]
   16ef6:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leConnCmpl.status;
   16ef8:	68fb      	ldr	r3, [r7, #12]
   16efa:	791a      	ldrb	r2, [r3, #4]
   16efc:	68fb      	ldr	r3, [r7, #12]
   16efe:	70da      	strb	r2, [r3, #3]
}
   16f00:	3710      	adds	r7, #16
   16f02:	46bd      	mov	sp, r7
   16f04:	bd80      	pop	{r7, pc}
   16f06:	bf00      	nop

00016f08 <hciEvtParseDisconnectCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseDisconnectCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   16f08:	b480      	push	{r7}
   16f0a:	b085      	sub	sp, #20
   16f0c:	af00      	add	r7, sp, #0
   16f0e:	60f8      	str	r0, [r7, #12]
   16f10:	60b9      	str	r1, [r7, #8]
   16f12:	4613      	mov	r3, r2
   16f14:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->disconnectCmpl.status, p);
   16f16:	68bb      	ldr	r3, [r7, #8]
   16f18:	1c5a      	adds	r2, r3, #1
   16f1a:	60ba      	str	r2, [r7, #8]
   16f1c:	781a      	ldrb	r2, [r3, #0]
   16f1e:	68fb      	ldr	r3, [r7, #12]
   16f20:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->disconnectCmpl.handle, p);
   16f22:	68bb      	ldr	r3, [r7, #8]
   16f24:	781b      	ldrb	r3, [r3, #0]
   16f26:	b29a      	uxth	r2, r3
   16f28:	68bb      	ldr	r3, [r7, #8]
   16f2a:	3301      	adds	r3, #1
   16f2c:	781b      	ldrb	r3, [r3, #0]
   16f2e:	b29b      	uxth	r3, r3
   16f30:	021b      	lsls	r3, r3, #8
   16f32:	b29b      	uxth	r3, r3
   16f34:	4413      	add	r3, r2
   16f36:	b29a      	uxth	r2, r3
   16f38:	68fb      	ldr	r3, [r7, #12]
   16f3a:	80da      	strh	r2, [r3, #6]
   16f3c:	68bb      	ldr	r3, [r7, #8]
   16f3e:	3302      	adds	r3, #2
   16f40:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->disconnectCmpl.reason, p);
   16f42:	68bb      	ldr	r3, [r7, #8]
   16f44:	1c5a      	adds	r2, r3, #1
   16f46:	60ba      	str	r2, [r7, #8]
   16f48:	781a      	ldrb	r2, [r3, #0]
   16f4a:	68fb      	ldr	r3, [r7, #12]
   16f4c:	721a      	strb	r2, [r3, #8]

  pMsg->hdr.param = pMsg->disconnectCmpl.handle;
   16f4e:	68fb      	ldr	r3, [r7, #12]
   16f50:	88da      	ldrh	r2, [r3, #6]
   16f52:	68fb      	ldr	r3, [r7, #12]
   16f54:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->disconnectCmpl.status;
   16f56:	68fb      	ldr	r3, [r7, #12]
   16f58:	791a      	ldrb	r2, [r3, #4]
   16f5a:	68fb      	ldr	r3, [r7, #12]
   16f5c:	70da      	strb	r2, [r3, #3]
}
   16f5e:	3714      	adds	r7, #20
   16f60:	46bd      	mov	sp, r7
   16f62:	f85d 7b04 	ldr.w	r7, [sp], #4
   16f66:	4770      	bx	lr

00016f68 <hciEvtParseLeConnUpdateCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeConnUpdateCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   16f68:	b480      	push	{r7}
   16f6a:	b085      	sub	sp, #20
   16f6c:	af00      	add	r7, sp, #0
   16f6e:	60f8      	str	r0, [r7, #12]
   16f70:	60b9      	str	r1, [r7, #8]
   16f72:	4613      	mov	r3, r2
   16f74:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leConnUpdateCmpl.status, p);
   16f76:	68bb      	ldr	r3, [r7, #8]
   16f78:	1c5a      	adds	r2, r3, #1
   16f7a:	60ba      	str	r2, [r7, #8]
   16f7c:	781a      	ldrb	r2, [r3, #0]
   16f7e:	68fb      	ldr	r3, [r7, #12]
   16f80:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.handle, p);
   16f82:	68bb      	ldr	r3, [r7, #8]
   16f84:	781b      	ldrb	r3, [r3, #0]
   16f86:	b29a      	uxth	r2, r3
   16f88:	68bb      	ldr	r3, [r7, #8]
   16f8a:	3301      	adds	r3, #1
   16f8c:	781b      	ldrb	r3, [r3, #0]
   16f8e:	b29b      	uxth	r3, r3
   16f90:	021b      	lsls	r3, r3, #8
   16f92:	b29b      	uxth	r3, r3
   16f94:	4413      	add	r3, r2
   16f96:	b29a      	uxth	r2, r3
   16f98:	68fb      	ldr	r3, [r7, #12]
   16f9a:	80da      	strh	r2, [r3, #6]
   16f9c:	68bb      	ldr	r3, [r7, #8]
   16f9e:	3302      	adds	r3, #2
   16fa0:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.connInterval, p);
   16fa2:	68bb      	ldr	r3, [r7, #8]
   16fa4:	781b      	ldrb	r3, [r3, #0]
   16fa6:	b29a      	uxth	r2, r3
   16fa8:	68bb      	ldr	r3, [r7, #8]
   16faa:	3301      	adds	r3, #1
   16fac:	781b      	ldrb	r3, [r3, #0]
   16fae:	b29b      	uxth	r3, r3
   16fb0:	021b      	lsls	r3, r3, #8
   16fb2:	b29b      	uxth	r3, r3
   16fb4:	4413      	add	r3, r2
   16fb6:	b29a      	uxth	r2, r3
   16fb8:	68fb      	ldr	r3, [r7, #12]
   16fba:	811a      	strh	r2, [r3, #8]
   16fbc:	68bb      	ldr	r3, [r7, #8]
   16fbe:	3302      	adds	r3, #2
   16fc0:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.connLatency, p);
   16fc2:	68bb      	ldr	r3, [r7, #8]
   16fc4:	781b      	ldrb	r3, [r3, #0]
   16fc6:	b29a      	uxth	r2, r3
   16fc8:	68bb      	ldr	r3, [r7, #8]
   16fca:	3301      	adds	r3, #1
   16fcc:	781b      	ldrb	r3, [r3, #0]
   16fce:	b29b      	uxth	r3, r3
   16fd0:	021b      	lsls	r3, r3, #8
   16fd2:	b29b      	uxth	r3, r3
   16fd4:	4413      	add	r3, r2
   16fd6:	b29a      	uxth	r2, r3
   16fd8:	68fb      	ldr	r3, [r7, #12]
   16fda:	815a      	strh	r2, [r3, #10]
   16fdc:	68bb      	ldr	r3, [r7, #8]
   16fde:	3302      	adds	r3, #2
   16fe0:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.supTimeout, p);
   16fe2:	68bb      	ldr	r3, [r7, #8]
   16fe4:	781b      	ldrb	r3, [r3, #0]
   16fe6:	b29a      	uxth	r2, r3
   16fe8:	68bb      	ldr	r3, [r7, #8]
   16fea:	3301      	adds	r3, #1
   16fec:	781b      	ldrb	r3, [r3, #0]
   16fee:	b29b      	uxth	r3, r3
   16ff0:	021b      	lsls	r3, r3, #8
   16ff2:	b29b      	uxth	r3, r3
   16ff4:	4413      	add	r3, r2
   16ff6:	b29a      	uxth	r2, r3
   16ff8:	68fb      	ldr	r3, [r7, #12]
   16ffa:	819a      	strh	r2, [r3, #12]
   16ffc:	68bb      	ldr	r3, [r7, #8]
   16ffe:	3302      	adds	r3, #2
   17000:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->leConnUpdateCmpl.handle;
   17002:	68fb      	ldr	r3, [r7, #12]
   17004:	88da      	ldrh	r2, [r3, #6]
   17006:	68fb      	ldr	r3, [r7, #12]
   17008:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leConnUpdateCmpl.status;
   1700a:	68fb      	ldr	r3, [r7, #12]
   1700c:	791a      	ldrb	r2, [r3, #4]
   1700e:	68fb      	ldr	r3, [r7, #12]
   17010:	70da      	strb	r2, [r3, #3]
}
   17012:	3714      	adds	r7, #20
   17014:	46bd      	mov	sp, r7
   17016:	f85d 7b04 	ldr.w	r7, [sp], #4
   1701a:	4770      	bx	lr

0001701c <hciEvtParseLeCreateConnCancelCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeCreateConnCancelCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1701c:	b480      	push	{r7}
   1701e:	b085      	sub	sp, #20
   17020:	af00      	add	r7, sp, #0
   17022:	60f8      	str	r0, [r7, #12]
   17024:	60b9      	str	r1, [r7, #8]
   17026:	4613      	mov	r3, r2
   17028:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leCreateConnCancelCmdCmpl.status, p);
   1702a:	68bb      	ldr	r3, [r7, #8]
   1702c:	1c5a      	adds	r2, r3, #1
   1702e:	60ba      	str	r2, [r7, #8]
   17030:	781a      	ldrb	r2, [r3, #0]
   17032:	68fb      	ldr	r3, [r7, #12]
   17034:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leCreateConnCancelCmdCmpl.status;
   17036:	68fb      	ldr	r3, [r7, #12]
   17038:	791a      	ldrb	r2, [r3, #4]
   1703a:	68fb      	ldr	r3, [r7, #12]
   1703c:	70da      	strb	r2, [r3, #3]
}
   1703e:	3714      	adds	r7, #20
   17040:	46bd      	mov	sp, r7
   17042:	f85d 7b04 	ldr.w	r7, [sp], #4
   17046:	4770      	bx	lr

00017048 <hciEvtParseReadRssiCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadRssiCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17048:	b480      	push	{r7}
   1704a:	b085      	sub	sp, #20
   1704c:	af00      	add	r7, sp, #0
   1704e:	60f8      	str	r0, [r7, #12]
   17050:	60b9      	str	r1, [r7, #8]
   17052:	4613      	mov	r3, r2
   17054:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->readRssiCmdCmpl.status, p);
   17056:	68bb      	ldr	r3, [r7, #8]
   17058:	1c5a      	adds	r2, r3, #1
   1705a:	60ba      	str	r2, [r7, #8]
   1705c:	781a      	ldrb	r2, [r3, #0]
   1705e:	68fb      	ldr	r3, [r7, #12]
   17060:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->readRssiCmdCmpl.handle, p);
   17062:	68bb      	ldr	r3, [r7, #8]
   17064:	781b      	ldrb	r3, [r3, #0]
   17066:	b29a      	uxth	r2, r3
   17068:	68bb      	ldr	r3, [r7, #8]
   1706a:	3301      	adds	r3, #1
   1706c:	781b      	ldrb	r3, [r3, #0]
   1706e:	b29b      	uxth	r3, r3
   17070:	021b      	lsls	r3, r3, #8
   17072:	b29b      	uxth	r3, r3
   17074:	4413      	add	r3, r2
   17076:	b29a      	uxth	r2, r3
   17078:	68fb      	ldr	r3, [r7, #12]
   1707a:	80da      	strh	r2, [r3, #6]
   1707c:	68bb      	ldr	r3, [r7, #8]
   1707e:	3302      	adds	r3, #2
   17080:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->readRssiCmdCmpl.rssi, p);
   17082:	68bb      	ldr	r3, [r7, #8]
   17084:	1c5a      	adds	r2, r3, #1
   17086:	60ba      	str	r2, [r7, #8]
   17088:	781b      	ldrb	r3, [r3, #0]
   1708a:	b2da      	uxtb	r2, r3
   1708c:	68fb      	ldr	r3, [r7, #12]
   1708e:	721a      	strb	r2, [r3, #8]

  pMsg->hdr.param = pMsg->readRssiCmdCmpl.handle;
   17090:	68fb      	ldr	r3, [r7, #12]
   17092:	88da      	ldrh	r2, [r3, #6]
   17094:	68fb      	ldr	r3, [r7, #12]
   17096:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->readRssiCmdCmpl.status;
   17098:	68fb      	ldr	r3, [r7, #12]
   1709a:	791a      	ldrb	r2, [r3, #4]
   1709c:	68fb      	ldr	r3, [r7, #12]
   1709e:	70da      	strb	r2, [r3, #3]
}
   170a0:	3714      	adds	r7, #20
   170a2:	46bd      	mov	sp, r7
   170a4:	f85d 7b04 	ldr.w	r7, [sp], #4
   170a8:	4770      	bx	lr
   170aa:	bf00      	nop

000170ac <hciEvtParseReadChanMapCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadChanMapCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   170ac:	b580      	push	{r7, lr}
   170ae:	b084      	sub	sp, #16
   170b0:	af00      	add	r7, sp, #0
   170b2:	60f8      	str	r0, [r7, #12]
   170b4:	60b9      	str	r1, [r7, #8]
   170b6:	4613      	mov	r3, r2
   170b8:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->readChanMapCmdCmpl.status, p);
   170ba:	68bb      	ldr	r3, [r7, #8]
   170bc:	1c5a      	adds	r2, r3, #1
   170be:	60ba      	str	r2, [r7, #8]
   170c0:	781a      	ldrb	r2, [r3, #0]
   170c2:	68fb      	ldr	r3, [r7, #12]
   170c4:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->readChanMapCmdCmpl.handle, p);
   170c6:	68bb      	ldr	r3, [r7, #8]
   170c8:	781b      	ldrb	r3, [r3, #0]
   170ca:	b29a      	uxth	r2, r3
   170cc:	68bb      	ldr	r3, [r7, #8]
   170ce:	3301      	adds	r3, #1
   170d0:	781b      	ldrb	r3, [r3, #0]
   170d2:	b29b      	uxth	r3, r3
   170d4:	021b      	lsls	r3, r3, #8
   170d6:	b29b      	uxth	r3, r3
   170d8:	4413      	add	r3, r2
   170da:	b29a      	uxth	r2, r3
   170dc:	68fb      	ldr	r3, [r7, #12]
   170de:	80da      	strh	r2, [r3, #6]
   170e0:	68bb      	ldr	r3, [r7, #8]
   170e2:	3302      	adds	r3, #2
   170e4:	60bb      	str	r3, [r7, #8]

  memcpy(pMsg->readChanMapCmdCmpl.chanMap, p, HCI_CHAN_MAP_LEN);
   170e6:	68fb      	ldr	r3, [r7, #12]
   170e8:	3308      	adds	r3, #8
   170ea:	4618      	mov	r0, r3
   170ec:	68b9      	ldr	r1, [r7, #8]
   170ee:	2205      	movs	r2, #5
   170f0:	f7f5 f806 	bl	c100 <memcpy>

  pMsg->hdr.param = pMsg->readChanMapCmdCmpl.handle;
   170f4:	68fb      	ldr	r3, [r7, #12]
   170f6:	88da      	ldrh	r2, [r3, #6]
   170f8:	68fb      	ldr	r3, [r7, #12]
   170fa:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->readChanMapCmdCmpl.status;
   170fc:	68fb      	ldr	r3, [r7, #12]
   170fe:	791a      	ldrb	r2, [r3, #4]
   17100:	68fb      	ldr	r3, [r7, #12]
   17102:	70da      	strb	r2, [r3, #3]
}
   17104:	3710      	adds	r7, #16
   17106:	46bd      	mov	sp, r7
   17108:	bd80      	pop	{r7, pc}
   1710a:	bf00      	nop

0001710c <hciEvtParseReadTxPwrLvlCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadTxPwrLvlCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1710c:	b480      	push	{r7}
   1710e:	b085      	sub	sp, #20
   17110:	af00      	add	r7, sp, #0
   17112:	60f8      	str	r0, [r7, #12]
   17114:	60b9      	str	r1, [r7, #8]
   17116:	4613      	mov	r3, r2
   17118:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->readTxPwrLvlCmdCmpl.status, p);
   1711a:	68bb      	ldr	r3, [r7, #8]
   1711c:	1c5a      	adds	r2, r3, #1
   1711e:	60ba      	str	r2, [r7, #8]
   17120:	781a      	ldrb	r2, [r3, #0]
   17122:	68fb      	ldr	r3, [r7, #12]
   17124:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->readTxPwrLvlCmdCmpl.handle, p);
   17126:	68bb      	ldr	r3, [r7, #8]
   17128:	781a      	ldrb	r2, [r3, #0]
   1712a:	68fb      	ldr	r3, [r7, #12]
   1712c:	715a      	strb	r2, [r3, #5]
   1712e:	68bb      	ldr	r3, [r7, #8]
   17130:	3302      	adds	r3, #2
   17132:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_INT8(pMsg->readTxPwrLvlCmdCmpl.pwrLvl, p);
   17134:	68bb      	ldr	r3, [r7, #8]
   17136:	1c5a      	adds	r2, r3, #1
   17138:	60ba      	str	r2, [r7, #8]
   1713a:	781b      	ldrb	r3, [r3, #0]
   1713c:	b2da      	uxtb	r2, r3
   1713e:	68fb      	ldr	r3, [r7, #12]
   17140:	719a      	strb	r2, [r3, #6]

  pMsg->hdr.param = pMsg->readTxPwrLvlCmdCmpl.handle;
   17142:	68fb      	ldr	r3, [r7, #12]
   17144:	795b      	ldrb	r3, [r3, #5]
   17146:	b29a      	uxth	r2, r3
   17148:	68fb      	ldr	r3, [r7, #12]
   1714a:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->readTxPwrLvlCmdCmpl.status;
   1714c:	68fb      	ldr	r3, [r7, #12]
   1714e:	791a      	ldrb	r2, [r3, #4]
   17150:	68fb      	ldr	r3, [r7, #12]
   17152:	70da      	strb	r2, [r3, #3]
}
   17154:	3714      	adds	r7, #20
   17156:	46bd      	mov	sp, r7
   17158:	f85d 7b04 	ldr.w	r7, [sp], #4
   1715c:	4770      	bx	lr
   1715e:	bf00      	nop

00017160 <hciEvtParseReadRemoteVerInfoCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadRemoteVerInfoCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17160:	b480      	push	{r7}
   17162:	b085      	sub	sp, #20
   17164:	af00      	add	r7, sp, #0
   17166:	60f8      	str	r0, [r7, #12]
   17168:	60b9      	str	r1, [r7, #8]
   1716a:	4613      	mov	r3, r2
   1716c:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->readRemoteVerInfoCmpl.status, p);
   1716e:	68bb      	ldr	r3, [r7, #8]
   17170:	1c5a      	adds	r2, r3, #1
   17172:	60ba      	str	r2, [r7, #8]
   17174:	781a      	ldrb	r2, [r3, #0]
   17176:	68fb      	ldr	r3, [r7, #12]
   17178:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.handle, p);
   1717a:	68bb      	ldr	r3, [r7, #8]
   1717c:	781b      	ldrb	r3, [r3, #0]
   1717e:	b29a      	uxth	r2, r3
   17180:	68bb      	ldr	r3, [r7, #8]
   17182:	3301      	adds	r3, #1
   17184:	781b      	ldrb	r3, [r3, #0]
   17186:	b29b      	uxth	r3, r3
   17188:	021b      	lsls	r3, r3, #8
   1718a:	b29b      	uxth	r3, r3
   1718c:	4413      	add	r3, r2
   1718e:	b29a      	uxth	r2, r3
   17190:	68fb      	ldr	r3, [r7, #12]
   17192:	80da      	strh	r2, [r3, #6]
   17194:	68bb      	ldr	r3, [r7, #8]
   17196:	3302      	adds	r3, #2
   17198:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->readRemoteVerInfoCmpl.version, p);
   1719a:	68bb      	ldr	r3, [r7, #8]
   1719c:	1c5a      	adds	r2, r3, #1
   1719e:	60ba      	str	r2, [r7, #8]
   171a0:	781a      	ldrb	r2, [r3, #0]
   171a2:	68fb      	ldr	r3, [r7, #12]
   171a4:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.mfrName, p);
   171a6:	68bb      	ldr	r3, [r7, #8]
   171a8:	781b      	ldrb	r3, [r3, #0]
   171aa:	b29a      	uxth	r2, r3
   171ac:	68bb      	ldr	r3, [r7, #8]
   171ae:	3301      	adds	r3, #1
   171b0:	781b      	ldrb	r3, [r3, #0]
   171b2:	b29b      	uxth	r3, r3
   171b4:	021b      	lsls	r3, r3, #8
   171b6:	b29b      	uxth	r3, r3
   171b8:	4413      	add	r3, r2
   171ba:	b29a      	uxth	r2, r3
   171bc:	68fb      	ldr	r3, [r7, #12]
   171be:	815a      	strh	r2, [r3, #10]
   171c0:	68bb      	ldr	r3, [r7, #8]
   171c2:	3302      	adds	r3, #2
   171c4:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.subversion, p);
   171c6:	68bb      	ldr	r3, [r7, #8]
   171c8:	781b      	ldrb	r3, [r3, #0]
   171ca:	b29a      	uxth	r2, r3
   171cc:	68bb      	ldr	r3, [r7, #8]
   171ce:	3301      	adds	r3, #1
   171d0:	781b      	ldrb	r3, [r3, #0]
   171d2:	b29b      	uxth	r3, r3
   171d4:	021b      	lsls	r3, r3, #8
   171d6:	b29b      	uxth	r3, r3
   171d8:	4413      	add	r3, r2
   171da:	b29a      	uxth	r2, r3
   171dc:	68fb      	ldr	r3, [r7, #12]
   171de:	819a      	strh	r2, [r3, #12]
   171e0:	68bb      	ldr	r3, [r7, #8]
   171e2:	3302      	adds	r3, #2
   171e4:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->readRemoteVerInfoCmpl.handle;
   171e6:	68fb      	ldr	r3, [r7, #12]
   171e8:	88da      	ldrh	r2, [r3, #6]
   171ea:	68fb      	ldr	r3, [r7, #12]
   171ec:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->readRemoteVerInfoCmpl.status;
   171ee:	68fb      	ldr	r3, [r7, #12]
   171f0:	791a      	ldrb	r2, [r3, #4]
   171f2:	68fb      	ldr	r3, [r7, #12]
   171f4:	70da      	strb	r2, [r3, #3]
}
   171f6:	3714      	adds	r7, #20
   171f8:	46bd      	mov	sp, r7
   171fa:	f85d 7b04 	ldr.w	r7, [sp], #4
   171fe:	4770      	bx	lr

00017200 <hciEvtParseReadLeRemoteFeatCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadLeRemoteFeatCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17200:	b580      	push	{r7, lr}
   17202:	b084      	sub	sp, #16
   17204:	af00      	add	r7, sp, #0
   17206:	60f8      	str	r0, [r7, #12]
   17208:	60b9      	str	r1, [r7, #8]
   1720a:	4613      	mov	r3, r2
   1720c:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leReadRemoteFeatCmpl.status, p);
   1720e:	68bb      	ldr	r3, [r7, #8]
   17210:	1c5a      	adds	r2, r3, #1
   17212:	60ba      	str	r2, [r7, #8]
   17214:	781a      	ldrb	r2, [r3, #0]
   17216:	68fb      	ldr	r3, [r7, #12]
   17218:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leReadRemoteFeatCmpl.handle, p);
   1721a:	68bb      	ldr	r3, [r7, #8]
   1721c:	781b      	ldrb	r3, [r3, #0]
   1721e:	b29a      	uxth	r2, r3
   17220:	68bb      	ldr	r3, [r7, #8]
   17222:	3301      	adds	r3, #1
   17224:	781b      	ldrb	r3, [r3, #0]
   17226:	b29b      	uxth	r3, r3
   17228:	021b      	lsls	r3, r3, #8
   1722a:	b29b      	uxth	r3, r3
   1722c:	4413      	add	r3, r2
   1722e:	b29a      	uxth	r2, r3
   17230:	68fb      	ldr	r3, [r7, #12]
   17232:	80da      	strh	r2, [r3, #6]
   17234:	68bb      	ldr	r3, [r7, #8]
   17236:	3302      	adds	r3, #2
   17238:	60bb      	str	r3, [r7, #8]
  memcpy(&pMsg->leReadRemoteFeatCmpl.features, p, HCI_FEAT_LEN);
   1723a:	68fb      	ldr	r3, [r7, #12]
   1723c:	3308      	adds	r3, #8
   1723e:	4618      	mov	r0, r3
   17240:	68b9      	ldr	r1, [r7, #8]
   17242:	2208      	movs	r2, #8
   17244:	f7f4 ff5c 	bl	c100 <memcpy>

  pMsg->hdr.param = pMsg->leReadRemoteFeatCmpl.handle;
   17248:	68fb      	ldr	r3, [r7, #12]
   1724a:	88da      	ldrh	r2, [r3, #6]
   1724c:	68fb      	ldr	r3, [r7, #12]
   1724e:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leReadRemoteFeatCmpl.status;
   17250:	68fb      	ldr	r3, [r7, #12]
   17252:	791a      	ldrb	r2, [r3, #4]
   17254:	68fb      	ldr	r3, [r7, #12]
   17256:	70da      	strb	r2, [r3, #3]
}
   17258:	3710      	adds	r7, #16
   1725a:	46bd      	mov	sp, r7
   1725c:	bd80      	pop	{r7, pc}
   1725e:	bf00      	nop

00017260 <hciEvtParseLeLtkReqReplCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeLtkReqReplCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17260:	b480      	push	{r7}
   17262:	b085      	sub	sp, #20
   17264:	af00      	add	r7, sp, #0
   17266:	60f8      	str	r0, [r7, #12]
   17268:	60b9      	str	r1, [r7, #8]
   1726a:	4613      	mov	r3, r2
   1726c:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leLtkReqReplCmdCmpl.status, p);
   1726e:	68bb      	ldr	r3, [r7, #8]
   17270:	1c5a      	adds	r2, r3, #1
   17272:	60ba      	str	r2, [r7, #8]
   17274:	781a      	ldrb	r2, [r3, #0]
   17276:	68fb      	ldr	r3, [r7, #12]
   17278:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leLtkReqReplCmdCmpl.handle, p);
   1727a:	68bb      	ldr	r3, [r7, #8]
   1727c:	781b      	ldrb	r3, [r3, #0]
   1727e:	b29a      	uxth	r2, r3
   17280:	68bb      	ldr	r3, [r7, #8]
   17282:	3301      	adds	r3, #1
   17284:	781b      	ldrb	r3, [r3, #0]
   17286:	b29b      	uxth	r3, r3
   17288:	021b      	lsls	r3, r3, #8
   1728a:	b29b      	uxth	r3, r3
   1728c:	4413      	add	r3, r2
   1728e:	b29a      	uxth	r2, r3
   17290:	68fb      	ldr	r3, [r7, #12]
   17292:	80da      	strh	r2, [r3, #6]
   17294:	68bb      	ldr	r3, [r7, #8]
   17296:	3302      	adds	r3, #2
   17298:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->leLtkReqReplCmdCmpl.handle;
   1729a:	68fb      	ldr	r3, [r7, #12]
   1729c:	88da      	ldrh	r2, [r3, #6]
   1729e:	68fb      	ldr	r3, [r7, #12]
   172a0:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leLtkReqReplCmdCmpl.status;
   172a2:	68fb      	ldr	r3, [r7, #12]
   172a4:	791a      	ldrb	r2, [r3, #4]
   172a6:	68fb      	ldr	r3, [r7, #12]
   172a8:	70da      	strb	r2, [r3, #3]
}
   172aa:	3714      	adds	r7, #20
   172ac:	46bd      	mov	sp, r7
   172ae:	f85d 7b04 	ldr.w	r7, [sp], #4
   172b2:	4770      	bx	lr

000172b4 <hciEvtParseLeLtkReqNegReplCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeLtkReqNegReplCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   172b4:	b480      	push	{r7}
   172b6:	b085      	sub	sp, #20
   172b8:	af00      	add	r7, sp, #0
   172ba:	60f8      	str	r0, [r7, #12]
   172bc:	60b9      	str	r1, [r7, #8]
   172be:	4613      	mov	r3, r2
   172c0:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leLtkReqNegReplCmdCmpl.status, p);
   172c2:	68bb      	ldr	r3, [r7, #8]
   172c4:	1c5a      	adds	r2, r3, #1
   172c6:	60ba      	str	r2, [r7, #8]
   172c8:	781a      	ldrb	r2, [r3, #0]
   172ca:	68fb      	ldr	r3, [r7, #12]
   172cc:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leLtkReqNegReplCmdCmpl.handle, p);
   172ce:	68bb      	ldr	r3, [r7, #8]
   172d0:	781b      	ldrb	r3, [r3, #0]
   172d2:	b29a      	uxth	r2, r3
   172d4:	68bb      	ldr	r3, [r7, #8]
   172d6:	3301      	adds	r3, #1
   172d8:	781b      	ldrb	r3, [r3, #0]
   172da:	b29b      	uxth	r3, r3
   172dc:	021b      	lsls	r3, r3, #8
   172de:	b29b      	uxth	r3, r3
   172e0:	4413      	add	r3, r2
   172e2:	b29a      	uxth	r2, r3
   172e4:	68fb      	ldr	r3, [r7, #12]
   172e6:	80da      	strh	r2, [r3, #6]
   172e8:	68bb      	ldr	r3, [r7, #8]
   172ea:	3302      	adds	r3, #2
   172ec:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->leLtkReqNegReplCmdCmpl.handle;
   172ee:	68fb      	ldr	r3, [r7, #12]
   172f0:	88da      	ldrh	r2, [r3, #6]
   172f2:	68fb      	ldr	r3, [r7, #12]
   172f4:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leLtkReqNegReplCmdCmpl.status;
   172f6:	68fb      	ldr	r3, [r7, #12]
   172f8:	791a      	ldrb	r2, [r3, #4]
   172fa:	68fb      	ldr	r3, [r7, #12]
   172fc:	70da      	strb	r2, [r3, #3]
}
   172fe:	3714      	adds	r7, #20
   17300:	46bd      	mov	sp, r7
   17302:	f85d 7b04 	ldr.w	r7, [sp], #4
   17306:	4770      	bx	lr

00017308 <hciEvtParseEncKeyRefreshCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseEncKeyRefreshCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17308:	b480      	push	{r7}
   1730a:	b085      	sub	sp, #20
   1730c:	af00      	add	r7, sp, #0
   1730e:	60f8      	str	r0, [r7, #12]
   17310:	60b9      	str	r1, [r7, #8]
   17312:	4613      	mov	r3, r2
   17314:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->encKeyRefreshCmpl.status, p);
   17316:	68bb      	ldr	r3, [r7, #8]
   17318:	1c5a      	adds	r2, r3, #1
   1731a:	60ba      	str	r2, [r7, #8]
   1731c:	781a      	ldrb	r2, [r3, #0]
   1731e:	68fb      	ldr	r3, [r7, #12]
   17320:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->encKeyRefreshCmpl.handle, p);
   17322:	68bb      	ldr	r3, [r7, #8]
   17324:	781b      	ldrb	r3, [r3, #0]
   17326:	b29a      	uxth	r2, r3
   17328:	68bb      	ldr	r3, [r7, #8]
   1732a:	3301      	adds	r3, #1
   1732c:	781b      	ldrb	r3, [r3, #0]
   1732e:	b29b      	uxth	r3, r3
   17330:	021b      	lsls	r3, r3, #8
   17332:	b29b      	uxth	r3, r3
   17334:	4413      	add	r3, r2
   17336:	b29a      	uxth	r2, r3
   17338:	68fb      	ldr	r3, [r7, #12]
   1733a:	80da      	strh	r2, [r3, #6]
   1733c:	68bb      	ldr	r3, [r7, #8]
   1733e:	3302      	adds	r3, #2
   17340:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->encKeyRefreshCmpl.handle;
   17342:	68fb      	ldr	r3, [r7, #12]
   17344:	88da      	ldrh	r2, [r3, #6]
   17346:	68fb      	ldr	r3, [r7, #12]
   17348:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->encKeyRefreshCmpl.status;
   1734a:	68fb      	ldr	r3, [r7, #12]
   1734c:	791a      	ldrb	r2, [r3, #4]
   1734e:	68fb      	ldr	r3, [r7, #12]
   17350:	70da      	strb	r2, [r3, #3]
}
   17352:	3714      	adds	r7, #20
   17354:	46bd      	mov	sp, r7
   17356:	f85d 7b04 	ldr.w	r7, [sp], #4
   1735a:	4770      	bx	lr

0001735c <hciEvtParseEncChange>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseEncChange(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1735c:	b480      	push	{r7}
   1735e:	b085      	sub	sp, #20
   17360:	af00      	add	r7, sp, #0
   17362:	60f8      	str	r0, [r7, #12]
   17364:	60b9      	str	r1, [r7, #8]
   17366:	4613      	mov	r3, r2
   17368:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->encChange.status, p);
   1736a:	68bb      	ldr	r3, [r7, #8]
   1736c:	1c5a      	adds	r2, r3, #1
   1736e:	60ba      	str	r2, [r7, #8]
   17370:	781a      	ldrb	r2, [r3, #0]
   17372:	68fb      	ldr	r3, [r7, #12]
   17374:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->encChange.handle, p);
   17376:	68bb      	ldr	r3, [r7, #8]
   17378:	781b      	ldrb	r3, [r3, #0]
   1737a:	b29a      	uxth	r2, r3
   1737c:	68bb      	ldr	r3, [r7, #8]
   1737e:	3301      	adds	r3, #1
   17380:	781b      	ldrb	r3, [r3, #0]
   17382:	b29b      	uxth	r3, r3
   17384:	021b      	lsls	r3, r3, #8
   17386:	b29b      	uxth	r3, r3
   17388:	4413      	add	r3, r2
   1738a:	b29a      	uxth	r2, r3
   1738c:	68fb      	ldr	r3, [r7, #12]
   1738e:	80da      	strh	r2, [r3, #6]
   17390:	68bb      	ldr	r3, [r7, #8]
   17392:	3302      	adds	r3, #2
   17394:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->encChange.enabled, p);
   17396:	68bb      	ldr	r3, [r7, #8]
   17398:	1c5a      	adds	r2, r3, #1
   1739a:	60ba      	str	r2, [r7, #8]
   1739c:	781a      	ldrb	r2, [r3, #0]
   1739e:	68fb      	ldr	r3, [r7, #12]
   173a0:	721a      	strb	r2, [r3, #8]

  pMsg->hdr.param = pMsg->encChange.handle;
   173a2:	68fb      	ldr	r3, [r7, #12]
   173a4:	88da      	ldrh	r2, [r3, #6]
   173a6:	68fb      	ldr	r3, [r7, #12]
   173a8:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->encChange.status;
   173aa:	68fb      	ldr	r3, [r7, #12]
   173ac:	791a      	ldrb	r2, [r3, #4]
   173ae:	68fb      	ldr	r3, [r7, #12]
   173b0:	70da      	strb	r2, [r3, #3]
}
   173b2:	3714      	adds	r7, #20
   173b4:	46bd      	mov	sp, r7
   173b6:	f85d 7b04 	ldr.w	r7, [sp], #4
   173ba:	4770      	bx	lr

000173bc <hciEvtParseLeLtkReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeLtkReq(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   173bc:	b580      	push	{r7, lr}
   173be:	b084      	sub	sp, #16
   173c0:	af00      	add	r7, sp, #0
   173c2:	60f8      	str	r0, [r7, #12]
   173c4:	60b9      	str	r1, [r7, #8]
   173c6:	4613      	mov	r3, r2
   173c8:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT16(pMsg->leLtkReq.handle, p);
   173ca:	68bb      	ldr	r3, [r7, #8]
   173cc:	781b      	ldrb	r3, [r3, #0]
   173ce:	b29a      	uxth	r2, r3
   173d0:	68bb      	ldr	r3, [r7, #8]
   173d2:	3301      	adds	r3, #1
   173d4:	781b      	ldrb	r3, [r3, #0]
   173d6:	b29b      	uxth	r3, r3
   173d8:	021b      	lsls	r3, r3, #8
   173da:	b29b      	uxth	r3, r3
   173dc:	4413      	add	r3, r2
   173de:	b29a      	uxth	r2, r3
   173e0:	68fb      	ldr	r3, [r7, #12]
   173e2:	809a      	strh	r2, [r3, #4]
   173e4:	68bb      	ldr	r3, [r7, #8]
   173e6:	3302      	adds	r3, #2
   173e8:	60bb      	str	r3, [r7, #8]

  memcpy(pMsg->leLtkReq.randNum, p, HCI_RAND_LEN);
   173ea:	68fb      	ldr	r3, [r7, #12]
   173ec:	3306      	adds	r3, #6
   173ee:	4618      	mov	r0, r3
   173f0:	68b9      	ldr	r1, [r7, #8]
   173f2:	2208      	movs	r2, #8
   173f4:	f7f4 fe84 	bl	c100 <memcpy>
  p += HCI_RAND_LEN;
   173f8:	68bb      	ldr	r3, [r7, #8]
   173fa:	3308      	adds	r3, #8
   173fc:	60bb      	str	r3, [r7, #8]

  BSTREAM_TO_UINT16(pMsg->leLtkReq.encDiversifier, p);
   173fe:	68bb      	ldr	r3, [r7, #8]
   17400:	781b      	ldrb	r3, [r3, #0]
   17402:	b29a      	uxth	r2, r3
   17404:	68bb      	ldr	r3, [r7, #8]
   17406:	3301      	adds	r3, #1
   17408:	781b      	ldrb	r3, [r3, #0]
   1740a:	b29b      	uxth	r3, r3
   1740c:	021b      	lsls	r3, r3, #8
   1740e:	b29b      	uxth	r3, r3
   17410:	4413      	add	r3, r2
   17412:	b29a      	uxth	r2, r3
   17414:	68fb      	ldr	r3, [r7, #12]
   17416:	81da      	strh	r2, [r3, #14]
   17418:	68bb      	ldr	r3, [r7, #8]
   1741a:	3302      	adds	r3, #2
   1741c:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->leLtkReq.handle;
   1741e:	68fb      	ldr	r3, [r7, #12]
   17420:	889a      	ldrh	r2, [r3, #4]
   17422:	68fb      	ldr	r3, [r7, #12]
   17424:	801a      	strh	r2, [r3, #0]
}
   17426:	3710      	adds	r7, #16
   17428:	46bd      	mov	sp, r7
   1742a:	bd80      	pop	{r7, pc}

0001742c <hciEvtParseVendorSpecCmdStatus>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseVendorSpecCmdStatus(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1742c:	b480      	push	{r7}
   1742e:	b085      	sub	sp, #20
   17430:	af00      	add	r7, sp, #0
   17432:	60f8      	str	r0, [r7, #12]
   17434:	60b9      	str	r1, [r7, #8]
   17436:	4613      	mov	r3, r2
   17438:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT16(pMsg->vendorSpecCmdStatus.opcode, p);
   1743a:	68bb      	ldr	r3, [r7, #8]
   1743c:	781b      	ldrb	r3, [r3, #0]
   1743e:	b29a      	uxth	r2, r3
   17440:	68bb      	ldr	r3, [r7, #8]
   17442:	3301      	adds	r3, #1
   17444:	781b      	ldrb	r3, [r3, #0]
   17446:	b29b      	uxth	r3, r3
   17448:	021b      	lsls	r3, r3, #8
   1744a:	b29b      	uxth	r3, r3
   1744c:	4413      	add	r3, r2
   1744e:	b29a      	uxth	r2, r3
   17450:	68fb      	ldr	r3, [r7, #12]
   17452:	809a      	strh	r2, [r3, #4]
   17454:	68bb      	ldr	r3, [r7, #8]
   17456:	3302      	adds	r3, #2
   17458:	60bb      	str	r3, [r7, #8]
}
   1745a:	3714      	adds	r7, #20
   1745c:	46bd      	mov	sp, r7
   1745e:	f85d 7b04 	ldr.w	r7, [sp], #4
   17462:	4770      	bx	lr

00017464 <hciEvtParseVendorSpecCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseVendorSpecCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17464:	b580      	push	{r7, lr}
   17466:	b084      	sub	sp, #16
   17468:	af00      	add	r7, sp, #0
   1746a:	60f8      	str	r0, [r7, #12]
   1746c:	60b9      	str	r1, [r7, #8]
   1746e:	4613      	mov	r3, r2
   17470:	71fb      	strb	r3, [r7, #7]
  /* roll pointer back to opcode */
  p -= 2;
   17472:	68bb      	ldr	r3, [r7, #8]
   17474:	3b02      	subs	r3, #2
   17476:	60bb      	str	r3, [r7, #8]

  BSTREAM_TO_UINT16(pMsg->vendorSpecCmdCmpl.opcode, p);
   17478:	68bb      	ldr	r3, [r7, #8]
   1747a:	781b      	ldrb	r3, [r3, #0]
   1747c:	b29a      	uxth	r2, r3
   1747e:	68bb      	ldr	r3, [r7, #8]
   17480:	3301      	adds	r3, #1
   17482:	781b      	ldrb	r3, [r3, #0]
   17484:	b29b      	uxth	r3, r3
   17486:	021b      	lsls	r3, r3, #8
   17488:	b29b      	uxth	r3, r3
   1748a:	4413      	add	r3, r2
   1748c:	b29a      	uxth	r2, r3
   1748e:	68fb      	ldr	r3, [r7, #12]
   17490:	809a      	strh	r2, [r3, #4]
   17492:	68bb      	ldr	r3, [r7, #8]
   17494:	3302      	adds	r3, #2
   17496:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->hdr.status, p);
   17498:	68bb      	ldr	r3, [r7, #8]
   1749a:	1c5a      	adds	r2, r3, #1
   1749c:	60ba      	str	r2, [r7, #8]
   1749e:	781a      	ldrb	r2, [r3, #0]
   174a0:	68fb      	ldr	r3, [r7, #12]
   174a2:	70da      	strb	r2, [r3, #3]
  memcpy(&pMsg->vendorSpecCmdCmpl.param[0], p, len - 4);
   174a4:	68fb      	ldr	r3, [r7, #12]
   174a6:	1d9a      	adds	r2, r3, #6
   174a8:	79fb      	ldrb	r3, [r7, #7]
   174aa:	3b04      	subs	r3, #4
   174ac:	4610      	mov	r0, r2
   174ae:	68b9      	ldr	r1, [r7, #8]
   174b0:	461a      	mov	r2, r3
   174b2:	f7f4 fe25 	bl	c100 <memcpy>
}
   174b6:	3710      	adds	r7, #16
   174b8:	46bd      	mov	sp, r7
   174ba:	bd80      	pop	{r7, pc}

000174bc <hciEvtParseVendorSpec>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseVendorSpec(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   174bc:	b580      	push	{r7, lr}
   174be:	b084      	sub	sp, #16
   174c0:	af00      	add	r7, sp, #0
   174c2:	60f8      	str	r0, [r7, #12]
   174c4:	60b9      	str	r1, [r7, #8]
   174c6:	4613      	mov	r3, r2
   174c8:	71fb      	strb	r3, [r7, #7]
  memcpy(pMsg->vendorSpec.param, p, len);
   174ca:	68fb      	ldr	r3, [r7, #12]
   174cc:	1d1a      	adds	r2, r3, #4
   174ce:	79fb      	ldrb	r3, [r7, #7]
   174d0:	4610      	mov	r0, r2
   174d2:	68b9      	ldr	r1, [r7, #8]
   174d4:	461a      	mov	r2, r3
   174d6:	f7f4 fe13 	bl	c100 <memcpy>
}
   174da:	3710      	adds	r7, #16
   174dc:	46bd      	mov	sp, r7
   174de:	bd80      	pop	{r7, pc}

000174e0 <hciEvtParseHwError>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseHwError(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   174e0:	b480      	push	{r7}
   174e2:	b085      	sub	sp, #20
   174e4:	af00      	add	r7, sp, #0
   174e6:	60f8      	str	r0, [r7, #12]
   174e8:	60b9      	str	r1, [r7, #8]
   174ea:	4613      	mov	r3, r2
   174ec:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->hwError.code, p);
   174ee:	68bb      	ldr	r3, [r7, #8]
   174f0:	1c5a      	adds	r2, r3, #1
   174f2:	60ba      	str	r2, [r7, #8]
   174f4:	781a      	ldrb	r2, [r3, #0]
   174f6:	68fb      	ldr	r3, [r7, #12]
   174f8:	711a      	strb	r2, [r3, #4]
}
   174fa:	3714      	adds	r7, #20
   174fc:	46bd      	mov	sp, r7
   174fe:	f85d 7b04 	ldr.w	r7, [sp], #4
   17502:	4770      	bx	lr

00017504 <hciEvtParseLeEncryptCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeEncryptCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17504:	b580      	push	{r7, lr}
   17506:	b084      	sub	sp, #16
   17508:	af00      	add	r7, sp, #0
   1750a:	60f8      	str	r0, [r7, #12]
   1750c:	60b9      	str	r1, [r7, #8]
   1750e:	4613      	mov	r3, r2
   17510:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leEncryptCmdCmpl.status, p);
   17512:	68bb      	ldr	r3, [r7, #8]
   17514:	1c5a      	adds	r2, r3, #1
   17516:	60ba      	str	r2, [r7, #8]
   17518:	781a      	ldrb	r2, [r3, #0]
   1751a:	68fb      	ldr	r3, [r7, #12]
   1751c:	711a      	strb	r2, [r3, #4]
  memcpy(pMsg->leEncryptCmdCmpl.data, p, HCI_ENCRYPT_DATA_LEN);
   1751e:	68fb      	ldr	r3, [r7, #12]
   17520:	3305      	adds	r3, #5
   17522:	4618      	mov	r0, r3
   17524:	68b9      	ldr	r1, [r7, #8]
   17526:	2210      	movs	r2, #16
   17528:	f7f4 fdea 	bl	c100 <memcpy>

  pMsg->hdr.status = pMsg->leEncryptCmdCmpl.status;
   1752c:	68fb      	ldr	r3, [r7, #12]
   1752e:	791a      	ldrb	r2, [r3, #4]
   17530:	68fb      	ldr	r3, [r7, #12]
   17532:	70da      	strb	r2, [r3, #3]
}
   17534:	3710      	adds	r7, #16
   17536:	46bd      	mov	sp, r7
   17538:	bd80      	pop	{r7, pc}
   1753a:	bf00      	nop

0001753c <hciEvtParseLeRandCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeRandCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1753c:	b580      	push	{r7, lr}
   1753e:	b084      	sub	sp, #16
   17540:	af00      	add	r7, sp, #0
   17542:	60f8      	str	r0, [r7, #12]
   17544:	60b9      	str	r1, [r7, #8]
   17546:	4613      	mov	r3, r2
   17548:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leRandCmdCmpl.status, p);
   1754a:	68bb      	ldr	r3, [r7, #8]
   1754c:	1c5a      	adds	r2, r3, #1
   1754e:	60ba      	str	r2, [r7, #8]
   17550:	781a      	ldrb	r2, [r3, #0]
   17552:	68fb      	ldr	r3, [r7, #12]
   17554:	711a      	strb	r2, [r3, #4]
  memcpy(pMsg->leRandCmdCmpl.randNum, p, HCI_RAND_LEN);
   17556:	68fb      	ldr	r3, [r7, #12]
   17558:	3305      	adds	r3, #5
   1755a:	4618      	mov	r0, r3
   1755c:	68b9      	ldr	r1, [r7, #8]
   1755e:	2208      	movs	r2, #8
   17560:	f7f4 fdce 	bl	c100 <memcpy>

  pMsg->hdr.status = pMsg->leRandCmdCmpl.status;
   17564:	68fb      	ldr	r3, [r7, #12]
   17566:	791a      	ldrb	r2, [r3, #4]
   17568:	68fb      	ldr	r3, [r7, #12]
   1756a:	70da      	strb	r2, [r3, #3]
}
   1756c:	3710      	adds	r7, #16
   1756e:	46bd      	mov	sp, r7
   17570:	bd80      	pop	{r7, pc}
   17572:	bf00      	nop

00017574 <hciEvtParseLeAddDevToResListCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeAddDevToResListCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17574:	b480      	push	{r7}
   17576:	b085      	sub	sp, #20
   17578:	af00      	add	r7, sp, #0
   1757a:	60f8      	str	r0, [r7, #12]
   1757c:	60b9      	str	r1, [r7, #8]
   1757e:	4613      	mov	r3, r2
   17580:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leAddDevToResListCmdCmpl.status, p);
   17582:	68bb      	ldr	r3, [r7, #8]
   17584:	1c5a      	adds	r2, r3, #1
   17586:	60ba      	str	r2, [r7, #8]
   17588:	781a      	ldrb	r2, [r3, #0]
   1758a:	68fb      	ldr	r3, [r7, #12]
   1758c:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leAddDevToResListCmdCmpl.status;
   1758e:	68fb      	ldr	r3, [r7, #12]
   17590:	791a      	ldrb	r2, [r3, #4]
   17592:	68fb      	ldr	r3, [r7, #12]
   17594:	70da      	strb	r2, [r3, #3]
}
   17596:	3714      	adds	r7, #20
   17598:	46bd      	mov	sp, r7
   1759a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1759e:	4770      	bx	lr

000175a0 <hciEvtParseLeRemDevFromResListCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeRemDevFromResListCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   175a0:	b480      	push	{r7}
   175a2:	b085      	sub	sp, #20
   175a4:	af00      	add	r7, sp, #0
   175a6:	60f8      	str	r0, [r7, #12]
   175a8:	60b9      	str	r1, [r7, #8]
   175aa:	4613      	mov	r3, r2
   175ac:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leRemDevFromResListCmdCmpl.status, p);
   175ae:	68bb      	ldr	r3, [r7, #8]
   175b0:	1c5a      	adds	r2, r3, #1
   175b2:	60ba      	str	r2, [r7, #8]
   175b4:	781a      	ldrb	r2, [r3, #0]
   175b6:	68fb      	ldr	r3, [r7, #12]
   175b8:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leRemDevFromResListCmdCmpl.status;
   175ba:	68fb      	ldr	r3, [r7, #12]
   175bc:	791a      	ldrb	r2, [r3, #4]
   175be:	68fb      	ldr	r3, [r7, #12]
   175c0:	70da      	strb	r2, [r3, #3]
}
   175c2:	3714      	adds	r7, #20
   175c4:	46bd      	mov	sp, r7
   175c6:	f85d 7b04 	ldr.w	r7, [sp], #4
   175ca:	4770      	bx	lr

000175cc <hciEvtParseLeClearResListCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeClearResListCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   175cc:	b480      	push	{r7}
   175ce:	b085      	sub	sp, #20
   175d0:	af00      	add	r7, sp, #0
   175d2:	60f8      	str	r0, [r7, #12]
   175d4:	60b9      	str	r1, [r7, #8]
   175d6:	4613      	mov	r3, r2
   175d8:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leClearResListCmdCmpl.status, p);
   175da:	68bb      	ldr	r3, [r7, #8]
   175dc:	1c5a      	adds	r2, r3, #1
   175de:	60ba      	str	r2, [r7, #8]
   175e0:	781a      	ldrb	r2, [r3, #0]
   175e2:	68fb      	ldr	r3, [r7, #12]
   175e4:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leClearResListCmdCmpl.status;
   175e6:	68fb      	ldr	r3, [r7, #12]
   175e8:	791a      	ldrb	r2, [r3, #4]
   175ea:	68fb      	ldr	r3, [r7, #12]
   175ec:	70da      	strb	r2, [r3, #3]
}
   175ee:	3714      	adds	r7, #20
   175f0:	46bd      	mov	sp, r7
   175f2:	f85d 7b04 	ldr.w	r7, [sp], #4
   175f6:	4770      	bx	lr

000175f8 <hciEvtParseLeReadPeerResAddrCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeReadPeerResAddrCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   175f8:	b580      	push	{r7, lr}
   175fa:	b084      	sub	sp, #16
   175fc:	af00      	add	r7, sp, #0
   175fe:	60f8      	str	r0, [r7, #12]
   17600:	60b9      	str	r1, [r7, #8]
   17602:	4613      	mov	r3, r2
   17604:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leReadPeerResAddrCmdCmpl.status, p);
   17606:	68bb      	ldr	r3, [r7, #8]
   17608:	1c5a      	adds	r2, r3, #1
   1760a:	60ba      	str	r2, [r7, #8]
   1760c:	781a      	ldrb	r2, [r3, #0]
   1760e:	68fb      	ldr	r3, [r7, #12]
   17610:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_BDA(pMsg->leReadPeerResAddrCmdCmpl.peerRpa, p);
   17612:	68fb      	ldr	r3, [r7, #12]
   17614:	3305      	adds	r3, #5
   17616:	4618      	mov	r0, r3
   17618:	68b9      	ldr	r1, [r7, #8]
   1761a:	f7fb fc17 	bl	12e4c <BdaCpy>
   1761e:	68bb      	ldr	r3, [r7, #8]
   17620:	3306      	adds	r3, #6
   17622:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leReadPeerResAddrCmdCmpl.status;
   17624:	68fb      	ldr	r3, [r7, #12]
   17626:	791a      	ldrb	r2, [r3, #4]
   17628:	68fb      	ldr	r3, [r7, #12]
   1762a:	70da      	strb	r2, [r3, #3]
}
   1762c:	3710      	adds	r7, #16
   1762e:	46bd      	mov	sp, r7
   17630:	bd80      	pop	{r7, pc}
   17632:	bf00      	nop

00017634 <hciEvtParseLeReadLocalResAddrCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeReadLocalResAddrCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17634:	b580      	push	{r7, lr}
   17636:	b084      	sub	sp, #16
   17638:	af00      	add	r7, sp, #0
   1763a:	60f8      	str	r0, [r7, #12]
   1763c:	60b9      	str	r1, [r7, #8]
   1763e:	4613      	mov	r3, r2
   17640:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leReadLocalResAddrCmdCmpl.status, p);
   17642:	68bb      	ldr	r3, [r7, #8]
   17644:	1c5a      	adds	r2, r3, #1
   17646:	60ba      	str	r2, [r7, #8]
   17648:	781a      	ldrb	r2, [r3, #0]
   1764a:	68fb      	ldr	r3, [r7, #12]
   1764c:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_BDA(pMsg->leReadLocalResAddrCmdCmpl.localRpa, p);
   1764e:	68fb      	ldr	r3, [r7, #12]
   17650:	3305      	adds	r3, #5
   17652:	4618      	mov	r0, r3
   17654:	68b9      	ldr	r1, [r7, #8]
   17656:	f7fb fbf9 	bl	12e4c <BdaCpy>
   1765a:	68bb      	ldr	r3, [r7, #8]
   1765c:	3306      	adds	r3, #6
   1765e:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leReadLocalResAddrCmdCmpl.status;
   17660:	68fb      	ldr	r3, [r7, #12]
   17662:	791a      	ldrb	r2, [r3, #4]
   17664:	68fb      	ldr	r3, [r7, #12]
   17666:	70da      	strb	r2, [r3, #3]
}
   17668:	3710      	adds	r7, #16
   1766a:	46bd      	mov	sp, r7
   1766c:	bd80      	pop	{r7, pc}
   1766e:	bf00      	nop

00017670 <hciEvtParseLeSetAddrResEnableCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeSetAddrResEnableCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17670:	b480      	push	{r7}
   17672:	b085      	sub	sp, #20
   17674:	af00      	add	r7, sp, #0
   17676:	60f8      	str	r0, [r7, #12]
   17678:	60b9      	str	r1, [r7, #8]
   1767a:	4613      	mov	r3, r2
   1767c:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leSetAddrResEnableCmdCmpl.status, p);
   1767e:	68bb      	ldr	r3, [r7, #8]
   17680:	1c5a      	adds	r2, r3, #1
   17682:	60ba      	str	r2, [r7, #8]
   17684:	781a      	ldrb	r2, [r3, #0]
   17686:	68fb      	ldr	r3, [r7, #12]
   17688:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leSetAddrResEnableCmdCmpl.status;
   1768a:	68fb      	ldr	r3, [r7, #12]
   1768c:	791a      	ldrb	r2, [r3, #4]
   1768e:	68fb      	ldr	r3, [r7, #12]
   17690:	70da      	strb	r2, [r3, #3]
}
   17692:	3714      	adds	r7, #20
   17694:	46bd      	mov	sp, r7
   17696:	f85d 7b04 	ldr.w	r7, [sp], #4
   1769a:	4770      	bx	lr

0001769c <hciEvtParseRemConnParamRepCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseRemConnParamRepCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1769c:	b480      	push	{r7}
   1769e:	b085      	sub	sp, #20
   176a0:	af00      	add	r7, sp, #0
   176a2:	60f8      	str	r0, [r7, #12]
   176a4:	60b9      	str	r1, [r7, #8]
   176a6:	4613      	mov	r3, r2
   176a8:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leRemConnParamRepCmdCmpl.status, p);
   176aa:	68bb      	ldr	r3, [r7, #8]
   176ac:	1c5a      	adds	r2, r3, #1
   176ae:	60ba      	str	r2, [r7, #8]
   176b0:	781a      	ldrb	r2, [r3, #0]
   176b2:	68fb      	ldr	r3, [r7, #12]
   176b4:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamRepCmdCmpl.handle, p);
   176b6:	68bb      	ldr	r3, [r7, #8]
   176b8:	781b      	ldrb	r3, [r3, #0]
   176ba:	b29a      	uxth	r2, r3
   176bc:	68bb      	ldr	r3, [r7, #8]
   176be:	3301      	adds	r3, #1
   176c0:	781b      	ldrb	r3, [r3, #0]
   176c2:	b29b      	uxth	r3, r3
   176c4:	021b      	lsls	r3, r3, #8
   176c6:	b29b      	uxth	r3, r3
   176c8:	4413      	add	r3, r2
   176ca:	b29a      	uxth	r2, r3
   176cc:	68fb      	ldr	r3, [r7, #12]
   176ce:	80da      	strh	r2, [r3, #6]
   176d0:	68bb      	ldr	r3, [r7, #8]
   176d2:	3302      	adds	r3, #2
   176d4:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leRemConnParamRepCmdCmpl.status;
   176d6:	68fb      	ldr	r3, [r7, #12]
   176d8:	791a      	ldrb	r2, [r3, #4]
   176da:	68fb      	ldr	r3, [r7, #12]
   176dc:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leRemConnParamRepCmdCmpl.handle;
   176de:	68fb      	ldr	r3, [r7, #12]
   176e0:	88da      	ldrh	r2, [r3, #6]
   176e2:	68fb      	ldr	r3, [r7, #12]
   176e4:	801a      	strh	r2, [r3, #0]
}
   176e6:	3714      	adds	r7, #20
   176e8:	46bd      	mov	sp, r7
   176ea:	f85d 7b04 	ldr.w	r7, [sp], #4
   176ee:	4770      	bx	lr

000176f0 <hciEvtParseRemConnParamNegRepCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseRemConnParamNegRepCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   176f0:	b480      	push	{r7}
   176f2:	b085      	sub	sp, #20
   176f4:	af00      	add	r7, sp, #0
   176f6:	60f8      	str	r0, [r7, #12]
   176f8:	60b9      	str	r1, [r7, #8]
   176fa:	4613      	mov	r3, r2
   176fc:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leRemConnParamNegRepCmdCmpl.status, p);
   176fe:	68bb      	ldr	r3, [r7, #8]
   17700:	1c5a      	adds	r2, r3, #1
   17702:	60ba      	str	r2, [r7, #8]
   17704:	781a      	ldrb	r2, [r3, #0]
   17706:	68fb      	ldr	r3, [r7, #12]
   17708:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamNegRepCmdCmpl.handle, p);
   1770a:	68bb      	ldr	r3, [r7, #8]
   1770c:	781b      	ldrb	r3, [r3, #0]
   1770e:	b29a      	uxth	r2, r3
   17710:	68bb      	ldr	r3, [r7, #8]
   17712:	3301      	adds	r3, #1
   17714:	781b      	ldrb	r3, [r3, #0]
   17716:	b29b      	uxth	r3, r3
   17718:	021b      	lsls	r3, r3, #8
   1771a:	b29b      	uxth	r3, r3
   1771c:	4413      	add	r3, r2
   1771e:	b29a      	uxth	r2, r3
   17720:	68fb      	ldr	r3, [r7, #12]
   17722:	80da      	strh	r2, [r3, #6]
   17724:	68bb      	ldr	r3, [r7, #8]
   17726:	3302      	adds	r3, #2
   17728:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leRemConnParamNegRepCmdCmpl.status;
   1772a:	68fb      	ldr	r3, [r7, #12]
   1772c:	791a      	ldrb	r2, [r3, #4]
   1772e:	68fb      	ldr	r3, [r7, #12]
   17730:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leRemConnParamNegRepCmdCmpl.handle;
   17732:	68fb      	ldr	r3, [r7, #12]
   17734:	88da      	ldrh	r2, [r3, #6]
   17736:	68fb      	ldr	r3, [r7, #12]
   17738:	801a      	strh	r2, [r3, #0]
}
   1773a:	3714      	adds	r7, #20
   1773c:	46bd      	mov	sp, r7
   1773e:	f85d 7b04 	ldr.w	r7, [sp], #4
   17742:	4770      	bx	lr

00017744 <hciEvtParseReadDefDataLenCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadDefDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17744:	b480      	push	{r7}
   17746:	b085      	sub	sp, #20
   17748:	af00      	add	r7, sp, #0
   1774a:	60f8      	str	r0, [r7, #12]
   1774c:	60b9      	str	r1, [r7, #8]
   1774e:	4613      	mov	r3, r2
   17750:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leReadDefDataLenCmdCmpl.status, p);
   17752:	68bb      	ldr	r3, [r7, #8]
   17754:	1c5a      	adds	r2, r3, #1
   17756:	60ba      	str	r2, [r7, #8]
   17758:	781a      	ldrb	r2, [r3, #0]
   1775a:	68fb      	ldr	r3, [r7, #12]
   1775c:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leReadDefDataLenCmdCmpl.suggestedMaxTxOctets, p);
   1775e:	68bb      	ldr	r3, [r7, #8]
   17760:	781b      	ldrb	r3, [r3, #0]
   17762:	b29a      	uxth	r2, r3
   17764:	68bb      	ldr	r3, [r7, #8]
   17766:	3301      	adds	r3, #1
   17768:	781b      	ldrb	r3, [r3, #0]
   1776a:	b29b      	uxth	r3, r3
   1776c:	021b      	lsls	r3, r3, #8
   1776e:	b29b      	uxth	r3, r3
   17770:	4413      	add	r3, r2
   17772:	b29a      	uxth	r2, r3
   17774:	68fb      	ldr	r3, [r7, #12]
   17776:	80da      	strh	r2, [r3, #6]
   17778:	68bb      	ldr	r3, [r7, #8]
   1777a:	3302      	adds	r3, #2
   1777c:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leReadDefDataLenCmdCmpl.suggestedMaxTxTime, p);
   1777e:	68bb      	ldr	r3, [r7, #8]
   17780:	781b      	ldrb	r3, [r3, #0]
   17782:	b29a      	uxth	r2, r3
   17784:	68bb      	ldr	r3, [r7, #8]
   17786:	3301      	adds	r3, #1
   17788:	781b      	ldrb	r3, [r3, #0]
   1778a:	b29b      	uxth	r3, r3
   1778c:	021b      	lsls	r3, r3, #8
   1778e:	b29b      	uxth	r3, r3
   17790:	4413      	add	r3, r2
   17792:	b29a      	uxth	r2, r3
   17794:	68fb      	ldr	r3, [r7, #12]
   17796:	811a      	strh	r2, [r3, #8]
   17798:	68bb      	ldr	r3, [r7, #8]
   1779a:	3302      	adds	r3, #2
   1779c:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leReadDefDataLenCmdCmpl.status;
   1779e:	68fb      	ldr	r3, [r7, #12]
   177a0:	791a      	ldrb	r2, [r3, #4]
   177a2:	68fb      	ldr	r3, [r7, #12]
   177a4:	70da      	strb	r2, [r3, #3]
}
   177a6:	3714      	adds	r7, #20
   177a8:	46bd      	mov	sp, r7
   177aa:	f85d 7b04 	ldr.w	r7, [sp], #4
   177ae:	4770      	bx	lr

000177b0 <hciEvtParseWriteDefDataLenCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseWriteDefDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   177b0:	b480      	push	{r7}
   177b2:	b085      	sub	sp, #20
   177b4:	af00      	add	r7, sp, #0
   177b6:	60f8      	str	r0, [r7, #12]
   177b8:	60b9      	str	r1, [r7, #8]
   177ba:	4613      	mov	r3, r2
   177bc:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leWriteDefDataLenCmdCmpl.status, p);
   177be:	68bb      	ldr	r3, [r7, #8]
   177c0:	1c5a      	adds	r2, r3, #1
   177c2:	60ba      	str	r2, [r7, #8]
   177c4:	781a      	ldrb	r2, [r3, #0]
   177c6:	68fb      	ldr	r3, [r7, #12]
   177c8:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leWriteDefDataLenCmdCmpl.status;
   177ca:	68fb      	ldr	r3, [r7, #12]
   177cc:	791a      	ldrb	r2, [r3, #4]
   177ce:	68fb      	ldr	r3, [r7, #12]
   177d0:	70da      	strb	r2, [r3, #3]
}
   177d2:	3714      	adds	r7, #20
   177d4:	46bd      	mov	sp, r7
   177d6:	f85d 7b04 	ldr.w	r7, [sp], #4
   177da:	4770      	bx	lr

000177dc <hciEvtParseSetDataLenCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseSetDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   177dc:	b480      	push	{r7}
   177de:	b085      	sub	sp, #20
   177e0:	af00      	add	r7, sp, #0
   177e2:	60f8      	str	r0, [r7, #12]
   177e4:	60b9      	str	r1, [r7, #8]
   177e6:	4613      	mov	r3, r2
   177e8:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leSetDataLenCmdCmpl.status, p);
   177ea:	68bb      	ldr	r3, [r7, #8]
   177ec:	1c5a      	adds	r2, r3, #1
   177ee:	60ba      	str	r2, [r7, #8]
   177f0:	781a      	ldrb	r2, [r3, #0]
   177f2:	68fb      	ldr	r3, [r7, #12]
   177f4:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leSetDataLenCmdCmpl.handle, p);
   177f6:	68bb      	ldr	r3, [r7, #8]
   177f8:	781b      	ldrb	r3, [r3, #0]
   177fa:	b29a      	uxth	r2, r3
   177fc:	68bb      	ldr	r3, [r7, #8]
   177fe:	3301      	adds	r3, #1
   17800:	781b      	ldrb	r3, [r3, #0]
   17802:	b29b      	uxth	r3, r3
   17804:	021b      	lsls	r3, r3, #8
   17806:	b29b      	uxth	r3, r3
   17808:	4413      	add	r3, r2
   1780a:	b29a      	uxth	r2, r3
   1780c:	68fb      	ldr	r3, [r7, #12]
   1780e:	80da      	strh	r2, [r3, #6]
   17810:	68bb      	ldr	r3, [r7, #8]
   17812:	3302      	adds	r3, #2
   17814:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leSetDataLenCmdCmpl.status;
   17816:	68fb      	ldr	r3, [r7, #12]
   17818:	791a      	ldrb	r2, [r3, #4]
   1781a:	68fb      	ldr	r3, [r7, #12]
   1781c:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leSetDataLenCmdCmpl.handle;
   1781e:	68fb      	ldr	r3, [r7, #12]
   17820:	88da      	ldrh	r2, [r3, #6]
   17822:	68fb      	ldr	r3, [r7, #12]
   17824:	801a      	strh	r2, [r3, #0]
}
   17826:	3714      	adds	r7, #20
   17828:	46bd      	mov	sp, r7
   1782a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1782e:	4770      	bx	lr

00017830 <hciEvtParseReadMaxDataLenCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadMaxDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17830:	b480      	push	{r7}
   17832:	b085      	sub	sp, #20
   17834:	af00      	add	r7, sp, #0
   17836:	60f8      	str	r0, [r7, #12]
   17838:	60b9      	str	r1, [r7, #8]
   1783a:	4613      	mov	r3, r2
   1783c:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leReadMaxDataLenCmdCmpl.status, p);
   1783e:	68bb      	ldr	r3, [r7, #8]
   17840:	1c5a      	adds	r2, r3, #1
   17842:	60ba      	str	r2, [r7, #8]
   17844:	781a      	ldrb	r2, [r3, #0]
   17846:	68fb      	ldr	r3, [r7, #12]
   17848:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxTxOctets, p);
   1784a:	68bb      	ldr	r3, [r7, #8]
   1784c:	781b      	ldrb	r3, [r3, #0]
   1784e:	b29a      	uxth	r2, r3
   17850:	68bb      	ldr	r3, [r7, #8]
   17852:	3301      	adds	r3, #1
   17854:	781b      	ldrb	r3, [r3, #0]
   17856:	b29b      	uxth	r3, r3
   17858:	021b      	lsls	r3, r3, #8
   1785a:	b29b      	uxth	r3, r3
   1785c:	4413      	add	r3, r2
   1785e:	b29a      	uxth	r2, r3
   17860:	68fb      	ldr	r3, [r7, #12]
   17862:	80da      	strh	r2, [r3, #6]
   17864:	68bb      	ldr	r3, [r7, #8]
   17866:	3302      	adds	r3, #2
   17868:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxTxTime, p);
   1786a:	68bb      	ldr	r3, [r7, #8]
   1786c:	781b      	ldrb	r3, [r3, #0]
   1786e:	b29a      	uxth	r2, r3
   17870:	68bb      	ldr	r3, [r7, #8]
   17872:	3301      	adds	r3, #1
   17874:	781b      	ldrb	r3, [r3, #0]
   17876:	b29b      	uxth	r3, r3
   17878:	021b      	lsls	r3, r3, #8
   1787a:	b29b      	uxth	r3, r3
   1787c:	4413      	add	r3, r2
   1787e:	b29a      	uxth	r2, r3
   17880:	68fb      	ldr	r3, [r7, #12]
   17882:	811a      	strh	r2, [r3, #8]
   17884:	68bb      	ldr	r3, [r7, #8]
   17886:	3302      	adds	r3, #2
   17888:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxRxOctets, p);
   1788a:	68bb      	ldr	r3, [r7, #8]
   1788c:	781b      	ldrb	r3, [r3, #0]
   1788e:	b29a      	uxth	r2, r3
   17890:	68bb      	ldr	r3, [r7, #8]
   17892:	3301      	adds	r3, #1
   17894:	781b      	ldrb	r3, [r3, #0]
   17896:	b29b      	uxth	r3, r3
   17898:	021b      	lsls	r3, r3, #8
   1789a:	b29b      	uxth	r3, r3
   1789c:	4413      	add	r3, r2
   1789e:	b29a      	uxth	r2, r3
   178a0:	68fb      	ldr	r3, [r7, #12]
   178a2:	815a      	strh	r2, [r3, #10]
   178a4:	68bb      	ldr	r3, [r7, #8]
   178a6:	3302      	adds	r3, #2
   178a8:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxRxTime, p);
   178aa:	68bb      	ldr	r3, [r7, #8]
   178ac:	781b      	ldrb	r3, [r3, #0]
   178ae:	b29a      	uxth	r2, r3
   178b0:	68bb      	ldr	r3, [r7, #8]
   178b2:	3301      	adds	r3, #1
   178b4:	781b      	ldrb	r3, [r3, #0]
   178b6:	b29b      	uxth	r3, r3
   178b8:	021b      	lsls	r3, r3, #8
   178ba:	b29b      	uxth	r3, r3
   178bc:	4413      	add	r3, r2
   178be:	b29a      	uxth	r2, r3
   178c0:	68fb      	ldr	r3, [r7, #12]
   178c2:	819a      	strh	r2, [r3, #12]
   178c4:	68bb      	ldr	r3, [r7, #8]
   178c6:	3302      	adds	r3, #2
   178c8:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leReadMaxDataLenCmdCmpl.status;
   178ca:	68fb      	ldr	r3, [r7, #12]
   178cc:	791a      	ldrb	r2, [r3, #4]
   178ce:	68fb      	ldr	r3, [r7, #12]
   178d0:	70da      	strb	r2, [r3, #3]
}
   178d2:	3714      	adds	r7, #20
   178d4:	46bd      	mov	sp, r7
   178d6:	f85d 7b04 	ldr.w	r7, [sp], #4
   178da:	4770      	bx	lr

000178dc <hciEvtParseRemConnParamReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseRemConnParamReq(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   178dc:	b480      	push	{r7}
   178de:	b085      	sub	sp, #20
   178e0:	af00      	add	r7, sp, #0
   178e2:	60f8      	str	r0, [r7, #12]
   178e4:	60b9      	str	r1, [r7, #8]
   178e6:	4613      	mov	r3, r2
   178e8:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.handle, p);
   178ea:	68bb      	ldr	r3, [r7, #8]
   178ec:	781b      	ldrb	r3, [r3, #0]
   178ee:	b29a      	uxth	r2, r3
   178f0:	68bb      	ldr	r3, [r7, #8]
   178f2:	3301      	adds	r3, #1
   178f4:	781b      	ldrb	r3, [r3, #0]
   178f6:	b29b      	uxth	r3, r3
   178f8:	021b      	lsls	r3, r3, #8
   178fa:	b29b      	uxth	r3, r3
   178fc:	4413      	add	r3, r2
   178fe:	b29a      	uxth	r2, r3
   17900:	68fb      	ldr	r3, [r7, #12]
   17902:	809a      	strh	r2, [r3, #4]
   17904:	68bb      	ldr	r3, [r7, #8]
   17906:	3302      	adds	r3, #2
   17908:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.intervalMin, p);
   1790a:	68bb      	ldr	r3, [r7, #8]
   1790c:	781b      	ldrb	r3, [r3, #0]
   1790e:	b29a      	uxth	r2, r3
   17910:	68bb      	ldr	r3, [r7, #8]
   17912:	3301      	adds	r3, #1
   17914:	781b      	ldrb	r3, [r3, #0]
   17916:	b29b      	uxth	r3, r3
   17918:	021b      	lsls	r3, r3, #8
   1791a:	b29b      	uxth	r3, r3
   1791c:	4413      	add	r3, r2
   1791e:	b29a      	uxth	r2, r3
   17920:	68fb      	ldr	r3, [r7, #12]
   17922:	80da      	strh	r2, [r3, #6]
   17924:	68bb      	ldr	r3, [r7, #8]
   17926:	3302      	adds	r3, #2
   17928:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.intervalMax, p);
   1792a:	68bb      	ldr	r3, [r7, #8]
   1792c:	781b      	ldrb	r3, [r3, #0]
   1792e:	b29a      	uxth	r2, r3
   17930:	68bb      	ldr	r3, [r7, #8]
   17932:	3301      	adds	r3, #1
   17934:	781b      	ldrb	r3, [r3, #0]
   17936:	b29b      	uxth	r3, r3
   17938:	021b      	lsls	r3, r3, #8
   1793a:	b29b      	uxth	r3, r3
   1793c:	4413      	add	r3, r2
   1793e:	b29a      	uxth	r2, r3
   17940:	68fb      	ldr	r3, [r7, #12]
   17942:	811a      	strh	r2, [r3, #8]
   17944:	68bb      	ldr	r3, [r7, #8]
   17946:	3302      	adds	r3, #2
   17948:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.latency, p);
   1794a:	68bb      	ldr	r3, [r7, #8]
   1794c:	781b      	ldrb	r3, [r3, #0]
   1794e:	b29a      	uxth	r2, r3
   17950:	68bb      	ldr	r3, [r7, #8]
   17952:	3301      	adds	r3, #1
   17954:	781b      	ldrb	r3, [r3, #0]
   17956:	b29b      	uxth	r3, r3
   17958:	021b      	lsls	r3, r3, #8
   1795a:	b29b      	uxth	r3, r3
   1795c:	4413      	add	r3, r2
   1795e:	b29a      	uxth	r2, r3
   17960:	68fb      	ldr	r3, [r7, #12]
   17962:	815a      	strh	r2, [r3, #10]
   17964:	68bb      	ldr	r3, [r7, #8]
   17966:	3302      	adds	r3, #2
   17968:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.timeout, p);
   1796a:	68bb      	ldr	r3, [r7, #8]
   1796c:	781b      	ldrb	r3, [r3, #0]
   1796e:	b29a      	uxth	r2, r3
   17970:	68bb      	ldr	r3, [r7, #8]
   17972:	3301      	adds	r3, #1
   17974:	781b      	ldrb	r3, [r3, #0]
   17976:	b29b      	uxth	r3, r3
   17978:	021b      	lsls	r3, r3, #8
   1797a:	b29b      	uxth	r3, r3
   1797c:	4413      	add	r3, r2
   1797e:	b29a      	uxth	r2, r3
   17980:	68fb      	ldr	r3, [r7, #12]
   17982:	819a      	strh	r2, [r3, #12]
   17984:	68bb      	ldr	r3, [r7, #8]
   17986:	3302      	adds	r3, #2
   17988:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->leRemConnParamReq.handle;
   1798a:	68fb      	ldr	r3, [r7, #12]
   1798c:	889a      	ldrh	r2, [r3, #4]
   1798e:	68fb      	ldr	r3, [r7, #12]
   17990:	801a      	strh	r2, [r3, #0]
}
   17992:	3714      	adds	r7, #20
   17994:	46bd      	mov	sp, r7
   17996:	f85d 7b04 	ldr.w	r7, [sp], #4
   1799a:	4770      	bx	lr

0001799c <hciEvtParseDataLenChange>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseDataLenChange(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1799c:	b480      	push	{r7}
   1799e:	b085      	sub	sp, #20
   179a0:	af00      	add	r7, sp, #0
   179a2:	60f8      	str	r0, [r7, #12]
   179a4:	60b9      	str	r1, [r7, #8]
   179a6:	4613      	mov	r3, r2
   179a8:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.handle, p);
   179aa:	68bb      	ldr	r3, [r7, #8]
   179ac:	781b      	ldrb	r3, [r3, #0]
   179ae:	b29a      	uxth	r2, r3
   179b0:	68bb      	ldr	r3, [r7, #8]
   179b2:	3301      	adds	r3, #1
   179b4:	781b      	ldrb	r3, [r3, #0]
   179b6:	b29b      	uxth	r3, r3
   179b8:	021b      	lsls	r3, r3, #8
   179ba:	b29b      	uxth	r3, r3
   179bc:	4413      	add	r3, r2
   179be:	b29a      	uxth	r2, r3
   179c0:	68fb      	ldr	r3, [r7, #12]
   179c2:	809a      	strh	r2, [r3, #4]
   179c4:	68bb      	ldr	r3, [r7, #8]
   179c6:	3302      	adds	r3, #2
   179c8:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxTxOctets, p);
   179ca:	68bb      	ldr	r3, [r7, #8]
   179cc:	781b      	ldrb	r3, [r3, #0]
   179ce:	b29a      	uxth	r2, r3
   179d0:	68bb      	ldr	r3, [r7, #8]
   179d2:	3301      	adds	r3, #1
   179d4:	781b      	ldrb	r3, [r3, #0]
   179d6:	b29b      	uxth	r3, r3
   179d8:	021b      	lsls	r3, r3, #8
   179da:	b29b      	uxth	r3, r3
   179dc:	4413      	add	r3, r2
   179de:	b29a      	uxth	r2, r3
   179e0:	68fb      	ldr	r3, [r7, #12]
   179e2:	80da      	strh	r2, [r3, #6]
   179e4:	68bb      	ldr	r3, [r7, #8]
   179e6:	3302      	adds	r3, #2
   179e8:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxTxTime, p);
   179ea:	68bb      	ldr	r3, [r7, #8]
   179ec:	781b      	ldrb	r3, [r3, #0]
   179ee:	b29a      	uxth	r2, r3
   179f0:	68bb      	ldr	r3, [r7, #8]
   179f2:	3301      	adds	r3, #1
   179f4:	781b      	ldrb	r3, [r3, #0]
   179f6:	b29b      	uxth	r3, r3
   179f8:	021b      	lsls	r3, r3, #8
   179fa:	b29b      	uxth	r3, r3
   179fc:	4413      	add	r3, r2
   179fe:	b29a      	uxth	r2, r3
   17a00:	68fb      	ldr	r3, [r7, #12]
   17a02:	811a      	strh	r2, [r3, #8]
   17a04:	68bb      	ldr	r3, [r7, #8]
   17a06:	3302      	adds	r3, #2
   17a08:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxRxOctets, p);
   17a0a:	68bb      	ldr	r3, [r7, #8]
   17a0c:	781b      	ldrb	r3, [r3, #0]
   17a0e:	b29a      	uxth	r2, r3
   17a10:	68bb      	ldr	r3, [r7, #8]
   17a12:	3301      	adds	r3, #1
   17a14:	781b      	ldrb	r3, [r3, #0]
   17a16:	b29b      	uxth	r3, r3
   17a18:	021b      	lsls	r3, r3, #8
   17a1a:	b29b      	uxth	r3, r3
   17a1c:	4413      	add	r3, r2
   17a1e:	b29a      	uxth	r2, r3
   17a20:	68fb      	ldr	r3, [r7, #12]
   17a22:	815a      	strh	r2, [r3, #10]
   17a24:	68bb      	ldr	r3, [r7, #8]
   17a26:	3302      	adds	r3, #2
   17a28:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxRxTime, p);
   17a2a:	68bb      	ldr	r3, [r7, #8]
   17a2c:	781b      	ldrb	r3, [r3, #0]
   17a2e:	b29a      	uxth	r2, r3
   17a30:	68bb      	ldr	r3, [r7, #8]
   17a32:	3301      	adds	r3, #1
   17a34:	781b      	ldrb	r3, [r3, #0]
   17a36:	b29b      	uxth	r3, r3
   17a38:	021b      	lsls	r3, r3, #8
   17a3a:	b29b      	uxth	r3, r3
   17a3c:	4413      	add	r3, r2
   17a3e:	b29a      	uxth	r2, r3
   17a40:	68fb      	ldr	r3, [r7, #12]
   17a42:	819a      	strh	r2, [r3, #12]
   17a44:	68bb      	ldr	r3, [r7, #8]
   17a46:	3302      	adds	r3, #2
   17a48:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->leDataLenChange.handle;
   17a4a:	68fb      	ldr	r3, [r7, #12]
   17a4c:	889a      	ldrh	r2, [r3, #4]
   17a4e:	68fb      	ldr	r3, [r7, #12]
   17a50:	801a      	strh	r2, [r3, #0]
}
   17a52:	3714      	adds	r7, #20
   17a54:	46bd      	mov	sp, r7
   17a56:	f85d 7b04 	ldr.w	r7, [sp], #4
   17a5a:	4770      	bx	lr

00017a5c <hciEvtParseReadPubKeyCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadPubKeyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17a5c:	b580      	push	{r7, lr}
   17a5e:	b084      	sub	sp, #16
   17a60:	af00      	add	r7, sp, #0
   17a62:	60f8      	str	r0, [r7, #12]
   17a64:	60b9      	str	r1, [r7, #8]
   17a66:	4613      	mov	r3, r2
   17a68:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leP256.status, p);
   17a6a:	68bb      	ldr	r3, [r7, #8]
   17a6c:	1c5a      	adds	r2, r3, #1
   17a6e:	60ba      	str	r2, [r7, #8]
   17a70:	781a      	ldrb	r2, [r3, #0]
   17a72:	68fb      	ldr	r3, [r7, #12]
   17a74:	711a      	strb	r2, [r3, #4]
  memcpy(pMsg->leP256.key, p, HCI_P256_KEY_LEN);
   17a76:	68fb      	ldr	r3, [r7, #12]
   17a78:	3305      	adds	r3, #5
   17a7a:	4618      	mov	r0, r3
   17a7c:	68b9      	ldr	r1, [r7, #8]
   17a7e:	2240      	movs	r2, #64	; 0x40
   17a80:	f7f4 fb3e 	bl	c100 <memcpy>

  pMsg->hdr.status = pMsg->leP256.status;
   17a84:	68fb      	ldr	r3, [r7, #12]
   17a86:	791a      	ldrb	r2, [r3, #4]
   17a88:	68fb      	ldr	r3, [r7, #12]
   17a8a:	70da      	strb	r2, [r3, #3]
}
   17a8c:	3710      	adds	r7, #16
   17a8e:	46bd      	mov	sp, r7
   17a90:	bd80      	pop	{r7, pc}
   17a92:	bf00      	nop

00017a94 <hciEvtParseGenDhKeyCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseGenDhKeyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17a94:	b580      	push	{r7, lr}
   17a96:	b084      	sub	sp, #16
   17a98:	af00      	add	r7, sp, #0
   17a9a:	60f8      	str	r0, [r7, #12]
   17a9c:	60b9      	str	r1, [r7, #8]
   17a9e:	4613      	mov	r3, r2
   17aa0:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leGenDHKey.status, p);
   17aa2:	68bb      	ldr	r3, [r7, #8]
   17aa4:	1c5a      	adds	r2, r3, #1
   17aa6:	60ba      	str	r2, [r7, #8]
   17aa8:	781a      	ldrb	r2, [r3, #0]
   17aaa:	68fb      	ldr	r3, [r7, #12]
   17aac:	711a      	strb	r2, [r3, #4]
  memcpy(pMsg->leGenDHKey.key, p, HCI_DH_KEY_LEN);
   17aae:	68fb      	ldr	r3, [r7, #12]
   17ab0:	3305      	adds	r3, #5
   17ab2:	4618      	mov	r0, r3
   17ab4:	68b9      	ldr	r1, [r7, #8]
   17ab6:	2220      	movs	r2, #32
   17ab8:	f7f4 fb22 	bl	c100 <memcpy>

  pMsg->hdr.status = pMsg->leGenDHKey.status;
   17abc:	68fb      	ldr	r3, [r7, #12]
   17abe:	791a      	ldrb	r2, [r3, #4]
   17ac0:	68fb      	ldr	r3, [r7, #12]
   17ac2:	70da      	strb	r2, [r3, #3]
}
   17ac4:	3710      	adds	r7, #16
   17ac6:	46bd      	mov	sp, r7
   17ac8:	bd80      	pop	{r7, pc}
   17aca:	bf00      	nop

00017acc <hciEvtParseWriteAuthTimeoutCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtParseWriteAuthTimeoutCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17acc:	b480      	push	{r7}
   17ace:	b085      	sub	sp, #20
   17ad0:	af00      	add	r7, sp, #0
   17ad2:	60f8      	str	r0, [r7, #12]
   17ad4:	60b9      	str	r1, [r7, #8]
   17ad6:	4613      	mov	r3, r2
   17ad8:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->writeAuthPayloadToCmdCmpl.status, p);
   17ada:	68bb      	ldr	r3, [r7, #8]
   17adc:	1c5a      	adds	r2, r3, #1
   17ade:	60ba      	str	r2, [r7, #8]
   17ae0:	781a      	ldrb	r2, [r3, #0]
   17ae2:	68fb      	ldr	r3, [r7, #12]
   17ae4:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->writeAuthPayloadToCmdCmpl.handle, p);
   17ae6:	68bb      	ldr	r3, [r7, #8]
   17ae8:	781b      	ldrb	r3, [r3, #0]
   17aea:	b29a      	uxth	r2, r3
   17aec:	68bb      	ldr	r3, [r7, #8]
   17aee:	3301      	adds	r3, #1
   17af0:	781b      	ldrb	r3, [r3, #0]
   17af2:	b29b      	uxth	r3, r3
   17af4:	021b      	lsls	r3, r3, #8
   17af6:	b29b      	uxth	r3, r3
   17af8:	4413      	add	r3, r2
   17afa:	b29a      	uxth	r2, r3
   17afc:	68fb      	ldr	r3, [r7, #12]
   17afe:	80da      	strh	r2, [r3, #6]
   17b00:	68bb      	ldr	r3, [r7, #8]
   17b02:	3302      	adds	r3, #2
   17b04:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->writeAuthPayloadToCmdCmpl.status;
   17b06:	68fb      	ldr	r3, [r7, #12]
   17b08:	791a      	ldrb	r2, [r3, #4]
   17b0a:	68fb      	ldr	r3, [r7, #12]
   17b0c:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->writeAuthPayloadToCmdCmpl.handle;
   17b0e:	68fb      	ldr	r3, [r7, #12]
   17b10:	88da      	ldrh	r2, [r3, #6]
   17b12:	68fb      	ldr	r3, [r7, #12]
   17b14:	801a      	strh	r2, [r3, #0]
}
   17b16:	3714      	adds	r7, #20
   17b18:	46bd      	mov	sp, r7
   17b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
   17b1e:	4770      	bx	lr

00017b20 <hciEvtParseAuthTimeoutExpiredEvt>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtParseAuthTimeoutExpiredEvt(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17b20:	b480      	push	{r7}
   17b22:	b085      	sub	sp, #20
   17b24:	af00      	add	r7, sp, #0
   17b26:	60f8      	str	r0, [r7, #12]
   17b28:	60b9      	str	r1, [r7, #8]
   17b2a:	4613      	mov	r3, r2
   17b2c:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT16(pMsg->authPayloadToExpired.handle, p);
   17b2e:	68bb      	ldr	r3, [r7, #8]
   17b30:	781b      	ldrb	r3, [r3, #0]
   17b32:	b29a      	uxth	r2, r3
   17b34:	68bb      	ldr	r3, [r7, #8]
   17b36:	3301      	adds	r3, #1
   17b38:	781b      	ldrb	r3, [r3, #0]
   17b3a:	b29b      	uxth	r3, r3
   17b3c:	021b      	lsls	r3, r3, #8
   17b3e:	b29b      	uxth	r3, r3
   17b40:	4413      	add	r3, r2
   17b42:	b29a      	uxth	r2, r3
   17b44:	68fb      	ldr	r3, [r7, #12]
   17b46:	809a      	strh	r2, [r3, #4]
   17b48:	68bb      	ldr	r3, [r7, #8]
   17b4a:	3302      	adds	r3, #2
   17b4c:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->authPayloadToExpired.handle;
   17b4e:	68fb      	ldr	r3, [r7, #12]
   17b50:	889a      	ldrh	r2, [r3, #4]
   17b52:	68fb      	ldr	r3, [r7, #12]
   17b54:	801a      	strh	r2, [r3, #0]
}
   17b56:	3714      	adds	r7, #20
   17b58:	46bd      	mov	sp, r7
   17b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
   17b5e:	4770      	bx	lr

00017b60 <hciEvtParseReadPhyCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadPhyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17b60:	b480      	push	{r7}
   17b62:	b085      	sub	sp, #20
   17b64:	af00      	add	r7, sp, #0
   17b66:	60f8      	str	r0, [r7, #12]
   17b68:	60b9      	str	r1, [r7, #8]
   17b6a:	4613      	mov	r3, r2
   17b6c:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leReadPhyCmdCmpl.status, p);
   17b6e:	68bb      	ldr	r3, [r7, #8]
   17b70:	1c5a      	adds	r2, r3, #1
   17b72:	60ba      	str	r2, [r7, #8]
   17b74:	781a      	ldrb	r2, [r3, #0]
   17b76:	68fb      	ldr	r3, [r7, #12]
   17b78:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leReadPhyCmdCmpl.handle, p);
   17b7a:	68bb      	ldr	r3, [r7, #8]
   17b7c:	781b      	ldrb	r3, [r3, #0]
   17b7e:	b29a      	uxth	r2, r3
   17b80:	68bb      	ldr	r3, [r7, #8]
   17b82:	3301      	adds	r3, #1
   17b84:	781b      	ldrb	r3, [r3, #0]
   17b86:	b29b      	uxth	r3, r3
   17b88:	021b      	lsls	r3, r3, #8
   17b8a:	b29b      	uxth	r3, r3
   17b8c:	4413      	add	r3, r2
   17b8e:	b29a      	uxth	r2, r3
   17b90:	68fb      	ldr	r3, [r7, #12]
   17b92:	80da      	strh	r2, [r3, #6]
   17b94:	68bb      	ldr	r3, [r7, #8]
   17b96:	3302      	adds	r3, #2
   17b98:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->leReadPhyCmdCmpl.txPhy, p);
   17b9a:	68bb      	ldr	r3, [r7, #8]
   17b9c:	1c5a      	adds	r2, r3, #1
   17b9e:	60ba      	str	r2, [r7, #8]
   17ba0:	781a      	ldrb	r2, [r3, #0]
   17ba2:	68fb      	ldr	r3, [r7, #12]
   17ba4:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->leReadPhyCmdCmpl.rxPhy, p);
   17ba6:	68bb      	ldr	r3, [r7, #8]
   17ba8:	1c5a      	adds	r2, r3, #1
   17baa:	60ba      	str	r2, [r7, #8]
   17bac:	781a      	ldrb	r2, [r3, #0]
   17bae:	68fb      	ldr	r3, [r7, #12]
   17bb0:	725a      	strb	r2, [r3, #9]

  pMsg->hdr.status = pMsg->leReadPhyCmdCmpl.status;
   17bb2:	68fb      	ldr	r3, [r7, #12]
   17bb4:	791a      	ldrb	r2, [r3, #4]
   17bb6:	68fb      	ldr	r3, [r7, #12]
   17bb8:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leReadPhyCmdCmpl.handle;
   17bba:	68fb      	ldr	r3, [r7, #12]
   17bbc:	88da      	ldrh	r2, [r3, #6]
   17bbe:	68fb      	ldr	r3, [r7, #12]
   17bc0:	801a      	strh	r2, [r3, #0]
}
   17bc2:	3714      	adds	r7, #20
   17bc4:	46bd      	mov	sp, r7
   17bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
   17bca:	4770      	bx	lr

00017bcc <hciEvtParseSetDefPhyCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseSetDefPhyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17bcc:	b480      	push	{r7}
   17bce:	b085      	sub	sp, #20
   17bd0:	af00      	add	r7, sp, #0
   17bd2:	60f8      	str	r0, [r7, #12]
   17bd4:	60b9      	str	r1, [r7, #8]
   17bd6:	4613      	mov	r3, r2
   17bd8:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leSetDefPhyCmdCmpl.status, p);
   17bda:	68bb      	ldr	r3, [r7, #8]
   17bdc:	1c5a      	adds	r2, r3, #1
   17bde:	60ba      	str	r2, [r7, #8]
   17be0:	781a      	ldrb	r2, [r3, #0]
   17be2:	68fb      	ldr	r3, [r7, #12]
   17be4:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leSetDefPhyCmdCmpl.status;
   17be6:	68fb      	ldr	r3, [r7, #12]
   17be8:	791a      	ldrb	r2, [r3, #4]
   17bea:	68fb      	ldr	r3, [r7, #12]
   17bec:	70da      	strb	r2, [r3, #3]
}
   17bee:	3714      	adds	r7, #20
   17bf0:	46bd      	mov	sp, r7
   17bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
   17bf6:	4770      	bx	lr

00017bf8 <hciEvtParsePhyUpdateCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParsePhyUpdateCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17bf8:	b480      	push	{r7}
   17bfa:	b085      	sub	sp, #20
   17bfc:	af00      	add	r7, sp, #0
   17bfe:	60f8      	str	r0, [r7, #12]
   17c00:	60b9      	str	r1, [r7, #8]
   17c02:	4613      	mov	r3, r2
   17c04:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->lePhyUpdate.status, p);
   17c06:	68bb      	ldr	r3, [r7, #8]
   17c08:	1c5a      	adds	r2, r3, #1
   17c0a:	60ba      	str	r2, [r7, #8]
   17c0c:	781a      	ldrb	r2, [r3, #0]
   17c0e:	68fb      	ldr	r3, [r7, #12]
   17c10:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->lePhyUpdate.handle, p);
   17c12:	68bb      	ldr	r3, [r7, #8]
   17c14:	781b      	ldrb	r3, [r3, #0]
   17c16:	b29a      	uxth	r2, r3
   17c18:	68bb      	ldr	r3, [r7, #8]
   17c1a:	3301      	adds	r3, #1
   17c1c:	781b      	ldrb	r3, [r3, #0]
   17c1e:	b29b      	uxth	r3, r3
   17c20:	021b      	lsls	r3, r3, #8
   17c22:	b29b      	uxth	r3, r3
   17c24:	4413      	add	r3, r2
   17c26:	b29a      	uxth	r2, r3
   17c28:	68fb      	ldr	r3, [r7, #12]
   17c2a:	80da      	strh	r2, [r3, #6]
   17c2c:	68bb      	ldr	r3, [r7, #8]
   17c2e:	3302      	adds	r3, #2
   17c30:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->lePhyUpdate.txPhy, p);
   17c32:	68bb      	ldr	r3, [r7, #8]
   17c34:	1c5a      	adds	r2, r3, #1
   17c36:	60ba      	str	r2, [r7, #8]
   17c38:	781a      	ldrb	r2, [r3, #0]
   17c3a:	68fb      	ldr	r3, [r7, #12]
   17c3c:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->lePhyUpdate.rxPhy, p);
   17c3e:	68bb      	ldr	r3, [r7, #8]
   17c40:	1c5a      	adds	r2, r3, #1
   17c42:	60ba      	str	r2, [r7, #8]
   17c44:	781a      	ldrb	r2, [r3, #0]
   17c46:	68fb      	ldr	r3, [r7, #12]
   17c48:	725a      	strb	r2, [r3, #9]

  pMsg->hdr.status = pMsg->lePhyUpdate.status;
   17c4a:	68fb      	ldr	r3, [r7, #12]
   17c4c:	791a      	ldrb	r2, [r3, #4]
   17c4e:	68fb      	ldr	r3, [r7, #12]
   17c50:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->lePhyUpdate.handle;
   17c52:	68fb      	ldr	r3, [r7, #12]
   17c54:	88da      	ldrh	r2, [r3, #6]
   17c56:	68fb      	ldr	r3, [r7, #12]
   17c58:	801a      	strh	r2, [r3, #0]
}
   17c5a:	3714      	adds	r7, #20
   17c5c:	46bd      	mov	sp, r7
   17c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
   17c62:	4770      	bx	lr

00017c64 <hciEvtProcessLeAdvReport>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtProcessLeAdvReport(uint8_t *p, uint8_t len)
{
   17c64:	b580      	push	{r7, lr}
   17c66:	b084      	sub	sp, #16
   17c68:	af00      	add	r7, sp, #0
   17c6a:	6078      	str	r0, [r7, #4]
   17c6c:	460b      	mov	r3, r1
   17c6e:	70fb      	strb	r3, [r7, #3]
  hciLeAdvReportEvt_t *pMsg;
  uint8_t             i;

  /* get number of reports */
  BSTREAM_TO_UINT8(i, p);
   17c70:	687b      	ldr	r3, [r7, #4]
   17c72:	1c5a      	adds	r2, r3, #1
   17c74:	607a      	str	r2, [r7, #4]
   17c76:	781b      	ldrb	r3, [r3, #0]
   17c78:	73fb      	strb	r3, [r7, #15]

  HCI_TRACE_INFO1("HCI Adv report, num reports: %d", i);

  /* sanity check num reports */
  if (i > HCI_MAX_REPORTS)
   17c7a:	7bfb      	ldrb	r3, [r7, #15]
   17c7c:	2b0f      	cmp	r3, #15
   17c7e:	d900      	bls.n	17c82 <hciEvtProcessLeAdvReport+0x1e>
  {
    return;
   17c80:	e061      	b.n	17d46 <hciEvtProcessLeAdvReport+0xe2>
  }

  /* allocate temp buffer that can hold max length adv/scan rsp data */
  if ((pMsg = WsfBufAlloc(sizeof(hciLeAdvReportEvt_t) + HCI_ADV_DATA_LEN)) != NULL)
   17c82:	203b      	movs	r0, #59	; 0x3b
   17c84:	f001 f9ca 	bl	1901c <WsfBufAlloc>
   17c88:	60b8      	str	r0, [r7, #8]
   17c8a:	68bb      	ldr	r3, [r7, #8]
   17c8c:	2b00      	cmp	r3, #0
   17c8e:	d05a      	beq.n	17d46 <hciEvtProcessLeAdvReport+0xe2>
  {
    /* parse each report and execute callback */
    while (i-- > 0)
   17c90:	e051      	b.n	17d36 <hciEvtProcessLeAdvReport+0xd2>
    {
      BSTREAM_TO_UINT8(pMsg->eventType, p);
   17c92:	687b      	ldr	r3, [r7, #4]
   17c94:	1c5a      	adds	r2, r3, #1
   17c96:	607a      	str	r2, [r7, #4]
   17c98:	781a      	ldrb	r2, [r3, #0]
   17c9a:	68bb      	ldr	r3, [r7, #8]
   17c9c:	729a      	strb	r2, [r3, #10]
      BSTREAM_TO_UINT8(pMsg->addrType, p);
   17c9e:	687b      	ldr	r3, [r7, #4]
   17ca0:	1c5a      	adds	r2, r3, #1
   17ca2:	607a      	str	r2, [r7, #4]
   17ca4:	781a      	ldrb	r2, [r3, #0]
   17ca6:	68bb      	ldr	r3, [r7, #8]
   17ca8:	72da      	strb	r2, [r3, #11]
      BSTREAM_TO_BDA(pMsg->addr, p);
   17caa:	68bb      	ldr	r3, [r7, #8]
   17cac:	330c      	adds	r3, #12
   17cae:	4618      	mov	r0, r3
   17cb0:	6879      	ldr	r1, [r7, #4]
   17cb2:	f7fb f8cb 	bl	12e4c <BdaCpy>
   17cb6:	687b      	ldr	r3, [r7, #4]
   17cb8:	3306      	adds	r3, #6
   17cba:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->len, p);
   17cbc:	687b      	ldr	r3, [r7, #4]
   17cbe:	1c5a      	adds	r2, r3, #1
   17cc0:	607a      	str	r2, [r7, #4]
   17cc2:	781a      	ldrb	r2, [r3, #0]
   17cc4:	68bb      	ldr	r3, [r7, #8]
   17cc6:	721a      	strb	r2, [r3, #8]

      HCI_TRACE_INFO1("HCI Adv report, data len: %d", pMsg->len);

      /* sanity check on report length; quit if invalid */
      if (pMsg->len > HCI_ADV_DATA_LEN)
   17cc8:	68bb      	ldr	r3, [r7, #8]
   17cca:	7a1b      	ldrb	r3, [r3, #8]
   17ccc:	2b1f      	cmp	r3, #31
   17cce:	d900      	bls.n	17cd2 <hciEvtProcessLeAdvReport+0x6e>
      {
        HCI_TRACE_WARN0("Invalid adv report data len");
        break;
   17cd0:	e036      	b.n	17d40 <hciEvtProcessLeAdvReport+0xdc>
      }

      /* Copy data to space after end of report struct */
      pMsg->pData = (uint8_t *) (pMsg + 1);
   17cd2:	68bb      	ldr	r3, [r7, #8]
   17cd4:	f103 021c 	add.w	r2, r3, #28
   17cd8:	68bb      	ldr	r3, [r7, #8]
   17cda:	605a      	str	r2, [r3, #4]
      memcpy(pMsg->pData, p, pMsg->len);
   17cdc:	68bb      	ldr	r3, [r7, #8]
   17cde:	685a      	ldr	r2, [r3, #4]
   17ce0:	68bb      	ldr	r3, [r7, #8]
   17ce2:	7a1b      	ldrb	r3, [r3, #8]
   17ce4:	4610      	mov	r0, r2
   17ce6:	6879      	ldr	r1, [r7, #4]
   17ce8:	461a      	mov	r2, r3
   17cea:	f7f4 fa09 	bl	c100 <memcpy>
      p += pMsg->len;
   17cee:	68bb      	ldr	r3, [r7, #8]
   17cf0:	7a1b      	ldrb	r3, [r3, #8]
   17cf2:	461a      	mov	r2, r3
   17cf4:	687b      	ldr	r3, [r7, #4]
   17cf6:	4413      	add	r3, r2
   17cf8:	607b      	str	r3, [r7, #4]

      BSTREAM_TO_UINT8(pMsg->rssi, p);
   17cfa:	687b      	ldr	r3, [r7, #4]
   17cfc:	1c5a      	adds	r2, r3, #1
   17cfe:	607a      	str	r2, [r7, #4]
   17d00:	781b      	ldrb	r3, [r3, #0]
   17d02:	b2da      	uxtb	r2, r3
   17d04:	68bb      	ldr	r3, [r7, #8]
   17d06:	725a      	strb	r2, [r3, #9]

      /* zero out unused fields */
      pMsg->directAddrType = 0;
   17d08:	68bb      	ldr	r3, [r7, #8]
   17d0a:	2200      	movs	r2, #0
   17d0c:	749a      	strb	r2, [r3, #18]
      memset(pMsg->directAddr, 0, BDA_ADDR_LEN);
   17d0e:	68bb      	ldr	r3, [r7, #8]
   17d10:	3313      	adds	r3, #19
   17d12:	4618      	mov	r0, r3
   17d14:	2100      	movs	r1, #0
   17d16:	2206      	movs	r2, #6
   17d18:	f008 fb68 	bl	203ec <memset>

      /* initialize message header */
      pMsg->hdr.param = 0;
   17d1c:	68bb      	ldr	r3, [r7, #8]
   17d1e:	2200      	movs	r2, #0
   17d20:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = HCI_LE_ADV_REPORT_CBACK_EVT;
   17d22:	68bb      	ldr	r3, [r7, #8]
   17d24:	2206      	movs	r2, #6
   17d26:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
   17d28:	68bb      	ldr	r3, [r7, #8]
   17d2a:	2200      	movs	r2, #0
   17d2c:	70da      	strb	r2, [r3, #3]

      /* execute callback */
      (*hciCb.evtCback)((hciEvt_t *) pMsg);
   17d2e:	4b07      	ldr	r3, [pc, #28]	; (17d4c <hciEvtProcessLeAdvReport+0xe8>)
   17d30:	689b      	ldr	r3, [r3, #8]
   17d32:	68b8      	ldr	r0, [r7, #8]
   17d34:	4798      	blx	r3

  /* allocate temp buffer that can hold max length adv/scan rsp data */
  if ((pMsg = WsfBufAlloc(sizeof(hciLeAdvReportEvt_t) + HCI_ADV_DATA_LEN)) != NULL)
  {
    /* parse each report and execute callback */
    while (i-- > 0)
   17d36:	7bfb      	ldrb	r3, [r7, #15]
   17d38:	1e5a      	subs	r2, r3, #1
   17d3a:	73fa      	strb	r2, [r7, #15]
   17d3c:	2b00      	cmp	r3, #0
   17d3e:	d1a8      	bne.n	17c92 <hciEvtProcessLeAdvReport+0x2e>
      /* execute callback */
      (*hciCb.evtCback)((hciEvt_t *) pMsg);
    }

    /* free buffer */
    WsfBufFree(pMsg);
   17d40:	68b8      	ldr	r0, [r7, #8]
   17d42:	f001 f9ab 	bl	1909c <WsfBufFree>
  }
}
   17d46:	3710      	adds	r7, #16
   17d48:	46bd      	mov	sp, r7
   17d4a:	bd80      	pop	{r7, pc}
   17d4c:	1000916c 	.word	0x1000916c

00017d50 <hciEvtProcessLeExtAdvReport>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtProcessLeExtAdvReport(uint8_t *p, uint8_t len)
{
   17d50:	b580      	push	{r7, lr}
   17d52:	b086      	sub	sp, #24
   17d54:	af00      	add	r7, sp, #0
   17d56:	6078      	str	r0, [r7, #4]
   17d58:	460b      	mov	r3, r1
   17d5a:	70fb      	strb	r3, [r7, #3]
  uint8_t                *ptr;
  uint8_t                maxLen;
  uint8_t                dataLen;

  /* get number of reports without advancing pointer */
  i = *p;
   17d5c:	687b      	ldr	r3, [r7, #4]
   17d5e:	781b      	ldrb	r3, [r3, #0]
   17d60:	75fb      	strb	r3, [r7, #23]

  HCI_TRACE_INFO1("HCI Ext Adv report, num reports: %d", i);

  /* sanity check num reports */
  if (i > HCI_MAX_REPORTS)
   17d62:	7dfb      	ldrb	r3, [r7, #23]
   17d64:	2b0f      	cmp	r3, #15
   17d66:	d900      	bls.n	17d6a <hciEvtProcessLeExtAdvReport+0x1a>
  {
    return;
   17d68:	e0c2      	b.n	17ef0 <hciEvtProcessLeExtAdvReport+0x1a0>
  }

  ptr = p + 1;
   17d6a:	687b      	ldr	r3, [r7, #4]
   17d6c:	3301      	adds	r3, #1
   17d6e:	613b      	str	r3, [r7, #16]
  maxLen = 0;
   17d70:	2300      	movs	r3, #0
   17d72:	73fb      	strb	r3, [r7, #15]

  /* find out max length ext adv/scan rsp data */
  while (i-- > 0)
   17d74:	e011      	b.n	17d9a <hciEvtProcessLeExtAdvReport+0x4a>
  {
    ptr += HCI_EXT_ADV_RPT_DATA_LEN_OFFSET;
   17d76:	693b      	ldr	r3, [r7, #16]
   17d78:	3317      	adds	r3, #23
   17d7a:	613b      	str	r3, [r7, #16]
    BSTREAM_TO_UINT8(dataLen, ptr);
   17d7c:	693b      	ldr	r3, [r7, #16]
   17d7e:	1c5a      	adds	r2, r3, #1
   17d80:	613a      	str	r2, [r7, #16]
   17d82:	781b      	ldrb	r3, [r3, #0]
   17d84:	73bb      	strb	r3, [r7, #14]
    ptr += dataLen;
   17d86:	7bbb      	ldrb	r3, [r7, #14]
   17d88:	693a      	ldr	r2, [r7, #16]
   17d8a:	4413      	add	r3, r2
   17d8c:	613b      	str	r3, [r7, #16]

    /* if len greater than max len seen so far */
    if (dataLen > maxLen)
   17d8e:	7bba      	ldrb	r2, [r7, #14]
   17d90:	7bfb      	ldrb	r3, [r7, #15]
   17d92:	429a      	cmp	r2, r3
   17d94:	d901      	bls.n	17d9a <hciEvtProcessLeExtAdvReport+0x4a>
    {
      /* update max len */
      maxLen = dataLen;
   17d96:	7bbb      	ldrb	r3, [r7, #14]
   17d98:	73fb      	strb	r3, [r7, #15]

  ptr = p + 1;
  maxLen = 0;

  /* find out max length ext adv/scan rsp data */
  while (i-- > 0)
   17d9a:	7dfb      	ldrb	r3, [r7, #23]
   17d9c:	1e5a      	subs	r2, r3, #1
   17d9e:	75fa      	strb	r2, [r7, #23]
   17da0:	2b00      	cmp	r3, #0
   17da2:	d1e8      	bne.n	17d76 <hciEvtProcessLeExtAdvReport+0x26>
      maxLen = dataLen;
    }
  }

  /* allocate temp buffer that can hold max length ext adv/scan rsp data */
  if ((pMsg = WsfBufAlloc(sizeof(hciLeExtAdvReportEvt_t) + maxLen)) != NULL)
   17da4:	7bfb      	ldrb	r3, [r7, #15]
   17da6:	b29b      	uxth	r3, r3
   17da8:	3320      	adds	r3, #32
   17daa:	b29b      	uxth	r3, r3
   17dac:	4618      	mov	r0, r3
   17dae:	f001 f935 	bl	1901c <WsfBufAlloc>
   17db2:	60b8      	str	r0, [r7, #8]
   17db4:	68bb      	ldr	r3, [r7, #8]
   17db6:	2b00      	cmp	r3, #0
   17db8:	f000 809a 	beq.w	17ef0 <hciEvtProcessLeExtAdvReport+0x1a0>
  {
    /* get number of reports */
    BSTREAM_TO_UINT8(i, p);
   17dbc:	687b      	ldr	r3, [r7, #4]
   17dbe:	1c5a      	adds	r2, r3, #1
   17dc0:	607a      	str	r2, [r7, #4]
   17dc2:	781b      	ldrb	r3, [r3, #0]
   17dc4:	75fb      	strb	r3, [r7, #23]

    /* parse each report and execute callback */
    while (i-- > 0)
   17dc6:	e08a      	b.n	17ede <hciEvtProcessLeExtAdvReport+0x18e>
    {
      BSTREAM_TO_UINT16(pMsg->eventType, p);
   17dc8:	687b      	ldr	r3, [r7, #4]
   17dca:	781b      	ldrb	r3, [r3, #0]
   17dcc:	b29a      	uxth	r2, r3
   17dce:	687b      	ldr	r3, [r7, #4]
   17dd0:	3301      	adds	r3, #1
   17dd2:	781b      	ldrb	r3, [r3, #0]
   17dd4:	b29b      	uxth	r3, r3
   17dd6:	021b      	lsls	r3, r3, #8
   17dd8:	b29b      	uxth	r3, r3
   17dda:	4413      	add	r3, r2
   17ddc:	b29a      	uxth	r2, r3
   17dde:	68bb      	ldr	r3, [r7, #8]
   17de0:	809a      	strh	r2, [r3, #4]
   17de2:	687b      	ldr	r3, [r7, #4]
   17de4:	3302      	adds	r3, #2
   17de6:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->addrType, p);
   17de8:	687b      	ldr	r3, [r7, #4]
   17dea:	1c5a      	adds	r2, r3, #1
   17dec:	607a      	str	r2, [r7, #4]
   17dee:	781a      	ldrb	r2, [r3, #0]
   17df0:	68bb      	ldr	r3, [r7, #8]
   17df2:	719a      	strb	r2, [r3, #6]
      BSTREAM_TO_BDA(pMsg->addr, p);
   17df4:	68bb      	ldr	r3, [r7, #8]
   17df6:	3307      	adds	r3, #7
   17df8:	4618      	mov	r0, r3
   17dfa:	6879      	ldr	r1, [r7, #4]
   17dfc:	f7fb f826 	bl	12e4c <BdaCpy>
   17e00:	687b      	ldr	r3, [r7, #4]
   17e02:	3306      	adds	r3, #6
   17e04:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->priPhy, p);
   17e06:	687b      	ldr	r3, [r7, #4]
   17e08:	1c5a      	adds	r2, r3, #1
   17e0a:	607a      	str	r2, [r7, #4]
   17e0c:	781a      	ldrb	r2, [r3, #0]
   17e0e:	68bb      	ldr	r3, [r7, #8]
   17e10:	735a      	strb	r2, [r3, #13]
      BSTREAM_TO_UINT8(pMsg->secPhy, p);
   17e12:	687b      	ldr	r3, [r7, #4]
   17e14:	1c5a      	adds	r2, r3, #1
   17e16:	607a      	str	r2, [r7, #4]
   17e18:	781a      	ldrb	r2, [r3, #0]
   17e1a:	68bb      	ldr	r3, [r7, #8]
   17e1c:	739a      	strb	r2, [r3, #14]
      BSTREAM_TO_UINT8(pMsg->advSid, p);
   17e1e:	687b      	ldr	r3, [r7, #4]
   17e20:	1c5a      	adds	r2, r3, #1
   17e22:	607a      	str	r2, [r7, #4]
   17e24:	781a      	ldrb	r2, [r3, #0]
   17e26:	68bb      	ldr	r3, [r7, #8]
   17e28:	73da      	strb	r2, [r3, #15]
      BSTREAM_TO_INT8(pMsg->txPower, p);
   17e2a:	687b      	ldr	r3, [r7, #4]
   17e2c:	1c5a      	adds	r2, r3, #1
   17e2e:	607a      	str	r2, [r7, #4]
   17e30:	781b      	ldrb	r3, [r3, #0]
   17e32:	b2da      	uxtb	r2, r3
   17e34:	68bb      	ldr	r3, [r7, #8]
   17e36:	741a      	strb	r2, [r3, #16]
      BSTREAM_TO_INT8(pMsg->rssi, p);
   17e38:	687b      	ldr	r3, [r7, #4]
   17e3a:	1c5a      	adds	r2, r3, #1
   17e3c:	607a      	str	r2, [r7, #4]
   17e3e:	781b      	ldrb	r3, [r3, #0]
   17e40:	b2da      	uxtb	r2, r3
   17e42:	68bb      	ldr	r3, [r7, #8]
   17e44:	745a      	strb	r2, [r3, #17]
      BSTREAM_TO_UINT16(pMsg->perAdvInter, p);
   17e46:	687b      	ldr	r3, [r7, #4]
   17e48:	781b      	ldrb	r3, [r3, #0]
   17e4a:	b29a      	uxth	r2, r3
   17e4c:	687b      	ldr	r3, [r7, #4]
   17e4e:	3301      	adds	r3, #1
   17e50:	781b      	ldrb	r3, [r3, #0]
   17e52:	b29b      	uxth	r3, r3
   17e54:	021b      	lsls	r3, r3, #8
   17e56:	b29b      	uxth	r3, r3
   17e58:	4413      	add	r3, r2
   17e5a:	b29b      	uxth	r3, r3
   17e5c:	b29a      	uxth	r2, r3
   17e5e:	68bb      	ldr	r3, [r7, #8]
   17e60:	825a      	strh	r2, [r3, #18]
   17e62:	687b      	ldr	r3, [r7, #4]
   17e64:	3302      	adds	r3, #2
   17e66:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->directAddrType, p);
   17e68:	687b      	ldr	r3, [r7, #4]
   17e6a:	1c5a      	adds	r2, r3, #1
   17e6c:	607a      	str	r2, [r7, #4]
   17e6e:	781a      	ldrb	r2, [r3, #0]
   17e70:	68bb      	ldr	r3, [r7, #8]
   17e72:	751a      	strb	r2, [r3, #20]
      BSTREAM_TO_BDA(pMsg->directAddr, p);
   17e74:	68bb      	ldr	r3, [r7, #8]
   17e76:	3315      	adds	r3, #21
   17e78:	4618      	mov	r0, r3
   17e7a:	6879      	ldr	r1, [r7, #4]
   17e7c:	f7fa ffe6 	bl	12e4c <BdaCpy>
   17e80:	687b      	ldr	r3, [r7, #4]
   17e82:	3306      	adds	r3, #6
   17e84:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->len, p);
   17e86:	687b      	ldr	r3, [r7, #4]
   17e88:	1c5a      	adds	r2, r3, #1
   17e8a:	607a      	str	r2, [r7, #4]
   17e8c:	781a      	ldrb	r2, [r3, #0]
   17e8e:	68bb      	ldr	r3, [r7, #8]
   17e90:	76da      	strb	r2, [r3, #27]

      HCI_TRACE_INFO1("HCI Ext Adv report, data len: %d", pMsg->len);

      /* sanity check on report length; quit if invalid */
      if (pMsg->len > HCI_EXT_ADV_RPT_DATA_LEN)
   17e92:	68bb      	ldr	r3, [r7, #8]
   17e94:	7edb      	ldrb	r3, [r3, #27]
   17e96:	2be5      	cmp	r3, #229	; 0xe5
   17e98:	d900      	bls.n	17e9c <hciEvtProcessLeExtAdvReport+0x14c>
      {
        HCI_TRACE_WARN0("Invalid ext adv report data len");
        break;
   17e9a:	e026      	b.n	17eea <hciEvtProcessLeExtAdvReport+0x19a>
      }

      /* Copy data to space after end of report struct */
      pMsg->pData = (uint8_t *)(pMsg + 1);
   17e9c:	68bb      	ldr	r3, [r7, #8]
   17e9e:	f103 0220 	add.w	r2, r3, #32
   17ea2:	68bb      	ldr	r3, [r7, #8]
   17ea4:	61da      	str	r2, [r3, #28]
      memcpy(pMsg->pData, p, pMsg->len);
   17ea6:	68bb      	ldr	r3, [r7, #8]
   17ea8:	69da      	ldr	r2, [r3, #28]
   17eaa:	68bb      	ldr	r3, [r7, #8]
   17eac:	7edb      	ldrb	r3, [r3, #27]
   17eae:	4610      	mov	r0, r2
   17eb0:	6879      	ldr	r1, [r7, #4]
   17eb2:	461a      	mov	r2, r3
   17eb4:	f7f4 f924 	bl	c100 <memcpy>
      p += pMsg->len;
   17eb8:	68bb      	ldr	r3, [r7, #8]
   17eba:	7edb      	ldrb	r3, [r3, #27]
   17ebc:	461a      	mov	r2, r3
   17ebe:	687b      	ldr	r3, [r7, #4]
   17ec0:	4413      	add	r3, r2
   17ec2:	607b      	str	r3, [r7, #4]

      /* initialize message header */
      pMsg->hdr.param = 0;
   17ec4:	68bb      	ldr	r3, [r7, #8]
   17ec6:	2200      	movs	r2, #0
   17ec8:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = HCI_LE_EXT_ADV_REPORT_CBACK_EVT;
   17eca:	68bb      	ldr	r3, [r7, #8]
   17ecc:	222c      	movs	r2, #44	; 0x2c
   17ece:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
   17ed0:	68bb      	ldr	r3, [r7, #8]
   17ed2:	2200      	movs	r2, #0
   17ed4:	70da      	strb	r2, [r3, #3]

      /* execute callback */
      (*hciCb.evtCback)((hciEvt_t *)pMsg);
   17ed6:	4b08      	ldr	r3, [pc, #32]	; (17ef8 <hciEvtProcessLeExtAdvReport+0x1a8>)
   17ed8:	689b      	ldr	r3, [r3, #8]
   17eda:	68b8      	ldr	r0, [r7, #8]
   17edc:	4798      	blx	r3
  {
    /* get number of reports */
    BSTREAM_TO_UINT8(i, p);

    /* parse each report and execute callback */
    while (i-- > 0)
   17ede:	7dfb      	ldrb	r3, [r7, #23]
   17ee0:	1e5a      	subs	r2, r3, #1
   17ee2:	75fa      	strb	r2, [r7, #23]
   17ee4:	2b00      	cmp	r3, #0
   17ee6:	f47f af6f 	bne.w	17dc8 <hciEvtProcessLeExtAdvReport+0x78>
      /* execute callback */
      (*hciCb.evtCback)((hciEvt_t *)pMsg);
    }

    /* free buffer */
    WsfBufFree(pMsg);
   17eea:	68b8      	ldr	r0, [r7, #8]
   17eec:	f001 f8d6 	bl	1909c <WsfBufFree>
  }
}
   17ef0:	3718      	adds	r7, #24
   17ef2:	46bd      	mov	sp, r7
   17ef4:	bd80      	pop	{r7, pc}
   17ef6:	bf00      	nop
   17ef8:	1000916c 	.word	0x1000916c

00017efc <hciEvtParseLeScanTimeout>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeScanTimeout(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17efc:	b480      	push	{r7}
   17efe:	b085      	sub	sp, #20
   17f00:	af00      	add	r7, sp, #0
   17f02:	60f8      	str	r0, [r7, #12]
   17f04:	60b9      	str	r1, [r7, #8]
   17f06:	4613      	mov	r3, r2
   17f08:	71fb      	strb	r3, [r7, #7]
  /* empty */
}
   17f0a:	3714      	adds	r7, #20
   17f0c:	46bd      	mov	sp, r7
   17f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
   17f12:	4770      	bx	lr

00017f14 <hciEvtParseLeAdvSetTerm>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeAdvSetTerm(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17f14:	b480      	push	{r7}
   17f16:	b085      	sub	sp, #20
   17f18:	af00      	add	r7, sp, #0
   17f1a:	60f8      	str	r0, [r7, #12]
   17f1c:	60b9      	str	r1, [r7, #8]
   17f1e:	4613      	mov	r3, r2
   17f20:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leAdvSetTerm.status, p);
   17f22:	68bb      	ldr	r3, [r7, #8]
   17f24:	1c5a      	adds	r2, r3, #1
   17f26:	60ba      	str	r2, [r7, #8]
   17f28:	781a      	ldrb	r2, [r3, #0]
   17f2a:	68fb      	ldr	r3, [r7, #12]
   17f2c:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT8(pMsg->leAdvSetTerm.advHandle, p);
   17f2e:	68bb      	ldr	r3, [r7, #8]
   17f30:	1c5a      	adds	r2, r3, #1
   17f32:	60ba      	str	r2, [r7, #8]
   17f34:	781a      	ldrb	r2, [r3, #0]
   17f36:	68fb      	ldr	r3, [r7, #12]
   17f38:	715a      	strb	r2, [r3, #5]
  BSTREAM_TO_UINT16(pMsg->leAdvSetTerm.handle, p);
   17f3a:	68bb      	ldr	r3, [r7, #8]
   17f3c:	781b      	ldrb	r3, [r3, #0]
   17f3e:	b29a      	uxth	r2, r3
   17f40:	68bb      	ldr	r3, [r7, #8]
   17f42:	3301      	adds	r3, #1
   17f44:	781b      	ldrb	r3, [r3, #0]
   17f46:	b29b      	uxth	r3, r3
   17f48:	021b      	lsls	r3, r3, #8
   17f4a:	b29b      	uxth	r3, r3
   17f4c:	4413      	add	r3, r2
   17f4e:	b29a      	uxth	r2, r3
   17f50:	68fb      	ldr	r3, [r7, #12]
   17f52:	80da      	strh	r2, [r3, #6]
   17f54:	68bb      	ldr	r3, [r7, #8]
   17f56:	3302      	adds	r3, #2
   17f58:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->leAdvSetTerm.numComplEvts, p);
   17f5a:	68bb      	ldr	r3, [r7, #8]
   17f5c:	1c5a      	adds	r2, r3, #1
   17f5e:	60ba      	str	r2, [r7, #8]
   17f60:	781a      	ldrb	r2, [r3, #0]
   17f62:	68fb      	ldr	r3, [r7, #12]
   17f64:	721a      	strb	r2, [r3, #8]

  pMsg->hdr.status = pMsg->leAdvSetTerm.status;
   17f66:	68fb      	ldr	r3, [r7, #12]
   17f68:	791a      	ldrb	r2, [r3, #4]
   17f6a:	68fb      	ldr	r3, [r7, #12]
   17f6c:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leAdvSetTerm.handle;
   17f6e:	68fb      	ldr	r3, [r7, #12]
   17f70:	88da      	ldrh	r2, [r3, #6]
   17f72:	68fb      	ldr	r3, [r7, #12]
   17f74:	801a      	strh	r2, [r3, #0]
}
   17f76:	3714      	adds	r7, #20
   17f78:	46bd      	mov	sp, r7
   17f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
   17f7e:	4770      	bx	lr

00017f80 <hciEvtParseLeScanReqRcvd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeScanReqRcvd(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17f80:	b580      	push	{r7, lr}
   17f82:	b084      	sub	sp, #16
   17f84:	af00      	add	r7, sp, #0
   17f86:	60f8      	str	r0, [r7, #12]
   17f88:	60b9      	str	r1, [r7, #8]
   17f8a:	4613      	mov	r3, r2
   17f8c:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leScanReqRcvd.advHandle, p);
   17f8e:	68bb      	ldr	r3, [r7, #8]
   17f90:	1c5a      	adds	r2, r3, #1
   17f92:	60ba      	str	r2, [r7, #8]
   17f94:	781a      	ldrb	r2, [r3, #0]
   17f96:	68fb      	ldr	r3, [r7, #12]
   17f98:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT8(pMsg->leScanReqRcvd.scanAddrType, p);
   17f9a:	68bb      	ldr	r3, [r7, #8]
   17f9c:	1c5a      	adds	r2, r3, #1
   17f9e:	60ba      	str	r2, [r7, #8]
   17fa0:	781a      	ldrb	r2, [r3, #0]
   17fa2:	68fb      	ldr	r3, [r7, #12]
   17fa4:	715a      	strb	r2, [r3, #5]
  BSTREAM_TO_BDA(pMsg->leScanReqRcvd.scanAddr, p);
   17fa6:	68fb      	ldr	r3, [r7, #12]
   17fa8:	3306      	adds	r3, #6
   17faa:	4618      	mov	r0, r3
   17fac:	68b9      	ldr	r1, [r7, #8]
   17fae:	f7fa ff4d 	bl	12e4c <BdaCpy>
   17fb2:	68bb      	ldr	r3, [r7, #8]
   17fb4:	3306      	adds	r3, #6
   17fb6:	60bb      	str	r3, [r7, #8]
}
   17fb8:	3710      	adds	r7, #16
   17fba:	46bd      	mov	sp, r7
   17fbc:	bd80      	pop	{r7, pc}
   17fbe:	bf00      	nop

00017fc0 <hciEvtParseLePerAdvSyncEst>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLePerAdvSyncEst(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17fc0:	b580      	push	{r7, lr}
   17fc2:	b084      	sub	sp, #16
   17fc4:	af00      	add	r7, sp, #0
   17fc6:	60f8      	str	r0, [r7, #12]
   17fc8:	60b9      	str	r1, [r7, #8]
   17fca:	4613      	mov	r3, r2
   17fcc:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.status, p);
   17fce:	68bb      	ldr	r3, [r7, #8]
   17fd0:	1c5a      	adds	r2, r3, #1
   17fd2:	60ba      	str	r2, [r7, #8]
   17fd4:	781a      	ldrb	r2, [r3, #0]
   17fd6:	68fb      	ldr	r3, [r7, #12]
   17fd8:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncEst.syncHandle, p);
   17fda:	68bb      	ldr	r3, [r7, #8]
   17fdc:	781b      	ldrb	r3, [r3, #0]
   17fde:	b29a      	uxth	r2, r3
   17fe0:	68bb      	ldr	r3, [r7, #8]
   17fe2:	3301      	adds	r3, #1
   17fe4:	781b      	ldrb	r3, [r3, #0]
   17fe6:	b29b      	uxth	r3, r3
   17fe8:	021b      	lsls	r3, r3, #8
   17fea:	b29b      	uxth	r3, r3
   17fec:	4413      	add	r3, r2
   17fee:	b29a      	uxth	r2, r3
   17ff0:	68fb      	ldr	r3, [r7, #12]
   17ff2:	80da      	strh	r2, [r3, #6]
   17ff4:	68bb      	ldr	r3, [r7, #8]
   17ff6:	3302      	adds	r3, #2
   17ff8:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.advSid, p);
   17ffa:	68bb      	ldr	r3, [r7, #8]
   17ffc:	1c5a      	adds	r2, r3, #1
   17ffe:	60ba      	str	r2, [r7, #8]
   18000:	781a      	ldrb	r2, [r3, #0]
   18002:	68fb      	ldr	r3, [r7, #12]
   18004:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.advAddrType, p);
   18006:	68bb      	ldr	r3, [r7, #8]
   18008:	1c5a      	adds	r2, r3, #1
   1800a:	60ba      	str	r2, [r7, #8]
   1800c:	781a      	ldrb	r2, [r3, #0]
   1800e:	68fb      	ldr	r3, [r7, #12]
   18010:	725a      	strb	r2, [r3, #9]
  BSTREAM_TO_BDA(pMsg->lePerAdvSyncEst.advAddr, p);
   18012:	68fb      	ldr	r3, [r7, #12]
   18014:	330a      	adds	r3, #10
   18016:	4618      	mov	r0, r3
   18018:	68b9      	ldr	r1, [r7, #8]
   1801a:	f7fa ff17 	bl	12e4c <BdaCpy>
   1801e:	68bb      	ldr	r3, [r7, #8]
   18020:	3306      	adds	r3, #6
   18022:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.advPhy, p);
   18024:	68bb      	ldr	r3, [r7, #8]
   18026:	1c5a      	adds	r2, r3, #1
   18028:	60ba      	str	r2, [r7, #8]
   1802a:	781a      	ldrb	r2, [r3, #0]
   1802c:	68fb      	ldr	r3, [r7, #12]
   1802e:	741a      	strb	r2, [r3, #16]
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncEst.perAdvInterval, p);
   18030:	68bb      	ldr	r3, [r7, #8]
   18032:	781b      	ldrb	r3, [r3, #0]
   18034:	b29a      	uxth	r2, r3
   18036:	68bb      	ldr	r3, [r7, #8]
   18038:	3301      	adds	r3, #1
   1803a:	781b      	ldrb	r3, [r3, #0]
   1803c:	b29b      	uxth	r3, r3
   1803e:	021b      	lsls	r3, r3, #8
   18040:	b29b      	uxth	r3, r3
   18042:	4413      	add	r3, r2
   18044:	b29a      	uxth	r2, r3
   18046:	68fb      	ldr	r3, [r7, #12]
   18048:	825a      	strh	r2, [r3, #18]
   1804a:	68bb      	ldr	r3, [r7, #8]
   1804c:	3302      	adds	r3, #2
   1804e:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.clockAccuracy, p);
   18050:	68bb      	ldr	r3, [r7, #8]
   18052:	1c5a      	adds	r2, r3, #1
   18054:	60ba      	str	r2, [r7, #8]
   18056:	781a      	ldrb	r2, [r3, #0]
   18058:	68fb      	ldr	r3, [r7, #12]
   1805a:	751a      	strb	r2, [r3, #20]

  pMsg->hdr.status = pMsg->lePerAdvSyncEst.status;
   1805c:	68fb      	ldr	r3, [r7, #12]
   1805e:	791a      	ldrb	r2, [r3, #4]
   18060:	68fb      	ldr	r3, [r7, #12]
   18062:	70da      	strb	r2, [r3, #3]
}
   18064:	3710      	adds	r7, #16
   18066:	46bd      	mov	sp, r7
   18068:	bd80      	pop	{r7, pc}
   1806a:	bf00      	nop

0001806c <hciEvtProcessLePerAdvReport>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtProcessLePerAdvReport(uint8_t *p, uint8_t len)
{
   1806c:	b580      	push	{r7, lr}
   1806e:	b084      	sub	sp, #16
   18070:	af00      	add	r7, sp, #0
   18072:	6078      	str	r0, [r7, #4]
   18074:	460b      	mov	r3, r1
   18076:	70fb      	strb	r3, [r7, #3]
  uint8_t                dataLen;

  HCI_TRACE_INFO0("HCI Per Adv report");

  /* get report data length */
  dataLen = p[HCI_PER_ADV_RPT_DATA_LEN_OFFSET];
   18078:	687b      	ldr	r3, [r7, #4]
   1807a:	795b      	ldrb	r3, [r3, #5]
   1807c:	73fb      	strb	r3, [r7, #15]

  /* sanity check on report length; quit if invalid */
  if (dataLen > HCI_PER_ADV_RPT_DATA_LEN)
   1807e:	7bfb      	ldrb	r3, [r7, #15]
   18080:	2bf8      	cmp	r3, #248	; 0xf8
   18082:	d900      	bls.n	18086 <hciEvtProcessLePerAdvReport+0x1a>
  {
    HCI_TRACE_WARN1("Invalid per adv report data len: %d", dataLen);
    return;
   18084:	e057      	b.n	18136 <hciEvtProcessLePerAdvReport+0xca>
  }

  /* allocate temp buffer that can hold max length periodic adv report data */
  if ((pMsg = WsfBufAlloc(sizeof(hciLePerAdvReportEvt_t) + dataLen)) != NULL)
   18086:	7bfb      	ldrb	r3, [r7, #15]
   18088:	b29b      	uxth	r3, r3
   1808a:	3310      	adds	r3, #16
   1808c:	b29b      	uxth	r3, r3
   1808e:	4618      	mov	r0, r3
   18090:	f000 ffc4 	bl	1901c <WsfBufAlloc>
   18094:	60b8      	str	r0, [r7, #8]
   18096:	68bb      	ldr	r3, [r7, #8]
   18098:	2b00      	cmp	r3, #0
   1809a:	d04c      	beq.n	18136 <hciEvtProcessLePerAdvReport+0xca>
  {
    /* parse report and execute callback */
    BSTREAM_TO_UINT16(pMsg->syncHandle, p);
   1809c:	687b      	ldr	r3, [r7, #4]
   1809e:	781b      	ldrb	r3, [r3, #0]
   180a0:	b29a      	uxth	r2, r3
   180a2:	687b      	ldr	r3, [r7, #4]
   180a4:	3301      	adds	r3, #1
   180a6:	781b      	ldrb	r3, [r3, #0]
   180a8:	b29b      	uxth	r3, r3
   180aa:	021b      	lsls	r3, r3, #8
   180ac:	b29b      	uxth	r3, r3
   180ae:	4413      	add	r3, r2
   180b0:	b29a      	uxth	r2, r3
   180b2:	68bb      	ldr	r3, [r7, #8]
   180b4:	809a      	strh	r2, [r3, #4]
   180b6:	687b      	ldr	r3, [r7, #4]
   180b8:	3302      	adds	r3, #2
   180ba:	607b      	str	r3, [r7, #4]
    BSTREAM_TO_UINT8(pMsg->txPower, p);
   180bc:	687b      	ldr	r3, [r7, #4]
   180be:	1c5a      	adds	r2, r3, #1
   180c0:	607a      	str	r2, [r7, #4]
   180c2:	781a      	ldrb	r2, [r3, #0]
   180c4:	68bb      	ldr	r3, [r7, #8]
   180c6:	719a      	strb	r2, [r3, #6]
    BSTREAM_TO_UINT8(pMsg->rssi, p);
   180c8:	687b      	ldr	r3, [r7, #4]
   180ca:	1c5a      	adds	r2, r3, #1
   180cc:	607a      	str	r2, [r7, #4]
   180ce:	781a      	ldrb	r2, [r3, #0]
   180d0:	68bb      	ldr	r3, [r7, #8]
   180d2:	71da      	strb	r2, [r3, #7]
    BSTREAM_TO_UINT8(pMsg->unused, p);
   180d4:	687b      	ldr	r3, [r7, #4]
   180d6:	1c5a      	adds	r2, r3, #1
   180d8:	607a      	str	r2, [r7, #4]
   180da:	781a      	ldrb	r2, [r3, #0]
   180dc:	68bb      	ldr	r3, [r7, #8]
   180de:	721a      	strb	r2, [r3, #8]
    BSTREAM_TO_UINT8(pMsg->status, p);
   180e0:	687b      	ldr	r3, [r7, #4]
   180e2:	1c5a      	adds	r2, r3, #1
   180e4:	607a      	str	r2, [r7, #4]
   180e6:	781a      	ldrb	r2, [r3, #0]
   180e8:	68bb      	ldr	r3, [r7, #8]
   180ea:	725a      	strb	r2, [r3, #9]
    BSTREAM_TO_UINT8(pMsg->len, p);
   180ec:	687b      	ldr	r3, [r7, #4]
   180ee:	1c5a      	adds	r2, r3, #1
   180f0:	607a      	str	r2, [r7, #4]
   180f2:	781a      	ldrb	r2, [r3, #0]
   180f4:	68bb      	ldr	r3, [r7, #8]
   180f6:	729a      	strb	r2, [r3, #10]

    HCI_TRACE_INFO1("HCI Per Adv report, data len: %d", pMsg->len);

    /* Copy data to space after end of report struct */
    pMsg->pData = (uint8_t *)(pMsg + 1);
   180f8:	68bb      	ldr	r3, [r7, #8]
   180fa:	f103 0210 	add.w	r2, r3, #16
   180fe:	68bb      	ldr	r3, [r7, #8]
   18100:	60da      	str	r2, [r3, #12]
    memcpy(pMsg->pData, p, pMsg->len);
   18102:	68bb      	ldr	r3, [r7, #8]
   18104:	68da      	ldr	r2, [r3, #12]
   18106:	68bb      	ldr	r3, [r7, #8]
   18108:	7a9b      	ldrb	r3, [r3, #10]
   1810a:	4610      	mov	r0, r2
   1810c:	6879      	ldr	r1, [r7, #4]
   1810e:	461a      	mov	r2, r3
   18110:	f7f3 fff6 	bl	c100 <memcpy>

    /* initialize message header */
    pMsg->hdr.param = 0;
   18114:	68bb      	ldr	r3, [r7, #8]
   18116:	2200      	movs	r2, #0
   18118:	801a      	strh	r2, [r3, #0]
    pMsg->hdr.event = HCI_LE_PER_ADV_REPORT_CBACK_EVT;
   1811a:	68bb      	ldr	r3, [r7, #8]
   1811c:	2231      	movs	r2, #49	; 0x31
   1811e:	709a      	strb	r2, [r3, #2]
    pMsg->hdr.status = pMsg->status;
   18120:	68bb      	ldr	r3, [r7, #8]
   18122:	7a5a      	ldrb	r2, [r3, #9]
   18124:	68bb      	ldr	r3, [r7, #8]
   18126:	70da      	strb	r2, [r3, #3]

    /* execute callback */
    (*hciCb.evtCback)((hciEvt_t *)pMsg);
   18128:	4b04      	ldr	r3, [pc, #16]	; (1813c <hciEvtProcessLePerAdvReport+0xd0>)
   1812a:	689b      	ldr	r3, [r3, #8]
   1812c:	68b8      	ldr	r0, [r7, #8]
   1812e:	4798      	blx	r3

    /* free buffer */
    WsfBufFree(pMsg);
   18130:	68b8      	ldr	r0, [r7, #8]
   18132:	f000 ffb3 	bl	1909c <WsfBufFree>
  }
}
   18136:	3710      	adds	r7, #16
   18138:	46bd      	mov	sp, r7
   1813a:	bd80      	pop	{r7, pc}
   1813c:	1000916c 	.word	0x1000916c

00018140 <hciEvtParseLeCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   18140:	b480      	push	{r7}
   18142:	b085      	sub	sp, #20
   18144:	af00      	add	r7, sp, #0
   18146:	60f8      	str	r0, [r7, #12]
   18148:	60b9      	str	r1, [r7, #8]
   1814a:	4613      	mov	r3, r2
   1814c:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->hdr.status, p);
   1814e:	68bb      	ldr	r3, [r7, #8]
   18150:	1c5a      	adds	r2, r3, #1
   18152:	60ba      	str	r2, [r7, #8]
   18154:	781a      	ldrb	r2, [r3, #0]
   18156:	68fb      	ldr	r3, [r7, #12]
   18158:	70da      	strb	r2, [r3, #3]
}
   1815a:	3714      	adds	r7, #20
   1815c:	46bd      	mov	sp, r7
   1815e:	f85d 7b04 	ldr.w	r7, [sp], #4
   18162:	4770      	bx	lr

00018164 <hciEvtParseLePerAdvSyncLost>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLePerAdvSyncLost(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   18164:	b480      	push	{r7}
   18166:	b085      	sub	sp, #20
   18168:	af00      	add	r7, sp, #0
   1816a:	60f8      	str	r0, [r7, #12]
   1816c:	60b9      	str	r1, [r7, #8]
   1816e:	4613      	mov	r3, r2
   18170:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncLost.syncHandle, p);
   18172:	68bb      	ldr	r3, [r7, #8]
   18174:	781b      	ldrb	r3, [r3, #0]
   18176:	b29a      	uxth	r2, r3
   18178:	68bb      	ldr	r3, [r7, #8]
   1817a:	3301      	adds	r3, #1
   1817c:	781b      	ldrb	r3, [r3, #0]
   1817e:	b29b      	uxth	r3, r3
   18180:	021b      	lsls	r3, r3, #8
   18182:	b29b      	uxth	r3, r3
   18184:	4413      	add	r3, r2
   18186:	b29a      	uxth	r2, r3
   18188:	68fb      	ldr	r3, [r7, #12]
   1818a:	809a      	strh	r2, [r3, #4]
   1818c:	68bb      	ldr	r3, [r7, #8]
   1818e:	3302      	adds	r3, #2
   18190:	60bb      	str	r3, [r7, #8]
}
   18192:	3714      	adds	r7, #20
   18194:	46bd      	mov	sp, r7
   18196:	f85d 7b04 	ldr.w	r7, [sp], #4
   1819a:	4770      	bx	lr

0001819c <hciEvtProcessLeDirectAdvReport>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtProcessLeDirectAdvReport(uint8_t *p, uint8_t len)
{
   1819c:	b580      	push	{r7, lr}
   1819e:	b084      	sub	sp, #16
   181a0:	af00      	add	r7, sp, #0
   181a2:	6078      	str	r0, [r7, #4]
   181a4:	460b      	mov	r3, r1
   181a6:	70fb      	strb	r3, [r7, #3]
  hciLeAdvReportEvt_t *pMsg;
  uint8_t             i;

  /* get number of reports */
  BSTREAM_TO_UINT8(i, p);
   181a8:	687b      	ldr	r3, [r7, #4]
   181aa:	1c5a      	adds	r2, r3, #1
   181ac:	607a      	str	r2, [r7, #4]
   181ae:	781b      	ldrb	r3, [r3, #0]
   181b0:	73fb      	strb	r3, [r7, #15]

  HCI_TRACE_INFO1("HCI Adv report, num reports: %d", i);

  /* sanity check num reports */
  if (i > HCI_MAX_REPORTS)
   181b2:	7bfb      	ldrb	r3, [r7, #15]
   181b4:	2b0f      	cmp	r3, #15
   181b6:	d900      	bls.n	181ba <hciEvtProcessLeDirectAdvReport+0x1e>
  {
    return;
   181b8:	e04d      	b.n	18256 <hciEvtProcessLeDirectAdvReport+0xba>
  }

  /* allocate temp buffer that can hold max length adv/scan rsp data */
  if ((pMsg = WsfBufAlloc(sizeof(hciLeAdvReportEvt_t))) != NULL)
   181ba:	201c      	movs	r0, #28
   181bc:	f000 ff2e 	bl	1901c <WsfBufAlloc>
   181c0:	60b8      	str	r0, [r7, #8]
   181c2:	68bb      	ldr	r3, [r7, #8]
   181c4:	2b00      	cmp	r3, #0
   181c6:	d046      	beq.n	18256 <hciEvtProcessLeDirectAdvReport+0xba>
  {
    /* parse each report and execute callback */
    while (i-- > 0)
   181c8:	e03d      	b.n	18246 <hciEvtProcessLeDirectAdvReport+0xaa>
    {
      BSTREAM_TO_UINT8(pMsg->eventType, p);
   181ca:	687b      	ldr	r3, [r7, #4]
   181cc:	1c5a      	adds	r2, r3, #1
   181ce:	607a      	str	r2, [r7, #4]
   181d0:	781a      	ldrb	r2, [r3, #0]
   181d2:	68bb      	ldr	r3, [r7, #8]
   181d4:	729a      	strb	r2, [r3, #10]
      BSTREAM_TO_UINT8(pMsg->addrType, p);
   181d6:	687b      	ldr	r3, [r7, #4]
   181d8:	1c5a      	adds	r2, r3, #1
   181da:	607a      	str	r2, [r7, #4]
   181dc:	781a      	ldrb	r2, [r3, #0]
   181de:	68bb      	ldr	r3, [r7, #8]
   181e0:	72da      	strb	r2, [r3, #11]
      BSTREAM_TO_BDA(pMsg->addr, p);
   181e2:	68bb      	ldr	r3, [r7, #8]
   181e4:	330c      	adds	r3, #12
   181e6:	4618      	mov	r0, r3
   181e8:	6879      	ldr	r1, [r7, #4]
   181ea:	f7fa fe2f 	bl	12e4c <BdaCpy>
   181ee:	687b      	ldr	r3, [r7, #4]
   181f0:	3306      	adds	r3, #6
   181f2:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->directAddrType, p);
   181f4:	687b      	ldr	r3, [r7, #4]
   181f6:	1c5a      	adds	r2, r3, #1
   181f8:	607a      	str	r2, [r7, #4]
   181fa:	781a      	ldrb	r2, [r3, #0]
   181fc:	68bb      	ldr	r3, [r7, #8]
   181fe:	749a      	strb	r2, [r3, #18]
      BSTREAM_TO_BDA(pMsg->directAddr, p);
   18200:	68bb      	ldr	r3, [r7, #8]
   18202:	3313      	adds	r3, #19
   18204:	4618      	mov	r0, r3
   18206:	6879      	ldr	r1, [r7, #4]
   18208:	f7fa fe20 	bl	12e4c <BdaCpy>
   1820c:	687b      	ldr	r3, [r7, #4]
   1820e:	3306      	adds	r3, #6
   18210:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->rssi, p);
   18212:	687b      	ldr	r3, [r7, #4]
   18214:	1c5a      	adds	r2, r3, #1
   18216:	607a      	str	r2, [r7, #4]
   18218:	781b      	ldrb	r3, [r3, #0]
   1821a:	b2da      	uxtb	r2, r3
   1821c:	68bb      	ldr	r3, [r7, #8]
   1821e:	725a      	strb	r2, [r3, #9]

      /* zero out unused fields */
      pMsg->len = 0;
   18220:	68bb      	ldr	r3, [r7, #8]
   18222:	2200      	movs	r2, #0
   18224:	721a      	strb	r2, [r3, #8]
      pMsg->pData = NULL;
   18226:	68bb      	ldr	r3, [r7, #8]
   18228:	2200      	movs	r2, #0
   1822a:	605a      	str	r2, [r3, #4]

      /* initialize message header */
      pMsg->hdr.param = 0;
   1822c:	68bb      	ldr	r3, [r7, #8]
   1822e:	2200      	movs	r2, #0
   18230:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = HCI_LE_ADV_REPORT_CBACK_EVT;
   18232:	68bb      	ldr	r3, [r7, #8]
   18234:	2206      	movs	r2, #6
   18236:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
   18238:	68bb      	ldr	r3, [r7, #8]
   1823a:	2200      	movs	r2, #0
   1823c:	70da      	strb	r2, [r3, #3]

      /* execute callback */
      (*hciCb.evtCback)((hciEvt_t *) pMsg);
   1823e:	4b07      	ldr	r3, [pc, #28]	; (1825c <hciEvtProcessLeDirectAdvReport+0xc0>)
   18240:	689b      	ldr	r3, [r3, #8]
   18242:	68b8      	ldr	r0, [r7, #8]
   18244:	4798      	blx	r3

  /* allocate temp buffer that can hold max length adv/scan rsp data */
  if ((pMsg = WsfBufAlloc(sizeof(hciLeAdvReportEvt_t))) != NULL)
  {
    /* parse each report and execute callback */
    while (i-- > 0)
   18246:	7bfb      	ldrb	r3, [r7, #15]
   18248:	1e5a      	subs	r2, r3, #1
   1824a:	73fa      	strb	r2, [r7, #15]
   1824c:	2b00      	cmp	r3, #0
   1824e:	d1bc      	bne.n	181ca <hciEvtProcessLeDirectAdvReport+0x2e>
      /* execute callback */
      (*hciCb.evtCback)((hciEvt_t *) pMsg);
    }

    /* free buffer */
    WsfBufFree(pMsg);
   18250:	68b8      	ldr	r0, [r7, #8]
   18252:	f000 ff23 	bl	1909c <WsfBufFree>
  }
}
   18256:	3710      	adds	r7, #16
   18258:	46bd      	mov	sp, r7
   1825a:	bd80      	pop	{r7, pc}
   1825c:	1000916c 	.word	0x1000916c

00018260 <hciEvtCmdStatusFailure>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtCmdStatusFailure(uint8_t status, uint16_t opcode)
{
   18260:	b480      	push	{r7}
   18262:	b083      	sub	sp, #12
   18264:	af00      	add	r7, sp, #0
   18266:	4603      	mov	r3, r0
   18268:	460a      	mov	r2, r1
   1826a:	71fb      	strb	r3, [r7, #7]
   1826c:	4613      	mov	r3, r2
   1826e:	80bb      	strh	r3, [r7, #4]
  HCI_OPCODE_LE_CONN_UPDATE
  HCI_OPCODE_LE_READ_REMOTE_FEAT
  HCI_OPCODE_LE_START_ENCRYPTION
  HCI_OPCODE_READ_REMOTE_VER_INFO
#endif
}
   18270:	370c      	adds	r7, #12
   18272:	46bd      	mov	sp, r7
   18274:	f85d 7b04 	ldr.w	r7, [sp], #4
   18278:	4770      	bx	lr
   1827a:	bf00      	nop

0001827c <hciEvtProcessCmdStatus>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtProcessCmdStatus(uint8_t *p)
{
   1827c:	b580      	push	{r7, lr}
   1827e:	b084      	sub	sp, #16
   18280:	af00      	add	r7, sp, #0
   18282:	6078      	str	r0, [r7, #4]
  uint8_t   status;
  uint8_t   numPkts;
  uint16_t  opcode;

  BSTREAM_TO_UINT8(status, p);
   18284:	687b      	ldr	r3, [r7, #4]
   18286:	1c5a      	adds	r2, r3, #1
   18288:	607a      	str	r2, [r7, #4]
   1828a:	781b      	ldrb	r3, [r3, #0]
   1828c:	73fb      	strb	r3, [r7, #15]
  BSTREAM_TO_UINT8(numPkts, p);
   1828e:	687b      	ldr	r3, [r7, #4]
   18290:	1c5a      	adds	r2, r3, #1
   18292:	607a      	str	r2, [r7, #4]
   18294:	781b      	ldrb	r3, [r3, #0]
   18296:	73bb      	strb	r3, [r7, #14]
  BSTREAM_TO_UINT16(opcode, p);
   18298:	687b      	ldr	r3, [r7, #4]
   1829a:	781b      	ldrb	r3, [r3, #0]
   1829c:	b29a      	uxth	r2, r3
   1829e:	687b      	ldr	r3, [r7, #4]
   182a0:	3301      	adds	r3, #1
   182a2:	781b      	ldrb	r3, [r3, #0]
   182a4:	b29b      	uxth	r3, r3
   182a6:	021b      	lsls	r3, r3, #8
   182a8:	b29b      	uxth	r3, r3
   182aa:	4413      	add	r3, r2
   182ac:	81bb      	strh	r3, [r7, #12]
   182ae:	687b      	ldr	r3, [r7, #4]
   182b0:	3302      	adds	r3, #2
   182b2:	607b      	str	r3, [r7, #4]

  if (status != HCI_SUCCESS)  /* optional: or vendor specific */
   182b4:	7bfb      	ldrb	r3, [r7, #15]
   182b6:	2b00      	cmp	r3, #0
   182b8:	d005      	beq.n	182c6 <hciEvtProcessCmdStatus+0x4a>
  {
    hciEvtCmdStatusFailure(status, opcode);
   182ba:	7bfa      	ldrb	r2, [r7, #15]
   182bc:	89bb      	ldrh	r3, [r7, #12]
   182be:	4610      	mov	r0, r2
   182c0:	4619      	mov	r1, r3
   182c2:	f7ff ffcd 	bl	18260 <hciEvtCmdStatusFailure>
  }

  /* optional:  handle vendor-specific command status event */

  hciCmdRecvCmpl(numPkts);
   182c6:	7bbb      	ldrb	r3, [r7, #14]
   182c8:	4618      	mov	r0, r3
   182ca:	f7fd f8cf 	bl	1546c <hciCmdRecvCmpl>
}
   182ce:	3710      	adds	r7, #16
   182d0:	46bd      	mov	sp, r7
   182d2:	bd80      	pop	{r7, pc}

000182d4 <hciEvtProcessCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtProcessCmdCmpl(uint8_t *p, uint8_t len)
{
   182d4:	b580      	push	{r7, lr}
   182d6:	b086      	sub	sp, #24
   182d8:	af00      	add	r7, sp, #0
   182da:	6078      	str	r0, [r7, #4]
   182dc:	460b      	mov	r3, r1
   182de:	70fb      	strb	r3, [r7, #3]
  uint8_t       numPkts;
  uint16_t      opcode;
  hciEvt_t      *pMsg;
  uint8_t       cbackEvt = 0;
   182e0:	2300      	movs	r3, #0
   182e2:	75fb      	strb	r3, [r7, #23]
  hciEvtCback_t cback = hciCb.evtCback;
   182e4:	4ba3      	ldr	r3, [pc, #652]	; (18574 <hciEvtProcessCmdCmpl+0x2a0>)
   182e6:	689b      	ldr	r3, [r3, #8]
   182e8:	613b      	str	r3, [r7, #16]

  BSTREAM_TO_UINT8(numPkts, p);
   182ea:	687b      	ldr	r3, [r7, #4]
   182ec:	1c5a      	adds	r2, r3, #1
   182ee:	607a      	str	r2, [r7, #4]
   182f0:	781b      	ldrb	r3, [r3, #0]
   182f2:	73fb      	strb	r3, [r7, #15]
  BSTREAM_TO_UINT16(opcode, p);
   182f4:	687b      	ldr	r3, [r7, #4]
   182f6:	781b      	ldrb	r3, [r3, #0]
   182f8:	b29a      	uxth	r2, r3
   182fa:	687b      	ldr	r3, [r7, #4]
   182fc:	3301      	adds	r3, #1
   182fe:	781b      	ldrb	r3, [r3, #0]
   18300:	b29b      	uxth	r3, r3
   18302:	021b      	lsls	r3, r3, #8
   18304:	b29b      	uxth	r3, r3
   18306:	4413      	add	r3, r2
   18308:	81bb      	strh	r3, [r7, #12]
   1830a:	687b      	ldr	r3, [r7, #4]
   1830c:	3302      	adds	r3, #2
   1830e:	607b      	str	r3, [r7, #4]

  /* convert opcode to internal event code and perform special handling */
  switch (opcode)
   18310:	89bb      	ldrh	r3, [r7, #12]
   18312:	f242 0222 	movw	r2, #8226	; 0x2022
   18316:	4293      	cmp	r3, r2
   18318:	f000 80aa 	beq.w	18470 <hciEvtProcessCmdCmpl+0x19c>
   1831c:	f242 0222 	movw	r2, #8226	; 0x2022
   18320:	4293      	cmp	r3, r2
   18322:	dc49      	bgt.n	183b8 <hciEvtProcessCmdCmpl+0xe4>
   18324:	f242 0215 	movw	r2, #8213	; 0x2015
   18328:	4293      	cmp	r3, r2
   1832a:	f000 80b3 	beq.w	18494 <hciEvtProcessCmdCmpl+0x1c0>
   1832e:	f242 0215 	movw	r2, #8213	; 0x2015
   18332:	4293      	cmp	r3, r2
   18334:	dc22      	bgt.n	1837c <hciEvtProcessCmdCmpl+0xa8>
   18336:	f241 4205 	movw	r2, #5125	; 0x1405
   1833a:	4293      	cmp	r3, r2
   1833c:	f000 80ad 	beq.w	1849a <hciEvtProcessCmdCmpl+0x1c6>
   18340:	f241 4205 	movw	r2, #5125	; 0x1405
   18344:	4293      	cmp	r3, r2
   18346:	dc0a      	bgt.n	1835e <hciEvtProcessCmdCmpl+0x8a>
   18348:	f640 422d 	movw	r2, #3117	; 0xc2d
   1834c:	4293      	cmp	r3, r2
   1834e:	f000 80a7 	beq.w	184a0 <hciEvtProcessCmdCmpl+0x1cc>
   18352:	f640 427c 	movw	r2, #3196	; 0xc7c
   18356:	4293      	cmp	r3, r2
   18358:	f000 80b7 	beq.w	184ca <hciEvtProcessCmdCmpl+0x1f6>
   1835c:	e0cd      	b.n	184fa <hciEvtProcessCmdCmpl+0x226>
   1835e:	f242 020c 	movw	r2, #8204	; 0x200c
   18362:	4293      	cmp	r3, r2
   18364:	f000 80ba 	beq.w	184dc <hciEvtProcessCmdCmpl+0x208>
   18368:	f242 020e 	movw	r2, #8206	; 0x200e
   1836c:	4293      	cmp	r3, r2
   1836e:	d06a      	beq.n	18446 <hciEvtProcessCmdCmpl+0x172>
   18370:	f242 020a 	movw	r2, #8202	; 0x200a
   18374:	4293      	cmp	r3, r2
   18376:	f000 80b4 	beq.w	184e2 <hciEvtProcessCmdCmpl+0x20e>
   1837a:	e0be      	b.n	184fa <hciEvtProcessCmdCmpl+0x226>
   1837c:	f242 021a 	movw	r2, #8218	; 0x201a
   18380:	4293      	cmp	r3, r2
   18382:	d07b      	beq.n	1847c <hciEvtProcessCmdCmpl+0x1a8>
   18384:	f242 021a 	movw	r2, #8218	; 0x201a
   18388:	4293      	cmp	r3, r2
   1838a:	dc08      	bgt.n	1839e <hciEvtProcessCmdCmpl+0xca>
   1838c:	f242 0217 	movw	r2, #8215	; 0x2017
   18390:	4293      	cmp	r3, r2
   18392:	d05b      	beq.n	1844c <hciEvtProcessCmdCmpl+0x178>
   18394:	f242 0218 	movw	r2, #8216	; 0x2018
   18398:	4293      	cmp	r3, r2
   1839a:	d075      	beq.n	18488 <hciEvtProcessCmdCmpl+0x1b4>
   1839c:	e0ad      	b.n	184fa <hciEvtProcessCmdCmpl+0x226>
   1839e:	f242 0220 	movw	r2, #8224	; 0x2020
   183a2:	4293      	cmp	r3, r2
   183a4:	d058      	beq.n	18458 <hciEvtProcessCmdCmpl+0x184>
   183a6:	f242 0220 	movw	r2, #8224	; 0x2020
   183aa:	4293      	cmp	r3, r2
   183ac:	dc57      	bgt.n	1845e <hciEvtProcessCmdCmpl+0x18a>
   183ae:	f242 021b 	movw	r2, #8219	; 0x201b
   183b2:	4293      	cmp	r3, r2
   183b4:	d065      	beq.n	18482 <hciEvtProcessCmdCmpl+0x1ae>
   183b6:	e0a0      	b.n	184fa <hciEvtProcessCmdCmpl+0x226>
   183b8:	f242 022c 	movw	r2, #8236	; 0x202c
   183bc:	4293      	cmp	r3, r2
   183be:	d07e      	beq.n	184be <hciEvtProcessCmdCmpl+0x1ea>
   183c0:	f242 022c 	movw	r2, #8236	; 0x202c
   183c4:	4293      	cmp	r3, r2
   183c6:	dc1d      	bgt.n	18404 <hciEvtProcessCmdCmpl+0x130>
   183c8:	f242 0227 	movw	r2, #8231	; 0x2027
   183cc:	4293      	cmp	r3, r2
   183ce:	d06a      	beq.n	184a6 <hciEvtProcessCmdCmpl+0x1d2>
   183d0:	f242 0227 	movw	r2, #8231	; 0x2027
   183d4:	4293      	cmp	r3, r2
   183d6:	dc08      	bgt.n	183ea <hciEvtProcessCmdCmpl+0x116>
   183d8:	f242 0223 	movw	r2, #8227	; 0x2023
   183dc:	4293      	cmp	r3, r2
   183de:	d041      	beq.n	18464 <hciEvtProcessCmdCmpl+0x190>
   183e0:	f242 0224 	movw	r2, #8228	; 0x2024
   183e4:	4293      	cmp	r3, r2
   183e6:	d040      	beq.n	1846a <hciEvtProcessCmdCmpl+0x196>
   183e8:	e087      	b.n	184fa <hciEvtProcessCmdCmpl+0x226>
   183ea:	f242 0229 	movw	r2, #8233	; 0x2029
   183ee:	4293      	cmp	r3, r2
   183f0:	d05f      	beq.n	184b2 <hciEvtProcessCmdCmpl+0x1de>
   183f2:	f242 0229 	movw	r2, #8233	; 0x2029
   183f6:	4293      	cmp	r3, r2
   183f8:	db58      	blt.n	184ac <hciEvtProcessCmdCmpl+0x1d8>
   183fa:	f242 022b 	movw	r2, #8235	; 0x202b
   183fe:	4293      	cmp	r3, r2
   18400:	d05a      	beq.n	184b8 <hciEvtProcessCmdCmpl+0x1e4>
   18402:	e07a      	b.n	184fa <hciEvtProcessCmdCmpl+0x226>
   18404:	f242 0231 	movw	r2, #8241	; 0x2031
   18408:	4293      	cmp	r3, r2
   1840a:	d064      	beq.n	184d6 <hciEvtProcessCmdCmpl+0x202>
   1840c:	f242 0231 	movw	r2, #8241	; 0x2031
   18410:	4293      	cmp	r3, r2
   18412:	dc0c      	bgt.n	1842e <hciEvtProcessCmdCmpl+0x15a>
   18414:	f242 022f 	movw	r2, #8239	; 0x202f
   18418:	4293      	cmp	r3, r2
   1841a:	d02c      	beq.n	18476 <hciEvtProcessCmdCmpl+0x1a2>
   1841c:	f242 022f 	movw	r2, #8239	; 0x202f
   18420:	4293      	cmp	r3, r2
   18422:	dc55      	bgt.n	184d0 <hciEvtProcessCmdCmpl+0x1fc>
   18424:	f242 022d 	movw	r2, #8237	; 0x202d
   18428:	4293      	cmp	r3, r2
   1842a:	d04b      	beq.n	184c4 <hciEvtProcessCmdCmpl+0x1f0>
   1842c:	e065      	b.n	184fa <hciEvtProcessCmdCmpl+0x226>
   1842e:	f5b3 5f01 	cmp.w	r3, #8256	; 0x2040
   18432:	d05f      	beq.n	184f4 <hciEvtProcessCmdCmpl+0x220>
   18434:	f242 0242 	movw	r2, #8258	; 0x2042
   18438:	4293      	cmp	r3, r2
   1843a:	d055      	beq.n	184e8 <hciEvtProcessCmdCmpl+0x214>
   1843c:	f242 0239 	movw	r2, #8249	; 0x2039
   18440:	4293      	cmp	r3, r2
   18442:	d054      	beq.n	184ee <hciEvtProcessCmdCmpl+0x21a>
   18444:	e059      	b.n	184fa <hciEvtProcessCmdCmpl+0x226>
  {
  case HCI_OPCODE_LE_CREATE_CONN_CANCEL:
    cbackEvt = HCI_LE_CREATE_CONN_CANCEL_CMD_CMPL_CBACK_EVT;
   18446:	2305      	movs	r3, #5
   18448:	75fb      	strb	r3, [r7, #23]
    break;
   1844a:	e066      	b.n	1851a <hciEvtProcessCmdCmpl+0x246>

  case HCI_OPCODE_LE_ENCRYPT:
    cbackEvt = HCI_LE_ENCRYPT_CMD_CMPL_CBACK_EVT;
   1844c:	231b      	movs	r3, #27
   1844e:	75fb      	strb	r3, [r7, #23]
    cback = hciCb.secCback;
   18450:	4b48      	ldr	r3, [pc, #288]	; (18574 <hciEvtProcessCmdCmpl+0x2a0>)
   18452:	68db      	ldr	r3, [r3, #12]
   18454:	613b      	str	r3, [r7, #16]
    break;
   18456:	e060      	b.n	1851a <hciEvtProcessCmdCmpl+0x246>

  case HCI_OPCODE_LE_REM_CONN_PARAM_REP:
    cbackEvt = HCI_LE_REM_CONN_PARAM_REP_CMD_CMPL_CBACK_EVT;
   18458:	231d      	movs	r3, #29
   1845a:	75fb      	strb	r3, [r7, #23]
    break;
   1845c:	e05d      	b.n	1851a <hciEvtProcessCmdCmpl+0x246>

  case HCI_OPCODE_LE_REM_CONN_PARAM_NEG_REP:
    cbackEvt = HCI_LE_REM_CONN_PARAM_NEG_REP_CMD_CMPL_CBACK_EVT;
   1845e:	231e      	movs	r3, #30
   18460:	75fb      	strb	r3, [r7, #23]
    break;
   18462:	e05a      	b.n	1851a <hciEvtProcessCmdCmpl+0x246>

  case HCI_OPCODE_LE_READ_DEF_DATA_LEN:
    cbackEvt = HCI_LE_READ_DEF_DATA_LEN_CMD_CMPL_CBACK_EVT;
   18464:	231f      	movs	r3, #31
   18466:	75fb      	strb	r3, [r7, #23]
    break;
   18468:	e057      	b.n	1851a <hciEvtProcessCmdCmpl+0x246>

  case HCI_OPCODE_LE_WRITE_DEF_DATA_LEN:
    cbackEvt = HCI_LE_WRITE_DEF_DATA_LEN_CMD_CMPL_CBACK_EVT;
   1846a:	2320      	movs	r3, #32
   1846c:	75fb      	strb	r3, [r7, #23]
    break;
   1846e:	e054      	b.n	1851a <hciEvtProcessCmdCmpl+0x246>

  case HCI_OPCODE_LE_SET_DATA_LEN:
    cbackEvt = HCI_LE_SET_DATA_LEN_CMD_CMPL_CBACK_EVT;
   18470:	2321      	movs	r3, #33	; 0x21
   18472:	75fb      	strb	r3, [r7, #23]
    break;
   18474:	e051      	b.n	1851a <hciEvtProcessCmdCmpl+0x246>

  case HCI_OPCODE_LE_READ_MAX_DATA_LEN:
    cbackEvt = HCI_LE_READ_MAX_DATA_LEN_CMD_CMPL_CBACK_EVT;
   18476:	2322      	movs	r3, #34	; 0x22
   18478:	75fb      	strb	r3, [r7, #23]
    break;
   1847a:	e04e      	b.n	1851a <hciEvtProcessCmdCmpl+0x246>

  case HCI_OPCODE_LE_LTK_REQ_REPL:
    cbackEvt = HCI_LE_LTK_REQ_REPL_CMD_CMPL_CBACK_EVT;
   1847c:	230c      	movs	r3, #12
   1847e:	75fb      	strb	r3, [r7, #23]
    break;
   18480:	e04b      	b.n	1851a <hciEvtProcessCmdCmpl+0x246>

  case HCI_OPCODE_LE_LTK_REQ_NEG_REPL:
    cbackEvt = HCI_LE_LTK_REQ_NEG_REPL_CMD_CMPL_CBACK_EVT;
   18482:	230d      	movs	r3, #13
   18484:	75fb      	strb	r3, [r7, #23]
    break;
   18486:	e048      	b.n	1851a <hciEvtProcessCmdCmpl+0x246>

  case HCI_OPCODE_LE_RAND:
    cbackEvt = HCI_LE_RAND_CMD_CMPL_CBACK_EVT;
   18488:	231c      	movs	r3, #28
   1848a:	75fb      	strb	r3, [r7, #23]
    cback = hciCb.secCback;
   1848c:	4b39      	ldr	r3, [pc, #228]	; (18574 <hciEvtProcessCmdCmpl+0x2a0>)
   1848e:	68db      	ldr	r3, [r3, #12]
   18490:	613b      	str	r3, [r7, #16]
    break;
   18492:	e042      	b.n	1851a <hciEvtProcessCmdCmpl+0x246>

  case HCI_OPCODE_LE_READ_CHAN_MAP:
    cbackEvt = HCI_LE_READ_CHAN_MAP_CMD_CMPL_CBACK_EVT;
   18494:	2308      	movs	r3, #8
   18496:	75fb      	strb	r3, [r7, #23]
    break;
   18498:	e03f      	b.n	1851a <hciEvtProcessCmdCmpl+0x246>

  case HCI_OPCODE_READ_RSSI:
    cbackEvt = HCI_READ_RSSI_CMD_CMPL_CBACK_EVT;
   1849a:	2307      	movs	r3, #7
   1849c:	75fb      	strb	r3, [r7, #23]
    break;
   1849e:	e03c      	b.n	1851a <hciEvtProcessCmdCmpl+0x246>

  case HCI_OPCODE_READ_TX_PWR_LVL:
    cbackEvt = HCI_READ_TX_PWR_LVL_CMD_CMPL_CBACK_EVT;
   184a0:	2309      	movs	r3, #9
   184a2:	75fb      	strb	r3, [r7, #23]
    break;
   184a4:	e039      	b.n	1851a <hciEvtProcessCmdCmpl+0x246>

  case HCI_OPCODE_LE_ADD_DEV_RES_LIST:
    cbackEvt = HCI_LE_ADD_DEV_TO_RES_LIST_CMD_CMPL_CBACK_EVT;
   184a6:	2315      	movs	r3, #21
   184a8:	75fb      	strb	r3, [r7, #23]
    break;
   184aa:	e036      	b.n	1851a <hciEvtProcessCmdCmpl+0x246>

  case HCI_OPCODE_LE_REMOVE_DEV_RES_LIST:
    cbackEvt = HCI_LE_REM_DEV_FROM_RES_LIST_CMD_CMPL_CBACK_EVT;
   184ac:	2316      	movs	r3, #22
   184ae:	75fb      	strb	r3, [r7, #23]
    break;
   184b0:	e033      	b.n	1851a <hciEvtProcessCmdCmpl+0x246>

  case HCI_OPCODE_LE_CLEAR_RES_LIST:
    cbackEvt = HCI_LE_CLEAR_RES_LIST_CMD_CMPL_CBACK_EVT;
   184b2:	2317      	movs	r3, #23
   184b4:	75fb      	strb	r3, [r7, #23]
    break;
   184b6:	e030      	b.n	1851a <hciEvtProcessCmdCmpl+0x246>

  case HCI_OPCODE_LE_READ_PEER_RES_ADDR:
    cbackEvt = HCI_LE_READ_PEER_RES_ADDR_CMD_CMPL_CBACK_EVT;
   184b8:	2318      	movs	r3, #24
   184ba:	75fb      	strb	r3, [r7, #23]
    break;
   184bc:	e02d      	b.n	1851a <hciEvtProcessCmdCmpl+0x246>

  case HCI_OPCODE_LE_READ_LOCAL_RES_ADDR:
    cbackEvt = HCI_LE_READ_LOCAL_RES_ADDR_CMD_CMPL_CBACK_EVT;
   184be:	2319      	movs	r3, #25
   184c0:	75fb      	strb	r3, [r7, #23]
    break;
   184c2:	e02a      	b.n	1851a <hciEvtProcessCmdCmpl+0x246>

  case HCI_OPCODE_LE_SET_ADDR_RES_ENABLE:
    cbackEvt = HCI_LE_SET_ADDR_RES_ENABLE_CMD_CMPL_CBACK_EVT;
   184c4:	231a      	movs	r3, #26
   184c6:	75fb      	strb	r3, [r7, #23]
    break;
   184c8:	e027      	b.n	1851a <hciEvtProcessCmdCmpl+0x246>

  case HCI_OPCODE_WRITE_AUTH_PAYLOAD_TO:
    cbackEvt = HCI_WRITE_AUTH_PAYLOAD_TO_CMD_CMPL_CBACK_EVT;
   184ca:	2327      	movs	r3, #39	; 0x27
   184cc:	75fb      	strb	r3, [r7, #23]
    break;
   184ce:	e024      	b.n	1851a <hciEvtProcessCmdCmpl+0x246>

  case HCI_OPCODE_LE_READ_PHY:
    cbackEvt = HCI_LE_READ_PHY_CMD_CMPL_CBACK_EVT;
   184d0:	2329      	movs	r3, #41	; 0x29
   184d2:	75fb      	strb	r3, [r7, #23]
    break;
   184d4:	e021      	b.n	1851a <hciEvtProcessCmdCmpl+0x246>

  case HCI_OPCODE_LE_SET_DEF_PHY:
    cbackEvt = HCI_LE_SET_DEF_PHY_CMD_CMPL_CBACK_EVT;
   184d6:	232a      	movs	r3, #42	; 0x2a
   184d8:	75fb      	strb	r3, [r7, #23]
    break;
   184da:	e01e      	b.n	1851a <hciEvtProcessCmdCmpl+0x246>

  case HCI_OPCODE_LE_SET_SCAN_ENABLE:
    cbackEvt = HCI_LE_SCAN_ENABLE_CMPL_CBACK_EVT;
   184dc:	2334      	movs	r3, #52	; 0x34
   184de:	75fb      	strb	r3, [r7, #23]
    break;
   184e0:	e01b      	b.n	1851a <hciEvtProcessCmdCmpl+0x246>

  case HCI_OPCODE_LE_SET_ADV_ENABLE:
    cbackEvt = HCI_LE_ADV_ENABLE_CMPL_CBACK_EVT;
   184e2:	2335      	movs	r3, #53	; 0x35
   184e4:	75fb      	strb	r3, [r7, #23]
    break;
   184e6:	e018      	b.n	1851a <hciEvtProcessCmdCmpl+0x246>

  case HCI_OPCODE_LE_SET_EXT_SCAN_ENABLE:
    cbackEvt = HCI_LE_EXT_SCAN_ENABLE_CMPL_CBACK_EVT;
   184e8:	2336      	movs	r3, #54	; 0x36
   184ea:	75fb      	strb	r3, [r7, #23]
    break;
   184ec:	e015      	b.n	1851a <hciEvtProcessCmdCmpl+0x246>

  case HCI_OPCODE_LE_SET_EXT_ADV_ENABLE:
    cbackEvt = HCI_LE_EXT_ADV_ENABLE_CMPL_CBACK_EVT;
   184ee:	2337      	movs	r3, #55	; 0x37
   184f0:	75fb      	strb	r3, [r7, #23]
    break;
   184f2:	e012      	b.n	1851a <hciEvtProcessCmdCmpl+0x246>
  
  case HCI_OPCODE_LE_SET_PER_ADV_ENABLE:
    cbackEvt = HCI_LE_PER_ADV_ENABLE_CMPL_CBACK_EVT;
   184f4:	2338      	movs	r3, #56	; 0x38
   184f6:	75fb      	strb	r3, [r7, #23]
    break;
   184f8:	e00f      	b.n	1851a <hciEvtProcessCmdCmpl+0x246>

  default:
    /* test for vendor specific command completion OGF. */
    if (HCI_OGF(opcode) == HCI_OGF_VENDOR_SPEC)
   184fa:	89bb      	ldrh	r3, [r7, #12]
   184fc:	0a9b      	lsrs	r3, r3, #10
   184fe:	b29b      	uxth	r3, r3
   18500:	2b3f      	cmp	r3, #63	; 0x3f
   18502:	d109      	bne.n	18518 <hciEvtProcessCmdCmpl+0x244>
    {
      cbackEvt = hciCoreVsCmdCmplRcvd(opcode, p, len);
   18504:	89ba      	ldrh	r2, [r7, #12]
   18506:	78fb      	ldrb	r3, [r7, #3]
   18508:	4610      	mov	r0, r2
   1850a:	6879      	ldr	r1, [r7, #4]
   1850c:	461a      	mov	r2, r3
   1850e:	f000 fcc1 	bl	18e94 <hciCoreVsCmdCmplRcvd>
   18512:	4603      	mov	r3, r0
   18514:	75fb      	strb	r3, [r7, #23]
    }
    break;
   18516:	e7ff      	b.n	18518 <hciEvtProcessCmdCmpl+0x244>
   18518:	bf00      	nop
  }

  /* if callback is executed for this event */
  if (cbackEvt != 0)
   1851a:	7dfb      	ldrb	r3, [r7, #23]
   1851c:	2b00      	cmp	r3, #0
   1851e:	d021      	beq.n	18564 <hciEvtProcessCmdCmpl+0x290>
  {
    /* allocate temp buffer */
    if ((pMsg = WsfBufAlloc(hciEvtCbackLen[cbackEvt])) != NULL)
   18520:	7dfb      	ldrb	r3, [r7, #23]
   18522:	4a15      	ldr	r2, [pc, #84]	; (18578 <hciEvtProcessCmdCmpl+0x2a4>)
   18524:	5cd3      	ldrb	r3, [r2, r3]
   18526:	b29b      	uxth	r3, r3
   18528:	4618      	mov	r0, r3
   1852a:	f000 fd77 	bl	1901c <WsfBufAlloc>
   1852e:	60b8      	str	r0, [r7, #8]
   18530:	68bb      	ldr	r3, [r7, #8]
   18532:	2b00      	cmp	r3, #0
   18534:	d016      	beq.n	18564 <hciEvtProcessCmdCmpl+0x290>
    {
      /* initialize message header */
      pMsg->hdr.param = 0;
   18536:	68bb      	ldr	r3, [r7, #8]
   18538:	2200      	movs	r2, #0
   1853a:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = cbackEvt;
   1853c:	68bb      	ldr	r3, [r7, #8]
   1853e:	7dfa      	ldrb	r2, [r7, #23]
   18540:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
   18542:	68bb      	ldr	r3, [r7, #8]
   18544:	2200      	movs	r2, #0
   18546:	70da      	strb	r2, [r3, #3]

      /* execute parsing function for the event */
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, p, len);
   18548:	7dfb      	ldrb	r3, [r7, #23]
   1854a:	4a0c      	ldr	r2, [pc, #48]	; (1857c <hciEvtProcessCmdCmpl+0x2a8>)
   1854c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   18550:	78fa      	ldrb	r2, [r7, #3]
   18552:	68b8      	ldr	r0, [r7, #8]
   18554:	6879      	ldr	r1, [r7, #4]
   18556:	4798      	blx	r3

      /* execute callback */
      (*cback)(pMsg);
   18558:	693b      	ldr	r3, [r7, #16]
   1855a:	68b8      	ldr	r0, [r7, #8]
   1855c:	4798      	blx	r3

      /* free buffer */
      WsfBufFree(pMsg);
   1855e:	68b8      	ldr	r0, [r7, #8]
   18560:	f000 fd9c 	bl	1909c <WsfBufFree>
    }
  }

  hciCmdRecvCmpl(numPkts);
   18564:	7bfb      	ldrb	r3, [r7, #15]
   18566:	4618      	mov	r0, r3
   18568:	f7fc ff80 	bl	1546c <hciCmdRecvCmpl>
}
   1856c:	3718      	adds	r7, #24
   1856e:	46bd      	mov	sp, r7
   18570:	bd80      	pop	{r7, pc}
   18572:	bf00      	nop
   18574:	1000916c 	.word	0x1000916c
   18578:	00025308 	.word	0x00025308
   1857c:	00025224 	.word	0x00025224

00018580 <hciEvtProcessMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtProcessMsg(uint8_t *pEvt)
{
   18580:	b580      	push	{r7, lr}
   18582:	b088      	sub	sp, #32
   18584:	af00      	add	r7, sp, #0
   18586:	6078      	str	r0, [r7, #4]
  uint8_t   evt;
  uint8_t   subEvt;
  uint8_t   len;
  uint8_t   cbackEvt = 0;
   18588:	2300      	movs	r3, #0
   1858a:	77fb      	strb	r3, [r7, #31]
  hciEvt_t  *pMsg;
  uint16_t  handle;
  hciEvtCback_t cback = hciCb.evtCback;
   1858c:	4ba1      	ldr	r3, [pc, #644]	; (18814 <hciEvtProcessMsg+0x294>)
   1858e:	689b      	ldr	r3, [r3, #8]
   18590:	61bb      	str	r3, [r7, #24]

  /* parse HCI event header */
  BSTREAM_TO_UINT8(evt, pEvt);
   18592:	687b      	ldr	r3, [r7, #4]
   18594:	1c5a      	adds	r2, r3, #1
   18596:	607a      	str	r2, [r7, #4]
   18598:	781b      	ldrb	r3, [r3, #0]
   1859a:	75fb      	strb	r3, [r7, #23]
  BSTREAM_TO_UINT8(len, pEvt);
   1859c:	687b      	ldr	r3, [r7, #4]
   1859e:	1c5a      	adds	r2, r3, #1
   185a0:	607a      	str	r2, [r7, #4]
   185a2:	781b      	ldrb	r3, [r3, #0]
   185a4:	75bb      	strb	r3, [r7, #22]

  /* convert hci event code to internal event code and perform special handling */
  switch (evt)
   185a6:	7dfb      	ldrb	r3, [r7, #23]
   185a8:	2b10      	cmp	r3, #16
   185aa:	f000 8121 	beq.w	187f0 <hciEvtProcessMsg+0x270>
   185ae:	2b10      	cmp	r3, #16
   185b0:	dc10      	bgt.n	185d4 <hciEvtProcessMsg+0x54>
   185b2:	2b0c      	cmp	r3, #12
   185b4:	f000 8103 	beq.w	187be <hciEvtProcessMsg+0x23e>
   185b8:	2b0c      	cmp	r3, #12
   185ba:	dc06      	bgt.n	185ca <hciEvtProcessMsg+0x4a>
   185bc:	2b05      	cmp	r3, #5
   185be:	f000 80ec 	beq.w	1879a <hciEvtProcessMsg+0x21a>
   185c2:	2b08      	cmp	r3, #8
   185c4:	f000 80f2 	beq.w	187ac <hciEvtProcessMsg+0x22c>
      hciEvtStats.numVendorSpecEvt++;
      cbackEvt = HCI_VENDOR_SPEC_CBACK_EVT;
      break;

    default:
      break;
   185c8:	e131      	b.n	1882e <hciEvtProcessMsg+0x2ae>
  /* parse HCI event header */
  BSTREAM_TO_UINT8(evt, pEvt);
  BSTREAM_TO_UINT8(len, pEvt);

  /* convert hci event code to internal event code and perform special handling */
  switch (evt)
   185ca:	2b0e      	cmp	r3, #14
   185cc:	d020      	beq.n	18610 <hciEvtProcessMsg+0x90>
   185ce:	2b0f      	cmp	r3, #15
   185d0:	d014      	beq.n	185fc <hciEvtProcessMsg+0x7c>
      hciEvtStats.numVendorSpecEvt++;
      cbackEvt = HCI_VENDOR_SPEC_CBACK_EVT;
      break;

    default:
      break;
   185d2:	e12c      	b.n	1882e <hciEvtProcessMsg+0x2ae>
  /* parse HCI event header */
  BSTREAM_TO_UINT8(evt, pEvt);
  BSTREAM_TO_UINT8(len, pEvt);

  /* convert hci event code to internal event code and perform special handling */
  switch (evt)
   185d4:	2b30      	cmp	r3, #48	; 0x30
   185d6:	f000 80fb 	beq.w	187d0 <hciEvtProcessMsg+0x250>
   185da:	2b30      	cmp	r3, #48	; 0x30
   185dc:	dc05      	bgt.n	185ea <hciEvtProcessMsg+0x6a>
   185de:	2b13      	cmp	r3, #19
   185e0:	d022      	beq.n	18628 <hciEvtProcessMsg+0xa8>
   185e2:	2b1a      	cmp	r3, #26
   185e4:	f000 80fd 	beq.w	187e2 <hciEvtProcessMsg+0x262>
      hciEvtStats.numVendorSpecEvt++;
      cbackEvt = HCI_VENDOR_SPEC_CBACK_EVT;
      break;

    default:
      break;
   185e8:	e121      	b.n	1882e <hciEvtProcessMsg+0x2ae>
  /* parse HCI event header */
  BSTREAM_TO_UINT8(evt, pEvt);
  BSTREAM_TO_UINT8(len, pEvt);

  /* convert hci event code to internal event code and perform special handling */
  switch (evt)
   185ea:	2b57      	cmp	r3, #87	; 0x57
   185ec:	f000 8109 	beq.w	18802 <hciEvtProcessMsg+0x282>
   185f0:	2bff      	cmp	r3, #255	; 0xff
   185f2:	f000 8113 	beq.w	1881c <hciEvtProcessMsg+0x29c>
   185f6:	2b3e      	cmp	r3, #62	; 0x3e
   185f8:	d020      	beq.n	1863c <hciEvtProcessMsg+0xbc>
      hciEvtStats.numVendorSpecEvt++;
      cbackEvt = HCI_VENDOR_SPEC_CBACK_EVT;
      break;

    default:
      break;
   185fa:	e118      	b.n	1882e <hciEvtProcessMsg+0x2ae>
  /* convert hci event code to internal event code and perform special handling */
  switch (evt)
  {
    case HCI_CMD_STATUS_EVT:
      /* special handling for command status event */
      hciEvtStats.numCmdStatusEvt++;
   185fc:	4b86      	ldr	r3, [pc, #536]	; (18818 <hciEvtProcessMsg+0x298>)
   185fe:	891b      	ldrh	r3, [r3, #8]
   18600:	3301      	adds	r3, #1
   18602:	b29a      	uxth	r2, r3
   18604:	4b84      	ldr	r3, [pc, #528]	; (18818 <hciEvtProcessMsg+0x298>)
   18606:	811a      	strh	r2, [r3, #8]
      hciEvtProcessCmdStatus(pEvt);
   18608:	6878      	ldr	r0, [r7, #4]
   1860a:	f7ff fe37 	bl	1827c <hciEvtProcessCmdStatus>
      break;
   1860e:	e10e      	b.n	1882e <hciEvtProcessMsg+0x2ae>

    case HCI_CMD_CMPL_EVT:
      /* special handling for command complete event */
      hciEvtStats.numCmdCmplEvt++;
   18610:	4b81      	ldr	r3, [pc, #516]	; (18818 <hciEvtProcessMsg+0x298>)
   18612:	88db      	ldrh	r3, [r3, #6]
   18614:	3301      	adds	r3, #1
   18616:	b29a      	uxth	r2, r3
   18618:	4b7f      	ldr	r3, [pc, #508]	; (18818 <hciEvtProcessMsg+0x298>)
   1861a:	80da      	strh	r2, [r3, #6]
      hciEvtProcessCmdCmpl(pEvt, len);
   1861c:	7dbb      	ldrb	r3, [r7, #22]
   1861e:	6878      	ldr	r0, [r7, #4]
   18620:	4619      	mov	r1, r3
   18622:	f7ff fe57 	bl	182d4 <hciEvtProcessCmdCmpl>
        {
          cbackEvt = HCI_LE_CONN_CMPL_CBACK_EVT;
        }
      }
#endif
      break;
   18626:	e102      	b.n	1882e <hciEvtProcessMsg+0x2ae>

    case HCI_NUM_CMPL_PKTS_EVT:
      /* handled internally by hci */
      hciCoreNumCmplPkts(pEvt);
   18628:	6878      	ldr	r0, [r7, #4]
   1862a:	f7fe fa5d 	bl	16ae8 <hciCoreNumCmplPkts>
      hciEvtStats.numCmplPktsEvt++;
   1862e:	4b7a      	ldr	r3, [pc, #488]	; (18818 <hciEvtProcessMsg+0x298>)
   18630:	899b      	ldrh	r3, [r3, #12]
   18632:	3301      	adds	r3, #1
   18634:	b29a      	uxth	r2, r3
   18636:	4b78      	ldr	r3, [pc, #480]	; (18818 <hciEvtProcessMsg+0x298>)
   18638:	819a      	strh	r2, [r3, #12]
      break;
   1863a:	e0f8      	b.n	1882e <hciEvtProcessMsg+0x2ae>

    case HCI_LE_META_EVT:
      BSTREAM_TO_UINT8(subEvt, pEvt);
   1863c:	687b      	ldr	r3, [r7, #4]
   1863e:	1c5a      	adds	r2, r3, #1
   18640:	607a      	str	r2, [r7, #4]
   18642:	781b      	ldrb	r3, [r3, #0]
   18644:	757b      	strb	r3, [r7, #21]
      hciEvtStats.numLeMetaEvt++;
   18646:	4b74      	ldr	r3, [pc, #464]	; (18818 <hciEvtProcessMsg+0x298>)
   18648:	8a5b      	ldrh	r3, [r3, #18]
   1864a:	3301      	adds	r3, #1
   1864c:	b29a      	uxth	r2, r3
   1864e:	4b72      	ldr	r3, [pc, #456]	; (18818 <hciEvtProcessMsg+0x298>)
   18650:	825a      	strh	r2, [r3, #18]
      switch (subEvt)
   18652:	7d7b      	ldrb	r3, [r7, #21]
   18654:	3b01      	subs	r3, #1
   18656:	2b12      	cmp	r3, #18
   18658:	f200 809d 	bhi.w	18796 <hciEvtProcessMsg+0x216>
   1865c:	a201      	add	r2, pc, #4	; (adr r2, 18664 <hciEvtProcessMsg+0xe4>)
   1865e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   18662:	bf00      	nop
   18664:	000186b1 	.word	0x000186b1
   18668:	000186df 	.word	0x000186df
   1866c:	000186eb 	.word	0x000186eb
   18670:	000186f1 	.word	0x000186f1
   18674:	000186f7 	.word	0x000186f7
   18678:	00018737 	.word	0x00018737
   1867c:	0001873d 	.word	0x0001873d
   18680:	00018743 	.word	0x00018743
   18684:	0001874f 	.word	0x0001874f
   18688:	000186fd 	.word	0x000186fd
   1868c:	0001872b 	.word	0x0001872b
   18690:	0001875b 	.word	0x0001875b
   18694:	00018761 	.word	0x00018761
   18698:	0001877f 	.word	0x0001877f
   1869c:	00018785 	.word	0x00018785
   186a0:	00018791 	.word	0x00018791
   186a4:	0001876d 	.word	0x0001876d
   186a8:	00018773 	.word	0x00018773
   186ac:	00018779 	.word	0x00018779
      {
        case HCI_LE_CONN_CMPL_EVT:
          /* if connection created successfully */
          if (*pEvt == HCI_SUCCESS)
   186b0:	687b      	ldr	r3, [r7, #4]
   186b2:	781b      	ldrb	r3, [r3, #0]
   186b4:	2b00      	cmp	r3, #0
   186b6:	d10f      	bne.n	186d8 <hciEvtProcessMsg+0x158>
          {
            BYTES_TO_UINT16(handle, (pEvt + 1));
   186b8:	687b      	ldr	r3, [r7, #4]
   186ba:	3301      	adds	r3, #1
   186bc:	781b      	ldrb	r3, [r3, #0]
   186be:	b29a      	uxth	r2, r3
   186c0:	687b      	ldr	r3, [r7, #4]
   186c2:	3302      	adds	r3, #2
   186c4:	781b      	ldrb	r3, [r3, #0]
   186c6:	b29b      	uxth	r3, r3
   186c8:	021b      	lsls	r3, r3, #8
   186ca:	b29b      	uxth	r3, r3
   186cc:	4413      	add	r3, r2
   186ce:	827b      	strh	r3, [r7, #18]
            hciCoreConnOpen(handle);
   186d0:	8a7b      	ldrh	r3, [r7, #18]
   186d2:	4618      	mov	r0, r3
   186d4:	f7fd feb0 	bl	16438 <hciCoreConnOpen>
          }
          cbackEvt = HCI_LE_CONN_CMPL_CBACK_EVT;
   186d8:	2301      	movs	r3, #1
   186da:	77fb      	strb	r3, [r7, #31]
          break;
   186dc:	e05c      	b.n	18798 <hciEvtProcessMsg+0x218>

        case HCI_LE_ADV_REPORT_EVT:
          /* special case for advertising report */
          hciEvtProcessLeAdvReport(pEvt, len);
   186de:	7dbb      	ldrb	r3, [r7, #22]
   186e0:	6878      	ldr	r0, [r7, #4]
   186e2:	4619      	mov	r1, r3
   186e4:	f7ff fabe 	bl	17c64 <hciEvtProcessLeAdvReport>
          break;
   186e8:	e056      	b.n	18798 <hciEvtProcessMsg+0x218>

        case HCI_LE_CONN_UPDATE_CMPL_EVT:
          cbackEvt = HCI_LE_CONN_UPDATE_CMPL_CBACK_EVT;
   186ea:	2304      	movs	r3, #4
   186ec:	77fb      	strb	r3, [r7, #31]
          break;
   186ee:	e053      	b.n	18798 <hciEvtProcessMsg+0x218>

        case HCI_LE_READ_REMOTE_FEAT_CMPL_EVT:
          cbackEvt = HCI_LE_READ_REMOTE_FEAT_CMPL_CBACK_EVT;
   186f0:	230b      	movs	r3, #11
   186f2:	77fb      	strb	r3, [r7, #31]
          break;
   186f4:	e050      	b.n	18798 <hciEvtProcessMsg+0x218>

        case HCI_LE_LTK_REQ_EVT:
          cbackEvt = HCI_LE_LTK_REQ_CBACK_EVT;
   186f6:	2310      	movs	r3, #16
   186f8:	77fb      	strb	r3, [r7, #31]
          break;
   186fa:	e04d      	b.n	18798 <hciEvtProcessMsg+0x218>

        case HCI_LE_ENHANCED_CONN_CMPL_EVT:
          /* if connection created successfully */
          if (*pEvt == HCI_SUCCESS)
   186fc:	687b      	ldr	r3, [r7, #4]
   186fe:	781b      	ldrb	r3, [r3, #0]
   18700:	2b00      	cmp	r3, #0
   18702:	d10f      	bne.n	18724 <hciEvtProcessMsg+0x1a4>
          {
            BYTES_TO_UINT16(handle, (pEvt + 1));
   18704:	687b      	ldr	r3, [r7, #4]
   18706:	3301      	adds	r3, #1
   18708:	781b      	ldrb	r3, [r3, #0]
   1870a:	b29a      	uxth	r2, r3
   1870c:	687b      	ldr	r3, [r7, #4]
   1870e:	3302      	adds	r3, #2
   18710:	781b      	ldrb	r3, [r3, #0]
   18712:	b29b      	uxth	r3, r3
   18714:	021b      	lsls	r3, r3, #8
   18716:	b29b      	uxth	r3, r3
   18718:	4413      	add	r3, r2
   1871a:	827b      	strh	r3, [r7, #18]
            hciCoreConnOpen(handle);
   1871c:	8a7b      	ldrh	r3, [r7, #18]
   1871e:	4618      	mov	r0, r3
   18720:	f7fd fe8a 	bl	16438 <hciCoreConnOpen>
          }
          cbackEvt = HCI_LE_ENHANCED_CONN_CMPL_CBACK_EVT;
   18724:	2302      	movs	r3, #2
   18726:	77fb      	strb	r3, [r7, #31]
          break;
   18728:	e036      	b.n	18798 <hciEvtProcessMsg+0x218>

        case HCI_LE_DIRECT_ADV_REPORT_EVT:
          /* special case for direct advertising report */
          hciEvtProcessLeDirectAdvReport(pEvt, len);
   1872a:	7dbb      	ldrb	r3, [r7, #22]
   1872c:	6878      	ldr	r0, [r7, #4]
   1872e:	4619      	mov	r1, r3
   18730:	f7ff fd34 	bl	1819c <hciEvtProcessLeDirectAdvReport>
          break;
   18734:	e030      	b.n	18798 <hciEvtProcessMsg+0x218>

        case HCI_LE_REM_CONN_PARAM_REQ_EVT:
          cbackEvt = HCI_LE_REM_CONN_PARAM_REQ_CBACK_EVT;
   18736:	2323      	movs	r3, #35	; 0x23
   18738:	77fb      	strb	r3, [r7, #31]
          break;
   1873a:	e02d      	b.n	18798 <hciEvtProcessMsg+0x218>

        case HCI_LE_DATA_LEN_CHANGE_EVT:
          cbackEvt = HCI_LE_DATA_LEN_CHANGE_CBACK_EVT;
   1873c:	2324      	movs	r3, #36	; 0x24
   1873e:	77fb      	strb	r3, [r7, #31]
          break;
   18740:	e02a      	b.n	18798 <hciEvtProcessMsg+0x218>

        case HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_EVT:
          cback = hciCb.secCback;
   18742:	4b34      	ldr	r3, [pc, #208]	; (18814 <hciEvtProcessMsg+0x294>)
   18744:	68db      	ldr	r3, [r3, #12]
   18746:	61bb      	str	r3, [r7, #24]
          cbackEvt = HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_CBACK_EVT;
   18748:	2325      	movs	r3, #37	; 0x25
   1874a:	77fb      	strb	r3, [r7, #31]
          break;
   1874c:	e024      	b.n	18798 <hciEvtProcessMsg+0x218>

        case HCI_LE_GENERATE_DHKEY_CMPL_EVT:
          cback = hciCb.secCback;
   1874e:	4b31      	ldr	r3, [pc, #196]	; (18814 <hciEvtProcessMsg+0x294>)
   18750:	68db      	ldr	r3, [r3, #12]
   18752:	61bb      	str	r3, [r7, #24]
          cbackEvt = HCI_LE_GENERATE_DHKEY_CMPL_CBACK_EVT;
   18754:	2326      	movs	r3, #38	; 0x26
   18756:	77fb      	strb	r3, [r7, #31]
          break;
   18758:	e01e      	b.n	18798 <hciEvtProcessMsg+0x218>

        case HCI_LE_PHY_UPDATE_CMPL_EVT:
          cbackEvt = HCI_LE_PHY_UPDATE_CMPL_CBACK_EVT;
   1875a:	232b      	movs	r3, #43	; 0x2b
   1875c:	77fb      	strb	r3, [r7, #31]
          break;
   1875e:	e01b      	b.n	18798 <hciEvtProcessMsg+0x218>

        case HCI_LE_EXT_ADV_REPORT_EVT:
          /* special case for extended advertising report */
          hciEvtProcessLeExtAdvReport(pEvt, len);
   18760:	7dbb      	ldrb	r3, [r7, #22]
   18762:	6878      	ldr	r0, [r7, #4]
   18764:	4619      	mov	r1, r3
   18766:	f7ff faf3 	bl	17d50 <hciEvtProcessLeExtAdvReport>
          break;
   1876a:	e015      	b.n	18798 <hciEvtProcessMsg+0x218>

        case HCI_LE_SCAN_TIMEOUT_EVT:
          cbackEvt = HCI_LE_SCAN_TIMEOUT_CBACK_EVT;
   1876c:	232d      	movs	r3, #45	; 0x2d
   1876e:	77fb      	strb	r3, [r7, #31]
          break;
   18770:	e012      	b.n	18798 <hciEvtProcessMsg+0x218>

        case HCI_LE_ADV_SET_TERM_EVT:
          cbackEvt = HCI_LE_ADV_SET_TERM_CBACK_EVT;
   18772:	232e      	movs	r3, #46	; 0x2e
   18774:	77fb      	strb	r3, [r7, #31]
          break;
   18776:	e00f      	b.n	18798 <hciEvtProcessMsg+0x218>

        case HCI_LE_SCAN_REQ_RCVD_EVT:
          cbackEvt = HCI_LE_SCAN_REQ_RCVD_CBACK_EVT;
   18778:	232f      	movs	r3, #47	; 0x2f
   1877a:	77fb      	strb	r3, [r7, #31]
          break;
   1877c:	e00c      	b.n	18798 <hciEvtProcessMsg+0x218>

        case HCI_LE_PER_ADV_SYNC_EST_EVT:
          cbackEvt = HCI_LE_PER_ADV_SYNC_EST_CBACK_EVT;
   1877e:	2330      	movs	r3, #48	; 0x30
   18780:	77fb      	strb	r3, [r7, #31]
          break;
   18782:	e009      	b.n	18798 <hciEvtProcessMsg+0x218>

        case HCI_LE_PER_ADV_REPORT_EVT:
          /* special case for periodic advertising report */
          hciEvtProcessLePerAdvReport(pEvt, len);
   18784:	7dbb      	ldrb	r3, [r7, #22]
   18786:	6878      	ldr	r0, [r7, #4]
   18788:	4619      	mov	r1, r3
   1878a:	f7ff fc6f 	bl	1806c <hciEvtProcessLePerAdvReport>
          break;
   1878e:	e003      	b.n	18798 <hciEvtProcessMsg+0x218>

        case HCI_LE_PER_ADV_SYNC_LOST_EVT:
          cbackEvt = HCI_LE_PER_ADV_SYNC_LOST_CBACK_EVT;
   18790:	2332      	movs	r3, #50	; 0x32
   18792:	77fb      	strb	r3, [r7, #31]
          break;
   18794:	e000      	b.n	18798 <hciEvtProcessMsg+0x218>

        default:
          break;
   18796:	bf00      	nop
      }
      break;
   18798:	e049      	b.n	1882e <hciEvtProcessMsg+0x2ae>

    case HCI_DISCONNECT_CMPL_EVT:
      hciEvtStats.numDiscCmplEvt++;
   1879a:	4b1f      	ldr	r3, [pc, #124]	; (18818 <hciEvtProcessMsg+0x298>)
   1879c:	881b      	ldrh	r3, [r3, #0]
   1879e:	3301      	adds	r3, #1
   187a0:	b29a      	uxth	r2, r3
   187a2:	4b1d      	ldr	r3, [pc, #116]	; (18818 <hciEvtProcessMsg+0x298>)
   187a4:	801a      	strh	r2, [r3, #0]
      cbackEvt = HCI_DISCONNECT_CMPL_CBACK_EVT;
   187a6:	2303      	movs	r3, #3
   187a8:	77fb      	strb	r3, [r7, #31]
      break;
   187aa:	e040      	b.n	1882e <hciEvtProcessMsg+0x2ae>

    case HCI_ENC_CHANGE_EVT:
      hciEvtStats.numEncChangeEvt++;
   187ac:	4b1a      	ldr	r3, [pc, #104]	; (18818 <hciEvtProcessMsg+0x298>)
   187ae:	885b      	ldrh	r3, [r3, #2]
   187b0:	3301      	adds	r3, #1
   187b2:	b29a      	uxth	r2, r3
   187b4:	4b18      	ldr	r3, [pc, #96]	; (18818 <hciEvtProcessMsg+0x298>)
   187b6:	805a      	strh	r2, [r3, #2]
      cbackEvt = HCI_ENC_CHANGE_CBACK_EVT;
   187b8:	230f      	movs	r3, #15
   187ba:	77fb      	strb	r3, [r7, #31]
      break;
   187bc:	e037      	b.n	1882e <hciEvtProcessMsg+0x2ae>

    case HCI_READ_REMOTE_VER_INFO_CMPL_EVT:
      hciEvtStats.numReadRemoteVerInfoCmpEvt++;
   187be:	4b16      	ldr	r3, [pc, #88]	; (18818 <hciEvtProcessMsg+0x298>)
   187c0:	889b      	ldrh	r3, [r3, #4]
   187c2:	3301      	adds	r3, #1
   187c4:	b29a      	uxth	r2, r3
   187c6:	4b14      	ldr	r3, [pc, #80]	; (18818 <hciEvtProcessMsg+0x298>)
   187c8:	809a      	strh	r2, [r3, #4]
      cbackEvt = HCI_READ_REMOTE_VER_INFO_CMPL_CBACK_EVT;
   187ca:	230a      	movs	r3, #10
   187cc:	77fb      	strb	r3, [r7, #31]
      break;
   187ce:	e02e      	b.n	1882e <hciEvtProcessMsg+0x2ae>

    case HCI_ENC_KEY_REFRESH_CMPL_EVT:
      hciEvtStats.numEncKeyRefreshCmplEvt++;
   187d0:	4b11      	ldr	r3, [pc, #68]	; (18818 <hciEvtProcessMsg+0x298>)
   187d2:	8a1b      	ldrh	r3, [r3, #16]
   187d4:	3301      	adds	r3, #1
   187d6:	b29a      	uxth	r2, r3
   187d8:	4b0f      	ldr	r3, [pc, #60]	; (18818 <hciEvtProcessMsg+0x298>)
   187da:	821a      	strh	r2, [r3, #16]
      cbackEvt = HCI_ENC_KEY_REFRESH_CMPL_CBACK_EVT;
   187dc:	230e      	movs	r3, #14
   187de:	77fb      	strb	r3, [r7, #31]
      break;
   187e0:	e025      	b.n	1882e <hciEvtProcessMsg+0x2ae>

    case HCI_DATA_BUF_OVERFLOW_EVT:
      /* handled internally by hci */
      /* optional */
      hciEvtStats.numDataBufOverflowEvt++;
   187e2:	4b0d      	ldr	r3, [pc, #52]	; (18818 <hciEvtProcessMsg+0x298>)
   187e4:	89db      	ldrh	r3, [r3, #14]
   187e6:	3301      	adds	r3, #1
   187e8:	b29a      	uxth	r2, r3
   187ea:	4b0b      	ldr	r3, [pc, #44]	; (18818 <hciEvtProcessMsg+0x298>)
   187ec:	81da      	strh	r2, [r3, #14]
      break;
   187ee:	e01e      	b.n	1882e <hciEvtProcessMsg+0x2ae>

    case HCI_HW_ERROR_EVT:
      hciEvtStats.numHwErrorEvt++;
   187f0:	4b09      	ldr	r3, [pc, #36]	; (18818 <hciEvtProcessMsg+0x298>)
   187f2:	895b      	ldrh	r3, [r3, #10]
   187f4:	3301      	adds	r3, #1
   187f6:	b29a      	uxth	r2, r3
   187f8:	4b07      	ldr	r3, [pc, #28]	; (18818 <hciEvtProcessMsg+0x298>)
   187fa:	815a      	strh	r2, [r3, #10]
      cbackEvt = HCI_HW_ERROR_CBACK_EVT;
   187fc:	2314      	movs	r3, #20
   187fe:	77fb      	strb	r3, [r7, #31]
      break;
   18800:	e015      	b.n	1882e <hciEvtProcessMsg+0x2ae>

    case HCI_AUTH_PAYLOAD_TIMEOUT_EVT:
      hciEvtStats.numAuthToEvt++;
   18802:	4b05      	ldr	r3, [pc, #20]	; (18818 <hciEvtProcessMsg+0x298>)
   18804:	8adb      	ldrh	r3, [r3, #22]
   18806:	3301      	adds	r3, #1
   18808:	b29a      	uxth	r2, r3
   1880a:	4b03      	ldr	r3, [pc, #12]	; (18818 <hciEvtProcessMsg+0x298>)
   1880c:	82da      	strh	r2, [r3, #22]
      cbackEvt = HCI_AUTH_PAYLOAD_TO_EXPIRED_CBACK_EVT;
   1880e:	2328      	movs	r3, #40	; 0x28
   18810:	77fb      	strb	r3, [r7, #31]
      break;
   18812:	e00c      	b.n	1882e <hciEvtProcessMsg+0x2ae>
   18814:	1000916c 	.word	0x1000916c
   18818:	10003ffc 	.word	0x10003ffc
      /* for nonstandard controllers that send a vendor-specific event instead
       * of a command complete event
       */
      hciCmdRecvCmpl(1);
#endif
      hciEvtStats.numVendorSpecEvt++;
   1881c:	4b21      	ldr	r3, [pc, #132]	; (188a4 <hciEvtProcessMsg+0x324>)
   1881e:	8a9b      	ldrh	r3, [r3, #20]
   18820:	3301      	adds	r3, #1
   18822:	b29a      	uxth	r2, r3
   18824:	4b1f      	ldr	r3, [pc, #124]	; (188a4 <hciEvtProcessMsg+0x324>)
   18826:	829a      	strh	r2, [r3, #20]
      cbackEvt = HCI_VENDOR_SPEC_CBACK_EVT;
   18828:	2313      	movs	r3, #19
   1882a:	77fb      	strb	r3, [r7, #31]
      break;
   1882c:	bf00      	nop
    default:
      break;
  }

  /* if callback is executed for this event */
  if (cbackEvt != 0)
   1882e:	7ffb      	ldrb	r3, [r7, #31]
   18830:	2b00      	cmp	r3, #0
   18832:	d034      	beq.n	1889e <hciEvtProcessMsg+0x31e>
  {
    /* allocate temp buffer */
    if ((pMsg = WsfBufAlloc(hciEvtCbackLen[cbackEvt])) != NULL)
   18834:	7ffb      	ldrb	r3, [r7, #31]
   18836:	4a1c      	ldr	r2, [pc, #112]	; (188a8 <hciEvtProcessMsg+0x328>)
   18838:	5cd3      	ldrb	r3, [r2, r3]
   1883a:	b29b      	uxth	r3, r3
   1883c:	4618      	mov	r0, r3
   1883e:	f000 fbed 	bl	1901c <WsfBufAlloc>
   18842:	60f8      	str	r0, [r7, #12]
   18844:	68fb      	ldr	r3, [r7, #12]
   18846:	2b00      	cmp	r3, #0
   18848:	d016      	beq.n	18878 <hciEvtProcessMsg+0x2f8>
    {
      /* initialize message header */
      pMsg->hdr.param = 0;
   1884a:	68fb      	ldr	r3, [r7, #12]
   1884c:	2200      	movs	r2, #0
   1884e:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = cbackEvt;
   18850:	68fb      	ldr	r3, [r7, #12]
   18852:	7ffa      	ldrb	r2, [r7, #31]
   18854:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
   18856:	68fb      	ldr	r3, [r7, #12]
   18858:	2200      	movs	r2, #0
   1885a:	70da      	strb	r2, [r3, #3]

      /* execute parsing function for the event */
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, pEvt, len);
   1885c:	7ffb      	ldrb	r3, [r7, #31]
   1885e:	4a13      	ldr	r2, [pc, #76]	; (188ac <hciEvtProcessMsg+0x32c>)
   18860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   18864:	7dba      	ldrb	r2, [r7, #22]
   18866:	68f8      	ldr	r0, [r7, #12]
   18868:	6879      	ldr	r1, [r7, #4]
   1886a:	4798      	blx	r3

      /* execute callback */
      (*cback)(pMsg);
   1886c:	69bb      	ldr	r3, [r7, #24]
   1886e:	68f8      	ldr	r0, [r7, #12]
   18870:	4798      	blx	r3

      /* free buffer */
      WsfBufFree(pMsg);
   18872:	68f8      	ldr	r0, [r7, #12]
   18874:	f000 fc12 	bl	1909c <WsfBufFree>
    }

    /* execute core procedure for connection close after callback */
    if (cbackEvt == HCI_DISCONNECT_CMPL_CBACK_EVT)
   18878:	7ffb      	ldrb	r3, [r7, #31]
   1887a:	2b03      	cmp	r3, #3
   1887c:	d10f      	bne.n	1889e <hciEvtProcessMsg+0x31e>
    {
      BYTES_TO_UINT16(handle, (pEvt + 1));
   1887e:	687b      	ldr	r3, [r7, #4]
   18880:	3301      	adds	r3, #1
   18882:	781b      	ldrb	r3, [r3, #0]
   18884:	b29a      	uxth	r2, r3
   18886:	687b      	ldr	r3, [r7, #4]
   18888:	3302      	adds	r3, #2
   1888a:	781b      	ldrb	r3, [r3, #0]
   1888c:	b29b      	uxth	r3, r3
   1888e:	021b      	lsls	r3, r3, #8
   18890:	b29b      	uxth	r3, r3
   18892:	4413      	add	r3, r2
   18894:	827b      	strh	r3, [r7, #18]
      hciCoreConnClose(handle);
   18896:	8a7b      	ldrh	r3, [r7, #18]
   18898:	4618      	mov	r0, r3
   1889a:	f7fd fdd9 	bl	16450 <hciCoreConnClose>
    }
  }
}
   1889e:	3720      	adds	r7, #32
   188a0:	46bd      	mov	sp, r7
   188a2:	bd80      	pop	{r7, pc}
   188a4:	10003ffc 	.word	0x10003ffc
   188a8:	00025308 	.word	0x00025308
   188ac:	00025224 	.word	0x00025224

000188b0 <hciTrSendAclData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciTrSendAclData(void *pContext, uint8_t *pData)
{
   188b0:	b580      	push	{r7, lr}
   188b2:	b084      	sub	sp, #16
   188b4:	af00      	add	r7, sp, #0
   188b6:	6078      	str	r0, [r7, #4]
   188b8:	6039      	str	r1, [r7, #0]
  uint16_t   len;

  /* get 16-bit length */
  BYTES_TO_UINT16(len, &pData[2]);
   188ba:	683b      	ldr	r3, [r7, #0]
   188bc:	3302      	adds	r3, #2
   188be:	781b      	ldrb	r3, [r3, #0]
   188c0:	b29a      	uxth	r2, r3
   188c2:	683b      	ldr	r3, [r7, #0]
   188c4:	3303      	adds	r3, #3
   188c6:	781b      	ldrb	r3, [r3, #0]
   188c8:	b29b      	uxth	r3, r3
   188ca:	021b      	lsls	r3, r3, #8
   188cc:	b29b      	uxth	r3, r3
   188ce:	4413      	add	r3, r2
   188d0:	81fb      	strh	r3, [r7, #14]
  len += HCI_ACL_HDR_LEN;
   188d2:	89fb      	ldrh	r3, [r7, #14]
   188d4:	3304      	adds	r3, #4
   188d6:	81fb      	strh	r3, [r7, #14]

  /* dump event for protocol analysis */
  HCI_PDUMP_TX_ACL(len, pData);

  /* transmit ACL header and data */
  if (hciDrvWrite(HCI_ACL_TYPE, len, pData) == len)
   188d8:	89fb      	ldrh	r3, [r7, #14]
   188da:	2002      	movs	r0, #2
   188dc:	4619      	mov	r1, r3
   188de:	683a      	ldr	r2, [r7, #0]
   188e0:	f7fc fb08 	bl	14ef4 <hciDrvWrite>
   188e4:	4603      	mov	r3, r0
   188e6:	461a      	mov	r2, r3
   188e8:	89fb      	ldrh	r3, [r7, #14]
   188ea:	4293      	cmp	r3, r2
   188ec:	d103      	bne.n	188f6 <hciTrSendAclData+0x46>
  {
    /* free buffer */
    hciCoreTxAclComplete(pContext, pData);
   188ee:	6878      	ldr	r0, [r7, #4]
   188f0:	6839      	ldr	r1, [r7, #0]
   188f2:	f7fd fee5 	bl	166c0 <hciCoreTxAclComplete>
  }
}
   188f6:	3710      	adds	r7, #16
   188f8:	46bd      	mov	sp, r7
   188fa:	bd80      	pop	{r7, pc}

000188fc <hciTrSendCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciTrSendCmd(uint8_t *pData)
{
   188fc:	b580      	push	{r7, lr}
   188fe:	b084      	sub	sp, #16
   18900:	af00      	add	r7, sp, #0
   18902:	6078      	str	r0, [r7, #4]
  uint8_t   len;

  /* get length */
  len = pData[2] + HCI_CMD_HDR_LEN;
   18904:	687b      	ldr	r3, [r7, #4]
   18906:	3302      	adds	r3, #2
   18908:	781b      	ldrb	r3, [r3, #0]
   1890a:	3303      	adds	r3, #3
   1890c:	73fb      	strb	r3, [r7, #15]

  /* dump event for protocol analysis */
  HCI_PDUMP_CMD(len, pData);

  /* transmit ACL header and data */
  if (hciDrvWrite(HCI_CMD_TYPE, len, pData) == len)
   1890e:	7bfb      	ldrb	r3, [r7, #15]
   18910:	b29b      	uxth	r3, r3
   18912:	2001      	movs	r0, #1
   18914:	4619      	mov	r1, r3
   18916:	687a      	ldr	r2, [r7, #4]
   18918:	f7fc faec 	bl	14ef4 <hciDrvWrite>
   1891c:	4603      	mov	r3, r0
   1891e:	461a      	mov	r2, r3
   18920:	7bfb      	ldrb	r3, [r7, #15]
   18922:	b29b      	uxth	r3, r3
   18924:	429a      	cmp	r2, r3
   18926:	d102      	bne.n	1892e <hciTrSendCmd+0x32>
  {
    /* free buffer */
    WsfMsgFree(pData);
   18928:	6878      	ldr	r0, [r7, #4]
   1892a:	f000 fc1f 	bl	1916c <WsfMsgFree>
  }
}
   1892e:	3710      	adds	r7, #16
   18930:	46bd      	mov	sp, r7
   18932:	bd80      	pop	{r7, pc}

00018934 <hciTrSerialRxIncoming>:
 *
 *  \return The number of bytes consumed.
 */
/*************************************************************************************************/
uint16_t hciTrSerialRxIncoming(uint8_t *pBuf, uint16_t len)
{
   18934:	b580      	push	{r7, lr}
   18936:	b084      	sub	sp, #16
   18938:	af00      	add	r7, sp, #0
   1893a:	6078      	str	r0, [r7, #4]
   1893c:	460b      	mov	r3, r1
   1893e:	807b      	strh	r3, [r7, #2]
  static uint8_t    *pDataRx;

  uint8_t   dataByte;
  uint16_t  consumed_bytes;

  consumed_bytes = 0;
   18940:	2300      	movs	r3, #0
   18942:	81fb      	strh	r3, [r7, #14]
  /* loop until all bytes of incoming buffer are handled */
  while (len)
   18944:	e0ea      	b.n	18b1c <hciTrSerialRxIncoming+0x1e8>
  {
    /* read single byte from incoming buffer and advance to next byte */
    dataByte = *pBuf;
   18946:	687b      	ldr	r3, [r7, #4]
   18948:	781b      	ldrb	r3, [r3, #0]
   1894a:	723b      	strb	r3, [r7, #8]
 
    /* --- Idle State --- */
    if (stateRx == HCI_RX_STATE_IDLE)
   1894c:	4b78      	ldr	r3, [pc, #480]	; (18b30 <hciTrSerialRxIncoming+0x1fc>)
   1894e:	781b      	ldrb	r3, [r3, #0]
   18950:	2b00      	cmp	r3, #0
   18952:	d115      	bne.n	18980 <hciTrSerialRxIncoming+0x4c>
    {
      /* save the packet type */
      pktIndRx = dataByte;
   18954:	4a77      	ldr	r2, [pc, #476]	; (18b34 <hciTrSerialRxIncoming+0x200>)
   18956:	7a3b      	ldrb	r3, [r7, #8]
   18958:	7013      	strb	r3, [r2, #0]
      iRx      = 0;
   1895a:	4b77      	ldr	r3, [pc, #476]	; (18b38 <hciTrSerialRxIncoming+0x204>)
   1895c:	2200      	movs	r2, #0
   1895e:	801a      	strh	r2, [r3, #0]
      stateRx  = HCI_RX_STATE_HEADER;
   18960:	4b73      	ldr	r3, [pc, #460]	; (18b30 <hciTrSerialRxIncoming+0x1fc>)
   18962:	2201      	movs	r2, #1
   18964:	701a      	strb	r2, [r3, #0]
      g_bHCIReceivingPacket = TRUE;
   18966:	4b75      	ldr	r3, [pc, #468]	; (18b3c <hciTrSerialRxIncoming+0x208>)
   18968:	2201      	movs	r2, #1
   1896a:	701a      	strb	r2, [r3, #0]
      pBuf++;
   1896c:	687b      	ldr	r3, [r7, #4]
   1896e:	3301      	adds	r3, #1
   18970:	607b      	str	r3, [r7, #4]
      consumed_bytes++;
   18972:	89fb      	ldrh	r3, [r7, #14]
   18974:	3301      	adds	r3, #1
   18976:	81fb      	strh	r3, [r7, #14]
      len--;
   18978:	887b      	ldrh	r3, [r7, #2]
   1897a:	3b01      	subs	r3, #1
   1897c:	807b      	strh	r3, [r7, #2]
   1897e:	e0b7      	b.n	18af0 <hciTrSerialRxIncoming+0x1bc>
    }

    /* --- Header State --- */
    else if (stateRx == HCI_RX_STATE_HEADER)
   18980:	4b6b      	ldr	r3, [pc, #428]	; (18b30 <hciTrSerialRxIncoming+0x1fc>)
   18982:	781b      	ldrb	r3, [r3, #0]
   18984:	2b01      	cmp	r3, #1
   18986:	f040 8092 	bne.w	18aae <hciTrSerialRxIncoming+0x17a>
    {
      uint8_t  hdrLen = 0;
   1898a:	2300      	movs	r3, #0
   1898c:	737b      	strb	r3, [r7, #13]
      uint16_t dataLen = 0;
   1898e:	2300      	movs	r3, #0
   18990:	817b      	strh	r3, [r7, #10]

      /* determine header length based on packet type */
      if (pktIndRx == HCI_EVT_TYPE)
   18992:	4b68      	ldr	r3, [pc, #416]	; (18b34 <hciTrSerialRxIncoming+0x200>)
   18994:	781b      	ldrb	r3, [r3, #0]
   18996:	2b04      	cmp	r3, #4
   18998:	d102      	bne.n	189a0 <hciTrSerialRxIncoming+0x6c>
      {
        hdrLen = HCI_EVT_HDR_LEN;
   1899a:	2302      	movs	r3, #2
   1899c:	737b      	strb	r3, [r7, #13]
   1899e:	e008      	b.n	189b2 <hciTrSerialRxIncoming+0x7e>
      }
      else if (pktIndRx == HCI_ACL_TYPE)
   189a0:	4b64      	ldr	r3, [pc, #400]	; (18b34 <hciTrSerialRxIncoming+0x200>)
   189a2:	781b      	ldrb	r3, [r3, #0]
   189a4:	2b02      	cmp	r3, #2
   189a6:	d102      	bne.n	189ae <hciTrSerialRxIncoming+0x7a>
      {
        hdrLen = HCI_ACL_HDR_LEN;
   189a8:	2304      	movs	r3, #4
   189aa:	737b      	strb	r3, [r7, #13]
   189ac:	e001      	b.n	189b2 <hciTrSerialRxIncoming+0x7e>
      }
      else
      {
        /* invalid packet type */
        WSF_ASSERT(0);
        return consumed_bytes;
   189ae:	89fb      	ldrh	r3, [r7, #14]
   189b0:	e0b9      	b.n	18b26 <hciTrSerialRxIncoming+0x1f2>
      }

      if (iRx != hdrLen) {
   189b2:	7b7b      	ldrb	r3, [r7, #13]
   189b4:	b29a      	uxth	r2, r3
   189b6:	4b60      	ldr	r3, [pc, #384]	; (18b38 <hciTrSerialRxIncoming+0x204>)
   189b8:	881b      	ldrh	r3, [r3, #0]
   189ba:	429a      	cmp	r2, r3
   189bc:	d012      	beq.n	189e4 <hciTrSerialRxIncoming+0xb0>
        /* copy current byte into the temp header buffer */
        hdrRx[iRx++] = dataByte;
   189be:	4b5e      	ldr	r3, [pc, #376]	; (18b38 <hciTrSerialRxIncoming+0x204>)
   189c0:	881b      	ldrh	r3, [r3, #0]
   189c2:	1c5a      	adds	r2, r3, #1
   189c4:	b291      	uxth	r1, r2
   189c6:	4a5c      	ldr	r2, [pc, #368]	; (18b38 <hciTrSerialRxIncoming+0x204>)
   189c8:	8011      	strh	r1, [r2, #0]
   189ca:	4619      	mov	r1, r3
   189cc:	4a5c      	ldr	r2, [pc, #368]	; (18b40 <hciTrSerialRxIncoming+0x20c>)
   189ce:	7a3b      	ldrb	r3, [r7, #8]
   189d0:	5453      	strb	r3, [r2, r1]
        pBuf++;
   189d2:	687b      	ldr	r3, [r7, #4]
   189d4:	3301      	adds	r3, #1
   189d6:	607b      	str	r3, [r7, #4]
        consumed_bytes++;
   189d8:	89fb      	ldrh	r3, [r7, #14]
   189da:	3301      	adds	r3, #1
   189dc:	81fb      	strh	r3, [r7, #14]
        len--;
   189de:	887b      	ldrh	r3, [r7, #2]
   189e0:	3b01      	subs	r3, #1
   189e2:	807b      	strh	r3, [r7, #2]
      }

      /* see if entire header has been read */
      if (iRx == hdrLen)
   189e4:	7b7b      	ldrb	r3, [r7, #13]
   189e6:	b29a      	uxth	r2, r3
   189e8:	4b53      	ldr	r3, [pc, #332]	; (18b38 <hciTrSerialRxIncoming+0x204>)
   189ea:	881b      	ldrh	r3, [r3, #0]
   189ec:	429a      	cmp	r2, r3
   189ee:	d15d      	bne.n	18aac <hciTrSerialRxIncoming+0x178>
      {
        /* extract data length from header */
        if (pktIndRx == HCI_EVT_TYPE)
   189f0:	4b50      	ldr	r3, [pc, #320]	; (18b34 <hciTrSerialRxIncoming+0x200>)
   189f2:	781b      	ldrb	r3, [r3, #0]
   189f4:	2b04      	cmp	r3, #4
   189f6:	d103      	bne.n	18a00 <hciTrSerialRxIncoming+0xcc>
        {
          dataLen = hdrRx[1];
   189f8:	4b51      	ldr	r3, [pc, #324]	; (18b40 <hciTrSerialRxIncoming+0x20c>)
   189fa:	785b      	ldrb	r3, [r3, #1]
   189fc:	817b      	strh	r3, [r7, #10]
   189fe:	e00d      	b.n	18a1c <hciTrSerialRxIncoming+0xe8>
        }
        else if (pktIndRx == HCI_ACL_TYPE)
   18a00:	4b4c      	ldr	r3, [pc, #304]	; (18b34 <hciTrSerialRxIncoming+0x200>)
   18a02:	781b      	ldrb	r3, [r3, #0]
   18a04:	2b02      	cmp	r3, #2
   18a06:	d109      	bne.n	18a1c <hciTrSerialRxIncoming+0xe8>
        {
          BYTES_TO_UINT16(dataLen, &hdrRx[2]);
   18a08:	4b4d      	ldr	r3, [pc, #308]	; (18b40 <hciTrSerialRxIncoming+0x20c>)
   18a0a:	789b      	ldrb	r3, [r3, #2]
   18a0c:	b29a      	uxth	r2, r3
   18a0e:	4b4c      	ldr	r3, [pc, #304]	; (18b40 <hciTrSerialRxIncoming+0x20c>)
   18a10:	78db      	ldrb	r3, [r3, #3]
   18a12:	b29b      	uxth	r3, r3
   18a14:	021b      	lsls	r3, r3, #8
   18a16:	b29b      	uxth	r3, r3
   18a18:	4413      	add	r3, r2
   18a1a:	817b      	strh	r3, [r7, #10]
        }

        /* allocate data buffer to hold entire packet */
        if (pktIndRx == HCI_ACL_TYPE)
   18a1c:	4b45      	ldr	r3, [pc, #276]	; (18b34 <hciTrSerialRxIncoming+0x200>)
   18a1e:	781b      	ldrb	r3, [r3, #0]
   18a20:	2b02      	cmp	r3, #2
   18a22:	d10c      	bne.n	18a3e <hciTrSerialRxIncoming+0x10a>
        {
          pPktRx = (uint8_t*)WsfMsgDataAlloc(hdrLen + dataLen, 0);
   18a24:	7b7b      	ldrb	r3, [r7, #13]
   18a26:	b29a      	uxth	r2, r3
   18a28:	897b      	ldrh	r3, [r7, #10]
   18a2a:	4413      	add	r3, r2
   18a2c:	b29b      	uxth	r3, r3
   18a2e:	4618      	mov	r0, r3
   18a30:	2100      	movs	r1, #0
   18a32:	f000 fb6d 	bl	19110 <WsfMsgDataAlloc>
   18a36:	4602      	mov	r2, r0
   18a38:	4b42      	ldr	r3, [pc, #264]	; (18b44 <hciTrSerialRxIncoming+0x210>)
   18a3a:	601a      	str	r2, [r3, #0]
   18a3c:	e00a      	b.n	18a54 <hciTrSerialRxIncoming+0x120>
        }
        else
        {
          pPktRx = (uint8_t*)WsfMsgAlloc(hdrLen + dataLen);
   18a3e:	7b7b      	ldrb	r3, [r7, #13]
   18a40:	b29a      	uxth	r2, r3
   18a42:	897b      	ldrh	r3, [r7, #10]
   18a44:	4413      	add	r3, r2
   18a46:	b29b      	uxth	r3, r3
   18a48:	4618      	mov	r0, r3
   18a4a:	f000 fb77 	bl	1913c <WsfMsgAlloc>
   18a4e:	4602      	mov	r2, r0
   18a50:	4b3c      	ldr	r3, [pc, #240]	; (18b44 <hciTrSerialRxIncoming+0x210>)
   18a52:	601a      	str	r2, [r3, #0]
        }

        if (pPktRx != NULL)
   18a54:	4b3b      	ldr	r3, [pc, #236]	; (18b44 <hciTrSerialRxIncoming+0x210>)
   18a56:	681b      	ldr	r3, [r3, #0]
   18a58:	2b00      	cmp	r3, #0
   18a5a:	d025      	beq.n	18aa8 <hciTrSerialRxIncoming+0x174>
        {
          pDataRx = pPktRx;
   18a5c:	4b39      	ldr	r3, [pc, #228]	; (18b44 <hciTrSerialRxIncoming+0x210>)
   18a5e:	681b      	ldr	r3, [r3, #0]
   18a60:	4a39      	ldr	r2, [pc, #228]	; (18b48 <hciTrSerialRxIncoming+0x214>)
   18a62:	6013      	str	r3, [r2, #0]

          /* copy header into data packet (note: memcpy is not so portable) */
          {
            uint8_t  i;
            for (i = 0; i < hdrLen; i++)
   18a64:	2300      	movs	r3, #0
   18a66:	727b      	strb	r3, [r7, #9]
   18a68:	e00b      	b.n	18a82 <hciTrSerialRxIncoming+0x14e>
            {
              *pDataRx++ = hdrRx[i];
   18a6a:	4b37      	ldr	r3, [pc, #220]	; (18b48 <hciTrSerialRxIncoming+0x214>)
   18a6c:	681b      	ldr	r3, [r3, #0]
   18a6e:	1c5a      	adds	r2, r3, #1
   18a70:	4935      	ldr	r1, [pc, #212]	; (18b48 <hciTrSerialRxIncoming+0x214>)
   18a72:	600a      	str	r2, [r1, #0]
   18a74:	7a7a      	ldrb	r2, [r7, #9]
   18a76:	4932      	ldr	r1, [pc, #200]	; (18b40 <hciTrSerialRxIncoming+0x20c>)
   18a78:	5c8a      	ldrb	r2, [r1, r2]
   18a7a:	701a      	strb	r2, [r3, #0]
          pDataRx = pPktRx;

          /* copy header into data packet (note: memcpy is not so portable) */
          {
            uint8_t  i;
            for (i = 0; i < hdrLen; i++)
   18a7c:	7a7b      	ldrb	r3, [r7, #9]
   18a7e:	3301      	adds	r3, #1
   18a80:	727b      	strb	r3, [r7, #9]
   18a82:	7a7a      	ldrb	r2, [r7, #9]
   18a84:	7b7b      	ldrb	r3, [r7, #13]
   18a86:	429a      	cmp	r2, r3
   18a88:	d3ef      	bcc.n	18a6a <hciTrSerialRxIncoming+0x136>
              *pDataRx++ = hdrRx[i];
            }
          }

          /* save number of bytes left to read */
          iRx = dataLen;
   18a8a:	4a2b      	ldr	r2, [pc, #172]	; (18b38 <hciTrSerialRxIncoming+0x204>)
   18a8c:	897b      	ldrh	r3, [r7, #10]
   18a8e:	8013      	strh	r3, [r2, #0]
          if (iRx == 0)
   18a90:	4b29      	ldr	r3, [pc, #164]	; (18b38 <hciTrSerialRxIncoming+0x204>)
   18a92:	881b      	ldrh	r3, [r3, #0]
   18a94:	2b00      	cmp	r3, #0
   18a96:	d103      	bne.n	18aa0 <hciTrSerialRxIncoming+0x16c>
          {
            stateRx = HCI_RX_STATE_COMPLETE;
   18a98:	4b25      	ldr	r3, [pc, #148]	; (18b30 <hciTrSerialRxIncoming+0x1fc>)
   18a9a:	2203      	movs	r2, #3
   18a9c:	701a      	strb	r2, [r3, #0]
   18a9e:	e005      	b.n	18aac <hciTrSerialRxIncoming+0x178>
          }
          else
          {
            stateRx = HCI_RX_STATE_DATA;
   18aa0:	4b23      	ldr	r3, [pc, #140]	; (18b30 <hciTrSerialRxIncoming+0x1fc>)
   18aa2:	2202      	movs	r2, #2
   18aa4:	701a      	strb	r2, [r3, #0]
   18aa6:	e023      	b.n	18af0 <hciTrSerialRxIncoming+0x1bc>
          }
        }
        else
        {
          WSF_ASSERT(0); /* allocate falied */
          return consumed_bytes;
   18aa8:	89fb      	ldrh	r3, [r7, #14]
   18aaa:	e03c      	b.n	18b26 <hciTrSerialRxIncoming+0x1f2>
   18aac:	e020      	b.n	18af0 <hciTrSerialRxIncoming+0x1bc>

      }
    }

    /* --- Data State --- */
    else if (stateRx == HCI_RX_STATE_DATA)
   18aae:	4b20      	ldr	r3, [pc, #128]	; (18b30 <hciTrSerialRxIncoming+0x1fc>)
   18ab0:	781b      	ldrb	r3, [r3, #0]
   18ab2:	2b02      	cmp	r3, #2
   18ab4:	d11c      	bne.n	18af0 <hciTrSerialRxIncoming+0x1bc>
    {
      /* write incoming byte to allocated buffer */
      *pDataRx++ = dataByte;
   18ab6:	4b24      	ldr	r3, [pc, #144]	; (18b48 <hciTrSerialRxIncoming+0x214>)
   18ab8:	681b      	ldr	r3, [r3, #0]
   18aba:	1c5a      	adds	r2, r3, #1
   18abc:	4922      	ldr	r1, [pc, #136]	; (18b48 <hciTrSerialRxIncoming+0x214>)
   18abe:	600a      	str	r2, [r1, #0]
   18ac0:	7a3a      	ldrb	r2, [r7, #8]
   18ac2:	701a      	strb	r2, [r3, #0]

      /* determine if entire packet has been read */
      iRx--;
   18ac4:	4b1c      	ldr	r3, [pc, #112]	; (18b38 <hciTrSerialRxIncoming+0x204>)
   18ac6:	881b      	ldrh	r3, [r3, #0]
   18ac8:	3b01      	subs	r3, #1
   18aca:	b29a      	uxth	r2, r3
   18acc:	4b1a      	ldr	r3, [pc, #104]	; (18b38 <hciTrSerialRxIncoming+0x204>)
   18ace:	801a      	strh	r2, [r3, #0]
      if (iRx == 0)
   18ad0:	4b19      	ldr	r3, [pc, #100]	; (18b38 <hciTrSerialRxIncoming+0x204>)
   18ad2:	881b      	ldrh	r3, [r3, #0]
   18ad4:	2b00      	cmp	r3, #0
   18ad6:	d102      	bne.n	18ade <hciTrSerialRxIncoming+0x1aa>
      {
        stateRx = HCI_RX_STATE_COMPLETE;
   18ad8:	4b15      	ldr	r3, [pc, #84]	; (18b30 <hciTrSerialRxIncoming+0x1fc>)
   18ada:	2203      	movs	r2, #3
   18adc:	701a      	strb	r2, [r3, #0]
      }
      pBuf++;
   18ade:	687b      	ldr	r3, [r7, #4]
   18ae0:	3301      	adds	r3, #1
   18ae2:	607b      	str	r3, [r7, #4]
      consumed_bytes++;
   18ae4:	89fb      	ldrh	r3, [r7, #14]
   18ae6:	3301      	adds	r3, #1
   18ae8:	81fb      	strh	r3, [r7, #14]
      len--;
   18aea:	887b      	ldrh	r3, [r7, #2]
   18aec:	3b01      	subs	r3, #1
   18aee:	807b      	strh	r3, [r7, #2]
    }

    /* --- Complete State --- */
    /* ( Note Well!  There is no else-if construct by design. ) */
    if (stateRx == HCI_RX_STATE_COMPLETE)
   18af0:	4b0f      	ldr	r3, [pc, #60]	; (18b30 <hciTrSerialRxIncoming+0x1fc>)
   18af2:	781b      	ldrb	r3, [r3, #0]
   18af4:	2b03      	cmp	r3, #3
   18af6:	d111      	bne.n	18b1c <hciTrSerialRxIncoming+0x1e8>
    {
      g_bHCIReceivingPacket = FALSE;
   18af8:	4b10      	ldr	r3, [pc, #64]	; (18b3c <hciTrSerialRxIncoming+0x208>)
   18afa:	2200      	movs	r2, #0
   18afc:	701a      	strb	r2, [r3, #0]

      /* deliver data */
      if (pPktRx != NULL)
   18afe:	4b11      	ldr	r3, [pc, #68]	; (18b44 <hciTrSerialRxIncoming+0x210>)
   18b00:	681b      	ldr	r3, [r3, #0]
   18b02:	2b00      	cmp	r3, #0
   18b04:	d007      	beq.n	18b16 <hciTrSerialRxIncoming+0x1e2>
      {
        //am_hal_gpio_out_bit_set(13);
        hciCoreRecv(pktIndRx, pPktRx);
   18b06:	4b0b      	ldr	r3, [pc, #44]	; (18b34 <hciTrSerialRxIncoming+0x200>)
   18b08:	781a      	ldrb	r2, [r3, #0]
   18b0a:	4b0e      	ldr	r3, [pc, #56]	; (18b44 <hciTrSerialRxIncoming+0x210>)
   18b0c:	681b      	ldr	r3, [r3, #0]
   18b0e:	4610      	mov	r0, r2
   18b10:	4619      	mov	r1, r3
   18b12:	f7fe f853 	bl	16bbc <hciCoreRecv>
        //am_hal_gpio_out_bit_clear(13);
      }

      /* reset state machine */
      stateRx = HCI_RX_STATE_IDLE;
   18b16:	4b06      	ldr	r3, [pc, #24]	; (18b30 <hciTrSerialRxIncoming+0x1fc>)
   18b18:	2200      	movs	r2, #0
   18b1a:	701a      	strb	r2, [r3, #0]
  uint8_t   dataByte;
  uint16_t  consumed_bytes;

  consumed_bytes = 0;
  /* loop until all bytes of incoming buffer are handled */
  while (len)
   18b1c:	887b      	ldrh	r3, [r7, #2]
   18b1e:	2b00      	cmp	r3, #0
   18b20:	f47f af11 	bne.w	18946 <hciTrSerialRxIncoming+0x12>

      /* reset state machine */
      stateRx = HCI_RX_STATE_IDLE;
    }
  }
  return consumed_bytes;
   18b24:	89fb      	ldrh	r3, [r7, #14]
}
   18b26:	4618      	mov	r0, r3
   18b28:	3710      	adds	r7, #16
   18b2a:	46bd      	mov	sp, r7
   18b2c:	bd80      	pop	{r7, pc}
   18b2e:	bf00      	nop
   18b30:	10004015 	.word	0x10004015
   18b34:	10004016 	.word	0x10004016
   18b38:	10004018 	.word	0x10004018
   18b3c:	10004014 	.word	0x10004014
   18b40:	1000401c 	.word	0x1000401c
   18b44:	10004020 	.word	0x10004020
   18b48:	10004024 	.word	0x10004024

00018b4c <hciCoreReadResolvingListSize>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciCoreReadResolvingListSize(void)
{
   18b4c:	b580      	push	{r7, lr}
   18b4e:	af00      	add	r7, sp, #0
  /* if LL Privacy is supported by Controller and included */
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_PRIVACY) &&
   18b50:	4b0b      	ldr	r3, [pc, #44]	; (18b80 <hciCoreReadResolvingListSize+0x34>)
   18b52:	f8b3 3106 	ldrh.w	r3, [r3, #262]	; 0x106
   18b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
   18b5a:	2b00      	cmp	r3, #0
   18b5c:	d008      	beq.n	18b70 <hciCoreReadResolvingListSize+0x24>
      (hciLeSupFeatCfg & HCI_LE_SUP_FEAT_PRIVACY))
   18b5e:	4b09      	ldr	r3, [pc, #36]	; (18b84 <hciCoreReadResolvingListSize+0x38>)
   18b60:	881b      	ldrh	r3, [r3, #0]
   18b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 */
/*************************************************************************************************/
static void hciCoreReadResolvingListSize(void)
{
  /* if LL Privacy is supported by Controller and included */
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_PRIVACY) &&
   18b66:	2b00      	cmp	r3, #0
   18b68:	d002      	beq.n	18b70 <hciCoreReadResolvingListSize+0x24>
      (hciLeSupFeatCfg & HCI_LE_SUP_FEAT_PRIVACY))
  {
    /* send next command in sequence */
    HciLeReadResolvingListSize();
   18b6a:	f7fd fac1 	bl	160f0 <HciLeReadResolvingListSize>
   18b6e:	e005      	b.n	18b7c <hciCoreReadResolvingListSize+0x30>
  }
  else
  {
    hciCoreCb.resListSize = 0;
   18b70:	4b03      	ldr	r3, [pc, #12]	; (18b80 <hciCoreReadResolvingListSize+0x34>)
   18b72:	2200      	movs	r2, #0
   18b74:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109

    /* send next command in sequence */
    hciCoreReadMaxDataLen();
   18b78:	f000 f806 	bl	18b88 <hciCoreReadMaxDataLen>
  }
}
   18b7c:	bd80      	pop	{r7, pc}
   18b7e:	bf00      	nop
   18b80:	1000a100 	.word	0x1000a100
   18b84:	10002bb8 	.word	0x10002bb8

00018b88 <hciCoreReadMaxDataLen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciCoreReadMaxDataLen(void)
{
   18b88:	b580      	push	{r7, lr}
   18b8a:	af00      	add	r7, sp, #0
  /* if LE Data Packet Length Extensions is supported by Controller and included */
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_DATA_LEN_EXT) &&
   18b8c:	4b09      	ldr	r3, [pc, #36]	; (18bb4 <hciCoreReadMaxDataLen+0x2c>)
   18b8e:	f8b3 3106 	ldrh.w	r3, [r3, #262]	; 0x106
   18b92:	f003 0320 	and.w	r3, r3, #32
   18b96:	2b00      	cmp	r3, #0
   18b98:	d008      	beq.n	18bac <hciCoreReadMaxDataLen+0x24>
      (hciLeSupFeatCfg & HCI_LE_SUP_FEAT_DATA_LEN_EXT))
   18b9a:	4b07      	ldr	r3, [pc, #28]	; (18bb8 <hciCoreReadMaxDataLen+0x30>)
   18b9c:	881b      	ldrh	r3, [r3, #0]
   18b9e:	f003 0320 	and.w	r3, r3, #32
 */
/*************************************************************************************************/
static void hciCoreReadMaxDataLen(void)
{
  /* if LE Data Packet Length Extensions is supported by Controller and included */
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_DATA_LEN_EXT) &&
   18ba2:	2b00      	cmp	r3, #0
   18ba4:	d002      	beq.n	18bac <hciCoreReadMaxDataLen+0x24>
      (hciLeSupFeatCfg & HCI_LE_SUP_FEAT_DATA_LEN_EXT))
  {
    /* send next command in sequence */
    HciLeReadMaxDataLen();
   18ba6:	f7fc fec3 	bl	15930 <HciLeReadMaxDataLen>
   18baa:	e001      	b.n	18bb0 <hciCoreReadMaxDataLen+0x28>
  }
  else
  {
    /* send next command in sequence */
    HciLeRandCmd();
   18bac:	f7fc ff48 	bl	15a40 <HciLeRandCmd>
  }
}
   18bb0:	bd80      	pop	{r7, pc}
   18bb2:	bf00      	nop
   18bb4:	1000a100 	.word	0x1000a100
   18bb8:	10002bb8 	.word	0x10002bb8

00018bbc <hciCoreResetStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreResetStart(void)
{
   18bbc:	b580      	push	{r7, lr}
   18bbe:	af00      	add	r7, sp, #0
  /* send an HCI Reset command to start the sequence */
  HciResetCmd();
   18bc0:	f7fd f98e 	bl	15ee0 <HciResetCmd>
}
   18bc4:	bd80      	pop	{r7, pc}
   18bc6:	bf00      	nop

00018bc8 <hciCoreResetSequence>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreResetSequence(uint8_t *pMsg)
{
   18bc8:	b580      	push	{r7, lr}
   18bca:	b086      	sub	sp, #24
   18bcc:	af00      	add	r7, sp, #0
   18bce:	6078      	str	r0, [r7, #4]
  uint16_t       opcode;
  wsfMsgHdr_t    hdr;
  static uint8_t randCnt;

  /* if event is a command complete event */
  if (*pMsg == HCI_CMD_CMPL_EVT)
   18bd0:	687b      	ldr	r3, [r7, #4]
   18bd2:	781b      	ldrb	r3, [r3, #0]
   18bd4:	2b0e      	cmp	r3, #14
   18bd6:	f040 814b 	bne.w	18e70 <hciCoreResetSequence+0x2a8>
  {
    /* parse parameters */
    pMsg += HCI_EVT_HDR_LEN;
   18bda:	687b      	ldr	r3, [r7, #4]
   18bdc:	3302      	adds	r3, #2
   18bde:	607b      	str	r3, [r7, #4]
    pMsg++;                   /* skip num packets */
   18be0:	687b      	ldr	r3, [r7, #4]
   18be2:	3301      	adds	r3, #1
   18be4:	607b      	str	r3, [r7, #4]
    BSTREAM_TO_UINT16(opcode, pMsg);
   18be6:	687b      	ldr	r3, [r7, #4]
   18be8:	781b      	ldrb	r3, [r3, #0]
   18bea:	b29a      	uxth	r2, r3
   18bec:	687b      	ldr	r3, [r7, #4]
   18bee:	3301      	adds	r3, #1
   18bf0:	781b      	ldrb	r3, [r3, #0]
   18bf2:	b29b      	uxth	r3, r3
   18bf4:	021b      	lsls	r3, r3, #8
   18bf6:	b29b      	uxth	r3, r3
   18bf8:	4413      	add	r3, r2
   18bfa:	82fb      	strh	r3, [r7, #22]
   18bfc:	687b      	ldr	r3, [r7, #4]
   18bfe:	3302      	adds	r3, #2
   18c00:	607b      	str	r3, [r7, #4]
    pMsg++;                   /* skip status */
   18c02:	687b      	ldr	r3, [r7, #4]
   18c04:	3301      	adds	r3, #1
   18c06:	607b      	str	r3, [r7, #4]

    /* decode opcode */
    switch (opcode)
   18c08:	8afb      	ldrh	r3, [r7, #22]
   18c0a:	f242 020f 	movw	r2, #8207	; 0x200f
   18c0e:	4293      	cmp	r3, r2
   18c10:	f000 809e 	beq.w	18d50 <hciCoreResetSequence+0x188>
   18c14:	f242 020f 	movw	r2, #8207	; 0x200f
   18c18:	4293      	cmp	r3, r2
   18c1a:	dc22      	bgt.n	18c62 <hciCoreResetSequence+0x9a>
   18c1c:	f241 0209 	movw	r2, #4105	; 0x1009
   18c20:	4293      	cmp	r3, r2
   18c22:	d05c      	beq.n	18cde <hciCoreResetSequence+0x116>
   18c24:	f241 0209 	movw	r2, #4105	; 0x1009
   18c28:	4293      	cmp	r3, r2
   18c2a:	dc0c      	bgt.n	18c46 <hciCoreResetSequence+0x7e>
   18c2c:	f640 4203 	movw	r2, #3075	; 0xc03
   18c30:	4293      	cmp	r3, r2
   18c32:	d042      	beq.n	18cba <hciCoreResetSequence+0xf2>
   18c34:	f640 4263 	movw	r2, #3171	; 0xc63
   18c38:	4293      	cmp	r3, r2
   18c3a:	d04d      	beq.n	18cd8 <hciCoreResetSequence+0x110>
   18c3c:	f640 4201 	movw	r2, #3073	; 0xc01
   18c40:	4293      	cmp	r3, r2
   18c42:	d041      	beq.n	18cc8 <hciCoreResetSequence+0x100>
          (*hciCb.evtCback)((hciEvt_t *) &hdr);
        }
        break;

      default:
        break;
   18c44:	e114      	b.n	18e70 <hciCoreResetSequence+0x2a8>
    pMsg++;                   /* skip num packets */
    BSTREAM_TO_UINT16(opcode, pMsg);
    pMsg++;                   /* skip status */

    /* decode opcode */
    switch (opcode)
   18c46:	f242 0202 	movw	r2, #8194	; 0x2002
   18c4a:	4293      	cmp	r3, r2
   18c4c:	d04e      	beq.n	18cec <hciCoreResetSequence+0x124>
   18c4e:	f242 0203 	movw	r2, #8195	; 0x2003
   18c52:	4293      	cmp	r3, r2
   18c54:	f000 8086 	beq.w	18d64 <hciCoreResetSequence+0x19c>
   18c58:	f242 0201 	movw	r2, #8193	; 0x2001
   18c5c:	4293      	cmp	r3, r2
   18c5e:	d037      	beq.n	18cd0 <hciCoreResetSequence+0x108>
          (*hciCb.evtCback)((hciEvt_t *) &hdr);
        }
        break;

      default:
        break;
   18c60:	e106      	b.n	18e70 <hciCoreResetSequence+0x2a8>
    pMsg++;                   /* skip num packets */
    BSTREAM_TO_UINT16(opcode, pMsg);
    pMsg++;                   /* skip status */

    /* decode opcode */
    switch (opcode)
   18c62:	f242 022a 	movw	r2, #8234	; 0x202a
   18c66:	4293      	cmp	r3, r2
   18c68:	f000 8090 	beq.w	18d8c <hciCoreResetSequence+0x1c4>
   18c6c:	f242 022a 	movw	r2, #8234	; 0x202a
   18c70:	4293      	cmp	r3, r2
   18c72:	dc0e      	bgt.n	18c92 <hciCoreResetSequence+0xca>
   18c74:	f242 021c 	movw	r2, #8220	; 0x201c
   18c78:	4293      	cmp	r3, r2
   18c7a:	d060      	beq.n	18d3e <hciCoreResetSequence+0x176>
   18c7c:	f242 0224 	movw	r2, #8228	; 0x2024
   18c80:	4293      	cmp	r3, r2
   18c82:	f000 80b0 	beq.w	18de6 <hciCoreResetSequence+0x21e>
   18c86:	f242 0218 	movw	r2, #8216	; 0x2018
   18c8a:	4293      	cmp	r3, r2
   18c8c:	f000 80d5 	beq.w	18e3a <hciCoreResetSequence+0x272>
          (*hciCb.evtCback)((hciEvt_t *) &hdr);
        }
        break;

      default:
        break;
   18c90:	e0ee      	b.n	18e70 <hciCoreResetSequence+0x2a8>
    pMsg++;                   /* skip num packets */
    BSTREAM_TO_UINT16(opcode, pMsg);
    pMsg++;                   /* skip status */

    /* decode opcode */
    switch (opcode)
   18c92:	f242 023b 	movw	r2, #8251	; 0x203b
   18c96:	4293      	cmp	r3, r2
   18c98:	dc09      	bgt.n	18cae <hciCoreResetSequence+0xe6>
   18c9a:	f242 023a 	movw	r2, #8250	; 0x203a
   18c9e:	4293      	cmp	r3, r2
   18ca0:	f280 80bd 	bge.w	18e1e <hciCoreResetSequence+0x256>
   18ca4:	f242 022f 	movw	r2, #8239	; 0x202f
   18ca8:	4293      	cmp	r3, r2
   18caa:	d079      	beq.n	18da0 <hciCoreResetSequence+0x1d8>
          (*hciCb.evtCback)((hciEvt_t *) &hdr);
        }
        break;

      default:
        break;
   18cac:	e0e0      	b.n	18e70 <hciCoreResetSequence+0x2a8>
    pMsg++;                   /* skip num packets */
    BSTREAM_TO_UINT16(opcode, pMsg);
    pMsg++;                   /* skip status */

    /* decode opcode */
    switch (opcode)
   18cae:	f242 024a 	movw	r2, #8266	; 0x204a
   18cb2:	4293      	cmp	r3, r2
   18cb4:	f000 80b3 	beq.w	18e1e <hciCoreResetSequence+0x256>
          (*hciCb.evtCback)((hciEvt_t *) &hdr);
        }
        break;

      default:
        break;
   18cb8:	e0da      	b.n	18e70 <hciCoreResetSequence+0x2a8>
    /* decode opcode */
    switch (opcode)
    {
      case HCI_OPCODE_RESET:
        /* initialize rand command count */
        randCnt = 0;
   18cba:	4b6f      	ldr	r3, [pc, #444]	; (18e78 <hciCoreResetSequence+0x2b0>)
   18cbc:	2200      	movs	r2, #0
   18cbe:	701a      	strb	r2, [r3, #0]
        extern uint8_t g_BLEMacAddress[6];
        HciVendorSpecificCmd(0xFC32, 6, g_BLEMacAddress);
#endif

        /* send next command in sequence */
        HciSetEventMaskCmd((uint8_t *) hciEventMask);
   18cc0:	486e      	ldr	r0, [pc, #440]	; (18e7c <hciCoreResetSequence+0x2b4>)
   18cc2:	f7fd f93d 	bl	15f40 <HciSetEventMaskCmd>
        break;
   18cc6:	e0d3      	b.n	18e70 <hciCoreResetSequence+0x2a8>

      case HCI_OPCODE_SET_EVENT_MASK:
        /* send next command in sequence */
        HciLeSetEventMaskCmd((uint8_t *) hciLeEventMask);
   18cc8:	486d      	ldr	r0, [pc, #436]	; (18e80 <hciCoreResetSequence+0x2b8>)
   18cca:	f7fd f811 	bl	15cf0 <HciLeSetEventMaskCmd>
        break;
   18cce:	e0cf      	b.n	18e70 <hciCoreResetSequence+0x2a8>

      case HCI_OPCODE_LE_SET_EVENT_MASK:
        /* send next command in sequence */
        HciSetEventMaskPage2Cmd((uint8_t *) hciEventMaskPage2);
   18cd0:	486c      	ldr	r0, [pc, #432]	; (18e84 <hciCoreResetSequence+0x2bc>)
   18cd2:	f7fd f951 	bl	15f78 <HciSetEventMaskPage2Cmd>
        break;
   18cd6:	e0cb      	b.n	18e70 <hciCoreResetSequence+0x2a8>

      case HCI_OPCODE_SET_EVENT_MASK_PAGE2:
        /* send next command in sequence */
        HciReadBdAddrCmd();
   18cd8:	f7fd f8b8 	bl	15e4c <HciReadBdAddrCmd>
        break;
   18cdc:	e0c8      	b.n	18e70 <hciCoreResetSequence+0x2a8>

      case HCI_OPCODE_READ_BD_ADDR:
        /* parse and store event parameters */
        BdaCpy(hciCoreCb.bdAddr, pMsg);
   18cde:	486a      	ldr	r0, [pc, #424]	; (18e88 <hciCoreResetSequence+0x2c0>)
   18ce0:	6879      	ldr	r1, [r7, #4]
   18ce2:	f7fa f8b3 	bl	12e4c <BdaCpy>

        /* send next command in sequence */
        HciLeReadBufSizeCmd();
   18ce6:	f7fc febd 	bl	15a64 <HciLeReadBufSizeCmd>
        break;
   18cea:	e0c1      	b.n	18e70 <hciCoreResetSequence+0x2a8>

      case HCI_OPCODE_LE_READ_BUF_SIZE:
        /* parse and store event parameters */
        BSTREAM_TO_UINT16(hciCoreCb.bufSize, pMsg);
   18cec:	687b      	ldr	r3, [r7, #4]
   18cee:	781b      	ldrb	r3, [r3, #0]
   18cf0:	b29a      	uxth	r2, r3
   18cf2:	687b      	ldr	r3, [r7, #4]
   18cf4:	3301      	adds	r3, #1
   18cf6:	781b      	ldrb	r3, [r3, #0]
   18cf8:	b29b      	uxth	r3, r3
   18cfa:	021b      	lsls	r3, r3, #8
   18cfc:	b29b      	uxth	r3, r3
   18cfe:	4413      	add	r3, r2
   18d00:	b29a      	uxth	r2, r3
   18d02:	4b62      	ldr	r3, [pc, #392]	; (18e8c <hciCoreResetSequence+0x2c4>)
   18d04:	f8a3 20fe 	strh.w	r2, [r3, #254]	; 0xfe
   18d08:	687b      	ldr	r3, [r7, #4]
   18d0a:	3302      	adds	r3, #2
   18d0c:	607b      	str	r3, [r7, #4]
        BSTREAM_TO_UINT8(hciCoreCb.numBufs, pMsg);
   18d0e:	687b      	ldr	r3, [r7, #4]
   18d10:	1c5a      	adds	r2, r3, #1
   18d12:	607a      	str	r2, [r7, #4]
   18d14:	781a      	ldrb	r2, [r3, #0]
   18d16:	4b5d      	ldr	r3, [pc, #372]	; (18e8c <hciCoreResetSequence+0x2c4>)
   18d18:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103


        /* initialize ACL buffer accounting */
        #ifdef AM_PART_APOLLO3
        hciCoreCb.numBufs--;
   18d1c:	4b5b      	ldr	r3, [pc, #364]	; (18e8c <hciCoreResetSequence+0x2c4>)
   18d1e:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
   18d22:	3b01      	subs	r3, #1
   18d24:	b2da      	uxtb	r2, r3
   18d26:	4b59      	ldr	r3, [pc, #356]	; (18e8c <hciCoreResetSequence+0x2c4>)
   18d28:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
        #endif
        hciCoreCb.availBufs = hciCoreCb.numBufs;
   18d2c:	4b57      	ldr	r3, [pc, #348]	; (18e8c <hciCoreResetSequence+0x2c4>)
   18d2e:	f893 2103 	ldrb.w	r2, [r3, #259]	; 0x103
   18d32:	4b56      	ldr	r3, [pc, #344]	; (18e8c <hciCoreResetSequence+0x2c4>)
   18d34:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102

        /* send next command in sequence */
        HciLeReadSupStatesCmd();
   18d38:	f7fc fede 	bl	15af8 <HciLeReadSupStatesCmd>
        break;
   18d3c:	e098      	b.n	18e70 <hciCoreResetSequence+0x2a8>

      case HCI_OPCODE_LE_READ_SUP_STATES:
        /* parse and store event parameters */
        memcpy(hciCoreCb.leStates, pMsg, HCI_LE_STATES_LEN);
   18d3e:	4b53      	ldr	r3, [pc, #332]	; (18e8c <hciCoreResetSequence+0x2c4>)
   18d40:	687a      	ldr	r2, [r7, #4]
   18d42:	33e0      	adds	r3, #224	; 0xe0
   18d44:	6810      	ldr	r0, [r2, #0]
   18d46:	6851      	ldr	r1, [r2, #4]
   18d48:	c303      	stmia	r3!, {r0, r1}

        /* send next command in sequence */
        HciLeReadWhiteListSizeCmd();
   18d4a:	f7fc fee7 	bl	15b1c <HciLeReadWhiteListSizeCmd>
        break;
   18d4e:	e08f      	b.n	18e70 <hciCoreResetSequence+0x2a8>

      case HCI_OPCODE_LE_READ_WHITE_LIST_SIZE:
        /* parse and store event parameters */
        BSTREAM_TO_UINT8(hciCoreCb.whiteListSize, pMsg);
   18d50:	687b      	ldr	r3, [r7, #4]
   18d52:	1c5a      	adds	r2, r3, #1
   18d54:	607a      	str	r2, [r7, #4]
   18d56:	781a      	ldrb	r2, [r3, #0]
   18d58:	4b4c      	ldr	r3, [pc, #304]	; (18e8c <hciCoreResetSequence+0x2c4>)
   18d5a:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104

        /* send next command in sequence */
        HciLeReadLocalSupFeatCmd();
   18d5e:	f7fc fe93 	bl	15a88 <HciLeReadLocalSupFeatCmd>
        break;
   18d62:	e085      	b.n	18e70 <hciCoreResetSequence+0x2a8>

      case HCI_OPCODE_LE_READ_LOCAL_SUP_FEAT:
        /* parse and store event parameters */
        BSTREAM_TO_UINT16(hciCoreCb.leSupFeat, pMsg);
   18d64:	687b      	ldr	r3, [r7, #4]
   18d66:	781b      	ldrb	r3, [r3, #0]
   18d68:	b29a      	uxth	r2, r3
   18d6a:	687b      	ldr	r3, [r7, #4]
   18d6c:	3301      	adds	r3, #1
   18d6e:	781b      	ldrb	r3, [r3, #0]
   18d70:	b29b      	uxth	r3, r3
   18d72:	021b      	lsls	r3, r3, #8
   18d74:	b29b      	uxth	r3, r3
   18d76:	4413      	add	r3, r2
   18d78:	b29a      	uxth	r2, r3
   18d7a:	4b44      	ldr	r3, [pc, #272]	; (18e8c <hciCoreResetSequence+0x2c4>)
   18d7c:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
   18d80:	687b      	ldr	r3, [r7, #4]
   18d82:	3302      	adds	r3, #2
   18d84:	607b      	str	r3, [r7, #4]

        /* send next command in sequence */
        hciCoreReadResolvingListSize();
   18d86:	f7ff fee1 	bl	18b4c <hciCoreReadResolvingListSize>
        break;
   18d8a:	e071      	b.n	18e70 <hciCoreResetSequence+0x2a8>

      case HCI_OPCODE_LE_READ_RES_LIST_SIZE:
        /* parse and store event parameters */
        BSTREAM_TO_UINT8(hciCoreCb.resListSize, pMsg);
   18d8c:	687b      	ldr	r3, [r7, #4]
   18d8e:	1c5a      	adds	r2, r3, #1
   18d90:	607a      	str	r2, [r7, #4]
   18d92:	781a      	ldrb	r2, [r3, #0]
   18d94:	4b3d      	ldr	r3, [pc, #244]	; (18e8c <hciCoreResetSequence+0x2c4>)
   18d96:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109

        /* send next command in sequence */
        hciCoreReadMaxDataLen();
   18d9a:	f7ff fef5 	bl	18b88 <hciCoreReadMaxDataLen>
        break;
   18d9e:	e067      	b.n	18e70 <hciCoreResetSequence+0x2a8>
      case HCI_OPCODE_LE_READ_MAX_DATA_LEN:
        {
          uint16_t maxTxOctets;
          uint16_t maxTxTime;

          BSTREAM_TO_UINT16(maxTxOctets, pMsg);
   18da0:	687b      	ldr	r3, [r7, #4]
   18da2:	781b      	ldrb	r3, [r3, #0]
   18da4:	b29a      	uxth	r2, r3
   18da6:	687b      	ldr	r3, [r7, #4]
   18da8:	3301      	adds	r3, #1
   18daa:	781b      	ldrb	r3, [r3, #0]
   18dac:	b29b      	uxth	r3, r3
   18dae:	021b      	lsls	r3, r3, #8
   18db0:	b29b      	uxth	r3, r3
   18db2:	4413      	add	r3, r2
   18db4:	82bb      	strh	r3, [r7, #20]
   18db6:	687b      	ldr	r3, [r7, #4]
   18db8:	3302      	adds	r3, #2
   18dba:	607b      	str	r3, [r7, #4]
          BSTREAM_TO_UINT16(maxTxTime, pMsg);
   18dbc:	687b      	ldr	r3, [r7, #4]
   18dbe:	781b      	ldrb	r3, [r3, #0]
   18dc0:	b29a      	uxth	r2, r3
   18dc2:	687b      	ldr	r3, [r7, #4]
   18dc4:	3301      	adds	r3, #1
   18dc6:	781b      	ldrb	r3, [r3, #0]
   18dc8:	b29b      	uxth	r3, r3
   18dca:	021b      	lsls	r3, r3, #8
   18dcc:	b29b      	uxth	r3, r3
   18dce:	4413      	add	r3, r2
   18dd0:	827b      	strh	r3, [r7, #18]
   18dd2:	687b      	ldr	r3, [r7, #4]
   18dd4:	3302      	adds	r3, #2
   18dd6:	607b      	str	r3, [r7, #4]

          /* use Controller's maximum supported payload octets and packet duration times
           * for transmission as Host's suggested values for maximum transmission number
           * of payload octets and maximum packet transmission time for new connections.
           */
          HciLeWriteDefDataLen(maxTxOctets, maxTxTime);
   18dd8:	8aba      	ldrh	r2, [r7, #20]
   18dda:	8a7b      	ldrh	r3, [r7, #18]
   18ddc:	4610      	mov	r0, r2
   18dde:	4619      	mov	r1, r3
   18de0:	f7fc fd3a 	bl	15858 <HciLeWriteDefDataLen>
        }
        break;
   18de4:	e044      	b.n	18e70 <hciCoreResetSequence+0x2a8>

      case HCI_OPCODE_LE_WRITE_DEF_DATA_LEN:
        if (hciCoreCb.extResetSeq)
   18de6:	4b29      	ldr	r3, [pc, #164]	; (18e8c <hciCoreResetSequence+0x2c4>)
   18de8:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   18dec:	2b00      	cmp	r3, #0
   18dee:	d007      	beq.n	18e00 <hciCoreResetSequence+0x238>
        {
          /* send first extended command */
          (*hciCoreCb.extResetSeq)(pMsg, opcode);
   18df0:	4b26      	ldr	r3, [pc, #152]	; (18e8c <hciCoreResetSequence+0x2c4>)
   18df2:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   18df6:	8afa      	ldrh	r2, [r7, #22]
   18df8:	6878      	ldr	r0, [r7, #4]
   18dfa:	4611      	mov	r1, r2
   18dfc:	4798      	blx	r3
          hciCoreCb.perAdvListSize = 0;

          /* send next command in sequence */
          HciLeRandCmd();
        }
        break;
   18dfe:	e037      	b.n	18e70 <hciCoreResetSequence+0x2a8>
          (*hciCoreCb.extResetSeq)(pMsg, opcode);
        }
        else
        {
          /* initialize extended parameters */
          hciCoreCb.maxAdvDataLen = 0;
   18e00:	4b22      	ldr	r3, [pc, #136]	; (18e8c <hciCoreResetSequence+0x2c4>)
   18e02:	2200      	movs	r2, #0
   18e04:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
          hciCoreCb.numSupAdvSets = 0;
   18e08:	4b20      	ldr	r3, [pc, #128]	; (18e8c <hciCoreResetSequence+0x2c4>)
   18e0a:	2200      	movs	r2, #0
   18e0c:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
          hciCoreCb.perAdvListSize = 0;
   18e10:	4b1e      	ldr	r3, [pc, #120]	; (18e8c <hciCoreResetSequence+0x2c4>)
   18e12:	2200      	movs	r2, #0
   18e14:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

          /* send next command in sequence */
          HciLeRandCmd();
   18e18:	f7fc fe12 	bl	15a40 <HciLeRandCmd>
        }
        break;
   18e1c:	e028      	b.n	18e70 <hciCoreResetSequence+0x2a8>

      case HCI_OPCODE_LE_READ_MAX_ADV_DATA_LEN:
      case HCI_OPCODE_LE_READ_NUM_SUP_ADV_SETS:
      case HCI_OPCODE_LE_READ_PER_ADV_LIST_SIZE:
        if (hciCoreCb.extResetSeq)
   18e1e:	4b1b      	ldr	r3, [pc, #108]	; (18e8c <hciCoreResetSequence+0x2c4>)
   18e20:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   18e24:	2b00      	cmp	r3, #0
   18e26:	d007      	beq.n	18e38 <hciCoreResetSequence+0x270>
        {
          /* send next extended command in sequence */
          (*hciCoreCb.extResetSeq)(pMsg, opcode);
   18e28:	4b18      	ldr	r3, [pc, #96]	; (18e8c <hciCoreResetSequence+0x2c4>)
   18e2a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   18e2e:	8afa      	ldrh	r2, [r7, #22]
   18e30:	6878      	ldr	r0, [r7, #4]
   18e32:	4611      	mov	r1, r2
   18e34:	4798      	blx	r3
        }
        break;
   18e36:	e01b      	b.n	18e70 <hciCoreResetSequence+0x2a8>
   18e38:	e01a      	b.n	18e70 <hciCoreResetSequence+0x2a8>

      case HCI_OPCODE_LE_RAND:
        /* check if need to send second rand command */
        if (randCnt < (HCI_RESET_RAND_CNT-1))
   18e3a:	4b0f      	ldr	r3, [pc, #60]	; (18e78 <hciCoreResetSequence+0x2b0>)
   18e3c:	781b      	ldrb	r3, [r3, #0]
   18e3e:	2b02      	cmp	r3, #2
   18e40:	d808      	bhi.n	18e54 <hciCoreResetSequence+0x28c>
        {
          randCnt++;
   18e42:	4b0d      	ldr	r3, [pc, #52]	; (18e78 <hciCoreResetSequence+0x2b0>)
   18e44:	781b      	ldrb	r3, [r3, #0]
   18e46:	3301      	adds	r3, #1
   18e48:	b2da      	uxtb	r2, r3
   18e4a:	4b0b      	ldr	r3, [pc, #44]	; (18e78 <hciCoreResetSequence+0x2b0>)
   18e4c:	701a      	strb	r2, [r3, #0]
          HciLeRandCmd();
   18e4e:	f7fc fdf7 	bl	15a40 <HciLeRandCmd>
          hciCb.resetting = FALSE;
          hdr.param = 0;
          hdr.event = HCI_RESET_SEQ_CMPL_CBACK_EVT;
          (*hciCb.evtCback)((hciEvt_t *) &hdr);
        }
        break;
   18e52:	e00c      	b.n	18e6e <hciCoreResetSequence+0x2a6>
          HciLeRandCmd();
        }
        else
        {
          /* last command in sequence; set resetting state and call callback */
          hciCb.resetting = FALSE;
   18e54:	4b0e      	ldr	r3, [pc, #56]	; (18e90 <hciCoreResetSequence+0x2c8>)
   18e56:	2200      	movs	r2, #0
   18e58:	765a      	strb	r2, [r3, #25]
          hdr.param = 0;
   18e5a:	2300      	movs	r3, #0
   18e5c:	81bb      	strh	r3, [r7, #12]
          hdr.event = HCI_RESET_SEQ_CMPL_CBACK_EVT;
   18e5e:	2300      	movs	r3, #0
   18e60:	73bb      	strb	r3, [r7, #14]
          (*hciCb.evtCback)((hciEvt_t *) &hdr);
   18e62:	4b0b      	ldr	r3, [pc, #44]	; (18e90 <hciCoreResetSequence+0x2c8>)
   18e64:	689b      	ldr	r3, [r3, #8]
   18e66:	f107 020c 	add.w	r2, r7, #12
   18e6a:	4610      	mov	r0, r2
   18e6c:	4798      	blx	r3
        }
        break;
   18e6e:	bf00      	nop

      default:
        break;
    }
  }
}
   18e70:	3718      	adds	r7, #24
   18e72:	46bd      	mov	sp, r7
   18e74:	bd80      	pop	{r7, pc}
   18e76:	bf00      	nop
   18e78:	10004028 	.word	0x10004028
   18e7c:	0002520c 	.word	0x0002520c
   18e80:	00025214 	.word	0x00025214
   18e84:	0002521c 	.word	0x0002521c
   18e88:	1000a1e8 	.word	0x1000a1e8
   18e8c:	1000a100 	.word	0x1000a100
   18e90:	1000916c 	.word	0x1000916c

00018e94 <hciCoreVsCmdCmplRcvd>:
 *
 *  \return HCI callback event code or zero.
 */
/*************************************************************************************************/
uint8_t hciCoreVsCmdCmplRcvd(uint16_t opcode, uint8_t *pMsg, uint8_t len)
{
   18e94:	b480      	push	{r7}
   18e96:	b083      	sub	sp, #12
   18e98:	af00      	add	r7, sp, #0
   18e9a:	4603      	mov	r3, r0
   18e9c:	6039      	str	r1, [r7, #0]
   18e9e:	80fb      	strh	r3, [r7, #6]
   18ea0:	4613      	mov	r3, r2
   18ea2:	717b      	strb	r3, [r7, #5]
  return HCI_VENDOR_SPEC_CMD_CMPL_CBACK_EVT;
   18ea4:	2312      	movs	r3, #18
}
   18ea6:	4618      	mov	r0, r3
   18ea8:	370c      	adds	r7, #12
   18eaa:	46bd      	mov	sp, r7
   18eac:	f85d 7b04 	ldr.w	r7, [sp], #4
   18eb0:	4770      	bx	lr
   18eb2:	bf00      	nop

00018eb4 <HciVsInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciVsInit(uint8_t param)
{
   18eb4:	b480      	push	{r7}
   18eb6:	b083      	sub	sp, #12
   18eb8:	af00      	add	r7, sp, #0
   18eba:	4603      	mov	r3, r0
   18ebc:	71fb      	strb	r3, [r7, #7]

}
   18ebe:	370c      	adds	r7, #12
   18ec0:	46bd      	mov	sp, r7
   18ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
   18ec6:	4770      	bx	lr

00018ec8 <WsfBufInit>:
 *
 *  \return Amount of pBufMem used or 0 for failures.
 */
/*************************************************************************************************/
uint16_t WsfBufInit(uint16_t bufMemLen, uint8_t *pBufMem, uint8_t numPools, wsfBufPoolDesc_t *pDesc)
{
   18ec8:	b480      	push	{r7}
   18eca:	b089      	sub	sp, #36	; 0x24
   18ecc:	af00      	add	r7, sp, #0
   18ece:	60b9      	str	r1, [r7, #8]
   18ed0:	607b      	str	r3, [r7, #4]
   18ed2:	4603      	mov	r3, r0
   18ed4:	81fb      	strh	r3, [r7, #14]
   18ed6:	4613      	mov	r3, r2
   18ed8:	737b      	strb	r3, [r7, #13]
  wsfBufPool_t  *pPool;
  wsfBufMem_t   *pStart;
  uint16_t      len;
  uint8_t       i;

  wsfBufMem = (wsfBufMem_t *) pBufMem;
   18eda:	4a4d      	ldr	r2, [pc, #308]	; (19010 <WsfBufInit+0x148>)
   18edc:	68bb      	ldr	r3, [r7, #8]
   18ede:	6013      	str	r3, [r2, #0]
  pPool = (wsfBufPool_t *) wsfBufMem;
   18ee0:	4b4b      	ldr	r3, [pc, #300]	; (19010 <WsfBufInit+0x148>)
   18ee2:	681b      	ldr	r3, [r3, #0]
   18ee4:	61fb      	str	r3, [r7, #28]

  /* buffer storage starts after the pool structs */
  pStart = (wsfBufMem_t *) (pPool + numPools);
   18ee6:	7b7a      	ldrb	r2, [r7, #13]
   18ee8:	4613      	mov	r3, r2
   18eea:	005b      	lsls	r3, r3, #1
   18eec:	4413      	add	r3, r2
   18eee:	009b      	lsls	r3, r3, #2
   18ef0:	461a      	mov	r2, r3
   18ef2:	69fb      	ldr	r3, [r7, #28]
   18ef4:	4413      	add	r3, r2
   18ef6:	61bb      	str	r3, [r7, #24]

  wsfBufNumPools = numPools;
   18ef8:	4a46      	ldr	r2, [pc, #280]	; (19014 <WsfBufInit+0x14c>)
   18efa:	7b7b      	ldrb	r3, [r7, #13]
   18efc:	7013      	strb	r3, [r2, #0]

  /* create each pool; see loop exit condition below */
  while (TRUE)
  {
    /* verify we didn't overrun memory; if we did, abort */
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   18efe:	4b44      	ldr	r3, [pc, #272]	; (19010 <WsfBufInit+0x148>)
   18f00:	681a      	ldr	r2, [r3, #0]
   18f02:	89fb      	ldrh	r3, [r7, #14]
   18f04:	08db      	lsrs	r3, r3, #3
   18f06:	b29b      	uxth	r3, r3
   18f08:	00db      	lsls	r3, r3, #3
   18f0a:	441a      	add	r2, r3
   18f0c:	69bb      	ldr	r3, [r7, #24]
   18f0e:	429a      	cmp	r2, r3
   18f10:	d201      	bcs.n	18f16 <WsfBufInit+0x4e>
    {
      WSF_ASSERT(FALSE);
      return 0;
   18f12:	2300      	movs	r3, #0
   18f14:	e076      	b.n	19004 <WsfBufInit+0x13c>
    }

    /* exit loop after verification check */
    if (numPools-- == 0)
   18f16:	7b7b      	ldrb	r3, [r7, #13]
   18f18:	1e5a      	subs	r2, r3, #1
   18f1a:	737a      	strb	r2, [r7, #13]
   18f1c:	2b00      	cmp	r3, #0
   18f1e:	d10a      	bne.n	18f36 <WsfBufInit+0x6e>
    {
      break;
   18f20:	bf00      	nop

    /* next pool */
    pPool++;
  }

  wsfBufMemLen = (uint8_t *) pStart - (uint8_t *) wsfBufMem;
   18f22:	69bb      	ldr	r3, [r7, #24]
   18f24:	4a3a      	ldr	r2, [pc, #232]	; (19010 <WsfBufInit+0x148>)
   18f26:	6812      	ldr	r2, [r2, #0]
   18f28:	1a9b      	subs	r3, r3, r2
   18f2a:	b29a      	uxth	r2, r3
   18f2c:	4b3a      	ldr	r3, [pc, #232]	; (19018 <WsfBufInit+0x150>)
   18f2e:	801a      	strh	r2, [r3, #0]
  WSF_TRACE_INFO1("Created buffer pools; using %u bytes", wsfBufMemLen);

  return wsfBufMemLen;
   18f30:	4b39      	ldr	r3, [pc, #228]	; (19018 <WsfBufInit+0x150>)
   18f32:	881b      	ldrh	r3, [r3, #0]
   18f34:	e066      	b.n	19004 <WsfBufInit+0x13c>
    {
      break;
    }

    /* adjust pool lengths for minimum size and alignment */
    if (pDesc->len < sizeof(wsfBufMem_t))
   18f36:	687b      	ldr	r3, [r7, #4]
   18f38:	881b      	ldrh	r3, [r3, #0]
   18f3a:	2b07      	cmp	r3, #7
   18f3c:	d803      	bhi.n	18f46 <WsfBufInit+0x7e>
    {
      pPool->desc.len = sizeof(wsfBufMem_t);
   18f3e:	69fb      	ldr	r3, [r7, #28]
   18f40:	2208      	movs	r2, #8
   18f42:	801a      	strh	r2, [r3, #0]
   18f44:	e014      	b.n	18f70 <WsfBufInit+0xa8>
    }
    else if ((pDesc->len % sizeof(wsfBufMem_t)) != 0)
   18f46:	687b      	ldr	r3, [r7, #4]
   18f48:	881b      	ldrh	r3, [r3, #0]
   18f4a:	f003 0307 	and.w	r3, r3, #7
   18f4e:	b29b      	uxth	r3, r3
   18f50:	2b00      	cmp	r3, #0
   18f52:	d009      	beq.n	18f68 <WsfBufInit+0xa0>
    {
      pPool->desc.len = pDesc->len + sizeof(wsfBufMem_t) - (pDesc->len % sizeof(wsfBufMem_t));
   18f54:	687b      	ldr	r3, [r7, #4]
   18f56:	881b      	ldrh	r3, [r3, #0]
   18f58:	f023 0307 	bic.w	r3, r3, #7
   18f5c:	b29b      	uxth	r3, r3
   18f5e:	3308      	adds	r3, #8
   18f60:	b29a      	uxth	r2, r3
   18f62:	69fb      	ldr	r3, [r7, #28]
   18f64:	801a      	strh	r2, [r3, #0]
   18f66:	e003      	b.n	18f70 <WsfBufInit+0xa8>
    }
    else
    {
      pPool->desc.len = pDesc->len;
   18f68:	687b      	ldr	r3, [r7, #4]
   18f6a:	881a      	ldrh	r2, [r3, #0]
   18f6c:	69fb      	ldr	r3, [r7, #28]
   18f6e:	801a      	strh	r2, [r3, #0]
    }

    pPool->desc.num = pDesc->num;
   18f70:	687b      	ldr	r3, [r7, #4]
   18f72:	789a      	ldrb	r2, [r3, #2]
   18f74:	69fb      	ldr	r3, [r7, #28]
   18f76:	709a      	strb	r2, [r3, #2]
    pDesc++;
   18f78:	687b      	ldr	r3, [r7, #4]
   18f7a:	3304      	adds	r3, #4
   18f7c:	607b      	str	r3, [r7, #4]

    pPool->pStart = pStart;
   18f7e:	69fb      	ldr	r3, [r7, #28]
   18f80:	69ba      	ldr	r2, [r7, #24]
   18f82:	605a      	str	r2, [r3, #4]
    pPool->pFree = pStart;
   18f84:	69fb      	ldr	r3, [r7, #28]
   18f86:	69ba      	ldr	r2, [r7, #24]
   18f88:	609a      	str	r2, [r3, #8]

    WSF_TRACE_INFO2("Creating pool len=%u num=%u", pPool->desc.len, pPool->desc.num);
    WSF_TRACE_INFO1("              pStart=0x%x", (uint32_t)pPool->pStart);

    /* initialize free list */
    len = pPool->desc.len / sizeof(wsfBufMem_t);
   18f8a:	69fb      	ldr	r3, [r7, #28]
   18f8c:	881b      	ldrh	r3, [r3, #0]
   18f8e:	08db      	lsrs	r3, r3, #3
   18f90:	82bb      	strh	r3, [r7, #20]
    for (i = pPool->desc.num; i > 1; i--)
   18f92:	69fb      	ldr	r3, [r7, #28]
   18f94:	789b      	ldrb	r3, [r3, #2]
   18f96:	75fb      	strb	r3, [r7, #23]
   18f98:	e019      	b.n	18fce <WsfBufInit+0x106>
    {
      /* verify we didn't overrun memory; if we did, abort */
      if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   18f9a:	4b1d      	ldr	r3, [pc, #116]	; (19010 <WsfBufInit+0x148>)
   18f9c:	681a      	ldr	r2, [r3, #0]
   18f9e:	89fb      	ldrh	r3, [r7, #14]
   18fa0:	08db      	lsrs	r3, r3, #3
   18fa2:	b29b      	uxth	r3, r3
   18fa4:	00db      	lsls	r3, r3, #3
   18fa6:	441a      	add	r2, r3
   18fa8:	69bb      	ldr	r3, [r7, #24]
   18faa:	429a      	cmp	r2, r3
   18fac:	d201      	bcs.n	18fb2 <WsfBufInit+0xea>
      {
        WSF_ASSERT(FALSE);
        return 0;
   18fae:	2300      	movs	r3, #0
   18fb0:	e028      	b.n	19004 <WsfBufInit+0x13c>
      }
      /* pointer to the next free buffer is stored in the buffer itself */
      pStart->pNext = pStart + len;
   18fb2:	8abb      	ldrh	r3, [r7, #20]
   18fb4:	00db      	lsls	r3, r3, #3
   18fb6:	69ba      	ldr	r2, [r7, #24]
   18fb8:	441a      	add	r2, r3
   18fba:	69bb      	ldr	r3, [r7, #24]
   18fbc:	601a      	str	r2, [r3, #0]
      pStart += len;
   18fbe:	8abb      	ldrh	r3, [r7, #20]
   18fc0:	00db      	lsls	r3, r3, #3
   18fc2:	69ba      	ldr	r2, [r7, #24]
   18fc4:	4413      	add	r3, r2
   18fc6:	61bb      	str	r3, [r7, #24]
    WSF_TRACE_INFO2("Creating pool len=%u num=%u", pPool->desc.len, pPool->desc.num);
    WSF_TRACE_INFO1("              pStart=0x%x", (uint32_t)pPool->pStart);

    /* initialize free list */
    len = pPool->desc.len / sizeof(wsfBufMem_t);
    for (i = pPool->desc.num; i > 1; i--)
   18fc8:	7dfb      	ldrb	r3, [r7, #23]
   18fca:	3b01      	subs	r3, #1
   18fcc:	75fb      	strb	r3, [r7, #23]
   18fce:	7dfb      	ldrb	r3, [r7, #23]
   18fd0:	2b01      	cmp	r3, #1
   18fd2:	d8e2      	bhi.n	18f9a <WsfBufInit+0xd2>
      pStart->pNext = pStart + len;
      pStart += len;
    }

    /* verify we didn't overrun memory; if we did, abort */
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   18fd4:	4b0e      	ldr	r3, [pc, #56]	; (19010 <WsfBufInit+0x148>)
   18fd6:	681a      	ldr	r2, [r3, #0]
   18fd8:	89fb      	ldrh	r3, [r7, #14]
   18fda:	08db      	lsrs	r3, r3, #3
   18fdc:	b29b      	uxth	r3, r3
   18fde:	00db      	lsls	r3, r3, #3
   18fe0:	441a      	add	r2, r3
   18fe2:	69bb      	ldr	r3, [r7, #24]
   18fe4:	429a      	cmp	r2, r3
   18fe6:	d201      	bcs.n	18fec <WsfBufInit+0x124>
    {
      WSF_ASSERT(FALSE);
      return 0;
   18fe8:	2300      	movs	r3, #0
   18fea:	e00b      	b.n	19004 <WsfBufInit+0x13c>
    }
    /* last one in list points to NULL */
    pStart->pNext = NULL;
   18fec:	69bb      	ldr	r3, [r7, #24]
   18fee:	2200      	movs	r2, #0
   18ff0:	601a      	str	r2, [r3, #0]
    pStart += len;
   18ff2:	8abb      	ldrh	r3, [r7, #20]
   18ff4:	00db      	lsls	r3, r3, #3
   18ff6:	69ba      	ldr	r2, [r7, #24]
   18ff8:	4413      	add	r3, r2
   18ffa:	61bb      	str	r3, [r7, #24]

    /* next pool */
    pPool++;
   18ffc:	69fb      	ldr	r3, [r7, #28]
   18ffe:	330c      	adds	r3, #12
   19000:	61fb      	str	r3, [r7, #28]
  }
   19002:	e77c      	b.n	18efe <WsfBufInit+0x36>

  wsfBufMemLen = (uint8_t *) pStart - (uint8_t *) wsfBufMem;
  WSF_TRACE_INFO1("Created buffer pools; using %u bytes", wsfBufMemLen);

  return wsfBufMemLen;
}
   19004:	4618      	mov	r0, r3
   19006:	3724      	adds	r7, #36	; 0x24
   19008:	46bd      	mov	sp, r7
   1900a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1900e:	4770      	bx	lr
   19010:	1000402c 	.word	0x1000402c
   19014:	1000a216 	.word	0x1000a216
   19018:	1000a214 	.word	0x1000a214

0001901c <WsfBufAlloc>:
 *
 *  \return Pointer to allocated buffer or NULL if allocation fails.
 */
/*************************************************************************************************/
void *WsfBufAlloc(uint16_t len)
{
   1901c:	b580      	push	{r7, lr}
   1901e:	b086      	sub	sp, #24
   19020:	af00      	add	r7, sp, #0
   19022:	4603      	mov	r3, r0
   19024:	80fb      	strh	r3, [r7, #6]

  WSF_CS_INIT(cs);

  WSF_ASSERT(len > 0);

  pPool = (wsfBufPool_t *) wsfBufMem;
   19026:	4b1a      	ldr	r3, [pc, #104]	; (19090 <WsfBufAlloc+0x74>)
   19028:	681b      	ldr	r3, [r3, #0]
   1902a:	617b      	str	r3, [r7, #20]

  for (i = wsfBufNumPools; i > 0; i--, pPool++)
   1902c:	4b19      	ldr	r3, [pc, #100]	; (19094 <WsfBufAlloc+0x78>)
   1902e:	781b      	ldrb	r3, [r3, #0]
   19030:	74fb      	strb	r3, [r7, #19]
   19032:	e020      	b.n	19076 <WsfBufAlloc+0x5a>
  {
    /* if buffer is big enough */
    if (len <= pPool->desc.len)
   19034:	697b      	ldr	r3, [r7, #20]
   19036:	881b      	ldrh	r3, [r3, #0]
   19038:	88fa      	ldrh	r2, [r7, #6]
   1903a:	429a      	cmp	r2, r3
   1903c:	d815      	bhi.n	1906a <WsfBufAlloc+0x4e>
    {
      /* enter critical section */
      WSF_CS_ENTER(cs);
   1903e:	f7fb fbf9 	bl	14834 <WsfCsEnter>

      /* if buffers available */
      if (pPool->pFree != NULL)
   19042:	697b      	ldr	r3, [r7, #20]
   19044:	689b      	ldr	r3, [r3, #8]
   19046:	2b00      	cmp	r3, #0
   19048:	d00d      	beq.n	19066 <WsfBufAlloc+0x4a>
      {
        /* allocation succeeded */
        pBuf = pPool->pFree;
   1904a:	697b      	ldr	r3, [r7, #20]
   1904c:	689b      	ldr	r3, [r3, #8]
   1904e:	60fb      	str	r3, [r7, #12]

        /* next free buffer is stored inside current free buffer */
        pPool->pFree = pBuf->pNext;
   19050:	68fb      	ldr	r3, [r7, #12]
   19052:	681a      	ldr	r2, [r3, #0]
   19054:	697b      	ldr	r3, [r7, #20]
   19056:	609a      	str	r2, [r3, #8]

#if WSF_BUF_FREE_CHECK == TRUE
        pBuf->free = 0;
   19058:	68fb      	ldr	r3, [r7, #12]
   1905a:	2200      	movs	r2, #0
   1905c:	605a      	str	r2, [r3, #4]
          pPool->maxAlloc = pPool->numAlloc;
        }
        pPool->maxReqLen = WSF_MAX(pPool->maxReqLen, len);
#endif
        /* exit critical section */
        WSF_CS_EXIT(cs);
   1905e:	f7fb fbfd 	bl	1485c <WsfCsExit>

        WSF_TRACE_ALLOC2("WsfBufAlloc len:%u pBuf:%08x", pPool->desc.len, pBuf);

        return pBuf;
   19062:	68fb      	ldr	r3, [r7, #12]
   19064:	e010      	b.n	19088 <WsfBufAlloc+0x6c>
      }

      /* exit critical section */
      WSF_CS_EXIT(cs);
   19066:	f7fb fbf9 	bl	1485c <WsfCsExit>

  WSF_ASSERT(len > 0);

  pPool = (wsfBufPool_t *) wsfBufMem;

  for (i = wsfBufNumPools; i > 0; i--, pPool++)
   1906a:	7cfb      	ldrb	r3, [r7, #19]
   1906c:	3b01      	subs	r3, #1
   1906e:	74fb      	strb	r3, [r7, #19]
   19070:	697b      	ldr	r3, [r7, #20]
   19072:	330c      	adds	r3, #12
   19074:	617b      	str	r3, [r7, #20]
   19076:	7cfb      	ldrb	r3, [r7, #19]
   19078:	2b00      	cmp	r3, #0
   1907a:	d1db      	bne.n	19034 <WsfBufAlloc+0x18>
  else
  {
    WSF_TRACE_WARN2("WsfBufAlloc failed len:%u - task:%u", len, WSF_OS_GET_ACTIVE_HANDLER_ID());
  }
#else
  WSF_TRACE_WARN1("WsfBufAlloc failed len:%u", len);
   1907c:	88fb      	ldrh	r3, [r7, #6]
   1907e:	4806      	ldr	r0, [pc, #24]	; (19098 <WsfBufAlloc+0x7c>)
   19080:	4619      	mov	r1, r3
   19082:	f7fb fd6f 	bl	14b64 <WsfTrace>

#if WSF_BUF_ALLOC_FAIL_ASSERT == TRUE
  WSF_ASSERT(FALSE);
#endif

  return NULL;
   19086:	2300      	movs	r3, #0
}
   19088:	4618      	mov	r0, r3
   1908a:	3718      	adds	r7, #24
   1908c:	46bd      	mov	sp, r7
   1908e:	bd80      	pop	{r7, pc}
   19090:	1000402c 	.word	0x1000402c
   19094:	1000a216 	.word	0x1000a216
   19098:	00023c04 	.word	0x00023c04

0001909c <WsfBufFree>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfBufFree(void *pBuf)
{
   1909c:	b580      	push	{r7, lr}
   1909e:	b084      	sub	sp, #16
   190a0:	af00      	add	r7, sp, #0
   190a2:	6078      	str	r0, [r7, #4]
  wsfBufPool_t  *pPool;
  wsfBufMem_t   *p = pBuf;
   190a4:	687b      	ldr	r3, [r7, #4]
   190a6:	60bb      	str	r3, [r7, #8]
  WSF_ASSERT(p >= ((wsfBufPool_t *) wsfBufMem)->pStart);
  WSF_ASSERT(p < (wsfBufMem_t *)(((uint8_t *) wsfBufMem) + wsfBufMemLen));
#endif

  /* iterate over pools starting from last pool */
  pPool = (wsfBufPool_t *) wsfBufMem + (wsfBufNumPools - 1);
   190a8:	4b16      	ldr	r3, [pc, #88]	; (19104 <WsfBufFree+0x68>)
   190aa:	681a      	ldr	r2, [r3, #0]
   190ac:	4b16      	ldr	r3, [pc, #88]	; (19108 <WsfBufFree+0x6c>)
   190ae:	781b      	ldrb	r3, [r3, #0]
   190b0:	4619      	mov	r1, r3
   190b2:	460b      	mov	r3, r1
   190b4:	005b      	lsls	r3, r3, #1
   190b6:	440b      	add	r3, r1
   190b8:	009b      	lsls	r3, r3, #2
   190ba:	3b0c      	subs	r3, #12
   190bc:	4413      	add	r3, r2
   190be:	60fb      	str	r3, [r7, #12]
  while (pPool >= (wsfBufPool_t *) wsfBufMem)
   190c0:	e016      	b.n	190f0 <WsfBufFree+0x54>
  {
    /* if the buffer memory is located inside this pool */
    if (p >= pPool->pStart)
   190c2:	68fb      	ldr	r3, [r7, #12]
   190c4:	685a      	ldr	r2, [r3, #4]
   190c6:	68bb      	ldr	r3, [r7, #8]
   190c8:	429a      	cmp	r2, r3
   190ca:	d80e      	bhi.n	190ea <WsfBufFree+0x4e>
    {
      /* enter critical section */
      WSF_CS_ENTER(cs);
   190cc:	f7fb fbb2 	bl	14834 <WsfCsEnter>

#if WSF_BUF_FREE_CHECK == TRUE
      WSF_ASSERT(p->free != WSF_BUF_FREE_NUM);
      p->free = WSF_BUF_FREE_NUM;
   190d0:	68bb      	ldr	r3, [r7, #8]
   190d2:	4a0e      	ldr	r2, [pc, #56]	; (1910c <WsfBufFree+0x70>)
   190d4:	605a      	str	r2, [r3, #4]
#if WSF_BUF_STATS == TRUE
      pPool->numAlloc--;
#endif

      /* pool found; put buffer back in free list */
      p->pNext = pPool->pFree;
   190d6:	68fb      	ldr	r3, [r7, #12]
   190d8:	689a      	ldr	r2, [r3, #8]
   190da:	68bb      	ldr	r3, [r7, #8]
   190dc:	601a      	str	r2, [r3, #0]
      pPool->pFree = p;
   190de:	68fb      	ldr	r3, [r7, #12]
   190e0:	68ba      	ldr	r2, [r7, #8]
   190e2:	609a      	str	r2, [r3, #8]

      /* exit critical section */
      WSF_CS_EXIT(cs);
   190e4:	f7fb fbba 	bl	1485c <WsfCsExit>

      WSF_TRACE_FREE2("WsfBufFree len:%u pBuf:%08x", pPool->desc.len, pBuf);

      return;
   190e8:	e008      	b.n	190fc <WsfBufFree+0x60>
    }

    /* next pool */
    pPool--;
   190ea:	68fb      	ldr	r3, [r7, #12]
   190ec:	3b0c      	subs	r3, #12
   190ee:	60fb      	str	r3, [r7, #12]
  WSF_ASSERT(p < (wsfBufMem_t *)(((uint8_t *) wsfBufMem) + wsfBufMemLen));
#endif

  /* iterate over pools starting from last pool */
  pPool = (wsfBufPool_t *) wsfBufMem + (wsfBufNumPools - 1);
  while (pPool >= (wsfBufPool_t *) wsfBufMem)
   190f0:	4b04      	ldr	r3, [pc, #16]	; (19104 <WsfBufFree+0x68>)
   190f2:	681b      	ldr	r3, [r3, #0]
   190f4:	68fa      	ldr	r2, [r7, #12]
   190f6:	429a      	cmp	r2, r3
   190f8:	d2e3      	bcs.n	190c2 <WsfBufFree+0x26>
  }

  /* should never get here */
  WSF_ASSERT(FALSE);

  return;
   190fa:	bf00      	nop
}
   190fc:	3710      	adds	r7, #16
   190fe:	46bd      	mov	sp, r7
   19100:	bd80      	pop	{r7, pc}
   19102:	bf00      	nop
   19104:	1000402c 	.word	0x1000402c
   19108:	1000a216 	.word	0x1000a216
   1910c:	faabd00d 	.word	0xfaabd00d

00019110 <WsfMsgDataAlloc>:
 *
 *  \return Pointer to data message buffer or NULL if allocation failed.
 */
/*************************************************************************************************/
void *WsfMsgDataAlloc(uint16_t len, uint8_t tailroom)
{
   19110:	b580      	push	{r7, lr}
   19112:	b082      	sub	sp, #8
   19114:	af00      	add	r7, sp, #0
   19116:	4603      	mov	r3, r0
   19118:	460a      	mov	r2, r1
   1911a:	80fb      	strh	r3, [r7, #6]
   1911c:	4613      	mov	r3, r2
   1911e:	717b      	strb	r3, [r7, #5]
  return WsfMsgAlloc(len + tailroom);
   19120:	797b      	ldrb	r3, [r7, #5]
   19122:	b29a      	uxth	r2, r3
   19124:	88fb      	ldrh	r3, [r7, #6]
   19126:	4413      	add	r3, r2
   19128:	b29b      	uxth	r3, r3
   1912a:	4618      	mov	r0, r3
   1912c:	f000 f806 	bl	1913c <WsfMsgAlloc>
   19130:	4603      	mov	r3, r0
}
   19132:	4618      	mov	r0, r3
   19134:	3708      	adds	r7, #8
   19136:	46bd      	mov	sp, r7
   19138:	bd80      	pop	{r7, pc}
   1913a:	bf00      	nop

0001913c <WsfMsgAlloc>:
 *
 *  \return Pointer to message buffer or NULL if allocation failed.
 */
/*************************************************************************************************/
void *WsfMsgAlloc(uint16_t len)
{
   1913c:	b580      	push	{r7, lr}
   1913e:	b084      	sub	sp, #16
   19140:	af00      	add	r7, sp, #0
   19142:	4603      	mov	r3, r0
   19144:	80fb      	strh	r3, [r7, #6]
  wsfMsg_t  *pMsg;

  pMsg = WsfBufAlloc(len + sizeof(wsfMsg_t));
   19146:	88fb      	ldrh	r3, [r7, #6]
   19148:	3308      	adds	r3, #8
   1914a:	b29b      	uxth	r3, r3
   1914c:	4618      	mov	r0, r3
   1914e:	f7ff ff65 	bl	1901c <WsfBufAlloc>
   19152:	60f8      	str	r0, [r7, #12]

  /* hide header */
  if (pMsg != NULL)
   19154:	68fb      	ldr	r3, [r7, #12]
   19156:	2b00      	cmp	r3, #0
   19158:	d002      	beq.n	19160 <WsfMsgAlloc+0x24>
  {
    pMsg++;
   1915a:	68fb      	ldr	r3, [r7, #12]
   1915c:	3308      	adds	r3, #8
   1915e:	60fb      	str	r3, [r7, #12]
  }

  return pMsg;
   19160:	68fb      	ldr	r3, [r7, #12]
}
   19162:	4618      	mov	r0, r3
   19164:	3710      	adds	r7, #16
   19166:	46bd      	mov	sp, r7
   19168:	bd80      	pop	{r7, pc}
   1916a:	bf00      	nop

0001916c <WsfMsgFree>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfMsgFree(void *pMsg)
{
   1916c:	b580      	push	{r7, lr}
   1916e:	b082      	sub	sp, #8
   19170:	af00      	add	r7, sp, #0
   19172:	6078      	str	r0, [r7, #4]
  WsfBufFree(((wsfMsg_t *) pMsg) - 1);
   19174:	687b      	ldr	r3, [r7, #4]
   19176:	3b08      	subs	r3, #8
   19178:	4618      	mov	r0, r3
   1917a:	f7ff ff8f 	bl	1909c <WsfBufFree>
}
   1917e:	3708      	adds	r7, #8
   19180:	46bd      	mov	sp, r7
   19182:	bd80      	pop	{r7, pc}

00019184 <WsfMsgSend>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfMsgSend(wsfHandlerId_t handlerId, void *pMsg)
{
   19184:	b580      	push	{r7, lr}
   19186:	b082      	sub	sp, #8
   19188:	af00      	add	r7, sp, #0
   1918a:	4603      	mov	r3, r0
   1918c:	6039      	str	r1, [r7, #0]
   1918e:	71fb      	strb	r3, [r7, #7]
  WSF_TRACE_MSG1("WsfMsgSend handlerId:%u", handlerId);

  /* get queue for this handler and enqueue message */
  WsfMsgEnq(WsfTaskMsgQueue(handlerId), handlerId, pMsg);
   19190:	79fb      	ldrb	r3, [r7, #7]
   19192:	4618      	mov	r0, r3
   19194:	f7fb fc18 	bl	149c8 <WsfTaskMsgQueue>
   19198:	4602      	mov	r2, r0
   1919a:	79fb      	ldrb	r3, [r7, #7]
   1919c:	4610      	mov	r0, r2
   1919e:	4619      	mov	r1, r3
   191a0:	683a      	ldr	r2, [r7, #0]
   191a2:	f000 f809 	bl	191b8 <WsfMsgEnq>

  /* set task for this handler as ready to run */
  WsfTaskSetReady(handlerId, WSF_MSG_QUEUE_EVENT);
   191a6:	79fb      	ldrb	r3, [r7, #7]
   191a8:	4618      	mov	r0, r3
   191aa:	2101      	movs	r1, #1
   191ac:	f7fb fbf0 	bl	14990 <WsfTaskSetReady>
}
   191b0:	3708      	adds	r7, #8
   191b2:	46bd      	mov	sp, r7
   191b4:	bd80      	pop	{r7, pc}
   191b6:	bf00      	nop

000191b8 <WsfMsgEnq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfMsgEnq(wsfQueue_t *pQueue, wsfHandlerId_t handlerId, void *pMsg)
{
   191b8:	b580      	push	{r7, lr}
   191ba:	b086      	sub	sp, #24
   191bc:	af00      	add	r7, sp, #0
   191be:	60f8      	str	r0, [r7, #12]
   191c0:	460b      	mov	r3, r1
   191c2:	607a      	str	r2, [r7, #4]
   191c4:	72fb      	strb	r3, [r7, #11]
  wsfMsg_t    *p;

  WSF_ASSERT(pMsg != NULL);

  /* get message header */
  p = ((wsfMsg_t *) pMsg) - 1;
   191c6:	687b      	ldr	r3, [r7, #4]
   191c8:	3b08      	subs	r3, #8
   191ca:	617b      	str	r3, [r7, #20]

  /* set handler ID */
  p->handlerId = handlerId;
   191cc:	697b      	ldr	r3, [r7, #20]
   191ce:	7afa      	ldrb	r2, [r7, #11]
   191d0:	711a      	strb	r2, [r3, #4]

  WsfQueueEnq(pQueue, p);
   191d2:	68f8      	ldr	r0, [r7, #12]
   191d4:	6979      	ldr	r1, [r7, #20]
   191d6:	f000 f81b 	bl	19210 <WsfQueueEnq>
}
   191da:	3718      	adds	r7, #24
   191dc:	46bd      	mov	sp, r7
   191de:	bd80      	pop	{r7, pc}

000191e0 <WsfMsgDeq>:
 *
 *  \return Pointer to message that has been dequeued or NULL if queue is empty.
 */
/*************************************************************************************************/
void *WsfMsgDeq(wsfQueue_t *pQueue, wsfHandlerId_t *pHandlerId)
{
   191e0:	b580      	push	{r7, lr}
   191e2:	b084      	sub	sp, #16
   191e4:	af00      	add	r7, sp, #0
   191e6:	6078      	str	r0, [r7, #4]
   191e8:	6039      	str	r1, [r7, #0]
  wsfMsg_t *pMsg;

  if ((pMsg = WsfQueueDeq(pQueue)) != NULL)
   191ea:	6878      	ldr	r0, [r7, #4]
   191ec:	f000 f832 	bl	19254 <WsfQueueDeq>
   191f0:	60f8      	str	r0, [r7, #12]
   191f2:	68fb      	ldr	r3, [r7, #12]
   191f4:	2b00      	cmp	r3, #0
   191f6:	d006      	beq.n	19206 <WsfMsgDeq+0x26>
  {
    *pHandlerId = pMsg->handlerId;
   191f8:	68fb      	ldr	r3, [r7, #12]
   191fa:	791a      	ldrb	r2, [r3, #4]
   191fc:	683b      	ldr	r3, [r7, #0]
   191fe:	701a      	strb	r2, [r3, #0]

    /* hide header */
    pMsg++;
   19200:	68fb      	ldr	r3, [r7, #12]
   19202:	3308      	adds	r3, #8
   19204:	60fb      	str	r3, [r7, #12]
  }

  return pMsg;
   19206:	68fb      	ldr	r3, [r7, #12]
}
   19208:	4618      	mov	r0, r3
   1920a:	3710      	adds	r7, #16
   1920c:	46bd      	mov	sp, r7
   1920e:	bd80      	pop	{r7, pc}

00019210 <WsfQueueEnq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueueEnq(wsfQueue_t *pQueue, void *pElem)
{
   19210:	b580      	push	{r7, lr}
   19212:	b082      	sub	sp, #8
   19214:	af00      	add	r7, sp, #0
   19216:	6078      	str	r0, [r7, #4]
   19218:	6039      	str	r1, [r7, #0]

  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pElem != NULL);

  /* initialize next pointer */
  WSF_QUEUE_NEXT(pElem) = NULL;
   1921a:	683b      	ldr	r3, [r7, #0]
   1921c:	2200      	movs	r2, #0
   1921e:	601a      	str	r2, [r3, #0]

  /* enter critical section */
  WSF_CS_ENTER(cs);
   19220:	f7fb fb08 	bl	14834 <WsfCsEnter>

  /* if queue empty */
  if (pQueue->pHead == NULL)
   19224:	687b      	ldr	r3, [r7, #4]
   19226:	681b      	ldr	r3, [r3, #0]
   19228:	2b00      	cmp	r3, #0
   1922a:	d106      	bne.n	1923a <WsfQueueEnq+0x2a>
  {
    pQueue->pHead = pElem;
   1922c:	687b      	ldr	r3, [r7, #4]
   1922e:	683a      	ldr	r2, [r7, #0]
   19230:	601a      	str	r2, [r3, #0]
    pQueue->pTail = pElem;
   19232:	687b      	ldr	r3, [r7, #4]
   19234:	683a      	ldr	r2, [r7, #0]
   19236:	605a      	str	r2, [r3, #4]
   19238:	e006      	b.n	19248 <WsfQueueEnq+0x38>
  }
  /* else enqueue element to the tail of queue */
  else
  {
    WSF_QUEUE_NEXT(pQueue->pTail) = pElem;
   1923a:	687b      	ldr	r3, [r7, #4]
   1923c:	685b      	ldr	r3, [r3, #4]
   1923e:	683a      	ldr	r2, [r7, #0]
   19240:	601a      	str	r2, [r3, #0]
    pQueue->pTail = pElem;
   19242:	687b      	ldr	r3, [r7, #4]
   19244:	683a      	ldr	r2, [r7, #0]
   19246:	605a      	str	r2, [r3, #4]
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
   19248:	f7fb fb08 	bl	1485c <WsfCsExit>
}
   1924c:	3708      	adds	r7, #8
   1924e:	46bd      	mov	sp, r7
   19250:	bd80      	pop	{r7, pc}
   19252:	bf00      	nop

00019254 <WsfQueueDeq>:
 *
 *  \return Pointer to element that has been dequeued or NULL if queue is empty.
 */
/*************************************************************************************************/
void *WsfQueueDeq(wsfQueue_t *pQueue)
{
   19254:	b580      	push	{r7, lr}
   19256:	b084      	sub	sp, #16
   19258:	af00      	add	r7, sp, #0
   1925a:	6078      	str	r0, [r7, #4]
  WSF_CS_INIT(cs);

  WSF_ASSERT(pQueue != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   1925c:	f7fb faea 	bl	14834 <WsfCsEnter>

  pElem = pQueue->pHead;
   19260:	687b      	ldr	r3, [r7, #4]
   19262:	681b      	ldr	r3, [r3, #0]
   19264:	60fb      	str	r3, [r7, #12]

  /* if queue is not empty */
  if (pElem != NULL)
   19266:	68fb      	ldr	r3, [r7, #12]
   19268:	2b00      	cmp	r3, #0
   1926a:	d00a      	beq.n	19282 <WsfQueueDeq+0x2e>
  {
    /* set head to next element in queue */
    pQueue->pHead = WSF_QUEUE_NEXT(pElem);
   1926c:	68fb      	ldr	r3, [r7, #12]
   1926e:	681a      	ldr	r2, [r3, #0]
   19270:	687b      	ldr	r3, [r7, #4]
   19272:	601a      	str	r2, [r3, #0]

    /* check for empty queue */
    if (pQueue->pHead == NULL)
   19274:	687b      	ldr	r3, [r7, #4]
   19276:	681b      	ldr	r3, [r3, #0]
   19278:	2b00      	cmp	r3, #0
   1927a:	d102      	bne.n	19282 <WsfQueueDeq+0x2e>
    {
      pQueue->pTail = NULL;
   1927c:	687b      	ldr	r3, [r7, #4]
   1927e:	2200      	movs	r2, #0
   19280:	605a      	str	r2, [r3, #4]
    }
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
   19282:	f7fb faeb 	bl	1485c <WsfCsExit>

  return pElem;
   19286:	68fb      	ldr	r3, [r7, #12]
}
   19288:	4618      	mov	r0, r3
   1928a:	3710      	adds	r7, #16
   1928c:	46bd      	mov	sp, r7
   1928e:	bd80      	pop	{r7, pc}

00019290 <WsfQueuePush>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueuePush(wsfQueue_t *pQueue, void *pElem)
{
   19290:	b580      	push	{r7, lr}
   19292:	b082      	sub	sp, #8
   19294:	af00      	add	r7, sp, #0
   19296:	6078      	str	r0, [r7, #4]
   19298:	6039      	str	r1, [r7, #0]

  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pElem != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   1929a:	f7fb facb 	bl	14834 <WsfCsEnter>

  /* else push element to head of queue */
  WSF_QUEUE_NEXT(pElem) = pQueue->pHead;
   1929e:	687b      	ldr	r3, [r7, #4]
   192a0:	681a      	ldr	r2, [r3, #0]
   192a2:	683b      	ldr	r3, [r7, #0]
   192a4:	601a      	str	r2, [r3, #0]

  /* if queue was empty set tail */
  if (pQueue->pHead == NULL)
   192a6:	687b      	ldr	r3, [r7, #4]
   192a8:	681b      	ldr	r3, [r3, #0]
   192aa:	2b00      	cmp	r3, #0
   192ac:	d102      	bne.n	192b4 <WsfQueuePush+0x24>
  {
    pQueue->pTail = pElem;
   192ae:	687b      	ldr	r3, [r7, #4]
   192b0:	683a      	ldr	r2, [r7, #0]
   192b2:	605a      	str	r2, [r3, #4]
  }

  /* set head */
  pQueue->pHead = pElem;
   192b4:	687b      	ldr	r3, [r7, #4]
   192b6:	683a      	ldr	r2, [r7, #0]
   192b8:	601a      	str	r2, [r3, #0]

  /* exit critical section */
  WSF_CS_EXIT(cs);
   192ba:	f7fb facf 	bl	1485c <WsfCsExit>
}
   192be:	3708      	adds	r7, #8
   192c0:	46bd      	mov	sp, r7
   192c2:	bd80      	pop	{r7, pc}

000192c4 <WsfQueueInsert>:
 *                    Note:  set pPrev to NULL if pElem is first element in queue.
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueueInsert(wsfQueue_t *pQueue, void *pElem, void *pPrev)
{
   192c4:	b580      	push	{r7, lr}
   192c6:	b084      	sub	sp, #16
   192c8:	af00      	add	r7, sp, #0
   192ca:	60f8      	str	r0, [r7, #12]
   192cc:	60b9      	str	r1, [r7, #8]
   192ce:	607a      	str	r2, [r7, #4]

  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pElem != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   192d0:	f7fb fab0 	bl	14834 <WsfCsEnter>

  /* if queue empty or inserting at tail */
  if (pQueue->pHead == NULL || pPrev == pQueue->pTail)
   192d4:	68fb      	ldr	r3, [r7, #12]
   192d6:	681b      	ldr	r3, [r3, #0]
   192d8:	2b00      	cmp	r3, #0
   192da:	d004      	beq.n	192e6 <WsfQueueInsert+0x22>
   192dc:	68fb      	ldr	r3, [r7, #12]
   192de:	685a      	ldr	r2, [r3, #4]
   192e0:	687b      	ldr	r3, [r7, #4]
   192e2:	429a      	cmp	r2, r3
   192e4:	d104      	bne.n	192f0 <WsfQueueInsert+0x2c>
  {
    /* queue as normal */
    WsfQueueEnq(pQueue, pElem);
   192e6:	68f8      	ldr	r0, [r7, #12]
   192e8:	68b9      	ldr	r1, [r7, #8]
   192ea:	f7ff ff91 	bl	19210 <WsfQueueEnq>
   192ee:	e00e      	b.n	1930e <WsfQueueInsert+0x4a>
  }
  /* else if inserting at head */
  else if (pPrev == NULL)
   192f0:	687b      	ldr	r3, [r7, #4]
   192f2:	2b00      	cmp	r3, #0
   192f4:	d104      	bne.n	19300 <WsfQueueInsert+0x3c>
  {
    /* push to head */
    WsfQueuePush(pQueue, pElem);
   192f6:	68f8      	ldr	r0, [r7, #12]
   192f8:	68b9      	ldr	r1, [r7, #8]
   192fa:	f7ff ffc9 	bl	19290 <WsfQueuePush>
   192fe:	e006      	b.n	1930e <WsfQueueInsert+0x4a>
  }
  else
  {
    /* insert in middle of queue */
    WSF_QUEUE_NEXT(pElem) = WSF_QUEUE_NEXT(pPrev);
   19300:	687b      	ldr	r3, [r7, #4]
   19302:	681a      	ldr	r2, [r3, #0]
   19304:	68bb      	ldr	r3, [r7, #8]
   19306:	601a      	str	r2, [r3, #0]
    WSF_QUEUE_NEXT(pPrev) = pElem;
   19308:	687b      	ldr	r3, [r7, #4]
   1930a:	68ba      	ldr	r2, [r7, #8]
   1930c:	601a      	str	r2, [r3, #0]
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
   1930e:	f7fb faa5 	bl	1485c <WsfCsExit>
}
   19312:	3710      	adds	r7, #16
   19314:	46bd      	mov	sp, r7
   19316:	bd80      	pop	{r7, pc}

00019318 <WsfQueueRemove>:
 *                    Note:  set pPrev to NULL if pElem is first element in queue.
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueueRemove(wsfQueue_t *pQueue, void *pElem, void *pPrev)
{
   19318:	b580      	push	{r7, lr}
   1931a:	b084      	sub	sp, #16
   1931c:	af00      	add	r7, sp, #0
   1931e:	60f8      	str	r0, [r7, #12]
   19320:	60b9      	str	r1, [r7, #8]
   19322:	607a      	str	r2, [r7, #4]
  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pQueue->pHead != NULL);
  WSF_ASSERT(pElem != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   19324:	f7fb fa86 	bl	14834 <WsfCsEnter>

  /* if first element */
  if (pElem == pQueue->pHead)
   19328:	68fb      	ldr	r3, [r7, #12]
   1932a:	681a      	ldr	r2, [r3, #0]
   1932c:	68bb      	ldr	r3, [r7, #8]
   1932e:	429a      	cmp	r2, r3
   19330:	d104      	bne.n	1933c <WsfQueueRemove+0x24>
  {
    /* remove from head of queue */
    pQueue->pHead = WSF_QUEUE_NEXT(pElem);
   19332:	68bb      	ldr	r3, [r7, #8]
   19334:	681a      	ldr	r2, [r3, #0]
   19336:	68fb      	ldr	r3, [r7, #12]
   19338:	601a      	str	r2, [r3, #0]
   1933a:	e006      	b.n	1934a <WsfQueueRemove+0x32>
  }
  else if (pPrev)
   1933c:	687b      	ldr	r3, [r7, #4]
   1933e:	2b00      	cmp	r3, #0
   19340:	d003      	beq.n	1934a <WsfQueueRemove+0x32>
  {
    /* remove from middle of queue, pPrev will never be null */
    WSF_QUEUE_NEXT(pPrev) = WSF_QUEUE_NEXT(pElem);
   19342:	68bb      	ldr	r3, [r7, #8]
   19344:	681a      	ldr	r2, [r3, #0]
   19346:	687b      	ldr	r3, [r7, #4]
   19348:	601a      	str	r2, [r3, #0]
  }

  /* if last element */
  if (pElem == pQueue->pTail)
   1934a:	68fb      	ldr	r3, [r7, #12]
   1934c:	685a      	ldr	r2, [r3, #4]
   1934e:	68bb      	ldr	r3, [r7, #8]
   19350:	429a      	cmp	r2, r3
   19352:	d102      	bne.n	1935a <WsfQueueRemove+0x42>
  {
    /* update tail */
    pQueue->pTail = pPrev;
   19354:	68fb      	ldr	r3, [r7, #12]
   19356:	687a      	ldr	r2, [r7, #4]
   19358:	605a      	str	r2, [r3, #4]
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
   1935a:	f7fb fa7f 	bl	1485c <WsfCsExit>
}
   1935e:	3710      	adds	r7, #16
   19360:	46bd      	mov	sp, r7
   19362:	bd80      	pop	{r7, pc}

00019364 <WsfQueueCount>:
 *
 *  \return Number of elements in queue.
 */
/*************************************************************************************************/
uint16_t WsfQueueCount(wsfQueue_t *pQueue)
{
   19364:	b580      	push	{r7, lr}
   19366:	b084      	sub	sp, #16
   19368:	af00      	add	r7, sp, #0
   1936a:	6078      	str	r0, [r7, #4]
  wsfQueueElem_t  *pElem;
  uint16_t        count = 0;
   1936c:	2300      	movs	r3, #0
   1936e:	817b      	strh	r3, [r7, #10]
  WSF_CS_INIT(cs);

  WSF_ASSERT(pQueue != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   19370:	f7fb fa60 	bl	14834 <WsfCsEnter>

  pElem = pQueue->pHead;
   19374:	687b      	ldr	r3, [r7, #4]
   19376:	681b      	ldr	r3, [r3, #0]
   19378:	60fb      	str	r3, [r7, #12]

  /* iterate over queue */
  while (pElem != NULL)
   1937a:	e005      	b.n	19388 <WsfQueueCount+0x24>
  {
    count++;
   1937c:	897b      	ldrh	r3, [r7, #10]
   1937e:	3301      	adds	r3, #1
   19380:	817b      	strh	r3, [r7, #10]
    pElem = pElem->pNext;
   19382:	68fb      	ldr	r3, [r7, #12]
   19384:	681b      	ldr	r3, [r3, #0]
   19386:	60fb      	str	r3, [r7, #12]
  WSF_CS_ENTER(cs);

  pElem = pQueue->pHead;

  /* iterate over queue */
  while (pElem != NULL)
   19388:	68fb      	ldr	r3, [r7, #12]
   1938a:	2b00      	cmp	r3, #0
   1938c:	d1f6      	bne.n	1937c <WsfQueueCount+0x18>
    count++;
    pElem = pElem->pNext;
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
   1938e:	f7fb fa65 	bl	1485c <WsfCsExit>

  return count;
   19392:	897b      	ldrh	r3, [r7, #10]
}
   19394:	4618      	mov	r0, r3
   19396:	3710      	adds	r7, #16
   19398:	46bd      	mov	sp, r7
   1939a:	bd80      	pop	{r7, pc}

0001939c <WsfQueueEmpty>:
 *
 *  \return TRUE if queue is empty, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t WsfQueueEmpty(wsfQueue_t *pQueue)
{
   1939c:	b580      	push	{r7, lr}
   1939e:	b084      	sub	sp, #16
   193a0:	af00      	add	r7, sp, #0
   193a2:	6078      	str	r0, [r7, #4]
  WSF_CS_INIT(cs);

  WSF_ASSERT(pQueue != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   193a4:	f7fb fa46 	bl	14834 <WsfCsEnter>

  empty = (pQueue->pHead == NULL);
   193a8:	687b      	ldr	r3, [r7, #4]
   193aa:	681b      	ldr	r3, [r3, #0]
   193ac:	2b00      	cmp	r3, #0
   193ae:	bf0c      	ite	eq
   193b0:	2301      	moveq	r3, #1
   193b2:	2300      	movne	r3, #0
   193b4:	b2db      	uxtb	r3, r3
   193b6:	73fb      	strb	r3, [r7, #15]

  /* exit critical section */
  WSF_CS_EXIT(cs);
   193b8:	f7fb fa50 	bl	1485c <WsfCsExit>

  return empty;
   193bc:	7bfb      	ldrb	r3, [r7, #15]
}
   193be:	4618      	mov	r0, r3
   193c0:	3710      	adds	r7, #16
   193c2:	46bd      	mov	sp, r7
   193c4:	bd80      	pop	{r7, pc}
   193c6:	bf00      	nop

000193c8 <wsfTimerRemove>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void wsfTimerRemove(wsfTimer_t *pTimer)
{
   193c8:	b580      	push	{r7, lr}
   193ca:	b084      	sub	sp, #16
   193cc:	af00      	add	r7, sp, #0
   193ce:	6078      	str	r0, [r7, #4]
  wsfTimer_t  *pElem;
  wsfTimer_t  *pPrev = NULL;
   193d0:	2300      	movs	r3, #0
   193d2:	60bb      	str	r3, [r7, #8]

  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
   193d4:	4b0f      	ldr	r3, [pc, #60]	; (19414 <wsfTimerRemove+0x4c>)
   193d6:	681b      	ldr	r3, [r3, #0]
   193d8:	60fb      	str	r3, [r7, #12]

  /* find timer in queue */
  while (pElem != NULL)
   193da:	e009      	b.n	193f0 <wsfTimerRemove+0x28>
  {
    if (pElem == pTimer)
   193dc:	68fa      	ldr	r2, [r7, #12]
   193de:	687b      	ldr	r3, [r7, #4]
   193e0:	429a      	cmp	r2, r3
   193e2:	d100      	bne.n	193e6 <wsfTimerRemove+0x1e>
    {
      break;
   193e4:	e007      	b.n	193f6 <wsfTimerRemove+0x2e>
    }
    pPrev = pElem;
   193e6:	68fb      	ldr	r3, [r7, #12]
   193e8:	60bb      	str	r3, [r7, #8]
    pElem = pElem->pNext;
   193ea:	68fb      	ldr	r3, [r7, #12]
   193ec:	681b      	ldr	r3, [r3, #0]
   193ee:	60fb      	str	r3, [r7, #12]
  wsfTimer_t  *pPrev = NULL;

  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;

  /* find timer in queue */
  while (pElem != NULL)
   193f0:	68fb      	ldr	r3, [r7, #12]
   193f2:	2b00      	cmp	r3, #0
   193f4:	d1f2      	bne.n	193dc <wsfTimerRemove+0x14>
    pPrev = pElem;
    pElem = pElem->pNext;
  }

  /* if timer found remove from queue */
  if (pElem != NULL)
   193f6:	68fb      	ldr	r3, [r7, #12]
   193f8:	2b00      	cmp	r3, #0
   193fa:	d007      	beq.n	1940c <wsfTimerRemove+0x44>
  {
    WsfQueueRemove(&wsfTimerTimerQueue, pTimer, pPrev);
   193fc:	4805      	ldr	r0, [pc, #20]	; (19414 <wsfTimerRemove+0x4c>)
   193fe:	6879      	ldr	r1, [r7, #4]
   19400:	68ba      	ldr	r2, [r7, #8]
   19402:	f7ff ff89 	bl	19318 <WsfQueueRemove>

    pTimer->isStarted = FALSE;
   19406:	687b      	ldr	r3, [r7, #4]
   19408:	2200      	movs	r2, #0
   1940a:	725a      	strb	r2, [r3, #9]
  }
}
   1940c:	3710      	adds	r7, #16
   1940e:	46bd      	mov	sp, r7
   19410:	bd80      	pop	{r7, pc}
   19412:	bf00      	nop
   19414:	1000a218 	.word	0x1000a218

00019418 <wsfTimerInsert>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void wsfTimerInsert(wsfTimer_t *pTimer, wsfTimerTicks_t ticks)
{
   19418:	b580      	push	{r7, lr}
   1941a:	b084      	sub	sp, #16
   1941c:	af00      	add	r7, sp, #0
   1941e:	6078      	str	r0, [r7, #4]
   19420:	6039      	str	r1, [r7, #0]
  wsfTimer_t  *pElem;
  wsfTimer_t  *pPrev = NULL;
   19422:	2300      	movs	r3, #0
   19424:	60bb      	str	r3, [r7, #8]

  /* task schedule lock */
  WsfTaskLock();
   19426:	f7fb fa2d 	bl	14884 <WsfTaskLock>

  /* if timer is already running stop it first */
  if (pTimer->isStarted)
   1942a:	687b      	ldr	r3, [r7, #4]
   1942c:	7a5b      	ldrb	r3, [r3, #9]
   1942e:	2b00      	cmp	r3, #0
   19430:	d002      	beq.n	19438 <wsfTimerInsert+0x20>
  {
    wsfTimerRemove(pTimer);
   19432:	6878      	ldr	r0, [r7, #4]
   19434:	f7ff ffc8 	bl	193c8 <wsfTimerRemove>
  }

  pTimer->isStarted = TRUE;
   19438:	687b      	ldr	r3, [r7, #4]
   1943a:	2201      	movs	r2, #1
   1943c:	725a      	strb	r2, [r3, #9]
  pTimer->ticks = ticks;
   1943e:	687b      	ldr	r3, [r7, #4]
   19440:	683a      	ldr	r2, [r7, #0]
   19442:	605a      	str	r2, [r3, #4]

  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
   19444:	4b0e      	ldr	r3, [pc, #56]	; (19480 <wsfTimerInsert+0x68>)
   19446:	681b      	ldr	r3, [r3, #0]
   19448:	60fb      	str	r3, [r7, #12]

  /* find insertion point in queue */
  while (pElem != NULL)
   1944a:	e00b      	b.n	19464 <wsfTimerInsert+0x4c>
  {
    if (pTimer->ticks < pElem->ticks)
   1944c:	687b      	ldr	r3, [r7, #4]
   1944e:	685a      	ldr	r2, [r3, #4]
   19450:	68fb      	ldr	r3, [r7, #12]
   19452:	685b      	ldr	r3, [r3, #4]
   19454:	429a      	cmp	r2, r3
   19456:	d200      	bcs.n	1945a <wsfTimerInsert+0x42>
    {
      break;
   19458:	e007      	b.n	1946a <wsfTimerInsert+0x52>
    }
    pPrev = pElem;
   1945a:	68fb      	ldr	r3, [r7, #12]
   1945c:	60bb      	str	r3, [r7, #8]
    pElem = pElem->pNext;
   1945e:	68fb      	ldr	r3, [r7, #12]
   19460:	681b      	ldr	r3, [r3, #0]
   19462:	60fb      	str	r3, [r7, #12]
  pTimer->ticks = ticks;

  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;

  /* find insertion point in queue */
  while (pElem != NULL)
   19464:	68fb      	ldr	r3, [r7, #12]
   19466:	2b00      	cmp	r3, #0
   19468:	d1f0      	bne.n	1944c <wsfTimerInsert+0x34>
    pPrev = pElem;
    pElem = pElem->pNext;
  }

  /* insert timer into queue */
  WsfQueueInsert(&wsfTimerTimerQueue, pTimer, pPrev);
   1946a:	4805      	ldr	r0, [pc, #20]	; (19480 <wsfTimerInsert+0x68>)
   1946c:	6879      	ldr	r1, [r7, #4]
   1946e:	68ba      	ldr	r2, [r7, #8]
   19470:	f7ff ff28 	bl	192c4 <WsfQueueInsert>

  /* task schedule unlock */
  WsfTaskUnlock();
   19474:	f7fb fa0c 	bl	14890 <WsfTaskUnlock>
}
   19478:	3710      	adds	r7, #16
   1947a:	46bd      	mov	sp, r7
   1947c:	bd80      	pop	{r7, pc}
   1947e:	bf00      	nop
   19480:	1000a218 	.word	0x1000a218

00019484 <WsfTimerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerInit(void)
{
   19484:	b480      	push	{r7}
   19486:	af00      	add	r7, sp, #0
  WSF_QUEUE_INIT(&wsfTimerTimerQueue);
   19488:	4b04      	ldr	r3, [pc, #16]	; (1949c <WsfTimerInit+0x18>)
   1948a:	2200      	movs	r2, #0
   1948c:	601a      	str	r2, [r3, #0]
   1948e:	4b03      	ldr	r3, [pc, #12]	; (1949c <WsfTimerInit+0x18>)
   19490:	2200      	movs	r2, #0
   19492:	605a      	str	r2, [r3, #4]
}
   19494:	46bd      	mov	sp, r7
   19496:	f85d 7b04 	ldr.w	r7, [sp], #4
   1949a:	4770      	bx	lr
   1949c:	1000a218 	.word	0x1000a218

000194a0 <WsfTimerStartSec>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerStartSec(wsfTimer_t *pTimer, wsfTimerTicks_t sec)
{
   194a0:	b580      	push	{r7, lr}
   194a2:	b082      	sub	sp, #8
   194a4:	af00      	add	r7, sp, #0
   194a6:	6078      	str	r0, [r7, #4]
   194a8:	6039      	str	r1, [r7, #0]
  WSF_TRACE_INFO2("WsfTimerStartSec pTimer:0x%x ticks:%u", (uint32_t)pTimer, WSF_TIMER_SEC_TO_TICKS(sec));

  /* insert timer into queue */
  wsfTimerInsert(pTimer, WSF_TIMER_SEC_TO_TICKS(sec));
   194aa:	683b      	ldr	r3, [r7, #0]
   194ac:	2264      	movs	r2, #100	; 0x64
   194ae:	fb02 f303 	mul.w	r3, r2, r3
   194b2:	6878      	ldr	r0, [r7, #4]
   194b4:	4619      	mov	r1, r3
   194b6:	f7ff ffaf 	bl	19418 <wsfTimerInsert>
}
   194ba:	3708      	adds	r7, #8
   194bc:	46bd      	mov	sp, r7
   194be:	bd80      	pop	{r7, pc}

000194c0 <WsfTimerStartMs>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerStartMs(wsfTimer_t *pTimer, wsfTimerTicks_t ms)
{
   194c0:	b580      	push	{r7, lr}
   194c2:	b082      	sub	sp, #8
   194c4:	af00      	add	r7, sp, #0
   194c6:	6078      	str	r0, [r7, #4]
   194c8:	6039      	str	r1, [r7, #0]
  WSF_TRACE_INFO2("WsfTimerStartMs pTimer:0x%x ticks:%u", (uint32_t)pTimer, WSF_TIMER_MS_TO_TICKS(ms));

  /* insert timer into queue */
  wsfTimerInsert(pTimer, WSF_TIMER_MS_TO_TICKS(ms));
   194ca:	683b      	ldr	r3, [r7, #0]
   194cc:	4a05      	ldr	r2, [pc, #20]	; (194e4 <WsfTimerStartMs+0x24>)
   194ce:	fba2 2303 	umull	r2, r3, r2, r3
   194d2:	08db      	lsrs	r3, r3, #3
   194d4:	6878      	ldr	r0, [r7, #4]
   194d6:	4619      	mov	r1, r3
   194d8:	f7ff ff9e 	bl	19418 <wsfTimerInsert>
}
   194dc:	3708      	adds	r7, #8
   194de:	46bd      	mov	sp, r7
   194e0:	bd80      	pop	{r7, pc}
   194e2:	bf00      	nop
   194e4:	cccccccd 	.word	0xcccccccd

000194e8 <WsfTimerStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerStop(wsfTimer_t *pTimer)
{
   194e8:	b580      	push	{r7, lr}
   194ea:	b082      	sub	sp, #8
   194ec:	af00      	add	r7, sp, #0
   194ee:	6078      	str	r0, [r7, #4]
  WSF_TRACE_INFO1("WsfTimerStop pTimer:0x%x", pTimer);

  /* task schedule lock */
  WsfTaskLock();
   194f0:	f7fb f9c8 	bl	14884 <WsfTaskLock>

  wsfTimerRemove(pTimer);
   194f4:	6878      	ldr	r0, [r7, #4]
   194f6:	f7ff ff67 	bl	193c8 <wsfTimerRemove>

  /* task schedule unlock */
  WsfTaskUnlock();
   194fa:	f7fb f9c9 	bl	14890 <WsfTaskUnlock>
}
   194fe:	3708      	adds	r7, #8
   19500:	46bd      	mov	sp, r7
   19502:	bd80      	pop	{r7, pc}

00019504 <WsfTimerUpdate>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerUpdate(wsfTimerTicks_t ticks)
{
   19504:	b580      	push	{r7, lr}
   19506:	b084      	sub	sp, #16
   19508:	af00      	add	r7, sp, #0
   1950a:	6078      	str	r0, [r7, #4]
  wsfTimer_t  *pElem;

  /* task schedule lock */
  WsfTaskLock();
   1950c:	f7fb f9ba 	bl	14884 <WsfTaskLock>

  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
   19510:	4b11      	ldr	r3, [pc, #68]	; (19558 <WsfTimerUpdate+0x54>)
   19512:	681b      	ldr	r3, [r3, #0]
   19514:	60fb      	str	r3, [r7, #12]

  /* iterate over timer queue */
  while (pElem != NULL)
   19516:	e017      	b.n	19548 <WsfTimerUpdate+0x44>
  {
    /* decrement ticks while preventing underflow */
    if (pElem->ticks > ticks)
   19518:	68fb      	ldr	r3, [r7, #12]
   1951a:	685a      	ldr	r2, [r3, #4]
   1951c:	687b      	ldr	r3, [r7, #4]
   1951e:	429a      	cmp	r2, r3
   19520:	d906      	bls.n	19530 <WsfTimerUpdate+0x2c>
    {
      pElem->ticks -= ticks;
   19522:	68fb      	ldr	r3, [r7, #12]
   19524:	685a      	ldr	r2, [r3, #4]
   19526:	687b      	ldr	r3, [r7, #4]
   19528:	1ad2      	subs	r2, r2, r3
   1952a:	68fb      	ldr	r3, [r7, #12]
   1952c:	605a      	str	r2, [r3, #4]
   1952e:	e008      	b.n	19542 <WsfTimerUpdate+0x3e>
    }
    else
    {
      pElem->ticks = 0;
   19530:	68fb      	ldr	r3, [r7, #12]
   19532:	2200      	movs	r2, #0
   19534:	605a      	str	r2, [r3, #4]

      /* timer expired; set task for this timer as ready */
      WsfTaskSetReady(pElem->handlerId, WSF_TIMER_EVENT);
   19536:	68fb      	ldr	r3, [r7, #12]
   19538:	7a1b      	ldrb	r3, [r3, #8]
   1953a:	4618      	mov	r0, r3
   1953c:	2102      	movs	r1, #2
   1953e:	f7fb fa27 	bl	14990 <WsfTaskSetReady>
    }

    pElem = pElem->pNext;
   19542:	68fb      	ldr	r3, [r7, #12]
   19544:	681b      	ldr	r3, [r3, #0]
   19546:	60fb      	str	r3, [r7, #12]
  WsfTaskLock();

  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;

  /* iterate over timer queue */
  while (pElem != NULL)
   19548:	68fb      	ldr	r3, [r7, #12]
   1954a:	2b00      	cmp	r3, #0
   1954c:	d1e4      	bne.n	19518 <WsfTimerUpdate+0x14>

    pElem = pElem->pNext;
  }

  /* task schedule unlock */
  WsfTaskUnlock();
   1954e:	f7fb f99f 	bl	14890 <WsfTaskUnlock>
}
   19552:	3710      	adds	r7, #16
   19554:	46bd      	mov	sp, r7
   19556:	bd80      	pop	{r7, pc}
   19558:	1000a218 	.word	0x1000a218

0001955c <WsfTimerNextExpiration>:
 *
 *  \return The number of ticks until the next timer expiration.
 */
/*************************************************************************************************/
wsfTimerTicks_t WsfTimerNextExpiration(bool_t *pTimerRunning)
{
   1955c:	b580      	push	{r7, lr}
   1955e:	b084      	sub	sp, #16
   19560:	af00      	add	r7, sp, #0
   19562:	6078      	str	r0, [r7, #4]
  wsfTimerTicks_t ticks;

  /* task schedule lock */
  WsfTaskLock();
   19564:	f7fb f98e 	bl	14884 <WsfTaskLock>

  if (wsfTimerTimerQueue.pHead == NULL)
   19568:	4b0b      	ldr	r3, [pc, #44]	; (19598 <WsfTimerNextExpiration+0x3c>)
   1956a:	681b      	ldr	r3, [r3, #0]
   1956c:	2b00      	cmp	r3, #0
   1956e:	d105      	bne.n	1957c <WsfTimerNextExpiration+0x20>
  {
    *pTimerRunning = FALSE;
   19570:	687b      	ldr	r3, [r7, #4]
   19572:	2200      	movs	r2, #0
   19574:	701a      	strb	r2, [r3, #0]
    ticks = 0;
   19576:	2300      	movs	r3, #0
   19578:	60fb      	str	r3, [r7, #12]
   1957a:	e006      	b.n	1958a <WsfTimerNextExpiration+0x2e>
  }
  else
  {
    *pTimerRunning = TRUE;
   1957c:	687b      	ldr	r3, [r7, #4]
   1957e:	2201      	movs	r2, #1
   19580:	701a      	strb	r2, [r3, #0]
    ticks = ((wsfTimer_t *) wsfTimerTimerQueue.pHead)->ticks;
   19582:	4b05      	ldr	r3, [pc, #20]	; (19598 <WsfTimerNextExpiration+0x3c>)
   19584:	681b      	ldr	r3, [r3, #0]
   19586:	685b      	ldr	r3, [r3, #4]
   19588:	60fb      	str	r3, [r7, #12]
  }

  /* task schedule unlock */
  WsfTaskUnlock();
   1958a:	f7fb f981 	bl	14890 <WsfTaskUnlock>

  return ticks;
   1958e:	68fb      	ldr	r3, [r7, #12]
}
   19590:	4618      	mov	r0, r3
   19592:	3710      	adds	r7, #16
   19594:	46bd      	mov	sp, r7
   19596:	bd80      	pop	{r7, pc}
   19598:	1000a218 	.word	0x1000a218

0001959c <WsfTimerServiceExpired>:
 *
 *  \return Pointer to timer or NULL.
 */
/*************************************************************************************************/
wsfTimer_t *WsfTimerServiceExpired(wsfTaskId_t taskId)
{
   1959c:	b580      	push	{r7, lr}
   1959e:	b084      	sub	sp, #16
   195a0:	af00      	add	r7, sp, #0
   195a2:	4603      	mov	r3, r0
   195a4:	71fb      	strb	r3, [r7, #7]
  wsfTimer_t  *pElem;
  wsfTimer_t  *pPrev = NULL;
   195a6:	2300      	movs	r3, #0
   195a8:	60fb      	str	r3, [r7, #12]

  /* task schedule lock */
  WsfTaskLock();
   195aa:	f7fb f96b 	bl	14884 <WsfTaskLock>

  /* find expired timers in queue */
  if (((pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead) != NULL) &&
   195ae:	4b0e      	ldr	r3, [pc, #56]	; (195e8 <WsfTimerServiceExpired+0x4c>)
   195b0:	681b      	ldr	r3, [r3, #0]
   195b2:	60bb      	str	r3, [r7, #8]
   195b4:	68bb      	ldr	r3, [r7, #8]
   195b6:	2b00      	cmp	r3, #0
   195b8:	d00f      	beq.n	195da <WsfTimerServiceExpired+0x3e>
      (pElem->ticks == 0))
   195ba:	68bb      	ldr	r3, [r7, #8]
   195bc:	685b      	ldr	r3, [r3, #4]

  /* task schedule lock */
  WsfTaskLock();

  /* find expired timers in queue */
  if (((pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead) != NULL) &&
   195be:	2b00      	cmp	r3, #0
   195c0:	d10b      	bne.n	195da <WsfTimerServiceExpired+0x3e>
      (pElem->ticks == 0))
  {
    /* remove timer from queue */
    WsfQueueRemove(&wsfTimerTimerQueue, pElem, pPrev);
   195c2:	4809      	ldr	r0, [pc, #36]	; (195e8 <WsfTimerServiceExpired+0x4c>)
   195c4:	68b9      	ldr	r1, [r7, #8]
   195c6:	68fa      	ldr	r2, [r7, #12]
   195c8:	f7ff fea6 	bl	19318 <WsfQueueRemove>

    pElem->isStarted = FALSE;
   195cc:	68bb      	ldr	r3, [r7, #8]
   195ce:	2200      	movs	r2, #0
   195d0:	725a      	strb	r2, [r3, #9]

    /* task schedule unlock */
    WsfTaskUnlock();
   195d2:	f7fb f95d 	bl	14890 <WsfTaskUnlock>

    WSF_TRACE_INFO1("Timer expired pTimer:0x%x", pElem);

    /* return timer */
    return pElem;
   195d6:	68bb      	ldr	r3, [r7, #8]
   195d8:	e002      	b.n	195e0 <WsfTimerServiceExpired+0x44>
  }

  /* task schedule unlock */
  WsfTaskUnlock();
   195da:	f7fb f959 	bl	14890 <WsfTaskUnlock>

  return NULL;
   195de:	2300      	movs	r3, #0
}
   195e0:	4618      	mov	r0, r3
   195e2:	3710      	adds	r7, #16
   195e4:	46bd      	mov	sp, r7
   195e6:	bd80      	pop	{r7, pc}
   195e8:	1000a218 	.word	0x1000a218

000195ec <AppDbInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbInit(void)
{
   195ec:	b480      	push	{r7}
   195ee:	af00      	add	r7, sp, #0
#ifdef AM_BLE_USE_NVM
    AppCopyRecListInNvm(pAppDbNewRec);
#endif
    return;
   195f0:	bf00      	nop
}
   195f2:	46bd      	mov	sp, r7
   195f4:	f85d 7b04 	ldr.w	r7, [sp], #4
   195f8:	4770      	bx	lr
   195fa:	bf00      	nop

000195fc <AppDbNewRecord>:
 *
 *  \return Database record handle.
 */
/*************************************************************************************************/
appDbHdl_t AppDbNewRecord(uint8_t addrType, uint8_t *pAddr)
{
   195fc:	b580      	push	{r7, lr}
   195fe:	b084      	sub	sp, #16
   19600:	af00      	add	r7, sp, #0
   19602:	4603      	mov	r3, r0
   19604:	6039      	str	r1, [r7, #0]
   19606:	71fb      	strb	r3, [r7, #7]
  appDbRec_t  *pRec = appDb.rec;
   19608:	4b22      	ldr	r3, [pc, #136]	; (19694 <AppDbNewRecord+0x98>)
   1960a:	60fb      	str	r3, [r7, #12]
  uint8_t     i;
  
  /* find a free record */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   1960c:	2303      	movs	r3, #3
   1960e:	72fb      	strb	r3, [r7, #11]
   19610:	e00b      	b.n	1962a <AppDbNewRecord+0x2e>
  {
    if (!pRec->inUse)
   19612:	68fb      	ldr	r3, [r7, #12]
   19614:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   19618:	2b00      	cmp	r3, #0
   1961a:	d100      	bne.n	1961e <AppDbNewRecord+0x22>
    {
      break;
   1961c:	e008      	b.n	19630 <AppDbNewRecord+0x34>
{
  appDbRec_t  *pRec = appDb.rec;
  uint8_t     i;
  
  /* find a free record */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   1961e:	7afb      	ldrb	r3, [r7, #11]
   19620:	3b01      	subs	r3, #1
   19622:	72fb      	strb	r3, [r7, #11]
   19624:	68fb      	ldr	r3, [r7, #12]
   19626:	33b0      	adds	r3, #176	; 0xb0
   19628:	60fb      	str	r3, [r7, #12]
   1962a:	7afb      	ldrb	r3, [r7, #11]
   1962c:	2b00      	cmp	r3, #0
   1962e:	d1f0      	bne.n	19612 <AppDbNewRecord+0x16>
      break;
    }
  }
  
  /* if all records were allocated */
  if (i == 0)
   19630:	7afb      	ldrb	r3, [r7, #11]
   19632:	2b00      	cmp	r3, #0
   19634:	d10f      	bne.n	19656 <AppDbNewRecord+0x5a>
  {
    /* overwrite a record */
    pRec = pAppDbNewRec;
   19636:	4b18      	ldr	r3, [pc, #96]	; (19698 <AppDbNewRecord+0x9c>)
   19638:	681b      	ldr	r3, [r3, #0]
   1963a:	60fb      	str	r3, [r7, #12]
    
    /* get next record to overwrite */
    pAppDbNewRec++;
   1963c:	4b16      	ldr	r3, [pc, #88]	; (19698 <AppDbNewRecord+0x9c>)
   1963e:	681b      	ldr	r3, [r3, #0]
   19640:	33b0      	adds	r3, #176	; 0xb0
   19642:	4a15      	ldr	r2, [pc, #84]	; (19698 <AppDbNewRecord+0x9c>)
   19644:	6013      	str	r3, [r2, #0]
    if (pAppDbNewRec == &appDb.rec[APP_DB_NUM_RECS])
   19646:	4b14      	ldr	r3, [pc, #80]	; (19698 <AppDbNewRecord+0x9c>)
   19648:	681b      	ldr	r3, [r3, #0]
   1964a:	4a14      	ldr	r2, [pc, #80]	; (1969c <AppDbNewRecord+0xa0>)
   1964c:	4293      	cmp	r3, r2
   1964e:	d102      	bne.n	19656 <AppDbNewRecord+0x5a>
    {
      pAppDbNewRec = appDb.rec;
   19650:	4b11      	ldr	r3, [pc, #68]	; (19698 <AppDbNewRecord+0x9c>)
   19652:	4a10      	ldr	r2, [pc, #64]	; (19694 <AppDbNewRecord+0x98>)
   19654:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* initialize record */
  memset(pRec, 0, sizeof(appDbRec_t));
   19656:	68f8      	ldr	r0, [r7, #12]
   19658:	2100      	movs	r1, #0
   1965a:	22b0      	movs	r2, #176	; 0xb0
   1965c:	f006 fec6 	bl	203ec <memset>
  pRec->inUse = TRUE;
   19660:	68fb      	ldr	r3, [r7, #12]
   19662:	2201      	movs	r2, #1
   19664:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  pRec->addrType = addrType;
   19668:	68fb      	ldr	r3, [r7, #12]
   1966a:	79fa      	ldrb	r2, [r7, #7]
   1966c:	719a      	strb	r2, [r3, #6]
  BdaCpy(pRec->peerAddr, pAddr);
   1966e:	68fb      	ldr	r3, [r7, #12]
   19670:	4618      	mov	r0, r3
   19672:	6839      	ldr	r1, [r7, #0]
   19674:	f7f9 fbea 	bl	12e4c <BdaCpy>
  pRec->peerAddedToRl = FALSE;
   19678:	68fb      	ldr	r3, [r7, #12]
   1967a:	2200      	movs	r2, #0
   1967c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  pRec->peerRpao = FALSE;
   19680:	68fb      	ldr	r3, [r7, #12]
   19682:	2200      	movs	r2, #0
   19684:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return (appDbHdl_t) pRec;
   19688:	68fb      	ldr	r3, [r7, #12]
}
   1968a:	4618      	mov	r0, r3
   1968c:	3710      	adds	r7, #16
   1968e:	46bd      	mov	sp, r7
   19690:	bd80      	pop	{r7, pc}
   19692:	bf00      	nop
   19694:	10004030 	.word	0x10004030
   19698:	10002bbc 	.word	0x10002bbc
   1969c:	10004240 	.word	0x10004240

000196a0 <AppDbGetNextRecord>:
*
*  \return Next record handle found. APP_DB_HDL_NONE, otherwise.
*/
/*************************************************************************************************/
appDbHdl_t AppDbGetNextRecord(appDbHdl_t hdl)
{
   196a0:	b580      	push	{r7, lr}
   196a2:	b084      	sub	sp, #16
   196a4:	af00      	add	r7, sp, #0
   196a6:	6078      	str	r0, [r7, #4]
  appDbRec_t  *pRec;

  /* if first record is requested */
  if (hdl == APP_DB_HDL_NONE)
   196a8:	687b      	ldr	r3, [r7, #4]
   196aa:	2b00      	cmp	r3, #0
   196ac:	d102      	bne.n	196b4 <AppDbGetNextRecord+0x14>
  {
    pRec = appDb.rec;
   196ae:	4b15      	ldr	r3, [pc, #84]	; (19704 <AppDbGetNextRecord+0x64>)
   196b0:	60fb      	str	r3, [r7, #12]
   196b2:	e00d      	b.n	196d0 <AppDbGetNextRecord+0x30>
  }
  /* if valid record passed in */
  else if (AppDbRecordInUse(hdl))
   196b4:	6878      	ldr	r0, [r7, #4]
   196b6:	f000 f85b 	bl	19770 <AppDbRecordInUse>
   196ba:	4603      	mov	r3, r0
   196bc:	2b00      	cmp	r3, #0
   196be:	d005      	beq.n	196cc <AppDbGetNextRecord+0x2c>
  {
    pRec = (appDbRec_t *)hdl;
   196c0:	687b      	ldr	r3, [r7, #4]
   196c2:	60fb      	str	r3, [r7, #12]
    pRec++;
   196c4:	68fb      	ldr	r3, [r7, #12]
   196c6:	33b0      	adds	r3, #176	; 0xb0
   196c8:	60fb      	str	r3, [r7, #12]
   196ca:	e001      	b.n	196d0 <AppDbGetNextRecord+0x30>
  }
  /* invalid record passed in */
  else
  {
    return APP_DB_HDL_NONE;
   196cc:	2300      	movs	r3, #0
   196ce:	e014      	b.n	196fa <AppDbGetNextRecord+0x5a>
  }

  /* look for next valid record */
  while (pRec < &appDb.rec[APP_DB_NUM_RECS])
   196d0:	e00e      	b.n	196f0 <AppDbGetNextRecord+0x50>
  {
    /* if record is in use */
    if (pRec->inUse && pRec->valid)
   196d2:	68fb      	ldr	r3, [r7, #12]
   196d4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   196d8:	2b00      	cmp	r3, #0
   196da:	d006      	beq.n	196ea <AppDbGetNextRecord+0x4a>
   196dc:	68fb      	ldr	r3, [r7, #12]
   196de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   196e2:	2b00      	cmp	r3, #0
   196e4:	d001      	beq.n	196ea <AppDbGetNextRecord+0x4a>
    {
      /* record found */
      return (appDbHdl_t)pRec;
   196e6:	68fb      	ldr	r3, [r7, #12]
   196e8:	e007      	b.n	196fa <AppDbGetNextRecord+0x5a>
    }

    /* look for next record */
    pRec++;
   196ea:	68fb      	ldr	r3, [r7, #12]
   196ec:	33b0      	adds	r3, #176	; 0xb0
   196ee:	60fb      	str	r3, [r7, #12]
  {
    return APP_DB_HDL_NONE;
  }

  /* look for next valid record */
  while (pRec < &appDb.rec[APP_DB_NUM_RECS])
   196f0:	68fb      	ldr	r3, [r7, #12]
   196f2:	4a05      	ldr	r2, [pc, #20]	; (19708 <AppDbGetNextRecord+0x68>)
   196f4:	4293      	cmp	r3, r2
   196f6:	d3ec      	bcc.n	196d2 <AppDbGetNextRecord+0x32>
    /* look for next record */
    pRec++;
  }

  /* end of records */
  return APP_DB_HDL_NONE;
   196f8:	2300      	movs	r3, #0
}
   196fa:	4618      	mov	r0, r3
   196fc:	3710      	adds	r7, #16
   196fe:	46bd      	mov	sp, r7
   19700:	bd80      	pop	{r7, pc}
   19702:	bf00      	nop
   19704:	10004030 	.word	0x10004030
   19708:	10004240 	.word	0x10004240

0001970c <AppDbDeleteRecord>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbDeleteRecord(appDbHdl_t hdl)
{
   1970c:	b480      	push	{r7}
   1970e:	b083      	sub	sp, #12
   19710:	af00      	add	r7, sp, #0
   19712:	6078      	str	r0, [r7, #4]
  ((appDbRec_t *) hdl)->inUse = FALSE;
   19714:	687b      	ldr	r3, [r7, #4]
   19716:	2200      	movs	r2, #0
   19718:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
}
   1971c:	370c      	adds	r7, #12
   1971e:	46bd      	mov	sp, r7
   19720:	f85d 7b04 	ldr.w	r7, [sp], #4
   19724:	4770      	bx	lr
   19726:	bf00      	nop

00019728 <AppDbValidateRecord>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbValidateRecord(appDbHdl_t hdl, uint8_t keyMask)
{
   19728:	b480      	push	{r7}
   1972a:	b083      	sub	sp, #12
   1972c:	af00      	add	r7, sp, #0
   1972e:	6078      	str	r0, [r7, #4]
   19730:	460b      	mov	r3, r1
   19732:	70fb      	strb	r3, [r7, #3]
  ((appDbRec_t *) hdl)->valid = TRUE;
   19734:	687b      	ldr	r3, [r7, #4]
   19736:	2201      	movs	r2, #1
   19738:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  ((appDbRec_t *) hdl)->keyValidMask = keyMask;
   1973c:	687b      	ldr	r3, [r7, #4]
   1973e:	78fa      	ldrb	r2, [r7, #3]
   19740:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

#ifdef AM_BLE_USE_NVM
  AppStorePairingInfoInNVM(hdl);
#endif
}
   19744:	370c      	adds	r7, #12
   19746:	46bd      	mov	sp, r7
   19748:	f85d 7b04 	ldr.w	r7, [sp], #4
   1974c:	4770      	bx	lr
   1974e:	bf00      	nop

00019750 <AppDbCheckValidRecord>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbCheckValidRecord(appDbHdl_t hdl)
{
   19750:	b580      	push	{r7, lr}
   19752:	b082      	sub	sp, #8
   19754:	af00      	add	r7, sp, #0
   19756:	6078      	str	r0, [r7, #4]
  if (((appDbRec_t *) hdl)->valid == FALSE)
   19758:	687b      	ldr	r3, [r7, #4]
   1975a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   1975e:	2b00      	cmp	r3, #0
   19760:	d102      	bne.n	19768 <AppDbCheckValidRecord+0x18>
  {
    AppDbDeleteRecord(hdl);
   19762:	6878      	ldr	r0, [r7, #4]
   19764:	f7ff ffd2 	bl	1970c <AppDbDeleteRecord>
  }
}
   19768:	3708      	adds	r7, #8
   1976a:	46bd      	mov	sp, r7
   1976c:	bd80      	pop	{r7, pc}
   1976e:	bf00      	nop

00019770 <AppDbRecordInUse>:
*
*  \return TURE if record in use. FALSE, otherwise.
*/
/*************************************************************************************************/
bool_t AppDbRecordInUse(appDbHdl_t hdl)
{
   19770:	b480      	push	{r7}
   19772:	b085      	sub	sp, #20
   19774:	af00      	add	r7, sp, #0
   19776:	6078      	str	r0, [r7, #4]
  appDbRec_t  *pRec = appDb.rec;
   19778:	4b12      	ldr	r3, [pc, #72]	; (197c4 <AppDbRecordInUse+0x54>)
   1977a:	60fb      	str	r3, [r7, #12]
  uint8_t     i;

  /* see if record is in database record list */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   1977c:	2303      	movs	r3, #3
   1977e:	72fb      	strb	r3, [r7, #11]
   19780:	e015      	b.n	197ae <AppDbRecordInUse+0x3e>
  {
    if (pRec->inUse && pRec->valid && (pRec == ((appDbRec_t *)hdl)))
   19782:	68fb      	ldr	r3, [r7, #12]
   19784:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   19788:	2b00      	cmp	r3, #0
   1978a:	d00a      	beq.n	197a2 <AppDbRecordInUse+0x32>
   1978c:	68fb      	ldr	r3, [r7, #12]
   1978e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   19792:	2b00      	cmp	r3, #0
   19794:	d005      	beq.n	197a2 <AppDbRecordInUse+0x32>
   19796:	68fa      	ldr	r2, [r7, #12]
   19798:	687b      	ldr	r3, [r7, #4]
   1979a:	429a      	cmp	r2, r3
   1979c:	d101      	bne.n	197a2 <AppDbRecordInUse+0x32>
    {
      return TRUE;
   1979e:	2301      	movs	r3, #1
   197a0:	e009      	b.n	197b6 <AppDbRecordInUse+0x46>
{
  appDbRec_t  *pRec = appDb.rec;
  uint8_t     i;

  /* see if record is in database record list */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   197a2:	7afb      	ldrb	r3, [r7, #11]
   197a4:	3b01      	subs	r3, #1
   197a6:	72fb      	strb	r3, [r7, #11]
   197a8:	68fb      	ldr	r3, [r7, #12]
   197aa:	33b0      	adds	r3, #176	; 0xb0
   197ac:	60fb      	str	r3, [r7, #12]
   197ae:	7afb      	ldrb	r3, [r7, #11]
   197b0:	2b00      	cmp	r3, #0
   197b2:	d1e6      	bne.n	19782 <AppDbRecordInUse+0x12>
    {
      return TRUE;
    }
  }

  return FALSE;
   197b4:	2300      	movs	r3, #0
}
   197b6:	4618      	mov	r0, r3
   197b8:	3714      	adds	r7, #20
   197ba:	46bd      	mov	sp, r7
   197bc:	f85d 7b04 	ldr.w	r7, [sp], #4
   197c0:	4770      	bx	lr
   197c2:	bf00      	nop
   197c4:	10004030 	.word	0x10004030

000197c8 <AppDbCheckBonded>:
 *
 *  \return TRUE if a bonded device is found, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t AppDbCheckBonded(void)
{
   197c8:	b480      	push	{r7}
   197ca:	b083      	sub	sp, #12
   197cc:	af00      	add	r7, sp, #0
  appDbRec_t  *pRec = appDb.rec;
   197ce:	4b0e      	ldr	r3, [pc, #56]	; (19808 <AppDbCheckBonded+0x40>)
   197d0:	607b      	str	r3, [r7, #4]
  uint8_t     i;
  
  /* find a record */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   197d2:	2303      	movs	r3, #3
   197d4:	70fb      	strb	r3, [r7, #3]
   197d6:	e00c      	b.n	197f2 <AppDbCheckBonded+0x2a>
  {
    if (pRec->inUse)
   197d8:	687b      	ldr	r3, [r7, #4]
   197da:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   197de:	2b00      	cmp	r3, #0
   197e0:	d001      	beq.n	197e6 <AppDbCheckBonded+0x1e>
    {
      return TRUE;
   197e2:	2301      	movs	r3, #1
   197e4:	e009      	b.n	197fa <AppDbCheckBonded+0x32>
{
  appDbRec_t  *pRec = appDb.rec;
  uint8_t     i;
  
  /* find a record */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   197e6:	78fb      	ldrb	r3, [r7, #3]
   197e8:	3b01      	subs	r3, #1
   197ea:	70fb      	strb	r3, [r7, #3]
   197ec:	687b      	ldr	r3, [r7, #4]
   197ee:	33b0      	adds	r3, #176	; 0xb0
   197f0:	607b      	str	r3, [r7, #4]
   197f2:	78fb      	ldrb	r3, [r7, #3]
   197f4:	2b00      	cmp	r3, #0
   197f6:	d1ef      	bne.n	197d8 <AppDbCheckBonded+0x10>
    {
      return TRUE;
    }
  }
  
  return FALSE;
   197f8:	2300      	movs	r3, #0
}
   197fa:	4618      	mov	r0, r3
   197fc:	370c      	adds	r7, #12
   197fe:	46bd      	mov	sp, r7
   19800:	f85d 7b04 	ldr.w	r7, [sp], #4
   19804:	4770      	bx	lr
   19806:	bf00      	nop
   19808:	10004030 	.word	0x10004030

0001980c <AppDbDeleteAllRecords>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbDeleteAllRecords(void)
{
   1980c:	b480      	push	{r7}
   1980e:	b083      	sub	sp, #12
   19810:	af00      	add	r7, sp, #0
  appDbRec_t  *pRec = appDb.rec;
   19812:	4b0b      	ldr	r3, [pc, #44]	; (19840 <AppDbDeleteAllRecords+0x34>)
   19814:	607b      	str	r3, [r7, #4]
  uint8_t     i;

  /* set in use to false for all records */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   19816:	2303      	movs	r3, #3
   19818:	70fb      	strb	r3, [r7, #3]
   1981a:	e009      	b.n	19830 <AppDbDeleteAllRecords+0x24>
  {
    pRec->inUse = FALSE;
   1981c:	687b      	ldr	r3, [r7, #4]
   1981e:	2200      	movs	r2, #0
   19820:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
{
  appDbRec_t  *pRec = appDb.rec;
  uint8_t     i;

  /* set in use to false for all records */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   19824:	78fb      	ldrb	r3, [r7, #3]
   19826:	3b01      	subs	r3, #1
   19828:	70fb      	strb	r3, [r7, #3]
   1982a:	687b      	ldr	r3, [r7, #4]
   1982c:	33b0      	adds	r3, #176	; 0xb0
   1982e:	607b      	str	r3, [r7, #4]
   19830:	78fb      	ldrb	r3, [r7, #3]
   19832:	2b00      	cmp	r3, #0
   19834:	d1f2      	bne.n	1981c <AppDbDeleteAllRecords+0x10>
  {
    pRec->inUse = FALSE;
  }  
}
   19836:	370c      	adds	r7, #12
   19838:	46bd      	mov	sp, r7
   1983a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1983e:	4770      	bx	lr
   19840:	10004030 	.word	0x10004030

00019844 <AppDbFindByAddr>:
 *
 *  \return Database record handle or APP_DB_HDL_NONE if not found.
 */
/*************************************************************************************************/
appDbHdl_t AppDbFindByAddr(uint8_t addrType, uint8_t *pAddr)
{
   19844:	b580      	push	{r7, lr}
   19846:	b084      	sub	sp, #16
   19848:	af00      	add	r7, sp, #0
   1984a:	4603      	mov	r3, r0
   1984c:	6039      	str	r1, [r7, #0]
   1984e:	71fb      	strb	r3, [r7, #7]
  appDbRec_t  *pRec = appDb.rec;
   19850:	4b16      	ldr	r3, [pc, #88]	; (198ac <AppDbFindByAddr+0x68>)
   19852:	60fb      	str	r3, [r7, #12]
  uint8_t     peerAddrType = DmHostAddrType(addrType);
   19854:	79fb      	ldrb	r3, [r7, #7]
   19856:	4618      	mov	r0, r3
   19858:	f7f6 fa82 	bl	fd60 <DmHostAddrType>
   1985c:	4603      	mov	r3, r0
   1985e:	72bb      	strb	r3, [r7, #10]
  uint8_t     i;
  
  /* find matching record */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   19860:	2303      	movs	r3, #3
   19862:	72fb      	strb	r3, [r7, #11]
   19864:	e019      	b.n	1989a <AppDbFindByAddr+0x56>
  {
    if (pRec->inUse && (pRec->addrType == peerAddrType) && BdaCmp(pRec->peerAddr, pAddr))
   19866:	68fb      	ldr	r3, [r7, #12]
   19868:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   1986c:	2b00      	cmp	r3, #0
   1986e:	d00e      	beq.n	1988e <AppDbFindByAddr+0x4a>
   19870:	68fb      	ldr	r3, [r7, #12]
   19872:	799b      	ldrb	r3, [r3, #6]
   19874:	7aba      	ldrb	r2, [r7, #10]
   19876:	429a      	cmp	r2, r3
   19878:	d109      	bne.n	1988e <AppDbFindByAddr+0x4a>
   1987a:	68fb      	ldr	r3, [r7, #12]
   1987c:	4618      	mov	r0, r3
   1987e:	6839      	ldr	r1, [r7, #0]
   19880:	f7f9 faf2 	bl	12e68 <BdaCmp>
   19884:	4603      	mov	r3, r0
   19886:	2b00      	cmp	r3, #0
   19888:	d001      	beq.n	1988e <AppDbFindByAddr+0x4a>
    {
      return (appDbHdl_t) pRec;
   1988a:	68fb      	ldr	r3, [r7, #12]
   1988c:	e009      	b.n	198a2 <AppDbFindByAddr+0x5e>
  appDbRec_t  *pRec = appDb.rec;
  uint8_t     peerAddrType = DmHostAddrType(addrType);
  uint8_t     i;
  
  /* find matching record */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   1988e:	7afb      	ldrb	r3, [r7, #11]
   19890:	3b01      	subs	r3, #1
   19892:	72fb      	strb	r3, [r7, #11]
   19894:	68fb      	ldr	r3, [r7, #12]
   19896:	33b0      	adds	r3, #176	; 0xb0
   19898:	60fb      	str	r3, [r7, #12]
   1989a:	7afb      	ldrb	r3, [r7, #11]
   1989c:	2b00      	cmp	r3, #0
   1989e:	d1e2      	bne.n	19866 <AppDbFindByAddr+0x22>
    {
      return (appDbHdl_t) pRec;
    }
  }
  
  return APP_DB_HDL_NONE;
   198a0:	2300      	movs	r3, #0
}
   198a2:	4618      	mov	r0, r3
   198a4:	3710      	adds	r7, #16
   198a6:	46bd      	mov	sp, r7
   198a8:	bd80      	pop	{r7, pc}
   198aa:	bf00      	nop
   198ac:	10004030 	.word	0x10004030

000198b0 <AppDbFindByLtkReq>:
 *
 *  \return Database record handle or APP_DB_HDL_NONE if not found.
 */
/*************************************************************************************************/
appDbHdl_t AppDbFindByLtkReq(uint16_t encDiversifier, uint8_t *pRandNum)
{
   198b0:	b580      	push	{r7, lr}
   198b2:	b084      	sub	sp, #16
   198b4:	af00      	add	r7, sp, #0
   198b6:	4603      	mov	r3, r0
   198b8:	6039      	str	r1, [r7, #0]
   198ba:	80fb      	strh	r3, [r7, #6]
  appDbRec_t  *pRec = appDb.rec;
   198bc:	4b14      	ldr	r3, [pc, #80]	; (19910 <AppDbFindByLtkReq+0x60>)
   198be:	60fb      	str	r3, [r7, #12]
  uint8_t     i;
  
  /* find matching record */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   198c0:	2303      	movs	r3, #3
   198c2:	72fb      	strb	r3, [r7, #11]
   198c4:	e01c      	b.n	19900 <AppDbFindByLtkReq+0x50>
  {
    if (pRec->inUse && (pRec->localLtk.ediv == encDiversifier) &&
   198c6:	68fb      	ldr	r3, [r7, #12]
   198c8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   198cc:	2b00      	cmp	r3, #0
   198ce:	d011      	beq.n	198f4 <AppDbFindByLtkReq+0x44>
   198d0:	68fb      	ldr	r3, [r7, #12]
   198d2:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
   198d6:	88fa      	ldrh	r2, [r7, #6]
   198d8:	429a      	cmp	r2, r3
   198da:	d10b      	bne.n	198f4 <AppDbFindByLtkReq+0x44>
        (memcmp(pRec->localLtk.rand, pRandNum, SMP_RAND8_LEN) == 0))
   198dc:	68fb      	ldr	r3, [r7, #12]
   198de:	3344      	adds	r3, #68	; 0x44
   198e0:	4618      	mov	r0, r3
   198e2:	6839      	ldr	r1, [r7, #0]
   198e4:	2208      	movs	r2, #8
   198e6:	f006 fceb 	bl	202c0 <memcmp>
   198ea:	4603      	mov	r3, r0
  uint8_t     i;
  
  /* find matching record */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
  {
    if (pRec->inUse && (pRec->localLtk.ediv == encDiversifier) &&
   198ec:	2b00      	cmp	r3, #0
   198ee:	d101      	bne.n	198f4 <AppDbFindByLtkReq+0x44>
        (memcmp(pRec->localLtk.rand, pRandNum, SMP_RAND8_LEN) == 0))
    {
      return (appDbHdl_t) pRec;
   198f0:	68fb      	ldr	r3, [r7, #12]
   198f2:	e009      	b.n	19908 <AppDbFindByLtkReq+0x58>
{
  appDbRec_t  *pRec = appDb.rec;
  uint8_t     i;
  
  /* find matching record */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   198f4:	7afb      	ldrb	r3, [r7, #11]
   198f6:	3b01      	subs	r3, #1
   198f8:	72fb      	strb	r3, [r7, #11]
   198fa:	68fb      	ldr	r3, [r7, #12]
   198fc:	33b0      	adds	r3, #176	; 0xb0
   198fe:	60fb      	str	r3, [r7, #12]
   19900:	7afb      	ldrb	r3, [r7, #11]
   19902:	2b00      	cmp	r3, #0
   19904:	d1df      	bne.n	198c6 <AppDbFindByLtkReq+0x16>
    {
      return (appDbHdl_t) pRec;
    }
  }
  
  return APP_DB_HDL_NONE;
   19906:	2300      	movs	r3, #0
}
   19908:	4618      	mov	r0, r3
   1990a:	3710      	adds	r7, #16
   1990c:	46bd      	mov	sp, r7
   1990e:	bd80      	pop	{r7, pc}
   19910:	10004030 	.word	0x10004030

00019914 <AppDbGetKey>:
 *
 *  \return Pointer to key if key is valid or NULL if not valid.
 */
/*************************************************************************************************/
dmSecKey_t *AppDbGetKey(appDbHdl_t hdl, uint8_t type, uint8_t *pSecLevel)
{
   19914:	b480      	push	{r7}
   19916:	b087      	sub	sp, #28
   19918:	af00      	add	r7, sp, #0
   1991a:	60f8      	str	r0, [r7, #12]
   1991c:	460b      	mov	r3, r1
   1991e:	607a      	str	r2, [r7, #4]
   19920:	72fb      	strb	r3, [r7, #11]
  dmSecKey_t *pKey = NULL;
   19922:	2300      	movs	r3, #0
   19924:	617b      	str	r3, [r7, #20]
  
  /* if key valid */
  if ((type & ((appDbRec_t *) hdl)->keyValidMask) != 0)
   19926:	68fb      	ldr	r3, [r7, #12]
   19928:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
   1992c:	7afb      	ldrb	r3, [r7, #11]
   1992e:	4013      	ands	r3, r2
   19930:	b2db      	uxtb	r3, r3
   19932:	2b00      	cmp	r3, #0
   19934:	d031      	beq.n	1999a <AppDbGetKey+0x86>
  {
    switch(type)
   19936:	7afb      	ldrb	r3, [r7, #11]
   19938:	3b01      	subs	r3, #1
   1993a:	2b07      	cmp	r3, #7
   1993c:	d82c      	bhi.n	19998 <AppDbGetKey+0x84>
   1993e:	a201      	add	r2, pc, #4	; (adr r2, 19944 <AppDbGetKey+0x30>)
   19940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   19944:	00019965 	.word	0x00019965
   19948:	00019977 	.word	0x00019977
   1994c:	00019999 	.word	0x00019999
   19950:	00019989 	.word	0x00019989
   19954:	00019999 	.word	0x00019999
   19958:	00019999 	.word	0x00019999
   1995c:	00019999 	.word	0x00019999
   19960:	00019991 	.word	0x00019991
    {
      case DM_KEY_LOCAL_LTK:
        *pSecLevel = ((appDbRec_t *) hdl)->localLtkSecLevel;
   19964:	68fb      	ldr	r3, [r7, #12]
   19966:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
   1996a:	687b      	ldr	r3, [r7, #4]
   1996c:	701a      	strb	r2, [r3, #0]
        pKey = (dmSecKey_t *) &((appDbRec_t *) hdl)->localLtk;
   1996e:	68fb      	ldr	r3, [r7, #12]
   19970:	3334      	adds	r3, #52	; 0x34
   19972:	617b      	str	r3, [r7, #20]
        break;
   19974:	e011      	b.n	1999a <AppDbGetKey+0x86>

      case DM_KEY_PEER_LTK:
        *pSecLevel = ((appDbRec_t *) hdl)->peerLtkSecLevel;
   19976:	68fb      	ldr	r3, [r7, #12]
   19978:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
   1997c:	687b      	ldr	r3, [r7, #4]
   1997e:	701a      	strb	r2, [r3, #0]
        pKey = (dmSecKey_t *) &((appDbRec_t *) hdl)->peerLtk;
   19980:	68fb      	ldr	r3, [r7, #12]
   19982:	3350      	adds	r3, #80	; 0x50
   19984:	617b      	str	r3, [r7, #20]
        break;
   19986:	e008      	b.n	1999a <AppDbGetKey+0x86>

      case DM_KEY_IRK:
        pKey = (dmSecKey_t *)&((appDbRec_t *)hdl)->peerIrk;
   19988:	68fb      	ldr	r3, [r7, #12]
   1998a:	3307      	adds	r3, #7
   1998c:	617b      	str	r3, [r7, #20]
        break;
   1998e:	e004      	b.n	1999a <AppDbGetKey+0x86>

      case DM_KEY_CSRK:
        pKey = (dmSecKey_t *)&((appDbRec_t *)hdl)->peerCsrk;
   19990:	68fb      	ldr	r3, [r7, #12]
   19992:	331e      	adds	r3, #30
   19994:	617b      	str	r3, [r7, #20]
        break;
   19996:	e000      	b.n	1999a <AppDbGetKey+0x86>
        
      default:
        break;
   19998:	bf00      	nop
    }
  }
  
  return pKey;
   1999a:	697b      	ldr	r3, [r7, #20]
}
   1999c:	4618      	mov	r0, r3
   1999e:	371c      	adds	r7, #28
   199a0:	46bd      	mov	sp, r7
   199a2:	f85d 7b04 	ldr.w	r7, [sp], #4
   199a6:	4770      	bx	lr

000199a8 <AppDbSetKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetKey(appDbHdl_t hdl, dmSecKeyIndEvt_t *pKey)
{
   199a8:	b5b0      	push	{r4, r5, r7, lr}
   199aa:	b082      	sub	sp, #8
   199ac:	af00      	add	r7, sp, #0
   199ae:	6078      	str	r0, [r7, #4]
   199b0:	6039      	str	r1, [r7, #0]
  switch(pKey->type)
   199b2:	683b      	ldr	r3, [r7, #0]
   199b4:	7f9b      	ldrb	r3, [r3, #30]
   199b6:	3b01      	subs	r3, #1
   199b8:	2b07      	cmp	r3, #7
   199ba:	d86c      	bhi.n	19a96 <AppDbSetKey+0xee>
   199bc:	a201      	add	r2, pc, #4	; (adr r2, 199c4 <AppDbSetKey+0x1c>)
   199be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   199c2:	bf00      	nop
   199c4:	000199e5 	.word	0x000199e5
   199c8:	00019a0f 	.word	0x00019a0f
   199cc:	00019a97 	.word	0x00019a97
   199d0:	00019a39 	.word	0x00019a39
   199d4:	00019a97 	.word	0x00019a97
   199d8:	00019a97 	.word	0x00019a97
   199dc:	00019a97 	.word	0x00019a97
   199e0:	00019a75 	.word	0x00019a75
  {
    case DM_KEY_LOCAL_LTK:
      ((appDbRec_t *) hdl)->localLtkSecLevel = pKey->secLevel;
   199e4:	683b      	ldr	r3, [r7, #0]
   199e6:	7fda      	ldrb	r2, [r3, #31]
   199e8:	687b      	ldr	r3, [r7, #4]
   199ea:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      ((appDbRec_t *) hdl)->localLtk = pKey->keyData.ltk;
   199ee:	687a      	ldr	r2, [r7, #4]
   199f0:	683b      	ldr	r3, [r7, #0]
   199f2:	f102 0434 	add.w	r4, r2, #52	; 0x34
   199f6:	1d1d      	adds	r5, r3, #4
   199f8:	6828      	ldr	r0, [r5, #0]
   199fa:	6869      	ldr	r1, [r5, #4]
   199fc:	68aa      	ldr	r2, [r5, #8]
   199fe:	68eb      	ldr	r3, [r5, #12]
   19a00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   19a02:	6928      	ldr	r0, [r5, #16]
   19a04:	6969      	ldr	r1, [r5, #20]
   19a06:	c403      	stmia	r4!, {r0, r1}
   19a08:	8b2b      	ldrh	r3, [r5, #24]
   19a0a:	8023      	strh	r3, [r4, #0]
      break;
   19a0c:	e044      	b.n	19a98 <AppDbSetKey+0xf0>

    case DM_KEY_PEER_LTK:
      ((appDbRec_t *) hdl)->peerLtkSecLevel = pKey->secLevel;
   19a0e:	683b      	ldr	r3, [r7, #0]
   19a10:	7fda      	ldrb	r2, [r3, #31]
   19a12:	687b      	ldr	r3, [r7, #4]
   19a14:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      ((appDbRec_t *) hdl)->peerLtk = pKey->keyData.ltk;
   19a18:	687a      	ldr	r2, [r7, #4]
   19a1a:	683b      	ldr	r3, [r7, #0]
   19a1c:	f102 0450 	add.w	r4, r2, #80	; 0x50
   19a20:	1d1d      	adds	r5, r3, #4
   19a22:	6828      	ldr	r0, [r5, #0]
   19a24:	6869      	ldr	r1, [r5, #4]
   19a26:	68aa      	ldr	r2, [r5, #8]
   19a28:	68eb      	ldr	r3, [r5, #12]
   19a2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   19a2c:	6928      	ldr	r0, [r5, #16]
   19a2e:	6969      	ldr	r1, [r5, #20]
   19a30:	c403      	stmia	r4!, {r0, r1}
   19a32:	8b2b      	ldrh	r3, [r5, #24]
   19a34:	8023      	strh	r3, [r4, #0]
      break;
   19a36:	e02f      	b.n	19a98 <AppDbSetKey+0xf0>

    case DM_KEY_IRK:
      ((appDbRec_t *)hdl)->peerIrk = pKey->keyData.irk;
   19a38:	687b      	ldr	r3, [r7, #4]
   19a3a:	683a      	ldr	r2, [r7, #0]
   19a3c:	3307      	adds	r3, #7
   19a3e:	3204      	adds	r2, #4
   19a40:	6811      	ldr	r1, [r2, #0]
   19a42:	6855      	ldr	r5, [r2, #4]
   19a44:	6894      	ldr	r4, [r2, #8]
   19a46:	68d0      	ldr	r0, [r2, #12]
   19a48:	6019      	str	r1, [r3, #0]
   19a4a:	605d      	str	r5, [r3, #4]
   19a4c:	609c      	str	r4, [r3, #8]
   19a4e:	60d8      	str	r0, [r3, #12]
   19a50:	6911      	ldr	r1, [r2, #16]
   19a52:	6119      	str	r1, [r3, #16]
   19a54:	8a91      	ldrh	r1, [r2, #20]
   19a56:	7d92      	ldrb	r2, [r2, #22]
   19a58:	8299      	strh	r1, [r3, #20]
   19a5a:	759a      	strb	r2, [r3, #22]

      /* make sure peer record is stored using its identity address */
      ((appDbRec_t *)hdl)->addrType = pKey->keyData.irk.addrType;
   19a5c:	683b      	ldr	r3, [r7, #0]
   19a5e:	7e9a      	ldrb	r2, [r3, #26]
   19a60:	687b      	ldr	r3, [r7, #4]
   19a62:	719a      	strb	r2, [r3, #6]
      BdaCpy(((appDbRec_t *)hdl)->peerAddr, pKey->keyData.irk.bdAddr);
   19a64:	687a      	ldr	r2, [r7, #4]
   19a66:	683b      	ldr	r3, [r7, #0]
   19a68:	3314      	adds	r3, #20
   19a6a:	4610      	mov	r0, r2
   19a6c:	4619      	mov	r1, r3
   19a6e:	f7f9 f9ed 	bl	12e4c <BdaCpy>
      break;
   19a72:	e011      	b.n	19a98 <AppDbSetKey+0xf0>

    case DM_KEY_CSRK:
      ((appDbRec_t *)hdl)->peerCsrk = pKey->keyData.csrk;
   19a74:	687b      	ldr	r3, [r7, #4]
   19a76:	683a      	ldr	r2, [r7, #0]
   19a78:	331e      	adds	r3, #30
   19a7a:	3204      	adds	r2, #4
   19a7c:	6814      	ldr	r4, [r2, #0]
   19a7e:	6850      	ldr	r0, [r2, #4]
   19a80:	6891      	ldr	r1, [r2, #8]
   19a82:	68d2      	ldr	r2, [r2, #12]
   19a84:	601c      	str	r4, [r3, #0]
   19a86:	6058      	str	r0, [r3, #4]
   19a88:	6099      	str	r1, [r3, #8]
   19a8a:	60da      	str	r2, [r3, #12]

      /* sign counter must be initialized to zero when CSRK is generated */
      ((appDbRec_t *)hdl)->peerSignCounter = 0;
   19a8c:	687b      	ldr	r3, [r7, #4]
   19a8e:	2200      	movs	r2, #0
   19a90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      break;
   19a94:	e000      	b.n	19a98 <AppDbSetKey+0xf0>
      
    default:
      break;
   19a96:	bf00      	nop
  }
}
   19a98:	3708      	adds	r7, #8
   19a9a:	46bd      	mov	sp, r7
   19a9c:	bdb0      	pop	{r4, r5, r7, pc}
   19a9e:	bf00      	nop

00019aa0 <AppDbGetCccTbl>:
 *
 *  \return Pointer to client characteristic configuration descriptor table.
 */
/*************************************************************************************************/
uint16_t *AppDbGetCccTbl(appDbHdl_t hdl)
{
   19aa0:	b480      	push	{r7}
   19aa2:	b083      	sub	sp, #12
   19aa4:	af00      	add	r7, sp, #0
   19aa6:	6078      	str	r0, [r7, #4]
  return ((appDbRec_t *) hdl)->cccTbl;
   19aa8:	687b      	ldr	r3, [r7, #4]
   19aaa:	336c      	adds	r3, #108	; 0x6c
}
   19aac:	4618      	mov	r0, r3
   19aae:	370c      	adds	r7, #12
   19ab0:	46bd      	mov	sp, r7
   19ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
   19ab6:	4770      	bx	lr

00019ab8 <AppDbSetCccTblValue>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetCccTblValue(appDbHdl_t hdl, uint16_t idx, uint16_t value)
{
   19ab8:	b480      	push	{r7}
   19aba:	b083      	sub	sp, #12
   19abc:	af00      	add	r7, sp, #0
   19abe:	6078      	str	r0, [r7, #4]
   19ac0:	460b      	mov	r3, r1
   19ac2:	807b      	strh	r3, [r7, #2]
   19ac4:	4613      	mov	r3, r2
   19ac6:	803b      	strh	r3, [r7, #0]
  WSF_ASSERT(idx < APP_DB_NUM_CCCD);
  
  ((appDbRec_t *) hdl)->cccTbl[idx] = value;
   19ac8:	887b      	ldrh	r3, [r7, #2]
   19aca:	687a      	ldr	r2, [r7, #4]
   19acc:	3334      	adds	r3, #52	; 0x34
   19ace:	005b      	lsls	r3, r3, #1
   19ad0:	4413      	add	r3, r2
   19ad2:	883a      	ldrh	r2, [r7, #0]
   19ad4:	809a      	strh	r2, [r3, #4]
}
   19ad6:	370c      	adds	r7, #12
   19ad8:	46bd      	mov	sp, r7
   19ada:	f85d 7b04 	ldr.w	r7, [sp], #4
   19ade:	4770      	bx	lr

00019ae0 <AppDbGetDiscStatus>:
 *
 *  \return Discovery status.
 */
/*************************************************************************************************/
uint8_t AppDbGetDiscStatus(appDbHdl_t hdl)
{
   19ae0:	b480      	push	{r7}
   19ae2:	b083      	sub	sp, #12
   19ae4:	af00      	add	r7, sp, #0
   19ae6:	6078      	str	r0, [r7, #4]
  return ((appDbRec_t *) hdl)->discStatus;
   19ae8:	687b      	ldr	r3, [r7, #4]
   19aea:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
}
   19aee:	4618      	mov	r0, r3
   19af0:	370c      	adds	r7, #12
   19af2:	46bd      	mov	sp, r7
   19af4:	f85d 7b04 	ldr.w	r7, [sp], #4
   19af8:	4770      	bx	lr
   19afa:	bf00      	nop

00019afc <AppDbSetDiscStatus>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetDiscStatus(appDbHdl_t hdl, uint8_t status)
{
   19afc:	b480      	push	{r7}
   19afe:	b083      	sub	sp, #12
   19b00:	af00      	add	r7, sp, #0
   19b02:	6078      	str	r0, [r7, #4]
   19b04:	460b      	mov	r3, r1
   19b06:	70fb      	strb	r3, [r7, #3]
  ((appDbRec_t *) hdl)->discStatus = status;
   19b08:	687b      	ldr	r3, [r7, #4]
   19b0a:	78fa      	ldrb	r2, [r7, #3]
   19b0c:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
}
   19b10:	370c      	adds	r7, #12
   19b12:	46bd      	mov	sp, r7
   19b14:	f85d 7b04 	ldr.w	r7, [sp], #4
   19b18:	4770      	bx	lr
   19b1a:	bf00      	nop

00019b1c <AppDbGetHdlList>:
 *
 *  \return Pointer to handle list.
 */
/*************************************************************************************************/
uint16_t *AppDbGetHdlList(appDbHdl_t hdl)
{
   19b1c:	b480      	push	{r7}
   19b1e:	b083      	sub	sp, #12
   19b20:	af00      	add	r7, sp, #0
   19b22:	6078      	str	r0, [r7, #4]
  return ((appDbRec_t *) hdl)->hdlList;
   19b24:	687b      	ldr	r3, [r7, #4]
   19b26:	3384      	adds	r3, #132	; 0x84
}
   19b28:	4618      	mov	r0, r3
   19b2a:	370c      	adds	r7, #12
   19b2c:	46bd      	mov	sp, r7
   19b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
   19b32:	4770      	bx	lr

00019b34 <AppDbSetHdlList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetHdlList(appDbHdl_t hdl, uint16_t *pHdlList)
{
   19b34:	b580      	push	{r7, lr}
   19b36:	b082      	sub	sp, #8
   19b38:	af00      	add	r7, sp, #0
   19b3a:	6078      	str	r0, [r7, #4]
   19b3c:	6039      	str	r1, [r7, #0]
  memcpy(((appDbRec_t *) hdl)->hdlList, pHdlList, sizeof(((appDbRec_t *) hdl)->hdlList));
   19b3e:	687b      	ldr	r3, [r7, #4]
   19b40:	3384      	adds	r3, #132	; 0x84
   19b42:	4618      	mov	r0, r3
   19b44:	6839      	ldr	r1, [r7, #0]
   19b46:	2228      	movs	r2, #40	; 0x28
   19b48:	f7f2 fada 	bl	c100 <memcpy>
}
   19b4c:	3708      	adds	r7, #8
   19b4e:	46bd      	mov	sp, r7
   19b50:	bd80      	pop	{r7, pc}
   19b52:	bf00      	nop

00019b54 <AppDbGetPeerSignCounter>:
 *
 *  \return Sign counter for peer device.
 */
/*************************************************************************************************/
uint32_t AppDbGetPeerSignCounter(appDbHdl_t hdl)
{
   19b54:	b480      	push	{r7}
   19b56:	b083      	sub	sp, #12
   19b58:	af00      	add	r7, sp, #0
   19b5a:	6078      	str	r0, [r7, #4]
  return ((appDbRec_t *)hdl)->peerSignCounter;
   19b5c:	687b      	ldr	r3, [r7, #4]
   19b5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
   19b62:	4618      	mov	r0, r3
   19b64:	370c      	adds	r7, #12
   19b66:	46bd      	mov	sp, r7
   19b68:	f85d 7b04 	ldr.w	r7, [sp], #4
   19b6c:	4770      	bx	lr
   19b6e:	bf00      	nop

00019b70 <AppDbSetPeerSignCounter>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetPeerSignCounter(appDbHdl_t hdl, uint32_t signCounter)
{
   19b70:	b480      	push	{r7}
   19b72:	b083      	sub	sp, #12
   19b74:	af00      	add	r7, sp, #0
   19b76:	6078      	str	r0, [r7, #4]
   19b78:	6039      	str	r1, [r7, #0]
  ((appDbRec_t *)hdl)->peerSignCounter = signCounter;
   19b7a:	687b      	ldr	r3, [r7, #4]
   19b7c:	683a      	ldr	r2, [r7, #0]
   19b7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
   19b82:	370c      	adds	r7, #12
   19b84:	46bd      	mov	sp, r7
   19b86:	f85d 7b04 	ldr.w	r7, [sp], #4
   19b8a:	4770      	bx	lr

00019b8c <AppDbGetPeerAddedToRl>:
 *
 *  \return TRUE if peer device's been added to resolving list. FALSE, otherwise.
 */
/*************************************************************************************************/
bool_t AppDbGetPeerAddedToRl(appDbHdl_t hdl)
{
   19b8c:	b480      	push	{r7}
   19b8e:	b083      	sub	sp, #12
   19b90:	af00      	add	r7, sp, #0
   19b92:	6078      	str	r0, [r7, #4]
  return ((appDbRec_t *)hdl)->peerAddedToRl;
   19b94:	687b      	ldr	r3, [r7, #4]
   19b96:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
}
   19b9a:	4618      	mov	r0, r3
   19b9c:	370c      	adds	r7, #12
   19b9e:	46bd      	mov	sp, r7
   19ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
   19ba4:	4770      	bx	lr
   19ba6:	bf00      	nop

00019ba8 <AppDbSetPeerAddedToRl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetPeerAddedToRl(appDbHdl_t hdl, bool_t peerAddedToRl)
{
   19ba8:	b480      	push	{r7}
   19baa:	b083      	sub	sp, #12
   19bac:	af00      	add	r7, sp, #0
   19bae:	6078      	str	r0, [r7, #4]
   19bb0:	460b      	mov	r3, r1
   19bb2:	70fb      	strb	r3, [r7, #3]
  ((appDbRec_t *)hdl)->peerAddedToRl = peerAddedToRl;
   19bb4:	687b      	ldr	r3, [r7, #4]
   19bb6:	78fa      	ldrb	r2, [r7, #3]
   19bb8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
   19bbc:	370c      	adds	r7, #12
   19bbe:	46bd      	mov	sp, r7
   19bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
   19bc4:	4770      	bx	lr
   19bc6:	bf00      	nop

00019bc8 <AppDbGetPeerRpao>:
 *
 *  \return TRUE if RPA Only attribute is present on peer device. FALSE, otherwise.
 */
/*************************************************************************************************/
bool_t AppDbGetPeerRpao(appDbHdl_t hdl)
{
   19bc8:	b480      	push	{r7}
   19bca:	b083      	sub	sp, #12
   19bcc:	af00      	add	r7, sp, #0
   19bce:	6078      	str	r0, [r7, #4]
  return ((appDbRec_t *)hdl)->peerRpao;
   19bd0:	687b      	ldr	r3, [r7, #4]
   19bd2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
}
   19bd6:	4618      	mov	r0, r3
   19bd8:	370c      	adds	r7, #12
   19bda:	46bd      	mov	sp, r7
   19bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
   19be0:	4770      	bx	lr
   19be2:	bf00      	nop

00019be4 <AppUiAction>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUiAction(uint8_t event)
{
   19be4:	b580      	push	{r7, lr}
   19be6:	b082      	sub	sp, #8
   19be8:	af00      	add	r7, sp, #0
   19bea:	4603      	mov	r3, r0
   19bec:	71fb      	strb	r3, [r7, #7]
  switch (event)
   19bee:	79fb      	ldrb	r3, [r7, #7]
   19bf0:	2b11      	cmp	r3, #17
   19bf2:	d867      	bhi.n	19cc4 <AppUiAction+0xe0>
   19bf4:	a201      	add	r2, pc, #4	; (adr r2, 19bfc <AppUiAction+0x18>)
   19bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   19bfa:	bf00      	nop
   19bfc:	00019cc5 	.word	0x00019cc5
   19c00:	00019c45 	.word	0x00019c45
   19c04:	00019cc5 	.word	0x00019cc5
   19c08:	00019c4d 	.word	0x00019c4d
   19c0c:	00019c55 	.word	0x00019c55
   19c10:	00019c5d 	.word	0x00019c5d
   19c14:	00019c65 	.word	0x00019c65
   19c18:	00019c6d 	.word	0x00019c6d
   19c1c:	00019c75 	.word	0x00019c75
   19c20:	00019c7d 	.word	0x00019c7d
   19c24:	00019c85 	.word	0x00019c85
   19c28:	00019c8d 	.word	0x00019c8d
   19c2c:	00019c95 	.word	0x00019c95
   19c30:	00019c9d 	.word	0x00019c9d
   19c34:	00019ca5 	.word	0x00019ca5
   19c38:	00019cad 	.word	0x00019cad
   19c3c:	00019cb5 	.word	0x00019cb5
   19c40:	00019cbd 	.word	0x00019cbd
    case APP_UI_NONE:
      /* no action */
      break;
      
    case APP_UI_RESET_CMPL:
      APP_TRACE_INFO0(">>> Reset complete <<<");
   19c44:	4821      	ldr	r0, [pc, #132]	; (19ccc <AppUiAction+0xe8>)
   19c46:	f7fa ff8d 	bl	14b64 <WsfTrace>
      break;
   19c4a:	e03b      	b.n	19cc4 <AppUiAction+0xe0>

    case APP_UI_ADV_START:
      APP_TRACE_INFO0(">>> Advertising started <<<");
   19c4c:	4820      	ldr	r0, [pc, #128]	; (19cd0 <AppUiAction+0xec>)
   19c4e:	f7fa ff89 	bl	14b64 <WsfTrace>
      break;
   19c52:	e037      	b.n	19cc4 <AppUiAction+0xe0>

    case APP_UI_ADV_STOP:
      APP_TRACE_INFO0(">>> Advertising stopped <<<");
   19c54:	481f      	ldr	r0, [pc, #124]	; (19cd4 <AppUiAction+0xf0>)
   19c56:	f7fa ff85 	bl	14b64 <WsfTrace>
      break;
   19c5a:	e033      	b.n	19cc4 <AppUiAction+0xe0>

    case APP_UI_SCAN_START:
      APP_TRACE_INFO0(">>> Scanning started <<<");
   19c5c:	481e      	ldr	r0, [pc, #120]	; (19cd8 <AppUiAction+0xf4>)
   19c5e:	f7fa ff81 	bl	14b64 <WsfTrace>
      break;
   19c62:	e02f      	b.n	19cc4 <AppUiAction+0xe0>

    case APP_UI_SCAN_STOP:
      APP_TRACE_INFO0(">>> Scanning stopped <<<");
   19c64:	481d      	ldr	r0, [pc, #116]	; (19cdc <AppUiAction+0xf8>)
   19c66:	f7fa ff7d 	bl	14b64 <WsfTrace>
      break;
   19c6a:	e02b      	b.n	19cc4 <AppUiAction+0xe0>

    case APP_UI_SCAN_REPORT:
      APP_TRACE_INFO0(">>> Scan data received from peer <<<");
   19c6c:	481c      	ldr	r0, [pc, #112]	; (19ce0 <AppUiAction+0xfc>)
   19c6e:	f7fa ff79 	bl	14b64 <WsfTrace>
      break;
   19c72:	e027      	b.n	19cc4 <AppUiAction+0xe0>

    case APP_UI_CONN_OPEN:
      APP_TRACE_INFO0(">>> Connection opened <<<");
   19c74:	481b      	ldr	r0, [pc, #108]	; (19ce4 <AppUiAction+0x100>)
   19c76:	f7fa ff75 	bl	14b64 <WsfTrace>
      break;
   19c7a:	e023      	b.n	19cc4 <AppUiAction+0xe0>

    case APP_UI_CONN_CLOSE:
      APP_TRACE_INFO0(">>> Connection closed <<<");
   19c7c:	481a      	ldr	r0, [pc, #104]	; (19ce8 <AppUiAction+0x104>)
   19c7e:	f7fa ff71 	bl	14b64 <WsfTrace>
      break;
   19c82:	e01f      	b.n	19cc4 <AppUiAction+0xe0>

    case APP_UI_SEC_PAIR_CMPL:
      APP_TRACE_INFO0(">>> Pairing completed successfully <<<");
   19c84:	4819      	ldr	r0, [pc, #100]	; (19cec <AppUiAction+0x108>)
   19c86:	f7fa ff6d 	bl	14b64 <WsfTrace>
      break;
   19c8a:	e01b      	b.n	19cc4 <AppUiAction+0xe0>

    case APP_UI_SEC_PAIR_FAIL:
      APP_TRACE_INFO0(">>> Pairing failed <<<");
   19c8c:	4818      	ldr	r0, [pc, #96]	; (19cf0 <AppUiAction+0x10c>)
   19c8e:	f7fa ff69 	bl	14b64 <WsfTrace>
      break;
   19c92:	e017      	b.n	19cc4 <AppUiAction+0xe0>

    case APP_UI_SEC_ENCRYPT:
      APP_TRACE_INFO0(">>> Connection encrypted <<<");
   19c94:	4817      	ldr	r0, [pc, #92]	; (19cf4 <AppUiAction+0x110>)
   19c96:	f7fa ff65 	bl	14b64 <WsfTrace>
      break;
   19c9a:	e013      	b.n	19cc4 <AppUiAction+0xe0>

    case APP_UI_SEC_ENCRYPT_FAIL:
      APP_TRACE_INFO0(">>> Encryption failed <<<");
   19c9c:	4816      	ldr	r0, [pc, #88]	; (19cf8 <AppUiAction+0x114>)
   19c9e:	f7fa ff61 	bl	14b64 <WsfTrace>
      break;
   19ca2:	e00f      	b.n	19cc4 <AppUiAction+0xe0>

    case APP_UI_PASSKEY_PROMPT:
      APP_TRACE_INFO0(">>> Prompt user to enter passkey <<<");
   19ca4:	4815      	ldr	r0, [pc, #84]	; (19cfc <AppUiAction+0x118>)
   19ca6:	f7fa ff5d 	bl	14b64 <WsfTrace>
      break;
   19caa:	e00b      	b.n	19cc4 <AppUiAction+0xe0>

    case APP_UI_ALERT_CANCEL:
      APP_TRACE_INFO0(">>> Cancel a low or high alert <<<");
   19cac:	4814      	ldr	r0, [pc, #80]	; (19d00 <AppUiAction+0x11c>)
   19cae:	f7fa ff59 	bl	14b64 <WsfTrace>
      break;
   19cb2:	e007      	b.n	19cc4 <AppUiAction+0xe0>

    case APP_UI_ALERT_LOW:
      APP_TRACE_INFO0(">>> Low alert <<<");
   19cb4:	4813      	ldr	r0, [pc, #76]	; (19d04 <AppUiAction+0x120>)
   19cb6:	f7fa ff55 	bl	14b64 <WsfTrace>
      break;
   19cba:	e003      	b.n	19cc4 <AppUiAction+0xe0>

    case APP_UI_ALERT_HIGH:
      APP_TRACE_INFO0(">>> High alert <<<");
   19cbc:	4812      	ldr	r0, [pc, #72]	; (19d08 <AppUiAction+0x124>)
   19cbe:	f7fa ff51 	bl	14b64 <WsfTrace>
      break;
   19cc2:	bf00      	nop
  }
}
   19cc4:	3708      	adds	r7, #8
   19cc6:	46bd      	mov	sp, r7
   19cc8:	bd80      	pop	{r7, pc}
   19cca:	bf00      	nop
   19ccc:	00023c20 	.word	0x00023c20
   19cd0:	00023c38 	.word	0x00023c38
   19cd4:	00023c54 	.word	0x00023c54
   19cd8:	00023c70 	.word	0x00023c70
   19cdc:	00023c8c 	.word	0x00023c8c
   19ce0:	00023ca8 	.word	0x00023ca8
   19ce4:	00023cd0 	.word	0x00023cd0
   19ce8:	00023cec 	.word	0x00023cec
   19cec:	00023d08 	.word	0x00023d08
   19cf0:	00023d30 	.word	0x00023d30
   19cf4:	00023d48 	.word	0x00023d48
   19cf8:	00023d68 	.word	0x00023d68
   19cfc:	00023d84 	.word	0x00023d84
   19d00:	00023dac 	.word	0x00023dac
   19d04:	00023dd0 	.word	0x00023dd0
   19d08:	00023de4 	.word	0x00023de4

00019d0c <AppUiDisplayPasskey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUiDisplayPasskey(uint32_t passkey)
{
   19d0c:	b580      	push	{r7, lr}
   19d0e:	b082      	sub	sp, #8
   19d10:	af00      	add	r7, sp, #0
   19d12:	6078      	str	r0, [r7, #4]
  APP_TRACE_INFO1(">>> Passkey: %d <<<", passkey);
   19d14:	4803      	ldr	r0, [pc, #12]	; (19d24 <AppUiDisplayPasskey+0x18>)
   19d16:	6879      	ldr	r1, [r7, #4]
   19d18:	f7fa ff24 	bl	14b64 <WsfTrace>
}
   19d1c:	3708      	adds	r7, #8
   19d1e:	46bd      	mov	sp, r7
   19d20:	bd80      	pop	{r7, pc}
   19d22:	bf00      	nop
   19d24:	00023df8 	.word	0x00023df8

00019d28 <appUiTimerExpired>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appUiTimerExpired(wsfMsgHdr_t *pMsg)
{
   19d28:	b480      	push	{r7}
   19d2a:	b083      	sub	sp, #12
   19d2c:	af00      	add	r7, sp, #0
   19d2e:	6078      	str	r0, [r7, #4]

}
   19d30:	370c      	adds	r7, #12
   19d32:	46bd      	mov	sp, r7
   19d34:	f85d 7b04 	ldr.w	r7, [sp], #4
   19d38:	4770      	bx	lr
   19d3a:	bf00      	nop

00019d3c <appUiBtnPoll>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appUiBtnPoll(void)
{
   19d3c:	b480      	push	{r7}
   19d3e:	af00      	add	r7, sp, #0

}
   19d40:	46bd      	mov	sp, r7
   19d42:	f85d 7b04 	ldr.w	r7, [sp], #4
   19d46:	4770      	bx	lr

00019d48 <AppUiBtnRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUiBtnRegister(appUiBtnCback_t cback)
{
   19d48:	b480      	push	{r7}
   19d4a:	b083      	sub	sp, #12
   19d4c:	af00      	add	r7, sp, #0
   19d4e:	6078      	str	r0, [r7, #4]
  appUiBtn.cback = cback;
   19d50:	4a03      	ldr	r2, [pc, #12]	; (19d60 <AppUiBtnRegister+0x18>)
   19d52:	687b      	ldr	r3, [r7, #4]
   19d54:	6013      	str	r3, [r2, #0]
}
   19d56:	370c      	adds	r7, #12
   19d58:	46bd      	mov	sp, r7
   19d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
   19d5e:	4770      	bx	lr
   19d60:	10004258 	.word	0x10004258

00019d64 <AppUiBtnPressed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUiBtnPressed(void)
{
   19d64:	b480      	push	{r7}
   19d66:	af00      	add	r7, sp, #0

}
   19d68:	46bd      	mov	sp, r7
   19d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
   19d6e:	4770      	bx	lr

00019d70 <ancsDmCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void ancsDmCback(dmEvt_t *pDmEvt)
{
   19d70:	b580      	push	{r7, lr}
   19d72:	b084      	sub	sp, #16
   19d74:	af00      	add	r7, sp, #0
   19d76:	6078      	str	r0, [r7, #4]
    dmEvt_t *pMsg;

    if ((pMsg = WsfMsgAlloc(sizeof(dmEvt_t))) != NULL)
   19d78:	2064      	movs	r0, #100	; 0x64
   19d7a:	f7ff f9df 	bl	1913c <WsfMsgAlloc>
   19d7e:	60f8      	str	r0, [r7, #12]
   19d80:	68fb      	ldr	r3, [r7, #12]
   19d82:	2b00      	cmp	r3, #0
   19d84:	d00b      	beq.n	19d9e <ancsDmCback+0x2e>
    {
        memcpy(pMsg, pDmEvt, sizeof(dmEvt_t));
   19d86:	68f8      	ldr	r0, [r7, #12]
   19d88:	6879      	ldr	r1, [r7, #4]
   19d8a:	2264      	movs	r2, #100	; 0x64
   19d8c:	f7f2 f9b8 	bl	c100 <memcpy>
        WsfMsgSend(ancsCb.handlerId, pMsg);
   19d90:	4b04      	ldr	r3, [pc, #16]	; (19da4 <ancsDmCback+0x34>)
   19d92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   19d96:	4618      	mov	r0, r3
   19d98:	68f9      	ldr	r1, [r7, #12]
   19d9a:	f7ff f9f3 	bl	19184 <WsfMsgSend>
    }
}
   19d9e:	3710      	adds	r7, #16
   19da0:	46bd      	mov	sp, r7
   19da2:	bd80      	pop	{r7, pc}
   19da4:	10004264 	.word	0x10004264

00019da8 <ancsAttCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void ancsAttCback(attEvt_t *pEvt)
{
   19da8:	b580      	push	{r7, lr}
   19daa:	b084      	sub	sp, #16
   19dac:	af00      	add	r7, sp, #0
   19dae:	6078      	str	r0, [r7, #4]
    attEvt_t *pMsg;

    if ((pMsg = WsfMsgAlloc(sizeof(attEvt_t) + pEvt->valueLen)) != NULL)
   19db0:	687b      	ldr	r3, [r7, #4]
   19db2:	891b      	ldrh	r3, [r3, #8]
   19db4:	3310      	adds	r3, #16
   19db6:	b29b      	uxth	r3, r3
   19db8:	4618      	mov	r0, r3
   19dba:	f7ff f9bf 	bl	1913c <WsfMsgAlloc>
   19dbe:	60f8      	str	r0, [r7, #12]
   19dc0:	68fb      	ldr	r3, [r7, #12]
   19dc2:	2b00      	cmp	r3, #0
   19dc4:	d01b      	beq.n	19dfe <ancsAttCback+0x56>
    {
        memcpy(pMsg, pEvt, sizeof(attEvt_t));
   19dc6:	68f8      	ldr	r0, [r7, #12]
   19dc8:	6879      	ldr	r1, [r7, #4]
   19dca:	2210      	movs	r2, #16
   19dcc:	f7f2 f998 	bl	c100 <memcpy>
        pMsg->pValue = (uint8_t *) (pMsg + 1);
   19dd0:	68fb      	ldr	r3, [r7, #12]
   19dd2:	f103 0210 	add.w	r2, r3, #16
   19dd6:	68fb      	ldr	r3, [r7, #12]
   19dd8:	605a      	str	r2, [r3, #4]
        memcpy(pMsg->pValue, pEvt->pValue, pEvt->valueLen);
   19dda:	68fb      	ldr	r3, [r7, #12]
   19ddc:	6859      	ldr	r1, [r3, #4]
   19dde:	687b      	ldr	r3, [r7, #4]
   19de0:	685a      	ldr	r2, [r3, #4]
   19de2:	687b      	ldr	r3, [r7, #4]
   19de4:	891b      	ldrh	r3, [r3, #8]
   19de6:	4608      	mov	r0, r1
   19de8:	4611      	mov	r1, r2
   19dea:	461a      	mov	r2, r3
   19dec:	f7f2 f988 	bl	c100 <memcpy>
        WsfMsgSend(ancsCb.handlerId, pMsg);
   19df0:	4b04      	ldr	r3, [pc, #16]	; (19e04 <ancsAttCback+0x5c>)
   19df2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   19df6:	4618      	mov	r0, r3
   19df8:	68f9      	ldr	r1, [r7, #12]
   19dfa:	f7ff f9c3 	bl	19184 <WsfMsgSend>
    }
}
   19dfe:	3710      	adds	r7, #16
   19e00:	46bd      	mov	sp, r7
   19e02:	bd80      	pop	{r7, pc}
   19e04:	10004264 	.word	0x10004264

00019e08 <ancsCccCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
 static void ancsCccCback(attsCccEvt_t *pEvt)
{
   19e08:	b580      	push	{r7, lr}
   19e0a:	b084      	sub	sp, #16
   19e0c:	af00      	add	r7, sp, #0
   19e0e:	6078      	str	r0, [r7, #4]
    attsCccEvt_t  *pMsg;
    appDbHdl_t    dbHdl;

    /* if CCC not set from initialization and there's a device record */
    if ((pEvt->handle != ATT_HANDLE_NONE) &&
   19e10:	687b      	ldr	r3, [r7, #4]
   19e12:	889b      	ldrh	r3, [r3, #4]
   19e14:	2b00      	cmp	r3, #0
   19e16:	d013      	beq.n	19e40 <ancsCccCback+0x38>
        ((dbHdl = AppDbGetHdl((dmConnId_t) pEvt->hdr.param)) != APP_DB_HDL_NONE))
   19e18:	687b      	ldr	r3, [r7, #4]
   19e1a:	881b      	ldrh	r3, [r3, #0]
   19e1c:	b2db      	uxtb	r3, r3
{
    attsCccEvt_t  *pMsg;
    appDbHdl_t    dbHdl;

    /* if CCC not set from initialization and there's a device record */
    if ((pEvt->handle != ATT_HANDLE_NONE) &&
   19e1e:	4618      	mov	r0, r3
   19e20:	f001 fe04 	bl	1ba2c <AppDbGetHdl>
   19e24:	60f8      	str	r0, [r7, #12]
   19e26:	68fb      	ldr	r3, [r7, #12]
   19e28:	2b00      	cmp	r3, #0
   19e2a:	d009      	beq.n	19e40 <ancsCccCback+0x38>
        ((dbHdl = AppDbGetHdl((dmConnId_t) pEvt->hdr.param)) != APP_DB_HDL_NONE))
    {
        /* store value in device database */
        AppDbSetCccTblValue(dbHdl, pEvt->idx, pEvt->value);
   19e2c:	687b      	ldr	r3, [r7, #4]
   19e2e:	7a1b      	ldrb	r3, [r3, #8]
   19e30:	b29a      	uxth	r2, r3
   19e32:	687b      	ldr	r3, [r7, #4]
   19e34:	88db      	ldrh	r3, [r3, #6]
   19e36:	68f8      	ldr	r0, [r7, #12]
   19e38:	4611      	mov	r1, r2
   19e3a:	461a      	mov	r2, r3
   19e3c:	f7ff fe3c 	bl	19ab8 <AppDbSetCccTblValue>
    }

    if ((pMsg = WsfMsgAlloc(sizeof(attsCccEvt_t))) != NULL)
   19e40:	200a      	movs	r0, #10
   19e42:	f7ff f97b 	bl	1913c <WsfMsgAlloc>
   19e46:	60b8      	str	r0, [r7, #8]
   19e48:	68bb      	ldr	r3, [r7, #8]
   19e4a:	2b00      	cmp	r3, #0
   19e4c:	d00b      	beq.n	19e66 <ancsCccCback+0x5e>
    {
        memcpy(pMsg, pEvt, sizeof(attsCccEvt_t));
   19e4e:	68b8      	ldr	r0, [r7, #8]
   19e50:	6879      	ldr	r1, [r7, #4]
   19e52:	220a      	movs	r2, #10
   19e54:	f7f2 f954 	bl	c100 <memcpy>
        WsfMsgSend(ancsCb.handlerId, pMsg);
   19e58:	4b04      	ldr	r3, [pc, #16]	; (19e6c <ancsCccCback+0x64>)
   19e5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   19e5e:	4618      	mov	r0, r3
   19e60:	68b9      	ldr	r1, [r7, #8]
   19e62:	f7ff f98f 	bl	19184 <WsfMsgSend>
    }
}
   19e66:	3710      	adds	r7, #16
   19e68:	46bd      	mov	sp, r7
   19e6a:	bd80      	pop	{r7, pc}
   19e6c:	10004264 	.word	0x10004264

00019e70 <ancsProcCccState>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void ancsProcCccState(ancsMsg_t *pMsg)
{
   19e70:	b580      	push	{r7, lr}
   19e72:	b082      	sub	sp, #8
   19e74:	af00      	add	r7, sp, #0
   19e76:	6078      	str	r0, [r7, #4]
    APP_TRACE_INFO3("ccc state ind value:%d handle:%d idx:%d", pMsg->ccc.value, pMsg->ccc.handle, pMsg->ccc.idx);
   19e78:	687b      	ldr	r3, [r7, #4]
   19e7a:	88db      	ldrh	r3, [r3, #6]
   19e7c:	4619      	mov	r1, r3
   19e7e:	687b      	ldr	r3, [r7, #4]
   19e80:	889b      	ldrh	r3, [r3, #4]
   19e82:	461a      	mov	r2, r3
   19e84:	687b      	ldr	r3, [r7, #4]
   19e86:	7a1b      	ldrb	r3, [r3, #8]
   19e88:	4802      	ldr	r0, [pc, #8]	; (19e94 <ancsProcCccState+0x24>)
   19e8a:	f7fa fe6b 	bl	14b64 <WsfTrace>
}
   19e8e:	3708      	adds	r7, #8
   19e90:	46bd      	mov	sp, r7
   19e92:	bd80      	pop	{r7, pc}
   19e94:	00023e3c 	.word	0x00023e3c

00019e98 <ancsClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void ancsClose(ancsMsg_t *pMsg)
{
   19e98:	b480      	push	{r7}
   19e9a:	b083      	sub	sp, #12
   19e9c:	af00      	add	r7, sp, #0
   19e9e:	6078      	str	r0, [r7, #4]
}
   19ea0:	370c      	adds	r7, #12
   19ea2:	46bd      	mov	sp, r7
   19ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
   19ea8:	4770      	bx	lr
   19eaa:	bf00      	nop

00019eac <ancsSetup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void ancsSetup(ancsMsg_t *pMsg)
{
   19eac:	b580      	push	{r7, lr}
   19eae:	b082      	sub	sp, #8
   19eb0:	af00      	add	r7, sp, #0
   19eb2:	6078      	str	r0, [r7, #4]
    /* set advertising and scan response data for discoverable mode */
    AppAdvSetData(APP_ADV_DATA_DISCOVERABLE, sizeof(ancsAdvDataDisc), (uint8_t *) ancsAdvDataDisc);
   19eb4:	2002      	movs	r0, #2
   19eb6:	2110      	movs	r1, #16
   19eb8:	4a0b      	ldr	r2, [pc, #44]	; (19ee8 <ancsSetup+0x3c>)
   19eba:	f003 f889 	bl	1cfd0 <AppAdvSetData>
    AppAdvSetData(APP_SCAN_DATA_DISCOVERABLE, sizeof(ancsScanDataDisc), (uint8_t *) ancsScanDataDisc);
   19ebe:	2003      	movs	r0, #3
   19ec0:	2112      	movs	r1, #18
   19ec2:	4a0a      	ldr	r2, [pc, #40]	; (19eec <ancsSetup+0x40>)
   19ec4:	f003 f884 	bl	1cfd0 <AppAdvSetData>

    /* set advertising and scan response data for connectable mode */
    AppAdvSetData(APP_ADV_DATA_CONNECTABLE, sizeof(ancsAdvDataDisc), (uint8_t *) ancsAdvDataDisc);
   19ec8:	2000      	movs	r0, #0
   19eca:	2110      	movs	r1, #16
   19ecc:	4a06      	ldr	r2, [pc, #24]	; (19ee8 <ancsSetup+0x3c>)
   19ece:	f003 f87f 	bl	1cfd0 <AppAdvSetData>
    AppAdvSetData(APP_SCAN_DATA_CONNECTABLE, sizeof(ancsScanDataDisc), (uint8_t *) ancsScanDataDisc);
   19ed2:	2001      	movs	r0, #1
   19ed4:	2112      	movs	r1, #18
   19ed6:	4a05      	ldr	r2, [pc, #20]	; (19eec <ancsSetup+0x40>)
   19ed8:	f003 f87a 	bl	1cfd0 <AppAdvSetData>

    /* start advertising; automatically set connectable/discoverable mode and bondable mode */
    AppAdvStart(APP_MODE_AUTO_INIT);
   19edc:	2002      	movs	r0, #2
   19ede:	f003 f897 	bl	1d010 <AppAdvStart>
}
   19ee2:	3708      	adds	r7, #8
   19ee4:	46bd      	mov	sp, r7
   19ee6:	bd80      	pop	{r7, pc}
   19ee8:	0002537c 	.word	0x0002537c
   19eec:	0002538c 	.word	0x0002538c

00019ef0 <ancsValueUpdate>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void ancsValueUpdate(attEvt_t *pMsg)
{
   19ef0:	b580      	push	{r7, lr}
   19ef2:	b082      	sub	sp, #8
   19ef4:	af00      	add	r7, sp, #0
   19ef6:	6078      	str	r0, [r7, #4]
    /* iOS notification */
    if ((pMsg->handle == pAncsAnccHdlList[ANCC_NOTIFICATION_SOURCE_HDL_IDX]) ||
   19ef8:	687b      	ldr	r3, [r7, #4]
   19efa:	895a      	ldrh	r2, [r3, #10]
   19efc:	4b16      	ldr	r3, [pc, #88]	; (19f58 <ancsValueUpdate+0x68>)
   19efe:	681b      	ldr	r3, [r3, #0]
   19f00:	881b      	ldrh	r3, [r3, #0]
   19f02:	429a      	cmp	r2, r3
   19f04:	d00f      	beq.n	19f26 <ancsValueUpdate+0x36>
        (pMsg->handle == pAncsAnccHdlList[ANCC_DATA_SOURCE_HDL_IDX]) ||
   19f06:	687b      	ldr	r3, [r7, #4]
   19f08:	895a      	ldrh	r2, [r3, #10]
   19f0a:	4b13      	ldr	r3, [pc, #76]	; (19f58 <ancsValueUpdate+0x68>)
   19f0c:	681b      	ldr	r3, [r3, #0]
   19f0e:	3306      	adds	r3, #6
   19f10:	881b      	ldrh	r3, [r3, #0]
 */
/*************************************************************************************************/
static void ancsValueUpdate(attEvt_t *pMsg)
{
    /* iOS notification */
    if ((pMsg->handle == pAncsAnccHdlList[ANCC_NOTIFICATION_SOURCE_HDL_IDX]) ||
   19f12:	429a      	cmp	r2, r3
   19f14:	d007      	beq.n	19f26 <ancsValueUpdate+0x36>
        (pMsg->handle == pAncsAnccHdlList[ANCC_DATA_SOURCE_HDL_IDX]) ||
        (pMsg->handle == pAncsAnccHdlList[ANCC_CONTROL_POINT_HDL_IDX]))
   19f16:	687b      	ldr	r3, [r7, #4]
   19f18:	895a      	ldrh	r2, [r3, #10]
   19f1a:	4b0f      	ldr	r3, [pc, #60]	; (19f58 <ancsValueUpdate+0x68>)
   19f1c:	681b      	ldr	r3, [r3, #0]
   19f1e:	3304      	adds	r3, #4
   19f20:	881b      	ldrh	r3, [r3, #0]
/*************************************************************************************************/
static void ancsValueUpdate(attEvt_t *pMsg)
{
    /* iOS notification */
    if ((pMsg->handle == pAncsAnccHdlList[ANCC_NOTIFICATION_SOURCE_HDL_IDX]) ||
        (pMsg->handle == pAncsAnccHdlList[ANCC_DATA_SOURCE_HDL_IDX]) ||
   19f22:	429a      	cmp	r2, r3
   19f24:	d107      	bne.n	19f36 <ancsValueUpdate+0x46>
        (pMsg->handle == pAncsAnccHdlList[ANCC_CONTROL_POINT_HDL_IDX]))
    {
        AnccNtfValueUpdate(pAncsAnccHdlList, pMsg, ANCC_ACTION_TIMER_IND);
   19f26:	4b0c      	ldr	r3, [pc, #48]	; (19f58 <ancsValueUpdate+0x68>)
   19f28:	681b      	ldr	r3, [r3, #0]
   19f2a:	4618      	mov	r0, r3
   19f2c:	6879      	ldr	r1, [r7, #4]
   19f2e:	22a0      	movs	r2, #160	; 0xa0
   19f30:	f7fa f8b8 	bl	140a4 <AnccNtfValueUpdate>
   19f34:	e002      	b.n	19f3c <ancsValueUpdate+0x4c>
    }
    else
    {
        APP_TRACE_INFO0("Data received from other other handle");
   19f36:	4809      	ldr	r0, [pc, #36]	; (19f5c <ancsValueUpdate+0x6c>)
   19f38:	f7fa fe14 	bl	14b64 <WsfTrace>
    }

    /* GATT */
    if (GattValueUpdate(pAncsGattHdlList, pMsg) == ATT_SUCCESS)
   19f3c:	4b08      	ldr	r3, [pc, #32]	; (19f60 <ancsValueUpdate+0x70>)
   19f3e:	681b      	ldr	r3, [r3, #0]
   19f40:	4618      	mov	r0, r3
   19f42:	6879      	ldr	r1, [r7, #4]
   19f44:	f7f9 fc82 	bl	1384c <GattValueUpdate>
   19f48:	4603      	mov	r3, r0
   19f4a:	2b00      	cmp	r3, #0
   19f4c:	d100      	bne.n	19f50 <ancsValueUpdate+0x60>
    {
        return;
   19f4e:	bf00      	nop
    }
}
   19f50:	3708      	adds	r7, #8
   19f52:	46bd      	mov	sp, r7
   19f54:	bd80      	pop	{r7, pc}
   19f56:	bf00      	nop
   19f58:	10002bc4 	.word	0x10002bc4
   19f5c:	00023e64 	.word	0x00023e64
   19f60:	10002bc0 	.word	0x10002bc0

00019f64 <ancsBtnCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void ancsBtnCback(uint8_t btn)
{
   19f64:	b580      	push	{r7, lr}
   19f66:	b084      	sub	sp, #16
   19f68:	af00      	add	r7, sp, #0
   19f6a:	4603      	mov	r3, r0
   19f6c:	71fb      	strb	r3, [r7, #7]
    dmConnId_t      connId;
    APP_TRACE_INFO1("btn = %d", btn);
   19f6e:	79fb      	ldrb	r3, [r7, #7]
   19f70:	4821      	ldr	r0, [pc, #132]	; (19ff8 <ancsBtnCback+0x94>)
   19f72:	4619      	mov	r1, r3
   19f74:	f7fa fdf6 	bl	14b64 <WsfTrace>

    /* button actions when connected */
    if ((connId = AppConnIsOpen()) != DM_CONN_ID_NONE)
   19f78:	f001 fd36 	bl	1b9e8 <AppConnIsOpen>
   19f7c:	4603      	mov	r3, r0
   19f7e:	73fb      	strb	r3, [r7, #15]
   19f80:	7bfb      	ldrb	r3, [r7, #15]
   19f82:	2b00      	cmp	r3, #0
   19f84:	d01b      	beq.n	19fbe <ancsBtnCback+0x5a>
    {
        switch (btn)
   19f86:	79fb      	ldrb	r3, [r7, #7]
   19f88:	3b01      	subs	r3, #1
   19f8a:	2b06      	cmp	r3, #6
   19f8c:	d815      	bhi.n	19fba <ancsBtnCback+0x56>
   19f8e:	a201      	add	r2, pc, #4	; (adr r2, 19f94 <ancsBtnCback+0x30>)
   19f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   19f94:	00019fbb 	.word	0x00019fbb
   19f98:	00019fbb 	.word	0x00019fbb
   19f9c:	00019fbb 	.word	0x00019fbb
   19fa0:	00019fb1 	.word	0x00019fb1
   19fa4:	00019fbb 	.word	0x00019fbb
   19fa8:	00019fbb 	.word	0x00019fbb
   19fac:	00019fbb 	.word	0x00019fbb

            case APP_UI_BTN_1_MED:
            break;

            case APP_UI_BTN_1_LONG:
                AppConnClose(connId);
   19fb0:	7bfb      	ldrb	r3, [r7, #15]
   19fb2:	4618      	mov	r0, r3
   19fb4:	f001 fd0a 	bl	1b9cc <AppConnClose>
            break;
   19fb8:	e000      	b.n	19fbc <ancsBtnCback+0x58>
            break;
            case APP_UI_BTN_2_SHORT:
            break;

            default:
            break;
   19fba:	bf00      	nop
   19fbc:	e018      	b.n	19ff0 <ancsBtnCback+0x8c>
        }
    }
    /* button actions when not connected */
    else
    {
        switch (btn)
   19fbe:	79fb      	ldrb	r3, [r7, #7]
   19fc0:	2b03      	cmp	r3, #3
   19fc2:	d008      	beq.n	19fd6 <ancsBtnCback+0x72>
   19fc4:	2b04      	cmp	r3, #4
   19fc6:	d00d      	beq.n	19fe4 <ancsBtnCback+0x80>
   19fc8:	2b02      	cmp	r3, #2
   19fca:	d000      	beq.n	19fce <ancsBtnCback+0x6a>
                AppDbDeleteAllRecords();
                AppAdvStart(APP_MODE_AUTO_INIT);
            break;

            default:
            break;
   19fcc:	e010      	b.n	19ff0 <ancsBtnCback+0x8c>
    {
        switch (btn)
        {
            case APP_UI_BTN_1_SHORT:
                /* start or restart advertising */
                AppAdvStart(APP_MODE_AUTO_INIT);
   19fce:	2002      	movs	r0, #2
   19fd0:	f003 f81e 	bl	1d010 <AppAdvStart>
            break;
   19fd4:	e00c      	b.n	19ff0 <ancsBtnCback+0x8c>

            case APP_UI_BTN_1_MED:
                /* enter discoverable and bondable mode mode */
                AppSetBondable(TRUE);
   19fd6:	2001      	movs	r0, #1
   19fd8:	f002 ff00 	bl	1cddc <AppSetBondable>
                AppAdvStart(APP_MODE_DISCOVERABLE);
   19fdc:	2001      	movs	r0, #1
   19fde:	f003 f817 	bl	1d010 <AppAdvStart>
            break;
   19fe2:	e005      	b.n	19ff0 <ancsBtnCback+0x8c>

            case APP_UI_BTN_1_LONG:
                /* clear bonded device info and restart advertising */
                AppDbDeleteAllRecords();
   19fe4:	f7ff fc12 	bl	1980c <AppDbDeleteAllRecords>
                AppAdvStart(APP_MODE_AUTO_INIT);
   19fe8:	2002      	movs	r0, #2
   19fea:	f003 f811 	bl	1d010 <AppAdvStart>
            break;
   19fee:	bf00      	nop

            default:
            break;
        }
    }
}
   19ff0:	3710      	adds	r7, #16
   19ff2:	46bd      	mov	sp, r7
   19ff4:	bd80      	pop	{r7, pc}
   19ff6:	bf00      	nop
   19ff8:	00023e8c 	.word	0x00023e8c

00019ffc <ancsDiscCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void ancsDiscCback(dmConnId_t connId, uint8_t status)
{
   19ffc:	b580      	push	{r7, lr}
   19ffe:	b084      	sub	sp, #16
   1a000:	af02      	add	r7, sp, #8
   1a002:	4603      	mov	r3, r0
   1a004:	460a      	mov	r2, r1
   1a006:	71fb      	strb	r3, [r7, #7]
   1a008:	4613      	mov	r3, r2
   1a00a:	71bb      	strb	r3, [r7, #6]
  switch(status)
   1a00c:	79bb      	ldrb	r3, [r7, #6]
   1a00e:	2b07      	cmp	r3, #7
   1a010:	f200 8084 	bhi.w	1a11c <ancsDiscCback+0x120>
   1a014:	a201      	add	r2, pc, #4	; (adr r2, 1a01c <ancsDiscCback+0x20>)
   1a016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1a01a:	bf00      	nop
   1a01c:	0001a03d 	.word	0x0001a03d
   1a020:	0001a04b 	.word	0x0001a04b
   1a024:	0001a055 	.word	0x0001a055
   1a028:	0001a07b 	.word	0x0001a07b
   1a02c:	0001a06d 	.word	0x0001a06d
   1a030:	0001a0d9 	.word	0x0001a0d9
   1a034:	0001a105 	.word	0x0001a105
   1a038:	0001a0f1 	.word	0x0001a0f1
  {
    case APP_DISC_INIT:
      /* set handle list when initialization requested */
      AppDiscSetHdlList(connId, ANCS_DISC_HDL_LIST_LEN, ancsCb.hdlList);
   1a03c:	79fb      	ldrb	r3, [r7, #7]
   1a03e:	4618      	mov	r0, r3
   1a040:	2107      	movs	r1, #7
   1a042:	4a38      	ldr	r2, [pc, #224]	; (1a124 <ancsDiscCback+0x128>)
   1a044:	f001 fa16 	bl	1b474 <AppDiscSetHdlList>
      break;
   1a048:	e069      	b.n	1a11e <ancsDiscCback+0x122>

    case APP_DISC_SEC_REQUIRED:
      /* request security */
      AppSlaveSecurityReq(connId);
   1a04a:	79fb      	ldrb	r3, [r7, #7]
   1a04c:	4618      	mov	r0, r3
   1a04e:	f002 feeb 	bl	1ce28 <AppSlaveSecurityReq>
      break;
   1a052:	e064      	b.n	1a11e <ancsDiscCback+0x122>

    case APP_DISC_START:
      /* initialize discovery state */
      ancsCb.discState = ANCS_DISC_GATT_SVC;
   1a054:	4b33      	ldr	r3, [pc, #204]	; (1a124 <ancsDiscCback+0x128>)
   1a056:	2200      	movs	r2, #0
   1a058:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

      /* discover GATT service */
      GattDiscover(connId, pAncsGattHdlList);
   1a05c:	4b32      	ldr	r3, [pc, #200]	; (1a128 <ancsDiscCback+0x12c>)
   1a05e:	681b      	ldr	r3, [r3, #0]
   1a060:	79fa      	ldrb	r2, [r7, #7]
   1a062:	4610      	mov	r0, r2
   1a064:	4619      	mov	r1, r3
   1a066:	f7f9 fbd9 	bl	1381c <GattDiscover>
      break;
   1a06a:	e058      	b.n	1a11e <ancsDiscCback+0x122>

    case APP_DISC_FAILED:
      APP_TRACE_INFO1("!!!!!Disc Failed. discState = %d!!!!!", ancsCb.discState);
   1a06c:	4b2d      	ldr	r3, [pc, #180]	; (1a124 <ancsDiscCback+0x128>)
   1a06e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
   1a072:	482e      	ldr	r0, [pc, #184]	; (1a12c <ancsDiscCback+0x130>)
   1a074:	4619      	mov	r1, r3
   1a076:	f7fa fd75 	bl	14b64 <WsfTrace>
    case APP_DISC_CMPL:
      //expecting only ancs service to be discovered
      ancsCb.discState++;
   1a07a:	4b2a      	ldr	r3, [pc, #168]	; (1a124 <ancsDiscCback+0x128>)
   1a07c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
   1a080:	3301      	adds	r3, #1
   1a082:	b2da      	uxtb	r2, r3
   1a084:	4b27      	ldr	r3, [pc, #156]	; (1a124 <ancsDiscCback+0x128>)
   1a086:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      if (ancsCb.discState == ANCS_DISC_ANCS_SVC)
   1a08a:	4b26      	ldr	r3, [pc, #152]	; (1a124 <ancsDiscCback+0x128>)
   1a08c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
   1a090:	2b01      	cmp	r3, #1
   1a092:	d10a      	bne.n	1a0aa <ancsDiscCback+0xae>
      {
        /* discover ANCS service */
        AnccSvcDiscover(connId, pAncsAnccHdlList);
   1a094:	4b26      	ldr	r3, [pc, #152]	; (1a130 <ancsDiscCback+0x134>)
   1a096:	681b      	ldr	r3, [r3, #0]
   1a098:	79fa      	ldrb	r2, [r7, #7]
   1a09a:	4610      	mov	r0, r2
   1a09c:	4619      	mov	r1, r3
   1a09e:	f7f9 fbed 	bl	1387c <AnccSvcDiscover>
        APP_TRACE_INFO0("Discovering ANCS.");
   1a0a2:	4824      	ldr	r0, [pc, #144]	; (1a134 <ancsDiscCback+0x138>)
   1a0a4:	f7fa fd5e 	bl	14b64 <WsfTrace>
        /* start configuration */
        APP_TRACE_INFO0("Disc CFG start.");
        AppDiscConfigure(connId, APP_DISC_CFG_START, ANCS_DISC_CFG_LIST_LEN,
                         (attcDiscCfg_t *) ancsDiscCfgList, ANCS_DISC_HDL_LIST_LEN, ancsCb.hdlList);
      }
      break;
   1a0a8:	e039      	b.n	1a11e <ancsDiscCback+0x122>
        APP_TRACE_INFO0("Discovering ANCS.");
      }
      else
      {
        /* discovery complete */
        AppDiscComplete(connId, APP_DISC_CMPL);
   1a0aa:	79fb      	ldrb	r3, [r7, #7]
   1a0ac:	4618      	mov	r0, r3
   1a0ae:	2103      	movs	r1, #3
   1a0b0:	f001 f9fc 	bl	1b4ac <AppDiscComplete>
        APP_TRACE_INFO0("Finished ANCS discovering.");
   1a0b4:	4820      	ldr	r0, [pc, #128]	; (1a138 <ancsDiscCback+0x13c>)
   1a0b6:	f7fa fd55 	bl	14b64 <WsfTrace>

        /* start configuration */
        APP_TRACE_INFO0("Disc CFG start.");
   1a0ba:	4820      	ldr	r0, [pc, #128]	; (1a13c <ancsDiscCback+0x140>)
   1a0bc:	f7fa fd52 	bl	14b64 <WsfTrace>
        AppDiscConfigure(connId, APP_DISC_CFG_START, ANCS_DISC_CFG_LIST_LEN,
   1a0c0:	79fa      	ldrb	r2, [r7, #7]
   1a0c2:	2307      	movs	r3, #7
   1a0c4:	9300      	str	r3, [sp, #0]
   1a0c6:	4b17      	ldr	r3, [pc, #92]	; (1a124 <ancsDiscCback+0x128>)
   1a0c8:	9301      	str	r3, [sp, #4]
   1a0ca:	4610      	mov	r0, r2
   1a0cc:	2105      	movs	r1, #5
   1a0ce:	2203      	movs	r2, #3
   1a0d0:	4b1b      	ldr	r3, [pc, #108]	; (1a140 <ancsDiscCback+0x144>)
   1a0d2:	f001 fa91 	bl	1b5f8 <AppDiscConfigure>
                         (attcDiscCfg_t *) ancsDiscCfgList, ANCS_DISC_HDL_LIST_LEN, ancsCb.hdlList);
      }
      break;
   1a0d6:	e022      	b.n	1a11e <ancsDiscCback+0x122>

    case APP_DISC_CFG_START:
      /* start configuration */
      AppDiscConfigure(connId, APP_DISC_CFG_START, ANCS_DISC_CFG_LIST_LEN,
   1a0d8:	79fa      	ldrb	r2, [r7, #7]
   1a0da:	2307      	movs	r3, #7
   1a0dc:	9300      	str	r3, [sp, #0]
   1a0de:	4b11      	ldr	r3, [pc, #68]	; (1a124 <ancsDiscCback+0x128>)
   1a0e0:	9301      	str	r3, [sp, #4]
   1a0e2:	4610      	mov	r0, r2
   1a0e4:	2105      	movs	r1, #5
   1a0e6:	2203      	movs	r2, #3
   1a0e8:	4b15      	ldr	r3, [pc, #84]	; (1a140 <ancsDiscCback+0x144>)
   1a0ea:	f001 fa85 	bl	1b5f8 <AppDiscConfigure>
                       (attcDiscCfg_t *) ancsDiscCfgList, ANCS_DISC_HDL_LIST_LEN, ancsCb.hdlList);
      break;
   1a0ee:	e016      	b.n	1a11e <ancsDiscCback+0x122>

    case APP_DISC_CFG_CMPL:
      AppDiscComplete(connId, status);
   1a0f0:	79fa      	ldrb	r2, [r7, #7]
   1a0f2:	79bb      	ldrb	r3, [r7, #6]
   1a0f4:	4610      	mov	r0, r2
   1a0f6:	4619      	mov	r1, r3
   1a0f8:	f001 f9d8 	bl	1b4ac <AppDiscComplete>
      APP_TRACE_INFO0("Finished Disc CFG.");
   1a0fc:	4811      	ldr	r0, [pc, #68]	; (1a144 <ancsDiscCback+0x148>)
   1a0fe:	f7fa fd31 	bl	14b64 <WsfTrace>
      break;
   1a102:	e00c      	b.n	1a11e <ancsDiscCback+0x122>

    case APP_DISC_CFG_CONN_START:
      /* start connection setup configuration */
      AppDiscConfigure(connId, APP_DISC_CFG_CONN_START, ANCS_DISC_CFG_LIST_LEN,
   1a104:	79fa      	ldrb	r2, [r7, #7]
   1a106:	2307      	movs	r3, #7
   1a108:	9300      	str	r3, [sp, #0]
   1a10a:	4b06      	ldr	r3, [pc, #24]	; (1a124 <ancsDiscCback+0x128>)
   1a10c:	9301      	str	r3, [sp, #4]
   1a10e:	4610      	mov	r0, r2
   1a110:	2106      	movs	r1, #6
   1a112:	2203      	movs	r2, #3
   1a114:	4b0a      	ldr	r3, [pc, #40]	; (1a140 <ancsDiscCback+0x144>)
   1a116:	f001 fa6f 	bl	1b5f8 <AppDiscConfigure>
                       (attcDiscCfg_t *) ancsDiscCfgList, ANCS_DISC_HDL_LIST_LEN, ancsCb.hdlList);
      break;
   1a11a:	e000      	b.n	1a11e <ancsDiscCback+0x122>

    default:
      break;
   1a11c:	bf00      	nop
  }
}
   1a11e:	3708      	adds	r7, #8
   1a120:	46bd      	mov	sp, r7
   1a122:	bd80      	pop	{r7, pc}
   1a124:	10004264 	.word	0x10004264
   1a128:	10002bc0 	.word	0x10002bc0
   1a12c:	00023e98 	.word	0x00023e98
   1a130:	10002bc4 	.word	0x10002bc4
   1a134:	00023ec0 	.word	0x00023ec0
   1a138:	00023ed4 	.word	0x00023ed4
   1a13c:	00023ef0 	.word	0x00023ef0
   1a140:	000253a4 	.word	0x000253a4
   1a144:	00023f00 	.word	0x00023f00

0001a148 <ancsProcMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void ancsProcMsg(ancsMsg_t *pMsg)
{
   1a148:	b580      	push	{r7, lr}
   1a14a:	b084      	sub	sp, #16
   1a14c:	af00      	add	r7, sp, #0
   1a14e:	6078      	str	r0, [r7, #4]
    uint8_t uiEvent = APP_UI_NONE;
   1a150:	2300      	movs	r3, #0
   1a152:	73fb      	strb	r3, [r7, #15]

    switch(pMsg->hdr.event)
   1a154:	687b      	ldr	r3, [r7, #4]
   1a156:	789b      	ldrb	r3, [r3, #2]
   1a158:	3b05      	subs	r3, #5
   1a15a:	2b9c      	cmp	r3, #156	; 0x9c
   1a15c:	f200 819e 	bhi.w	1a49c <ancsProcMsg+0x354>
   1a160:	a201      	add	r2, pc, #4	; (adr r2, 1a168 <ancsProcMsg+0x20>)
   1a162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1a166:	bf00      	nop
   1a168:	0001a3eb 	.word	0x0001a3eb
   1a16c:	0001a49d 	.word	0x0001a49d
   1a170:	0001a49d 	.word	0x0001a49d
   1a174:	0001a49d 	.word	0x0001a49d
   1a178:	0001a3f9 	.word	0x0001a3f9
   1a17c:	0001a49d 	.word	0x0001a49d
   1a180:	0001a49d 	.word	0x0001a49d
   1a184:	0001a49d 	.word	0x0001a49d
   1a188:	0001a3eb 	.word	0x0001a3eb
   1a18c:	0001a3eb 	.word	0x0001a3eb
   1a190:	0001a49d 	.word	0x0001a49d
   1a194:	0001a401 	.word	0x0001a401
   1a198:	0001a409 	.word	0x0001a409
   1a19c:	0001a49d 	.word	0x0001a49d
   1a1a0:	0001a49d 	.word	0x0001a49d
   1a1a4:	0001a49d 	.word	0x0001a49d
   1a1a8:	0001a49d 	.word	0x0001a49d
   1a1ac:	0001a49d 	.word	0x0001a49d
   1a1b0:	0001a49d 	.word	0x0001a49d
   1a1b4:	0001a49d 	.word	0x0001a49d
   1a1b8:	0001a49d 	.word	0x0001a49d
   1a1bc:	0001a49d 	.word	0x0001a49d
   1a1c0:	0001a49d 	.word	0x0001a49d
   1a1c4:	0001a49d 	.word	0x0001a49d
   1a1c8:	0001a49d 	.word	0x0001a49d
   1a1cc:	0001a49d 	.word	0x0001a49d
   1a1d0:	0001a49d 	.word	0x0001a49d
   1a1d4:	0001a417 	.word	0x0001a417
   1a1d8:	0001a421 	.word	0x0001a421
   1a1dc:	0001a427 	.word	0x0001a427
   1a1e0:	0001a49d 	.word	0x0001a49d
   1a1e4:	0001a49d 	.word	0x0001a49d
   1a1e8:	0001a49d 	.word	0x0001a49d
   1a1ec:	0001a49d 	.word	0x0001a49d
   1a1f0:	0001a42d 	.word	0x0001a42d
   1a1f4:	0001a445 	.word	0x0001a445
   1a1f8:	0001a49d 	.word	0x0001a49d
   1a1fc:	0001a455 	.word	0x0001a455
   1a200:	0001a471 	.word	0x0001a471
   1a204:	0001a477 	.word	0x0001a477
   1a208:	0001a47d 	.word	0x0001a47d
   1a20c:	0001a483 	.word	0x0001a483
   1a210:	0001a49d 	.word	0x0001a49d
   1a214:	0001a49d 	.word	0x0001a49d
   1a218:	0001a49d 	.word	0x0001a49d
   1a21c:	0001a49d 	.word	0x0001a49d
   1a220:	0001a49d 	.word	0x0001a49d
   1a224:	0001a48d 	.word	0x0001a48d
   1a228:	0001a49d 	.word	0x0001a49d
   1a22c:	0001a49d 	.word	0x0001a49d
   1a230:	0001a49d 	.word	0x0001a49d
   1a234:	0001a49d 	.word	0x0001a49d
   1a238:	0001a49d 	.word	0x0001a49d
   1a23c:	0001a49d 	.word	0x0001a49d
   1a240:	0001a49d 	.word	0x0001a49d
   1a244:	0001a49d 	.word	0x0001a49d
   1a248:	0001a49d 	.word	0x0001a49d
   1a24c:	0001a49d 	.word	0x0001a49d
   1a250:	0001a49d 	.word	0x0001a49d
   1a254:	0001a49d 	.word	0x0001a49d
   1a258:	0001a49d 	.word	0x0001a49d
   1a25c:	0001a49d 	.word	0x0001a49d
   1a260:	0001a49d 	.word	0x0001a49d
   1a264:	0001a49d 	.word	0x0001a49d
   1a268:	0001a49d 	.word	0x0001a49d
   1a26c:	0001a49d 	.word	0x0001a49d
   1a270:	0001a49d 	.word	0x0001a49d
   1a274:	0001a49d 	.word	0x0001a49d
   1a278:	0001a49d 	.word	0x0001a49d
   1a27c:	0001a49d 	.word	0x0001a49d
   1a280:	0001a49d 	.word	0x0001a49d
   1a284:	0001a49d 	.word	0x0001a49d
   1a288:	0001a49d 	.word	0x0001a49d
   1a28c:	0001a49d 	.word	0x0001a49d
   1a290:	0001a49d 	.word	0x0001a49d
   1a294:	0001a49d 	.word	0x0001a49d
   1a298:	0001a49d 	.word	0x0001a49d
   1a29c:	0001a49d 	.word	0x0001a49d
   1a2a0:	0001a49d 	.word	0x0001a49d
   1a2a4:	0001a49d 	.word	0x0001a49d
   1a2a8:	0001a49d 	.word	0x0001a49d
   1a2ac:	0001a49d 	.word	0x0001a49d
   1a2b0:	0001a49d 	.word	0x0001a49d
   1a2b4:	0001a49d 	.word	0x0001a49d
   1a2b8:	0001a49d 	.word	0x0001a49d
   1a2bc:	0001a49d 	.word	0x0001a49d
   1a2c0:	0001a49d 	.word	0x0001a49d
   1a2c4:	0001a49d 	.word	0x0001a49d
   1a2c8:	0001a49d 	.word	0x0001a49d
   1a2cc:	0001a49d 	.word	0x0001a49d
   1a2d0:	0001a49d 	.word	0x0001a49d
   1a2d4:	0001a49d 	.word	0x0001a49d
   1a2d8:	0001a49d 	.word	0x0001a49d
   1a2dc:	0001a49d 	.word	0x0001a49d
   1a2e0:	0001a49d 	.word	0x0001a49d
   1a2e4:	0001a49d 	.word	0x0001a49d
   1a2e8:	0001a49d 	.word	0x0001a49d
   1a2ec:	0001a49d 	.word	0x0001a49d
   1a2f0:	0001a49d 	.word	0x0001a49d
   1a2f4:	0001a49d 	.word	0x0001a49d
   1a2f8:	0001a49d 	.word	0x0001a49d
   1a2fc:	0001a49d 	.word	0x0001a49d
   1a300:	0001a49d 	.word	0x0001a49d
   1a304:	0001a49d 	.word	0x0001a49d
   1a308:	0001a49d 	.word	0x0001a49d
   1a30c:	0001a49d 	.word	0x0001a49d
   1a310:	0001a49d 	.word	0x0001a49d
   1a314:	0001a49d 	.word	0x0001a49d
   1a318:	0001a49d 	.word	0x0001a49d
   1a31c:	0001a49d 	.word	0x0001a49d
   1a320:	0001a49d 	.word	0x0001a49d
   1a324:	0001a49d 	.word	0x0001a49d
   1a328:	0001a49d 	.word	0x0001a49d
   1a32c:	0001a49d 	.word	0x0001a49d
   1a330:	0001a49d 	.word	0x0001a49d
   1a334:	0001a49d 	.word	0x0001a49d
   1a338:	0001a49d 	.word	0x0001a49d
   1a33c:	0001a49d 	.word	0x0001a49d
   1a340:	0001a49d 	.word	0x0001a49d
   1a344:	0001a49d 	.word	0x0001a49d
   1a348:	0001a49d 	.word	0x0001a49d
   1a34c:	0001a49d 	.word	0x0001a49d
   1a350:	0001a49d 	.word	0x0001a49d
   1a354:	0001a49d 	.word	0x0001a49d
   1a358:	0001a49d 	.word	0x0001a49d
   1a35c:	0001a49d 	.word	0x0001a49d
   1a360:	0001a49d 	.word	0x0001a49d
   1a364:	0001a49d 	.word	0x0001a49d
   1a368:	0001a49d 	.word	0x0001a49d
   1a36c:	0001a49d 	.word	0x0001a49d
   1a370:	0001a49d 	.word	0x0001a49d
   1a374:	0001a49d 	.word	0x0001a49d
   1a378:	0001a49d 	.word	0x0001a49d
   1a37c:	0001a49d 	.word	0x0001a49d
   1a380:	0001a49d 	.word	0x0001a49d
   1a384:	0001a49d 	.word	0x0001a49d
   1a388:	0001a49d 	.word	0x0001a49d
   1a38c:	0001a49d 	.word	0x0001a49d
   1a390:	0001a49d 	.word	0x0001a49d
   1a394:	0001a49d 	.word	0x0001a49d
   1a398:	0001a49d 	.word	0x0001a49d
   1a39c:	0001a49d 	.word	0x0001a49d
   1a3a0:	0001a49d 	.word	0x0001a49d
   1a3a4:	0001a49d 	.word	0x0001a49d
   1a3a8:	0001a49d 	.word	0x0001a49d
   1a3ac:	0001a49d 	.word	0x0001a49d
   1a3b0:	0001a49d 	.word	0x0001a49d
   1a3b4:	0001a49d 	.word	0x0001a49d
   1a3b8:	0001a49d 	.word	0x0001a49d
   1a3bc:	0001a49d 	.word	0x0001a49d
   1a3c0:	0001a49d 	.word	0x0001a49d
   1a3c4:	0001a49d 	.word	0x0001a49d
   1a3c8:	0001a49d 	.word	0x0001a49d
   1a3cc:	0001a49d 	.word	0x0001a49d
   1a3d0:	0001a49d 	.word	0x0001a49d
   1a3d4:	0001a3dd 	.word	0x0001a3dd
   1a3d8:	0001a3e5 	.word	0x0001a3e5
    {
        case ANCC_ACTION_TIMER_IND:
            AnccActionHandler(ANCC_ACTION_TIMER_IND);
   1a3dc:	20a0      	movs	r0, #160	; 0xa0
   1a3de:	f7f9 fc8f 	bl	13d00 <AnccActionHandler>
            break;
   1a3e2:	e05c      	b.n	1a49e <ancsProcMsg+0x356>

        case ANCC_DISCOVER_TIMER_IND:
            AnccStartServiceDiscovery();
   1a3e4:	f7f9 fed8 	bl	14198 <AnccStartServiceDiscovery>
            break;
   1a3e8:	e059      	b.n	1a49e <ancsProcMsg+0x356>
        case ATTC_READ_RSP:
        case ATTC_HANDLE_VALUE_NTF:
        case ATTC_HANDLE_VALUE_IND:
            APP_TRACE_INFO0("------------ATTC_HANDLE_VALUE_NTF/IND------------");
   1a3ea:	4832      	ldr	r0, [pc, #200]	; (1a4b4 <ancsProcMsg+0x36c>)
   1a3ec:	f7fa fbba 	bl	14b64 <WsfTrace>
            ancsValueUpdate((attEvt_t *) pMsg);
   1a3f0:	6878      	ldr	r0, [r7, #4]
   1a3f2:	f7ff fd7d 	bl	19ef0 <ancsValueUpdate>
          break;
   1a3f6:	e052      	b.n	1a49e <ancsProcMsg+0x356>

        case ATTC_WRITE_RSP:    // write respose after Control point operation.
            APP_TRACE_INFO0("------------ATTC_WRITE_RSP------------");
   1a3f8:	482f      	ldr	r0, [pc, #188]	; (1a4b8 <ancsProcMsg+0x370>)
   1a3fa:	f7fa fbb3 	bl	14b64 <WsfTrace>
          break;
   1a3fe:	e04e      	b.n	1a49e <ancsProcMsg+0x356>

        case ATTS_HANDLE_VALUE_CNF:
        break;

        case ATTS_CCC_STATE_IND:
            ancsProcCccState(pMsg);
   1a400:	6878      	ldr	r0, [r7, #4]
   1a402:	f7ff fd35 	bl	19e70 <ancsProcCccState>
        break;
   1a406:	e04a      	b.n	1a49e <ancsProcMsg+0x356>

        case ATT_MTU_UPDATE_IND:
          APP_TRACE_INFO1("Negotiated MTU %d", ((attEvt_t *)pMsg)->mtu);
   1a408:	687b      	ldr	r3, [r7, #4]
   1a40a:	89db      	ldrh	r3, [r3, #14]
   1a40c:	482b      	ldr	r0, [pc, #172]	; (1a4bc <ancsProcMsg+0x374>)
   1a40e:	4619      	mov	r1, r3
   1a410:	f7fa fba8 	bl	14b64 <WsfTrace>
        break;
   1a414:	e043      	b.n	1a49e <ancsProcMsg+0x356>

        case DM_RESET_CMPL_IND:
            DmSecGenerateEccKeyReq();
   1a416:	f7f6 f811 	bl	1043c <DmSecGenerateEccKeyReq>
            uiEvent = APP_UI_RESET_CMPL;
   1a41a:	2301      	movs	r3, #1
   1a41c:	73fb      	strb	r3, [r7, #15]
        break;
   1a41e:	e03e      	b.n	1a49e <ancsProcMsg+0x356>

        case DM_ADV_START_IND:
            uiEvent = APP_UI_ADV_START;
   1a420:	2303      	movs	r3, #3
   1a422:	73fb      	strb	r3, [r7, #15]
        break;
   1a424:	e03b      	b.n	1a49e <ancsProcMsg+0x356>

        case DM_ADV_STOP_IND:
            uiEvent = APP_UI_ADV_STOP;
   1a426:	2304      	movs	r3, #4
   1a428:	73fb      	strb	r3, [r7, #15]
        break;
   1a42a:	e038      	b.n	1a49e <ancsProcMsg+0x356>

        case DM_CONN_OPEN_IND:
            /* set bondable here to enable bond/pair after disconnect */
            AnccConnOpen(pMsg->hdr.param, pAncsAnccHdlList);
   1a42c:	687b      	ldr	r3, [r7, #4]
   1a42e:	881b      	ldrh	r3, [r3, #0]
   1a430:	b2da      	uxtb	r2, r3
   1a432:	4b23      	ldr	r3, [pc, #140]	; (1a4c0 <ancsProcMsg+0x378>)
   1a434:	681b      	ldr	r3, [r3, #0]
   1a436:	4610      	mov	r0, r2
   1a438:	4619      	mov	r1, r3
   1a43a:	f7f9 fa5b 	bl	138f4 <AnccConnOpen>
            uiEvent = APP_UI_CONN_OPEN;
   1a43e:	2308      	movs	r3, #8
   1a440:	73fb      	strb	r3, [r7, #15]
        break;
   1a442:	e02c      	b.n	1a49e <ancsProcMsg+0x356>

        case DM_CONN_CLOSE_IND:
            ancsClose(pMsg);
   1a444:	6878      	ldr	r0, [r7, #4]
   1a446:	f7ff fd27 	bl	19e98 <ancsClose>
            AnccConnClose();
   1a44a:	f7f9 fa6f 	bl	1392c <AnccConnClose>
            uiEvent = APP_UI_CONN_CLOSE;
   1a44e:	2309      	movs	r3, #9
   1a450:	73fb      	strb	r3, [r7, #15]
        break;
   1a452:	e024      	b.n	1a49e <ancsProcMsg+0x356>

        case DM_CONN_UPDATE_IND:
        break;

        case DM_SEC_PAIR_CMPL_IND:
            uiEvent = APP_UI_SEC_PAIR_CMPL;
   1a454:	230a      	movs	r3, #10
   1a456:	73fb      	strb	r3, [r7, #15]
            APP_TRACE_INFO1("------------MTU SIZE = %d------------", AttGetMtu(pMsg->hdr.param));
   1a458:	687b      	ldr	r3, [r7, #4]
   1a45a:	881b      	ldrh	r3, [r3, #0]
   1a45c:	b2db      	uxtb	r3, r3
   1a45e:	4618      	mov	r0, r3
   1a460:	f7f2 f842 	bl	c4e8 <AttGetMtu>
   1a464:	4603      	mov	r3, r0
   1a466:	4817      	ldr	r0, [pc, #92]	; (1a4c4 <ancsProcMsg+0x37c>)
   1a468:	4619      	mov	r1, r3
   1a46a:	f7fa fb7b 	bl	14b64 <WsfTrace>
        break;
   1a46e:	e016      	b.n	1a49e <ancsProcMsg+0x356>

        case DM_SEC_PAIR_FAIL_IND:
            uiEvent = APP_UI_SEC_PAIR_FAIL;
   1a470:	230b      	movs	r3, #11
   1a472:	73fb      	strb	r3, [r7, #15]
        break;
   1a474:	e013      	b.n	1a49e <ancsProcMsg+0x356>

        case DM_SEC_ENCRYPT_IND:
            uiEvent = APP_UI_SEC_ENCRYPT;
   1a476:	230c      	movs	r3, #12
   1a478:	73fb      	strb	r3, [r7, #15]
        break;
   1a47a:	e010      	b.n	1a49e <ancsProcMsg+0x356>

        case DM_SEC_ENCRYPT_FAIL_IND:
            uiEvent = APP_UI_SEC_ENCRYPT_FAIL;
   1a47c:	230d      	movs	r3, #13
   1a47e:	73fb      	strb	r3, [r7, #15]
        break;
   1a480:	e00d      	b.n	1a49e <ancsProcMsg+0x356>

        case DM_SEC_AUTH_REQ_IND:
            AppHandlePasskey(&pMsg->dm.authReq);
   1a482:	687b      	ldr	r3, [r7, #4]
   1a484:	4618      	mov	r0, r3
   1a486:	f001 fa65 	bl	1b954 <AppHandlePasskey>
        break;
   1a48a:	e008      	b.n	1a49e <ancsProcMsg+0x356>
            #endif
          }
          break;

        case DM_SEC_ECC_KEY_IND:
            DmSecSetEccKey(&pMsg->dm.eccMsg.data.key);
   1a48c:	687b      	ldr	r3, [r7, #4]
   1a48e:	3304      	adds	r3, #4
   1a490:	4618      	mov	r0, r3
   1a492:	f7f6 f831 	bl	104f8 <DmSecSetEccKey>
            ancsSetup(pMsg);
   1a496:	6878      	ldr	r0, [r7, #4]
   1a498:	f7ff fd08 	bl	19eac <ancsSetup>

        default:
        break;
   1a49c:	bf00      	nop
    }

    if (uiEvent != APP_UI_NONE)
   1a49e:	7bfb      	ldrb	r3, [r7, #15]
   1a4a0:	2b00      	cmp	r3, #0
   1a4a2:	d003      	beq.n	1a4ac <ancsProcMsg+0x364>
    {
        AppUiAction(uiEvent);
   1a4a4:	7bfb      	ldrb	r3, [r7, #15]
   1a4a6:	4618      	mov	r0, r3
   1a4a8:	f7ff fb9c 	bl	19be4 <AppUiAction>
    }
}
   1a4ac:	3710      	adds	r7, #16
   1a4ae:	46bd      	mov	sp, r7
   1a4b0:	bd80      	pop	{r7, pc}
   1a4b2:	bf00      	nop
   1a4b4:	00023f14 	.word	0x00023f14
   1a4b8:	00023f48 	.word	0x00023f48
   1a4bc:	00023f70 	.word	0x00023f70
   1a4c0:	10002bc4 	.word	0x10002bc4
   1a4c4:	00023f84 	.word	0x00023f84

0001a4c8 <AncsHandlerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AncsHandlerInit(wsfHandlerId_t handlerId)
{
   1a4c8:	b580      	push	{r7, lr}
   1a4ca:	b082      	sub	sp, #8
   1a4cc:	af00      	add	r7, sp, #0
   1a4ce:	4603      	mov	r3, r0
   1a4d0:	71fb      	strb	r3, [r7, #7]
    APP_TRACE_INFO0("AncsHandlerInit");
   1a4d2:	4813      	ldr	r0, [pc, #76]	; (1a520 <AncsHandlerInit+0x58>)
   1a4d4:	f7fa fb46 	bl	14b64 <WsfTrace>

    /* store handler ID */
    ancsCb.handlerId = handlerId;
   1a4d8:	4a12      	ldr	r2, [pc, #72]	; (1a524 <AncsHandlerInit+0x5c>)
   1a4da:	79fb      	ldrb	r3, [r7, #7]
   1a4dc:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28

    /* Set configuration pointers */
    pAppAdvCfg = (appAdvCfg_t *) &ancsAdvCfg;
   1a4e0:	4b11      	ldr	r3, [pc, #68]	; (1a528 <AncsHandlerInit+0x60>)
   1a4e2:	4a12      	ldr	r2, [pc, #72]	; (1a52c <AncsHandlerInit+0x64>)
   1a4e4:	601a      	str	r2, [r3, #0]
    pAppSlaveCfg = (appSlaveCfg_t *) &ancsSlaveCfg;
   1a4e6:	4b12      	ldr	r3, [pc, #72]	; (1a530 <AncsHandlerInit+0x68>)
   1a4e8:	4a12      	ldr	r2, [pc, #72]	; (1a534 <AncsHandlerInit+0x6c>)
   1a4ea:	601a      	str	r2, [r3, #0]
    pAppSecCfg = (appSecCfg_t *) &ancsSecCfg;
   1a4ec:	4b12      	ldr	r3, [pc, #72]	; (1a538 <AncsHandlerInit+0x70>)
   1a4ee:	4a13      	ldr	r2, [pc, #76]	; (1a53c <AncsHandlerInit+0x74>)
   1a4f0:	601a      	str	r2, [r3, #0]
    pAppUpdateCfg = (appUpdateCfg_t *) &ancsUpdateCfg;
   1a4f2:	4b13      	ldr	r3, [pc, #76]	; (1a540 <AncsHandlerInit+0x78>)
   1a4f4:	4a13      	ldr	r2, [pc, #76]	; (1a544 <AncsHandlerInit+0x7c>)
   1a4f6:	601a      	str	r2, [r3, #0]
    pAppDiscCfg = (appDiscCfg_t *) &ancsDiscCfg;
   1a4f8:	4b13      	ldr	r3, [pc, #76]	; (1a548 <AncsHandlerInit+0x80>)
   1a4fa:	4a14      	ldr	r2, [pc, #80]	; (1a54c <AncsHandlerInit+0x84>)
   1a4fc:	601a      	str	r2, [r3, #0]
    pSmpCfg = (smpCfg_t *) &ancsSmpCfg;
   1a4fe:	4b14      	ldr	r3, [pc, #80]	; (1a550 <AncsHandlerInit+0x88>)
   1a500:	4a14      	ldr	r2, [pc, #80]	; (1a554 <AncsHandlerInit+0x8c>)
   1a502:	601a      	str	r2, [r3, #0]

    /* Initialize application framework */
    AppSlaveInit();
   1a504:	f002 f9a6 	bl	1c854 <AppSlaveInit>
    AppDiscInit();
   1a508:	f000 ff86 	bl	1b418 <AppDiscInit>

    AnccInit(handlerId, (anccCfg_t*)(&ancsAnccCfg), ANCC_DISCOVER_TIMER_IND);
   1a50c:	79fb      	ldrb	r3, [r7, #7]
   1a50e:	4618      	mov	r0, r3
   1a510:	4911      	ldr	r1, [pc, #68]	; (1a558 <AncsHandlerInit+0x90>)
   1a512:	22a1      	movs	r2, #161	; 0xa1
   1a514:	f7f9 f9ca 	bl	138ac <AnccInit>
}
   1a518:	3708      	adds	r7, #8
   1a51a:	46bd      	mov	sp, r7
   1a51c:	bd80      	pop	{r7, pc}
   1a51e:	bf00      	nop
   1a520:	00023fac 	.word	0x00023fac
   1a524:	10004264 	.word	0x10004264
   1a528:	1000a25c 	.word	0x1000a25c
   1a52c:	00025344 	.word	0x00025344
   1a530:	1000a238 	.word	0x1000a238
   1a534:	00025350 	.word	0x00025350
   1a538:	1000a250 	.word	0x1000a250
   1a53c:	00025354 	.word	0x00025354
   1a540:	1000a234 	.word	0x1000a234
   1a544:	0002535c 	.word	0x0002535c
   1a548:	1000a244 	.word	0x1000a244
   1a54c:	00025374 	.word	0x00025374
   1a550:	10002ba8 	.word	0x10002ba8
   1a554:	0002536c 	.word	0x0002536c
   1a558:	00025378 	.word	0x00025378

0001a55c <AncsHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AncsHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   1a55c:	b580      	push	{r7, lr}
   1a55e:	b082      	sub	sp, #8
   1a560:	af00      	add	r7, sp, #0
   1a562:	4603      	mov	r3, r0
   1a564:	6039      	str	r1, [r7, #0]
   1a566:	71fb      	strb	r3, [r7, #7]
    if (pMsg != NULL)
   1a568:	683b      	ldr	r3, [r7, #0]
   1a56a:	2b00      	cmp	r3, #0
   1a56c:	d025      	beq.n	1a5ba <AncsHandler+0x5e>
    {
        APP_TRACE_INFO2("ANCS got evt %d on handle 0x%04x", pMsg->event, ((attEvt_t *)pMsg)->handle);
   1a56e:	683b      	ldr	r3, [r7, #0]
   1a570:	789b      	ldrb	r3, [r3, #2]
   1a572:	461a      	mov	r2, r3
   1a574:	683b      	ldr	r3, [r7, #0]
   1a576:	895b      	ldrh	r3, [r3, #10]
   1a578:	4811      	ldr	r0, [pc, #68]	; (1a5c0 <AncsHandler+0x64>)
   1a57a:	4611      	mov	r1, r2
   1a57c:	461a      	mov	r2, r3
   1a57e:	f7fa faf1 	bl	14b64 <WsfTrace>
        if ( pMsg->event <= ATT_CBACK_END )
   1a582:	683b      	ldr	r3, [r7, #0]
   1a584:	789b      	ldrb	r3, [r3, #2]
   1a586:	2b11      	cmp	r3, #17
   1a588:	d803      	bhi.n	1a592 <AncsHandler+0x36>
        {   //process discovery-related ATT messages
            AppDiscProcAttMsg((attEvt_t *) pMsg);   //process ATT messages
   1a58a:	6838      	ldr	r0, [r7, #0]
   1a58c:	f000 fe7a 	bl	1b284 <AppDiscProcAttMsg>
   1a590:	e010      	b.n	1a5b4 <AncsHandler+0x58>
        }
        else if (pMsg->event >= DM_CBACK_START && pMsg->event <= DM_CBACK_END)
   1a592:	683b      	ldr	r3, [r7, #0]
   1a594:	789b      	ldrb	r3, [r3, #2]
   1a596:	2b1f      	cmp	r3, #31
   1a598:	d90c      	bls.n	1a5b4 <AncsHandler+0x58>
   1a59a:	683b      	ldr	r3, [r7, #0]
   1a59c:	789b      	ldrb	r3, [r3, #2]
   1a59e:	2b55      	cmp	r3, #85	; 0x55
   1a5a0:	d808      	bhi.n	1a5b4 <AncsHandler+0x58>
        {
            /* process advertising and connection-related messages */
            AppSlaveProcDmMsg((dmEvt_t *) pMsg);
   1a5a2:	6838      	ldr	r0, [r7, #0]
   1a5a4:	f002 f996 	bl	1c8d4 <AppSlaveProcDmMsg>

            /* process security-related messages */
            AppSlaveSecProcDmMsg((dmEvt_t *) pMsg);
   1a5a8:	6838      	ldr	r0, [r7, #0]
   1a5aa:	f002 fb97 	bl	1ccdc <AppSlaveSecProcDmMsg>

            /* process discovery-related messages */
            AppDiscProcDmMsg((dmEvt_t *) pMsg);
   1a5ae:	6838      	ldr	r0, [r7, #0]
   1a5b0:	f000 fe3c 	bl	1b22c <AppDiscProcDmMsg>
        }

        /* perform profile and user interface-related operations */
        ancsProcMsg((ancsMsg_t *) pMsg);
   1a5b4:	6838      	ldr	r0, [r7, #0]
   1a5b6:	f7ff fdc7 	bl	1a148 <ancsProcMsg>
    }
}
   1a5ba:	3708      	adds	r7, #8
   1a5bc:	46bd      	mov	sp, r7
   1a5be:	bd80      	pop	{r7, pc}
   1a5c0:	00023fbc 	.word	0x00023fbc

0001a5c4 <ancsAnccAttrCback>:

void ancsAnccAttrCback(active_notif_t* pAttr)
{
   1a5c4:	b580      	push	{r7, lr}
   1a5c6:	b084      	sub	sp, #16
   1a5c8:	af00      	add	r7, sp, #0
   1a5ca:	6078      	str	r0, [r7, #4]
    // this is an application demo, print the notification info
    if ( pAttr->attrId == BLE_ANCS_NOTIF_ATTR_ID_APP_IDENTIFIER )
   1a5cc:	687b      	ldr	r3, [r7, #4]
   1a5ce:	7a9b      	ldrb	r3, [r3, #10]
   1a5d0:	2b00      	cmp	r3, #0
   1a5d2:	f040 80f4 	bne.w	1a7be <ancsAnccAttrCback+0x1fa>
    {
        APP_TRACE_INFO0("************************************************************");
   1a5d6:	48b2      	ldr	r0, [pc, #712]	; (1a8a0 <ancsAnccAttrCback+0x2dc>)
   1a5d8:	f7fa fac4 	bl	14b64 <WsfTrace>
        APP_TRACE_INFO0("* Notification Received ");
   1a5dc:	48b1      	ldr	r0, [pc, #708]	; (1a8a4 <ancsAnccAttrCback+0x2e0>)
   1a5de:	f7fa fac1 	bl	14b64 <WsfTrace>
        APP_TRACE_INFO1("* UID             = %d", anccCb.anccList[pAttr->handle].notification_uid);
   1a5e2:	687b      	ldr	r3, [r7, #4]
   1a5e4:	881b      	ldrh	r3, [r3, #0]
   1a5e6:	4619      	mov	r1, r3
   1a5e8:	4aaf      	ldr	r2, [pc, #700]	; (1a8a8 <ancsAnccAttrCback+0x2e4>)
   1a5ea:	460b      	mov	r3, r1
   1a5ec:	005b      	lsls	r3, r3, #1
   1a5ee:	440b      	add	r3, r1
   1a5f0:	009b      	lsls	r3, r3, #2
   1a5f2:	4413      	add	r3, r2
   1a5f4:	3328      	adds	r3, #40	; 0x28
   1a5f6:	689b      	ldr	r3, [r3, #8]
   1a5f8:	48ac      	ldr	r0, [pc, #688]	; (1a8ac <ancsAnccAttrCback+0x2e8>)
   1a5fa:	4619      	mov	r1, r3
   1a5fc:	f7fa fab2 	bl	14b64 <WsfTrace>
        switch(anccCb.anccList[pAttr->handle].category_id)
   1a600:	687b      	ldr	r3, [r7, #4]
   1a602:	881b      	ldrh	r3, [r3, #0]
   1a604:	4619      	mov	r1, r3
   1a606:	4aa8      	ldr	r2, [pc, #672]	; (1a8a8 <ancsAnccAttrCback+0x2e4>)
   1a608:	460b      	mov	r3, r1
   1a60a:	005b      	lsls	r3, r3, #1
   1a60c:	440b      	add	r3, r1
   1a60e:	009b      	lsls	r3, r3, #2
   1a610:	4413      	add	r3, r2
   1a612:	3328      	adds	r3, #40	; 0x28
   1a614:	799b      	ldrb	r3, [r3, #6]
   1a616:	2b0b      	cmp	r3, #11
   1a618:	d85d      	bhi.n	1a6d6 <ancsAnccAttrCback+0x112>
   1a61a:	a201      	add	r2, pc, #4	; (adr r2, 1a620 <ancsAnccAttrCback+0x5c>)
   1a61c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1a620:	0001a651 	.word	0x0001a651
   1a624:	0001a659 	.word	0x0001a659
   1a628:	0001a681 	.word	0x0001a681
   1a62c:	0001a68f 	.word	0x0001a68f
   1a630:	0001a697 	.word	0x0001a697
   1a634:	0001a69f 	.word	0x0001a69f
   1a638:	0001a6a7 	.word	0x0001a6a7
   1a63c:	0001a6af 	.word	0x0001a6af
   1a640:	0001a6b7 	.word	0x0001a6b7
   1a644:	0001a6bf 	.word	0x0001a6bf
   1a648:	0001a6c7 	.word	0x0001a6c7
   1a64c:	0001a6cf 	.word	0x0001a6cf
        {
            case BLE_ANCS_CATEGORY_ID_OTHER:
                APP_TRACE_INFO0("* Category        = Other");
   1a650:	4897      	ldr	r0, [pc, #604]	; (1a8b0 <ancsAnccAttrCback+0x2ec>)
   1a652:	f7fa fa87 	bl	14b64 <WsfTrace>
            break;
   1a656:	e03f      	b.n	1a6d8 <ancsAnccAttrCback+0x114>
            case BLE_ANCS_CATEGORY_ID_INCOMING_CALL:
                APP_TRACE_INFO0("* Category        = Incoming Call");
   1a658:	4896      	ldr	r0, [pc, #600]	; (1a8b4 <ancsAnccAttrCback+0x2f0>)
   1a65a:	f7fa fa83 	bl	14b64 <WsfTrace>
                ph_incoming = true;
   1a65e:	4b96      	ldr	r3, [pc, #600]	; (1a8b8 <ancsAnccAttrCback+0x2f4>)
   1a660:	2201      	movs	r2, #1
   1a662:	701a      	strb	r2, [r3, #0]
                ph_notiuid = anccCb.anccList[pAttr->handle].notification_uid;
   1a664:	687b      	ldr	r3, [r7, #4]
   1a666:	881b      	ldrh	r3, [r3, #0]
   1a668:	4619      	mov	r1, r3
   1a66a:	4a8f      	ldr	r2, [pc, #572]	; (1a8a8 <ancsAnccAttrCback+0x2e4>)
   1a66c:	460b      	mov	r3, r1
   1a66e:	005b      	lsls	r3, r3, #1
   1a670:	440b      	add	r3, r1
   1a672:	009b      	lsls	r3, r3, #2
   1a674:	4413      	add	r3, r2
   1a676:	3328      	adds	r3, #40	; 0x28
   1a678:	689b      	ldr	r3, [r3, #8]
   1a67a:	4a90      	ldr	r2, [pc, #576]	; (1a8bc <ancsAnccAttrCback+0x2f8>)
   1a67c:	6013      	str	r3, [r2, #0]
            break;
   1a67e:	e02b      	b.n	1a6d8 <ancsAnccAttrCback+0x114>
            case BLE_ANCS_CATEGORY_ID_MISSED_CALL:
                APP_TRACE_INFO0("* Category        = Missed Call");
   1a680:	488f      	ldr	r0, [pc, #572]	; (1a8c0 <ancsAnccAttrCback+0x2fc>)
   1a682:	f7fa fa6f 	bl	14b64 <WsfTrace>
                ph_incoming = false;
   1a686:	4b8c      	ldr	r3, [pc, #560]	; (1a8b8 <ancsAnccAttrCback+0x2f4>)
   1a688:	2200      	movs	r2, #0
   1a68a:	701a      	strb	r2, [r3, #0]
            break;
   1a68c:	e024      	b.n	1a6d8 <ancsAnccAttrCback+0x114>
            case BLE_ANCS_CATEGORY_ID_VOICE_MAIL:
                APP_TRACE_INFO0("* Category        = Voice Mail");
   1a68e:	488d      	ldr	r0, [pc, #564]	; (1a8c4 <ancsAnccAttrCback+0x300>)
   1a690:	f7fa fa68 	bl	14b64 <WsfTrace>
            break;
   1a694:	e020      	b.n	1a6d8 <ancsAnccAttrCback+0x114>
            case BLE_ANCS_CATEGORY_ID_SOCIAL:
                APP_TRACE_INFO0("* Category        = Social");
   1a696:	488c      	ldr	r0, [pc, #560]	; (1a8c8 <ancsAnccAttrCback+0x304>)
   1a698:	f7fa fa64 	bl	14b64 <WsfTrace>
            break;
   1a69c:	e01c      	b.n	1a6d8 <ancsAnccAttrCback+0x114>
            case BLE_ANCS_CATEGORY_ID_SCHEDULE:
                APP_TRACE_INFO0("* Category        = Schedule");
   1a69e:	488b      	ldr	r0, [pc, #556]	; (1a8cc <ancsAnccAttrCback+0x308>)
   1a6a0:	f7fa fa60 	bl	14b64 <WsfTrace>
            break;
   1a6a4:	e018      	b.n	1a6d8 <ancsAnccAttrCback+0x114>
            case BLE_ANCS_CATEGORY_ID_EMAIL:
                APP_TRACE_INFO0("* Category        = Email");
   1a6a6:	488a      	ldr	r0, [pc, #552]	; (1a8d0 <ancsAnccAttrCback+0x30c>)
   1a6a8:	f7fa fa5c 	bl	14b64 <WsfTrace>
            break;
   1a6ac:	e014      	b.n	1a6d8 <ancsAnccAttrCback+0x114>
            case BLE_ANCS_CATEGORY_ID_NEWS:
                APP_TRACE_INFO0("* Category        = News");
   1a6ae:	4889      	ldr	r0, [pc, #548]	; (1a8d4 <ancsAnccAttrCback+0x310>)
   1a6b0:	f7fa fa58 	bl	14b64 <WsfTrace>
            break;
   1a6b4:	e010      	b.n	1a6d8 <ancsAnccAttrCback+0x114>
            case BLE_ANCS_CATEGORY_ID_HEALTH_AND_FITNESS:
                APP_TRACE_INFO0("* Category        = Health and Fitness");
   1a6b6:	4888      	ldr	r0, [pc, #544]	; (1a8d8 <ancsAnccAttrCback+0x314>)
   1a6b8:	f7fa fa54 	bl	14b64 <WsfTrace>
            break;
   1a6bc:	e00c      	b.n	1a6d8 <ancsAnccAttrCback+0x114>
            case BLE_ANCS_CATEGORY_ID_BUSINESS_AND_FINANCE:
                APP_TRACE_INFO0("* Category        = Business and Finance");
   1a6be:	4887      	ldr	r0, [pc, #540]	; (1a8dc <ancsAnccAttrCback+0x318>)
   1a6c0:	f7fa fa50 	bl	14b64 <WsfTrace>
            break;
   1a6c4:	e008      	b.n	1a6d8 <ancsAnccAttrCback+0x114>
            case BLE_ANCS_CATEGORY_ID_LOCATION:
                APP_TRACE_INFO0("* Category        = Location");
   1a6c6:	4886      	ldr	r0, [pc, #536]	; (1a8e0 <ancsAnccAttrCback+0x31c>)
   1a6c8:	f7fa fa4c 	bl	14b64 <WsfTrace>
            break;
   1a6cc:	e004      	b.n	1a6d8 <ancsAnccAttrCback+0x114>
            case BLE_ANCS_CATEGORY_ID_ENTERTAINMENT:
                APP_TRACE_INFO0("* Category        = Entertainment");
   1a6ce:	4885      	ldr	r0, [pc, #532]	; (1a8e4 <ancsAnccAttrCback+0x320>)
   1a6d0:	f7fa fa48 	bl	14b64 <WsfTrace>
            break;
   1a6d4:	e000      	b.n	1a6d8 <ancsAnccAttrCback+0x114>
            default:
            break;
   1a6d6:	bf00      	nop
        }

        switch(anccCb.anccList[pAttr->handle].event_id)
   1a6d8:	687b      	ldr	r3, [r7, #4]
   1a6da:	881b      	ldrh	r3, [r3, #0]
   1a6dc:	4619      	mov	r1, r3
   1a6de:	4a72      	ldr	r2, [pc, #456]	; (1a8a8 <ancsAnccAttrCback+0x2e4>)
   1a6e0:	460b      	mov	r3, r1
   1a6e2:	005b      	lsls	r3, r3, #1
   1a6e4:	440b      	add	r3, r1
   1a6e6:	009b      	lsls	r3, r3, #2
   1a6e8:	4413      	add	r3, r2
   1a6ea:	3328      	adds	r3, #40	; 0x28
   1a6ec:	791b      	ldrb	r3, [r3, #4]
   1a6ee:	2b01      	cmp	r3, #1
   1a6f0:	d008      	beq.n	1a704 <ancsAnccAttrCback+0x140>
   1a6f2:	2b02      	cmp	r3, #2
   1a6f4:	d00a      	beq.n	1a70c <ancsAnccAttrCback+0x148>
   1a6f6:	2b00      	cmp	r3, #0
   1a6f8:	d000      	beq.n	1a6fc <ancsAnccAttrCback+0x138>
            break;
            case BLE_ANCS_EVENT_ID_NOTIFICATION_REMOVED:
                APP_TRACE_INFO0("* Event ID        = Removed");
            break;
            default:
            break;
   1a6fa:	e00b      	b.n	1a714 <ancsAnccAttrCback+0x150>
        }

        switch(anccCb.anccList[pAttr->handle].event_id)
        {
            case BLE_ANCS_EVENT_ID_NOTIFICATION_ADDED:
                APP_TRACE_INFO0("* Event ID        = Added");
   1a6fc:	487a      	ldr	r0, [pc, #488]	; (1a8e8 <ancsAnccAttrCback+0x324>)
   1a6fe:	f7fa fa31 	bl	14b64 <WsfTrace>
            break;
   1a702:	e007      	b.n	1a714 <ancsAnccAttrCback+0x150>
            case BLE_ANCS_EVENT_ID_NOTIFICATION_MODIFIED:
                APP_TRACE_INFO0("* Event ID        = Modified");
   1a704:	4879      	ldr	r0, [pc, #484]	; (1a8ec <ancsAnccAttrCback+0x328>)
   1a706:	f7fa fa2d 	bl	14b64 <WsfTrace>
            break;
   1a70a:	e003      	b.n	1a714 <ancsAnccAttrCback+0x150>
            case BLE_ANCS_EVENT_ID_NOTIFICATION_REMOVED:
                APP_TRACE_INFO0("* Event ID        = Removed");
   1a70c:	4878      	ldr	r0, [pc, #480]	; (1a8f0 <ancsAnccAttrCback+0x32c>)
   1a70e:	f7fa fa29 	bl	14b64 <WsfTrace>
            break;
   1a712:	bf00      	nop
            default:
            break;
        }

        APP_TRACE_INFO0("* EventFlags      = ");
   1a714:	4877      	ldr	r0, [pc, #476]	; (1a8f4 <ancsAnccAttrCback+0x330>)
   1a716:	f7fa fa25 	bl	14b64 <WsfTrace>
        for ( uint16_t i = 0; i < 5; i++ )
   1a71a:	2300      	movs	r3, #0
   1a71c:	81fb      	strh	r3, [r7, #14]
   1a71e:	e03b      	b.n	1a798 <ancsAnccAttrCback+0x1d4>
        {
            if ( anccCb.anccList[pAttr->handle].event_flags & (0x00000001 << i) )
   1a720:	687b      	ldr	r3, [r7, #4]
   1a722:	881b      	ldrh	r3, [r3, #0]
   1a724:	4619      	mov	r1, r3
   1a726:	4a60      	ldr	r2, [pc, #384]	; (1a8a8 <ancsAnccAttrCback+0x2e4>)
   1a728:	460b      	mov	r3, r1
   1a72a:	005b      	lsls	r3, r3, #1
   1a72c:	440b      	add	r3, r1
   1a72e:	009b      	lsls	r3, r3, #2
   1a730:	4413      	add	r3, r2
   1a732:	3328      	adds	r3, #40	; 0x28
   1a734:	795b      	ldrb	r3, [r3, #5]
   1a736:	461a      	mov	r2, r3
   1a738:	89fb      	ldrh	r3, [r7, #14]
   1a73a:	fa42 f303 	asr.w	r3, r2, r3
   1a73e:	f003 0301 	and.w	r3, r3, #1
   1a742:	2b00      	cmp	r3, #0
   1a744:	d025      	beq.n	1a792 <ancsAnccAttrCback+0x1ce>
            {
                switch(i)
   1a746:	89fb      	ldrh	r3, [r7, #14]
   1a748:	2b04      	cmp	r3, #4
   1a74a:	d821      	bhi.n	1a790 <ancsAnccAttrCback+0x1cc>
   1a74c:	a201      	add	r2, pc, #4	; (adr r2, 1a754 <ancsAnccAttrCback+0x190>)
   1a74e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1a752:	bf00      	nop
   1a754:	0001a769 	.word	0x0001a769
   1a758:	0001a771 	.word	0x0001a771
   1a75c:	0001a779 	.word	0x0001a779
   1a760:	0001a781 	.word	0x0001a781
   1a764:	0001a789 	.word	0x0001a789
                {
                    case 0:
                        APP_TRACE_INFO0("Silent ");
   1a768:	4863      	ldr	r0, [pc, #396]	; (1a8f8 <ancsAnccAttrCback+0x334>)
   1a76a:	f7fa f9fb 	bl	14b64 <WsfTrace>
                    break;
   1a76e:	e010      	b.n	1a792 <ancsAnccAttrCback+0x1ce>
                    case 1:
                        APP_TRACE_INFO0("Important ");
   1a770:	4862      	ldr	r0, [pc, #392]	; (1a8fc <ancsAnccAttrCback+0x338>)
   1a772:	f7fa f9f7 	bl	14b64 <WsfTrace>
                    break;
   1a776:	e00c      	b.n	1a792 <ancsAnccAttrCback+0x1ce>
                    case 2:
                        APP_TRACE_INFO0("PreExisting ");
   1a778:	4861      	ldr	r0, [pc, #388]	; (1a900 <ancsAnccAttrCback+0x33c>)
   1a77a:	f7fa f9f3 	bl	14b64 <WsfTrace>
                    break;
   1a77e:	e008      	b.n	1a792 <ancsAnccAttrCback+0x1ce>
                    case 3:
                        APP_TRACE_INFO0("PositiveAction ");
   1a780:	4860      	ldr	r0, [pc, #384]	; (1a904 <ancsAnccAttrCback+0x340>)
   1a782:	f7fa f9ef 	bl	14b64 <WsfTrace>
                    break;
   1a786:	e004      	b.n	1a792 <ancsAnccAttrCback+0x1ce>
                    case 4:
                        APP_TRACE_INFO0("NegativeAction ");
   1a788:	485f      	ldr	r0, [pc, #380]	; (1a908 <ancsAnccAttrCback+0x344>)
   1a78a:	f7fa f9eb 	bl	14b64 <WsfTrace>
                    break;
   1a78e:	e000      	b.n	1a792 <ancsAnccAttrCback+0x1ce>
                    default:
                    break;
   1a790:	bf00      	nop
            default:
            break;
        }

        APP_TRACE_INFO0("* EventFlags      = ");
        for ( uint16_t i = 0; i < 5; i++ )
   1a792:	89fb      	ldrh	r3, [r7, #14]
   1a794:	3301      	adds	r3, #1
   1a796:	81fb      	strh	r3, [r7, #14]
   1a798:	89fb      	ldrh	r3, [r7, #14]
   1a79a:	2b04      	cmp	r3, #4
   1a79c:	d9c0      	bls.n	1a720 <ancsAnccAttrCback+0x15c>
                    default:
                    break;
                }
            }
        }
        APP_TRACE_INFO1("* Category Count  = %d", anccCb.anccList[pAttr->handle].category_count);
   1a79e:	687b      	ldr	r3, [r7, #4]
   1a7a0:	881b      	ldrh	r3, [r3, #0]
   1a7a2:	4619      	mov	r1, r3
   1a7a4:	4a40      	ldr	r2, [pc, #256]	; (1a8a8 <ancsAnccAttrCback+0x2e4>)
   1a7a6:	460b      	mov	r3, r1
   1a7a8:	005b      	lsls	r3, r3, #1
   1a7aa:	440b      	add	r3, r1
   1a7ac:	009b      	lsls	r3, r3, #2
   1a7ae:	4413      	add	r3, r2
   1a7b0:	3328      	adds	r3, #40	; 0x28
   1a7b2:	79db      	ldrb	r3, [r3, #7]
   1a7b4:	4855      	ldr	r0, [pc, #340]	; (1a90c <ancsAnccAttrCback+0x348>)
   1a7b6:	4619      	mov	r1, r3
   1a7b8:	f7fa f9d4 	bl	14b64 <WsfTrace>
   1a7bc:	e0c9      	b.n	1a952 <ancsAnccAttrCback+0x38e>
    }
    else if (pAttr->attrId == BLE_ANCS_NOTIF_ATTR_ID_TITLE)
   1a7be:	687b      	ldr	r3, [r7, #4]
   1a7c0:	7a9b      	ldrb	r3, [r3, #10]
   1a7c2:	2b01      	cmp	r3, #1
   1a7c4:	d112      	bne.n	1a7ec <ancsAnccAttrCback+0x228>
    {
        if ( pAttr->attrLength != 0 )
   1a7c6:	687b      	ldr	r3, [r7, #4]
   1a7c8:	891b      	ldrh	r3, [r3, #8]
   1a7ca:	2b00      	cmp	r3, #0
   1a7cc:	f000 80c1 	beq.w	1a952 <ancsAnccAttrCback+0x38e>
        {
            APP_TRACE_INFO0("* Title           = ");
   1a7d0:	484f      	ldr	r0, [pc, #316]	; (1a910 <ancsAnccAttrCback+0x34c>)
   1a7d2:	f7fa f9c7 	bl	14b64 <WsfTrace>
            APP_TRACE_INFO1("%s", &(pAttr->attrDataBuf[pAttr->parseIndex]));
   1a7d6:	687b      	ldr	r3, [r7, #4]
   1a7d8:	88db      	ldrh	r3, [r3, #6]
   1a7da:	3350      	adds	r3, #80	; 0x50
   1a7dc:	687a      	ldr	r2, [r7, #4]
   1a7de:	4413      	add	r3, r2
   1a7e0:	3304      	adds	r3, #4
   1a7e2:	484c      	ldr	r0, [pc, #304]	; (1a914 <ancsAnccAttrCback+0x350>)
   1a7e4:	4619      	mov	r1, r3
   1a7e6:	f7fa f9bd 	bl	14b64 <WsfTrace>
   1a7ea:	e0b2      	b.n	1a952 <ancsAnccAttrCback+0x38e>
        }
    }
    else if (pAttr->attrId == BLE_ANCS_NOTIF_ATTR_ID_SUBTITLE)
   1a7ec:	687b      	ldr	r3, [r7, #4]
   1a7ee:	7a9b      	ldrb	r3, [r3, #10]
   1a7f0:	2b02      	cmp	r3, #2
   1a7f2:	d112      	bne.n	1a81a <ancsAnccAttrCback+0x256>
    {
        if ( pAttr->attrLength != 0 )
   1a7f4:	687b      	ldr	r3, [r7, #4]
   1a7f6:	891b      	ldrh	r3, [r3, #8]
   1a7f8:	2b00      	cmp	r3, #0
   1a7fa:	f000 80aa 	beq.w	1a952 <ancsAnccAttrCback+0x38e>
        {
            APP_TRACE_INFO0("* Subtitle        = ");
   1a7fe:	4846      	ldr	r0, [pc, #280]	; (1a918 <ancsAnccAttrCback+0x354>)
   1a800:	f7fa f9b0 	bl	14b64 <WsfTrace>
            APP_TRACE_INFO1("%s", &(pAttr->attrDataBuf[pAttr->parseIndex]));
   1a804:	687b      	ldr	r3, [r7, #4]
   1a806:	88db      	ldrh	r3, [r3, #6]
   1a808:	3350      	adds	r3, #80	; 0x50
   1a80a:	687a      	ldr	r2, [r7, #4]
   1a80c:	4413      	add	r3, r2
   1a80e:	3304      	adds	r3, #4
   1a810:	4840      	ldr	r0, [pc, #256]	; (1a914 <ancsAnccAttrCback+0x350>)
   1a812:	4619      	mov	r1, r3
   1a814:	f7fa f9a6 	bl	14b64 <WsfTrace>
   1a818:	e09b      	b.n	1a952 <ancsAnccAttrCback+0x38e>
        }
    }
    else if (pAttr->attrId == BLE_ANCS_NOTIF_ATTR_ID_MESSAGE)
   1a81a:	687b      	ldr	r3, [r7, #4]
   1a81c:	7a9b      	ldrb	r3, [r3, #10]
   1a81e:	2b03      	cmp	r3, #3
   1a820:	d112      	bne.n	1a848 <ancsAnccAttrCback+0x284>
    {
        if ( pAttr->attrLength != 0 )
   1a822:	687b      	ldr	r3, [r7, #4]
   1a824:	891b      	ldrh	r3, [r3, #8]
   1a826:	2b00      	cmp	r3, #0
   1a828:	f000 8093 	beq.w	1a952 <ancsAnccAttrCback+0x38e>
        {
            APP_TRACE_INFO0("* Message         = ");
   1a82c:	483b      	ldr	r0, [pc, #236]	; (1a91c <ancsAnccAttrCback+0x358>)
   1a82e:	f7fa f999 	bl	14b64 <WsfTrace>
            APP_TRACE_INFO1("%s", &(pAttr->attrDataBuf[pAttr->parseIndex]));
   1a832:	687b      	ldr	r3, [r7, #4]
   1a834:	88db      	ldrh	r3, [r3, #6]
   1a836:	3350      	adds	r3, #80	; 0x50
   1a838:	687a      	ldr	r2, [r7, #4]
   1a83a:	4413      	add	r3, r2
   1a83c:	3304      	adds	r3, #4
   1a83e:	4835      	ldr	r0, [pc, #212]	; (1a914 <ancsAnccAttrCback+0x350>)
   1a840:	4619      	mov	r1, r3
   1a842:	f7fa f98f 	bl	14b64 <WsfTrace>
   1a846:	e084      	b.n	1a952 <ancsAnccAttrCback+0x38e>
        }
    }
    else if (pAttr->attrId == BLE_ANCS_NOTIF_ATTR_ID_DATE)
   1a848:	687b      	ldr	r3, [r7, #4]
   1a84a:	7a9b      	ldrb	r3, [r3, #10]
   1a84c:	2b05      	cmp	r3, #5
   1a84e:	d111      	bne.n	1a874 <ancsAnccAttrCback+0x2b0>
    {
        if ( pAttr->attrLength != 0 )
   1a850:	687b      	ldr	r3, [r7, #4]
   1a852:	891b      	ldrh	r3, [r3, #8]
   1a854:	2b00      	cmp	r3, #0
   1a856:	d07c      	beq.n	1a952 <ancsAnccAttrCback+0x38e>
        {
            APP_TRACE_INFO0("* Date & Time     = ");
   1a858:	4831      	ldr	r0, [pc, #196]	; (1a920 <ancsAnccAttrCback+0x35c>)
   1a85a:	f7fa f983 	bl	14b64 <WsfTrace>
            APP_TRACE_INFO1("%s", &(pAttr->attrDataBuf[pAttr->parseIndex]));
   1a85e:	687b      	ldr	r3, [r7, #4]
   1a860:	88db      	ldrh	r3, [r3, #6]
   1a862:	3350      	adds	r3, #80	; 0x50
   1a864:	687a      	ldr	r2, [r7, #4]
   1a866:	4413      	add	r3, r2
   1a868:	3304      	adds	r3, #4
   1a86a:	482a      	ldr	r0, [pc, #168]	; (1a914 <ancsAnccAttrCback+0x350>)
   1a86c:	4619      	mov	r1, r3
   1a86e:	f7fa f979 	bl	14b64 <WsfTrace>
   1a872:	e06e      	b.n	1a952 <ancsAnccAttrCback+0x38e>
        }
    }
    else if (pAttr->attrId == BLE_ANCS_NOTIF_ATTR_ID_POSITIVE_ACTION_LABEL)
   1a874:	687b      	ldr	r3, [r7, #4]
   1a876:	7a9b      	ldrb	r3, [r3, #10]
   1a878:	2b06      	cmp	r3, #6
   1a87a:	d155      	bne.n	1a928 <ancsAnccAttrCback+0x364>
    {
        if ( pAttr->attrLength != 0 )
   1a87c:	687b      	ldr	r3, [r7, #4]
   1a87e:	891b      	ldrh	r3, [r3, #8]
   1a880:	2b00      	cmp	r3, #0
   1a882:	d066      	beq.n	1a952 <ancsAnccAttrCback+0x38e>
        {
            APP_TRACE_INFO0("* Positive Action = ");
   1a884:	4827      	ldr	r0, [pc, #156]	; (1a924 <ancsAnccAttrCback+0x360>)
   1a886:	f7fa f96d 	bl	14b64 <WsfTrace>
            APP_TRACE_INFO1("%s", &(pAttr->attrDataBuf[pAttr->parseIndex]));
   1a88a:	687b      	ldr	r3, [r7, #4]
   1a88c:	88db      	ldrh	r3, [r3, #6]
   1a88e:	3350      	adds	r3, #80	; 0x50
   1a890:	687a      	ldr	r2, [r7, #4]
   1a892:	4413      	add	r3, r2
   1a894:	3304      	adds	r3, #4
   1a896:	481f      	ldr	r0, [pc, #124]	; (1a914 <ancsAnccAttrCback+0x350>)
   1a898:	4619      	mov	r1, r3
   1a89a:	f7fa f963 	bl	14b64 <WsfTrace>
   1a89e:	e058      	b.n	1a952 <ancsAnccAttrCback+0x38e>
   1a8a0:	00023fe0 	.word	0x00023fe0
   1a8a4:	00024020 	.word	0x00024020
   1a8a8:	100091c0 	.word	0x100091c0
   1a8ac:	0002403c 	.word	0x0002403c
   1a8b0:	00024054 	.word	0x00024054
   1a8b4:	00024070 	.word	0x00024070
   1a8b8:	1000425c 	.word	0x1000425c
   1a8bc:	10004260 	.word	0x10004260
   1a8c0:	00024094 	.word	0x00024094
   1a8c4:	000240b4 	.word	0x000240b4
   1a8c8:	000240d4 	.word	0x000240d4
   1a8cc:	000240f0 	.word	0x000240f0
   1a8d0:	00024110 	.word	0x00024110
   1a8d4:	0002412c 	.word	0x0002412c
   1a8d8:	00024148 	.word	0x00024148
   1a8dc:	00024170 	.word	0x00024170
   1a8e0:	0002419c 	.word	0x0002419c
   1a8e4:	000241bc 	.word	0x000241bc
   1a8e8:	000241e0 	.word	0x000241e0
   1a8ec:	000241fc 	.word	0x000241fc
   1a8f0:	0002421c 	.word	0x0002421c
   1a8f4:	00024238 	.word	0x00024238
   1a8f8:	00024250 	.word	0x00024250
   1a8fc:	00024258 	.word	0x00024258
   1a900:	00024264 	.word	0x00024264
   1a904:	00024274 	.word	0x00024274
   1a908:	00024284 	.word	0x00024284
   1a90c:	00024294 	.word	0x00024294
   1a910:	000242ac 	.word	0x000242ac
   1a914:	000242c4 	.word	0x000242c4
   1a918:	000242c8 	.word	0x000242c8
   1a91c:	000242e0 	.word	0x000242e0
   1a920:	000242f8 	.word	0x000242f8
   1a924:	00024310 	.word	0x00024310
        }
    }
    else if (pAttr->attrId == BLE_ANCS_NOTIF_ATTR_ID_NEGATIVE_ACTION_LABEL)
   1a928:	687b      	ldr	r3, [r7, #4]
   1a92a:	7a9b      	ldrb	r3, [r3, #10]
   1a92c:	2b07      	cmp	r3, #7
   1a92e:	d110      	bne.n	1a952 <ancsAnccAttrCback+0x38e>
    {
        if (pAttr->attrLength != 0)
   1a930:	687b      	ldr	r3, [r7, #4]
   1a932:	891b      	ldrh	r3, [r3, #8]
   1a934:	2b00      	cmp	r3, #0
   1a936:	d00c      	beq.n	1a952 <ancsAnccAttrCback+0x38e>
        {
            APP_TRACE_INFO0("* Negative Action = ");
   1a938:	4807      	ldr	r0, [pc, #28]	; (1a958 <ancsAnccAttrCback+0x394>)
   1a93a:	f7fa f913 	bl	14b64 <WsfTrace>
            APP_TRACE_INFO1("%s", &(pAttr->attrDataBuf[pAttr->parseIndex]));
   1a93e:	687b      	ldr	r3, [r7, #4]
   1a940:	88db      	ldrh	r3, [r3, #6]
   1a942:	3350      	adds	r3, #80	; 0x50
   1a944:	687a      	ldr	r2, [r7, #4]
   1a946:	4413      	add	r3, r2
   1a948:	3304      	adds	r3, #4
   1a94a:	4804      	ldr	r0, [pc, #16]	; (1a95c <ancsAnccAttrCback+0x398>)
   1a94c:	4619      	mov	r1, r3
   1a94e:	f7fa f909 	bl	14b64 <WsfTrace>
        }
    }
}
   1a952:	3710      	adds	r7, #16
   1a954:	46bd      	mov	sp, r7
   1a956:	bd80      	pop	{r7, pc}
   1a958:	00024328 	.word	0x00024328
   1a95c:	000242c4 	.word	0x000242c4

0001a960 <ancsRejectCall>:

bool ancsRejectCall(void)
{
   1a960:	b580      	push	{r7, lr}
   1a962:	af00      	add	r7, sp, #0
    if (true == ph_incoming)
   1a964:	4b0a      	ldr	r3, [pc, #40]	; (1a990 <ancsRejectCall+0x30>)
   1a966:	781b      	ldrb	r3, [r3, #0]
   1a968:	b2db      	uxtb	r3, r3
   1a96a:	2b00      	cmp	r3, #0
   1a96c:	d00d      	beq.n	1a98a <ancsRejectCall+0x2a>
    {
        AncsPerformNotiAction(anccCb.hdlList, ph_notiuid, BLE_ANCS_NOTIF_ACTION_ID_NEGATIVE);
   1a96e:	4b09      	ldr	r3, [pc, #36]	; (1a994 <ancsRejectCall+0x34>)
   1a970:	685a      	ldr	r2, [r3, #4]
   1a972:	4b09      	ldr	r3, [pc, #36]	; (1a998 <ancsRejectCall+0x38>)
   1a974:	681b      	ldr	r3, [r3, #0]
   1a976:	4610      	mov	r0, r2
   1a978:	4619      	mov	r1, r3
   1a97a:	2201      	movs	r2, #1
   1a97c:	f7f9 f980 	bl	13c80 <AncsPerformNotiAction>
        ph_incoming = false;
   1a980:	4b03      	ldr	r3, [pc, #12]	; (1a990 <ancsRejectCall+0x30>)
   1a982:	2200      	movs	r2, #0
   1a984:	701a      	strb	r2, [r3, #0]
        return true;
   1a986:	2301      	movs	r3, #1
   1a988:	e000      	b.n	1a98c <ancsRejectCall+0x2c>
    }
    else
    {
        return false;
   1a98a:	2300      	movs	r3, #0
    }
}
   1a98c:	4618      	mov	r0, r3
   1a98e:	bd80      	pop	{r7, pc}
   1a990:	1000425c 	.word	0x1000425c
   1a994:	100091c0 	.word	0x100091c0
   1a998:	10004260 	.word	0x10004260

0001a99c <ancsAnccNotifCback>:
void ancsAnccNotifCback(active_notif_t* pAttr, uint32_t notiUid)
{
   1a99c:	b580      	push	{r7, lr}
   1a99e:	b082      	sub	sp, #8
   1a9a0:	af00      	add	r7, sp, #0
   1a9a2:	6078      	str	r0, [r7, #4]
   1a9a4:	6039      	str	r1, [r7, #0]
    //
    // removes notifications received
    //
    // AncsPerformNotiAction(pNotiAnccHdlList, notiUid, BLE_ANCS_NOTIF_ACTION_ID_NEGATIVE);
    APP_TRACE_INFO0("************************************************************");
   1a9a6:	4803      	ldr	r0, [pc, #12]	; (1a9b4 <ancsAnccNotifCback+0x18>)
   1a9a8:	f7fa f8dc 	bl	14b64 <WsfTrace>
}
   1a9ac:	3708      	adds	r7, #8
   1a9ae:	46bd      	mov	sp, r7
   1a9b0:	bd80      	pop	{r7, pc}
   1a9b2:	bf00      	nop
   1a9b4:	00023fe0 	.word	0x00023fe0

0001a9b8 <anccNotiRemoveCback>:

void anccNotiRemoveCback(ancc_notif_t* pAttr)
{
   1a9b8:	b580      	push	{r7, lr}
   1a9ba:	b082      	sub	sp, #8
   1a9bc:	af00      	add	r7, sp, #0
   1a9be:	6078      	str	r0, [r7, #4]
    APP_TRACE_INFO1("Nofity removed, category_id = %d", pAttr->category_id);
   1a9c0:	687b      	ldr	r3, [r7, #4]
   1a9c2:	789b      	ldrb	r3, [r3, #2]
   1a9c4:	4803      	ldr	r0, [pc, #12]	; (1a9d4 <anccNotiRemoveCback+0x1c>)
   1a9c6:	4619      	mov	r1, r3
   1a9c8:	f7fa f8cc 	bl	14b64 <WsfTrace>
}
   1a9cc:	3708      	adds	r7, #8
   1a9ce:	46bd      	mov	sp, r7
   1a9d0:	bd80      	pop	{r7, pc}
   1a9d2:	bf00      	nop
   1a9d4:	00024340 	.word	0x00024340

0001a9d8 <AncsStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AncsStart(void)
{
   1a9d8:	b580      	push	{r7, lr}
   1a9da:	af00      	add	r7, sp, #0
    /* Register for stack callbacks */
    DmRegister(ancsDmCback);
   1a9dc:	4811      	ldr	r0, [pc, #68]	; (1aa24 <AncsStart+0x4c>)
   1a9de:	f7f5 f95d 	bl	fc9c <DmRegister>
    DmConnRegister(DM_CLIENT_ID_APP, ancsDmCback);
   1a9e2:	2003      	movs	r0, #3
   1a9e4:	490f      	ldr	r1, [pc, #60]	; (1aa24 <AncsStart+0x4c>)
   1a9e6:	f7f4 fe4d 	bl	f684 <DmConnRegister>
    AttRegister(ancsAttCback);
   1a9ea:	480f      	ldr	r0, [pc, #60]	; (1aa28 <AncsStart+0x50>)
   1a9ec:	f7f1 fd5c 	bl	c4a8 <AttRegister>
    AttConnRegister(AppServerConnCback);
   1a9f0:	480e      	ldr	r0, [pc, #56]	; (1aa2c <AncsStart+0x54>)
   1a9f2:	f7f1 fd73 	bl	c4dc <AttConnRegister>
    AttsCccRegister(ANCS_NUM_CCC_IDX, (attsCccSet_t *) ancsCccSet, ancsCccCback);
   1a9f6:	2001      	movs	r0, #1
   1a9f8:	490d      	ldr	r1, [pc, #52]	; (1aa30 <AncsStart+0x58>)
   1a9fa:	4a0e      	ldr	r2, [pc, #56]	; (1aa34 <AncsStart+0x5c>)
   1a9fc:	f7f2 fd54 	bl	d4a8 <AttsCccRegister>

    /* Register for app framework callbacks */
    AppUiBtnRegister(ancsBtnCback);
   1aa00:	480d      	ldr	r0, [pc, #52]	; (1aa38 <AncsStart+0x60>)
   1aa02:	f7ff f9a1 	bl	19d48 <AppUiBtnRegister>

    /* Register for app framework discovery callbacks */
    AppDiscRegister(ancsDiscCback);
   1aa06:	480d      	ldr	r0, [pc, #52]	; (1aa3c <AncsStart+0x64>)
   1aa08:	f000 fd26 	bl	1b458 <AppDiscRegister>

    //
    // Register for ancc callbacks
    //
    AnccCbackRegister(ancsAnccAttrCback, ancsAnccNotifCback, anccNotiRemoveCback);
   1aa0c:	480c      	ldr	r0, [pc, #48]	; (1aa40 <AncsStart+0x68>)
   1aa0e:	490d      	ldr	r1, [pc, #52]	; (1aa44 <AncsStart+0x6c>)
   1aa10:	4a0d      	ldr	r2, [pc, #52]	; (1aa48 <AncsStart+0x70>)
   1aa12:	f7f9 fba7 	bl	14164 <AnccCbackRegister>

    /* Initialize attribute server database */
    SvcCoreAddGroup();
   1aa16:	f002 fb27 	bl	1d068 <SvcCoreAddGroup>
    SvcDisAddGroup();
   1aa1a:	f002 fb43 	bl	1d0a4 <SvcDisAddGroup>

    /* Reset the device */
    DmDevReset();
   1aa1e:	f7f5 f8dd 	bl	fbdc <DmDevReset>
}
   1aa22:	bd80      	pop	{r7, pc}
   1aa24:	00019d71 	.word	0x00019d71
   1aa28:	00019da9 	.word	0x00019da9
   1aa2c:	0001bb65 	.word	0x0001bb65
   1aa30:	000253bc 	.word	0x000253bc
   1aa34:	00019e09 	.word	0x00019e09
   1aa38:	00019f65 	.word	0x00019f65
   1aa3c:	00019ffd 	.word	0x00019ffd
   1aa40:	0001a5c5 	.word	0x0001a5c5
   1aa44:	0001a99d 	.word	0x0001a99d
   1aa48:	0001a9b9 	.word	0x0001a9b9

0001aa4c <enable_print_interface>:
// Enable printing to the console.
//
//*****************************************************************************
void
enable_print_interface(void)
{
   1aa4c:	b580      	push	{r7, lr}
   1aa4e:	af00      	add	r7, sp, #0
    //
    // Initialize a debug printing interface.
    //
    am_bsp_itm_printf_enable();
   1aa50:	f008 fec6 	bl	237e0 <am_bsp_itm_printf_enable>
}
   1aa54:	bd80      	pop	{r7, pc}
   1aa56:	bf00      	nop

0001aa58 <main>:
// Main Function
//
//*****************************************************************************
int
main(void)
{
   1aa58:	b580      	push	{r7, lr}
   1aa5a:	af00      	add	r7, sp, #0
    //
    // Set the clock frequency
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
   1aa5c:	2000      	movs	r0, #0
   1aa5e:	2100      	movs	r1, #0
   1aa60:	f008 f95e 	bl	22d20 <am_hal_clkgen_control>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
   1aa64:	4809      	ldr	r0, [pc, #36]	; (1aa8c <main+0x34>)
   1aa66:	f008 f92b 	bl	22cc0 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
   1aa6a:	f008 f94f 	bl	22d0c <am_hal_cachectrl_enable>
#ifndef NOFPU
    //
    // Enable the floating point module, and configure the core for lazy
    // stacking.
    //
    am_hal_sysctrl_fpu_enable();
   1aa6e:	f008 fe63 	bl	23738 <am_hal_sysctrl_fpu_enable>
    am_hal_sysctrl_fpu_stacking_enable(true);
   1aa72:	2001      	movs	r0, #1
   1aa74:	f008 fe68 	bl	23748 <am_hal_sysctrl_fpu_stacking_enable>
#endif

    //
    // Configure the board for low power.
    //
    am_bsp_low_power_init();
   1aa78:	f008 fe80 	bl	2377c <am_bsp_low_power_init>

    //
    // Enable printing to the console.
    //
#ifdef AM_DEBUG_PRINTF
    enable_print_interface();
   1aa7c:	f7ff ffe6 	bl	1aa4c <enable_print_interface>
#endif

    //
    // Initialize plotting interface.
    //
    am_util_debug_printf("FreeRTOS ANCS Example\n");
   1aa80:	4803      	ldr	r0, [pc, #12]	; (1aa90 <main+0x38>)
   1aa82:	f003 fa6d 	bl	1df60 <am_util_stdio_printf>

    //
    // Run the application.
    //
    run_tasks();
   1aa86:	f000 fa39 	bl	1aefc <run_tasks>
    //
    // We shouldn't ever get here.
    //
    while (1)
    {
    }
   1aa8a:	e7fe      	b.n	1aa8a <main+0x32>
   1aa8c:	00027450 	.word	0x00027450
   1aa90:	00024364 	.word	0x00024364

0001aa94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   1aa94:	b480      	push	{r7}
   1aa96:	b083      	sub	sp, #12
   1aa98:	af00      	add	r7, sp, #0
   1aa9a:	4603      	mov	r3, r0
   1aa9c:	6039      	str	r1, [r7, #0]
   1aa9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
   1aaa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   1aaa4:	2b00      	cmp	r3, #0
   1aaa6:	db0a      	blt.n	1aabe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1aaa8:	490d      	ldr	r1, [pc, #52]	; (1aae0 <__NVIC_SetPriority+0x4c>)
   1aaaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
   1aaae:	683a      	ldr	r2, [r7, #0]
   1aab0:	b2d2      	uxtb	r2, r2
   1aab2:	0152      	lsls	r2, r2, #5
   1aab4:	b2d2      	uxtb	r2, r2
   1aab6:	440b      	add	r3, r1
   1aab8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
   1aabc:	e00a      	b.n	1aad4 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1aabe:	4909      	ldr	r1, [pc, #36]	; (1aae4 <__NVIC_SetPriority+0x50>)
   1aac0:	79fb      	ldrb	r3, [r7, #7]
   1aac2:	f003 030f 	and.w	r3, r3, #15
   1aac6:	3b04      	subs	r3, #4
   1aac8:	683a      	ldr	r2, [r7, #0]
   1aaca:	b2d2      	uxtb	r2, r2
   1aacc:	0152      	lsls	r2, r2, #5
   1aace:	b2d2      	uxtb	r2, r2
   1aad0:	440b      	add	r3, r1
   1aad2:	761a      	strb	r2, [r3, #24]
  }
}
   1aad4:	370c      	adds	r7, #12
   1aad6:	46bd      	mov	sp, r7
   1aad8:	f85d 7b04 	ldr.w	r7, [sp], #4
   1aadc:	4770      	bx	lr
   1aade:	bf00      	nop
   1aae0:	e000e100 	.word	0xe000e100
   1aae4:	e000ed00 	.word	0xe000ed00

0001aae8 <wsf_timer_handler>:
// Callback handler for the FreeRTOS Timer
//
//*****************************************************************************
void
wsf_timer_handler(TimerHandle_t xTimer)
{
   1aae8:	b580      	push	{r7, lr}
   1aaea:	b082      	sub	sp, #8
   1aaec:	af00      	add	r7, sp, #0
   1aaee:	6078      	str	r0, [r7, #4]
    // Signal radio task to run

    WsfTaskSetReady(0, 0);
   1aaf0:	2000      	movs	r0, #0
   1aaf2:	2100      	movs	r1, #0
   1aaf4:	f7f9 ff4c 	bl	14990 <WsfTaskSetReady>
}
   1aaf8:	3708      	adds	r7, #8
   1aafa:	46bd      	mov	sp, r7
   1aafc:	bd80      	pop	{r7, pc}
   1aafe:	bf00      	nop

0001ab00 <scheduler_timer_init>:
// Reuse FreeRTOS TIMER to handle the WSF scheduler.
//
//*****************************************************************************
void
scheduler_timer_init(void)
{
   1ab00:	b580      	push	{r7, lr}
   1ab02:	b082      	sub	sp, #8
   1ab04:	af02      	add	r7, sp, #8
    // Create a FreeRTOS Timer
    xWsfTimer = xTimerCreate("WSF Timer", pdMS_TO_TICKS(WSF_MS_PER_TICK),
   1ab06:	4b09      	ldr	r3, [pc, #36]	; (1ab2c <scheduler_timer_init+0x2c>)
   1ab08:	9300      	str	r3, [sp, #0]
   1ab0a:	4809      	ldr	r0, [pc, #36]	; (1ab30 <scheduler_timer_init+0x30>)
   1ab0c:	210a      	movs	r1, #10
   1ab0e:	2200      	movs	r2, #0
   1ab10:	2300      	movs	r3, #0
   1ab12:	f004 ffc1 	bl	1fa98 <xTimerCreate>
   1ab16:	4602      	mov	r2, r0
   1ab18:	4b06      	ldr	r3, [pc, #24]	; (1ab34 <scheduler_timer_init+0x34>)
   1ab1a:	601a      	str	r2, [r3, #0]
            pdFALSE, NULL, wsf_timer_handler);
    configASSERT(xWsfTimer);
   1ab1c:	4b05      	ldr	r3, [pc, #20]	; (1ab34 <scheduler_timer_init+0x34>)
   1ab1e:	681b      	ldr	r3, [r3, #0]
   1ab20:	2b00      	cmp	r3, #0
   1ab22:	d100      	bne.n	1ab26 <scheduler_timer_init+0x26>
   1ab24:	e7fe      	b.n	1ab24 <scheduler_timer_init+0x24>
}
   1ab26:	46bd      	mov	sp, r7
   1ab28:	bd80      	pop	{r7, pc}
   1ab2a:	bf00      	nop
   1ab2c:	0001aae9 	.word	0x0001aae9
   1ab30:	0002437c 	.word	0x0002437c
   1ab34:	1000a220 	.word	0x1000a220

0001ab38 <update_scheduler_timers>:
// Calculate the elapsed time, and update the WSF software timers.
//
//*****************************************************************************
void
update_scheduler_timers(void)
{
   1ab38:	b580      	push	{r7, lr}
   1ab3a:	b082      	sub	sp, #8
   1ab3c:	af00      	add	r7, sp, #0
    uint32_t ui32CurrentTime, ui32ElapsedTime;

    //
    // Read the continuous timer.
    //
    ui32CurrentTime = xTaskGetTickCount();
   1ab3e:	f004 fb63 	bl	1f208 <xTaskGetTickCount>
   1ab42:	6078      	str	r0, [r7, #4]
    //
    // Figure out how long it has been since the last time we've read the
    // continuous timer. We should be reading often enough that we'll never
    // have more than one overflow.
    //
    ui32ElapsedTime = ui32CurrentTime - g_ui32LastTime;
   1ab44:	4b0a      	ldr	r3, [pc, #40]	; (1ab70 <update_scheduler_timers+0x38>)
   1ab46:	681b      	ldr	r3, [r3, #0]
   1ab48:	687a      	ldr	r2, [r7, #4]
   1ab4a:	1ad3      	subs	r3, r2, r3
   1ab4c:	603b      	str	r3, [r7, #0]

    //
    // Check to see if any WSF ticks need to happen.
    //
    if ( (ui32ElapsedTime / CLK_TICKS_PER_WSF_TICKS) > 0 )
   1ab4e:	683b      	ldr	r3, [r7, #0]
   1ab50:	2b09      	cmp	r3, #9
   1ab52:	d90a      	bls.n	1ab6a <update_scheduler_timers+0x32>
    {
        //
        // Update the WSF timers and save the current time as our "last
        // update".
        //
        WsfTimerUpdate(ui32ElapsedTime / CLK_TICKS_PER_WSF_TICKS);
   1ab54:	683b      	ldr	r3, [r7, #0]
   1ab56:	4a07      	ldr	r2, [pc, #28]	; (1ab74 <update_scheduler_timers+0x3c>)
   1ab58:	fba2 2303 	umull	r2, r3, r2, r3
   1ab5c:	08db      	lsrs	r3, r3, #3
   1ab5e:	4618      	mov	r0, r3
   1ab60:	f7fe fcd0 	bl	19504 <WsfTimerUpdate>

        g_ui32LastTime = ui32CurrentTime;
   1ab64:	4a02      	ldr	r2, [pc, #8]	; (1ab70 <update_scheduler_timers+0x38>)
   1ab66:	687b      	ldr	r3, [r7, #4]
   1ab68:	6013      	str	r3, [r2, #0]
    }
}
   1ab6a:	3708      	adds	r7, #8
   1ab6c:	46bd      	mov	sp, r7
   1ab6e:	bd80      	pop	{r7, pc}
   1ab70:	10004e10 	.word	0x10004e10
   1ab74:	cccccccd 	.word	0xcccccccd

0001ab78 <set_next_wakeup>:
// Set a timer interrupt for the next upcoming scheduler event.
//
//*****************************************************************************
void
set_next_wakeup(void)
{
   1ab78:	b580      	push	{r7, lr}
   1ab7a:	b084      	sub	sp, #16
   1ab7c:	af02      	add	r7, sp, #8
    wsfTimerTicks_t xNextExpiration;

    //
    // Check to see when the next timer expiration should happen.
    //
    xNextExpiration = WsfTimerNextExpiration(&bTimerRunning);
   1ab7e:	1cfb      	adds	r3, r7, #3
   1ab80:	4618      	mov	r0, r3
   1ab82:	f7fe fceb 	bl	1955c <WsfTimerNextExpiration>
   1ab86:	6078      	str	r0, [r7, #4]

    //
    // If there's a pending WSF timer event, set an interrupt to wake us up in
    // time to service it.
    //
    if ( xNextExpiration )
   1ab88:	687b      	ldr	r3, [r7, #4]
   1ab8a:	2b00      	cmp	r3, #0
   1ab8c:	d015      	beq.n	1abba <set_next_wakeup+0x42>
    {
        configASSERT(pdPASS == xTimerChangePeriod( xWsfTimer,
   1ab8e:	4b0c      	ldr	r3, [pc, #48]	; (1abc0 <set_next_wakeup+0x48>)
   1ab90:	6819      	ldr	r1, [r3, #0]
   1ab92:	687b      	ldr	r3, [r7, #4]
   1ab94:	f242 7210 	movw	r2, #10000	; 0x2710
   1ab98:	fb02 f303 	mul.w	r3, r2, r3
   1ab9c:	4a09      	ldr	r2, [pc, #36]	; (1abc4 <set_next_wakeup+0x4c>)
   1ab9e:	fba2 2303 	umull	r2, r3, r2, r3
   1aba2:	099a      	lsrs	r2, r3, #6
   1aba4:	2364      	movs	r3, #100	; 0x64
   1aba6:	9300      	str	r3, [sp, #0]
   1aba8:	4608      	mov	r0, r1
   1abaa:	2104      	movs	r1, #4
   1abac:	2300      	movs	r3, #0
   1abae:	f004 ffb9 	bl	1fb24 <xTimerGenericCommand>
   1abb2:	4603      	mov	r3, r0
   1abb4:	2b01      	cmp	r3, #1
   1abb6:	d000      	beq.n	1abba <set_next_wakeup+0x42>
   1abb8:	e7fe      	b.n	1abb8 <set_next_wakeup+0x40>
                pdMS_TO_TICKS(xNextExpiration*CLK_TICKS_PER_WSF_TICKS), 100)) ;
    }
}
   1abba:	3708      	adds	r7, #8
   1abbc:	46bd      	mov	sp, r7
   1abbe:	bd80      	pop	{r7, pc}
   1abc0:	1000a220 	.word	0x1000a220
   1abc4:	10624dd3 	.word	0x10624dd3

0001abc8 <exactle_stack_init>:
// Initialization for the ExactLE stack.
//
//*****************************************************************************
void
exactle_stack_init(void)
{
   1abc8:	b580      	push	{r7, lr}
   1abca:	b082      	sub	sp, #8
   1abcc:	af00      	add	r7, sp, #0
    wsfHandlerId_t handlerId;
    uint16_t       wsfBufMemLen;
    //
    // Set up timers for the WSF scheduler.
    //
    scheduler_timer_init();
   1abce:	f7ff ff97 	bl	1ab00 <scheduler_timer_init>
    WsfTimerInit();
   1abd2:	f7fe fc57 	bl	19484 <WsfTimerInit>

    //
    // Initialize a buffer pool for WSF dynamic memory needs.
    //
    wsfBufMemLen = WsfBufInit(sizeof(g_pui32BufMem), (uint8_t *)g_pui32BufMem, WSF_BUF_POOLS,
   1abd6:	f44f 6038 	mov.w	r0, #2944	; 0xb80
   1abda:	4942      	ldr	r1, [pc, #264]	; (1ace4 <exactle_stack_init+0x11c>)
   1abdc:	2204      	movs	r2, #4
   1abde:	4b42      	ldr	r3, [pc, #264]	; (1ace8 <exactle_stack_init+0x120>)
   1abe0:	f7fe f972 	bl	18ec8 <WsfBufInit>
   1abe4:	4603      	mov	r3, r0
   1abe6:	80fb      	strh	r3, [r7, #6]
               g_psPoolDescriptors);

    if (wsfBufMemLen > sizeof(g_pui32BufMem))
   1abe8:	88fb      	ldrh	r3, [r7, #6]
   1abea:	f5b3 6f38 	cmp.w	r3, #2944	; 0xb80
   1abee:	d906      	bls.n	1abfe <exactle_stack_init+0x36>
    {
        am_util_debug_printf("Memory pool is too small by %d\r\n",
   1abf0:	88fb      	ldrh	r3, [r7, #6]
   1abf2:	f5a3 6338 	sub.w	r3, r3, #2944	; 0xb80
   1abf6:	483d      	ldr	r0, [pc, #244]	; (1acec <exactle_stack_init+0x124>)
   1abf8:	4619      	mov	r1, r3
   1abfa:	f003 f9b1 	bl	1df60 <am_util_stdio_printf>
    }

    //
    // Initialize the WSF security service.
    //
    SecInit();
   1abfe:	f7f8 fdd7 	bl	137b0 <SecInit>
    SecAesInit();
   1ac02:	f7f8 fa79 	bl	130f8 <SecAesInit>
    SecCmacInit();
   1ac06:	f7f8 fc45 	bl	13494 <SecCmacInit>
    SecEccInit();
   1ac0a:	f7f8 fd51 	bl	136b0 <SecEccInit>

    //
    // Set up callback functions for the various layers of the ExactLE stack.
    //
    handlerId = WsfOsSetNextHandler(HciHandler);
   1ac0e:	4838      	ldr	r0, [pc, #224]	; (1acf0 <exactle_stack_init+0x128>)
   1ac10:	f7f9 fee8 	bl	149e4 <WsfOsSetNextHandler>
   1ac14:	4603      	mov	r3, r0
   1ac16:	717b      	strb	r3, [r7, #5]
    HciHandlerInit(handlerId);
   1ac18:	797b      	ldrb	r3, [r7, #5]
   1ac1a:	4618      	mov	r0, r3
   1ac1c:	f7f8 f8f2 	bl	12e04 <HciHandlerInit>

    handlerId = WsfOsSetNextHandler(DmHandler);
   1ac20:	4834      	ldr	r0, [pc, #208]	; (1acf4 <exactle_stack_init+0x12c>)
   1ac22:	f7f9 fedf 	bl	149e4 <WsfOsSetNextHandler>
   1ac26:	4603      	mov	r3, r0
   1ac28:	717b      	strb	r3, [r7, #5]
    DmDevVsInit(0);
   1ac2a:	2000      	movs	r0, #0
   1ac2c:	f7f5 f81d 	bl	fc6a <DmDevVsInit>
    DmAdvInit();
   1ac30:	f7f4 fa9c 	bl	f16c <DmAdvInit>
    DmConnInit();
   1ac34:	f7f4 fd14 	bl	f660 <DmConnInit>
    DmConnSlaveInit();
   1ac38:	f7f4 ff72 	bl	fb20 <DmConnSlaveInit>
    DmSecInit();
   1ac3c:	f7f5 fb51 	bl	102e2 <DmSecInit>
    DmSecLescInit();
   1ac40:	f7f5 fc8e 	bl	10560 <DmSecLescInit>
    DmPrivInit();
   1ac44:	f7f5 f99c 	bl	ff80 <DmPrivInit>
    DmHandlerInit(handlerId);
   1ac48:	797b      	ldrb	r3, [r7, #5]
   1ac4a:	4618      	mov	r0, r3
   1ac4c:	f7f5 f857 	bl	fcfe <DmHandlerInit>

    handlerId = WsfOsSetNextHandler(L2cSlaveHandler);
   1ac50:	4829      	ldr	r0, [pc, #164]	; (1acf8 <exactle_stack_init+0x130>)
   1ac52:	f7f9 fec7 	bl	149e4 <WsfOsSetNextHandler>
   1ac56:	4603      	mov	r3, r0
   1ac58:	717b      	strb	r3, [r7, #5]
    L2cSlaveHandlerInit(handlerId);
   1ac5a:	797b      	ldrb	r3, [r7, #5]
   1ac5c:	4618      	mov	r0, r3
   1ac5e:	f7f5 fe21 	bl	108a4 <L2cSlaveHandlerInit>
    L2cInit();
   1ac62:	f7f5 fd4e 	bl	10702 <L2cInit>
    L2cSlaveInit();
   1ac66:	f7f5 fdd3 	bl	10810 <L2cSlaveInit>

    handlerId = WsfOsSetNextHandler(AttHandler);
   1ac6a:	4824      	ldr	r0, [pc, #144]	; (1acfc <exactle_stack_init+0x134>)
   1ac6c:	f7f9 feba 	bl	149e4 <WsfOsSetNextHandler>
   1ac70:	4603      	mov	r3, r0
   1ac72:	717b      	strb	r3, [r7, #5]
    AttHandlerInit(handlerId);
   1ac74:	797b      	ldrb	r3, [r7, #5]
   1ac76:	4618      	mov	r0, r3
   1ac78:	f7f1 fbe7 	bl	c44a <AttHandlerInit>
    AttsInit();
   1ac7c:	f7f2 feea 	bl	da54 <AttsInit>
    AttsIndInit();
   1ac80:	f7f2 fdea 	bl	d858 <AttsIndInit>
    AttcInit();
   1ac84:	f7f2 f80a 	bl	cc9c <AttcInit>

    handlerId = WsfOsSetNextHandler(SmpHandler);
   1ac88:	481d      	ldr	r0, [pc, #116]	; (1ad00 <exactle_stack_init+0x138>)
   1ac8a:	f7f9 feab 	bl	149e4 <WsfOsSetNextHandler>
   1ac8e:	4603      	mov	r3, r0
   1ac90:	717b      	strb	r3, [r7, #5]
    SmpHandlerInit(handlerId);
   1ac92:	797b      	ldrb	r3, [r7, #5]
   1ac94:	4618      	mov	r0, r3
   1ac96:	f7f6 f88d 	bl	10db4 <SmpHandlerInit>
    SmprInit();
   1ac9a:	f7f6 fee3 	bl	11a64 <SmprInit>
    SmprScInit();
   1ac9e:	f7f6 fecb 	bl	11a38 <SmprScInit>
    HciSetMaxRxAclLen(251);
   1aca2:	20fb      	movs	r0, #251	; 0xfb
   1aca4:	f7fb fea0 	bl	169e8 <HciSetMaxRxAclLen>

    handlerId = WsfOsSetNextHandler(AppHandler);
   1aca8:	4816      	ldr	r0, [pc, #88]	; (1ad04 <exactle_stack_init+0x13c>)
   1acaa:	f7f9 fe9b 	bl	149e4 <WsfOsSetNextHandler>
   1acae:	4603      	mov	r3, r0
   1acb0:	717b      	strb	r3, [r7, #5]
    AppHandlerInit(handlerId);
   1acb2:	797b      	ldrb	r3, [r7, #5]
   1acb4:	4618      	mov	r0, r3
   1acb6:	f000 fe11 	bl	1b8dc <AppHandlerInit>

    handlerId = WsfOsSetNextHandler(AncsHandler);
   1acba:	4813      	ldr	r0, [pc, #76]	; (1ad08 <exactle_stack_init+0x140>)
   1acbc:	f7f9 fe92 	bl	149e4 <WsfOsSetNextHandler>
   1acc0:	4603      	mov	r3, r0
   1acc2:	717b      	strb	r3, [r7, #5]
    AncsHandlerInit(handlerId);
   1acc4:	797b      	ldrb	r3, [r7, #5]
   1acc6:	4618      	mov	r0, r3
   1acc8:	f7ff fbfe 	bl	1a4c8 <AncsHandlerInit>

    handlerId = WsfOsSetNextHandler(HciDrvHandler);
   1accc:	480f      	ldr	r0, [pc, #60]	; (1ad0c <exactle_stack_init+0x144>)
   1acce:	f7f9 fe89 	bl	149e4 <WsfOsSetNextHandler>
   1acd2:	4603      	mov	r3, r0
   1acd4:	717b      	strb	r3, [r7, #5]
    HciDrvHandlerInit(handlerId);
   1acd6:	797b      	ldrb	r3, [r7, #5]
   1acd8:	4618      	mov	r0, r3
   1acda:	f7fa f99d 	bl	15018 <HciDrvHandlerInit>
}
   1acde:	3708      	adds	r7, #8
   1ace0:	46bd      	mov	sp, r7
   1ace2:	bd80      	pop	{r7, pc}
   1ace4:	10004290 	.word	0x10004290
   1ace8:	10002bc8 	.word	0x10002bc8
   1acec:	00024388 	.word	0x00024388
   1acf0:	00012e31 	.word	0x00012e31
   1acf4:	0000fd19 	.word	0x0000fd19
   1acf8:	000108b5 	.word	0x000108b5
   1acfc:	0000c489 	.word	0x0000c489
   1ad00:	00010dfd 	.word	0x00010dfd
   1ad04:	0001b8fd 	.word	0x0001b8fd
   1ad08:	0001a55d 	.word	0x0001a55d
   1ad0c:	000150b1 	.word	0x000150b1

0001ad10 <am_uart_isr>:
// UART interrupt handler.
//
//*****************************************************************************
void
am_uart_isr(void)
{
   1ad10:	b580      	push	{r7, lr}
   1ad12:	b082      	sub	sp, #8
   1ad14:	af00      	add	r7, sp, #0
    uint32_t ui32Status;

    //
    // Read and save the interrupt status, but clear out the status register.
    //
    ui32Status = UARTn(0)->MIS;
   1ad16:	4b06      	ldr	r3, [pc, #24]	; (1ad30 <am_uart_isr+0x20>)
   1ad18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ad1a:	607b      	str	r3, [r7, #4]
    UARTn(0)->IEC = ui32Status;
   1ad1c:	4a04      	ldr	r2, [pc, #16]	; (1ad30 <am_uart_isr+0x20>)
   1ad1e:	687b      	ldr	r3, [r7, #4]
   1ad20:	6453      	str	r3, [r2, #68]	; 0x44
    //
    //HciDrvUartISR(ui32Status);

    // Signal radio task to run

    WsfTaskSetReady(0, 0);
   1ad22:	2000      	movs	r0, #0
   1ad24:	2100      	movs	r1, #0
   1ad26:	f7f9 fe33 	bl	14990 <WsfTaskSetReady>
}
   1ad2a:	3708      	adds	r7, #8
   1ad2c:	46bd      	mov	sp, r7
   1ad2e:	bd80      	pop	{r7, pc}
   1ad30:	4001c000 	.word	0x4001c000

0001ad34 <am_ble_isr>:
// Interrupt handler for BLE
//
//*****************************************************************************
void
am_ble_isr(void)
{
   1ad34:	b580      	push	{r7, lr}
   1ad36:	af00      	add	r7, sp, #0

    HciDrvIntService();
   1ad38:	f7fa f98e 	bl	15058 <HciDrvIntService>

    // Signal radio task to run

    WsfTaskSetReady(0, 0);
   1ad3c:	2000      	movs	r0, #0
   1ad3e:	2100      	movs	r1, #0
   1ad40:	f7f9 fe26 	bl	14990 <WsfTaskSetReady>
}
   1ad44:	bd80      	pop	{r7, pc}
   1ad46:	bf00      	nop

0001ad48 <RadioTaskSetup>:
// Perform initial setup for the radio task.
//
//*****************************************************************************
void
RadioTaskSetup(void)
{
   1ad48:	b580      	push	{r7, lr}
   1ad4a:	af00      	add	r7, sp, #0
    am_util_debug_printf("RadioTask: setup\r\n");
   1ad4c:	480c      	ldr	r0, [pc, #48]	; (1ad80 <RadioTaskSetup+0x38>)
   1ad4e:	f003 f907 	bl	1df60 <am_util_stdio_printf>

    //
    // Create an event handle for our wake-up events.
    //
    xRadioEventHandle = xEventGroupCreate();
   1ad52:	f003 f929 	bl	1dfa8 <xEventGroupCreate>
   1ad56:	4602      	mov	r2, r0
   1ad58:	4b0a      	ldr	r3, [pc, #40]	; (1ad84 <RadioTaskSetup+0x3c>)
   1ad5a:	601a      	str	r2, [r3, #0]

    //
    // Make sure we actually allocated space for the events we need.
    //
    while ( xRadioEventHandle == NULL );
   1ad5c:	bf00      	nop
   1ad5e:	4b09      	ldr	r3, [pc, #36]	; (1ad84 <RadioTaskSetup+0x3c>)
   1ad60:	681b      	ldr	r3, [r3, #0]
   1ad62:	2b00      	cmp	r3, #0
   1ad64:	d0fb      	beq.n	1ad5e <RadioTaskSetup+0x16>

    // Pass event object to WSF scheduler
    wsfOsSetEventObject((void*)xRadioEventHandle);
   1ad66:	4b07      	ldr	r3, [pc, #28]	; (1ad84 <RadioTaskSetup+0x3c>)
   1ad68:	681b      	ldr	r3, [r3, #0]
   1ad6a:	4618      	mov	r0, r3
   1ad6c:	f7f9 feec 	bl	14b48 <wsfOsSetEventObject>

    NVIC_SetPriority(BLE_IRQn, NVIC_configMAX_SYSCALL_INTERRUPT_PRIORITY);
   1ad70:	200c      	movs	r0, #12
   1ad72:	2104      	movs	r1, #4
   1ad74:	f7ff fe8e 	bl	1aa94 <__NVIC_SetPriority>

    //
    // Boot the radio.
    //
    HciDrvRadioBoot(0);
   1ad78:	2000      	movs	r0, #0
   1ad7a:	f7f9 ff79 	bl	14c70 <HciDrvRadioBoot>
}
   1ad7e:	bd80      	pop	{r7, pc}
   1ad80:	000243ac 	.word	0x000243ac
   1ad84:	1000a228 	.word	0x1000a228

0001ad88 <RadioTask>:
// Short Description.
//
//*****************************************************************************
void
RadioTask(void *pvParameters)
{
   1ad88:	b580      	push	{r7, lr}
   1ad8a:	b084      	sub	sp, #16
   1ad8c:	af02      	add	r7, sp, #8
   1ad8e:	6078      	str	r0, [r7, #4]
#if WSF_TRACE_ENABLED == TRUE
    //
    // Enable ITM
    //
    am_util_debug_printf("Starting wicentric trace:\n\n");
   1ad90:	480e      	ldr	r0, [pc, #56]	; (1adcc <RadioTask+0x44>)
   1ad92:	f003 f8e5 	bl	1df60 <am_util_stdio_printf>
#endif

    //
    // Initialize the main ExactLE stack.
    //
    exactle_stack_init();
   1ad96:	f7ff ff17 	bl	1abc8 <exactle_stack_init>

    //
    // Start the "Ancs" profile.
    //
    AncsStart();
   1ad9a:	f7ff fe1d 	bl	1a9d8 <AncsStart>

        //
        // Calculate the elapsed time from our free-running timer, and update
        // the software timers in the WSF scheduler.
        //
        update_scheduler_timers();
   1ad9e:	f7ff fecb 	bl	1ab38 <update_scheduler_timers>
        wsfOsDispatcher();
   1ada2:	f7f9 fe4d 	bl	14a40 <wsfOsDispatcher>

        //
        // Enable an interrupt to wake us up next time we have a scheduled
        // event.
        //
        set_next_wakeup();
   1ada6:	f7ff fee7 	bl	1ab78 <set_next_wakeup>

        //
        // Check to see if the WSF routines are ready to go to sleep.
        //
        if ( wsfOsReadyToSleep() )
   1adaa:	f7f9 fe37 	bl	14a1c <wsfOsReadyToSleep>
   1adae:	4603      	mov	r3, r0
   1adb0:	2b00      	cmp	r3, #0
   1adb2:	d00a      	beq.n	1adca <RadioTask+0x42>
        {
            //
            // Wait for an event to be posted to the Radio Event Handle.
            //
            xEventGroupWaitBits(xRadioEventHandle, 1, pdTRUE,
   1adb4:	4b06      	ldr	r3, [pc, #24]	; (1add0 <RadioTask+0x48>)
   1adb6:	681a      	ldr	r2, [r3, #0]
   1adb8:	f04f 33ff 	mov.w	r3, #4294967295
   1adbc:	9300      	str	r3, [sp, #0]
   1adbe:	4610      	mov	r0, r2
   1adc0:	2101      	movs	r1, #1
   1adc2:	2201      	movs	r2, #1
   1adc4:	2300      	movs	r3, #0
   1adc6:	f003 f907 	bl	1dfd8 <xEventGroupWaitBits>
                                pdFALSE, portMAX_DELAY);
        }

    }
   1adca:	e7e8      	b.n	1ad9e <RadioTask+0x16>
   1adcc:	000243c0 	.word	0x000243c0
   1add0:	1000a228 	.word	0x1000a228

0001add4 <am_ctimer_isr>:
// Interrupt handler for the CTIMER module.
//
//*****************************************************************************
void
am_ctimer_isr(void)
{
   1add4:	b580      	push	{r7, lr}
   1add6:	b082      	sub	sp, #8
   1add8:	af00      	add	r7, sp, #0
    uint32_t ui32Status;

    //
    // Check the timer interrupt status.
    //
    ui32Status = am_hal_ctimer_int_status_get(false);
   1adda:	2000      	movs	r0, #0
   1addc:	f008 f852 	bl	22e84 <am_hal_ctimer_int_status_get>
   1ade0:	6078      	str	r0, [r7, #4]
    am_hal_ctimer_int_clear(ui32Status);
   1ade2:	6878      	ldr	r0, [r7, #4]
   1ade4:	f008 f83e 	bl	22e64 <am_hal_ctimer_int_clear>

    //
    // Run handlers for the various possible timer events.
    //
    am_hal_ctimer_int_service(ui32Status);
   1ade8:	6878      	ldr	r0, [r7, #4]
   1adea:	f008 f823 	bl	22e34 <am_hal_ctimer_int_service>
}
   1adee:	3708      	adds	r7, #8
   1adf0:	46bd      	mov	sp, r7
   1adf2:	bd80      	pop	{r7, pc}

0001adf4 <am_freertos_sleep>:
// Return 0 if this function also incorporates the WFI, else return value same
// as idleTime
//
//*****************************************************************************
uint32_t am_freertos_sleep(uint32_t idleTime)
{
   1adf4:	b580      	push	{r7, lr}
   1adf6:	b082      	sub	sp, #8
   1adf8:	af00      	add	r7, sp, #0
   1adfa:	6078      	str	r0, [r7, #4]
    am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
   1adfc:	2001      	movs	r0, #1
   1adfe:	f008 fc63 	bl	236c8 <am_hal_sysctrl_sleep>
    return 0;
   1ae02:	2300      	movs	r3, #0
}
   1ae04:	4618      	mov	r0, r3
   1ae06:	3708      	adds	r7, #8
   1ae08:	46bd      	mov	sp, r7
   1ae0a:	bd80      	pop	{r7, pc}

0001ae0c <am_freertos_wakeup>:
// Recovery function called from FreeRTOS IDLE task, after waking up from Sleep
// Do necessary 'wakeup' operations here, e.g. to power up/enable peripherals etc.
//
//*****************************************************************************
void am_freertos_wakeup(uint32_t idleTime)
{
   1ae0c:	b480      	push	{r7}
   1ae0e:	b083      	sub	sp, #12
   1ae10:	af00      	add	r7, sp, #0
   1ae12:	6078      	str	r0, [r7, #4]
    return;
   1ae14:	bf00      	nop
}
   1ae16:	370c      	adds	r7, #12
   1ae18:	46bd      	mov	sp, r7
   1ae1a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1ae1e:	4770      	bx	lr

0001ae20 <vApplicationMallocFailedHook>:
// FreeRTOS debugging functions.
//
//*****************************************************************************
void
vApplicationMallocFailedHook(void)
{
   1ae20:	b480      	push	{r7}
   1ae22:	af00      	add	r7, sp, #0
    // free memory available in the FreeRTOS heap.  pvPortMalloc() is called
    // internally by FreeRTOS API functions that create tasks, queues, software
    // timers, and semaphores.  The size of the FreeRTOS heap is set by the
    // configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h.
    //
    while (1);
   1ae24:	e7fe      	b.n	1ae24 <vApplicationMallocFailedHook+0x4>
   1ae26:	bf00      	nop

0001ae28 <vApplicationStackOverflowHook>:
}

void
vApplicationStackOverflowHook(TaskHandle_t pxTask, char *pcTaskName)
{
   1ae28:	b480      	push	{r7}
   1ae2a:	b083      	sub	sp, #12
   1ae2c:	af00      	add	r7, sp, #0
   1ae2e:	6078      	str	r0, [r7, #4]
   1ae30:	6039      	str	r1, [r7, #0]
    // configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
    // function is called if a stack overflow is detected.
    //
    while (1)
    {
        __asm("BKPT #0\n") ; // Break into the debugger
   1ae32:	be00      	bkpt	0x0000
    }
   1ae34:	e7fd      	b.n	1ae32 <vApplicationStackOverflowHook+0xa>
   1ae36:	bf00      	nop

0001ae38 <TestTask>:


extern bool ancsRejectCall(void);

void TestTask(void *pvParameters)
{
   1ae38:	b580      	push	{r7, lr}
   1ae3a:	b084      	sub	sp, #16
   1ae3c:	af00      	add	r7, sp, #0
   1ae3e:	6078      	str	r0, [r7, #4]
    static uint32_t tm_cnt;
    TickType_t xLastWakeTime;

    am_hal_gpio_pinconfig(AM_BSP_GPIO_CLICKBEETLE_SW1, g_AM_BSP_GPIO_CLICKBEETLE_SW1);
   1ae40:	4b14      	ldr	r3, [pc, #80]	; (1ae94 <TestTask+0x5c>)
   1ae42:	2013      	movs	r0, #19
   1ae44:	6819      	ldr	r1, [r3, #0]
   1ae46:	f008 f87f 	bl	22f48 <am_hal_gpio_pinconfig>

    xLastWakeTime = xTaskGetTickCount();
   1ae4a:	f004 f9dd 	bl	1f208 <xTaskGetTickCount>
   1ae4e:	4603      	mov	r3, r0
   1ae50:	60fb      	str	r3, [r7, #12]

    while (1)
    {
        if ( !am_hal_gpio_input_read(AM_BSP_GPIO_CLICKBEETLE_SW1) )
   1ae52:	4b11      	ldr	r3, [pc, #68]	; (1ae98 <TestTask+0x60>)
   1ae54:	681b      	ldr	r3, [r3, #0]
   1ae56:	0cdb      	lsrs	r3, r3, #19
   1ae58:	f003 0301 	and.w	r3, r3, #1
   1ae5c:	2b00      	cmp	r3, #0
   1ae5e:	d10e      	bne.n	1ae7e <TestTask+0x46>
        {
            if (++tm_cnt > 5)
   1ae60:	4b0e      	ldr	r3, [pc, #56]	; (1ae9c <TestTask+0x64>)
   1ae62:	681b      	ldr	r3, [r3, #0]
   1ae64:	3301      	adds	r3, #1
   1ae66:	4a0d      	ldr	r2, [pc, #52]	; (1ae9c <TestTask+0x64>)
   1ae68:	6013      	str	r3, [r2, #0]
   1ae6a:	4b0c      	ldr	r3, [pc, #48]	; (1ae9c <TestTask+0x64>)
   1ae6c:	681b      	ldr	r3, [r3, #0]
   1ae6e:	2b05      	cmp	r3, #5
   1ae70:	d908      	bls.n	1ae84 <TestTask+0x4c>
            {
                tm_cnt = 0;
   1ae72:	4b0a      	ldr	r3, [pc, #40]	; (1ae9c <TestTask+0x64>)
   1ae74:	2200      	movs	r2, #0
   1ae76:	601a      	str	r2, [r3, #0]

                //am_util_debug_printf("key press\r\n");
                ancsRejectCall();
   1ae78:	f7ff fd72 	bl	1a960 <ancsRejectCall>
   1ae7c:	e002      	b.n	1ae84 <TestTask+0x4c>
            }
        }
        else
        {
            tm_cnt = 0;
   1ae7e:	4b07      	ldr	r3, [pc, #28]	; (1ae9c <TestTask+0x64>)
   1ae80:	2200      	movs	r2, #0
   1ae82:	601a      	str	r2, [r3, #0]
        }
        vTaskDelayUntil( &xLastWakeTime, pdMS_TO_TICKS( 20 ) );
   1ae84:	f107 030c 	add.w	r3, r7, #12
   1ae88:	4618      	mov	r0, r3
   1ae8a:	2114      	movs	r1, #20
   1ae8c:	f003 ffe2 	bl	1ee54 <vTaskDelayUntil>
    }
   1ae90:	e7df      	b.n	1ae52 <TestTask+0x1a>
   1ae92:	bf00      	nop
   1ae94:	000276f4 	.word	0x000276f4
   1ae98:	40010080 	.word	0x40010080
   1ae9c:	10004e14 	.word	0x10004e14

0001aea0 <setup_task>:
// features.
//
//*****************************************************************************
void
setup_task(void *pvParameters)
{
   1aea0:	b580      	push	{r7, lr}
   1aea2:	b084      	sub	sp, #16
   1aea4:	af02      	add	r7, sp, #8
   1aea6:	6078      	str	r0, [r7, #4]
    //
    // Print a debug message.
    //
    am_util_debug_printf("Running setup tasks...\r\n");
   1aea8:	480e      	ldr	r0, [pc, #56]	; (1aee4 <setup_task+0x44>)
   1aeaa:	f003 f859 	bl	1df60 <am_util_stdio_printf>

    //
    // Run setup functions.
    //
    RadioTaskSetup();
   1aeae:	f7ff ff4b 	bl	1ad48 <RadioTaskSetup>

    //
    // Create the functional tasks
    //
    xTaskCreate(RadioTask, "RadioTask", 512, 0, 3, &radio_task_handle);
   1aeb2:	2303      	movs	r3, #3
   1aeb4:	9300      	str	r3, [sp, #0]
   1aeb6:	4b0c      	ldr	r3, [pc, #48]	; (1aee8 <setup_task+0x48>)
   1aeb8:	9301      	str	r3, [sp, #4]
   1aeba:	480c      	ldr	r0, [pc, #48]	; (1aeec <setup_task+0x4c>)
   1aebc:	490c      	ldr	r1, [pc, #48]	; (1aef0 <setup_task+0x50>)
   1aebe:	f44f 7200 	mov.w	r2, #512	; 0x200
   1aec2:	2300      	movs	r3, #0
   1aec4:	f003 fea4 	bl	1ec10 <xTaskCreate>

    xTaskCreate(TestTask, "TestTask", 128, 0, 2, NULL);
   1aec8:	2302      	movs	r3, #2
   1aeca:	9300      	str	r3, [sp, #0]
   1aecc:	2300      	movs	r3, #0
   1aece:	9301      	str	r3, [sp, #4]
   1aed0:	4808      	ldr	r0, [pc, #32]	; (1aef4 <setup_task+0x54>)
   1aed2:	4909      	ldr	r1, [pc, #36]	; (1aef8 <setup_task+0x58>)
   1aed4:	2280      	movs	r2, #128	; 0x80
   1aed6:	2300      	movs	r3, #0
   1aed8:	f003 fe9a 	bl	1ec10 <xTaskCreate>

    //
    // The setup operations are complete, so suspend the setup task now.
    //
    vTaskSuspend(NULL);
   1aedc:	2000      	movs	r0, #0
   1aede:	f004 f817 	bl	1ef10 <vTaskSuspend>

    while (1);
   1aee2:	e7fe      	b.n	1aee2 <setup_task+0x42>
   1aee4:	000243dc 	.word	0x000243dc
   1aee8:	1000a224 	.word	0x1000a224
   1aeec:	0001ad89 	.word	0x0001ad89
   1aef0:	000243f8 	.word	0x000243f8
   1aef4:	0001ae39 	.word	0x0001ae39
   1aef8:	00024404 	.word	0x00024404

0001aefc <run_tasks>:
// Initializes all tasks
//
//*****************************************************************************
void
run_tasks(void)
{
   1aefc:	b580      	push	{r7, lr}
   1aefe:	b082      	sub	sp, #8
   1af00:	af02      	add	r7, sp, #8
    //

    //
    // Create essential tasks.
    //
    xTaskCreate(setup_task, "Setup", 512, 0, 3, &xSetupTask);
   1af02:	2303      	movs	r3, #3
   1af04:	9300      	str	r3, [sp, #0]
   1af06:	4b06      	ldr	r3, [pc, #24]	; (1af20 <run_tasks+0x24>)
   1af08:	9301      	str	r3, [sp, #4]
   1af0a:	4806      	ldr	r0, [pc, #24]	; (1af24 <run_tasks+0x28>)
   1af0c:	4906      	ldr	r1, [pc, #24]	; (1af28 <run_tasks+0x2c>)
   1af0e:	f44f 7200 	mov.w	r2, #512	; 0x200
   1af12:	2300      	movs	r3, #0
   1af14:	f003 fe7c 	bl	1ec10 <xTaskCreate>

    //
    // Start the scheduler.
    //
    vTaskStartScheduler();
   1af18:	f004 f85a 	bl	1efd0 <vTaskStartScheduler>
}
   1af1c:	46bd      	mov	sp, r7
   1af1e:	bd80      	pop	{r7, pc}
   1af20:	1000a22c 	.word	0x1000a22c
   1af24:	0001aea1 	.word	0x0001aea1
   1af28:	00024410 	.word	0x00024410

0001af2c <appDiscStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appDiscStart(dmConnId_t connId)
{
   1af2c:	b590      	push	{r4, r7, lr}
   1af2e:	b087      	sub	sp, #28
   1af30:	af00      	add	r7, sp, #0
   1af32:	4603      	mov	r3, r0
   1af34:	71fb      	strb	r3, [r7, #7]
  appDbHdl_t  hdl;
  uint8_t     status;
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];
   1af36:	79fb      	ldrb	r3, [r7, #7]
   1af38:	3b01      	subs	r3, #1
   1af3a:	011b      	lsls	r3, r3, #4
   1af3c:	4a29      	ldr	r2, [pc, #164]	; (1afe4 <appDiscStart+0xb8>)
   1af3e:	4413      	add	r3, r2
   1af40:	613b      	str	r3, [r7, #16]

  if (pAppDiscCb->inProgress == APP_DISC_IDLE)
   1af42:	693b      	ldr	r3, [r7, #16]
   1af44:	7adb      	ldrb	r3, [r3, #11]
   1af46:	2b00      	cmp	r3, #0
   1af48:	d149      	bne.n	1afde <appDiscStart+0xb2>
  {
    /* get discovery status */
    if ((hdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   1af4a:	79fb      	ldrb	r3, [r7, #7]
   1af4c:	4618      	mov	r0, r3
   1af4e:	f000 fd6d 	bl	1ba2c <AppDbGetHdl>
   1af52:	60f8      	str	r0, [r7, #12]
   1af54:	68fb      	ldr	r3, [r7, #12]
   1af56:	2b00      	cmp	r3, #0
   1af58:	d005      	beq.n	1af66 <appDiscStart+0x3a>
    {
      status = AppDbGetDiscStatus(hdl);
   1af5a:	68f8      	ldr	r0, [r7, #12]
   1af5c:	f7fe fdc0 	bl	19ae0 <AppDbGetDiscStatus>
   1af60:	4603      	mov	r3, r0
   1af62:	75fb      	strb	r3, [r7, #23]
   1af64:	e002      	b.n	1af6c <appDiscStart+0x40>
    }
    else
    {
      status = pAppDiscCb->cmplStatus;
   1af66:	693b      	ldr	r3, [r7, #16]
   1af68:	7a5b      	ldrb	r3, [r3, #9]
   1af6a:	75fb      	strb	r3, [r7, #23]
    }
  
    /* if discovery not complete */
    if (status < APP_DISC_CMPL)
   1af6c:	7dfb      	ldrb	r3, [r7, #23]
   1af6e:	2b02      	cmp	r3, #2
   1af70:	d806      	bhi.n	1af80 <appDiscStart+0x54>
    {
      /* notify application to start discovery */
      (*appDiscCback)(connId, APP_DISC_START);      
   1af72:	4b1d      	ldr	r3, [pc, #116]	; (1afe8 <appDiscStart+0xbc>)
   1af74:	681b      	ldr	r3, [r3, #0]
   1af76:	79fa      	ldrb	r2, [r7, #7]
   1af78:	4610      	mov	r0, r2
   1af7a:	2102      	movs	r1, #2
   1af7c:	4798      	blx	r3
   1af7e:	e02e      	b.n	1afde <appDiscStart+0xb2>
    }
    /* else if discovery was completed successfully */
    else if (status != APP_DISC_FAILED)
   1af80:	7dfb      	ldrb	r3, [r7, #23]
   1af82:	2b04      	cmp	r3, #4
   1af84:	d02b      	beq.n	1afde <appDiscStart+0xb2>
    {
      /* get stored handle list if present */
      if (hdl != APP_DB_HDL_NONE && pAppDiscCb->pHdlList != NULL)
   1af86:	68fb      	ldr	r3, [r7, #12]
   1af88:	2b00      	cmp	r3, #0
   1af8a:	d011      	beq.n	1afb0 <appDiscStart+0x84>
   1af8c:	693b      	ldr	r3, [r7, #16]
   1af8e:	685b      	ldr	r3, [r3, #4]
   1af90:	2b00      	cmp	r3, #0
   1af92:	d00d      	beq.n	1afb0 <appDiscStart+0x84>
      {
        memcpy(pAppDiscCb->pHdlList, AppDbGetHdlList(hdl), (pAppDiscCb->hdlListLen * sizeof(uint16_t)));
   1af94:	693b      	ldr	r3, [r7, #16]
   1af96:	685c      	ldr	r4, [r3, #4]
   1af98:	68f8      	ldr	r0, [r7, #12]
   1af9a:	f7fe fdbf 	bl	19b1c <AppDbGetHdlList>
   1af9e:	4602      	mov	r2, r0
   1afa0:	693b      	ldr	r3, [r7, #16]
   1afa2:	7a9b      	ldrb	r3, [r3, #10]
   1afa4:	005b      	lsls	r3, r3, #1
   1afa6:	4620      	mov	r0, r4
   1afa8:	4611      	mov	r1, r2
   1afaa:	461a      	mov	r2, r3
   1afac:	f7f1 f8a8 	bl	c100 <memcpy>
      }

      /* if configuration not complete */
      if (status < APP_DISC_CFG_CMPL)
   1afb0:	7dfb      	ldrb	r3, [r7, #23]
   1afb2:	2b06      	cmp	r3, #6
   1afb4:	d806      	bhi.n	1afc4 <appDiscStart+0x98>
      {
        /* notify application to start configuration */
        (*appDiscCback)(connId, APP_DISC_CFG_START);          
   1afb6:	4b0c      	ldr	r3, [pc, #48]	; (1afe8 <appDiscStart+0xbc>)
   1afb8:	681b      	ldr	r3, [r3, #0]
   1afba:	79fa      	ldrb	r2, [r7, #7]
   1afbc:	4610      	mov	r0, r2
   1afbe:	2105      	movs	r1, #5
   1afc0:	4798      	blx	r3
   1afc2:	e00c      	b.n	1afde <appDiscStart+0xb2>
      }
      /* else if configuration complete start connection setup configuration */
      else if (status == APP_DISC_CFG_CMPL && pAppDiscCb->connCfgStatus == APP_DISC_INIT)
   1afc4:	7dfb      	ldrb	r3, [r7, #23]
   1afc6:	2b07      	cmp	r3, #7
   1afc8:	d109      	bne.n	1afde <appDiscStart+0xb2>
   1afca:	693b      	ldr	r3, [r7, #16]
   1afcc:	7a1b      	ldrb	r3, [r3, #8]
   1afce:	2b00      	cmp	r3, #0
   1afd0:	d105      	bne.n	1afde <appDiscStart+0xb2>
      {
        (*appDiscCback)(connId, APP_DISC_CFG_CONN_START);
   1afd2:	4b05      	ldr	r3, [pc, #20]	; (1afe8 <appDiscStart+0xbc>)
   1afd4:	681b      	ldr	r3, [r3, #0]
   1afd6:	79fa      	ldrb	r2, [r7, #7]
   1afd8:	4610      	mov	r0, r2
   1afda:	2106      	movs	r1, #6
   1afdc:	4798      	blx	r3
      }
    }
  }
}
   1afde:	371c      	adds	r7, #28
   1afe0:	46bd      	mov	sp, r7
   1afe2:	bd90      	pop	{r4, r7, pc}
   1afe4:	10004e18 	.word	0x10004e18
   1afe8:	10004e98 	.word	0x10004e98

0001afec <appDiscConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appDiscConnOpen(dmEvt_t *pMsg)
{
   1afec:	b580      	push	{r7, lr}
   1afee:	b084      	sub	sp, #16
   1aff0:	af00      	add	r7, sp, #0
   1aff2:	6078      	str	r0, [r7, #4]
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t) pMsg->hdr.param - 1];
   1aff4:	687b      	ldr	r3, [r7, #4]
   1aff6:	881b      	ldrh	r3, [r3, #0]
   1aff8:	b2db      	uxtb	r3, r3
   1affa:	3b01      	subs	r3, #1
   1affc:	011b      	lsls	r3, r3, #4
   1affe:	4a1b      	ldr	r2, [pc, #108]	; (1b06c <appDiscConnOpen+0x80>)
   1b000:	4413      	add	r3, r2
   1b002:	60fb      	str	r3, [r7, #12]

  pAppDiscCb->alreadySecure = FALSE;
   1b004:	68fb      	ldr	r3, [r7, #12]
   1b006:	2200      	movs	r2, #0
   1b008:	731a      	strb	r2, [r3, #12]
  pAppDiscCb->connCfgStatus = APP_DISC_INIT;
   1b00a:	68fb      	ldr	r3, [r7, #12]
   1b00c:	2200      	movs	r2, #0
   1b00e:	721a      	strb	r2, [r3, #8]
  pAppDiscCb->cmplStatus = APP_DISC_INIT;
   1b010:	68fb      	ldr	r3, [r7, #12]
   1b012:	2200      	movs	r2, #0
   1b014:	725a      	strb	r2, [r3, #9]
  pAppDiscCb->secRequired = FALSE;
   1b016:	68fb      	ldr	r3, [r7, #12]
   1b018:	2200      	movs	r2, #0
   1b01a:	735a      	strb	r2, [r3, #13]
  pAppDiscCb->scPending = FALSE;
   1b01c:	68fb      	ldr	r3, [r7, #12]
   1b01e:	2200      	movs	r2, #0
   1b020:	739a      	strb	r2, [r3, #14]
  
  /* tell app to set up handle list */
  (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_INIT);
   1b022:	4b13      	ldr	r3, [pc, #76]	; (1b070 <appDiscConnOpen+0x84>)
   1b024:	681b      	ldr	r3, [r3, #0]
   1b026:	687a      	ldr	r2, [r7, #4]
   1b028:	8812      	ldrh	r2, [r2, #0]
   1b02a:	b2d2      	uxtb	r2, r2
   1b02c:	4610      	mov	r0, r2
   1b02e:	2100      	movs	r1, #0
   1b030:	4798      	blx	r3
  
  /* initialize handle list */
  if (pAppDiscCb->pHdlList != NULL)
   1b032:	68fb      	ldr	r3, [r7, #12]
   1b034:	685b      	ldr	r3, [r3, #4]
   1b036:	2b00      	cmp	r3, #0
   1b038:	d009      	beq.n	1b04e <appDiscConnOpen+0x62>
  {
    memset(pAppDiscCb->pHdlList, 0, (pAppDiscCb->hdlListLen * sizeof(uint16_t)));
   1b03a:	68fb      	ldr	r3, [r7, #12]
   1b03c:	685a      	ldr	r2, [r3, #4]
   1b03e:	68fb      	ldr	r3, [r7, #12]
   1b040:	7a9b      	ldrb	r3, [r3, #10]
   1b042:	005b      	lsls	r3, r3, #1
   1b044:	4610      	mov	r0, r2
   1b046:	2100      	movs	r1, #0
   1b048:	461a      	mov	r2, r3
   1b04a:	f005 f9cf 	bl	203ec <memset>
  }
  
  /* if not waiting for security start discovery/configuration */
  if (!pAppDiscCfg->waitForSec)
   1b04e:	4b09      	ldr	r3, [pc, #36]	; (1b074 <appDiscConnOpen+0x88>)
   1b050:	681b      	ldr	r3, [r3, #0]
   1b052:	781b      	ldrb	r3, [r3, #0]
   1b054:	2b00      	cmp	r3, #0
   1b056:	d105      	bne.n	1b064 <appDiscConnOpen+0x78>
  {
    appDiscStart((dmConnId_t) pMsg->hdr.param);
   1b058:	687b      	ldr	r3, [r7, #4]
   1b05a:	881b      	ldrh	r3, [r3, #0]
   1b05c:	b2db      	uxtb	r3, r3
   1b05e:	4618      	mov	r0, r3
   1b060:	f7ff ff64 	bl	1af2c <appDiscStart>
  }
}
   1b064:	3710      	adds	r7, #16
   1b066:	46bd      	mov	sp, r7
   1b068:	bd80      	pop	{r7, pc}
   1b06a:	bf00      	nop
   1b06c:	10004e18 	.word	0x10004e18
   1b070:	10004e98 	.word	0x10004e98
   1b074:	1000a244 	.word	0x1000a244

0001b078 <appDiscConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appDiscConnClose(dmEvt_t *pMsg)
{
   1b078:	b580      	push	{r7, lr}
   1b07a:	b084      	sub	sp, #16
   1b07c:	af00      	add	r7, sp, #0
   1b07e:	6078      	str	r0, [r7, #4]
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t) pMsg->hdr.param - 1];
   1b080:	687b      	ldr	r3, [r7, #4]
   1b082:	881b      	ldrh	r3, [r3, #0]
   1b084:	b2db      	uxtb	r3, r3
   1b086:	3b01      	subs	r3, #1
   1b088:	011b      	lsls	r3, r3, #4
   1b08a:	4a11      	ldr	r2, [pc, #68]	; (1b0d0 <appDiscConnClose+0x58>)
   1b08c:	4413      	add	r3, r2
   1b08e:	60fb      	str	r3, [r7, #12]

  pAppDiscCb->inProgress = APP_DISC_IDLE;
   1b090:	68fb      	ldr	r3, [r7, #12]
   1b092:	2200      	movs	r2, #0
   1b094:	72da      	strb	r2, [r3, #11]

  appDbHdl_t  hdl;
  
  if ((hdl = AppDbGetHdl((dmConnId_t) pMsg->hdr.param)) != APP_DB_HDL_NONE)
   1b096:	687b      	ldr	r3, [r7, #4]
   1b098:	881b      	ldrh	r3, [r3, #0]
   1b09a:	b2db      	uxtb	r3, r3
   1b09c:	4618      	mov	r0, r3
   1b09e:	f000 fcc5 	bl	1ba2c <AppDbGetHdl>
   1b0a2:	60b8      	str	r0, [r7, #8]
   1b0a4:	68bb      	ldr	r3, [r7, #8]
   1b0a6:	2b00      	cmp	r3, #0
   1b0a8:	d003      	beq.n	1b0b2 <appDiscConnClose+0x3a>
  {
    // reset discovery status
    AppDbSetDiscStatus(hdl, APP_DISC_INIT);
   1b0aa:	68b8      	ldr	r0, [r7, #8]
   1b0ac:	2100      	movs	r1, #0
   1b0ae:	f7fe fd25 	bl	19afc <AppDbSetDiscStatus>
  }


  if (pAppDiscCb->pDiscCb != NULL)
   1b0b2:	68fb      	ldr	r3, [r7, #12]
   1b0b4:	681b      	ldr	r3, [r3, #0]
   1b0b6:	2b00      	cmp	r3, #0
   1b0b8:	d007      	beq.n	1b0ca <appDiscConnClose+0x52>
  {
    WsfBufFree(pAppDiscCb->pDiscCb);
   1b0ba:	68fb      	ldr	r3, [r7, #12]
   1b0bc:	681b      	ldr	r3, [r3, #0]
   1b0be:	4618      	mov	r0, r3
   1b0c0:	f7fd ffec 	bl	1909c <WsfBufFree>
    pAppDiscCb->pDiscCb = NULL;
   1b0c4:	68fb      	ldr	r3, [r7, #12]
   1b0c6:	2200      	movs	r2, #0
   1b0c8:	601a      	str	r2, [r3, #0]
  }
}
   1b0ca:	3710      	adds	r7, #16
   1b0cc:	46bd      	mov	sp, r7
   1b0ce:	bd80      	pop	{r7, pc}
   1b0d0:	10004e18 	.word	0x10004e18

0001b0d4 <appDiscPairCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appDiscPairCmpl(dmEvt_t *pMsg)
{
   1b0d4:	b580      	push	{r7, lr}
   1b0d6:	b084      	sub	sp, #16
   1b0d8:	af00      	add	r7, sp, #0
   1b0da:	6078      	str	r0, [r7, #4]
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t) pMsg->hdr.param - 1];
   1b0dc:	687b      	ldr	r3, [r7, #4]
   1b0de:	881b      	ldrh	r3, [r3, #0]
   1b0e0:	b2db      	uxtb	r3, r3
   1b0e2:	3b01      	subs	r3, #1
   1b0e4:	011b      	lsls	r3, r3, #4
   1b0e6:	4a2f      	ldr	r2, [pc, #188]	; (1b1a4 <appDiscPairCmpl+0xd0>)
   1b0e8:	4413      	add	r3, r2
   1b0ea:	60fb      	str	r3, [r7, #12]
  appDbHdl_t hdl;

  /* procedures triggered by security are only executed once */
  if (pAppDiscCb->alreadySecure)
   1b0ec:	68fb      	ldr	r3, [r7, #12]
   1b0ee:	7b1b      	ldrb	r3, [r3, #12]
   1b0f0:	2b00      	cmp	r3, #0
   1b0f2:	d000      	beq.n	1b0f6 <appDiscPairCmpl+0x22>
  {
    return;
   1b0f4:	e052      	b.n	1b19c <appDiscPairCmpl+0xc8>
  }

  /* if we are now bonded and discovery/configuration was performed before bonding */
  if (appCheckBonded((dmConnId_t) pMsg->hdr.param) && (pAppDiscCb->cmplStatus != APP_DISC_INIT))
   1b0f6:	687b      	ldr	r3, [r7, #4]
   1b0f8:	881b      	ldrh	r3, [r3, #0]
   1b0fa:	b2db      	uxtb	r3, r3
   1b0fc:	4618      	mov	r0, r3
   1b0fe:	f000 fb97 	bl	1b830 <appCheckBonded>
   1b102:	4603      	mov	r3, r0
   1b104:	2b00      	cmp	r3, #0
   1b106:	d03b      	beq.n	1b180 <appDiscPairCmpl+0xac>
   1b108:	68fb      	ldr	r3, [r7, #12]
   1b10a:	7a5b      	ldrb	r3, [r3, #9]
   1b10c:	2b00      	cmp	r3, #0
   1b10e:	d037      	beq.n	1b180 <appDiscPairCmpl+0xac>
  {
    if ((hdl = AppDbGetHdl((dmConnId_t) pMsg->hdr.param)) != APP_DB_HDL_NONE)
   1b110:	687b      	ldr	r3, [r7, #4]
   1b112:	881b      	ldrh	r3, [r3, #0]
   1b114:	b2db      	uxtb	r3, r3
   1b116:	4618      	mov	r0, r3
   1b118:	f000 fc88 	bl	1ba2c <AppDbGetHdl>
   1b11c:	60b8      	str	r0, [r7, #8]
   1b11e:	68bb      	ldr	r3, [r7, #8]
   1b120:	2b00      	cmp	r3, #0
   1b122:	d017      	beq.n	1b154 <appDiscPairCmpl+0x80>
    {
      /* store discovery status */
      AppDbSetDiscStatus(hdl, pAppDiscCb->cmplStatus);
   1b124:	68fb      	ldr	r3, [r7, #12]
   1b126:	7a5b      	ldrb	r3, [r3, #9]
   1b128:	68b8      	ldr	r0, [r7, #8]
   1b12a:	4619      	mov	r1, r3
   1b12c:	f7fe fce6 	bl	19afc <AppDbSetDiscStatus>

      /* store handle list */
      if (pAppDiscCb->cmplStatus == APP_DISC_CMPL || pAppDiscCb->cmplStatus == APP_DISC_CFG_CMPL)
   1b130:	68fb      	ldr	r3, [r7, #12]
   1b132:	7a5b      	ldrb	r3, [r3, #9]
   1b134:	2b03      	cmp	r3, #3
   1b136:	d003      	beq.n	1b140 <appDiscPairCmpl+0x6c>
   1b138:	68fb      	ldr	r3, [r7, #12]
   1b13a:	7a5b      	ldrb	r3, [r3, #9]
   1b13c:	2b07      	cmp	r3, #7
   1b13e:	d109      	bne.n	1b154 <appDiscPairCmpl+0x80>
      {
        if (pAppDiscCb->pHdlList != NULL)
   1b140:	68fb      	ldr	r3, [r7, #12]
   1b142:	685b      	ldr	r3, [r3, #4]
   1b144:	2b00      	cmp	r3, #0
   1b146:	d005      	beq.n	1b154 <appDiscPairCmpl+0x80>
        {
          AppDbSetHdlList(hdl, pAppDiscCb->pHdlList);
   1b148:	68fb      	ldr	r3, [r7, #12]
   1b14a:	685b      	ldr	r3, [r3, #4]
   1b14c:	68b8      	ldr	r0, [r7, #8]
   1b14e:	4619      	mov	r1, r3
   1b150:	f7fe fcf0 	bl	19b34 <AppDbSetHdlList>
        }
      }
    }
    
    /* if configuration was waiting for security */
    if (pAppDiscCb->secRequired)
   1b154:	68fb      	ldr	r3, [r7, #12]
   1b156:	7b5b      	ldrb	r3, [r3, #13]
   1b158:	2b00      	cmp	r3, #0
   1b15a:	d010      	beq.n	1b17e <appDiscPairCmpl+0xaa>
    {
      pAppDiscCb->secRequired = FALSE;
   1b15c:	68fb      	ldr	r3, [r7, #12]
   1b15e:	2200      	movs	r2, #0
   1b160:	735a      	strb	r2, [r3, #13]

      /* resume configuration */
      if (pAppDiscCb->pDiscCb != NULL)
   1b162:	68fb      	ldr	r3, [r7, #12]
   1b164:	681b      	ldr	r3, [r3, #0]
   1b166:	2b00      	cmp	r3, #0
   1b168:	d009      	beq.n	1b17e <appDiscPairCmpl+0xaa>
      {
        AttcDiscConfigResume((dmConnId_t) pMsg->hdr.param, pAppDiscCb->pDiscCb);
   1b16a:	687b      	ldr	r3, [r7, #4]
   1b16c:	881b      	ldrh	r3, [r3, #0]
   1b16e:	b2da      	uxtb	r2, r3
   1b170:	68fb      	ldr	r3, [r7, #12]
   1b172:	681b      	ldr	r3, [r3, #0]
   1b174:	4610      	mov	r0, r2
   1b176:	4619      	mov	r1, r3
   1b178:	f7f1 fb8c 	bl	c894 <AttcDiscConfigResume>
        }
      }
    }
    
    /* if configuration was waiting for security */
    if (pAppDiscCb->secRequired)
   1b17c:	e00b      	b.n	1b196 <appDiscPairCmpl+0xc2>
   1b17e:	e00a      	b.n	1b196 <appDiscPairCmpl+0xc2>
    }
  } 
  else {
    
    /* if waiting for security start discovery now that connection is secure */
    if (pAppDiscCfg->waitForSec)
   1b180:	4b09      	ldr	r3, [pc, #36]	; (1b1a8 <appDiscPairCmpl+0xd4>)
   1b182:	681b      	ldr	r3, [r3, #0]
   1b184:	781b      	ldrb	r3, [r3, #0]
   1b186:	2b00      	cmp	r3, #0
   1b188:	d005      	beq.n	1b196 <appDiscPairCmpl+0xc2>
    {
      appDiscStart((dmConnId_t) pMsg->hdr.param);
   1b18a:	687b      	ldr	r3, [r7, #4]
   1b18c:	881b      	ldrh	r3, [r3, #0]
   1b18e:	b2db      	uxtb	r3, r3
   1b190:	4618      	mov	r0, r3
   1b192:	f7ff fecb 	bl	1af2c <appDiscStart>
    }
  }  
    
  pAppDiscCb->alreadySecure = TRUE;
   1b196:	68fb      	ldr	r3, [r7, #12]
   1b198:	2201      	movs	r2, #1
   1b19a:	731a      	strb	r2, [r3, #12]
}
   1b19c:	3710      	adds	r7, #16
   1b19e:	46bd      	mov	sp, r7
   1b1a0:	bd80      	pop	{r7, pc}
   1b1a2:	bf00      	nop
   1b1a4:	10004e18 	.word	0x10004e18
   1b1a8:	1000a244 	.word	0x1000a244

0001b1ac <appDiscEncryptInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appDiscEncryptInd(dmEvt_t *pMsg)
{
   1b1ac:	b580      	push	{r7, lr}
   1b1ae:	b084      	sub	sp, #16
   1b1b0:	af00      	add	r7, sp, #0
   1b1b2:	6078      	str	r0, [r7, #4]
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t) pMsg->hdr.param - 1];
   1b1b4:	687b      	ldr	r3, [r7, #4]
   1b1b6:	881b      	ldrh	r3, [r3, #0]
   1b1b8:	b2db      	uxtb	r3, r3
   1b1ba:	3b01      	subs	r3, #1
   1b1bc:	011b      	lsls	r3, r3, #4
   1b1be:	4a19      	ldr	r2, [pc, #100]	; (1b224 <appDiscEncryptInd+0x78>)
   1b1c0:	4413      	add	r3, r2
   1b1c2:	60fb      	str	r3, [r7, #12]

  /* if encrypted with ltk */
  if (pMsg->encryptInd.usingLtk)
   1b1c4:	687b      	ldr	r3, [r7, #4]
   1b1c6:	791b      	ldrb	r3, [r3, #4]
   1b1c8:	2b00      	cmp	r3, #0
   1b1ca:	d027      	beq.n	1b21c <appDiscEncryptInd+0x70>
  {
    /* procedures triggered by security are only executed once */
    if (pAppDiscCb->alreadySecure)
   1b1cc:	68fb      	ldr	r3, [r7, #12]
   1b1ce:	7b1b      	ldrb	r3, [r3, #12]
   1b1d0:	2b00      	cmp	r3, #0
   1b1d2:	d000      	beq.n	1b1d6 <appDiscEncryptInd+0x2a>
    {
      return;
   1b1d4:	e022      	b.n	1b21c <appDiscEncryptInd+0x70>
    }

    /* if we waiting for security start discovery now that connection is secure */
    if (pAppDiscCfg->waitForSec)
   1b1d6:	4b14      	ldr	r3, [pc, #80]	; (1b228 <appDiscEncryptInd+0x7c>)
   1b1d8:	681b      	ldr	r3, [r3, #0]
   1b1da:	781b      	ldrb	r3, [r3, #0]
   1b1dc:	2b00      	cmp	r3, #0
   1b1de:	d006      	beq.n	1b1ee <appDiscEncryptInd+0x42>
    {
      appDiscStart((dmConnId_t) pMsg->hdr.param);
   1b1e0:	687b      	ldr	r3, [r7, #4]
   1b1e2:	881b      	ldrh	r3, [r3, #0]
   1b1e4:	b2db      	uxtb	r3, r3
   1b1e6:	4618      	mov	r0, r3
   1b1e8:	f7ff fea0 	bl	1af2c <appDiscStart>
   1b1ec:	e013      	b.n	1b216 <appDiscEncryptInd+0x6a>
    }
    /* else if configuration was waiting for security */
    else if (pAppDiscCb->secRequired)
   1b1ee:	68fb      	ldr	r3, [r7, #12]
   1b1f0:	7b5b      	ldrb	r3, [r3, #13]
   1b1f2:	2b00      	cmp	r3, #0
   1b1f4:	d00f      	beq.n	1b216 <appDiscEncryptInd+0x6a>
    {
      pAppDiscCb->secRequired = FALSE;
   1b1f6:	68fb      	ldr	r3, [r7, #12]
   1b1f8:	2200      	movs	r2, #0
   1b1fa:	735a      	strb	r2, [r3, #13]

      /* resume configuration */
      if (pAppDiscCb->pDiscCb != NULL)
   1b1fc:	68fb      	ldr	r3, [r7, #12]
   1b1fe:	681b      	ldr	r3, [r3, #0]
   1b200:	2b00      	cmp	r3, #0
   1b202:	d008      	beq.n	1b216 <appDiscEncryptInd+0x6a>
      {
        AttcDiscConfigResume((dmConnId_t) pMsg->hdr.param, pAppDiscCb->pDiscCb);
   1b204:	687b      	ldr	r3, [r7, #4]
   1b206:	881b      	ldrh	r3, [r3, #0]
   1b208:	b2da      	uxtb	r2, r3
   1b20a:	68fb      	ldr	r3, [r7, #12]
   1b20c:	681b      	ldr	r3, [r3, #0]
   1b20e:	4610      	mov	r0, r2
   1b210:	4619      	mov	r1, r3
   1b212:	f7f1 fb3f 	bl	c894 <AttcDiscConfigResume>
      }
    }
      
    pAppDiscCb->alreadySecure = TRUE;
   1b216:	68fb      	ldr	r3, [r7, #12]
   1b218:	2201      	movs	r2, #1
   1b21a:	731a      	strb	r2, [r3, #12]
  }
}
   1b21c:	3710      	adds	r7, #16
   1b21e:	46bd      	mov	sp, r7
   1b220:	bd80      	pop	{r7, pc}
   1b222:	bf00      	nop
   1b224:	10004e18 	.word	0x10004e18
   1b228:	1000a244 	.word	0x1000a244

0001b22c <AppDiscProcDmMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscProcDmMsg(dmEvt_t *pMsg)
{
   1b22c:	b580      	push	{r7, lr}
   1b22e:	b082      	sub	sp, #8
   1b230:	af00      	add	r7, sp, #0
   1b232:	6078      	str	r0, [r7, #4]
  switch(pMsg->hdr.event)
   1b234:	687b      	ldr	r3, [r7, #4]
   1b236:	789b      	ldrb	r3, [r3, #2]
   1b238:	3b27      	subs	r3, #39	; 0x27
   1b23a:	2b05      	cmp	r3, #5
   1b23c:	d81e      	bhi.n	1b27c <AppDiscProcDmMsg+0x50>
   1b23e:	a201      	add	r2, pc, #4	; (adr r2, 1b244 <AppDiscProcDmMsg+0x18>)
   1b240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1b244:	0001b25d 	.word	0x0001b25d
   1b248:	0001b265 	.word	0x0001b265
   1b24c:	0001b27d 	.word	0x0001b27d
   1b250:	0001b26d 	.word	0x0001b26d
   1b254:	0001b27d 	.word	0x0001b27d
   1b258:	0001b275 	.word	0x0001b275
  {
    case DM_CONN_OPEN_IND:
      appDiscConnOpen(pMsg);
   1b25c:	6878      	ldr	r0, [r7, #4]
   1b25e:	f7ff fec5 	bl	1afec <appDiscConnOpen>
      break;
   1b262:	e00c      	b.n	1b27e <AppDiscProcDmMsg+0x52>

    case DM_CONN_CLOSE_IND:
      appDiscConnClose(pMsg);
   1b264:	6878      	ldr	r0, [r7, #4]
   1b266:	f7ff ff07 	bl	1b078 <appDiscConnClose>
      break;
   1b26a:	e008      	b.n	1b27e <AppDiscProcDmMsg+0x52>

    case DM_SEC_PAIR_CMPL_IND:
      appDiscPairCmpl(pMsg);
   1b26c:	6878      	ldr	r0, [r7, #4]
   1b26e:	f7ff ff31 	bl	1b0d4 <appDiscPairCmpl>
      break;
   1b272:	e004      	b.n	1b27e <AppDiscProcDmMsg+0x52>
      
    case DM_SEC_ENCRYPT_IND:
      appDiscEncryptInd(pMsg);
   1b274:	6878      	ldr	r0, [r7, #4]
   1b276:	f7ff ff99 	bl	1b1ac <appDiscEncryptInd>
      break;
   1b27a:	e000      	b.n	1b27e <AppDiscProcDmMsg+0x52>
      
    default:
      break;
   1b27c:	bf00      	nop
  }
}
   1b27e:	3708      	adds	r7, #8
   1b280:	46bd      	mov	sp, r7
   1b282:	bd80      	pop	{r7, pc}

0001b284 <AppDiscProcAttMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscProcAttMsg(attEvt_t *pMsg)
{
   1b284:	b580      	push	{r7, lr}
   1b286:	b084      	sub	sp, #16
   1b288:	af00      	add	r7, sp, #0
   1b28a:	6078      	str	r0, [r7, #4]
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t) pMsg->hdr.param - 1];
   1b28c:	687b      	ldr	r3, [r7, #4]
   1b28e:	881b      	ldrh	r3, [r3, #0]
   1b290:	b2db      	uxtb	r3, r3
   1b292:	3b01      	subs	r3, #1
   1b294:	011b      	lsls	r3, r3, #4
   1b296:	4a5b      	ldr	r2, [pc, #364]	; (1b404 <AppDiscProcAttMsg+0x180>)
   1b298:	4413      	add	r3, r2
   1b29a:	60fb      	str	r3, [r7, #12]
  uint8_t status;
  
  if (pAppDiscCb->inProgress == APP_DISC_IN_PROGRESS)
   1b29c:	68fb      	ldr	r3, [r7, #12]
   1b29e:	7adb      	ldrb	r3, [r3, #11]
   1b2a0:	2b01      	cmp	r3, #1
   1b2a2:	d157      	bne.n	1b354 <AppDiscProcAttMsg+0xd0>
  {
    /* service discovery */
    if (pMsg->hdr.event == ATTC_FIND_BY_TYPE_VALUE_RSP)
   1b2a4:	687b      	ldr	r3, [r7, #4]
   1b2a6:	789b      	ldrb	r3, [r3, #2]
   1b2a8:	2b03      	cmp	r3, #3
   1b2aa:	d126      	bne.n	1b2fa <AppDiscProcAttMsg+0x76>
    {
      /* continue with service discovery */
      status = AttcDiscServiceCmpl(pAppDiscCb->pDiscCb, pMsg);
   1b2ac:	68fb      	ldr	r3, [r7, #12]
   1b2ae:	681b      	ldr	r3, [r3, #0]
   1b2b0:	4618      	mov	r0, r3
   1b2b2:	6879      	ldr	r1, [r7, #4]
   1b2b4:	f7f1 f9ca 	bl	c64c <AttcDiscServiceCmpl>
   1b2b8:	4603      	mov	r3, r0
   1b2ba:	72fb      	strb	r3, [r7, #11]
      
      APP_TRACE_INFO1("AttcDiscServiceCmpl status 0x%02x", status);
   1b2bc:	7afb      	ldrb	r3, [r7, #11]
   1b2be:	4852      	ldr	r0, [pc, #328]	; (1b408 <AppDiscProcAttMsg+0x184>)
   1b2c0:	4619      	mov	r1, r3
   1b2c2:	f7f9 fc4f 	bl	14b64 <WsfTrace>
      
      /* if discovery complete  and successful */
      if (status == ATT_SUCCESS)
   1b2c6:	7afb      	ldrb	r3, [r7, #11]
   1b2c8:	2b00      	cmp	r3, #0
   1b2ca:	d109      	bne.n	1b2e0 <AppDiscProcAttMsg+0x5c>
      {
        /* proceed with characteristic discovery */
        AttcDiscCharStart((dmConnId_t) pMsg->hdr.param, pAppDiscCb->pDiscCb);
   1b2cc:	687b      	ldr	r3, [r7, #4]
   1b2ce:	881b      	ldrh	r3, [r3, #0]
   1b2d0:	b2da      	uxtb	r2, r3
   1b2d2:	68fb      	ldr	r3, [r7, #12]
   1b2d4:	681b      	ldr	r3, [r3, #0]
   1b2d6:	4610      	mov	r0, r2
   1b2d8:	4619      	mov	r1, r3
   1b2da:	f7f1 f9d0 	bl	c67e <AttcDiscCharStart>
   1b2de:	e08e      	b.n	1b3fe <AppDiscProcAttMsg+0x17a>
      }
      /* else if failed */
      else if (status != ATT_CONTINUING)
   1b2e0:	7afb      	ldrb	r3, [r7, #11]
   1b2e2:	2b78      	cmp	r3, #120	; 0x78
   1b2e4:	f000 808b 	beq.w	1b3fe <AppDiscProcAttMsg+0x17a>
      {
        /* notify application of discovery failure */
        (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_FAILED);
   1b2e8:	4b48      	ldr	r3, [pc, #288]	; (1b40c <AppDiscProcAttMsg+0x188>)
   1b2ea:	681b      	ldr	r3, [r3, #0]
   1b2ec:	687a      	ldr	r2, [r7, #4]
   1b2ee:	8812      	ldrh	r2, [r2, #0]
   1b2f0:	b2d2      	uxtb	r2, r2
   1b2f2:	4610      	mov	r0, r2
   1b2f4:	2104      	movs	r1, #4
   1b2f6:	4798      	blx	r3
   1b2f8:	e081      	b.n	1b3fe <AppDiscProcAttMsg+0x17a>
      }
    }
    /* characteristic discovery */
    else if (pMsg->hdr.event == ATTC_READ_BY_TYPE_RSP ||
   1b2fa:	687b      	ldr	r3, [r7, #4]
   1b2fc:	789b      	ldrb	r3, [r3, #2]
   1b2fe:	2b04      	cmp	r3, #4
   1b300:	d003      	beq.n	1b30a <AppDiscProcAttMsg+0x86>
             pMsg->hdr.event == ATTC_FIND_INFO_RSP)
   1b302:	687b      	ldr	r3, [r7, #4]
   1b304:	789b      	ldrb	r3, [r3, #2]
        /* notify application of discovery failure */
        (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_FAILED);
      }
    }
    /* characteristic discovery */
    else if (pMsg->hdr.event == ATTC_READ_BY_TYPE_RSP ||
   1b306:	2b02      	cmp	r3, #2
   1b308:	d179      	bne.n	1b3fe <AppDiscProcAttMsg+0x17a>
             pMsg->hdr.event == ATTC_FIND_INFO_RSP)
    {
      /* continue with characteristic discovery */
      status = AttcDiscCharCmpl(pAppDiscCb->pDiscCb, pMsg);
   1b30a:	68fb      	ldr	r3, [r7, #12]
   1b30c:	681b      	ldr	r3, [r3, #0]
   1b30e:	4618      	mov	r0, r3
   1b310:	6879      	ldr	r1, [r7, #4]
   1b312:	f7f1 f9c7 	bl	c6a4 <AttcDiscCharCmpl>
   1b316:	4603      	mov	r3, r0
   1b318:	72fb      	strb	r3, [r7, #11]

      APP_TRACE_INFO1("AttcDiscCharCmpl status 0x%02x", status);
   1b31a:	7afb      	ldrb	r3, [r7, #11]
   1b31c:	483c      	ldr	r0, [pc, #240]	; (1b410 <AppDiscProcAttMsg+0x18c>)
   1b31e:	4619      	mov	r1, r3
   1b320:	f7f9 fc20 	bl	14b64 <WsfTrace>

      /* if discovery complete and successful */
      if (status == ATT_SUCCESS)
   1b324:	7afb      	ldrb	r3, [r7, #11]
   1b326:	2b00      	cmp	r3, #0
   1b328:	d108      	bne.n	1b33c <AppDiscProcAttMsg+0xb8>
      {
        /* notify application of discovery success */
        (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_CMPL);
   1b32a:	4b38      	ldr	r3, [pc, #224]	; (1b40c <AppDiscProcAttMsg+0x188>)
   1b32c:	681b      	ldr	r3, [r3, #0]
   1b32e:	687a      	ldr	r2, [r7, #4]
   1b330:	8812      	ldrh	r2, [r2, #0]
   1b332:	b2d2      	uxtb	r2, r2
   1b334:	4610      	mov	r0, r2
   1b336:	2103      	movs	r1, #3
   1b338:	4798      	blx	r3
   1b33a:	e060      	b.n	1b3fe <AppDiscProcAttMsg+0x17a>
      }
      /* else if failed */
      else if (status != ATT_CONTINUING)
   1b33c:	7afb      	ldrb	r3, [r7, #11]
   1b33e:	2b78      	cmp	r3, #120	; 0x78
   1b340:	d05d      	beq.n	1b3fe <AppDiscProcAttMsg+0x17a>
      {
        /* notify application of discovery failure */
        (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_FAILED);
   1b342:	4b32      	ldr	r3, [pc, #200]	; (1b40c <AppDiscProcAttMsg+0x188>)
   1b344:	681b      	ldr	r3, [r3, #0]
   1b346:	687a      	ldr	r2, [r7, #4]
   1b348:	8812      	ldrh	r2, [r2, #0]
   1b34a:	b2d2      	uxtb	r2, r2
   1b34c:	4610      	mov	r0, r2
   1b34e:	2104      	movs	r1, #4
   1b350:	4798      	blx	r3
   1b352:	e054      	b.n	1b3fe <AppDiscProcAttMsg+0x17a>
      }     
    }
  }
  /* characteristic configuration */
  else if ((pAppDiscCb->inProgress == APP_DISC_CFG_IN_PROGRESS) &&
   1b354:	68fb      	ldr	r3, [r7, #12]
   1b356:	7adb      	ldrb	r3, [r3, #11]
   1b358:	2b02      	cmp	r3, #2
   1b35a:	d150      	bne.n	1b3fe <AppDiscProcAttMsg+0x17a>
           (pMsg->hdr.event == ATTC_READ_RSP || pMsg->hdr.event == ATTC_WRITE_RSP))
   1b35c:	687b      	ldr	r3, [r7, #4]
   1b35e:	789b      	ldrb	r3, [r3, #2]
        (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_FAILED);
      }     
    }
  }
  /* characteristic configuration */
  else if ((pAppDiscCb->inProgress == APP_DISC_CFG_IN_PROGRESS) &&
   1b360:	2b05      	cmp	r3, #5
   1b362:	d003      	beq.n	1b36c <AppDiscProcAttMsg+0xe8>
           (pMsg->hdr.event == ATTC_READ_RSP || pMsg->hdr.event == ATTC_WRITE_RSP))
   1b364:	687b      	ldr	r3, [r7, #4]
   1b366:	789b      	ldrb	r3, [r3, #2]
   1b368:	2b09      	cmp	r3, #9
   1b36a:	d148      	bne.n	1b3fe <AppDiscProcAttMsg+0x17a>
  {
    /* if service changed is pending */
    if (pAppDiscCb->scPending)
   1b36c:	68fb      	ldr	r3, [r7, #12]
   1b36e:	7b9b      	ldrb	r3, [r3, #14]
   1b370:	2b00      	cmp	r3, #0
   1b372:	d00c      	beq.n	1b38e <AppDiscProcAttMsg+0x10a>
    {
      /* clear pending flag */
      pAppDiscCb->scPending = FALSE;
   1b374:	68fb      	ldr	r3, [r7, #12]
   1b376:	2200      	movs	r2, #0
   1b378:	739a      	strb	r2, [r3, #14]
      
      /* start discovery */
      pAppDiscCb->inProgress = APP_DISC_IDLE;
   1b37a:	68fb      	ldr	r3, [r7, #12]
   1b37c:	2200      	movs	r2, #0
   1b37e:	72da      	strb	r2, [r3, #11]
      appDiscStart((dmConnId_t) pMsg->hdr.param);
   1b380:	687b      	ldr	r3, [r7, #4]
   1b382:	881b      	ldrh	r3, [r3, #0]
   1b384:	b2db      	uxtb	r3, r3
   1b386:	4618      	mov	r0, r3
   1b388:	f7ff fdd0 	bl	1af2c <appDiscStart>
   1b38c:	e037      	b.n	1b3fe <AppDiscProcAttMsg+0x17a>
    }
    /* else if security failure */
    else if ((pMsg->hdr.status == ATT_ERR_AUTH || pMsg->hdr.status == ATT_ERR_ENC) &&
   1b38e:	687b      	ldr	r3, [r7, #4]
   1b390:	78db      	ldrb	r3, [r3, #3]
   1b392:	2b05      	cmp	r3, #5
   1b394:	d003      	beq.n	1b39e <AppDiscProcAttMsg+0x11a>
   1b396:	687b      	ldr	r3, [r7, #4]
   1b398:	78db      	ldrb	r3, [r3, #3]
   1b39a:	2b0f      	cmp	r3, #15
   1b39c:	d114      	bne.n	1b3c8 <AppDiscProcAttMsg+0x144>
             (DmConnSecLevel((dmConnId_t) pMsg->hdr.param) == DM_SEC_LEVEL_NONE))
   1b39e:	687b      	ldr	r3, [r7, #4]
   1b3a0:	881b      	ldrh	r3, [r3, #0]
   1b3a2:	b2db      	uxtb	r3, r3
   1b3a4:	4618      	mov	r0, r3
   1b3a6:	f7f4 fadb 	bl	f960 <DmConnSecLevel>
   1b3aa:	4603      	mov	r3, r0
      /* start discovery */
      pAppDiscCb->inProgress = APP_DISC_IDLE;
      appDiscStart((dmConnId_t) pMsg->hdr.param);
    }
    /* else if security failure */
    else if ((pMsg->hdr.status == ATT_ERR_AUTH || pMsg->hdr.status == ATT_ERR_ENC) &&
   1b3ac:	2b00      	cmp	r3, #0
   1b3ae:	d10b      	bne.n	1b3c8 <AppDiscProcAttMsg+0x144>
             (DmConnSecLevel((dmConnId_t) pMsg->hdr.param) == DM_SEC_LEVEL_NONE))
    {
      /* tell application to request security */
      pAppDiscCb->secRequired = TRUE;
   1b3b0:	68fb      	ldr	r3, [r7, #12]
   1b3b2:	2201      	movs	r2, #1
   1b3b4:	735a      	strb	r2, [r3, #13]
      (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_SEC_REQUIRED);
   1b3b6:	4b15      	ldr	r3, [pc, #84]	; (1b40c <AppDiscProcAttMsg+0x188>)
   1b3b8:	681b      	ldr	r3, [r3, #0]
   1b3ba:	687a      	ldr	r2, [r7, #4]
   1b3bc:	8812      	ldrh	r2, [r2, #0]
   1b3be:	b2d2      	uxtb	r2, r2
   1b3c0:	4610      	mov	r0, r2
   1b3c2:	2101      	movs	r1, #1
   1b3c4:	4798      	blx	r3
   1b3c6:	e01a      	b.n	1b3fe <AppDiscProcAttMsg+0x17a>
    }
    else
    {
      status = AttcDiscConfigCmpl((dmConnId_t) pMsg->hdr.param, pAppDiscCb->pDiscCb);
   1b3c8:	687b      	ldr	r3, [r7, #4]
   1b3ca:	881b      	ldrh	r3, [r3, #0]
   1b3cc:	b2da      	uxtb	r2, r3
   1b3ce:	68fb      	ldr	r3, [r7, #12]
   1b3d0:	681b      	ldr	r3, [r3, #0]
   1b3d2:	4610      	mov	r0, r2
   1b3d4:	4619      	mov	r1, r3
   1b3d6:	f7f1 fa59 	bl	c88c <AttcDiscConfigCmpl>
   1b3da:	4603      	mov	r3, r0
   1b3dc:	72fb      	strb	r3, [r7, #11]
      
      APP_TRACE_INFO1("AttcDiscConfigCmpl status 0x%02x", status);
   1b3de:	7afb      	ldrb	r3, [r7, #11]
   1b3e0:	480c      	ldr	r0, [pc, #48]	; (1b414 <AppDiscProcAttMsg+0x190>)
   1b3e2:	4619      	mov	r1, r3
   1b3e4:	f7f9 fbbe 	bl	14b64 <WsfTrace>
      
      /* if configuration complete */
      if (status != ATT_CONTINUING)
   1b3e8:	7afb      	ldrb	r3, [r7, #11]
   1b3ea:	2b78      	cmp	r3, #120	; 0x78
   1b3ec:	d007      	beq.n	1b3fe <AppDiscProcAttMsg+0x17a>
      {
        /* notify application of config success */
        (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_CFG_CMPL);
   1b3ee:	4b07      	ldr	r3, [pc, #28]	; (1b40c <AppDiscProcAttMsg+0x188>)
   1b3f0:	681b      	ldr	r3, [r3, #0]
   1b3f2:	687a      	ldr	r2, [r7, #4]
   1b3f4:	8812      	ldrh	r2, [r2, #0]
   1b3f6:	b2d2      	uxtb	r2, r2
   1b3f8:	4610      	mov	r0, r2
   1b3fa:	2107      	movs	r1, #7
   1b3fc:	4798      	blx	r3
      }
    }
  }
}
   1b3fe:	3710      	adds	r7, #16
   1b400:	46bd      	mov	sp, r7
   1b402:	bd80      	pop	{r7, pc}
   1b404:	10004e18 	.word	0x10004e18
   1b408:	00024418 	.word	0x00024418
   1b40c:	10004e98 	.word	0x10004e98
   1b410:	0002443c 	.word	0x0002443c
   1b414:	0002445c 	.word	0x0002445c

0001b418 <AppDiscInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscInit(void)
{
   1b418:	b480      	push	{r7}
   1b41a:	b083      	sub	sp, #12
   1b41c:	af00      	add	r7, sp, #0
  uint8_t i;

  for (i=0; i<DM_CONN_MAX; i++)
   1b41e:	2300      	movs	r3, #0
   1b420:	71fb      	strb	r3, [r7, #7]
   1b422:	e00f      	b.n	1b444 <AppDiscInit+0x2c>
  {
    appDiscCb[i].inProgress = APP_DISC_IDLE;
   1b424:	79fb      	ldrb	r3, [r7, #7]
   1b426:	4a0b      	ldr	r2, [pc, #44]	; (1b454 <AppDiscInit+0x3c>)
   1b428:	011b      	lsls	r3, r3, #4
   1b42a:	4413      	add	r3, r2
   1b42c:	3308      	adds	r3, #8
   1b42e:	2200      	movs	r2, #0
   1b430:	70da      	strb	r2, [r3, #3]
    appDiscCb[i].pDiscCb = NULL;
   1b432:	79fb      	ldrb	r3, [r7, #7]
   1b434:	4a07      	ldr	r2, [pc, #28]	; (1b454 <AppDiscInit+0x3c>)
   1b436:	011b      	lsls	r3, r3, #4
   1b438:	4413      	add	r3, r2
   1b43a:	2200      	movs	r2, #0
   1b43c:	601a      	str	r2, [r3, #0]
/*************************************************************************************************/
void AppDiscInit(void)
{
  uint8_t i;

  for (i=0; i<DM_CONN_MAX; i++)
   1b43e:	79fb      	ldrb	r3, [r7, #7]
   1b440:	3301      	adds	r3, #1
   1b442:	71fb      	strb	r3, [r7, #7]
   1b444:	79fb      	ldrb	r3, [r7, #7]
   1b446:	2b07      	cmp	r3, #7
   1b448:	d9ec      	bls.n	1b424 <AppDiscInit+0xc>
  {
    appDiscCb[i].inProgress = APP_DISC_IDLE;
    appDiscCb[i].pDiscCb = NULL;
  }
}
   1b44a:	370c      	adds	r7, #12
   1b44c:	46bd      	mov	sp, r7
   1b44e:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b452:	4770      	bx	lr
   1b454:	10004e18 	.word	0x10004e18

0001b458 <AppDiscRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscRegister(appDiscCback_t cback)
{
   1b458:	b480      	push	{r7}
   1b45a:	b083      	sub	sp, #12
   1b45c:	af00      	add	r7, sp, #0
   1b45e:	6078      	str	r0, [r7, #4]
  appDiscCback = cback;
   1b460:	4a03      	ldr	r2, [pc, #12]	; (1b470 <AppDiscRegister+0x18>)
   1b462:	687b      	ldr	r3, [r7, #4]
   1b464:	6013      	str	r3, [r2, #0]
}
   1b466:	370c      	adds	r7, #12
   1b468:	46bd      	mov	sp, r7
   1b46a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b46e:	4770      	bx	lr
   1b470:	10004e98 	.word	0x10004e98

0001b474 <AppDiscSetHdlList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscSetHdlList(dmConnId_t connId, uint8_t hdlListLen, uint16_t *pHdlList)
{
   1b474:	b480      	push	{r7}
   1b476:	b085      	sub	sp, #20
   1b478:	af00      	add	r7, sp, #0
   1b47a:	4603      	mov	r3, r0
   1b47c:	603a      	str	r2, [r7, #0]
   1b47e:	71fb      	strb	r3, [r7, #7]
   1b480:	460b      	mov	r3, r1
   1b482:	71bb      	strb	r3, [r7, #6]
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];
   1b484:	79fb      	ldrb	r3, [r7, #7]
   1b486:	3b01      	subs	r3, #1
   1b488:	011b      	lsls	r3, r3, #4
   1b48a:	4a07      	ldr	r2, [pc, #28]	; (1b4a8 <AppDiscSetHdlList+0x34>)
   1b48c:	4413      	add	r3, r2
   1b48e:	60fb      	str	r3, [r7, #12]

  pAppDiscCb->hdlListLen = hdlListLen;
   1b490:	68fb      	ldr	r3, [r7, #12]
   1b492:	79ba      	ldrb	r2, [r7, #6]
   1b494:	729a      	strb	r2, [r3, #10]
  pAppDiscCb->pHdlList = pHdlList;
   1b496:	68fb      	ldr	r3, [r7, #12]
   1b498:	683a      	ldr	r2, [r7, #0]
   1b49a:	605a      	str	r2, [r3, #4]
}
   1b49c:	3714      	adds	r7, #20
   1b49e:	46bd      	mov	sp, r7
   1b4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b4a4:	4770      	bx	lr
   1b4a6:	bf00      	nop
   1b4a8:	10004e18 	.word	0x10004e18

0001b4ac <AppDiscComplete>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscComplete(dmConnId_t connId, uint8_t status)
{
   1b4ac:	b580      	push	{r7, lr}
   1b4ae:	b084      	sub	sp, #16
   1b4b0:	af00      	add	r7, sp, #0
   1b4b2:	4603      	mov	r3, r0
   1b4b4:	460a      	mov	r2, r1
   1b4b6:	71fb      	strb	r3, [r7, #7]
   1b4b8:	4613      	mov	r3, r2
   1b4ba:	71bb      	strb	r3, [r7, #6]
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];
   1b4bc:	79fb      	ldrb	r3, [r7, #7]
   1b4be:	3b01      	subs	r3, #1
   1b4c0:	011b      	lsls	r3, r3, #4
   1b4c2:	4a29      	ldr	r2, [pc, #164]	; (1b568 <AppDiscComplete+0xbc>)
   1b4c4:	4413      	add	r3, r2
   1b4c6:	60fb      	str	r3, [r7, #12]
  appDbHdl_t hdl;

  /* set connection as idle */
  DmConnSetIdle(connId, DM_IDLE_APP_DISC, DM_CONN_IDLE);
   1b4c8:	79fb      	ldrb	r3, [r7, #7]
   1b4ca:	4618      	mov	r0, r3
   1b4cc:	2108      	movs	r1, #8
   1b4ce:	2200      	movs	r2, #0
   1b4d0:	f7f4 fa50 	bl	f974 <DmConnSetIdle>

  /* store status if not doing connection setup configuration */
  if (!(status == APP_DISC_CFG_CMPL && pAppDiscCb->connCfgStatus == APP_DISC_CFG_CONN_START))
   1b4d4:	79bb      	ldrb	r3, [r7, #6]
   1b4d6:	2b07      	cmp	r3, #7
   1b4d8:	d103      	bne.n	1b4e2 <AppDiscComplete+0x36>
   1b4da:	68fb      	ldr	r3, [r7, #12]
   1b4dc:	7a1b      	ldrb	r3, [r3, #8]
   1b4de:	2b06      	cmp	r3, #6
   1b4e0:	d002      	beq.n	1b4e8 <AppDiscComplete+0x3c>
  {
    pAppDiscCb->cmplStatus = status;
   1b4e2:	68fb      	ldr	r3, [r7, #12]
   1b4e4:	79ba      	ldrb	r2, [r7, #6]
   1b4e6:	725a      	strb	r2, [r3, #9]
  }
  
  /* initialize control block */
  pAppDiscCb->inProgress = APP_DISC_IDLE;
   1b4e8:	68fb      	ldr	r3, [r7, #12]
   1b4ea:	2200      	movs	r2, #0
   1b4ec:	72da      	strb	r2, [r3, #11]
  if (pAppDiscCb->pDiscCb != NULL)
   1b4ee:	68fb      	ldr	r3, [r7, #12]
   1b4f0:	681b      	ldr	r3, [r3, #0]
   1b4f2:	2b00      	cmp	r3, #0
   1b4f4:	d007      	beq.n	1b506 <AppDiscComplete+0x5a>
  {
    WsfBufFree(pAppDiscCb->pDiscCb);
   1b4f6:	68fb      	ldr	r3, [r7, #12]
   1b4f8:	681b      	ldr	r3, [r3, #0]
   1b4fa:	4618      	mov	r0, r3
   1b4fc:	f7fd fdce 	bl	1909c <WsfBufFree>
    pAppDiscCb->pDiscCb = NULL;
   1b500:	68fb      	ldr	r3, [r7, #12]
   1b502:	2200      	movs	r2, #0
   1b504:	601a      	str	r2, [r3, #0]
  }
  
  if ((hdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   1b506:	79fb      	ldrb	r3, [r7, #7]
   1b508:	4618      	mov	r0, r3
   1b50a:	f000 fa8f 	bl	1ba2c <AppDbGetHdl>
   1b50e:	60b8      	str	r0, [r7, #8]
   1b510:	68bb      	ldr	r3, [r7, #8]
   1b512:	2b00      	cmp	r3, #0
   1b514:	d018      	beq.n	1b548 <AppDiscComplete+0x9c>
  {
    /* store discovery status if not doing connection setup configuration */
    if (!(status == APP_DISC_CFG_CMPL && pAppDiscCb->connCfgStatus == APP_DISC_CFG_CONN_START))
   1b516:	79bb      	ldrb	r3, [r7, #6]
   1b518:	2b07      	cmp	r3, #7
   1b51a:	d103      	bne.n	1b524 <AppDiscComplete+0x78>
   1b51c:	68fb      	ldr	r3, [r7, #12]
   1b51e:	7a1b      	ldrb	r3, [r3, #8]
   1b520:	2b06      	cmp	r3, #6
   1b522:	d004      	beq.n	1b52e <AppDiscComplete+0x82>
    {
      AppDbSetDiscStatus(hdl, status);
   1b524:	79bb      	ldrb	r3, [r7, #6]
   1b526:	68b8      	ldr	r0, [r7, #8]
   1b528:	4619      	mov	r1, r3
   1b52a:	f7fe fae7 	bl	19afc <AppDbSetDiscStatus>
    }

    if (pAppDiscCb->pHdlList != NULL)
   1b52e:	68fb      	ldr	r3, [r7, #12]
   1b530:	685b      	ldr	r3, [r3, #4]
   1b532:	2b00      	cmp	r3, #0
   1b534:	d008      	beq.n	1b548 <AppDiscComplete+0x9c>
    {
      /* if discovery complete store handles */
      if (status == APP_DISC_CMPL)
   1b536:	79bb      	ldrb	r3, [r7, #6]
   1b538:	2b03      	cmp	r3, #3
   1b53a:	d105      	bne.n	1b548 <AppDiscComplete+0x9c>
      {
        AppDbSetHdlList(hdl, pAppDiscCb->pHdlList);
   1b53c:	68fb      	ldr	r3, [r7, #12]
   1b53e:	685b      	ldr	r3, [r3, #4]
   1b540:	68b8      	ldr	r0, [r7, #8]
   1b542:	4619      	mov	r1, r3
   1b544:	f7fe faf6 	bl	19b34 <AppDbSetHdlList>
  }
  
  /* set connection setup configuration status as complete if either discovery-initiated
   * configuration is complete or connection setup configuration is complete
   */
  if (status == APP_DISC_CFG_CMPL)
   1b548:	79bb      	ldrb	r3, [r7, #6]
   1b54a:	2b07      	cmp	r3, #7
   1b54c:	d102      	bne.n	1b554 <AppDiscComplete+0xa8>
  {
    pAppDiscCb->connCfgStatus = APP_DISC_CFG_CMPL;
   1b54e:	68fb      	ldr	r3, [r7, #12]
   1b550:	2207      	movs	r2, #7
   1b552:	721a      	strb	r2, [r3, #8]
  }
  
  APP_TRACE_INFO2("AppDiscComplete connId:%d status:0x%02x", connId, status);
   1b554:	79fa      	ldrb	r2, [r7, #7]
   1b556:	79bb      	ldrb	r3, [r7, #6]
   1b558:	4804      	ldr	r0, [pc, #16]	; (1b56c <AppDiscComplete+0xc0>)
   1b55a:	4611      	mov	r1, r2
   1b55c:	461a      	mov	r2, r3
   1b55e:	f7f9 fb01 	bl	14b64 <WsfTrace>
}
   1b562:	3710      	adds	r7, #16
   1b564:	46bd      	mov	sp, r7
   1b566:	bd80      	pop	{r7, pc}
   1b568:	10004e18 	.word	0x10004e18
   1b56c:	00024480 	.word	0x00024480

0001b570 <AppDiscFindService>:
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscFindService(dmConnId_t connId, uint8_t uuidLen, uint8_t *pUuid, uint8_t listLen,
                        attcDiscChar_t **pCharList, uint16_t *pHdlList)
{
   1b570:	b580      	push	{r7, lr}
   1b572:	b084      	sub	sp, #16
   1b574:	af00      	add	r7, sp, #0
   1b576:	603a      	str	r2, [r7, #0]
   1b578:	461a      	mov	r2, r3
   1b57a:	4603      	mov	r3, r0
   1b57c:	71fb      	strb	r3, [r7, #7]
   1b57e:	460b      	mov	r3, r1
   1b580:	71bb      	strb	r3, [r7, #6]
   1b582:	4613      	mov	r3, r2
   1b584:	717b      	strb	r3, [r7, #5]
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];
   1b586:	79fb      	ldrb	r3, [r7, #7]
   1b588:	3b01      	subs	r3, #1
   1b58a:	011b      	lsls	r3, r3, #4
   1b58c:	4a19      	ldr	r2, [pc, #100]	; (1b5f4 <AppDiscFindService+0x84>)
   1b58e:	4413      	add	r3, r2
   1b590:	60fb      	str	r3, [r7, #12]

  if (pAppDiscCb->pDiscCb == NULL)
   1b592:	68fb      	ldr	r3, [r7, #12]
   1b594:	681b      	ldr	r3, [r3, #0]
   1b596:	2b00      	cmp	r3, #0
   1b598:	d105      	bne.n	1b5a6 <AppDiscFindService+0x36>
  {
    pAppDiscCb->pDiscCb = WsfBufAlloc(sizeof(attcDiscCb_t));
   1b59a:	2014      	movs	r0, #20
   1b59c:	f7fd fd3e 	bl	1901c <WsfBufAlloc>
   1b5a0:	4602      	mov	r2, r0
   1b5a2:	68fb      	ldr	r3, [r7, #12]
   1b5a4:	601a      	str	r2, [r3, #0]
  }
  
  if (pAppDiscCb->pDiscCb != NULL)
   1b5a6:	68fb      	ldr	r3, [r7, #12]
   1b5a8:	681b      	ldr	r3, [r3, #0]
   1b5aa:	2b00      	cmp	r3, #0
   1b5ac:	d01e      	beq.n	1b5ec <AppDiscFindService+0x7c>
  {
    /* set connection as busy */
    DmConnSetIdle(connId, DM_IDLE_APP_DISC, DM_CONN_BUSY);
   1b5ae:	79fb      	ldrb	r3, [r7, #7]
   1b5b0:	4618      	mov	r0, r3
   1b5b2:	2108      	movs	r1, #8
   1b5b4:	2201      	movs	r2, #1
   1b5b6:	f7f4 f9dd 	bl	f974 <DmConnSetIdle>
    
    pAppDiscCb->inProgress = APP_DISC_IN_PROGRESS;
   1b5ba:	68fb      	ldr	r3, [r7, #12]
   1b5bc:	2201      	movs	r2, #1
   1b5be:	72da      	strb	r2, [r3, #11]
 
    pAppDiscCb->pDiscCb->pCharList = pCharList;
   1b5c0:	68fb      	ldr	r3, [r7, #12]
   1b5c2:	681b      	ldr	r3, [r3, #0]
   1b5c4:	69ba      	ldr	r2, [r7, #24]
   1b5c6:	601a      	str	r2, [r3, #0]
    pAppDiscCb->pDiscCb->pHdlList = pHdlList;  
   1b5c8:	68fb      	ldr	r3, [r7, #12]
   1b5ca:	681b      	ldr	r3, [r3, #0]
   1b5cc:	69fa      	ldr	r2, [r7, #28]
   1b5ce:	605a      	str	r2, [r3, #4]
    pAppDiscCb->pDiscCb->charListLen = listLen;
   1b5d0:	68fb      	ldr	r3, [r7, #12]
   1b5d2:	681b      	ldr	r3, [r3, #0]
   1b5d4:	797a      	ldrb	r2, [r7, #5]
   1b5d6:	731a      	strb	r2, [r3, #12]
    AttcDiscService(connId, pAppDiscCb->pDiscCb, uuidLen, pUuid);
   1b5d8:	68fb      	ldr	r3, [r7, #12]
   1b5da:	681a      	ldr	r2, [r3, #0]
   1b5dc:	79f9      	ldrb	r1, [r7, #7]
   1b5de:	79bb      	ldrb	r3, [r7, #6]
   1b5e0:	4608      	mov	r0, r1
   1b5e2:	4611      	mov	r1, r2
   1b5e4:	461a      	mov	r2, r3
   1b5e6:	683b      	ldr	r3, [r7, #0]
   1b5e8:	f7f1 f821 	bl	c62e <AttcDiscService>
  }
}
   1b5ec:	3710      	adds	r7, #16
   1b5ee:	46bd      	mov	sp, r7
   1b5f0:	bd80      	pop	{r7, pc}
   1b5f2:	bf00      	nop
   1b5f4:	10004e18 	.word	0x10004e18

0001b5f8 <AppDiscConfigure>:
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscConfigure(dmConnId_t connId, uint8_t status, uint8_t cfgListLen,
                      attcDiscCfg_t *pCfgList, uint8_t hdlListLen, uint16_t *pHdlList)
{
   1b5f8:	b580      	push	{r7, lr}
   1b5fa:	b084      	sub	sp, #16
   1b5fc:	af00      	add	r7, sp, #0
   1b5fe:	603b      	str	r3, [r7, #0]
   1b600:	4603      	mov	r3, r0
   1b602:	71fb      	strb	r3, [r7, #7]
   1b604:	460b      	mov	r3, r1
   1b606:	71bb      	strb	r3, [r7, #6]
   1b608:	4613      	mov	r3, r2
   1b60a:	717b      	strb	r3, [r7, #5]
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];
   1b60c:	79fb      	ldrb	r3, [r7, #7]
   1b60e:	3b01      	subs	r3, #1
   1b610:	011b      	lsls	r3, r3, #4
   1b612:	4a22      	ldr	r2, [pc, #136]	; (1b69c <AppDiscConfigure+0xa4>)
   1b614:	4413      	add	r3, r2
   1b616:	60fb      	str	r3, [r7, #12]
  uint8_t ret;
  
  if (pAppDiscCb->pDiscCb == NULL)
   1b618:	68fb      	ldr	r3, [r7, #12]
   1b61a:	681b      	ldr	r3, [r3, #0]
   1b61c:	2b00      	cmp	r3, #0
   1b61e:	d105      	bne.n	1b62c <AppDiscConfigure+0x34>
  {
    pAppDiscCb->pDiscCb = WsfBufAlloc(sizeof(attcDiscCb_t));
   1b620:	2014      	movs	r0, #20
   1b622:	f7fd fcfb 	bl	1901c <WsfBufAlloc>
   1b626:	4602      	mov	r2, r0
   1b628:	68fb      	ldr	r3, [r7, #12]
   1b62a:	601a      	str	r2, [r3, #0]
  }
  
  if (pAppDiscCb->pDiscCb != NULL)
   1b62c:	68fb      	ldr	r3, [r7, #12]
   1b62e:	681b      	ldr	r3, [r3, #0]
   1b630:	2b00      	cmp	r3, #0
   1b632:	d030      	beq.n	1b696 <AppDiscConfigure+0x9e>
  {
    /* set connection as busy */
    DmConnSetIdle(connId, DM_IDLE_APP_DISC, DM_CONN_BUSY);
   1b634:	79fb      	ldrb	r3, [r7, #7]
   1b636:	4618      	mov	r0, r3
   1b638:	2108      	movs	r1, #8
   1b63a:	2201      	movs	r2, #1
   1b63c:	f7f4 f99a 	bl	f974 <DmConnSetIdle>
    
    pAppDiscCb->inProgress = APP_DISC_CFG_IN_PROGRESS;
   1b640:	68fb      	ldr	r3, [r7, #12]
   1b642:	2202      	movs	r2, #2
   1b644:	72da      	strb	r2, [r3, #11]
 
    if (status == APP_DISC_CFG_CONN_START)
   1b646:	79bb      	ldrb	r3, [r7, #6]
   1b648:	2b06      	cmp	r3, #6
   1b64a:	d102      	bne.n	1b652 <AppDiscConfigure+0x5a>
    {
      pAppDiscCb->connCfgStatus = APP_DISC_CFG_CONN_START;
   1b64c:	68fb      	ldr	r3, [r7, #12]
   1b64e:	2206      	movs	r2, #6
   1b650:	721a      	strb	r2, [r3, #8]
    }

    /* start configuration */
    pAppDiscCb->pDiscCb->pCfgList = pCfgList;
   1b652:	68fb      	ldr	r3, [r7, #12]
   1b654:	681b      	ldr	r3, [r3, #0]
   1b656:	683a      	ldr	r2, [r7, #0]
   1b658:	609a      	str	r2, [r3, #8]
    pAppDiscCb->pDiscCb->cfgListLen = cfgListLen;
   1b65a:	68fb      	ldr	r3, [r7, #12]
   1b65c:	681b      	ldr	r3, [r3, #0]
   1b65e:	797a      	ldrb	r2, [r7, #5]
   1b660:	735a      	strb	r2, [r3, #13]
    pAppDiscCb->pDiscCb->pHdlList = pHdlList;  
   1b662:	68fb      	ldr	r3, [r7, #12]
   1b664:	681b      	ldr	r3, [r3, #0]
   1b666:	69fa      	ldr	r2, [r7, #28]
   1b668:	605a      	str	r2, [r3, #4]
    pAppDiscCb->pDiscCb->charListLen = hdlListLen;
   1b66a:	68fb      	ldr	r3, [r7, #12]
   1b66c:	681b      	ldr	r3, [r3, #0]
   1b66e:	7e3a      	ldrb	r2, [r7, #24]
   1b670:	731a      	strb	r2, [r3, #12]
    ret = AttcDiscConfigStart(connId, pAppDiscCb->pDiscCb);
   1b672:	68fb      	ldr	r3, [r7, #12]
   1b674:	681b      	ldr	r3, [r3, #0]
   1b676:	79fa      	ldrb	r2, [r7, #7]
   1b678:	4610      	mov	r0, r2
   1b67a:	4619      	mov	r1, r3
   1b67c:	f7f1 f903 	bl	c886 <AttcDiscConfigStart>
   1b680:	4603      	mov	r3, r0
   1b682:	72fb      	strb	r3, [r7, #11]
    
    /* nothing to configure; configuration complete */
    if (ret == ATT_SUCCESS)
   1b684:	7afb      	ldrb	r3, [r7, #11]
   1b686:	2b00      	cmp	r3, #0
   1b688:	d105      	bne.n	1b696 <AppDiscConfigure+0x9e>
    {
      (*appDiscCback)(connId, APP_DISC_CFG_CMPL);
   1b68a:	4b05      	ldr	r3, [pc, #20]	; (1b6a0 <AppDiscConfigure+0xa8>)
   1b68c:	681b      	ldr	r3, [r3, #0]
   1b68e:	79fa      	ldrb	r2, [r7, #7]
   1b690:	4610      	mov	r0, r2
   1b692:	2107      	movs	r1, #7
   1b694:	4798      	blx	r3
    }    
  }
}
   1b696:	3710      	adds	r7, #16
   1b698:	46bd      	mov	sp, r7
   1b69a:	bd80      	pop	{r7, pc}
   1b69c:	10004e18 	.word	0x10004e18
   1b6a0:	10004e98 	.word	0x10004e98

0001b6a4 <AppDiscServiceChanged>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscServiceChanged(attEvt_t *pMsg)
{
   1b6a4:	b580      	push	{r7, lr}
   1b6a6:	b088      	sub	sp, #32
   1b6a8:	af00      	add	r7, sp, #0
   1b6aa:	6078      	str	r0, [r7, #4]
  appDiscCb_t *pAppDiscCb = &appDiscCb[pMsg->hdr.param - 1];
   1b6ac:	687b      	ldr	r3, [r7, #4]
   1b6ae:	881b      	ldrh	r3, [r3, #0]
   1b6b0:	3b01      	subs	r3, #1
   1b6b2:	011b      	lsls	r3, r3, #4
   1b6b4:	4a51      	ldr	r2, [pc, #324]	; (1b7fc <AppDiscServiceChanged+0x158>)
   1b6b6:	4413      	add	r3, r2
   1b6b8:	617b      	str	r3, [r7, #20]
  uint8_t     i;
  bool_t      foundHdl;
  appDbHdl_t  dbHdl;
  
  /* verify characteristic length */
  if (pMsg->valueLen != CH_SC_LEN)
   1b6ba:	687b      	ldr	r3, [r7, #4]
   1b6bc:	891b      	ldrh	r3, [r3, #8]
   1b6be:	2b04      	cmp	r3, #4
   1b6c0:	d000      	beq.n	1b6c4 <AppDiscServiceChanged+0x20>
  {
    return;
   1b6c2:	e097      	b.n	1b7f4 <AppDiscServiceChanged+0x150>
  }
  
  /* parse and verify handles */
  p = pMsg->pValue;
   1b6c4:	687b      	ldr	r3, [r7, #4]
   1b6c6:	685b      	ldr	r3, [r3, #4]
   1b6c8:	613b      	str	r3, [r7, #16]
  BSTREAM_TO_UINT16(startHdl, p);
   1b6ca:	693b      	ldr	r3, [r7, #16]
   1b6cc:	781b      	ldrb	r3, [r3, #0]
   1b6ce:	b29a      	uxth	r2, r3
   1b6d0:	693b      	ldr	r3, [r7, #16]
   1b6d2:	3301      	adds	r3, #1
   1b6d4:	781b      	ldrb	r3, [r3, #0]
   1b6d6:	b29b      	uxth	r3, r3
   1b6d8:	021b      	lsls	r3, r3, #8
   1b6da:	b29b      	uxth	r3, r3
   1b6dc:	4413      	add	r3, r2
   1b6de:	81fb      	strh	r3, [r7, #14]
   1b6e0:	693b      	ldr	r3, [r7, #16]
   1b6e2:	3302      	adds	r3, #2
   1b6e4:	613b      	str	r3, [r7, #16]
  BSTREAM_TO_UINT16(endHdl, p);
   1b6e6:	693b      	ldr	r3, [r7, #16]
   1b6e8:	781b      	ldrb	r3, [r3, #0]
   1b6ea:	b29a      	uxth	r2, r3
   1b6ec:	693b      	ldr	r3, [r7, #16]
   1b6ee:	3301      	adds	r3, #1
   1b6f0:	781b      	ldrb	r3, [r3, #0]
   1b6f2:	b29b      	uxth	r3, r3
   1b6f4:	021b      	lsls	r3, r3, #8
   1b6f6:	b29b      	uxth	r3, r3
   1b6f8:	4413      	add	r3, r2
   1b6fa:	81bb      	strh	r3, [r7, #12]
   1b6fc:	693b      	ldr	r3, [r7, #16]
   1b6fe:	3302      	adds	r3, #2
   1b700:	613b      	str	r3, [r7, #16]
  if (startHdl == 0 || endHdl < startHdl)
   1b702:	89fb      	ldrh	r3, [r7, #14]
   1b704:	2b00      	cmp	r3, #0
   1b706:	d003      	beq.n	1b710 <AppDiscServiceChanged+0x6c>
   1b708:	89ba      	ldrh	r2, [r7, #12]
   1b70a:	89fb      	ldrh	r3, [r7, #14]
   1b70c:	429a      	cmp	r2, r3
   1b70e:	d200      	bcs.n	1b712 <AppDiscServiceChanged+0x6e>
  {
    return;
   1b710:	e070      	b.n	1b7f4 <AppDiscServiceChanged+0x150>
  }
  
  /* if we don't have any stored handles within service changed handle range, ignore */
  foundHdl = FALSE;
   1b712:	2300      	movs	r3, #0
   1b714:	76bb      	strb	r3, [r7, #26]
  if (pAppDiscCb->pHdlList != NULL)
   1b716:	697b      	ldr	r3, [r7, #20]
   1b718:	685b      	ldr	r3, [r3, #4]
   1b71a:	2b00      	cmp	r3, #0
   1b71c:	d01c      	beq.n	1b758 <AppDiscServiceChanged+0xb4>
  {
    pHdl = pAppDiscCb->pHdlList;
   1b71e:	697b      	ldr	r3, [r7, #20]
   1b720:	685b      	ldr	r3, [r3, #4]
   1b722:	61fb      	str	r3, [r7, #28]
    for (i = pAppDiscCb->hdlListLen; i > 0; i--, pHdl++)
   1b724:	697b      	ldr	r3, [r7, #20]
   1b726:	7a9b      	ldrb	r3, [r3, #10]
   1b728:	76fb      	strb	r3, [r7, #27]
   1b72a:	e012      	b.n	1b752 <AppDiscServiceChanged+0xae>
    {
      if (*pHdl >= startHdl && *pHdl <= endHdl)
   1b72c:	69fb      	ldr	r3, [r7, #28]
   1b72e:	881b      	ldrh	r3, [r3, #0]
   1b730:	89fa      	ldrh	r2, [r7, #14]
   1b732:	429a      	cmp	r2, r3
   1b734:	d807      	bhi.n	1b746 <AppDiscServiceChanged+0xa2>
   1b736:	69fb      	ldr	r3, [r7, #28]
   1b738:	881b      	ldrh	r3, [r3, #0]
   1b73a:	89ba      	ldrh	r2, [r7, #12]
   1b73c:	429a      	cmp	r2, r3
   1b73e:	d302      	bcc.n	1b746 <AppDiscServiceChanged+0xa2>
      {
        foundHdl = TRUE;
   1b740:	2301      	movs	r3, #1
   1b742:	76bb      	strb	r3, [r7, #26]
        break;
   1b744:	e008      	b.n	1b758 <AppDiscServiceChanged+0xb4>
  /* if we don't have any stored handles within service changed handle range, ignore */
  foundHdl = FALSE;
  if (pAppDiscCb->pHdlList != NULL)
  {
    pHdl = pAppDiscCb->pHdlList;
    for (i = pAppDiscCb->hdlListLen; i > 0; i--, pHdl++)
   1b746:	7efb      	ldrb	r3, [r7, #27]
   1b748:	3b01      	subs	r3, #1
   1b74a:	76fb      	strb	r3, [r7, #27]
   1b74c:	69fb      	ldr	r3, [r7, #28]
   1b74e:	3302      	adds	r3, #2
   1b750:	61fb      	str	r3, [r7, #28]
   1b752:	7efb      	ldrb	r3, [r7, #27]
   1b754:	2b00      	cmp	r3, #0
   1b756:	d1e9      	bne.n	1b72c <AppDiscServiceChanged+0x88>
        foundHdl = TRUE;
        break;
      }
    }
  }
  if (foundHdl == FALSE)
   1b758:	7ebb      	ldrb	r3, [r7, #26]
   1b75a:	2b00      	cmp	r3, #0
   1b75c:	d100      	bne.n	1b760 <AppDiscServiceChanged+0xbc>
  {
    return;
   1b75e:	e049      	b.n	1b7f4 <AppDiscServiceChanged+0x150>
  }
  
  /* if discovery procedure already in progress */
  if (pAppDiscCb->inProgress == APP_DISC_IN_PROGRESS)
   1b760:	697b      	ldr	r3, [r7, #20]
   1b762:	7adb      	ldrb	r3, [r3, #11]
   1b764:	2b01      	cmp	r3, #1
   1b766:	d100      	bne.n	1b76a <AppDiscServiceChanged+0xc6>
  {
    /* ignore service changed */
    return;
   1b768:	e044      	b.n	1b7f4 <AppDiscServiceChanged+0x150>
  }

  /* otherwise initialize discovery and configuration status */
  pAppDiscCb->connCfgStatus = APP_DISC_INIT;
   1b76a:	697b      	ldr	r3, [r7, #20]
   1b76c:	2200      	movs	r2, #0
   1b76e:	721a      	strb	r2, [r3, #8]
  pAppDiscCb->cmplStatus = APP_DISC_INIT;
   1b770:	697b      	ldr	r3, [r7, #20]
   1b772:	2200      	movs	r2, #0
   1b774:	725a      	strb	r2, [r3, #9]
  pAppDiscCb->secRequired = FALSE;
   1b776:	697b      	ldr	r3, [r7, #20]
   1b778:	2200      	movs	r2, #0
   1b77a:	735a      	strb	r2, [r3, #13]
  pAppDiscCb->scPending = FALSE;
   1b77c:	697b      	ldr	r3, [r7, #20]
   1b77e:	2200      	movs	r2, #0
   1b780:	739a      	strb	r2, [r3, #14]
  
  /* initialize handle list */
  if (pAppDiscCb->pHdlList != NULL)
   1b782:	697b      	ldr	r3, [r7, #20]
   1b784:	685b      	ldr	r3, [r3, #4]
   1b786:	2b00      	cmp	r3, #0
   1b788:	d009      	beq.n	1b79e <AppDiscServiceChanged+0xfa>
  {
    memset(pAppDiscCb->pHdlList, 0, (pAppDiscCb->hdlListLen * sizeof(uint16_t)));
   1b78a:	697b      	ldr	r3, [r7, #20]
   1b78c:	685a      	ldr	r2, [r3, #4]
   1b78e:	697b      	ldr	r3, [r7, #20]
   1b790:	7a9b      	ldrb	r3, [r3, #10]
   1b792:	005b      	lsls	r3, r3, #1
   1b794:	4610      	mov	r0, r2
   1b796:	2100      	movs	r1, #0
   1b798:	461a      	mov	r2, r3
   1b79a:	f004 fe27 	bl	203ec <memset>
  }
 
  /* clear stored discovery status and handle list */
  if ((dbHdl = AppDbGetHdl((dmConnId_t) pMsg->hdr.param)) != APP_DB_HDL_NONE)
   1b79e:	687b      	ldr	r3, [r7, #4]
   1b7a0:	881b      	ldrh	r3, [r3, #0]
   1b7a2:	b2db      	uxtb	r3, r3
   1b7a4:	4618      	mov	r0, r3
   1b7a6:	f000 f941 	bl	1ba2c <AppDbGetHdl>
   1b7aa:	60b8      	str	r0, [r7, #8]
   1b7ac:	68bb      	ldr	r3, [r7, #8]
   1b7ae:	2b00      	cmp	r3, #0
   1b7b0:	d009      	beq.n	1b7c6 <AppDiscServiceChanged+0x122>
  {
      AppDbSetDiscStatus(dbHdl, APP_DISC_INIT);
   1b7b2:	68b8      	ldr	r0, [r7, #8]
   1b7b4:	2100      	movs	r1, #0
   1b7b6:	f7fe f9a1 	bl	19afc <AppDbSetDiscStatus>
      AppDbSetHdlList(dbHdl, pAppDiscCb->pHdlList);
   1b7ba:	697b      	ldr	r3, [r7, #20]
   1b7bc:	685b      	ldr	r3, [r3, #4]
   1b7be:	68b8      	ldr	r0, [r7, #8]
   1b7c0:	4619      	mov	r1, r3
   1b7c2:	f7fe f9b7 	bl	19b34 <AppDbSetHdlList>
  }
  
  /* if configuration in progress */
  if (pAppDiscCb->inProgress == APP_DISC_CFG_IN_PROGRESS)
   1b7c6:	697b      	ldr	r3, [r7, #20]
   1b7c8:	7adb      	ldrb	r3, [r3, #11]
   1b7ca:	2b02      	cmp	r3, #2
   1b7cc:	d103      	bne.n	1b7d6 <AppDiscServiceChanged+0x132>
  {
    /* set pending status to set up abort of configuration */
    pAppDiscCb->scPending = TRUE;
   1b7ce:	697b      	ldr	r3, [r7, #20]
   1b7d0:	2201      	movs	r2, #1
   1b7d2:	739a      	strb	r2, [r3, #14]
   1b7d4:	e00e      	b.n	1b7f4 <AppDiscServiceChanged+0x150>
  {
    /* if not waiting for security or connection is already secure, then
     * initiate discovery now; otherwise discovery will be initiated after
     * security is done
     */
    if (!pAppDiscCfg->waitForSec || pAppDiscCb->alreadySecure)
   1b7d6:	4b0a      	ldr	r3, [pc, #40]	; (1b800 <AppDiscServiceChanged+0x15c>)
   1b7d8:	681b      	ldr	r3, [r3, #0]
   1b7da:	781b      	ldrb	r3, [r3, #0]
   1b7dc:	2b00      	cmp	r3, #0
   1b7de:	d003      	beq.n	1b7e8 <AppDiscServiceChanged+0x144>
   1b7e0:	697b      	ldr	r3, [r7, #20]
   1b7e2:	7b1b      	ldrb	r3, [r3, #12]
   1b7e4:	2b00      	cmp	r3, #0
   1b7e6:	d005      	beq.n	1b7f4 <AppDiscServiceChanged+0x150>
    {
      appDiscStart((dmConnId_t) pMsg->hdr.param);
   1b7e8:	687b      	ldr	r3, [r7, #4]
   1b7ea:	881b      	ldrh	r3, [r3, #0]
   1b7ec:	b2db      	uxtb	r3, r3
   1b7ee:	4618      	mov	r0, r3
   1b7f0:	f7ff fb9c 	bl	1af2c <appDiscStart>
    }
  }
}
   1b7f4:	3720      	adds	r7, #32
   1b7f6:	46bd      	mov	sp, r7
   1b7f8:	bd80      	pop	{r7, pc}
   1b7fa:	bf00      	nop
   1b7fc:	10004e18 	.word	0x10004e18
   1b800:	1000a244 	.word	0x1000a244

0001b804 <appProcMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appProcMsg(wsfMsgHdr_t *pMsg)
{
   1b804:	b580      	push	{r7, lr}
   1b806:	b082      	sub	sp, #8
   1b808:	af00      	add	r7, sp, #0
   1b80a:	6078      	str	r0, [r7, #4]
  switch(pMsg->event)
   1b80c:	687b      	ldr	r3, [r7, #4]
   1b80e:	789b      	ldrb	r3, [r3, #2]
   1b810:	2b00      	cmp	r3, #0
   1b812:	d002      	beq.n	1b81a <appProcMsg+0x16>
   1b814:	2b01      	cmp	r3, #1
   1b816:	d003      	beq.n	1b820 <appProcMsg+0x1c>
    case APP_UI_TIMER_IND:
      appUiTimerExpired(pMsg);
      break;
            
    default:
      break;
   1b818:	e006      	b.n	1b828 <appProcMsg+0x24>
static void appProcMsg(wsfMsgHdr_t *pMsg)
{
  switch(pMsg->event)
  {
    case APP_BTN_POLL_IND:
      appUiBtnPoll();
   1b81a:	f7fe fa8f 	bl	19d3c <appUiBtnPoll>
      break;
   1b81e:	e003      	b.n	1b828 <appProcMsg+0x24>

    case APP_UI_TIMER_IND:
      appUiTimerExpired(pMsg);
   1b820:	6878      	ldr	r0, [r7, #4]
   1b822:	f7fe fa81 	bl	19d28 <appUiTimerExpired>
      break;
   1b826:	bf00      	nop
            
    default:
      break;
  }
}
   1b828:	3708      	adds	r7, #8
   1b82a:	46bd      	mov	sp, r7
   1b82c:	bd80      	pop	{r7, pc}
   1b82e:	bf00      	nop

0001b830 <appCheckBonded>:
 *
 *  \return Bonded state.
 */
/*************************************************************************************************/
bool_t appCheckBonded(dmConnId_t connId)
{
   1b830:	b480      	push	{r7}
   1b832:	b083      	sub	sp, #12
   1b834:	af00      	add	r7, sp, #0
   1b836:	4603      	mov	r3, r0
   1b838:	71fb      	strb	r3, [r7, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));
  
  return appConnCb[connId - 1].bonded;
   1b83a:	79fb      	ldrb	r3, [r7, #7]
   1b83c:	3b01      	subs	r3, #1
   1b83e:	4a05      	ldr	r2, [pc, #20]	; (1b854 <appCheckBonded+0x24>)
   1b840:	015b      	lsls	r3, r3, #5
   1b842:	4413      	add	r3, r2
   1b844:	795b      	ldrb	r3, [r3, #5]
}
   1b846:	4618      	mov	r0, r3
   1b848:	370c      	adds	r7, #12
   1b84a:	46bd      	mov	sp, r7
   1b84c:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b850:	4770      	bx	lr
   1b852:	bf00      	nop
   1b854:	1000a260 	.word	0x1000a260

0001b858 <appCheckBondByLtk>:
 *
 *  \return Bond-by-LTK state.
 */
/*************************************************************************************************/
bool_t appCheckBondByLtk(dmConnId_t connId)
{
   1b858:	b480      	push	{r7}
   1b85a:	b083      	sub	sp, #12
   1b85c:	af00      	add	r7, sp, #0
   1b85e:	4603      	mov	r3, r0
   1b860:	71fb      	strb	r3, [r7, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));
  
  return appConnCb[connId - 1].bondByLtk;
   1b862:	79fb      	ldrb	r3, [r7, #7]
   1b864:	3b01      	subs	r3, #1
   1b866:	4a05      	ldr	r2, [pc, #20]	; (1b87c <appCheckBondByLtk+0x24>)
   1b868:	015b      	lsls	r3, r3, #5
   1b86a:	4413      	add	r3, r2
   1b86c:	799b      	ldrb	r3, [r3, #6]
}
   1b86e:	4618      	mov	r0, r3
   1b870:	370c      	adds	r7, #12
   1b872:	46bd      	mov	sp, r7
   1b874:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b878:	4770      	bx	lr
   1b87a:	bf00      	nop
   1b87c:	1000a260 	.word	0x1000a260

0001b880 <appNumConns>:
 *
 *  \return Number of connections.
 */
/*************************************************************************************************/
uint8_t appNumConns(uint8_t role)
{
   1b880:	b580      	push	{r7, lr}
   1b882:	b084      	sub	sp, #16
   1b884:	af00      	add	r7, sp, #0
   1b886:	4603      	mov	r3, r0
   1b888:	71fb      	strb	r3, [r7, #7]
  appConnCb_t   *pCcb = appConnCb;
   1b88a:	4b13      	ldr	r3, [pc, #76]	; (1b8d8 <appNumConns+0x58>)
   1b88c:	60fb      	str	r3, [r7, #12]
  uint8_t       i, j;
  
  for (i = DM_CONN_MAX, j = 0; i > 0; i--, pCcb++)
   1b88e:	2308      	movs	r3, #8
   1b890:	72fb      	strb	r3, [r7, #11]
   1b892:	2300      	movs	r3, #0
   1b894:	72bb      	strb	r3, [r7, #10]
   1b896:	e016      	b.n	1b8c6 <appNumConns+0x46>
  {
    if ((pCcb->connId != DM_CONN_ID_NONE) && (DmConnRole(pCcb->connId) == role))
   1b898:	68fb      	ldr	r3, [r7, #12]
   1b89a:	791b      	ldrb	r3, [r3, #4]
   1b89c:	2b00      	cmp	r3, #0
   1b89e:	d00c      	beq.n	1b8ba <appNumConns+0x3a>
   1b8a0:	68fb      	ldr	r3, [r7, #12]
   1b8a2:	791b      	ldrb	r3, [r3, #4]
   1b8a4:	4618      	mov	r0, r3
   1b8a6:	f7f4 f88f 	bl	f9c8 <DmConnRole>
   1b8aa:	4603      	mov	r3, r0
   1b8ac:	461a      	mov	r2, r3
   1b8ae:	79fb      	ldrb	r3, [r7, #7]
   1b8b0:	4293      	cmp	r3, r2
   1b8b2:	d102      	bne.n	1b8ba <appNumConns+0x3a>
    {      
      j++;
   1b8b4:	7abb      	ldrb	r3, [r7, #10]
   1b8b6:	3301      	adds	r3, #1
   1b8b8:	72bb      	strb	r3, [r7, #10]
uint8_t appNumConns(uint8_t role)
{
  appConnCb_t   *pCcb = appConnCb;
  uint8_t       i, j;
  
  for (i = DM_CONN_MAX, j = 0; i > 0; i--, pCcb++)
   1b8ba:	7afb      	ldrb	r3, [r7, #11]
   1b8bc:	3b01      	subs	r3, #1
   1b8be:	72fb      	strb	r3, [r7, #11]
   1b8c0:	68fb      	ldr	r3, [r7, #12]
   1b8c2:	3320      	adds	r3, #32
   1b8c4:	60fb      	str	r3, [r7, #12]
   1b8c6:	7afb      	ldrb	r3, [r7, #11]
   1b8c8:	2b00      	cmp	r3, #0
   1b8ca:	d1e5      	bne.n	1b898 <appNumConns+0x18>
    {      
      j++;
    }
  }

  return j;
   1b8cc:	7abb      	ldrb	r3, [r7, #10]
}
   1b8ce:	4618      	mov	r0, r3
   1b8d0:	3710      	adds	r7, #16
   1b8d2:	46bd      	mov	sp, r7
   1b8d4:	bd80      	pop	{r7, pc}
   1b8d6:	bf00      	nop
   1b8d8:	1000a260 	.word	0x1000a260

0001b8dc <AppHandlerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppHandlerInit(wsfHandlerId_t handlerId)
{
   1b8dc:	b580      	push	{r7, lr}
   1b8de:	b082      	sub	sp, #8
   1b8e0:	af00      	add	r7, sp, #0
   1b8e2:	4603      	mov	r3, r0
   1b8e4:	71fb      	strb	r3, [r7, #7]
  appHandlerId = handlerId;
   1b8e6:	4a04      	ldr	r2, [pc, #16]	; (1b8f8 <AppHandlerInit+0x1c>)
   1b8e8:	79fb      	ldrb	r3, [r7, #7]
   1b8ea:	7013      	strb	r3, [r2, #0]
  
  AppDbInit();
   1b8ec:	f7fd fe7e 	bl	195ec <AppDbInit>
}
   1b8f0:	3708      	adds	r7, #8
   1b8f2:	46bd      	mov	sp, r7
   1b8f4:	bd80      	pop	{r7, pc}
   1b8f6:	bf00      	nop
   1b8f8:	1000a24c 	.word	0x1000a24c

0001b8fc <AppHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   1b8fc:	b580      	push	{r7, lr}
   1b8fe:	b082      	sub	sp, #8
   1b900:	af00      	add	r7, sp, #0
   1b902:	4603      	mov	r3, r0
   1b904:	6039      	str	r1, [r7, #0]
   1b906:	71fb      	strb	r3, [r7, #7]
  if (pMsg != NULL)
   1b908:	683b      	ldr	r3, [r7, #0]
   1b90a:	2b00      	cmp	r3, #0
   1b90c:	d015      	beq.n	1b93a <AppHandler+0x3e>
  {
    // APP_TRACE_INFO1("App got evt %d", pMsg->event);
    
    if (pMsg->event >= APP_MASTER_MSG_START)
   1b90e:	683b      	ldr	r3, [r7, #0]
   1b910:	789b      	ldrb	r3, [r3, #2]
   1b912:	2b1f      	cmp	r3, #31
   1b914:	d904      	bls.n	1b920 <AppHandler+0x24>
    {
      /* pass event to master handler */
      (*appCb.masterCback)(pMsg);    
   1b916:	4b0e      	ldr	r3, [pc, #56]	; (1b950 <AppHandler+0x54>)
   1b918:	685b      	ldr	r3, [r3, #4]
   1b91a:	6838      	ldr	r0, [r7, #0]
   1b91c:	4798      	blx	r3
   1b91e:	e013      	b.n	1b948 <AppHandler+0x4c>
    }
    else if (pMsg->event >= APP_SLAVE_MSG_START)
   1b920:	683b      	ldr	r3, [r7, #0]
   1b922:	789b      	ldrb	r3, [r3, #2]
   1b924:	2b0f      	cmp	r3, #15
   1b926:	d904      	bls.n	1b932 <AppHandler+0x36>
    {
      /* pass event to slave handler */
      (*appCb.slaveCback)(pMsg);    
   1b928:	4b09      	ldr	r3, [pc, #36]	; (1b950 <AppHandler+0x54>)
   1b92a:	681b      	ldr	r3, [r3, #0]
   1b92c:	6838      	ldr	r0, [r7, #0]
   1b92e:	4798      	blx	r3
   1b930:	e00a      	b.n	1b948 <AppHandler+0x4c>
    }
    else
    {
      appProcMsg(pMsg);
   1b932:	6838      	ldr	r0, [r7, #0]
   1b934:	f7ff ff66 	bl	1b804 <appProcMsg>
   1b938:	e006      	b.n	1b948 <AppHandler+0x4c>
    }
  }
  else
  {
    if (event & APP_BTN_DOWN_EVT)
   1b93a:	79fb      	ldrb	r3, [r7, #7]
   1b93c:	f003 0310 	and.w	r3, r3, #16
   1b940:	2b00      	cmp	r3, #0
   1b942:	d001      	beq.n	1b948 <AppHandler+0x4c>
    {
      AppUiBtnPressed();
   1b944:	f7fe fa0e 	bl	19d64 <AppUiBtnPressed>
    }
  }
}
   1b948:	3708      	adds	r7, #8
   1b94a:	46bd      	mov	sp, r7
   1b94c:	bd80      	pop	{r7, pc}
   1b94e:	bf00      	nop
   1b950:	1000a23c 	.word	0x1000a23c

0001b954 <AppHandlePasskey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppHandlePasskey(dmSecAuthReqIndEvt_t *pAuthReq)
{
   1b954:	b580      	push	{r7, lr}
   1b956:	b084      	sub	sp, #16
   1b958:	af00      	add	r7, sp, #0
   1b95a:	6078      	str	r0, [r7, #4]
  uint32_t passkey;
  uint8_t  buf[SMP_PIN_LEN];
  
  if (pAuthReq->display)
   1b95c:	687b      	ldr	r3, [r7, #4]
   1b95e:	795b      	ldrb	r3, [r3, #5]
   1b960:	2b00      	cmp	r3, #0
   1b962:	d029      	beq.n	1b9b8 <AppHandlePasskey+0x64>
  {
    /* generate random passkey, limit to 6 digit max */
    SecRand((uint8_t *) &passkey, sizeof(uint32_t));
   1b964:	f107 030c 	add.w	r3, r7, #12
   1b968:	4618      	mov	r0, r3
   1b96a:	2104      	movs	r1, #4
   1b96c:	f7f7 ff34 	bl	137d8 <SecRand>
    passkey %= 1000000;
   1b970:	68fa      	ldr	r2, [r7, #12]
   1b972:	4b14      	ldr	r3, [pc, #80]	; (1b9c4 <AppHandlePasskey+0x70>)
   1b974:	fba3 1302 	umull	r1, r3, r3, r2
   1b978:	0c9b      	lsrs	r3, r3, #18
   1b97a:	4913      	ldr	r1, [pc, #76]	; (1b9c8 <AppHandlePasskey+0x74>)
   1b97c:	fb01 f303 	mul.w	r3, r1, r3
   1b980:	1ad3      	subs	r3, r2, r3
   1b982:	60fb      	str	r3, [r7, #12]
    
    /* convert to byte buffer */
    buf[0] = UINT32_TO_BYTE0(passkey);
   1b984:	68fb      	ldr	r3, [r7, #12]
   1b986:	b2db      	uxtb	r3, r3
   1b988:	723b      	strb	r3, [r7, #8]
    buf[1] = UINT32_TO_BYTE1(passkey);
   1b98a:	68fb      	ldr	r3, [r7, #12]
   1b98c:	0a1b      	lsrs	r3, r3, #8
   1b98e:	b2db      	uxtb	r3, r3
   1b990:	727b      	strb	r3, [r7, #9]
    buf[2] = UINT32_TO_BYTE2(passkey);
   1b992:	68fb      	ldr	r3, [r7, #12]
   1b994:	0c1b      	lsrs	r3, r3, #16
   1b996:	b2db      	uxtb	r3, r3
   1b998:	72bb      	strb	r3, [r7, #10]
    
    /* send authentication response to DM */
    DmSecAuthRsp((dmConnId_t) pAuthReq->hdr.param, SMP_PIN_LEN, buf);
   1b99a:	687b      	ldr	r3, [r7, #4]
   1b99c:	881b      	ldrh	r3, [r3, #0]
   1b99e:	b2da      	uxtb	r2, r3
   1b9a0:	f107 0308 	add.w	r3, r7, #8
   1b9a4:	4610      	mov	r0, r2
   1b9a6:	2103      	movs	r1, #3
   1b9a8:	461a      	mov	r2, r3
   1b9aa:	f7f4 fc81 	bl	102b0 <DmSecAuthRsp>
    
    /* display passkey */
    AppUiDisplayPasskey(passkey);
   1b9ae:	68fb      	ldr	r3, [r7, #12]
   1b9b0:	4618      	mov	r0, r3
   1b9b2:	f7fe f9ab 	bl	19d0c <AppUiDisplayPasskey>
   1b9b6:	e002      	b.n	1b9be <AppHandlePasskey+0x6a>
  }
  else
  {
    /* prompt user to enter passkey */
    AppUiAction(APP_UI_PASSKEY_PROMPT);
   1b9b8:	200e      	movs	r0, #14
   1b9ba:	f7fe f913 	bl	19be4 <AppUiAction>
  } 
}
   1b9be:	3710      	adds	r7, #16
   1b9c0:	46bd      	mov	sp, r7
   1b9c2:	bd80      	pop	{r7, pc}
   1b9c4:	431bde83 	.word	0x431bde83
   1b9c8:	000f4240 	.word	0x000f4240

0001b9cc <AppConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppConnClose(dmConnId_t connId)
{
   1b9cc:	b580      	push	{r7, lr}
   1b9ce:	b082      	sub	sp, #8
   1b9d0:	af00      	add	r7, sp, #0
   1b9d2:	4603      	mov	r3, r0
   1b9d4:	71fb      	strb	r3, [r7, #7]
  DmConnClose(DM_CLIENT_ID_APP, connId, HCI_ERR_REMOTE_TERMINATED);
   1b9d6:	79fb      	ldrb	r3, [r7, #7]
   1b9d8:	2003      	movs	r0, #3
   1b9da:	4619      	mov	r1, r3
   1b9dc:	2213      	movs	r2, #19
   1b9de:	f7f3 fe61 	bl	f6a4 <DmConnClose>
}
   1b9e2:	3708      	adds	r7, #8
   1b9e4:	46bd      	mov	sp, r7
   1b9e6:	bd80      	pop	{r7, pc}

0001b9e8 <AppConnIsOpen>:
 *
 *  \return Connection ID of open connection or DM_CONN_ID_NONE if no open connections.
 */
/*************************************************************************************************/
dmConnId_t AppConnIsOpen(void)
{
   1b9e8:	b480      	push	{r7}
   1b9ea:	b083      	sub	sp, #12
   1b9ec:	af00      	add	r7, sp, #0
  appConnCb_t   *pCcb = appConnCb;
   1b9ee:	4b0e      	ldr	r3, [pc, #56]	; (1ba28 <AppConnIsOpen+0x40>)
   1b9f0:	607b      	str	r3, [r7, #4]
  uint8_t       i;
  
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   1b9f2:	2308      	movs	r3, #8
   1b9f4:	70fb      	strb	r3, [r7, #3]
   1b9f6:	e00c      	b.n	1ba12 <AppConnIsOpen+0x2a>
  {
    if (pCcb->connId != DM_CONN_ID_NONE)
   1b9f8:	687b      	ldr	r3, [r7, #4]
   1b9fa:	791b      	ldrb	r3, [r3, #4]
   1b9fc:	2b00      	cmp	r3, #0
   1b9fe:	d002      	beq.n	1ba06 <AppConnIsOpen+0x1e>
    {      
      return pCcb->connId;
   1ba00:	687b      	ldr	r3, [r7, #4]
   1ba02:	791b      	ldrb	r3, [r3, #4]
   1ba04:	e009      	b.n	1ba1a <AppConnIsOpen+0x32>
dmConnId_t AppConnIsOpen(void)
{
  appConnCb_t   *pCcb = appConnCb;
  uint8_t       i;
  
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   1ba06:	78fb      	ldrb	r3, [r7, #3]
   1ba08:	3b01      	subs	r3, #1
   1ba0a:	70fb      	strb	r3, [r7, #3]
   1ba0c:	687b      	ldr	r3, [r7, #4]
   1ba0e:	3320      	adds	r3, #32
   1ba10:	607b      	str	r3, [r7, #4]
   1ba12:	78fb      	ldrb	r3, [r7, #3]
   1ba14:	2b00      	cmp	r3, #0
   1ba16:	d1ef      	bne.n	1b9f8 <AppConnIsOpen+0x10>
    {      
      return pCcb->connId;
    }
  }
  
  return DM_CONN_ID_NONE;
   1ba18:	2300      	movs	r3, #0
}
   1ba1a:	4618      	mov	r0, r3
   1ba1c:	370c      	adds	r7, #12
   1ba1e:	46bd      	mov	sp, r7
   1ba20:	f85d 7b04 	ldr.w	r7, [sp], #4
   1ba24:	4770      	bx	lr
   1ba26:	bf00      	nop
   1ba28:	1000a260 	.word	0x1000a260

0001ba2c <AppDbGetHdl>:
 *
 *  \return Database record handle or APP_DB_HDL_NONE.
 */
/*************************************************************************************************/
appDbHdl_t AppDbGetHdl(dmConnId_t connId)
{
   1ba2c:	b480      	push	{r7}
   1ba2e:	b083      	sub	sp, #12
   1ba30:	af00      	add	r7, sp, #0
   1ba32:	4603      	mov	r3, r0
   1ba34:	71fb      	strb	r3, [r7, #7]
  return appConnCb[connId-1].dbHdl;
   1ba36:	79fb      	ldrb	r3, [r7, #7]
   1ba38:	3b01      	subs	r3, #1
   1ba3a:	4a05      	ldr	r2, [pc, #20]	; (1ba50 <AppDbGetHdl+0x24>)
   1ba3c:	015b      	lsls	r3, r3, #5
   1ba3e:	4413      	add	r3, r2
   1ba40:	681b      	ldr	r3, [r3, #0]
}
   1ba42:	4618      	mov	r0, r3
   1ba44:	370c      	adds	r7, #12
   1ba46:	46bd      	mov	sp, r7
   1ba48:	f85d 7b04 	ldr.w	r7, [sp], #4
   1ba4c:	4770      	bx	lr
   1ba4e:	bf00      	nop
   1ba50:	1000a260 	.word	0x1000a260

0001ba54 <AppAddDevToResList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppAddDevToResList(dmEvt_t *pMsg, dmConnId_t connId)
{
   1ba54:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ba56:	b087      	sub	sp, #28
   1ba58:	af02      	add	r7, sp, #8
   1ba5a:	6078      	str	r0, [r7, #4]
   1ba5c:	460b      	mov	r3, r1
   1ba5e:	70fb      	strb	r3, [r7, #3]
  dmSecKey_t *pPeerKey;
  appDbHdl_t hdl = appConnCb[connId - 1].dbHdl;
   1ba60:	78fb      	ldrb	r3, [r7, #3]
   1ba62:	3b01      	subs	r3, #1
   1ba64:	4a14      	ldr	r2, [pc, #80]	; (1bab8 <AppAddDevToResList+0x64>)
   1ba66:	015b      	lsls	r3, r3, #5
   1ba68:	4413      	add	r3, r2
   1ba6a:	681b      	ldr	r3, [r3, #0]
   1ba6c:	60fb      	str	r3, [r7, #12]

  /* if LL Privacy is supported and the peer device has distributed its IRK */
  if (HciLlPrivacySupported() && ((pPeerKey = AppDbGetKey(hdl, DM_KEY_IRK, NULL))!= NULL))
   1ba6e:	f7fb f931 	bl	16cd4 <HciLlPrivacySupported>
   1ba72:	4603      	mov	r3, r0
   1ba74:	2b00      	cmp	r3, #0
   1ba76:	d01c      	beq.n	1bab2 <AppAddDevToResList+0x5e>
   1ba78:	68f8      	ldr	r0, [r7, #12]
   1ba7a:	2104      	movs	r1, #4
   1ba7c:	2200      	movs	r2, #0
   1ba7e:	f7fd ff49 	bl	19914 <AppDbGetKey>
   1ba82:	60b8      	str	r0, [r7, #8]
   1ba84:	68bb      	ldr	r3, [r7, #8]
   1ba86:	2b00      	cmp	r3, #0
   1ba88:	d013      	beq.n	1bab2 <AppAddDevToResList+0x5e>
  {
    /* add peer device to resolving list. If all-zero local or peer IRK is used then
       LL will only use or accept local or peer identity address respectively. */
    DmPrivAddDevToResList(pPeerKey->irk.addrType, pPeerKey->irk.bdAddr, pPeerKey->irk.key,
   1ba8a:	68bb      	ldr	r3, [r7, #8]
   1ba8c:	7d9e      	ldrb	r6, [r3, #22]
   1ba8e:	68bb      	ldr	r3, [r7, #8]
   1ba90:	f103 0510 	add.w	r5, r3, #16
   1ba94:	68bc      	ldr	r4, [r7, #8]
   1ba96:	f7f4 fc53 	bl	10340 <DmSecGetLocalIrk>
   1ba9a:	4686      	mov	lr, r0
   1ba9c:	687b      	ldr	r3, [r7, #4]
   1ba9e:	881b      	ldrh	r3, [r3, #0]
   1baa0:	2201      	movs	r2, #1
   1baa2:	9200      	str	r2, [sp, #0]
   1baa4:	9301      	str	r3, [sp, #4]
   1baa6:	4630      	mov	r0, r6
   1baa8:	4629      	mov	r1, r5
   1baaa:	4622      	mov	r2, r4
   1baac:	4673      	mov	r3, lr
   1baae:	f7f4 fa8f 	bl	ffd0 <DmPrivAddDevToResList>
                          DmSecGetLocalIrk(), TRUE, pMsg->hdr.param);
  }
}
   1bab2:	3714      	adds	r7, #20
   1bab4:	46bd      	mov	sp, r7
   1bab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bab8:	1000a260 	.word	0x1000a260

0001babc <AppUpdatePrivacyMode>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUpdatePrivacyMode(appDbHdl_t hdl)
{
   1babc:	b580      	push	{r7, lr}
   1babe:	b084      	sub	sp, #16
   1bac0:	af00      	add	r7, sp, #0
   1bac2:	6078      	str	r0, [r7, #4]
  /* if peer device's been added to resolving list but RPA Only attribute not found on peer device */
  if ((hdl != APP_DB_HDL_NONE) && AppDbGetPeerAddedToRl(hdl) && !AppDbGetPeerRpao(hdl))
   1bac4:	687b      	ldr	r3, [r7, #4]
   1bac6:	2b00      	cmp	r3, #0
   1bac8:	d021      	beq.n	1bb0e <AppUpdatePrivacyMode+0x52>
   1baca:	6878      	ldr	r0, [r7, #4]
   1bacc:	f7fe f85e 	bl	19b8c <AppDbGetPeerAddedToRl>
   1bad0:	4603      	mov	r3, r0
   1bad2:	2b00      	cmp	r3, #0
   1bad4:	d01b      	beq.n	1bb0e <AppUpdatePrivacyMode+0x52>
   1bad6:	6878      	ldr	r0, [r7, #4]
   1bad8:	f7fe f876 	bl	19bc8 <AppDbGetPeerRpao>
   1badc:	4603      	mov	r3, r0
   1bade:	2b00      	cmp	r3, #0
   1bae0:	d115      	bne.n	1bb0e <AppUpdatePrivacyMode+0x52>
  {
    dmSecKey_t *pPeerKey = AppDbGetKey(hdl, DM_KEY_IRK, NULL);
   1bae2:	6878      	ldr	r0, [r7, #4]
   1bae4:	2104      	movs	r1, #4
   1bae6:	2200      	movs	r2, #0
   1bae8:	f7fd ff14 	bl	19914 <AppDbGetKey>
   1baec:	60f8      	str	r0, [r7, #12]
    if (pPeerKey != NULL)
   1baee:	68fb      	ldr	r3, [r7, #12]
   1baf0:	2b00      	cmp	r3, #0
   1baf2:	d00c      	beq.n	1bb0e <AppUpdatePrivacyMode+0x52>
    {
      /* set device privacy mode for this peer device */
      DmPrivSetPrivacyMode(pPeerKey->irk.addrType, pPeerKey->irk.bdAddr, DM_PRIV_MODE_DEVICE);
   1baf4:	68fb      	ldr	r3, [r7, #12]
   1baf6:	7d9a      	ldrb	r2, [r3, #22]
   1baf8:	68fb      	ldr	r3, [r7, #12]
   1bafa:	3310      	adds	r3, #16
   1bafc:	4610      	mov	r0, r2
   1bafe:	4619      	mov	r1, r3
   1bb00:	2201      	movs	r2, #1
   1bb02:	f7f4 fadf 	bl	100c4 <DmPrivSetPrivacyMode>

      /* make sure resolving list flag cleared */
      AppDbSetPeerAddedToRl(hdl, FALSE);
   1bb06:	6878      	ldr	r0, [r7, #4]
   1bb08:	2100      	movs	r1, #0
   1bb0a:	f7fe f84d 	bl	19ba8 <AppDbSetPeerAddedToRl>
    }
  }
}
   1bb0e:	3710      	adds	r7, #16
   1bb10:	46bd      	mov	sp, r7
   1bb12:	bd80      	pop	{r7, pc}

0001bb14 <appServerSetSigningInfo>:
*
*  \return None.
*/
/*************************************************************************************************/
static void appServerSetSigningInfo(dmConnId_t connId)
{
   1bb14:	b580      	push	{r7, lr}
   1bb16:	b084      	sub	sp, #16
   1bb18:	af00      	add	r7, sp, #0
   1bb1a:	4603      	mov	r3, r0
   1bb1c:	71fb      	strb	r3, [r7, #7]
  appDbHdl_t  dbHdl;
  dmSecKey_t  *pPeerKey;

  /* if peer's CSRK is available */
  if (((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE) &&
   1bb1e:	79fb      	ldrb	r3, [r7, #7]
   1bb20:	4618      	mov	r0, r3
   1bb22:	f7ff ff83 	bl	1ba2c <AppDbGetHdl>
   1bb26:	60f8      	str	r0, [r7, #12]
   1bb28:	68fb      	ldr	r3, [r7, #12]
   1bb2a:	2b00      	cmp	r3, #0
   1bb2c:	d017      	beq.n	1bb5e <appServerSetSigningInfo+0x4a>
   1bb2e:	68f8      	ldr	r0, [r7, #12]
   1bb30:	2108      	movs	r1, #8
   1bb32:	2200      	movs	r2, #0
   1bb34:	f7fd feee 	bl	19914 <AppDbGetKey>
   1bb38:	60b8      	str	r0, [r7, #8]
   1bb3a:	68bb      	ldr	r3, [r7, #8]
   1bb3c:	2b00      	cmp	r3, #0
   1bb3e:	d00e      	beq.n	1bb5e <appServerSetSigningInfo+0x4a>
      ((pPeerKey = AppDbGetKey(dbHdl, DM_KEY_CSRK, NULL)) != NULL))
  {
    /* set peer's CSRK and sign counter on this connection */
    AttsSetCsrk(connId, pPeerKey->csrk.key);
   1bb40:	68bb      	ldr	r3, [r7, #8]
   1bb42:	79fa      	ldrb	r2, [r7, #7]
   1bb44:	4610      	mov	r0, r2
   1bb46:	4619      	mov	r1, r3
   1bb48:	f7f2 febc 	bl	e8c4 <AttsSetCsrk>
    AttsSetSignCounter(connId, AppDbGetPeerSignCounter(dbHdl));
   1bb4c:	68f8      	ldr	r0, [r7, #12]
   1bb4e:	f7fe f801 	bl	19b54 <AppDbGetPeerSignCounter>
   1bb52:	4602      	mov	r2, r0
   1bb54:	79fb      	ldrb	r3, [r7, #7]
   1bb56:	4618      	mov	r0, r3
   1bb58:	4611      	mov	r1, r2
   1bb5a:	f7f2 febd 	bl	e8d8 <AttsSetSignCounter>
  }
}
   1bb5e:	3710      	adds	r7, #16
   1bb60:	46bd      	mov	sp, r7
   1bb62:	bd80      	pop	{r7, pc}

0001bb64 <AppServerConnCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppServerConnCback(dmEvt_t *pDmEvt)
{
   1bb64:	b580      	push	{r7, lr}
   1bb66:	b084      	sub	sp, #16
   1bb68:	af00      	add	r7, sp, #0
   1bb6a:	6078      	str	r0, [r7, #4]
  bool_t      bonded;
  appDbHdl_t  dbHdl;
  dmConnId_t  connId = (dmConnId_t) pDmEvt->hdr.param;
   1bb6c:	687b      	ldr	r3, [r7, #4]
   1bb6e:	881b      	ldrh	r3, [r3, #0]
   1bb70:	73fb      	strb	r3, [r7, #15]
  
  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
   1bb72:	687b      	ldr	r3, [r7, #4]
   1bb74:	789b      	ldrb	r3, [r3, #2]
   1bb76:	2b27      	cmp	r3, #39	; 0x27
   1bb78:	d109      	bne.n	1bb8e <AppServerConnCback+0x2a>
  {
    /* set up CCC table with uninitialized (all zero) values */
    AttsCccInitTable(connId, NULL);
   1bb7a:	7bfb      	ldrb	r3, [r7, #15]
   1bb7c:	4618      	mov	r0, r3
   1bb7e:	2100      	movs	r1, #0
   1bb80:	f7f1 fca2 	bl	d4c8 <AttsCccInitTable>

    /* set peer's data signing info */
    appServerSetSigningInfo(connId);
   1bb84:	7bfb      	ldrb	r3, [r7, #15]
   1bb86:	4618      	mov	r0, r3
   1bb88:	f7ff ffc4 	bl	1bb14 <appServerSetSigningInfo>
   1bb8c:	e067      	b.n	1bc5e <AppServerConnCback+0xfa>
  }
  else if (pDmEvt->hdr.event == DM_SEC_PAIR_CMPL_IND)
   1bb8e:	687b      	ldr	r3, [r7, #4]
   1bb90:	789b      	ldrb	r3, [r3, #2]
   1bb92:	2b2a      	cmp	r3, #42	; 0x2a
   1bb94:	d129      	bne.n	1bbea <AppServerConnCback+0x86>
  {
    bonded = ((pDmEvt->pairCmpl.auth & DM_AUTH_BOND_FLAG) == DM_AUTH_BOND_FLAG);
   1bb96:	687b      	ldr	r3, [r7, #4]
   1bb98:	791b      	ldrb	r3, [r3, #4]
   1bb9a:	f003 0301 	and.w	r3, r3, #1
   1bb9e:	2b00      	cmp	r3, #0
   1bba0:	bf14      	ite	ne
   1bba2:	2301      	movne	r3, #1
   1bba4:	2300      	moveq	r3, #0
   1bba6:	b2db      	uxtb	r3, r3
   1bba8:	73bb      	strb	r3, [r7, #14]
    
    /* if going from unbonded to bonded update CCC table */
    if (bonded && (appCheckBonded(connId) == FALSE))
   1bbaa:	7bbb      	ldrb	r3, [r7, #14]
   1bbac:	2b00      	cmp	r3, #0
   1bbae:	d017      	beq.n	1bbe0 <AppServerConnCback+0x7c>
   1bbb0:	7bfb      	ldrb	r3, [r7, #15]
   1bbb2:	4618      	mov	r0, r3
   1bbb4:	f7ff fe3c 	bl	1b830 <appCheckBonded>
   1bbb8:	4603      	mov	r3, r0
   1bbba:	2b00      	cmp	r3, #0
   1bbbc:	d110      	bne.n	1bbe0 <AppServerConnCback+0x7c>
    {
      if ((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   1bbbe:	7bfb      	ldrb	r3, [r7, #15]
   1bbc0:	4618      	mov	r0, r3
   1bbc2:	f7ff ff33 	bl	1ba2c <AppDbGetHdl>
   1bbc6:	60b8      	str	r0, [r7, #8]
   1bbc8:	68bb      	ldr	r3, [r7, #8]
   1bbca:	2b00      	cmp	r3, #0
   1bbcc:	d008      	beq.n	1bbe0 <AppServerConnCback+0x7c>
      {
        AttsCccInitTable(connId, AppDbGetCccTbl(dbHdl));
   1bbce:	68b8      	ldr	r0, [r7, #8]
   1bbd0:	f7fd ff66 	bl	19aa0 <AppDbGetCccTbl>
   1bbd4:	4602      	mov	r2, r0
   1bbd6:	7bfb      	ldrb	r3, [r7, #15]
   1bbd8:	4618      	mov	r0, r3
   1bbda:	4611      	mov	r1, r2
   1bbdc:	f7f1 fc74 	bl	d4c8 <AttsCccInitTable>
      }
    }      

    /* set peer's data signing info */
    appServerSetSigningInfo(connId);
   1bbe0:	7bfb      	ldrb	r3, [r7, #15]
   1bbe2:	4618      	mov	r0, r3
   1bbe4:	f7ff ff96 	bl	1bb14 <appServerSetSigningInfo>
   1bbe8:	e039      	b.n	1bc5e <AppServerConnCback+0xfa>
  }
  else if (pDmEvt->hdr.event == DM_SEC_ENCRYPT_IND)
   1bbea:	687b      	ldr	r3, [r7, #4]
   1bbec:	789b      	ldrb	r3, [r3, #2]
   1bbee:	2b2c      	cmp	r3, #44	; 0x2c
   1bbf0:	d11c      	bne.n	1bc2c <AppServerConnCback+0xc8>
  {
    /* if going from unbonded to bonded update CCC table */
    if (pDmEvt->encryptInd.usingLtk && appCheckBondByLtk(connId))
   1bbf2:	687b      	ldr	r3, [r7, #4]
   1bbf4:	791b      	ldrb	r3, [r3, #4]
   1bbf6:	2b00      	cmp	r3, #0
   1bbf8:	d031      	beq.n	1bc5e <AppServerConnCback+0xfa>
   1bbfa:	7bfb      	ldrb	r3, [r7, #15]
   1bbfc:	4618      	mov	r0, r3
   1bbfe:	f7ff fe2b 	bl	1b858 <appCheckBondByLtk>
   1bc02:	4603      	mov	r3, r0
   1bc04:	2b00      	cmp	r3, #0
   1bc06:	d02a      	beq.n	1bc5e <AppServerConnCback+0xfa>
    {
      if ((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   1bc08:	7bfb      	ldrb	r3, [r7, #15]
   1bc0a:	4618      	mov	r0, r3
   1bc0c:	f7ff ff0e 	bl	1ba2c <AppDbGetHdl>
   1bc10:	60b8      	str	r0, [r7, #8]
   1bc12:	68bb      	ldr	r3, [r7, #8]
   1bc14:	2b00      	cmp	r3, #0
   1bc16:	d022      	beq.n	1bc5e <AppServerConnCback+0xfa>
      {
        AttsCccInitTable(connId, AppDbGetCccTbl(dbHdl));
   1bc18:	68b8      	ldr	r0, [r7, #8]
   1bc1a:	f7fd ff41 	bl	19aa0 <AppDbGetCccTbl>
   1bc1e:	4602      	mov	r2, r0
   1bc20:	7bfb      	ldrb	r3, [r7, #15]
   1bc22:	4618      	mov	r0, r3
   1bc24:	4611      	mov	r1, r2
   1bc26:	f7f1 fc4f 	bl	d4c8 <AttsCccInitTable>
   1bc2a:	e018      	b.n	1bc5e <AppServerConnCback+0xfa>
      }
    }    
  }
  else if (pDmEvt->hdr.event == DM_CONN_CLOSE_IND)
   1bc2c:	687b      	ldr	r3, [r7, #4]
   1bc2e:	789b      	ldrb	r3, [r3, #2]
   1bc30:	2b28      	cmp	r3, #40	; 0x28
   1bc32:	d114      	bne.n	1bc5e <AppServerConnCback+0xfa>
  {
    /* clear CCC table on connection close */
    AttsCccClearTable(connId);
   1bc34:	7bfb      	ldrb	r3, [r7, #15]
   1bc36:	4618      	mov	r0, r3
   1bc38:	f7f1 fc88 	bl	d54c <AttsCccClearTable>

    if ((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   1bc3c:	7bfb      	ldrb	r3, [r7, #15]
   1bc3e:	4618      	mov	r0, r3
   1bc40:	f7ff fef4 	bl	1ba2c <AppDbGetHdl>
   1bc44:	60b8      	str	r0, [r7, #8]
   1bc46:	68bb      	ldr	r3, [r7, #8]
   1bc48:	2b00      	cmp	r3, #0
   1bc4a:	d008      	beq.n	1bc5e <AppServerConnCback+0xfa>
    {
      /* remember peer's sign counter */
      AppDbSetPeerSignCounter(dbHdl, AttsGetSignCounter(connId));
   1bc4c:	7bfb      	ldrb	r3, [r7, #15]
   1bc4e:	4618      	mov	r0, r3
   1bc50:	f7f2 fe4a 	bl	e8e8 <AttsGetSignCounter>
   1bc54:	4603      	mov	r3, r0
   1bc56:	68b8      	ldr	r0, [r7, #8]
   1bc58:	4619      	mov	r1, r3
   1bc5a:	f7fd ff89 	bl	19b70 <AppDbSetPeerSignCounter>
    }
  }
}
   1bc5e:	3710      	adds	r7, #16
   1bc60:	46bd      	mov	sp, r7
   1bc62:	bd80      	pop	{r7, pc}

0001bc64 <appSlaveAdvModeInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveAdvModeInit(void)
{
   1bc64:	b480      	push	{r7}
   1bc66:	af00      	add	r7, sp, #0
  /* initialize advertising callbacks */
  appSlaveCb.advStopCback = NULL;
   1bc68:	4b04      	ldr	r3, [pc, #16]	; (1bc7c <appSlaveAdvModeInit+0x18>)
   1bc6a:	2200      	movs	r2, #0
   1bc6c:	641a      	str	r2, [r3, #64]	; 0x40
  appSlaveCb.advRestartCback = NULL;
   1bc6e:	4b03      	ldr	r3, [pc, #12]	; (1bc7c <appSlaveAdvModeInit+0x18>)
   1bc70:	2200      	movs	r2, #0
   1bc72:	645a      	str	r2, [r3, #68]	; 0x44
}
   1bc74:	46bd      	mov	sp, r7
   1bc76:	f85d 7b04 	ldr.w	r7, [sp], #4
   1bc7a:	4770      	bx	lr
   1bc7c:	1000a360 	.word	0x1000a360

0001bc80 <appSlaveConnectableAdv>:
 *
 *  \return TRUE if connectable advertising enabled. FALSE, otherwise.
 */
/*************************************************************************************************/
static bool_t appSlaveConnectableAdv(uint8_t numSets, uint8_t *pAdvHandles)
{
   1bc80:	b480      	push	{r7}
   1bc82:	b085      	sub	sp, #20
   1bc84:	af00      	add	r7, sp, #0
   1bc86:	4603      	mov	r3, r0
   1bc88:	6039      	str	r1, [r7, #0]
   1bc8a:	71fb      	strb	r3, [r7, #7]
  uint8_t i, j;

  /* for each advertising set in advHandle */
  for (i = 0; i < numSets; i++)
   1bc8c:	2300      	movs	r3, #0
   1bc8e:	73fb      	strb	r3, [r7, #15]
   1bc90:	e022      	b.n	1bcd8 <appSlaveConnectableAdv+0x58>
  {
    /* for each advertising set */
    for (j = 0; j < DM_NUM_ADV_SETS; j++)
   1bc92:	2300      	movs	r3, #0
   1bc94:	73bb      	strb	r3, [r7, #14]
   1bc96:	e019      	b.n	1bccc <appSlaveConnectableAdv+0x4c>
    {
      /* if connectable advertising */
      if ((pAdvHandles[i] == j)                            &&
   1bc98:	7bfb      	ldrb	r3, [r7, #15]
   1bc9a:	683a      	ldr	r2, [r7, #0]
   1bc9c:	4413      	add	r3, r2
   1bc9e:	781b      	ldrb	r3, [r3, #0]
   1bca0:	7bba      	ldrb	r2, [r7, #14]
   1bca2:	429a      	cmp	r2, r3
   1bca4:	d10f      	bne.n	1bcc6 <appSlaveConnectableAdv+0x46>
          ((appSlaveCb.advType[j] == DM_ADV_CONN_UNDIRECT) ||
   1bca6:	7bbb      	ldrb	r3, [r7, #14]
   1bca8:	4a11      	ldr	r2, [pc, #68]	; (1bcf0 <appSlaveConnectableAdv+0x70>)
   1bcaa:	4413      	add	r3, r2
   1bcac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
  {
    /* for each advertising set */
    for (j = 0; j < DM_NUM_ADV_SETS; j++)
    {
      /* if connectable advertising */
      if ((pAdvHandles[i] == j)                            &&
   1bcb0:	2b00      	cmp	r3, #0
   1bcb2:	d006      	beq.n	1bcc2 <appSlaveConnectableAdv+0x42>
          ((appSlaveCb.advType[j] == DM_ADV_CONN_UNDIRECT) ||
           (appSlaveCb.advType[j] == DM_EXT_ADV_CONN_UNDIRECT)))
   1bcb4:	7bbb      	ldrb	r3, [r7, #14]
   1bcb6:	4a0e      	ldr	r2, [pc, #56]	; (1bcf0 <appSlaveConnectableAdv+0x70>)
   1bcb8:	4413      	add	r3, r2
   1bcba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    /* for each advertising set */
    for (j = 0; j < DM_NUM_ADV_SETS; j++)
    {
      /* if connectable advertising */
      if ((pAdvHandles[i] == j)                            &&
          ((appSlaveCb.advType[j] == DM_ADV_CONN_UNDIRECT) ||
   1bcbe:	2b05      	cmp	r3, #5
   1bcc0:	d101      	bne.n	1bcc6 <appSlaveConnectableAdv+0x46>
           (appSlaveCb.advType[j] == DM_EXT_ADV_CONN_UNDIRECT)))
      {
        return TRUE;
   1bcc2:	2301      	movs	r3, #1
   1bcc4:	e00d      	b.n	1bce2 <appSlaveConnectableAdv+0x62>

  /* for each advertising set in advHandle */
  for (i = 0; i < numSets; i++)
  {
    /* for each advertising set */
    for (j = 0; j < DM_NUM_ADV_SETS; j++)
   1bcc6:	7bbb      	ldrb	r3, [r7, #14]
   1bcc8:	3301      	adds	r3, #1
   1bcca:	73bb      	strb	r3, [r7, #14]
   1bccc:	7bbb      	ldrb	r3, [r7, #14]
   1bcce:	2b00      	cmp	r3, #0
   1bcd0:	d0e2      	beq.n	1bc98 <appSlaveConnectableAdv+0x18>
static bool_t appSlaveConnectableAdv(uint8_t numSets, uint8_t *pAdvHandles)
{
  uint8_t i, j;

  /* for each advertising set in advHandle */
  for (i = 0; i < numSets; i++)
   1bcd2:	7bfb      	ldrb	r3, [r7, #15]
   1bcd4:	3301      	adds	r3, #1
   1bcd6:	73fb      	strb	r3, [r7, #15]
   1bcd8:	7bfa      	ldrb	r2, [r7, #15]
   1bcda:	79fb      	ldrb	r3, [r7, #7]
   1bcdc:	429a      	cmp	r2, r3
   1bcde:	d3d8      	bcc.n	1bc92 <appSlaveConnectableAdv+0x12>
        return TRUE;
      }
    }
  }

  return FALSE;
   1bce0:	2300      	movs	r3, #0
}
   1bce2:	4618      	mov	r0, r3
   1bce4:	3714      	adds	r7, #20
   1bce6:	46bd      	mov	sp, r7
   1bce8:	f85d 7b04 	ldr.w	r7, [sp], #4
   1bcec:	4770      	bx	lr
   1bcee:	bf00      	nop
   1bcf0:	1000a360 	.word	0x1000a360

0001bcf4 <appSlaveForceAdvDataSync>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveForceAdvDataSync(uint8_t advHandle, uint8_t mode)
{
   1bcf4:	b480      	push	{r7}
   1bcf6:	b085      	sub	sp, #20
   1bcf8:	af00      	add	r7, sp, #0
   1bcfa:	4603      	mov	r3, r0
   1bcfc:	460a      	mov	r2, r1
   1bcfe:	71fb      	strb	r3, [r7, #7]
   1bd00:	4613      	mov	r3, r2
   1bd02:	71bb      	strb	r3, [r7, #6]
  uint8_t advLoc;
  uint8_t scanLoc;

  /* get advertising/scan data location based on mode */
  advLoc = APP_MODE_2_ADV_LOC(mode);
   1bd04:	79bb      	ldrb	r3, [r7, #6]
   1bd06:	005b      	lsls	r3, r3, #1
   1bd08:	73fb      	strb	r3, [r7, #15]
  scanLoc = APP_MODE_2_SCAN_LOC(mode);
   1bd0a:	79bb      	ldrb	r3, [r7, #6]
   1bd0c:	005b      	lsls	r3, r3, #1
   1bd0e:	b2db      	uxtb	r3, r3
   1bd10:	3301      	adds	r3, #1
   1bd12:	73bb      	strb	r3, [r7, #14]

  /* force update of advertising data */
  appSlaveCb.advDataOffset[advHandle][advLoc] = 0;
   1bd14:	79fa      	ldrb	r2, [r7, #7]
   1bd16:	7bfb      	ldrb	r3, [r7, #15]
   1bd18:	490d      	ldr	r1, [pc, #52]	; (1bd50 <appSlaveForceAdvDataSync+0x5c>)
   1bd1a:	0092      	lsls	r2, r2, #2
   1bd1c:	4413      	add	r3, r2
   1bd1e:	3310      	adds	r3, #16
   1bd20:	2200      	movs	r2, #0
   1bd22:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  appSlaveCb.advDataOffset[advHandle][scanLoc] = 0;
   1bd26:	79fa      	ldrb	r2, [r7, #7]
   1bd28:	7bbb      	ldrb	r3, [r7, #14]
   1bd2a:	4909      	ldr	r1, [pc, #36]	; (1bd50 <appSlaveForceAdvDataSync+0x5c>)
   1bd2c:	0092      	lsls	r2, r2, #2
   1bd2e:	4413      	add	r3, r2
   1bd30:	3310      	adds	r3, #16
   1bd32:	2200      	movs	r2, #0
   1bd34:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  appSlaveCb.advDataSynced[advHandle] = FALSE;
   1bd38:	79fb      	ldrb	r3, [r7, #7]
   1bd3a:	4a05      	ldr	r2, [pc, #20]	; (1bd50 <appSlaveForceAdvDataSync+0x5c>)
   1bd3c:	4413      	add	r3, r2
   1bd3e:	2200      	movs	r2, #0
   1bd40:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
   1bd44:	3714      	adds	r7, #20
   1bd46:	46bd      	mov	sp, r7
   1bd48:	f85d 7b04 	ldr.w	r7, [sp], #4
   1bd4c:	4770      	bx	lr
   1bd4e:	bf00      	nop
   1bd50:	1000a360 	.word	0x1000a360

0001bd54 <appSetAdvScanDataFrag>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSetAdvScanDataFrag(uint8_t advHandle, uint8_t location)
{
   1bd54:	b5b0      	push	{r4, r5, r7, lr}
   1bd56:	b088      	sub	sp, #32
   1bd58:	af02      	add	r7, sp, #8
   1bd5a:	4603      	mov	r3, r0
   1bd5c:	460a      	mov	r2, r1
   1bd5e:	71fb      	strb	r3, [r7, #7]
   1bd60:	4613      	mov	r3, r2
   1bd62:	71bb      	strb	r3, [r7, #6]
  uint8_t  op;
  uint16_t fragLen;
  uint16_t remainLen;
  uint8_t  *pAdvData;
  bool_t   firstFrag = TRUE;
   1bd64:	2301      	movs	r3, #1
   1bd66:	747b      	strb	r3, [r7, #17]

  /* get data pointer and remaining data length */
  pAdvData = appSlaveCb.pAdvData[advHandle][location];
   1bd68:	79fa      	ldrb	r2, [r7, #7]
   1bd6a:	79bb      	ldrb	r3, [r7, #6]
   1bd6c:	493b      	ldr	r1, [pc, #236]	; (1be5c <appSetAdvScanDataFrag+0x108>)
   1bd6e:	0092      	lsls	r2, r2, #2
   1bd70:	4413      	add	r3, r2
   1bd72:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   1bd76:	60fb      	str	r3, [r7, #12]
  remainLen = appSlaveCb.advDataLen[advHandle][location] - appSlaveCb.advDataOffset[advHandle][location];
   1bd78:	79fa      	ldrb	r2, [r7, #7]
   1bd7a:	79bb      	ldrb	r3, [r7, #6]
   1bd7c:	4937      	ldr	r1, [pc, #220]	; (1be5c <appSetAdvScanDataFrag+0x108>)
   1bd7e:	0092      	lsls	r2, r2, #2
   1bd80:	4413      	add	r3, r2
   1bd82:	3308      	adds	r3, #8
   1bd84:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
   1bd88:	79f9      	ldrb	r1, [r7, #7]
   1bd8a:	79bb      	ldrb	r3, [r7, #6]
   1bd8c:	4833      	ldr	r0, [pc, #204]	; (1be5c <appSetAdvScanDataFrag+0x108>)
   1bd8e:	0089      	lsls	r1, r1, #2
   1bd90:	440b      	add	r3, r1
   1bd92:	3310      	adds	r3, #16
   1bd94:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
   1bd98:	1ad3      	subs	r3, r2, r3
   1bd9a:	827b      	strh	r3, [r7, #18]

  /* if remaing data length > max adv data length supported by Controller */
  if (remainLen > appSlaveCb.maxAdvDataLen[advHandle])
   1bd9c:	79fb      	ldrb	r3, [r7, #7]
   1bd9e:	4a2f      	ldr	r2, [pc, #188]	; (1be5c <appSetAdvScanDataFrag+0x108>)
   1bda0:	3314      	adds	r3, #20
   1bda2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   1bda6:	8a7a      	ldrh	r2, [r7, #18]
   1bda8:	429a      	cmp	r2, r3
   1bdaa:	d905      	bls.n	1bdb8 <appSetAdvScanDataFrag+0x64>
  {
    remainLen = appSlaveCb.maxAdvDataLen[advHandle];
   1bdac:	79fb      	ldrb	r3, [r7, #7]
   1bdae:	4a2b      	ldr	r2, [pc, #172]	; (1be5c <appSetAdvScanDataFrag+0x108>)
   1bdb0:	3314      	adds	r3, #20
   1bdb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   1bdb6:	827b      	strh	r3, [r7, #18]
  }

  /* while there remains data to be sent */
  while (remainLen > 0)
   1bdb8:	e049      	b.n	1be4e <appSetAdvScanDataFrag+0xfa>
  {
    /* if remaing data length > max length of extended advertising data (per set adv data command) */
    if (remainLen > HCI_EXT_ADV_DATA_LEN)
   1bdba:	8a7b      	ldrh	r3, [r7, #18]
   1bdbc:	2bfb      	cmp	r3, #251	; 0xfb
   1bdbe:	d909      	bls.n	1bdd4 <appSetAdvScanDataFrag+0x80>
    {
      /* data needs to be fragmented */
      fragLen = HCI_EXT_ADV_DATA_LEN;
   1bdc0:	23fb      	movs	r3, #251	; 0xfb
   1bdc2:	82bb      	strh	r3, [r7, #20]
      op = firstFrag ? HCI_ADV_DATA_OP_FRAG_FIRST : HCI_ADV_DATA_OP_FRAG_INTER;
   1bdc4:	7c7b      	ldrb	r3, [r7, #17]
   1bdc6:	2b00      	cmp	r3, #0
   1bdc8:	bf14      	ite	ne
   1bdca:	2301      	movne	r3, #1
   1bdcc:	2300      	moveq	r3, #0
   1bdce:	b2db      	uxtb	r3, r3
   1bdd0:	75fb      	strb	r3, [r7, #23]
   1bdd2:	e008      	b.n	1bde6 <appSetAdvScanDataFrag+0x92>
      
    }
    else
    {
      /* no fragmentation needed */
      fragLen = remainLen;
   1bdd4:	8a7b      	ldrh	r3, [r7, #18]
   1bdd6:	82bb      	strh	r3, [r7, #20]
      op = firstFrag ? HCI_ADV_DATA_OP_COMP_FRAG : HCI_ADV_DATA_OP_FRAG_LAST;
   1bdd8:	7c7b      	ldrb	r3, [r7, #17]
   1bdda:	2b00      	cmp	r3, #0
   1bddc:	d001      	beq.n	1bde2 <appSetAdvScanDataFrag+0x8e>
   1bdde:	2303      	movs	r3, #3
   1bde0:	e000      	b.n	1bde4 <appSetAdvScanDataFrag+0x90>
   1bde2:	2302      	movs	r3, #2
   1bde4:	75fb      	strb	r3, [r7, #23]
    }

    /* send adv data */
    DmAdvSetData(advHandle, op, APP_LOC_2_DM_LOC(location), (uint8_t)fragLen,
   1bde6:	79bb      	ldrb	r3, [r7, #6]
   1bde8:	f003 0301 	and.w	r3, r3, #1
   1bdec:	b2dd      	uxtb	r5, r3
   1bdee:	8abb      	ldrh	r3, [r7, #20]
   1bdf0:	b2dc      	uxtb	r4, r3
                 &(pAdvData[appSlaveCb.advDataOffset[advHandle][location]]));
   1bdf2:	79fa      	ldrb	r2, [r7, #7]
   1bdf4:	79bb      	ldrb	r3, [r7, #6]
   1bdf6:	4919      	ldr	r1, [pc, #100]	; (1be5c <appSetAdvScanDataFrag+0x108>)
   1bdf8:	0092      	lsls	r2, r2, #2
   1bdfa:	4413      	add	r3, r2
   1bdfc:	3310      	adds	r3, #16
   1bdfe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
      fragLen = remainLen;
      op = firstFrag ? HCI_ADV_DATA_OP_COMP_FRAG : HCI_ADV_DATA_OP_FRAG_LAST;
    }

    /* send adv data */
    DmAdvSetData(advHandle, op, APP_LOC_2_DM_LOC(location), (uint8_t)fragLen,
   1be02:	461a      	mov	r2, r3
   1be04:	68fb      	ldr	r3, [r7, #12]
   1be06:	4413      	add	r3, r2
   1be08:	79f9      	ldrb	r1, [r7, #7]
   1be0a:	7dfa      	ldrb	r2, [r7, #23]
   1be0c:	9300      	str	r3, [sp, #0]
   1be0e:	4608      	mov	r0, r1
   1be10:	4611      	mov	r1, r2
   1be12:	462a      	mov	r2, r5
   1be14:	4623      	mov	r3, r4
   1be16:	f7f2 ff4f 	bl	ecb8 <DmAdvSetData>
                 &(pAdvData[appSlaveCb.advDataOffset[advHandle][location]]));

    /* store adv data offset */
    appSlaveCb.advDataOffset[advHandle][location] += fragLen;
   1be1a:	79fa      	ldrb	r2, [r7, #7]
   1be1c:	79bb      	ldrb	r3, [r7, #6]
   1be1e:	79f8      	ldrb	r0, [r7, #7]
   1be20:	79b9      	ldrb	r1, [r7, #6]
   1be22:	4c0e      	ldr	r4, [pc, #56]	; (1be5c <appSetAdvScanDataFrag+0x108>)
   1be24:	0080      	lsls	r0, r0, #2
   1be26:	4401      	add	r1, r0
   1be28:	3110      	adds	r1, #16
   1be2a:	f834 0011 	ldrh.w	r0, [r4, r1, lsl #1]
   1be2e:	8ab9      	ldrh	r1, [r7, #20]
   1be30:	4401      	add	r1, r0
   1be32:	b288      	uxth	r0, r1
   1be34:	4909      	ldr	r1, [pc, #36]	; (1be5c <appSetAdvScanDataFrag+0x108>)
   1be36:	0092      	lsls	r2, r2, #2
   1be38:	4413      	add	r3, r2
   1be3a:	3310      	adds	r3, #16
   1be3c:	4602      	mov	r2, r0
   1be3e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    /* update remaining data length */
    remainLen -= fragLen;
   1be42:	8a7a      	ldrh	r2, [r7, #18]
   1be44:	8abb      	ldrh	r3, [r7, #20]
   1be46:	1ad3      	subs	r3, r2, r3
   1be48:	827b      	strh	r3, [r7, #18]
    firstFrag = FALSE;
   1be4a:	2300      	movs	r3, #0
   1be4c:	747b      	strb	r3, [r7, #17]
  {
    remainLen = appSlaveCb.maxAdvDataLen[advHandle];
  }

  /* while there remains data to be sent */
  while (remainLen > 0)
   1be4e:	8a7b      	ldrh	r3, [r7, #18]
   1be50:	2b00      	cmp	r3, #0
   1be52:	d1b2      	bne.n	1bdba <appSetAdvScanDataFrag+0x66>

    /* update remaining data length */
    remainLen -= fragLen;
    firstFrag = FALSE;
  }
}
   1be54:	3718      	adds	r7, #24
   1be56:	46bd      	mov	sp, r7
   1be58:	bdb0      	pop	{r4, r5, r7, pc}
   1be5a:	bf00      	nop
   1be5c:	1000a360 	.word	0x1000a360

0001be60 <appSetAdvScanData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSetAdvScanData(uint8_t advHandle, uint8_t mode)
{
   1be60:	b580      	push	{r7, lr}
   1be62:	b084      	sub	sp, #16
   1be64:	af00      	add	r7, sp, #0
   1be66:	4603      	mov	r3, r0
   1be68:	460a      	mov	r2, r1
   1be6a:	71fb      	strb	r3, [r7, #7]
   1be6c:	4613      	mov	r3, r2
   1be6e:	71bb      	strb	r3, [r7, #6]
  uint8_t advLoc;
  uint8_t scanLoc;

  /* get advertising/scan data location based on mode */
  advLoc = APP_MODE_2_ADV_LOC(mode);
   1be70:	79bb      	ldrb	r3, [r7, #6]
   1be72:	005b      	lsls	r3, r3, #1
   1be74:	73fb      	strb	r3, [r7, #15]
  scanLoc = APP_MODE_2_SCAN_LOC(mode);
   1be76:	79bb      	ldrb	r3, [r7, #6]
   1be78:	005b      	lsls	r3, r3, #1
   1be7a:	b2db      	uxtb	r3, r3
   1be7c:	3301      	adds	r3, #1
   1be7e:	73bb      	strb	r3, [r7, #14]

  /* set advertising data */
  if (appSlaveCb.advDataOffset[advHandle][advLoc] < appSlaveCb.advDataLen[advHandle][advLoc])
   1be80:	79fa      	ldrb	r2, [r7, #7]
   1be82:	7bfb      	ldrb	r3, [r7, #15]
   1be84:	492d      	ldr	r1, [pc, #180]	; (1bf3c <appSetAdvScanData+0xdc>)
   1be86:	0092      	lsls	r2, r2, #2
   1be88:	4413      	add	r3, r2
   1be8a:	3310      	adds	r3, #16
   1be8c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
   1be90:	79f9      	ldrb	r1, [r7, #7]
   1be92:	7bfb      	ldrb	r3, [r7, #15]
   1be94:	4829      	ldr	r0, [pc, #164]	; (1bf3c <appSetAdvScanData+0xdc>)
   1be96:	0089      	lsls	r1, r1, #2
   1be98:	440b      	add	r3, r1
   1be9a:	3308      	adds	r3, #8
   1be9c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
   1bea0:	429a      	cmp	r2, r3
   1bea2:	d205      	bcs.n	1beb0 <appSetAdvScanData+0x50>
  {
    appSetAdvScanDataFrag(advHandle, advLoc);
   1bea4:	79fa      	ldrb	r2, [r7, #7]
   1bea6:	7bfb      	ldrb	r3, [r7, #15]
   1bea8:	4610      	mov	r0, r2
   1beaa:	4619      	mov	r1, r3
   1beac:	f7ff ff52 	bl	1bd54 <appSetAdvScanDataFrag>
  }

  /* set scan data */
  if (appSlaveCb.advDataOffset[advHandle][scanLoc] < appSlaveCb.advDataLen[advHandle][scanLoc])
   1beb0:	79fa      	ldrb	r2, [r7, #7]
   1beb2:	7bbb      	ldrb	r3, [r7, #14]
   1beb4:	4921      	ldr	r1, [pc, #132]	; (1bf3c <appSetAdvScanData+0xdc>)
   1beb6:	0092      	lsls	r2, r2, #2
   1beb8:	4413      	add	r3, r2
   1beba:	3310      	adds	r3, #16
   1bebc:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
   1bec0:	79f9      	ldrb	r1, [r7, #7]
   1bec2:	7bbb      	ldrb	r3, [r7, #14]
   1bec4:	481d      	ldr	r0, [pc, #116]	; (1bf3c <appSetAdvScanData+0xdc>)
   1bec6:	0089      	lsls	r1, r1, #2
   1bec8:	440b      	add	r3, r1
   1beca:	3308      	adds	r3, #8
   1becc:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
   1bed0:	429a      	cmp	r2, r3
   1bed2:	d205      	bcs.n	1bee0 <appSetAdvScanData+0x80>
  {
    appSetAdvScanDataFrag(advHandle, scanLoc);
   1bed4:	79fa      	ldrb	r2, [r7, #7]
   1bed6:	7bbb      	ldrb	r3, [r7, #14]
   1bed8:	4610      	mov	r0, r2
   1beda:	4619      	mov	r1, r3
   1bedc:	f7ff ff3a 	bl	1bd54 <appSetAdvScanDataFrag>
  }

  /* if all advertising/scan data have been sent */
  if ((appSlaveCb.advDataOffset[advHandle][advLoc] >= appSlaveCb.advDataLen[advHandle][advLoc]) &&
   1bee0:	79fa      	ldrb	r2, [r7, #7]
   1bee2:	7bfb      	ldrb	r3, [r7, #15]
   1bee4:	4915      	ldr	r1, [pc, #84]	; (1bf3c <appSetAdvScanData+0xdc>)
   1bee6:	0092      	lsls	r2, r2, #2
   1bee8:	4413      	add	r3, r2
   1beea:	3310      	adds	r3, #16
   1beec:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
   1bef0:	79f9      	ldrb	r1, [r7, #7]
   1bef2:	7bfb      	ldrb	r3, [r7, #15]
   1bef4:	4811      	ldr	r0, [pc, #68]	; (1bf3c <appSetAdvScanData+0xdc>)
   1bef6:	0089      	lsls	r1, r1, #2
   1bef8:	440b      	add	r3, r1
   1befa:	3308      	adds	r3, #8
   1befc:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
   1bf00:	429a      	cmp	r2, r3
   1bf02:	d317      	bcc.n	1bf34 <appSetAdvScanData+0xd4>
      (appSlaveCb.advDataOffset[advHandle][scanLoc] >= appSlaveCb.advDataLen[advHandle][scanLoc]))
   1bf04:	79fa      	ldrb	r2, [r7, #7]
   1bf06:	7bbb      	ldrb	r3, [r7, #14]
   1bf08:	490c      	ldr	r1, [pc, #48]	; (1bf3c <appSetAdvScanData+0xdc>)
   1bf0a:	0092      	lsls	r2, r2, #2
   1bf0c:	4413      	add	r3, r2
   1bf0e:	3310      	adds	r3, #16
   1bf10:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
   1bf14:	79f9      	ldrb	r1, [r7, #7]
   1bf16:	7bbb      	ldrb	r3, [r7, #14]
   1bf18:	4808      	ldr	r0, [pc, #32]	; (1bf3c <appSetAdvScanData+0xdc>)
   1bf1a:	0089      	lsls	r1, r1, #2
   1bf1c:	440b      	add	r3, r1
   1bf1e:	3308      	adds	r3, #8
   1bf20:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
  {
    appSetAdvScanDataFrag(advHandle, scanLoc);
  }

  /* if all advertising/scan data have been sent */
  if ((appSlaveCb.advDataOffset[advHandle][advLoc] >= appSlaveCb.advDataLen[advHandle][advLoc]) &&
   1bf24:	429a      	cmp	r2, r3
   1bf26:	d305      	bcc.n	1bf34 <appSetAdvScanData+0xd4>
      (appSlaveCb.advDataOffset[advHandle][scanLoc] >= appSlaveCb.advDataLen[advHandle][scanLoc]))
  {
    appSlaveCb.advDataSynced[advHandle] = TRUE;
   1bf28:	79fb      	ldrb	r3, [r7, #7]
   1bf2a:	4a04      	ldr	r2, [pc, #16]	; (1bf3c <appSetAdvScanData+0xdc>)
   1bf2c:	4413      	add	r3, r2
   1bf2e:	2201      	movs	r2, #1
   1bf30:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  }
}
   1bf34:	3710      	adds	r7, #16
   1bf36:	46bd      	mov	sp, r7
   1bf38:	bd80      	pop	{r7, pc}
   1bf3a:	bf00      	nop
   1bf3c:	1000a360 	.word	0x1000a360

0001bf40 <appConnUpdateTimerStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appConnUpdateTimerStart(dmConnId_t connId)
{
   1bf40:	b580      	push	{r7, lr}
   1bf42:	b084      	sub	sp, #16
   1bf44:	af00      	add	r7, sp, #0
   1bf46:	4603      	mov	r3, r0
   1bf48:	71fb      	strb	r3, [r7, #7]
  /* look up app connection control block from DM connection ID */
  appConnCb_t *pCb = &appConnCb[connId - 1];
   1bf4a:	79fb      	ldrb	r3, [r7, #7]
   1bf4c:	3b01      	subs	r3, #1
   1bf4e:	015b      	lsls	r3, r3, #5
   1bf50:	4a0d      	ldr	r2, [pc, #52]	; (1bf88 <appConnUpdateTimerStart+0x48>)
   1bf52:	4413      	add	r3, r2
   1bf54:	60fb      	str	r3, [r7, #12]

  pCb->updateTimer.handlerId = appHandlerId;
   1bf56:	4b0d      	ldr	r3, [pc, #52]	; (1bf8c <appConnUpdateTimerStart+0x4c>)
   1bf58:	781a      	ldrb	r2, [r3, #0]
   1bf5a:	68fb      	ldr	r3, [r7, #12]
   1bf5c:	761a      	strb	r2, [r3, #24]
  pCb->updateTimer.msg.event = APP_CONN_UPDATE_TIMEOUT_IND;
   1bf5e:	68fb      	ldr	r3, [r7, #12]
   1bf60:	2210      	movs	r2, #16
   1bf62:	771a      	strb	r2, [r3, #28]
  pCb->updateTimer.msg.param = connId;
   1bf64:	79fb      	ldrb	r3, [r7, #7]
   1bf66:	b29a      	uxth	r2, r3
   1bf68:	68fb      	ldr	r3, [r7, #12]
   1bf6a:	835a      	strh	r2, [r3, #26]
  WsfTimerStartMs(&pCb->updateTimer, pAppUpdateCfg->idlePeriod);
   1bf6c:	68fb      	ldr	r3, [r7, #12]
   1bf6e:	f103 0210 	add.w	r2, r3, #16
   1bf72:	4b07      	ldr	r3, [pc, #28]	; (1bf90 <appConnUpdateTimerStart+0x50>)
   1bf74:	681b      	ldr	r3, [r3, #0]
   1bf76:	681b      	ldr	r3, [r3, #0]
   1bf78:	4610      	mov	r0, r2
   1bf7a:	4619      	mov	r1, r3
   1bf7c:	f7fd faa0 	bl	194c0 <WsfTimerStartMs>
}
   1bf80:	3710      	adds	r7, #16
   1bf82:	46bd      	mov	sp, r7
   1bf84:	bd80      	pop	{r7, pc}
   1bf86:	bf00      	nop
   1bf88:	1000a260 	.word	0x1000a260
   1bf8c:	1000a24c 	.word	0x1000a24c
   1bf90:	1000a234 	.word	0x1000a234

0001bf94 <appConnUpdateTimerStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appConnUpdateTimerStop(appConnCb_t *pCb)
{
   1bf94:	b580      	push	{r7, lr}
   1bf96:	b082      	sub	sp, #8
   1bf98:	af00      	add	r7, sp, #0
   1bf9a:	6078      	str	r0, [r7, #4]
  /* stop connection update timer */
  if (pAppUpdateCfg->idlePeriod != 0)
   1bf9c:	4b06      	ldr	r3, [pc, #24]	; (1bfb8 <appConnUpdateTimerStop+0x24>)
   1bf9e:	681b      	ldr	r3, [r3, #0]
   1bfa0:	681b      	ldr	r3, [r3, #0]
   1bfa2:	2b00      	cmp	r3, #0
   1bfa4:	d004      	beq.n	1bfb0 <appConnUpdateTimerStop+0x1c>
  {
    WsfTimerStop(&pCb->updateTimer);
   1bfa6:	687b      	ldr	r3, [r7, #4]
   1bfa8:	3310      	adds	r3, #16
   1bfaa:	4618      	mov	r0, r3
   1bfac:	f7fd fa9c 	bl	194e8 <WsfTimerStop>
  }  
}
   1bfb0:	3708      	adds	r7, #8
   1bfb2:	46bd      	mov	sp, r7
   1bfb4:	bd80      	pop	{r7, pc}
   1bfb6:	bf00      	nop
   1bfb8:	1000a234 	.word	0x1000a234

0001bfbc <appSlaveResolveAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveResolveAddr(dmEvt_t *pMsg)
{
   1bfbc:	b580      	push	{r7, lr}
   1bfbe:	b084      	sub	sp, #16
   1bfc0:	af00      	add	r7, sp, #0
   1bfc2:	6078      	str	r0, [r7, #4]
  appDbHdl_t hdl;
  dmSecKey_t *pPeerKey;

  /* if address resolution's in progress */
  if (appSlaveCb.inProgress)
   1bfc4:	4b17      	ldr	r3, [pc, #92]	; (1c024 <appSlaveResolveAddr+0x68>)
   1bfc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   1bfca:	2b00      	cmp	r3, #0
   1bfcc:	d000      	beq.n	1bfd0 <appSlaveResolveAddr+0x14>
  {
    return;
   1bfce:	e025      	b.n	1c01c <appSlaveResolveAddr+0x60>
  }

  /* get the first database record */
  hdl = AppDbGetNextRecord(APP_DB_HDL_NONE);
   1bfd0:	2000      	movs	r0, #0
   1bfd2:	f7fd fb65 	bl	196a0 <AppDbGetNextRecord>
   1bfd6:	60f8      	str	r0, [r7, #12]

  /* if we have any bond records */
  if ((hdl != APP_DB_HDL_NONE) && ((pPeerKey = AppDbGetKey(hdl, DM_KEY_IRK, NULL)) != NULL))
   1bfd8:	68fb      	ldr	r3, [r7, #12]
   1bfda:	2b00      	cmp	r3, #0
   1bfdc:	d01e      	beq.n	1c01c <appSlaveResolveAddr+0x60>
   1bfde:	68f8      	ldr	r0, [r7, #12]
   1bfe0:	2104      	movs	r1, #4
   1bfe2:	2200      	movs	r2, #0
   1bfe4:	f7fd fc96 	bl	19914 <AppDbGetKey>
   1bfe8:	60b8      	str	r0, [r7, #8]
   1bfea:	68bb      	ldr	r3, [r7, #8]
   1bfec:	2b00      	cmp	r3, #0
   1bfee:	d015      	beq.n	1c01c <appSlaveResolveAddr+0x60>
  {
    /* reslove advertiser's RPA to see if we already have a bond with this device */
    DmPrivResolveAddr(pMsg->connOpen.peerAddr, pPeerKey->irk.key, pMsg->hdr.param);
   1bff0:	687b      	ldr	r3, [r7, #4]
   1bff2:	f103 010a 	add.w	r1, r3, #10
   1bff6:	68ba      	ldr	r2, [r7, #8]
   1bff8:	687b      	ldr	r3, [r7, #4]
   1bffa:	881b      	ldrh	r3, [r3, #0]
   1bffc:	4608      	mov	r0, r1
   1bffe:	4611      	mov	r1, r2
   1c000:	461a      	mov	r2, r3
   1c002:	f7f3 ffc5 	bl	ff90 <DmPrivResolveAddr>

    /* store database record handle for later */
    appSlaveCb.dbHdl = hdl;
   1c006:	4a07      	ldr	r2, [pc, #28]	; (1c024 <appSlaveResolveAddr+0x68>)
   1c008:	68fb      	ldr	r3, [r7, #12]
   1c00a:	6393      	str	r3, [r2, #56]	; 0x38
    appSlaveCb.inProgress = TRUE;
   1c00c:	4b05      	ldr	r3, [pc, #20]	; (1c024 <appSlaveResolveAddr+0x68>)
   1c00e:	2201      	movs	r2, #1
   1c010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    appSlaveCb.findLtk = FALSE;
   1c014:	4b03      	ldr	r3, [pc, #12]	; (1c024 <appSlaveResolveAddr+0x68>)
   1c016:	2200      	movs	r2, #0
   1c018:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
  }
}
   1c01c:	3710      	adds	r7, #16
   1c01e:	46bd      	mov	sp, r7
   1c020:	bd80      	pop	{r7, pc}
   1c022:	bf00      	nop
   1c024:	1000a360 	.word	0x1000a360

0001c028 <appSecRspLtk>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecRspLtk(appConnCb_t *pCb)
{
   1c028:	b580      	push	{r7, lr}
   1c02a:	b084      	sub	sp, #16
   1c02c:	af00      	add	r7, sp, #0
   1c02e:	6078      	str	r0, [r7, #4]
  dmSecKey_t  *pKey = NULL;
   1c030:	2300      	movs	r3, #0
   1c032:	60fb      	str	r3, [r7, #12]
  uint8_t     secLevel;

  /* if there is a record */
  if (pCb->dbHdl != APP_DB_HDL_NONE)
   1c034:	687b      	ldr	r3, [r7, #4]
   1c036:	681b      	ldr	r3, [r3, #0]
   1c038:	2b00      	cmp	r3, #0
   1c03a:	d009      	beq.n	1c050 <appSecRspLtk+0x28>
  {
    /* get ltk */
    pKey = AppDbGetKey(pCb->dbHdl, DM_KEY_LOCAL_LTK, &secLevel);
   1c03c:	687b      	ldr	r3, [r7, #4]
   1c03e:	681a      	ldr	r2, [r3, #0]
   1c040:	f107 030b 	add.w	r3, r7, #11
   1c044:	4610      	mov	r0, r2
   1c046:	2101      	movs	r1, #1
   1c048:	461a      	mov	r2, r3
   1c04a:	f7fd fc63 	bl	19914 <AppDbGetKey>
   1c04e:	60f8      	str	r0, [r7, #12]
  }

  if (pKey != NULL)
   1c050:	68fb      	ldr	r3, [r7, #12]
   1c052:	2b00      	cmp	r3, #0
   1c054:	d012      	beq.n	1c07c <appSecRspLtk+0x54>
  {
    /* if not bonded we need to update bonding state when encrypted */
    pCb->bondByLtk = !pCb->bonded;
   1c056:	687b      	ldr	r3, [r7, #4]
   1c058:	795b      	ldrb	r3, [r3, #5]
   1c05a:	2b00      	cmp	r3, #0
   1c05c:	bf0c      	ite	eq
   1c05e:	2301      	moveq	r3, #1
   1c060:	2300      	movne	r3, #0
   1c062:	b2db      	uxtb	r3, r3
   1c064:	461a      	mov	r2, r3
   1c066:	687b      	ldr	r3, [r7, #4]
   1c068:	719a      	strb	r2, [r3, #6]

    /* we found the key */
    DmSecLtkRsp(pCb->connId, TRUE, secLevel, pKey->ltk.key);
   1c06a:	687b      	ldr	r3, [r7, #4]
   1c06c:	7919      	ldrb	r1, [r3, #4]
   1c06e:	7afa      	ldrb	r2, [r7, #11]
   1c070:	68fb      	ldr	r3, [r7, #12]
   1c072:	4608      	mov	r0, r1
   1c074:	2101      	movs	r1, #1
   1c076:	f7f4 faaa 	bl	105ce <DmSecLtkRsp>
   1c07a:	e00a      	b.n	1c092 <appSecRspLtk+0x6a>
  }
  else
  {
    pCb->bondByLtk = FALSE;
   1c07c:	687b      	ldr	r3, [r7, #4]
   1c07e:	2200      	movs	r2, #0
   1c080:	719a      	strb	r2, [r3, #6]

    /* key not found */
    DmSecLtkRsp(pCb->connId, FALSE, 0, NULL);
   1c082:	687b      	ldr	r3, [r7, #4]
   1c084:	791b      	ldrb	r3, [r3, #4]
   1c086:	4618      	mov	r0, r3
   1c088:	2100      	movs	r1, #0
   1c08a:	2200      	movs	r2, #0
   1c08c:	2300      	movs	r3, #0
   1c08e:	f7f4 fa9e 	bl	105ce <DmSecLtkRsp>
  }
}
   1c092:	3710      	adds	r7, #16
   1c094:	46bd      	mov	sp, r7
   1c096:	bd80      	pop	{r7, pc}

0001c098 <appSlaveConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveConnOpen(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1c098:	b580      	push	{r7, lr}
   1c09a:	b082      	sub	sp, #8
   1c09c:	af00      	add	r7, sp, #0
   1c09e:	6078      	str	r0, [r7, #4]
   1c0a0:	6039      	str	r1, [r7, #0]
  /* process connection open event */
  appSlaveProcConnOpen(pMsg, pCb);
   1c0a2:	6878      	ldr	r0, [r7, #4]
   1c0a4:	6839      	ldr	r1, [r7, #0]
   1c0a6:	f000 f83d 	bl	1c124 <appSlaveProcConnOpen>

  if (appSlaveCb.advRestartCback != NULL)
   1c0aa:	4b05      	ldr	r3, [pc, #20]	; (1c0c0 <appSlaveConnOpen+0x28>)
   1c0ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1c0ae:	2b00      	cmp	r3, #0
   1c0b0:	d003      	beq.n	1c0ba <appSlaveConnOpen+0x22>
  {
    /* restart advertising */
    (*appSlaveCb.advRestartCback)(pMsg);
   1c0b2:	4b03      	ldr	r3, [pc, #12]	; (1c0c0 <appSlaveConnOpen+0x28>)
   1c0b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1c0b6:	6878      	ldr	r0, [r7, #4]
   1c0b8:	4798      	blx	r3
  }
}
   1c0ba:	3708      	adds	r7, #8
   1c0bc:	46bd      	mov	sp, r7
   1c0be:	bd80      	pop	{r7, pc}
   1c0c0:	1000a360 	.word	0x1000a360

0001c0c4 <appSlaveConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveConnClose(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1c0c4:	b580      	push	{r7, lr}
   1c0c6:	b084      	sub	sp, #16
   1c0c8:	af00      	add	r7, sp, #0
   1c0ca:	6078      	str	r0, [r7, #4]
   1c0cc:	6039      	str	r1, [r7, #0]
  uint8_t i;

  /* update privacy mode for peer device */
  AppUpdatePrivacyMode(pCb->dbHdl);
   1c0ce:	683b      	ldr	r3, [r7, #0]
   1c0d0:	681b      	ldr	r3, [r3, #0]
   1c0d2:	4618      	mov	r0, r3
   1c0d4:	f7ff fcf2 	bl	1babc <AppUpdatePrivacyMode>

  /* if actually advertising has timed out (for high duty cycle connectable directed advertising) */
  if (pMsg->hdr.status == HCI_ERR_ADV_TIMEOUT)
   1c0d8:	687b      	ldr	r3, [r7, #4]
   1c0da:	78db      	ldrb	r3, [r3, #3]
   1c0dc:	2b3c      	cmp	r3, #60	; 0x3c
   1c0de:	d10f      	bne.n	1c100 <appSlaveConnClose+0x3c>
  {
    for (i = 0; i < DM_NUM_ADV_SETS; i++)
   1c0e0:	2300      	movs	r3, #0
   1c0e2:	73fb      	strb	r3, [r7, #15]
   1c0e4:	e008      	b.n	1c0f8 <appSlaveConnClose+0x34>
    {
      /* done advertising */
      appSlaveCb.advState[i] = APP_ADV_STOPPED;
   1c0e6:	7bfb      	ldrb	r3, [r7, #15]
   1c0e8:	4a0d      	ldr	r2, [pc, #52]	; (1c120 <appSlaveConnClose+0x5c>)
   1c0ea:	4413      	add	r3, r2
   1c0ec:	2203      	movs	r2, #3
   1c0ee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  AppUpdatePrivacyMode(pCb->dbHdl);

  /* if actually advertising has timed out (for high duty cycle connectable directed advertising) */
  if (pMsg->hdr.status == HCI_ERR_ADV_TIMEOUT)
  {
    for (i = 0; i < DM_NUM_ADV_SETS; i++)
   1c0f2:	7bfb      	ldrb	r3, [r7, #15]
   1c0f4:	3301      	adds	r3, #1
   1c0f6:	73fb      	strb	r3, [r7, #15]
   1c0f8:	7bfb      	ldrb	r3, [r7, #15]
   1c0fa:	2b00      	cmp	r3, #0
   1c0fc:	d0f3      	beq.n	1c0e6 <appSlaveConnClose+0x22>
   1c0fe:	e00b      	b.n	1c118 <appSlaveConnClose+0x54>
    }
  }
  else
  {
    /* process connection close event */
    appSlaveProcConnClose(pMsg, pCb);
   1c100:	6878      	ldr	r0, [r7, #4]
   1c102:	6839      	ldr	r1, [r7, #0]
   1c104:	f000 f84a 	bl	1c19c <appSlaveProcConnClose>

    if (appSlaveCb.advRestartCback != NULL)
   1c108:	4b05      	ldr	r3, [pc, #20]	; (1c120 <appSlaveConnClose+0x5c>)
   1c10a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1c10c:	2b00      	cmp	r3, #0
   1c10e:	d003      	beq.n	1c118 <appSlaveConnClose+0x54>
    {
      /* restart advertising */
      (*appSlaveCb.advRestartCback)(pMsg);
   1c110:	4b03      	ldr	r3, [pc, #12]	; (1c120 <appSlaveConnClose+0x5c>)
   1c112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1c114:	6878      	ldr	r0, [r7, #4]
   1c116:	4798      	blx	r3
    }
  }
}
   1c118:	3710      	adds	r7, #16
   1c11a:	46bd      	mov	sp, r7
   1c11c:	bd80      	pop	{r7, pc}
   1c11e:	bf00      	nop
   1c120:	1000a360 	.word	0x1000a360

0001c124 <appSlaveProcConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveProcConnOpen(dmEvt_t *pMsg, appConnCb_t *pCb)
{ 
   1c124:	b580      	push	{r7, lr}
   1c126:	b082      	sub	sp, #8
   1c128:	af00      	add	r7, sp, #0
   1c12a:	6078      	str	r0, [r7, #4]
   1c12c:	6039      	str	r1, [r7, #0]
  /* store connection ID */
  pCb->connId = (dmConnId_t) pMsg->hdr.param;
   1c12e:	687b      	ldr	r3, [r7, #4]
   1c130:	881b      	ldrh	r3, [r3, #0]
   1c132:	b2da      	uxtb	r2, r3
   1c134:	683b      	ldr	r3, [r7, #0]
   1c136:	711a      	strb	r2, [r3, #4]
  
  /* check if we should do connection parameter update */
  if ((pAppUpdateCfg->idlePeriod != 0) &&
   1c138:	4b17      	ldr	r3, [pc, #92]	; (1c198 <appSlaveProcConnOpen+0x74>)
   1c13a:	681b      	ldr	r3, [r3, #0]
   1c13c:	681b      	ldr	r3, [r3, #0]
   1c13e:	2b00      	cmp	r3, #0
   1c140:	d026      	beq.n	1c190 <appSlaveProcConnOpen+0x6c>
      ((pMsg->connOpen.connInterval < pAppUpdateCfg->connIntervalMin) ||
   1c142:	687b      	ldr	r3, [r7, #4]
   1c144:	8a1a      	ldrh	r2, [r3, #16]
   1c146:	4b14      	ldr	r3, [pc, #80]	; (1c198 <appSlaveProcConnOpen+0x74>)
   1c148:	681b      	ldr	r3, [r3, #0]
   1c14a:	889b      	ldrh	r3, [r3, #4]
{ 
  /* store connection ID */
  pCb->connId = (dmConnId_t) pMsg->hdr.param;
  
  /* check if we should do connection parameter update */
  if ((pAppUpdateCfg->idlePeriod != 0) &&
   1c14c:	429a      	cmp	r2, r3
   1c14e:	d314      	bcc.n	1c17a <appSlaveProcConnOpen+0x56>
      ((pMsg->connOpen.connInterval < pAppUpdateCfg->connIntervalMin) ||
       (pMsg->connOpen.connInterval > pAppUpdateCfg->connIntervalMax) ||
   1c150:	687b      	ldr	r3, [r7, #4]
   1c152:	8a1a      	ldrh	r2, [r3, #16]
   1c154:	4b10      	ldr	r3, [pc, #64]	; (1c198 <appSlaveProcConnOpen+0x74>)
   1c156:	681b      	ldr	r3, [r3, #0]
   1c158:	88db      	ldrh	r3, [r3, #6]
  /* store connection ID */
  pCb->connId = (dmConnId_t) pMsg->hdr.param;
  
  /* check if we should do connection parameter update */
  if ((pAppUpdateCfg->idlePeriod != 0) &&
      ((pMsg->connOpen.connInterval < pAppUpdateCfg->connIntervalMin) ||
   1c15a:	429a      	cmp	r2, r3
   1c15c:	d80d      	bhi.n	1c17a <appSlaveProcConnOpen+0x56>
       (pMsg->connOpen.connInterval > pAppUpdateCfg->connIntervalMax) ||
       (pMsg->connOpen.connLatency != pAppUpdateCfg->connLatency) ||
   1c15e:	687b      	ldr	r3, [r7, #4]
   1c160:	8a5a      	ldrh	r2, [r3, #18]
   1c162:	4b0d      	ldr	r3, [pc, #52]	; (1c198 <appSlaveProcConnOpen+0x74>)
   1c164:	681b      	ldr	r3, [r3, #0]
   1c166:	891b      	ldrh	r3, [r3, #8]
  pCb->connId = (dmConnId_t) pMsg->hdr.param;
  
  /* check if we should do connection parameter update */
  if ((pAppUpdateCfg->idlePeriod != 0) &&
      ((pMsg->connOpen.connInterval < pAppUpdateCfg->connIntervalMin) ||
       (pMsg->connOpen.connInterval > pAppUpdateCfg->connIntervalMax) ||
   1c168:	429a      	cmp	r2, r3
   1c16a:	d106      	bne.n	1c17a <appSlaveProcConnOpen+0x56>
       (pMsg->connOpen.connLatency != pAppUpdateCfg->connLatency) ||
       (pMsg->connOpen.supTimeout != pAppUpdateCfg->supTimeout)))
   1c16c:	687b      	ldr	r3, [r7, #4]
   1c16e:	8a9a      	ldrh	r2, [r3, #20]
   1c170:	4b09      	ldr	r3, [pc, #36]	; (1c198 <appSlaveProcConnOpen+0x74>)
   1c172:	681b      	ldr	r3, [r3, #0]
   1c174:	895b      	ldrh	r3, [r3, #10]
  
  /* check if we should do connection parameter update */
  if ((pAppUpdateCfg->idlePeriod != 0) &&
      ((pMsg->connOpen.connInterval < pAppUpdateCfg->connIntervalMin) ||
       (pMsg->connOpen.connInterval > pAppUpdateCfg->connIntervalMax) ||
       (pMsg->connOpen.connLatency != pAppUpdateCfg->connLatency) ||
   1c176:	429a      	cmp	r2, r3
   1c178:	d00a      	beq.n	1c190 <appSlaveProcConnOpen+0x6c>
       (pMsg->connOpen.supTimeout != pAppUpdateCfg->supTimeout)))
  {
    pCb->connWasIdle = FALSE;
   1c17a:	683b      	ldr	r3, [r7, #0]
   1c17c:	2200      	movs	r2, #0
   1c17e:	729a      	strb	r2, [r3, #10]
    pCb->attempts = 0;
   1c180:	683b      	ldr	r3, [r7, #0]
   1c182:	2200      	movs	r2, #0
   1c184:	731a      	strb	r2, [r3, #12]
    appConnUpdateTimerStart(pCb->connId);
   1c186:	683b      	ldr	r3, [r7, #0]
   1c188:	791b      	ldrb	r3, [r3, #4]
   1c18a:	4618      	mov	r0, r3
   1c18c:	f7ff fed8 	bl	1bf40 <appConnUpdateTimerStart>
  }
}
   1c190:	3708      	adds	r7, #8
   1c192:	46bd      	mov	sp, r7
   1c194:	bd80      	pop	{r7, pc}
   1c196:	bf00      	nop
   1c198:	1000a234 	.word	0x1000a234

0001c19c <appSlaveProcConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveProcConnClose(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1c19c:	b580      	push	{r7, lr}
   1c19e:	b084      	sub	sp, #16
   1c1a0:	af00      	add	r7, sp, #0
   1c1a2:	6078      	str	r0, [r7, #4]
   1c1a4:	6039      	str	r1, [r7, #0]
  uint8_t i;

  /* stop connection update timer */
  appConnUpdateTimerStop(pCb);
   1c1a6:	6838      	ldr	r0, [r7, #0]
   1c1a8:	f7ff fef4 	bl	1bf94 <appConnUpdateTimerStop>
  
  /* clear connection ID */
  pCb->connId = DM_CONN_ID_NONE;
   1c1ac:	683b      	ldr	r3, [r7, #0]
   1c1ae:	2200      	movs	r2, #0
   1c1b0:	711a      	strb	r2, [r3, #4]

  /* clear update state */
  pCb->updateState = APP_CU_STATE_NONE;
   1c1b2:	683b      	ldr	r3, [r7, #0]
   1c1b4:	2200      	movs	r2, #0
   1c1b6:	735a      	strb	r2, [r3, #13]

  /* cancel any address resolution in progress */
  appSlaveCb.inProgress = FALSE;
   1c1b8:	4b0f      	ldr	r3, [pc, #60]	; (1c1f8 <appSlaveProcConnClose+0x5c>)
   1c1ba:	2200      	movs	r2, #0
   1c1bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if switching to connectable mode then set it up */
  if (pCb->setConnectable)
   1c1c0:	683b      	ldr	r3, [r7, #0]
   1c1c2:	7a5b      	ldrb	r3, [r3, #9]
   1c1c4:	2b00      	cmp	r3, #0
   1c1c6:	d014      	beq.n	1c1f2 <appSlaveProcConnClose+0x56>
  {
    pCb->setConnectable = FALSE;
   1c1c8:	683b      	ldr	r3, [r7, #0]
   1c1ca:	2200      	movs	r2, #0
   1c1cc:	725a      	strb	r2, [r3, #9]
    appSlaveCb.discMode = APP_MODE_CONNECTABLE;
   1c1ce:	4b0a      	ldr	r3, [pc, #40]	; (1c1f8 <appSlaveProcConnClose+0x5c>)
   1c1d0:	2200      	movs	r2, #0
   1c1d2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    
    /* for each advertising set */
    for (i = 0; i < DM_NUM_ADV_SETS; i++)
   1c1d6:	2300      	movs	r3, #0
   1c1d8:	73fb      	strb	r3, [r7, #15]
   1c1da:	e007      	b.n	1c1ec <appSlaveProcConnClose+0x50>
    {
      /* force update of advertising data */
      appSlaveForceAdvDataSync(i, APP_MODE_CONNECTABLE);
   1c1dc:	7bfb      	ldrb	r3, [r7, #15]
   1c1de:	4618      	mov	r0, r3
   1c1e0:	2100      	movs	r1, #0
   1c1e2:	f7ff fd87 	bl	1bcf4 <appSlaveForceAdvDataSync>
  {
    pCb->setConnectable = FALSE;
    appSlaveCb.discMode = APP_MODE_CONNECTABLE;
    
    /* for each advertising set */
    for (i = 0; i < DM_NUM_ADV_SETS; i++)
   1c1e6:	7bfb      	ldrb	r3, [r7, #15]
   1c1e8:	3301      	adds	r3, #1
   1c1ea:	73fb      	strb	r3, [r7, #15]
   1c1ec:	7bfb      	ldrb	r3, [r7, #15]
   1c1ee:	2b00      	cmp	r3, #0
   1c1f0:	d0f4      	beq.n	1c1dc <appSlaveProcConnClose+0x40>
    {
      /* force update of advertising data */
      appSlaveForceAdvDataSync(i, APP_MODE_CONNECTABLE);
    }
  }
}
   1c1f2:	3710      	adds	r7, #16
   1c1f4:	46bd      	mov	sp, r7
   1c1f6:	bd80      	pop	{r7, pc}
   1c1f8:	1000a360 	.word	0x1000a360

0001c1fc <appSlaveConnUpdate>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveConnUpdate(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1c1fc:	b580      	push	{r7, lr}
   1c1fe:	b082      	sub	sp, #8
   1c200:	af00      	add	r7, sp, #0
   1c202:	6078      	str	r0, [r7, #4]
   1c204:	6039      	str	r1, [r7, #0]
  if (pAppUpdateCfg->idlePeriod != 0)
   1c206:	4b1a      	ldr	r3, [pc, #104]	; (1c270 <appSlaveConnUpdate+0x74>)
   1c208:	681b      	ldr	r3, [r3, #0]
   1c20a:	681b      	ldr	r3, [r3, #0]
   1c20c:	2b00      	cmp	r3, #0
   1c20e:	d02b      	beq.n	1c268 <appSlaveConnUpdate+0x6c>
  {
    /* if successful */
    if (pMsg->hdr.status == HCI_SUCCESS)
   1c210:	687b      	ldr	r3, [r7, #4]
   1c212:	78db      	ldrb	r3, [r3, #3]
   1c214:	2b00      	cmp	r3, #0
   1c216:	d117      	bne.n	1c248 <appSlaveConnUpdate+0x4c>
      // so here we need to check if the connection parameter
      // meets slave's requirement, if not, we should not stop
      // the timer.

      // only check connection interval for now
      if ((pAppUpdateCfg->connIntervalMin <= ((hciLeConnUpdateCmplEvt_t*)pMsg)->connInterval)
   1c218:	4b15      	ldr	r3, [pc, #84]	; (1c270 <appSlaveConnUpdate+0x74>)
   1c21a:	681b      	ldr	r3, [r3, #0]
   1c21c:	889a      	ldrh	r2, [r3, #4]
   1c21e:	687b      	ldr	r3, [r7, #4]
   1c220:	891b      	ldrh	r3, [r3, #8]
   1c222:	429a      	cmp	r2, r3
   1c224:	d80a      	bhi.n	1c23c <appSlaveConnUpdate+0x40>
        &&(pAppUpdateCfg->connIntervalMax >= ((hciLeConnUpdateCmplEvt_t*)pMsg)->connInterval))
   1c226:	4b12      	ldr	r3, [pc, #72]	; (1c270 <appSlaveConnUpdate+0x74>)
   1c228:	681b      	ldr	r3, [r3, #0]
   1c22a:	88da      	ldrh	r2, [r3, #6]
   1c22c:	687b      	ldr	r3, [r7, #4]
   1c22e:	891b      	ldrh	r3, [r3, #8]
   1c230:	429a      	cmp	r2, r3
   1c232:	d303      	bcc.n	1c23c <appSlaveConnUpdate+0x40>
      {
        appConnUpdateTimerStop(pCb);
   1c234:	6838      	ldr	r0, [r7, #0]
   1c236:	f7ff fead 	bl	1bf94 <appConnUpdateTimerStop>
   1c23a:	e015      	b.n	1c268 <appSlaveConnUpdate+0x6c>
      }
      else {
        /* start timer and try again */
        appConnUpdateTimerStart(pCb->connId);
   1c23c:	683b      	ldr	r3, [r7, #0]
   1c23e:	791b      	ldrb	r3, [r3, #4]
   1c240:	4618      	mov	r0, r3
   1c242:	f7ff fe7d 	bl	1bf40 <appConnUpdateTimerStart>
   1c246:	e00f      	b.n	1c268 <appSlaveConnUpdate+0x6c>
      }

    }
    /* else if update failed but not pending and still attempting to do update */
    else if ((pMsg->hdr.status != HCI_ERR_CMD_DISALLOWED) && (pCb->attempts < pAppUpdateCfg->maxAttempts))
   1c248:	687b      	ldr	r3, [r7, #4]
   1c24a:	78db      	ldrb	r3, [r3, #3]
   1c24c:	2b0c      	cmp	r3, #12
   1c24e:	d00b      	beq.n	1c268 <appSlaveConnUpdate+0x6c>
   1c250:	683b      	ldr	r3, [r7, #0]
   1c252:	7b1a      	ldrb	r2, [r3, #12]
   1c254:	4b06      	ldr	r3, [pc, #24]	; (1c270 <appSlaveConnUpdate+0x74>)
   1c256:	681b      	ldr	r3, [r3, #0]
   1c258:	7b1b      	ldrb	r3, [r3, #12]
   1c25a:	429a      	cmp	r2, r3
   1c25c:	d204      	bcs.n	1c268 <appSlaveConnUpdate+0x6c>
    {
      /* start timer and try again */
      appConnUpdateTimerStart(pCb->connId);
   1c25e:	683b      	ldr	r3, [r7, #0]
   1c260:	791b      	ldrb	r3, [r3, #4]
   1c262:	4618      	mov	r0, r3
   1c264:	f7ff fe6c 	bl	1bf40 <appConnUpdateTimerStart>
    }
  }
}
   1c268:	3708      	adds	r7, #8
   1c26a:	46bd      	mov	sp, r7
   1c26c:	bd80      	pop	{r7, pc}
   1c26e:	bf00      	nop
   1c270:	1000a234 	.word	0x1000a234

0001c274 <appSlaveResolvedAddrInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveResolvedAddrInd(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1c274:	b580      	push	{r7, lr}
   1c276:	b084      	sub	sp, #16
   1c278:	af00      	add	r7, sp, #0
   1c27a:	6078      	str	r0, [r7, #4]
   1c27c:	6039      	str	r1, [r7, #0]
  dmSecKey_t *pPeerKey;

  /* if address resolution is not in progress */
  if (!appSlaveCb.inProgress)
   1c27e:	4b28      	ldr	r3, [pc, #160]	; (1c320 <appSlaveResolvedAddrInd+0xac>)
   1c280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   1c284:	2b00      	cmp	r3, #0
   1c286:	d100      	bne.n	1c28a <appSlaveResolvedAddrInd+0x16>
  {
    return;
   1c288:	e046      	b.n	1c318 <appSlaveResolvedAddrInd+0xa4>
  }

  /* if RPA resolved */
  if (pMsg->hdr.status == HCI_SUCCESS)
   1c28a:	687b      	ldr	r3, [r7, #4]
   1c28c:	78db      	ldrb	r3, [r3, #3]
   1c28e:	2b00      	cmp	r3, #0
   1c290:	d110      	bne.n	1c2b4 <appSlaveResolvedAddrInd+0x40>
  {
    /* record found */
    pCb->dbHdl = appSlaveCb.dbHdl;
   1c292:	4b23      	ldr	r3, [pc, #140]	; (1c320 <appSlaveResolvedAddrInd+0xac>)
   1c294:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1c296:	683b      	ldr	r3, [r7, #0]
   1c298:	601a      	str	r2, [r3, #0]

    /* if LTK was requested while resolving master's address */
    if (appSlaveCb.findLtk)
   1c29a:	4b21      	ldr	r3, [pc, #132]	; (1c320 <appSlaveResolvedAddrInd+0xac>)
   1c29c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
   1c2a0:	2b00      	cmp	r3, #0
   1c2a2:	d035      	beq.n	1c310 <appSlaveResolvedAddrInd+0x9c>
    {
      /* respond to LTK request */
      appSecRspLtk(pCb);
   1c2a4:	6838      	ldr	r0, [r7, #0]
   1c2a6:	f7ff febf 	bl	1c028 <appSecRspLtk>

      appSlaveCb.findLtk = FALSE;
   1c2aa:	4b1d      	ldr	r3, [pc, #116]	; (1c320 <appSlaveResolvedAddrInd+0xac>)
   1c2ac:	2200      	movs	r2, #0
   1c2ae:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
   1c2b2:	e02d      	b.n	1c310 <appSlaveResolvedAddrInd+0x9c>
    }
  }
  /* if RPA did not resolve and there're more bonded records to go through */
  else if ((pMsg->hdr.status == HCI_ERR_AUTH_FAILURE) && (appSlaveCb.dbHdl != APP_DB_HDL_NONE))
   1c2b4:	687b      	ldr	r3, [r7, #4]
   1c2b6:	78db      	ldrb	r3, [r3, #3]
   1c2b8:	2b05      	cmp	r3, #5
   1c2ba:	d129      	bne.n	1c310 <appSlaveResolvedAddrInd+0x9c>
   1c2bc:	4b18      	ldr	r3, [pc, #96]	; (1c320 <appSlaveResolvedAddrInd+0xac>)
   1c2be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c2c0:	2b00      	cmp	r3, #0
   1c2c2:	d025      	beq.n	1c310 <appSlaveResolvedAddrInd+0x9c>
  {
    /* get the next database record */
    appSlaveCb.dbHdl = AppDbGetNextRecord(appSlaveCb.dbHdl);
   1c2c4:	4b16      	ldr	r3, [pc, #88]	; (1c320 <appSlaveResolvedAddrInd+0xac>)
   1c2c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c2c8:	4618      	mov	r0, r3
   1c2ca:	f7fd f9e9 	bl	196a0 <AppDbGetNextRecord>
   1c2ce:	4602      	mov	r2, r0
   1c2d0:	4b13      	ldr	r3, [pc, #76]	; (1c320 <appSlaveResolvedAddrInd+0xac>)
   1c2d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* if there's another bond record */
    if ((appSlaveCb.dbHdl != APP_DB_HDL_NONE) &&
   1c2d4:	4b12      	ldr	r3, [pc, #72]	; (1c320 <appSlaveResolvedAddrInd+0xac>)
   1c2d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c2d8:	2b00      	cmp	r3, #0
   1c2da:	d019      	beq.n	1c310 <appSlaveResolvedAddrInd+0x9c>
        ((pPeerKey = AppDbGetKey(appSlaveCb.dbHdl, DM_KEY_IRK, NULL)) != NULL))
   1c2dc:	4b10      	ldr	r3, [pc, #64]	; (1c320 <appSlaveResolvedAddrInd+0xac>)
   1c2de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  {
    /* get the next database record */
    appSlaveCb.dbHdl = AppDbGetNextRecord(appSlaveCb.dbHdl);

    /* if there's another bond record */
    if ((appSlaveCb.dbHdl != APP_DB_HDL_NONE) &&
   1c2e0:	4618      	mov	r0, r3
   1c2e2:	2104      	movs	r1, #4
   1c2e4:	2200      	movs	r2, #0
   1c2e6:	f7fd fb15 	bl	19914 <AppDbGetKey>
   1c2ea:	60f8      	str	r0, [r7, #12]
   1c2ec:	68fb      	ldr	r3, [r7, #12]
   1c2ee:	2b00      	cmp	r3, #0
   1c2f0:	d00e      	beq.n	1c310 <appSlaveResolvedAddrInd+0x9c>
        ((pPeerKey = AppDbGetKey(appSlaveCb.dbHdl, DM_KEY_IRK, NULL)) != NULL))
    {
      /* reslove RPA using the next stored IRK */
      DmPrivResolveAddr(DmConnPeerAddr(pCb->connId), pPeerKey->irk.key, pMsg->hdr.param);
   1c2f2:	683b      	ldr	r3, [r7, #0]
   1c2f4:	791b      	ldrb	r3, [r3, #4]
   1c2f6:	4618      	mov	r0, r3
   1c2f8:	f7f3 fb02 	bl	f900 <DmConnPeerAddr>
   1c2fc:	4601      	mov	r1, r0
   1c2fe:	68fa      	ldr	r2, [r7, #12]
   1c300:	687b      	ldr	r3, [r7, #4]
   1c302:	881b      	ldrh	r3, [r3, #0]
   1c304:	4608      	mov	r0, r1
   1c306:	4611      	mov	r1, r2
   1c308:	461a      	mov	r2, r3
   1c30a:	f7f3 fe41 	bl	ff90 <DmPrivResolveAddr>

      /* not done yet */
      return;
   1c30e:	e003      	b.n	1c318 <appSlaveResolvedAddrInd+0xa4>
    }
  }

  /* done with this address resolution */
  appSlaveCb.inProgress = FALSE;
   1c310:	4b03      	ldr	r3, [pc, #12]	; (1c320 <appSlaveResolvedAddrInd+0xac>)
   1c312:	2200      	movs	r2, #0
   1c314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
   1c318:	3710      	adds	r7, #16
   1c31a:	46bd      	mov	sp, r7
   1c31c:	bd80      	pop	{r7, pc}
   1c31e:	bf00      	nop
   1c320:	1000a360 	.word	0x1000a360

0001c324 <appSlaveRemoteConnParamReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveRemoteConnParamReq(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1c324:	b580      	push	{r7, lr}
   1c326:	b086      	sub	sp, #24
   1c328:	af00      	add	r7, sp, #0
   1c32a:	6078      	str	r0, [r7, #4]
   1c32c:	6039      	str	r1, [r7, #0]
  /* if configured to accept the remote connection parameter request */
  if (pAppSlaveReqActCfg->remConnParamReqAct == APP_ACT_ACCEPT)
   1c32e:	4b16      	ldr	r3, [pc, #88]	; (1c388 <appSlaveRemoteConnParamReq+0x64>)
   1c330:	681b      	ldr	r3, [r3, #0]
   1c332:	781b      	ldrb	r3, [r3, #0]
   1c334:	2b00      	cmp	r3, #0
   1c336:	d118      	bne.n	1c36a <appSlaveRemoteConnParamReq+0x46>
  {
    hciConnSpec_t connSpec;

    connSpec.connIntervalMin = pMsg->remConnParamReq.intervalMin;
   1c338:	687b      	ldr	r3, [r7, #4]
   1c33a:	88db      	ldrh	r3, [r3, #6]
   1c33c:	81bb      	strh	r3, [r7, #12]
    connSpec.connIntervalMax = pMsg->remConnParamReq.intervalMax;
   1c33e:	687b      	ldr	r3, [r7, #4]
   1c340:	891b      	ldrh	r3, [r3, #8]
   1c342:	81fb      	strh	r3, [r7, #14]
    connSpec.connLatency = pMsg->remConnParamReq.latency;
   1c344:	687b      	ldr	r3, [r7, #4]
   1c346:	895b      	ldrh	r3, [r3, #10]
   1c348:	823b      	strh	r3, [r7, #16]
    connSpec.supTimeout = pMsg->remConnParamReq.timeout;
   1c34a:	687b      	ldr	r3, [r7, #4]
   1c34c:	899b      	ldrh	r3, [r3, #12]
   1c34e:	827b      	strh	r3, [r7, #18]
    connSpec.minCeLen = connSpec.maxCeLen = 0;
   1c350:	2300      	movs	r3, #0
   1c352:	82fb      	strh	r3, [r7, #22]
   1c354:	8afb      	ldrh	r3, [r7, #22]
   1c356:	82bb      	strh	r3, [r7, #20]

    /* accept the remote device's request to change connection parameters */
    DmRemoteConnParamReqReply(pCb->connId, &connSpec);
   1c358:	683b      	ldr	r3, [r7, #0]
   1c35a:	791a      	ldrb	r2, [r3, #4]
   1c35c:	f107 030c 	add.w	r3, r7, #12
   1c360:	4610      	mov	r0, r2
   1c362:	4619      	mov	r1, r3
   1c364:	f7f3 fa44 	bl	f7f0 <DmRemoteConnParamReqReply>
   1c368:	e00a      	b.n	1c380 <appSlaveRemoteConnParamReq+0x5c>
  }
  /* if configured to reject the remote connection parameter request */
  else if (pAppSlaveReqActCfg->remConnParamReqAct == APP_ACT_REJECT)
   1c36a:	4b07      	ldr	r3, [pc, #28]	; (1c388 <appSlaveRemoteConnParamReq+0x64>)
   1c36c:	681b      	ldr	r3, [r3, #0]
   1c36e:	781b      	ldrb	r3, [r3, #0]
   1c370:	2b01      	cmp	r3, #1
   1c372:	d105      	bne.n	1c380 <appSlaveRemoteConnParamReq+0x5c>
  {
    /* reject the remote device's request to change connection parameters */
    DmRemoteConnParamReqNegReply(pCb->connId, HCI_ERR_UNSUP_FEAT);
   1c374:	683b      	ldr	r3, [r7, #0]
   1c376:	791b      	ldrb	r3, [r3, #4]
   1c378:	4618      	mov	r0, r3
   1c37a:	2111      	movs	r1, #17
   1c37c:	f7f3 fa54 	bl	f828 <DmRemoteConnParamReqNegReply>
  }
  /* else - app will handle the remote connection parameter request */
}
   1c380:	3718      	adds	r7, #24
   1c382:	46bd      	mov	sp, r7
   1c384:	bd80      	pop	{r7, pc}
   1c386:	bf00      	nop
   1c388:	10002bd8 	.word	0x10002bd8

0001c38c <appSlaveSecConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appSlaveSecConnOpen(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1c38c:	b580      	push	{r7, lr}
   1c38e:	b082      	sub	sp, #8
   1c390:	af00      	add	r7, sp, #0
   1c392:	6078      	str	r0, [r7, #4]
   1c394:	6039      	str	r1, [r7, #0]
  /* initialize state variables */
  // don't reset bonded flag.
  // pCb->bonded = FALSE;
  pCb->bondByLtk = FALSE;
   1c396:	683b      	ldr	r3, [r7, #0]
   1c398:	2200      	movs	r2, #0
   1c39a:	719a      	strb	r2, [r3, #6]
  pCb->bondByPairing = FALSE;
   1c39c:	683b      	ldr	r3, [r7, #0]
   1c39e:	2200      	movs	r2, #0
   1c3a0:	71da      	strb	r2, [r3, #7]
    
  /* find record for peer device */
  pCb->dbHdl = AppDbFindByAddr(pMsg->connOpen.addrType, pMsg->connOpen.peerAddr);
   1c3a2:	687b      	ldr	r3, [r7, #4]
   1c3a4:	7a5a      	ldrb	r2, [r3, #9]
   1c3a6:	687b      	ldr	r3, [r7, #4]
   1c3a8:	330a      	adds	r3, #10
   1c3aa:	4610      	mov	r0, r2
   1c3ac:	4619      	mov	r1, r3
   1c3ae:	f7fd fa49 	bl	19844 <AppDbFindByAddr>
   1c3b2:	4602      	mov	r2, r0
   1c3b4:	683b      	ldr	r3, [r7, #0]
   1c3b6:	601a      	str	r2, [r3, #0]

  /* if record not found and the peer device uses an RPA */
  if ((pCb->dbHdl == NULL) && DM_RAND_ADDR_RPA(pMsg->connOpen.peerAddr, pMsg->connOpen.addrType))
   1c3b8:	683b      	ldr	r3, [r7, #0]
   1c3ba:	681b      	ldr	r3, [r3, #0]
   1c3bc:	2b00      	cmp	r3, #0
   1c3be:	d10c      	bne.n	1c3da <appSlaveSecConnOpen+0x4e>
   1c3c0:	687b      	ldr	r3, [r7, #4]
   1c3c2:	7a5b      	ldrb	r3, [r3, #9]
   1c3c4:	2b01      	cmp	r3, #1
   1c3c6:	d108      	bne.n	1c3da <appSlaveSecConnOpen+0x4e>
   1c3c8:	687b      	ldr	r3, [r7, #4]
   1c3ca:	7bdb      	ldrb	r3, [r3, #15]
   1c3cc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1c3d0:	2b40      	cmp	r3, #64	; 0x40
   1c3d2:	d102      	bne.n	1c3da <appSlaveSecConnOpen+0x4e>
  {
    /* reslove master's RPA to see if we already have a bond with this device */
    appSlaveResolveAddr(pMsg);
   1c3d4:	6878      	ldr	r0, [r7, #4]
   1c3d6:	f7ff fdf1 	bl	1bfbc <appSlaveResolveAddr>
  }

  /* send slave security request if configured to do so */
  if (pAppSecCfg->initiateSec && AppDbCheckBonded())
   1c3da:	4b0b      	ldr	r3, [pc, #44]	; (1c408 <appSlaveSecConnOpen+0x7c>)
   1c3dc:	681b      	ldr	r3, [r3, #0]
   1c3de:	791b      	ldrb	r3, [r3, #4]
   1c3e0:	2b00      	cmp	r3, #0
   1c3e2:	d00e      	beq.n	1c402 <appSlaveSecConnOpen+0x76>
   1c3e4:	f7fd f9f0 	bl	197c8 <AppDbCheckBonded>
   1c3e8:	4603      	mov	r3, r0
   1c3ea:	2b00      	cmp	r3, #0
   1c3ec:	d009      	beq.n	1c402 <appSlaveSecConnOpen+0x76>
  {
    DmSecSlaveReq((dmConnId_t) pMsg->hdr.param, pAppSecCfg->auth);
   1c3ee:	687b      	ldr	r3, [r7, #4]
   1c3f0:	881b      	ldrh	r3, [r3, #0]
   1c3f2:	b2da      	uxtb	r2, r3
   1c3f4:	4b04      	ldr	r3, [pc, #16]	; (1c408 <appSlaveSecConnOpen+0x7c>)
   1c3f6:	681b      	ldr	r3, [r3, #0]
   1c3f8:	781b      	ldrb	r3, [r3, #0]
   1c3fa:	4610      	mov	r0, r2
   1c3fc:	4619      	mov	r1, r3
   1c3fe:	f7f4 f8d6 	bl	105ae <DmSecSlaveReq>
  }
}
   1c402:	3708      	adds	r7, #8
   1c404:	46bd      	mov	sp, r7
   1c406:	bd80      	pop	{r7, pc}
   1c408:	1000a250 	.word	0x1000a250

0001c40c <appSecConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appSecConnClose(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1c40c:	b580      	push	{r7, lr}
   1c40e:	b082      	sub	sp, #8
   1c410:	af00      	add	r7, sp, #0
   1c412:	6078      	str	r0, [r7, #4]
   1c414:	6039      	str	r1, [r7, #0]
  /* if a device record was created check if it is valid */
  if (pCb->dbHdl != APP_DB_HDL_NONE)
   1c416:	683b      	ldr	r3, [r7, #0]
   1c418:	681b      	ldr	r3, [r3, #0]
   1c41a:	2b00      	cmp	r3, #0
   1c41c:	d004      	beq.n	1c428 <appSecConnClose+0x1c>
  {
    AppDbCheckValidRecord(pCb->dbHdl);
   1c41e:	683b      	ldr	r3, [r7, #0]
   1c420:	681b      	ldr	r3, [r3, #0]
   1c422:	4618      	mov	r0, r3
   1c424:	f7fd f994 	bl	19750 <AppDbCheckValidRecord>
  }
}
   1c428:	3708      	adds	r7, #8
   1c42a:	46bd      	mov	sp, r7
   1c42c:	bd80      	pop	{r7, pc}
   1c42e:	bf00      	nop

0001c430 <appSecPairInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecPairInd(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1c430:	b590      	push	{r4, r7, lr}
   1c432:	b087      	sub	sp, #28
   1c434:	af02      	add	r7, sp, #8
   1c436:	6078      	str	r0, [r7, #4]
   1c438:	6039      	str	r1, [r7, #0]
  uint8_t rKeyDist;
  
  /* if in bondable mode or if peer is not requesting bonding
   * or if already bonded with this device and link is encrypted
   */
  if (appSlaveCb.bondable ||
   1c43a:	4b3e      	ldr	r3, [pc, #248]	; (1c534 <appSecPairInd+0x104>)
   1c43c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
   1c440:	2b00      	cmp	r3, #0
   1c442:	d111      	bne.n	1c468 <appSecPairInd+0x38>
      ((pMsg->pairInd.auth & DM_AUTH_BOND_FLAG) != DM_AUTH_BOND_FLAG) ||
   1c444:	687b      	ldr	r3, [r7, #4]
   1c446:	791b      	ldrb	r3, [r3, #4]
   1c448:	f003 0301 	and.w	r3, r3, #1
  uint8_t rKeyDist;
  
  /* if in bondable mode or if peer is not requesting bonding
   * or if already bonded with this device and link is encrypted
   */
  if (appSlaveCb.bondable ||
   1c44c:	2b00      	cmp	r3, #0
   1c44e:	d00b      	beq.n	1c468 <appSecPairInd+0x38>
      ((pMsg->pairInd.auth & DM_AUTH_BOND_FLAG) != DM_AUTH_BOND_FLAG) ||
      (pCb->bonded && (DmConnSecLevel(pCb->connId) == DM_SEC_LEVEL_NONE)))
   1c450:	683b      	ldr	r3, [r7, #0]
   1c452:	795b      	ldrb	r3, [r3, #5]
  
  /* if in bondable mode or if peer is not requesting bonding
   * or if already bonded with this device and link is encrypted
   */
  if (appSlaveCb.bondable ||
      ((pMsg->pairInd.auth & DM_AUTH_BOND_FLAG) != DM_AUTH_BOND_FLAG) ||
   1c454:	2b00      	cmp	r3, #0
   1c456:	d064      	beq.n	1c522 <appSecPairInd+0xf2>
      (pCb->bonded && (DmConnSecLevel(pCb->connId) == DM_SEC_LEVEL_NONE)))
   1c458:	683b      	ldr	r3, [r7, #0]
   1c45a:	791b      	ldrb	r3, [r3, #4]
   1c45c:	4618      	mov	r0, r3
   1c45e:	f7f3 fa7f 	bl	f960 <DmConnSecLevel>
   1c462:	4603      	mov	r3, r0
   1c464:	2b00      	cmp	r3, #0
   1c466:	d15c      	bne.n	1c522 <appSecPairInd+0xf2>
  {
    /* store bonding state:  if peer is requesting bonding and we want bonding */
    pCb->bondByPairing = (pMsg->pairInd.auth & pAppSecCfg->auth & DM_AUTH_BOND_FLAG) == DM_AUTH_BOND_FLAG;
   1c468:	687b      	ldr	r3, [r7, #4]
   1c46a:	791a      	ldrb	r2, [r3, #4]
   1c46c:	4b32      	ldr	r3, [pc, #200]	; (1c538 <appSecPairInd+0x108>)
   1c46e:	681b      	ldr	r3, [r3, #0]
   1c470:	781b      	ldrb	r3, [r3, #0]
   1c472:	4013      	ands	r3, r2
   1c474:	b2db      	uxtb	r3, r3
   1c476:	f003 0301 	and.w	r3, r3, #1
   1c47a:	2b00      	cmp	r3, #0
   1c47c:	bf14      	ite	ne
   1c47e:	2301      	movne	r3, #1
   1c480:	2300      	moveq	r3, #0
   1c482:	b2db      	uxtb	r3, r3
   1c484:	461a      	mov	r2, r3
   1c486:	683b      	ldr	r3, [r7, #0]
   1c488:	71da      	strb	r2, [r3, #7]
    
    /* if bonding and no device record */
    if (pCb->bondByPairing && pCb->dbHdl == APP_DB_HDL_NONE)
   1c48a:	683b      	ldr	r3, [r7, #0]
   1c48c:	79db      	ldrb	r3, [r3, #7]
   1c48e:	2b00      	cmp	r3, #0
   1c490:	d017      	beq.n	1c4c2 <appSecPairInd+0x92>
   1c492:	683b      	ldr	r3, [r7, #0]
   1c494:	681b      	ldr	r3, [r3, #0]
   1c496:	2b00      	cmp	r3, #0
   1c498:	d113      	bne.n	1c4c2 <appSecPairInd+0x92>
    {
      /* create a device record if none exists */
      pCb->dbHdl = AppDbNewRecord(DmConnPeerAddrType(pCb->connId), DmConnPeerAddr(pCb->connId));
   1c49a:	683b      	ldr	r3, [r7, #0]
   1c49c:	791b      	ldrb	r3, [r3, #4]
   1c49e:	4618      	mov	r0, r3
   1c4a0:	f7f3 fa24 	bl	f8ec <DmConnPeerAddrType>
   1c4a4:	4603      	mov	r3, r0
   1c4a6:	461c      	mov	r4, r3
   1c4a8:	683b      	ldr	r3, [r7, #0]
   1c4aa:	791b      	ldrb	r3, [r3, #4]
   1c4ac:	4618      	mov	r0, r3
   1c4ae:	f7f3 fa27 	bl	f900 <DmConnPeerAddr>
   1c4b2:	4603      	mov	r3, r0
   1c4b4:	4620      	mov	r0, r4
   1c4b6:	4619      	mov	r1, r3
   1c4b8:	f7fd f8a0 	bl	195fc <AppDbNewRecord>
   1c4bc:	4602      	mov	r2, r0
   1c4be:	683b      	ldr	r3, [r7, #0]
   1c4c0:	601a      	str	r2, [r3, #0]
    }

    /* initialize stored keys */
    pCb->rcvdKeys = 0;
   1c4c2:	683b      	ldr	r3, [r7, #0]
   1c4c4:	2200      	movs	r2, #0
   1c4c6:	72da      	strb	r2, [r3, #11]

    /* initialize key distribution */
    rKeyDist = pAppSecCfg->rKeyDist;
   1c4c8:	4b1b      	ldr	r3, [pc, #108]	; (1c538 <appSecPairInd+0x108>)
   1c4ca:	681b      	ldr	r3, [r3, #0]
   1c4cc:	789b      	ldrb	r3, [r3, #2]
   1c4ce:	73bb      	strb	r3, [r7, #14]
    iKeyDist = pAppSecCfg->iKeyDist;
   1c4d0:	4b19      	ldr	r3, [pc, #100]	; (1c538 <appSecPairInd+0x108>)
   1c4d2:	681b      	ldr	r3, [r3, #0]
   1c4d4:	785b      	ldrb	r3, [r3, #1]
   1c4d6:	73fb      	strb	r3, [r7, #15]
    
    /* if peer is using random address request IRK */
    if (DmConnPeerAddrType(pCb->connId) == DM_ADDR_RANDOM)
   1c4d8:	683b      	ldr	r3, [r7, #0]
   1c4da:	791b      	ldrb	r3, [r3, #4]
   1c4dc:	4618      	mov	r0, r3
   1c4de:	f7f3 fa05 	bl	f8ec <DmConnPeerAddrType>
   1c4e2:	4603      	mov	r3, r0
   1c4e4:	2b01      	cmp	r3, #1
   1c4e6:	d103      	bne.n	1c4f0 <appSecPairInd+0xc0>
    {
      iKeyDist |= DM_KEY_DIST_IRK;
   1c4e8:	7bfb      	ldrb	r3, [r7, #15]
   1c4ea:	f043 0302 	orr.w	r3, r3, #2
   1c4ee:	73fb      	strb	r3, [r7, #15]
    }
    
    /* only distribute keys both sides have agreed to */
    rKeyDist &= pMsg->pairInd.rKeyDist;
   1c4f0:	687b      	ldr	r3, [r7, #4]
   1c4f2:	79da      	ldrb	r2, [r3, #7]
   1c4f4:	7bbb      	ldrb	r3, [r7, #14]
   1c4f6:	4013      	ands	r3, r2
   1c4f8:	73bb      	strb	r3, [r7, #14]
    iKeyDist &= pMsg->pairInd.iKeyDist;
   1c4fa:	687b      	ldr	r3, [r7, #4]
   1c4fc:	799a      	ldrb	r2, [r3, #6]
   1c4fe:	7bfb      	ldrb	r3, [r7, #15]
   1c500:	4013      	ands	r3, r2
   1c502:	73fb      	strb	r3, [r7, #15]
    
    /* accept pairing request */
    DmSecPairRsp(pCb->connId, pAppSecCfg->oob, pAppSecCfg->auth, iKeyDist, rKeyDist);
   1c504:	683b      	ldr	r3, [r7, #0]
   1c506:	7918      	ldrb	r0, [r3, #4]
   1c508:	4b0b      	ldr	r3, [pc, #44]	; (1c538 <appSecPairInd+0x108>)
   1c50a:	681b      	ldr	r3, [r3, #0]
   1c50c:	78d9      	ldrb	r1, [r3, #3]
   1c50e:	4b0a      	ldr	r3, [pc, #40]	; (1c538 <appSecPairInd+0x108>)
   1c510:	681b      	ldr	r3, [r3, #0]
   1c512:	781a      	ldrb	r2, [r3, #0]
   1c514:	7bfc      	ldrb	r4, [r7, #15]
   1c516:	7bbb      	ldrb	r3, [r7, #14]
   1c518:	9300      	str	r3, [sp, #0]
   1c51a:	4623      	mov	r3, r4
   1c51c:	f7f4 f828 	bl	10570 <DmSecPairRsp>
   1c520:	e005      	b.n	1c52e <appSecPairInd+0xfe>
  }
  /* otherwise reject pairing request */
  else
  {
    DmSecCancelReq(pCb->connId, SMP_ERR_PAIRING_NOT_SUP);
   1c522:	683b      	ldr	r3, [r7, #0]
   1c524:	791b      	ldrb	r3, [r3, #4]
   1c526:	4618      	mov	r0, r3
   1c528:	2105      	movs	r1, #5
   1c52a:	f7f3 feb1 	bl	10290 <DmSecCancelReq>
  }
}
   1c52e:	3714      	adds	r7, #20
   1c530:	46bd      	mov	sp, r7
   1c532:	bd90      	pop	{r4, r7, pc}
   1c534:	1000a360 	.word	0x1000a360
   1c538:	1000a250 	.word	0x1000a250

0001c53c <appSecStoreKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecStoreKey(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1c53c:	b580      	push	{r7, lr}
   1c53e:	b082      	sub	sp, #8
   1c540:	af00      	add	r7, sp, #0
   1c542:	6078      	str	r0, [r7, #4]
   1c544:	6039      	str	r1, [r7, #0]
  if (pCb->bondByPairing && pCb->dbHdl != APP_DB_HDL_NONE)
   1c546:	683b      	ldr	r3, [r7, #0]
   1c548:	79db      	ldrb	r3, [r3, #7]
   1c54a:	2b00      	cmp	r3, #0
   1c54c:	d012      	beq.n	1c574 <appSecStoreKey+0x38>
   1c54e:	683b      	ldr	r3, [r7, #0]
   1c550:	681b      	ldr	r3, [r3, #0]
   1c552:	2b00      	cmp	r3, #0
   1c554:	d00e      	beq.n	1c574 <appSecStoreKey+0x38>
  {
    /* key was received */
    pCb->rcvdKeys |= pMsg->keyInd.type;
   1c556:	683b      	ldr	r3, [r7, #0]
   1c558:	7ada      	ldrb	r2, [r3, #11]
   1c55a:	687b      	ldr	r3, [r7, #4]
   1c55c:	7f9b      	ldrb	r3, [r3, #30]
   1c55e:	4313      	orrs	r3, r2
   1c560:	b2da      	uxtb	r2, r3
   1c562:	683b      	ldr	r3, [r7, #0]
   1c564:	72da      	strb	r2, [r3, #11]
    
    /* store key in record */
    AppDbSetKey(pCb->dbHdl, &pMsg->keyInd);
   1c566:	683b      	ldr	r3, [r7, #0]
   1c568:	681a      	ldr	r2, [r3, #0]
   1c56a:	687b      	ldr	r3, [r7, #4]
   1c56c:	4610      	mov	r0, r2
   1c56e:	4619      	mov	r1, r3
   1c570:	f7fd fa1a 	bl	199a8 <AppDbSetKey>
  }
}
   1c574:	3708      	adds	r7, #8
   1c576:	46bd      	mov	sp, r7
   1c578:	bd80      	pop	{r7, pc}
   1c57a:	bf00      	nop

0001c57c <appSecPairCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecPairCmpl(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1c57c:	b580      	push	{r7, lr}
   1c57e:	b082      	sub	sp, #8
   1c580:	af00      	add	r7, sp, #0
   1c582:	6078      	str	r0, [r7, #4]
   1c584:	6039      	str	r1, [r7, #0]
  /* if bonding */
  if (pCb->bondByPairing)
   1c586:	683b      	ldr	r3, [r7, #0]
   1c588:	79db      	ldrb	r3, [r3, #7]
   1c58a:	2b00      	cmp	r3, #0
   1c58c:	d024      	beq.n	1c5d8 <appSecPairCmpl+0x5c>
  {
    /* set bonded state */
    pCb->bonded = TRUE;
   1c58e:	683b      	ldr	r3, [r7, #0]
   1c590:	2201      	movs	r2, #1
   1c592:	715a      	strb	r2, [r3, #5]

    /* validate record and received keys */
    if (pCb->dbHdl != APP_DB_HDL_NONE)
   1c594:	683b      	ldr	r3, [r7, #0]
   1c596:	681b      	ldr	r3, [r3, #0]
   1c598:	2b00      	cmp	r3, #0
   1c59a:	d007      	beq.n	1c5ac <appSecPairCmpl+0x30>
    {
      AppDbValidateRecord(pCb->dbHdl, pCb->rcvdKeys);
   1c59c:	683b      	ldr	r3, [r7, #0]
   1c59e:	681a      	ldr	r2, [r3, #0]
   1c5a0:	683b      	ldr	r3, [r7, #0]
   1c5a2:	7adb      	ldrb	r3, [r3, #11]
   1c5a4:	4610      	mov	r0, r2
   1c5a6:	4619      	mov	r1, r3
   1c5a8:	f7fd f8be 	bl	19728 <AppDbValidateRecord>
    }    

    /* if bonded clear bondable mode */
    appSlaveCb.bondable = FALSE;
   1c5ac:	4b0c      	ldr	r3, [pc, #48]	; (1c5e0 <appSecPairCmpl+0x64>)
   1c5ae:	2200      	movs	r2, #0
   1c5b0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    
    /* if discoverable switch to connectable mode when connection closes */
    if (appSlaveCb.discMode == APP_MODE_DISCOVERABLE)
   1c5b4:	4b0a      	ldr	r3, [pc, #40]	; (1c5e0 <appSecPairCmpl+0x64>)
   1c5b6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   1c5ba:	2b01      	cmp	r3, #1
   1c5bc:	d102      	bne.n	1c5c4 <appSecPairCmpl+0x48>
    {
      pCb->setConnectable = TRUE;
   1c5be:	683b      	ldr	r3, [r7, #0]
   1c5c0:	2201      	movs	r2, #1
   1c5c2:	725a      	strb	r2, [r3, #9]
    }

    /*  if bonded and device is using static or public address add device to white list */

    /* if bonded, add device to resolving list */
    if (pCb->dbHdl != APP_DB_HDL_NONE)
   1c5c4:	683b      	ldr	r3, [r7, #0]
   1c5c6:	681b      	ldr	r3, [r3, #0]
   1c5c8:	2b00      	cmp	r3, #0
   1c5ca:	d005      	beq.n	1c5d8 <appSecPairCmpl+0x5c>
    {
      AppAddDevToResList(pMsg, pCb->connId);
   1c5cc:	683b      	ldr	r3, [r7, #0]
   1c5ce:	791b      	ldrb	r3, [r3, #4]
   1c5d0:	6878      	ldr	r0, [r7, #4]
   1c5d2:	4619      	mov	r1, r3
   1c5d4:	f7ff fa3e 	bl	1ba54 <AppAddDevToResList>
    }
  }
}
   1c5d8:	3708      	adds	r7, #8
   1c5da:	46bd      	mov	sp, r7
   1c5dc:	bd80      	pop	{r7, pc}
   1c5de:	bf00      	nop
   1c5e0:	1000a360 	.word	0x1000a360

0001c5e4 <appSecPairFailed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecPairFailed(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1c5e4:	b480      	push	{r7}
   1c5e6:	b083      	sub	sp, #12
   1c5e8:	af00      	add	r7, sp, #0
   1c5ea:	6078      	str	r0, [r7, #4]
   1c5ec:	6039      	str	r1, [r7, #0]
  return;
   1c5ee:	bf00      	nop
}
   1c5f0:	370c      	adds	r7, #12
   1c5f2:	46bd      	mov	sp, r7
   1c5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c5f8:	4770      	bx	lr
   1c5fa:	bf00      	nop

0001c5fc <appSecEncryptInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecEncryptInd(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1c5fc:	b480      	push	{r7}
   1c5fe:	b083      	sub	sp, #12
   1c600:	af00      	add	r7, sp, #0
   1c602:	6078      	str	r0, [r7, #4]
   1c604:	6039      	str	r1, [r7, #0]
  /* check if bonding state should be set */
  if (pCb->bondByLtk && pMsg->encryptInd.usingLtk)
   1c606:	683b      	ldr	r3, [r7, #0]
   1c608:	799b      	ldrb	r3, [r3, #6]
   1c60a:	2b00      	cmp	r3, #0
   1c60c:	d009      	beq.n	1c622 <appSecEncryptInd+0x26>
   1c60e:	687b      	ldr	r3, [r7, #4]
   1c610:	791b      	ldrb	r3, [r3, #4]
   1c612:	2b00      	cmp	r3, #0
   1c614:	d005      	beq.n	1c622 <appSecEncryptInd+0x26>
  {
    pCb->bonded = TRUE;
   1c616:	683b      	ldr	r3, [r7, #0]
   1c618:	2201      	movs	r2, #1
   1c61a:	715a      	strb	r2, [r3, #5]
    pCb->bondByLtk = FALSE;
   1c61c:	683b      	ldr	r3, [r7, #0]
   1c61e:	2200      	movs	r2, #0
   1c620:	719a      	strb	r2, [r3, #6]
  }
}
   1c622:	370c      	adds	r7, #12
   1c624:	46bd      	mov	sp, r7
   1c626:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c62a:	4770      	bx	lr

0001c62c <appSecFindLtk>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecFindLtk(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1c62c:	b580      	push	{r7, lr}
   1c62e:	b082      	sub	sp, #8
   1c630:	af00      	add	r7, sp, #0
   1c632:	6078      	str	r0, [r7, #4]
   1c634:	6039      	str	r1, [r7, #0]
  /* if device record is not in place */
  if (pCb->dbHdl == APP_DB_HDL_NONE)
   1c636:	683b      	ldr	r3, [r7, #0]
   1c638:	681b      	ldr	r3, [r3, #0]
   1c63a:	2b00      	cmp	r3, #0
   1c63c:	d12c      	bne.n	1c698 <appSecFindLtk+0x6c>
  {
    /* if ediv or rand is not zero */
    if ((pMsg->ltkReqInd.encDiversifier != 0) ||
   1c63e:	687b      	ldr	r3, [r7, #4]
   1c640:	89db      	ldrh	r3, [r3, #14]
   1c642:	2b00      	cmp	r3, #0
   1c644:	d109      	bne.n	1c65a <appSecFindLtk+0x2e>
        (memcmp(pMsg->ltkReqInd.randNum, calc128Zeros, SMP_RAND8_LEN) != 0))
   1c646:	687b      	ldr	r3, [r7, #4]
   1c648:	3306      	adds	r3, #6
   1c64a:	4618      	mov	r0, r3
   1c64c:	4915      	ldr	r1, [pc, #84]	; (1c6a4 <appSecFindLtk+0x78>)
   1c64e:	2208      	movs	r2, #8
   1c650:	f003 fe36 	bl	202c0 <memcmp>
   1c654:	4603      	mov	r3, r0
{
  /* if device record is not in place */
  if (pCb->dbHdl == APP_DB_HDL_NONE)
  {
    /* if ediv or rand is not zero */
    if ((pMsg->ltkReqInd.encDiversifier != 0) ||
   1c656:	2b00      	cmp	r3, #0
   1c658:	d014      	beq.n	1c684 <appSecFindLtk+0x58>
        (memcmp(pMsg->ltkReqInd.randNum, calc128Zeros, SMP_RAND8_LEN) != 0))
    {
      /* find record */
      pCb->dbHdl = AppDbFindByLtkReq(pMsg->ltkReqInd.encDiversifier, pMsg->ltkReqInd.randNum);
   1c65a:	687b      	ldr	r3, [r7, #4]
   1c65c:	89da      	ldrh	r2, [r3, #14]
   1c65e:	687b      	ldr	r3, [r7, #4]
   1c660:	3306      	adds	r3, #6
   1c662:	4610      	mov	r0, r2
   1c664:	4619      	mov	r1, r3
   1c666:	f7fd f923 	bl	198b0 <AppDbFindByLtkReq>
   1c66a:	4602      	mov	r2, r0
   1c66c:	683b      	ldr	r3, [r7, #0]
   1c66e:	601a      	str	r2, [r3, #0]
      if (pCb->dbHdl != APP_DB_HDL_NONE)
   1c670:	683b      	ldr	r3, [r7, #0]
   1c672:	681b      	ldr	r3, [r3, #0]
   1c674:	2b00      	cmp	r3, #0
   1c676:	d004      	beq.n	1c682 <appSecFindLtk+0x56>
      {
        /* record found, cancel any address resolution in progress */
        appSlaveCb.inProgress = FALSE;
   1c678:	4b0b      	ldr	r3, [pc, #44]	; (1c6a8 <appSecFindLtk+0x7c>)
   1c67a:	2200      	movs	r2, #0
   1c67c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    if ((pMsg->ltkReqInd.encDiversifier != 0) ||
        (memcmp(pMsg->ltkReqInd.randNum, calc128Zeros, SMP_RAND8_LEN) != 0))
    {
      /* find record */
      pCb->dbHdl = AppDbFindByLtkReq(pMsg->ltkReqInd.encDiversifier, pMsg->ltkReqInd.randNum);
      if (pCb->dbHdl != APP_DB_HDL_NONE)
   1c680:	e00a      	b.n	1c698 <appSecFindLtk+0x6c>
   1c682:	e009      	b.n	1c698 <appSecFindLtk+0x6c>
        /* record found, cancel any address resolution in progress */
        appSlaveCb.inProgress = FALSE;
      }
    }
    /* if address resolution in progress */
    else if (appSlaveCb.inProgress)
   1c684:	4b08      	ldr	r3, [pc, #32]	; (1c6a8 <appSecFindLtk+0x7c>)
   1c686:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   1c68a:	2b00      	cmp	r3, #0
   1c68c:	d004      	beq.n	1c698 <appSecFindLtk+0x6c>
    {
      /* postpone LTK look up till address resolution is completed */
      appSlaveCb.findLtk = TRUE;
   1c68e:	4b06      	ldr	r3, [pc, #24]	; (1c6a8 <appSecFindLtk+0x7c>)
   1c690:	2201      	movs	r2, #1
   1c692:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
      return;
   1c696:	e002      	b.n	1c69e <appSecFindLtk+0x72>
    }
  }

  /* respond to LTK request */
  appSecRspLtk(pCb);
   1c698:	6838      	ldr	r0, [r7, #0]
   1c69a:	f7ff fcc5 	bl	1c028 <appSecRspLtk>
}
   1c69e:	3708      	adds	r7, #8
   1c6a0:	46bd      	mov	sp, r7
   1c6a2:	bd80      	pop	{r7, pc}
   1c6a4:	00025174 	.word	0x00025174
   1c6a8:	1000a360 	.word	0x1000a360

0001c6ac <appPrivSetAddrResEnableInd>:
*
*  \return None.
*/
/*************************************************************************************************/
static void appPrivSetAddrResEnableInd(dmEvt_t *pMsg)
{
   1c6ac:	b580      	push	{r7, lr}
   1c6ae:	b082      	sub	sp, #8
   1c6b0:	af00      	add	r7, sp, #0
   1c6b2:	6078      	str	r0, [r7, #4]
  if (pMsg->hdr.status == HCI_SUCCESS)
   1c6b4:	687b      	ldr	r3, [r7, #4]
   1c6b6:	78db      	ldrb	r3, [r3, #3]
   1c6b8:	2b00      	cmp	r3, #0
   1c6ba:	d105      	bne.n	1c6c8 <appPrivSetAddrResEnableInd+0x1c>
  {
    SvcCoreGapCentAddrResUpdate(DmLlPrivEnabled());
   1c6bc:	f7f3 fb3e 	bl	fd3c <DmLlPrivEnabled>
   1c6c0:	4603      	mov	r3, r0
   1c6c2:	4618      	mov	r0, r3
   1c6c4:	f000 fcde 	bl	1d084 <SvcCoreGapCentAddrResUpdate>
  }
}
   1c6c8:	3708      	adds	r7, #8
   1c6ca:	46bd      	mov	sp, r7
   1c6cc:	bd80      	pop	{r7, pc}
   1c6ce:	bf00      	nop

0001c6d0 <appPrivAddDevToResListInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appPrivAddDevToResListInd(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1c6d0:	b580      	push	{r7, lr}
   1c6d2:	b084      	sub	sp, #16
   1c6d4:	af00      	add	r7, sp, #0
   1c6d6:	6078      	str	r0, [r7, #4]
   1c6d8:	6039      	str	r1, [r7, #0]
  if ((pMsg->hdr.status == HCI_SUCCESS) && (pCb->dbHdl != APP_DB_HDL_NONE))
   1c6da:	687b      	ldr	r3, [r7, #4]
   1c6dc:	78db      	ldrb	r3, [r3, #3]
   1c6de:	2b00      	cmp	r3, #0
   1c6e0:	d11c      	bne.n	1c71c <appPrivAddDevToResListInd+0x4c>
   1c6e2:	683b      	ldr	r3, [r7, #0]
   1c6e4:	681b      	ldr	r3, [r3, #0]
   1c6e6:	2b00      	cmp	r3, #0
   1c6e8:	d018      	beq.n	1c71c <appPrivAddDevToResListInd+0x4c>
  {
    dmSecKey_t *pPeerKey = AppDbGetKey(pCb->dbHdl, DM_KEY_IRK, NULL);
   1c6ea:	683b      	ldr	r3, [r7, #0]
   1c6ec:	681b      	ldr	r3, [r3, #0]
   1c6ee:	4618      	mov	r0, r3
   1c6f0:	2104      	movs	r1, #4
   1c6f2:	2200      	movs	r2, #0
   1c6f4:	f7fd f90e 	bl	19914 <AppDbGetKey>
   1c6f8:	60f8      	str	r0, [r7, #12]

    /* if peer IRK present */
    if (pPeerKey != NULL)
   1c6fa:	68fb      	ldr	r3, [r7, #12]
   1c6fc:	2b00      	cmp	r3, #0
   1c6fe:	d007      	beq.n	1c710 <appPrivAddDevToResListInd+0x40>
    {
      /* set advertising peer address */
      AppSetAdvPeerAddr(pPeerKey->irk.addrType, pPeerKey->irk.bdAddr);
   1c700:	68fb      	ldr	r3, [r7, #12]
   1c702:	7d9a      	ldrb	r2, [r3, #22]
   1c704:	68fb      	ldr	r3, [r7, #12]
   1c706:	3310      	adds	r3, #16
   1c708:	4610      	mov	r0, r2
   1c70a:	4619      	mov	r1, r3
   1c70c:	f000 fb76 	bl	1cdfc <AppSetAdvPeerAddr>
    }

    /* peer device's been added to resolving list */
    AppDbSetPeerAddedToRl(pCb->dbHdl, TRUE);
   1c710:	683b      	ldr	r3, [r7, #0]
   1c712:	681b      	ldr	r3, [r3, #0]
   1c714:	4618      	mov	r0, r3
   1c716:	2101      	movs	r1, #1
   1c718:	f7fd fa46 	bl	19ba8 <AppDbSetPeerAddedToRl>
  }
}
   1c71c:	3710      	adds	r7, #16
   1c71e:	46bd      	mov	sp, r7
   1c720:	bd80      	pop	{r7, pc}
   1c722:	bf00      	nop

0001c724 <appPrivRemDevFromResListInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appPrivRemDevFromResListInd(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1c724:	b580      	push	{r7, lr}
   1c726:	b082      	sub	sp, #8
   1c728:	af00      	add	r7, sp, #0
   1c72a:	6078      	str	r0, [r7, #4]
   1c72c:	6039      	str	r1, [r7, #0]
  if ((pMsg->hdr.status == HCI_SUCCESS) && (pCb->dbHdl != APP_DB_HDL_NONE))
   1c72e:	687b      	ldr	r3, [r7, #4]
   1c730:	78db      	ldrb	r3, [r3, #3]
   1c732:	2b00      	cmp	r3, #0
   1c734:	d112      	bne.n	1c75c <appPrivRemDevFromResListInd+0x38>
   1c736:	683b      	ldr	r3, [r7, #0]
   1c738:	681b      	ldr	r3, [r3, #0]
   1c73a:	2b00      	cmp	r3, #0
   1c73c:	d00e      	beq.n	1c75c <appPrivRemDevFromResListInd+0x38>
  {
    /* clear advertising peer address and its type */
    appSlaveCb.peerAddrType = HCI_ADDR_TYPE_PUBLIC;
   1c73e:	4b09      	ldr	r3, [pc, #36]	; (1c764 <appPrivRemDevFromResListInd+0x40>)
   1c740:	2200      	movs	r2, #0
   1c742:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    memset(appSlaveCb.peerAddr, 0, BDA_ADDR_LEN);
   1c746:	4808      	ldr	r0, [pc, #32]	; (1c768 <appPrivRemDevFromResListInd+0x44>)
   1c748:	2100      	movs	r1, #0
   1c74a:	2206      	movs	r2, #6
   1c74c:	f003 fe4e 	bl	203ec <memset>

    /* peer device's been removed from resolving list */
    AppDbSetPeerAddedToRl(pCb->dbHdl, FALSE);
   1c750:	683b      	ldr	r3, [r7, #0]
   1c752:	681b      	ldr	r3, [r3, #0]
   1c754:	4618      	mov	r0, r3
   1c756:	2100      	movs	r1, #0
   1c758:	f7fd fa26 	bl	19ba8 <AppDbSetPeerAddedToRl>
  }
}
   1c75c:	3708      	adds	r7, #8
   1c75e:	46bd      	mov	sp, r7
   1c760:	bd80      	pop	{r7, pc}
   1c762:	bf00      	nop
   1c764:	1000a360 	.word	0x1000a360
   1c768:	1000a390 	.word	0x1000a390

0001c76c <appSlaveConnUpdateTimeout>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveConnUpdateTimeout(wsfMsgHdr_t *pMsg, appConnCb_t *pCb)
{
   1c76c:	b580      	push	{r7, lr}
   1c76e:	b086      	sub	sp, #24
   1c770:	af00      	add	r7, sp, #0
   1c772:	6078      	str	r0, [r7, #4]
   1c774:	6039      	str	r1, [r7, #0]
  hciConnSpec_t connSpec;
  bool_t        idle;
  
  /* Change state to updating */
  pCb->updateState = APP_CU_STATE_UPDATING;
   1c776:	683b      	ldr	r3, [r7, #0]
   1c778:	2202      	movs	r2, #2
   1c77a:	735a      	strb	r2, [r3, #13]

  /* check if connection is idle */
  idle = (DmConnCheckIdle(pCb->connId) == 0);
   1c77c:	683b      	ldr	r3, [r7, #0]
   1c77e:	791b      	ldrb	r3, [r3, #4]
   1c780:	4618      	mov	r0, r3
   1c782:	f7f3 f911 	bl	f9a8 <DmConnCheckIdle>
   1c786:	4603      	mov	r3, r0
   1c788:	2b00      	cmp	r3, #0
   1c78a:	bf0c      	ite	eq
   1c78c:	2301      	moveq	r3, #1
   1c78e:	2300      	movne	r3, #0
   1c790:	b2db      	uxtb	r3, r3
   1c792:	75fb      	strb	r3, [r7, #23]
  
  /* if connection is idle and was also idle on last check */
  if (idle && pCb->connWasIdle)
   1c794:	7dfb      	ldrb	r3, [r7, #23]
   1c796:	2b00      	cmp	r3, #0
   1c798:	d027      	beq.n	1c7ea <appSlaveConnUpdateTimeout+0x7e>
   1c79a:	683b      	ldr	r3, [r7, #0]
   1c79c:	7a9b      	ldrb	r3, [r3, #10]
   1c79e:	2b00      	cmp	r3, #0
   1c7a0:	d023      	beq.n	1c7ea <appSlaveConnUpdateTimeout+0x7e>
  {
    /* do update */
    pCb->attempts++;
   1c7a2:	683b      	ldr	r3, [r7, #0]
   1c7a4:	7b1b      	ldrb	r3, [r3, #12]
   1c7a6:	3301      	adds	r3, #1
   1c7a8:	b2da      	uxtb	r2, r3
   1c7aa:	683b      	ldr	r3, [r7, #0]
   1c7ac:	731a      	strb	r2, [r3, #12]
    connSpec.connIntervalMin = pAppUpdateCfg->connIntervalMin;
   1c7ae:	4b14      	ldr	r3, [pc, #80]	; (1c800 <appSlaveConnUpdateTimeout+0x94>)
   1c7b0:	681b      	ldr	r3, [r3, #0]
   1c7b2:	889b      	ldrh	r3, [r3, #4]
   1c7b4:	813b      	strh	r3, [r7, #8]
    connSpec.connIntervalMax = pAppUpdateCfg->connIntervalMax;
   1c7b6:	4b12      	ldr	r3, [pc, #72]	; (1c800 <appSlaveConnUpdateTimeout+0x94>)
   1c7b8:	681b      	ldr	r3, [r3, #0]
   1c7ba:	88db      	ldrh	r3, [r3, #6]
   1c7bc:	817b      	strh	r3, [r7, #10]
    connSpec.connLatency = pAppUpdateCfg->connLatency;
   1c7be:	4b10      	ldr	r3, [pc, #64]	; (1c800 <appSlaveConnUpdateTimeout+0x94>)
   1c7c0:	681b      	ldr	r3, [r3, #0]
   1c7c2:	891b      	ldrh	r3, [r3, #8]
   1c7c4:	81bb      	strh	r3, [r7, #12]
    connSpec.supTimeout = pAppUpdateCfg->supTimeout;
   1c7c6:	4b0e      	ldr	r3, [pc, #56]	; (1c800 <appSlaveConnUpdateTimeout+0x94>)
   1c7c8:	681b      	ldr	r3, [r3, #0]
   1c7ca:	895b      	ldrh	r3, [r3, #10]
   1c7cc:	81fb      	strh	r3, [r7, #14]
    connSpec.minCeLen = 0;
   1c7ce:	2300      	movs	r3, #0
   1c7d0:	823b      	strh	r3, [r7, #16]
    connSpec.maxCeLen = 0xffff;
   1c7d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1c7d6:	827b      	strh	r3, [r7, #18]

    DmConnUpdate(pCb->connId, &connSpec);
   1c7d8:	683b      	ldr	r3, [r7, #0]
   1c7da:	791a      	ldrb	r2, [r3, #4]
   1c7dc:	f107 0308 	add.w	r3, r7, #8
   1c7e0:	4610      	mov	r0, r2
   1c7e2:	4619      	mov	r1, r3
   1c7e4:	f7f2 ff80 	bl	f6e8 <DmConnUpdate>
   1c7e8:	e007      	b.n	1c7fa <appSlaveConnUpdateTimeout+0x8e>
  }
  else
  {
    pCb->connWasIdle = idle;
   1c7ea:	683b      	ldr	r3, [r7, #0]
   1c7ec:	7dfa      	ldrb	r2, [r7, #23]
   1c7ee:	729a      	strb	r2, [r3, #10]
    appConnUpdateTimerStart(pCb->connId);
   1c7f0:	683b      	ldr	r3, [r7, #0]
   1c7f2:	791b      	ldrb	r3, [r3, #4]
   1c7f4:	4618      	mov	r0, r3
   1c7f6:	f7ff fba3 	bl	1bf40 <appConnUpdateTimerStart>
  }
}
   1c7fa:	3718      	adds	r7, #24
   1c7fc:	46bd      	mov	sp, r7
   1c7fe:	bd80      	pop	{r7, pc}
   1c800:	1000a234 	.word	0x1000a234

0001c804 <appSlaveProcMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appSlaveProcMsg(wsfMsgHdr_t *pMsg)
{
   1c804:	b580      	push	{r7, lr}
   1c806:	b084      	sub	sp, #16
   1c808:	af00      	add	r7, sp, #0
   1c80a:	6078      	str	r0, [r7, #4]
  appConnCb_t *pCb;
  
  /* look up app connection control block from DM connection ID */
  pCb = &appConnCb[pMsg->param - 1];
   1c80c:	687b      	ldr	r3, [r7, #4]
   1c80e:	881b      	ldrh	r3, [r3, #0]
   1c810:	3b01      	subs	r3, #1
   1c812:	015b      	lsls	r3, r3, #5
   1c814:	4a0e      	ldr	r2, [pc, #56]	; (1c850 <appSlaveProcMsg+0x4c>)
   1c816:	4413      	add	r3, r2
   1c818:	60fb      	str	r3, [r7, #12]

  switch(pMsg->event)
   1c81a:	687b      	ldr	r3, [r7, #4]
   1c81c:	789b      	ldrb	r3, [r3, #2]
   1c81e:	2b10      	cmp	r3, #16
   1c820:	d000      	beq.n	1c824 <appSlaveProcMsg+0x20>
        DmReadRemoteFeatures(pCb->connId);
      }
      break;

    default:
      break;
   1c822:	e011      	b.n	1c848 <appSlaveProcMsg+0x44>

  switch(pMsg->event)
  {
    case APP_CONN_UPDATE_TIMEOUT_IND:
      /* Check state to determine if read remote features is needed */
      if (pCb->updateState == APP_CU_STATE_UPDATING)
   1c824:	68fb      	ldr	r3, [r7, #12]
   1c826:	7b5b      	ldrb	r3, [r3, #13]
   1c828:	2b02      	cmp	r3, #2
   1c82a:	d104      	bne.n	1c836 <appSlaveProcMsg+0x32>
      {
        appSlaveConnUpdateTimeout(pMsg, pCb);
   1c82c:	6878      	ldr	r0, [r7, #4]
   1c82e:	68f9      	ldr	r1, [r7, #12]
   1c830:	f7ff ff9c 	bl	1c76c <appSlaveConnUpdateTimeout>
      else
      {
        pCb->updateState = APP_CU_STATE_WAIT_FEATURES;
        DmReadRemoteFeatures(pCb->connId);
      }
      break;
   1c834:	e007      	b.n	1c846 <appSlaveProcMsg+0x42>
      {
        appSlaveConnUpdateTimeout(pMsg, pCb);
      }
      else
      {
        pCb->updateState = APP_CU_STATE_WAIT_FEATURES;
   1c836:	68fb      	ldr	r3, [r7, #12]
   1c838:	2201      	movs	r2, #1
   1c83a:	735a      	strb	r2, [r3, #13]
        DmReadRemoteFeatures(pCb->connId);
   1c83c:	68fb      	ldr	r3, [r7, #12]
   1c83e:	791b      	ldrb	r3, [r3, #4]
   1c840:	4618      	mov	r0, r3
   1c842:	f7f2 ff47 	bl	f6d4 <DmReadRemoteFeatures>
      }
      break;
   1c846:	bf00      	nop

    default:
      break;
  }
}
   1c848:	3710      	adds	r7, #16
   1c84a:	46bd      	mov	sp, r7
   1c84c:	bd80      	pop	{r7, pc}
   1c84e:	bf00      	nop
   1c850:	1000a260 	.word	0x1000a260

0001c854 <AppSlaveInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppSlaveInit(void)
{
   1c854:	b580      	push	{r7, lr}
   1c856:	b082      	sub	sp, #8
   1c858:	af00      	add	r7, sp, #0
  uint8_t i;
   
  // for each advertising set
  for (i = 0; i < DM_NUM_ADV_SETS; i++)
   1c85a:	2300      	movs	r3, #0
   1c85c:	71fb      	strb	r3, [r7, #7]
   1c85e:	e014      	b.n	1c88a <AppSlaveInit+0x36>
  {
    /* initialize advertising state */
    appSlaveCb.advState[i] = APP_ADV_STOPPED;
   1c860:	79fb      	ldrb	r3, [r7, #7]
   1c862:	4a18      	ldr	r2, [pc, #96]	; (1c8c4 <AppSlaveInit+0x70>)
   1c864:	4413      	add	r3, r2
   1c866:	2203      	movs	r2, #3
   1c868:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* initialize advertising type */
    appSlaveCb.advType[i] = DM_ADV_CONN_UNDIRECT;
   1c86c:	79fb      	ldrb	r3, [r7, #7]
   1c86e:	4a15      	ldr	r2, [pc, #84]	; (1c8c4 <AppSlaveInit+0x70>)
   1c870:	4413      	add	r3, r2
   1c872:	2200      	movs	r2, #0
   1c874:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* initialize advertising type changed flag */
    appSlaveCb.advTypeChanged[i] = FALSE;
   1c878:	79fb      	ldrb	r3, [r7, #7]
   1c87a:	4a12      	ldr	r2, [pc, #72]	; (1c8c4 <AppSlaveInit+0x70>)
   1c87c:	4413      	add	r3, r2
   1c87e:	2200      	movs	r2, #0
   1c880:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
void AppSlaveInit(void)
{
  uint8_t i;
   
  // for each advertising set
  for (i = 0; i < DM_NUM_ADV_SETS; i++)
   1c884:	79fb      	ldrb	r3, [r7, #7]
   1c886:	3301      	adds	r3, #1
   1c888:	71fb      	strb	r3, [r7, #7]
   1c88a:	79fb      	ldrb	r3, [r7, #7]
   1c88c:	2b00      	cmp	r3, #0
   1c88e:	d0e7      	beq.n	1c860 <AppSlaveInit+0xc>
    /* initialize advertising type changed flag */
    appSlaveCb.advTypeChanged[i] = FALSE;
  }

  /* initialize discovery mode */
  appSlaveCb.discMode = APP_MODE_NONE;
   1c890:	4b0c      	ldr	r3, [pc, #48]	; (1c8c4 <AppSlaveInit+0x70>)
   1c892:	22ff      	movs	r2, #255	; 0xff
   1c894:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* initialize advertising mode */
  appSlaveAdvModeInit();
   1c898:	f7ff f9e4 	bl	1bc64 <appSlaveAdvModeInit>

  /* initialize address resolution */
  appSlaveCb.inProgress = FALSE;
   1c89c:	4b09      	ldr	r3, [pc, #36]	; (1c8c4 <AppSlaveInit+0x70>)
   1c89e:	2200      	movs	r2, #0
   1c8a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* set up callback from main */
  appCb.slaveCback = appSlaveProcMsg;
   1c8a4:	4b08      	ldr	r3, [pc, #32]	; (1c8c8 <AppSlaveInit+0x74>)
   1c8a6:	4a09      	ldr	r2, [pc, #36]	; (1c8cc <AppSlaveInit+0x78>)
   1c8a8:	601a      	str	r2, [r3, #0]

  appSlaveCb.peerAddrType = HCI_ADDR_TYPE_PUBLIC;
   1c8aa:	4b06      	ldr	r3, [pc, #24]	; (1c8c4 <AppSlaveInit+0x70>)
   1c8ac:	2200      	movs	r2, #0
   1c8ae:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  memset(appSlaveCb.peerAddr, 0, BDA_ADDR_LEN);
   1c8b2:	4807      	ldr	r0, [pc, #28]	; (1c8d0 <AppSlaveInit+0x7c>)
   1c8b4:	2100      	movs	r1, #0
   1c8b6:	2206      	movs	r2, #6
   1c8b8:	f003 fd98 	bl	203ec <memset>
}
   1c8bc:	3708      	adds	r7, #8
   1c8be:	46bd      	mov	sp, r7
   1c8c0:	bd80      	pop	{r7, pc}
   1c8c2:	bf00      	nop
   1c8c4:	1000a360 	.word	0x1000a360
   1c8c8:	1000a23c 	.word	0x1000a23c
   1c8cc:	0001c805 	.word	0x0001c805
   1c8d0:	1000a390 	.word	0x1000a390

0001c8d4 <AppSlaveProcDmMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppSlaveProcDmMsg(dmEvt_t *pMsg)
{
   1c8d4:	b580      	push	{r7, lr}
   1c8d6:	b084      	sub	sp, #16
   1c8d8:	af00      	add	r7, sp, #0
   1c8da:	6078      	str	r0, [r7, #4]
  appConnCb_t *pCb = NULL;
   1c8dc:	2300      	movs	r3, #0
   1c8de:	60fb      	str	r3, [r7, #12]

  /* look up app connection control block from DM connection ID */
  if ((pMsg->hdr.event != DM_ADV_STOP_IND) &&
   1c8e0:	687b      	ldr	r3, [r7, #4]
   1c8e2:	789b      	ldrb	r3, [r3, #2]
   1c8e4:	2b22      	cmp	r3, #34	; 0x22
   1c8e6:	d00a      	beq.n	1c8fe <AppSlaveProcDmMsg+0x2a>
    (pMsg->hdr.event != DM_ADV_SET_STOP_IND))
   1c8e8:	687b      	ldr	r3, [r7, #4]
   1c8ea:	789b      	ldrb	r3, [r3, #2]
void AppSlaveProcDmMsg(dmEvt_t *pMsg)
{
  appConnCb_t *pCb = NULL;

  /* look up app connection control block from DM connection ID */
  if ((pMsg->hdr.event != DM_ADV_STOP_IND) &&
   1c8ec:	2b47      	cmp	r3, #71	; 0x47
   1c8ee:	d006      	beq.n	1c8fe <AppSlaveProcDmMsg+0x2a>
    (pMsg->hdr.event != DM_ADV_SET_STOP_IND))
  {
    pCb = &appConnCb[pMsg->hdr.param - 1];
   1c8f0:	687b      	ldr	r3, [r7, #4]
   1c8f2:	881b      	ldrh	r3, [r3, #0]
   1c8f4:	3b01      	subs	r3, #1
   1c8f6:	015b      	lsls	r3, r3, #5
   1c8f8:	4a58      	ldr	r2, [pc, #352]	; (1ca5c <AppSlaveProcDmMsg+0x188>)
   1c8fa:	4413      	add	r3, r2
   1c8fc:	60fb      	str	r3, [r7, #12]
  }

  switch (pMsg->hdr.event)
   1c8fe:	687b      	ldr	r3, [r7, #4]
   1c900:	789b      	ldrb	r3, [r3, #2]
   1c902:	3b20      	subs	r3, #32
   1c904:	2b35      	cmp	r3, #53	; 0x35
   1c906:	f200 80a5 	bhi.w	1ca54 <AppSlaveProcDmMsg+0x180>
   1c90a:	a201      	add	r2, pc, #4	; (adr r2, 1c910 <AppSlaveProcDmMsg+0x3c>)
   1c90c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1c910:	0001c9e9 	.word	0x0001c9e9
   1c914:	0001ca55 	.word	0x0001ca55
   1c918:	0001c9ef 	.word	0x0001c9ef
   1c91c:	0001ca55 	.word	0x0001ca55
   1c920:	0001ca55 	.word	0x0001ca55
   1c924:	0001ca55 	.word	0x0001ca55
   1c928:	0001ca55 	.word	0x0001ca55
   1c92c:	0001ca03 	.word	0x0001ca03
   1c930:	0001ca0d 	.word	0x0001ca0d
   1c934:	0001ca17 	.word	0x0001ca17
   1c938:	0001ca55 	.word	0x0001ca55
   1c93c:	0001ca55 	.word	0x0001ca55
   1c940:	0001ca55 	.word	0x0001ca55
   1c944:	0001ca55 	.word	0x0001ca55
   1c948:	0001ca55 	.word	0x0001ca55
   1c94c:	0001ca55 	.word	0x0001ca55
   1c950:	0001ca55 	.word	0x0001ca55
   1c954:	0001ca55 	.word	0x0001ca55
   1c958:	0001ca55 	.word	0x0001ca55
   1c95c:	0001ca55 	.word	0x0001ca55
   1c960:	0001ca55 	.word	0x0001ca55
   1c964:	0001ca55 	.word	0x0001ca55
   1c968:	0001ca55 	.word	0x0001ca55
   1c96c:	0001ca21 	.word	0x0001ca21
   1c970:	0001ca55 	.word	0x0001ca55
   1c974:	0001ca55 	.word	0x0001ca55
   1c978:	0001ca55 	.word	0x0001ca55
   1c97c:	0001ca55 	.word	0x0001ca55
   1c980:	0001ca55 	.word	0x0001ca55
   1c984:	0001ca55 	.word	0x0001ca55
   1c988:	0001ca55 	.word	0x0001ca55
   1c98c:	0001ca2b 	.word	0x0001ca2b
   1c990:	0001ca55 	.word	0x0001ca55
   1c994:	0001ca55 	.word	0x0001ca55
   1c998:	0001ca55 	.word	0x0001ca55
   1c99c:	0001ca55 	.word	0x0001ca55
   1c9a0:	0001ca55 	.word	0x0001ca55
   1c9a4:	0001ca55 	.word	0x0001ca55
   1c9a8:	0001ca55 	.word	0x0001ca55
   1c9ac:	0001c9ef 	.word	0x0001c9ef
   1c9b0:	0001ca55 	.word	0x0001ca55
   1c9b4:	0001ca55 	.word	0x0001ca55
   1c9b8:	0001ca55 	.word	0x0001ca55
   1c9bc:	0001ca55 	.word	0x0001ca55
   1c9c0:	0001ca55 	.word	0x0001ca55
   1c9c4:	0001ca55 	.word	0x0001ca55
   1c9c8:	0001ca55 	.word	0x0001ca55
   1c9cc:	0001ca55 	.word	0x0001ca55
   1c9d0:	0001ca55 	.word	0x0001ca55
   1c9d4:	0001ca35 	.word	0x0001ca35
   1c9d8:	0001ca55 	.word	0x0001ca55
   1c9dc:	0001ca55 	.word	0x0001ca55
   1c9e0:	0001ca55 	.word	0x0001ca55
   1c9e4:	0001ca49 	.word	0x0001ca49
  {
    case DM_RESET_CMPL_IND:
      appSlaveAdvModeInit();
   1c9e8:	f7ff f93c 	bl	1bc64 <appSlaveAdvModeInit>
      break;
   1c9ec:	e033      	b.n	1ca56 <AppSlaveProcDmMsg+0x182>

    case DM_ADV_SET_STOP_IND:
    case DM_ADV_STOP_IND:
      if (appSlaveCb.advStopCback != NULL)
   1c9ee:	4b1c      	ldr	r3, [pc, #112]	; (1ca60 <AppSlaveProcDmMsg+0x18c>)
   1c9f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c9f2:	2b00      	cmp	r3, #0
   1c9f4:	d004      	beq.n	1ca00 <AppSlaveProcDmMsg+0x12c>
      {
        (*appSlaveCb.advStopCback)(pMsg);
   1c9f6:	4b1a      	ldr	r3, [pc, #104]	; (1ca60 <AppSlaveProcDmMsg+0x18c>)
   1c9f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c9fa:	6878      	ldr	r0, [r7, #4]
   1c9fc:	4798      	blx	r3
      }
      break;
   1c9fe:	e02a      	b.n	1ca56 <AppSlaveProcDmMsg+0x182>
   1ca00:	e029      	b.n	1ca56 <AppSlaveProcDmMsg+0x182>

    case DM_CONN_OPEN_IND:
      appSlaveConnOpen(pMsg, pCb);
   1ca02:	6878      	ldr	r0, [r7, #4]
   1ca04:	68f9      	ldr	r1, [r7, #12]
   1ca06:	f7ff fb47 	bl	1c098 <appSlaveConnOpen>
      break;
   1ca0a:	e024      	b.n	1ca56 <AppSlaveProcDmMsg+0x182>

    case DM_CONN_CLOSE_IND:
      appSlaveConnClose(pMsg, pCb);
   1ca0c:	6878      	ldr	r0, [r7, #4]
   1ca0e:	68f9      	ldr	r1, [r7, #12]
   1ca10:	f7ff fb58 	bl	1c0c4 <appSlaveConnClose>
      break;
   1ca14:	e01f      	b.n	1ca56 <AppSlaveProcDmMsg+0x182>

    case DM_CONN_UPDATE_IND:
      appSlaveConnUpdate(pMsg, pCb);
   1ca16:	6878      	ldr	r0, [r7, #4]
   1ca18:	68f9      	ldr	r1, [r7, #12]
   1ca1a:	f7ff fbef 	bl	1c1fc <appSlaveConnUpdate>
      break;
   1ca1e:	e01a      	b.n	1ca56 <AppSlaveProcDmMsg+0x182>

    case DM_PRIV_RESOLVED_ADDR_IND:
      appSlaveResolvedAddrInd(pMsg, pCb);
   1ca20:	6878      	ldr	r0, [r7, #4]
   1ca22:	68f9      	ldr	r1, [r7, #12]
   1ca24:	f7ff fc26 	bl	1c274 <appSlaveResolvedAddrInd>
      break;
   1ca28:	e015      	b.n	1ca56 <AppSlaveProcDmMsg+0x182>

    case DM_REM_CONN_PARAM_REQ_IND:
      appSlaveRemoteConnParamReq(pMsg, pCb);
   1ca2a:	6878      	ldr	r0, [r7, #4]
   1ca2c:	68f9      	ldr	r1, [r7, #12]
   1ca2e:	f7ff fc79 	bl	1c324 <appSlaveRemoteConnParamReq>
      break;
   1ca32:	e010      	b.n	1ca56 <AppSlaveProcDmMsg+0x182>
    
    case DM_REMOTE_FEATURES_IND:
      /* If conn update is waiting for features, perform the conn update timeout action */
      if (pCb->updateState == APP_CU_STATE_WAIT_FEATURES)
   1ca34:	68fb      	ldr	r3, [r7, #12]
   1ca36:	7b5b      	ldrb	r3, [r3, #13]
   1ca38:	2b01      	cmp	r3, #1
   1ca3a:	d104      	bne.n	1ca46 <AppSlaveProcDmMsg+0x172>
      {
        appSlaveConnUpdateTimeout((wsfMsgHdr_t*) pMsg, pCb);
   1ca3c:	6878      	ldr	r0, [r7, #4]
   1ca3e:	68f9      	ldr	r1, [r7, #12]
   1ca40:	f7ff fe94 	bl	1c76c <appSlaveConnUpdateTimeout>
      }
      break;
   1ca44:	e007      	b.n	1ca56 <AppSlaveProcDmMsg+0x182>
   1ca46:	e006      	b.n	1ca56 <AppSlaveProcDmMsg+0x182>
    
    case DM_HW_ERROR_IND:
      HciDrvRadioBoot(0);
   1ca48:	2000      	movs	r0, #0
   1ca4a:	f7f8 f911 	bl	14c70 <HciDrvRadioBoot>
      DmDevReset();
   1ca4e:	f7f3 f8c5 	bl	fbdc <DmDevReset>
      break;
   1ca52:	e000      	b.n	1ca56 <AppSlaveProcDmMsg+0x182>

    default:
      break;
   1ca54:	bf00      	nop
  }
}
   1ca56:	3710      	adds	r7, #16
   1ca58:	46bd      	mov	sp, r7
   1ca5a:	bd80      	pop	{r7, pc}
   1ca5c:	1000a260 	.word	0x1000a260
   1ca60:	1000a360 	.word	0x1000a360

0001ca64 <appAdvSetData>:
 *  \return None.
 */
/*************************************************************************************************/
void appAdvSetData(uint8_t advHandle, uint8_t location, uint16_t len, uint8_t *pData, uint16_t bufLen,
                   uint16_t maxLen)
{
   1ca64:	b580      	push	{r7, lr}
   1ca66:	b082      	sub	sp, #8
   1ca68:	af00      	add	r7, sp, #0
   1ca6a:	603b      	str	r3, [r7, #0]
   1ca6c:	4603      	mov	r3, r0
   1ca6e:	71fb      	strb	r3, [r7, #7]
   1ca70:	460b      	mov	r3, r1
   1ca72:	71bb      	strb	r3, [r7, #6]
   1ca74:	4613      	mov	r3, r2
   1ca76:	80bb      	strh	r3, [r7, #4]
  /* store data for location */
  appSlaveCb.pAdvData[advHandle][location] = pData;
   1ca78:	79fa      	ldrb	r2, [r7, #7]
   1ca7a:	79bb      	ldrb	r3, [r7, #6]
   1ca7c:	4926      	ldr	r1, [pc, #152]	; (1cb18 <appAdvSetData+0xb4>)
   1ca7e:	0092      	lsls	r2, r2, #2
   1ca80:	4413      	add	r3, r2
   1ca82:	683a      	ldr	r2, [r7, #0]
   1ca84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  appSlaveCb.advDataLen[advHandle][location] = len;
   1ca88:	79fa      	ldrb	r2, [r7, #7]
   1ca8a:	79bb      	ldrb	r3, [r7, #6]
   1ca8c:	4922      	ldr	r1, [pc, #136]	; (1cb18 <appAdvSetData+0xb4>)
   1ca8e:	0092      	lsls	r2, r2, #2
   1ca90:	4413      	add	r3, r2
   1ca92:	3308      	adds	r3, #8
   1ca94:	88ba      	ldrh	r2, [r7, #4]
   1ca96:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

  /* set length of advertising data buffer maintained by Application */
  appSlaveCb.advDataBufLen[advHandle][location] = bufLen;
   1ca9a:	79fa      	ldrb	r2, [r7, #7]
   1ca9c:	79bb      	ldrb	r3, [r7, #6]
   1ca9e:	491e      	ldr	r1, [pc, #120]	; (1cb18 <appAdvSetData+0xb4>)
   1caa0:	0092      	lsls	r2, r2, #2
   1caa2:	4413      	add	r3, r2
   1caa4:	330c      	adds	r3, #12
   1caa6:	8a3a      	ldrh	r2, [r7, #16]
   1caa8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

  /* set maximum advertising data length supported by Controller */
  appSlaveCb.maxAdvDataLen[advHandle] = maxLen;
   1caac:	79fb      	ldrb	r3, [r7, #7]
   1caae:	491a      	ldr	r1, [pc, #104]	; (1cb18 <appAdvSetData+0xb4>)
   1cab0:	3314      	adds	r3, #20
   1cab2:	8aba      	ldrh	r2, [r7, #20]
   1cab4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

  /* reset data offset */
  appSlaveCb.advDataOffset[advHandle][location] = 0;
   1cab8:	79fa      	ldrb	r2, [r7, #7]
   1caba:	79bb      	ldrb	r3, [r7, #6]
   1cabc:	4916      	ldr	r1, [pc, #88]	; (1cb18 <appAdvSetData+0xb4>)
   1cabe:	0092      	lsls	r2, r2, #2
   1cac0:	4413      	add	r3, r2
   1cac2:	3310      	adds	r3, #16
   1cac4:	2200      	movs	r2, #0
   1cac6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

  /* Set the data now if we are in the right mode and the data is complete (no fragmentation's required) */
  if ((appSlaveCb.advState[advHandle] != APP_ADV_STOPPED) &&
   1caca:	79fb      	ldrb	r3, [r7, #7]
   1cacc:	4a12      	ldr	r2, [pc, #72]	; (1cb18 <appAdvSetData+0xb4>)
   1cace:	4413      	add	r3, r2
   1cad0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   1cad4:	2b03      	cmp	r3, #3
   1cad6:	d015      	beq.n	1cb04 <appAdvSetData+0xa0>
      (APP_LOC_2_MODE(location) == appSlaveCb.discMode)   &&
   1cad8:	79bb      	ldrb	r3, [r7, #6]
   1cada:	085b      	lsrs	r3, r3, #1
   1cadc:	b2da      	uxtb	r2, r3
   1cade:	4b0e      	ldr	r3, [pc, #56]	; (1cb18 <appAdvSetData+0xb4>)
   1cae0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f

  /* reset data offset */
  appSlaveCb.advDataOffset[advHandle][location] = 0;

  /* Set the data now if we are in the right mode and the data is complete (no fragmentation's required) */
  if ((appSlaveCb.advState[advHandle] != APP_ADV_STOPPED) &&
   1cae4:	429a      	cmp	r2, r3
   1cae6:	d10d      	bne.n	1cb04 <appAdvSetData+0xa0>
      (APP_LOC_2_MODE(location) == appSlaveCb.discMode)   &&
   1cae8:	88bb      	ldrh	r3, [r7, #4]
   1caea:	2bfb      	cmp	r3, #251	; 0xfb
   1caec:	d80a      	bhi.n	1cb04 <appAdvSetData+0xa0>
      (len <= HCI_EXT_ADV_DATA_LEN)                       &&
   1caee:	88ba      	ldrh	r2, [r7, #4]
   1caf0:	8abb      	ldrh	r3, [r7, #20]
   1caf2:	429a      	cmp	r2, r3
   1caf4:	d806      	bhi.n	1cb04 <appAdvSetData+0xa0>
      (len <= maxLen))
  {
    appSetAdvScanDataFrag(advHandle, location);
   1caf6:	79fa      	ldrb	r2, [r7, #7]
   1caf8:	79bb      	ldrb	r3, [r7, #6]
   1cafa:	4610      	mov	r0, r2
   1cafc:	4619      	mov	r1, r3
   1cafe:	f7ff f929 	bl	1bd54 <appSetAdvScanDataFrag>
   1cb02:	e005      	b.n	1cb10 <appAdvSetData+0xac>
  }
  /* Otherwise set it when advertising is started or mode changes */
  else
  {
    appSlaveCb.advDataSynced[advHandle] = FALSE;
   1cb04:	79fb      	ldrb	r3, [r7, #7]
   1cb06:	4a04      	ldr	r2, [pc, #16]	; (1cb18 <appAdvSetData+0xb4>)
   1cb08:	4413      	add	r3, r2
   1cb0a:	2200      	movs	r2, #0
   1cb0c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  }
}
   1cb10:	3708      	adds	r7, #8
   1cb12:	46bd      	mov	sp, r7
   1cb14:	bd80      	pop	{r7, pc}
   1cb16:	bf00      	nop
   1cb18:	1000a360 	.word	0x1000a360

0001cb1c <appAdvStart>:
 *  \return None.
 */
/*************************************************************************************************/
void appAdvStart(uint8_t numSets, uint8_t *pAdvHandles, uint16_t *pInterval, uint16_t *pDuration,
                 uint8_t *pMaxEaEvents, bool_t cfgAdvParam)
{
   1cb1c:	b580      	push	{r7, lr}
   1cb1e:	b086      	sub	sp, #24
   1cb20:	af00      	add	r7, sp, #0
   1cb22:	60b9      	str	r1, [r7, #8]
   1cb24:	607a      	str	r2, [r7, #4]
   1cb26:	603b      	str	r3, [r7, #0]
   1cb28:	4603      	mov	r3, r0
   1cb2a:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* start advertising if not connectable advertising or multiple connections supported */
  if (!appSlaveConnectableAdv(numSets, pAdvHandles) || (appNumConns(DM_ROLE_SLAVE) < pAppSlaveCfg->connMax))
   1cb2c:	7bfb      	ldrb	r3, [r7, #15]
   1cb2e:	4618      	mov	r0, r3
   1cb30:	68b9      	ldr	r1, [r7, #8]
   1cb32:	f7ff f8a5 	bl	1bc80 <appSlaveConnectableAdv>
   1cb36:	4603      	mov	r3, r0
   1cb38:	2b00      	cmp	r3, #0
   1cb3a:	d009      	beq.n	1cb50 <appAdvStart+0x34>
   1cb3c:	2001      	movs	r0, #1
   1cb3e:	f7fe fe9f 	bl	1b880 <appNumConns>
   1cb42:	4603      	mov	r3, r0
   1cb44:	461a      	mov	r2, r3
   1cb46:	4b37      	ldr	r3, [pc, #220]	; (1cc24 <appAdvStart+0x108>)
   1cb48:	681b      	ldr	r3, [r3, #0]
   1cb4a:	781b      	ldrb	r3, [r3, #0]
   1cb4c:	429a      	cmp	r2, r3
   1cb4e:	d252      	bcs.n	1cbf6 <appAdvStart+0xda>
  {
    /* for each advertising set */
    for (i = 0; i < numSets; i++)
   1cb50:	2300      	movs	r3, #0
   1cb52:	75fb      	strb	r3, [r7, #23]
   1cb54:	e043      	b.n	1cbde <appAdvStart+0xc2>
    {
      /* if advertising parameters to be configured */
      if (cfgAdvParam)
   1cb56:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
   1cb5a:	2b00      	cmp	r3, #0
   1cb5c:	d026      	beq.n	1cbac <appAdvStart+0x90>
      {
        /* set min and max interval */
        DmAdvSetInterval(pAdvHandles[i], pInterval[i], pInterval[i]);
   1cb5e:	7dfb      	ldrb	r3, [r7, #23]
   1cb60:	68ba      	ldr	r2, [r7, #8]
   1cb62:	4413      	add	r3, r2
   1cb64:	7818      	ldrb	r0, [r3, #0]
   1cb66:	7dfb      	ldrb	r3, [r7, #23]
   1cb68:	005b      	lsls	r3, r3, #1
   1cb6a:	687a      	ldr	r2, [r7, #4]
   1cb6c:	4413      	add	r3, r2
   1cb6e:	8819      	ldrh	r1, [r3, #0]
   1cb70:	7dfb      	ldrb	r3, [r7, #23]
   1cb72:	005b      	lsls	r3, r3, #1
   1cb74:	687a      	ldr	r2, [r7, #4]
   1cb76:	4413      	add	r3, r2
   1cb78:	881b      	ldrh	r3, [r3, #0]
   1cb7a:	461a      	mov	r2, r3
   1cb7c:	f7f2 f91e 	bl	edbc <DmAdvSetInterval>

        /* set advertising parameters */
        DmAdvConfig(pAdvHandles[i], appSlaveCb.advType[pAdvHandles[i]], appSlaveCb.peerAddrType,
   1cb80:	7dfb      	ldrb	r3, [r7, #23]
   1cb82:	68ba      	ldr	r2, [r7, #8]
   1cb84:	4413      	add	r3, r2
   1cb86:	7819      	ldrb	r1, [r3, #0]
   1cb88:	7dfb      	ldrb	r3, [r7, #23]
   1cb8a:	68ba      	ldr	r2, [r7, #8]
   1cb8c:	4413      	add	r3, r2
   1cb8e:	781b      	ldrb	r3, [r3, #0]
   1cb90:	461a      	mov	r2, r3
   1cb92:	4b25      	ldr	r3, [pc, #148]	; (1cc28 <appAdvStart+0x10c>)
   1cb94:	4413      	add	r3, r2
   1cb96:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
   1cb9a:	4b23      	ldr	r3, [pc, #140]	; (1cc28 <appAdvStart+0x10c>)
   1cb9c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
   1cba0:	4608      	mov	r0, r1
   1cba2:	4611      	mov	r1, r2
   1cba4:	461a      	mov	r2, r3
   1cba6:	4b21      	ldr	r3, [pc, #132]	; (1cc2c <appAdvStart+0x110>)
   1cba8:	f7f2 f866 	bl	ec78 <DmAdvConfig>
                    appSlaveCb.peerAddr);
      }

      /* if adv data to be synced */
      if (!appSlaveCb.advDataSynced[pAdvHandles[i]])
   1cbac:	7dfb      	ldrb	r3, [r7, #23]
   1cbae:	68ba      	ldr	r2, [r7, #8]
   1cbb0:	4413      	add	r3, r2
   1cbb2:	781b      	ldrb	r3, [r3, #0]
   1cbb4:	461a      	mov	r2, r3
   1cbb6:	4b1c      	ldr	r3, [pc, #112]	; (1cc28 <appAdvStart+0x10c>)
   1cbb8:	4413      	add	r3, r2
   1cbba:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
   1cbbe:	2b00      	cmp	r3, #0
   1cbc0:	d10a      	bne.n	1cbd8 <appAdvStart+0xbc>
      {
        /* set advertising or scan response data */
        appSetAdvScanData(pAdvHandles[i], appSlaveCb.discMode);
   1cbc2:	7dfb      	ldrb	r3, [r7, #23]
   1cbc4:	68ba      	ldr	r2, [r7, #8]
   1cbc6:	4413      	add	r3, r2
   1cbc8:	781a      	ldrb	r2, [r3, #0]
   1cbca:	4b17      	ldr	r3, [pc, #92]	; (1cc28 <appAdvStart+0x10c>)
   1cbcc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   1cbd0:	4610      	mov	r0, r2
   1cbd2:	4619      	mov	r1, r3
   1cbd4:	f7ff f944 	bl	1be60 <appSetAdvScanData>

  /* start advertising if not connectable advertising or multiple connections supported */
  if (!appSlaveConnectableAdv(numSets, pAdvHandles) || (appNumConns(DM_ROLE_SLAVE) < pAppSlaveCfg->connMax))
  {
    /* for each advertising set */
    for (i = 0; i < numSets; i++)
   1cbd8:	7dfb      	ldrb	r3, [r7, #23]
   1cbda:	3301      	adds	r3, #1
   1cbdc:	75fb      	strb	r3, [r7, #23]
   1cbde:	7dfa      	ldrb	r2, [r7, #23]
   1cbe0:	7bfb      	ldrb	r3, [r7, #15]
   1cbe2:	429a      	cmp	r2, r3
   1cbe4:	d3b7      	bcc.n	1cb56 <appAdvStart+0x3a>
        appSetAdvScanData(pAdvHandles[i], appSlaveCb.discMode);
      }
    }

    /* start advertising */
    DmAdvStart(numSets, pAdvHandles, pDuration, pMaxEaEvents);
   1cbe6:	7bfb      	ldrb	r3, [r7, #15]
   1cbe8:	4618      	mov	r0, r3
   1cbea:	68b9      	ldr	r1, [r7, #8]
   1cbec:	683a      	ldr	r2, [r7, #0]
   1cbee:	6a3b      	ldr	r3, [r7, #32]
   1cbf0:	f7f2 f880 	bl	ecf4 <DmAdvStart>

    return;
   1cbf4:	e013      	b.n	1cc1e <appAdvStart+0x102>
  }

  /* done with all advertising states */
  for (i = 0; i < numSets; i++)
   1cbf6:	2300      	movs	r3, #0
   1cbf8:	75fb      	strb	r3, [r7, #23]
   1cbfa:	e00c      	b.n	1cc16 <appAdvStart+0xfa>
  {
    appSlaveCb.advState[pAdvHandles[i]] = APP_ADV_STOPPED;
   1cbfc:	7dfb      	ldrb	r3, [r7, #23]
   1cbfe:	68ba      	ldr	r2, [r7, #8]
   1cc00:	4413      	add	r3, r2
   1cc02:	781b      	ldrb	r3, [r3, #0]
   1cc04:	461a      	mov	r2, r3
   1cc06:	4b08      	ldr	r3, [pc, #32]	; (1cc28 <appAdvStart+0x10c>)
   1cc08:	4413      	add	r3, r2
   1cc0a:	2203      	movs	r2, #3
   1cc0c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    return;
  }

  /* done with all advertising states */
  for (i = 0; i < numSets; i++)
   1cc10:	7dfb      	ldrb	r3, [r7, #23]
   1cc12:	3301      	adds	r3, #1
   1cc14:	75fb      	strb	r3, [r7, #23]
   1cc16:	7dfa      	ldrb	r2, [r7, #23]
   1cc18:	7bfb      	ldrb	r3, [r7, #15]
   1cc1a:	429a      	cmp	r2, r3
   1cc1c:	d3ee      	bcc.n	1cbfc <appAdvStart+0xe0>
  {
    appSlaveCb.advState[pAdvHandles[i]] = APP_ADV_STOPPED;
  }
}
   1cc1e:	3718      	adds	r7, #24
   1cc20:	46bd      	mov	sp, r7
   1cc22:	bd80      	pop	{r7, pc}
   1cc24:	1000a238 	.word	0x1000a238
   1cc28:	1000a360 	.word	0x1000a360
   1cc2c:	1000a390 	.word	0x1000a390

0001cc30 <appSlaveAdvStart>:
 *  \return None.
 */
/*************************************************************************************************/
void appSlaveAdvStart(uint8_t numSets, uint8_t *pAdvHandles, uint16_t *pInterval, uint16_t *pDuration,
                      uint8_t *pMaxEaEvents, bool_t cfgAdvParam, uint8_t mode)
{
   1cc30:	b580      	push	{r7, lr}
   1cc32:	b088      	sub	sp, #32
   1cc34:	af02      	add	r7, sp, #8
   1cc36:	60b9      	str	r1, [r7, #8]
   1cc38:	607a      	str	r2, [r7, #4]
   1cc3a:	603b      	str	r3, [r7, #0]
   1cc3c:	4603      	mov	r3, r0
   1cc3e:	73fb      	strb	r3, [r7, #15]
  uint8_t i;
  uint8_t prevMode = appSlaveCb.discMode;
   1cc40:	4b25      	ldr	r3, [pc, #148]	; (1ccd8 <appSlaveAdvStart+0xa8>)
   1cc42:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   1cc46:	75bb      	strb	r3, [r7, #22]

  /* handle auto init mode */
  if (mode == APP_MODE_AUTO_INIT)
   1cc48:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   1cc4c:	2b02      	cmp	r3, #2
   1cc4e:	d114      	bne.n	1cc7a <appSlaveAdvStart+0x4a>
  {
    if (AppDbCheckBonded() == FALSE)
   1cc50:	f7fc fdba 	bl	197c8 <AppDbCheckBonded>
   1cc54:	4603      	mov	r3, r0
   1cc56:	2b00      	cmp	r3, #0
   1cc58:	d107      	bne.n	1cc6a <appSlaveAdvStart+0x3a>
    {
      AppSetBondable(TRUE);
   1cc5a:	2001      	movs	r0, #1
   1cc5c:	f000 f8be 	bl	1cddc <AppSetBondable>
      appSlaveCb.discMode = APP_MODE_DISCOVERABLE;
   1cc60:	4b1d      	ldr	r3, [pc, #116]	; (1ccd8 <appSlaveAdvStart+0xa8>)
   1cc62:	2201      	movs	r2, #1
   1cc64:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   1cc68:	e00c      	b.n	1cc84 <appSlaveAdvStart+0x54>
    }
    else
    {
      AppSetBondable(FALSE);
   1cc6a:	2000      	movs	r0, #0
   1cc6c:	f000 f8b6 	bl	1cddc <AppSetBondable>
      appSlaveCb.discMode = APP_MODE_CONNECTABLE;
   1cc70:	4b19      	ldr	r3, [pc, #100]	; (1ccd8 <appSlaveAdvStart+0xa8>)
   1cc72:	2200      	movs	r2, #0
   1cc74:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   1cc78:	e004      	b.n	1cc84 <appSlaveAdvStart+0x54>
      /* init white list with bonded device addresses */
    }
  }
  else
  {
    appSlaveCb.discMode = mode;
   1cc7a:	4a17      	ldr	r2, [pc, #92]	; (1ccd8 <appSlaveAdvStart+0xa8>)
   1cc7c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   1cc80:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
  }

  /* if mode changed force update of advertising data */
  if (prevMode != appSlaveCb.discMode)
   1cc84:	4b14      	ldr	r3, [pc, #80]	; (1ccd8 <appSlaveAdvStart+0xa8>)
   1cc86:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   1cc8a:	7dba      	ldrb	r2, [r7, #22]
   1cc8c:	429a      	cmp	r2, r3
   1cc8e:	d014      	beq.n	1ccba <appSlaveAdvStart+0x8a>
  {
    for (i = 0; i < numSets; i++)
   1cc90:	2300      	movs	r3, #0
   1cc92:	75fb      	strb	r3, [r7, #23]
   1cc94:	e00d      	b.n	1ccb2 <appSlaveAdvStart+0x82>
    {
      /* force update of advertising data */
      appSlaveForceAdvDataSync(pAdvHandles[i], appSlaveCb.discMode);
   1cc96:	7dfb      	ldrb	r3, [r7, #23]
   1cc98:	68ba      	ldr	r2, [r7, #8]
   1cc9a:	4413      	add	r3, r2
   1cc9c:	781a      	ldrb	r2, [r3, #0]
   1cc9e:	4b0e      	ldr	r3, [pc, #56]	; (1ccd8 <appSlaveAdvStart+0xa8>)
   1cca0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   1cca4:	4610      	mov	r0, r2
   1cca6:	4619      	mov	r1, r3
   1cca8:	f7ff f824 	bl	1bcf4 <appSlaveForceAdvDataSync>
  }

  /* if mode changed force update of advertising data */
  if (prevMode != appSlaveCb.discMode)
  {
    for (i = 0; i < numSets; i++)
   1ccac:	7dfb      	ldrb	r3, [r7, #23]
   1ccae:	3301      	adds	r3, #1
   1ccb0:	75fb      	strb	r3, [r7, #23]
   1ccb2:	7dfa      	ldrb	r2, [r7, #23]
   1ccb4:	7bfb      	ldrb	r3, [r7, #15]
   1ccb6:	429a      	cmp	r2, r3
   1ccb8:	d3ed      	bcc.n	1cc96 <appSlaveAdvStart+0x66>
      appSlaveForceAdvDataSync(pAdvHandles[i], appSlaveCb.discMode);
    }
  }

  /* start advertising */
  appAdvStart(numSets, pAdvHandles, pInterval, pDuration, pMaxEaEvents, TRUE);
   1ccba:	7bfa      	ldrb	r2, [r7, #15]
   1ccbc:	6a3b      	ldr	r3, [r7, #32]
   1ccbe:	9300      	str	r3, [sp, #0]
   1ccc0:	2301      	movs	r3, #1
   1ccc2:	9301      	str	r3, [sp, #4]
   1ccc4:	4610      	mov	r0, r2
   1ccc6:	68b9      	ldr	r1, [r7, #8]
   1ccc8:	687a      	ldr	r2, [r7, #4]
   1ccca:	683b      	ldr	r3, [r7, #0]
   1cccc:	f7ff ff26 	bl	1cb1c <appAdvStart>
}
   1ccd0:	3718      	adds	r7, #24
   1ccd2:	46bd      	mov	sp, r7
   1ccd4:	bd80      	pop	{r7, pc}
   1ccd6:	bf00      	nop
   1ccd8:	1000a360 	.word	0x1000a360

0001ccdc <AppSlaveSecProcDmMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppSlaveSecProcDmMsg(dmEvt_t *pMsg)
{
   1ccdc:	b580      	push	{r7, lr}
   1ccde:	b084      	sub	sp, #16
   1cce0:	af00      	add	r7, sp, #0
   1cce2:	6078      	str	r0, [r7, #4]
  appConnCb_t *pCb;
  
  /* look up app connection control block from DM connection ID */
  pCb = &appConnCb[pMsg->hdr.param - 1];
   1cce4:	687b      	ldr	r3, [r7, #4]
   1cce6:	881b      	ldrh	r3, [r3, #0]
   1cce8:	3b01      	subs	r3, #1
   1ccea:	015b      	lsls	r3, r3, #5
   1ccec:	4a3a      	ldr	r2, [pc, #232]	; (1cdd8 <AppSlaveSecProcDmMsg+0xfc>)
   1ccee:	4413      	add	r3, r2
   1ccf0:	60fb      	str	r3, [r7, #12]

  switch(pMsg->hdr.event)
   1ccf2:	687b      	ldr	r3, [r7, #4]
   1ccf4:	789b      	ldrb	r3, [r3, #2]
   1ccf6:	3b27      	subs	r3, #39	; 0x27
   1ccf8:	2b17      	cmp	r3, #23
   1ccfa:	d869      	bhi.n	1cdd0 <AppSlaveSecProcDmMsg+0xf4>
   1ccfc:	a201      	add	r2, pc, #4	; (adr r2, 1cd04 <AppSlaveSecProcDmMsg+0x28>)
   1ccfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1cd02:	bf00      	nop
   1cd04:	0001cd65 	.word	0x0001cd65
   1cd08:	0001cd6f 	.word	0x0001cd6f
   1cd0c:	0001cdd1 	.word	0x0001cdd1
   1cd10:	0001cd79 	.word	0x0001cd79
   1cd14:	0001cd83 	.word	0x0001cd83
   1cd18:	0001cd8d 	.word	0x0001cd8d
   1cd1c:	0001cdd1 	.word	0x0001cdd1
   1cd20:	0001cdd1 	.word	0x0001cdd1
   1cd24:	0001cd97 	.word	0x0001cd97
   1cd28:	0001cdab 	.word	0x0001cdab
   1cd2c:	0001cda1 	.word	0x0001cda1
   1cd30:	0001cdd1 	.word	0x0001cdd1
   1cd34:	0001cdd1 	.word	0x0001cdd1
   1cd38:	0001cdd1 	.word	0x0001cdd1
   1cd3c:	0001cdd1 	.word	0x0001cdd1
   1cd40:	0001cdd1 	.word	0x0001cdd1
   1cd44:	0001cdd1 	.word	0x0001cdd1
   1cd48:	0001cdd1 	.word	0x0001cdd1
   1cd4c:	0001cdbd 	.word	0x0001cdbd
   1cd50:	0001cdc7 	.word	0x0001cdc7
   1cd54:	0001cdd1 	.word	0x0001cdd1
   1cd58:	0001cdd1 	.word	0x0001cdd1
   1cd5c:	0001cdd1 	.word	0x0001cdd1
   1cd60:	0001cdb5 	.word	0x0001cdb5
  {
    case DM_CONN_OPEN_IND:
      appSlaveSecConnOpen(pMsg, pCb);
   1cd64:	6878      	ldr	r0, [r7, #4]
   1cd66:	68f9      	ldr	r1, [r7, #12]
   1cd68:	f7ff fb10 	bl	1c38c <appSlaveSecConnOpen>
      break;
   1cd6c:	e031      	b.n	1cdd2 <AppSlaveSecProcDmMsg+0xf6>

    case DM_CONN_CLOSE_IND:
      appSecConnClose(pMsg, pCb);
   1cd6e:	6878      	ldr	r0, [r7, #4]
   1cd70:	68f9      	ldr	r1, [r7, #12]
   1cd72:	f7ff fb4b 	bl	1c40c <appSecConnClose>
      break;
   1cd76:	e02c      	b.n	1cdd2 <AppSlaveSecProcDmMsg+0xf6>

    case DM_SEC_PAIR_CMPL_IND:
      appSecPairCmpl(pMsg, pCb);
   1cd78:	6878      	ldr	r0, [r7, #4]
   1cd7a:	68f9      	ldr	r1, [r7, #12]
   1cd7c:	f7ff fbfe 	bl	1c57c <appSecPairCmpl>
      break;
   1cd80:	e027      	b.n	1cdd2 <AppSlaveSecProcDmMsg+0xf6>
      
    case DM_SEC_PAIR_FAIL_IND:
      appSecPairFailed(pMsg, pCb);
   1cd82:	6878      	ldr	r0, [r7, #4]
   1cd84:	68f9      	ldr	r1, [r7, #12]
   1cd86:	f7ff fc2d 	bl	1c5e4 <appSecPairFailed>
      break;
   1cd8a:	e022      	b.n	1cdd2 <AppSlaveSecProcDmMsg+0xf6>

    case DM_SEC_ENCRYPT_IND:
      appSecEncryptInd(pMsg, pCb);
   1cd8c:	6878      	ldr	r0, [r7, #4]
   1cd8e:	68f9      	ldr	r1, [r7, #12]
   1cd90:	f7ff fc34 	bl	1c5fc <appSecEncryptInd>
      break;
   1cd94:	e01d      	b.n	1cdd2 <AppSlaveSecProcDmMsg+0xf6>
      
    case DM_SEC_ENCRYPT_FAIL_IND:
      break;

    case DM_SEC_KEY_IND:
      appSecStoreKey(pMsg, pCb);
   1cd96:	6878      	ldr	r0, [r7, #4]
   1cd98:	68f9      	ldr	r1, [r7, #12]
   1cd9a:	f7ff fbcf 	bl	1c53c <appSecStoreKey>
      break;
   1cd9e:	e018      	b.n	1cdd2 <AppSlaveSecProcDmMsg+0xf6>

    case DM_SEC_PAIR_IND:
      appSecPairInd(pMsg, pCb);
   1cda0:	6878      	ldr	r0, [r7, #4]
   1cda2:	68f9      	ldr	r1, [r7, #12]
   1cda4:	f7ff fb44 	bl	1c430 <appSecPairInd>
      break;
   1cda8:	e013      	b.n	1cdd2 <AppSlaveSecProcDmMsg+0xf6>
      
    case DM_SEC_LTK_REQ_IND:
      appSecFindLtk(pMsg, pCb);
   1cdaa:	6878      	ldr	r0, [r7, #4]
   1cdac:	68f9      	ldr	r1, [r7, #12]
   1cdae:	f7ff fc3d 	bl	1c62c <appSecFindLtk>
      break;
   1cdb2:	e00e      	b.n	1cdd2 <AppSlaveSecProcDmMsg+0xf6>
      
    case DM_PRIV_SET_ADDR_RES_ENABLE_IND:
      appPrivSetAddrResEnableInd(pMsg);
   1cdb4:	6878      	ldr	r0, [r7, #4]
   1cdb6:	f7ff fc79 	bl	1c6ac <appPrivSetAddrResEnableInd>
      break;
   1cdba:	e00a      	b.n	1cdd2 <AppSlaveSecProcDmMsg+0xf6>

    case DM_PRIV_ADD_DEV_TO_RES_LIST_IND:
      appPrivAddDevToResListInd(pMsg, pCb);
   1cdbc:	6878      	ldr	r0, [r7, #4]
   1cdbe:	68f9      	ldr	r1, [r7, #12]
   1cdc0:	f7ff fc86 	bl	1c6d0 <appPrivAddDevToResListInd>
      break;
   1cdc4:	e005      	b.n	1cdd2 <AppSlaveSecProcDmMsg+0xf6>

    case DM_PRIV_REM_DEV_FROM_RES_LIST_IND:
      appPrivRemDevFromResListInd(pMsg, pCb);
   1cdc6:	6878      	ldr	r0, [r7, #4]
   1cdc8:	68f9      	ldr	r1, [r7, #12]
   1cdca:	f7ff fcab 	bl	1c724 <appPrivRemDevFromResListInd>
      break;
   1cdce:	e000      	b.n	1cdd2 <AppSlaveSecProcDmMsg+0xf6>

    default:
      break;
   1cdd0:	bf00      	nop
  }
}
   1cdd2:	3710      	adds	r7, #16
   1cdd4:	46bd      	mov	sp, r7
   1cdd6:	bd80      	pop	{r7, pc}
   1cdd8:	1000a260 	.word	0x1000a260

0001cddc <AppSetBondable>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppSetBondable(bool_t bondable)
{
   1cddc:	b480      	push	{r7}
   1cdde:	b083      	sub	sp, #12
   1cde0:	af00      	add	r7, sp, #0
   1cde2:	4603      	mov	r3, r0
   1cde4:	71fb      	strb	r3, [r7, #7]
  appSlaveCb.bondable = bondable;
   1cde6:	4a04      	ldr	r2, [pc, #16]	; (1cdf8 <AppSetBondable+0x1c>)
   1cde8:	79fb      	ldrb	r3, [r7, #7]
   1cdea:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
}
   1cdee:	370c      	adds	r7, #12
   1cdf0:	46bd      	mov	sp, r7
   1cdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
   1cdf6:	4770      	bx	lr
   1cdf8:	1000a360 	.word	0x1000a360

0001cdfc <AppSetAdvPeerAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppSetAdvPeerAddr(uint8_t peerAddrType, uint8_t *pPeerAddr)
{
   1cdfc:	b580      	push	{r7, lr}
   1cdfe:	b082      	sub	sp, #8
   1ce00:	af00      	add	r7, sp, #0
   1ce02:	4603      	mov	r3, r0
   1ce04:	6039      	str	r1, [r7, #0]
   1ce06:	71fb      	strb	r3, [r7, #7]
  appSlaveCb.peerAddrType = peerAddrType;
   1ce08:	4a05      	ldr	r2, [pc, #20]	; (1ce20 <AppSetAdvPeerAddr+0x24>)
   1ce0a:	79fb      	ldrb	r3, [r7, #7]
   1ce0c:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36
  BdaCpy(appSlaveCb.peerAddr, pPeerAddr);
   1ce10:	4804      	ldr	r0, [pc, #16]	; (1ce24 <AppSetAdvPeerAddr+0x28>)
   1ce12:	6839      	ldr	r1, [r7, #0]
   1ce14:	f7f6 f81a 	bl	12e4c <BdaCpy>
}
   1ce18:	3708      	adds	r7, #8
   1ce1a:	46bd      	mov	sp, r7
   1ce1c:	bd80      	pop	{r7, pc}
   1ce1e:	bf00      	nop
   1ce20:	1000a360 	.word	0x1000a360
   1ce24:	1000a390 	.word	0x1000a390

0001ce28 <AppSlaveSecurityReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppSlaveSecurityReq(dmConnId_t connId)
{
   1ce28:	b580      	push	{r7, lr}
   1ce2a:	b082      	sub	sp, #8
   1ce2c:	af00      	add	r7, sp, #0
   1ce2e:	4603      	mov	r3, r0
   1ce30:	71fb      	strb	r3, [r7, #7]
  if (DmConnSecLevel(connId) == DM_SEC_LEVEL_NONE)
   1ce32:	79fb      	ldrb	r3, [r7, #7]
   1ce34:	4618      	mov	r0, r3
   1ce36:	f7f2 fd93 	bl	f960 <DmConnSecLevel>
   1ce3a:	4603      	mov	r3, r0
   1ce3c:	2b00      	cmp	r3, #0
   1ce3e:	d107      	bne.n	1ce50 <AppSlaveSecurityReq+0x28>
  {
    DmSecSlaveReq(connId, pAppSecCfg->auth);
   1ce40:	4b05      	ldr	r3, [pc, #20]	; (1ce58 <AppSlaveSecurityReq+0x30>)
   1ce42:	681b      	ldr	r3, [r3, #0]
   1ce44:	781b      	ldrb	r3, [r3, #0]
   1ce46:	79fa      	ldrb	r2, [r7, #7]
   1ce48:	4610      	mov	r0, r2
   1ce4a:	4619      	mov	r1, r3
   1ce4c:	f7f3 fbaf 	bl	105ae <DmSecSlaveReq>
  }
}
   1ce50:	3708      	adds	r7, #8
   1ce52:	46bd      	mov	sp, r7
   1ce54:	bd80      	pop	{r7, pc}
   1ce56:	bf00      	nop
   1ce58:	1000a250 	.word	0x1000a250

0001ce5c <appSlaveLegAdvStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveLegAdvStart(void)
{
   1ce5c:	b590      	push	{r4, r7, lr}
   1ce5e:	b085      	sub	sp, #20
   1ce60:	af02      	add	r7, sp, #8
  uint8_t  advHandle;
  uint8_t  maxEaEvents;
  uint16_t interval;

  interval = pAppAdvCfg->advInterval[appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT]];
   1ce62:	4b14      	ldr	r3, [pc, #80]	; (1ceb4 <appSlaveLegAdvStart+0x58>)
   1ce64:	681a      	ldr	r2, [r3, #0]
   1ce66:	4b14      	ldr	r3, [pc, #80]	; (1ceb8 <appSlaveLegAdvStart+0x5c>)
   1ce68:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   1ce6c:	005b      	lsls	r3, r3, #1
   1ce6e:	4413      	add	r3, r2
   1ce70:	88db      	ldrh	r3, [r3, #6]
   1ce72:	80bb      	strh	r3, [r7, #4]

  /* if this advertising state is being used */
  if (interval > 0)
   1ce74:	88bb      	ldrh	r3, [r7, #4]
   1ce76:	2b00      	cmp	r3, #0
   1ce78:	d015      	beq.n	1cea6 <appSlaveLegAdvStart+0x4a>
  {
    advHandle = DM_ADV_HANDLE_DEFAULT;
   1ce7a:	2300      	movs	r3, #0
   1ce7c:	71fb      	strb	r3, [r7, #7]
    maxEaEvents = 0;
   1ce7e:	2300      	movs	r3, #0
   1ce80:	71bb      	strb	r3, [r7, #6]

    appAdvStart(1, &advHandle, &interval,
                &(pAppAdvCfg->advDuration[appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT]]),
   1ce82:	4b0c      	ldr	r3, [pc, #48]	; (1ceb4 <appSlaveLegAdvStart+0x58>)
   1ce84:	681a      	ldr	r2, [r3, #0]
   1ce86:	4b0c      	ldr	r3, [pc, #48]	; (1ceb8 <appSlaveLegAdvStart+0x5c>)
   1ce88:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
  if (interval > 0)
  {
    advHandle = DM_ADV_HANDLE_DEFAULT;
    maxEaEvents = 0;

    appAdvStart(1, &advHandle, &interval,
   1ce8c:	005b      	lsls	r3, r3, #1
   1ce8e:	18d4      	adds	r4, r2, r3
   1ce90:	1df9      	adds	r1, r7, #7
   1ce92:	1d3a      	adds	r2, r7, #4
   1ce94:	1dbb      	adds	r3, r7, #6
   1ce96:	9300      	str	r3, [sp, #0]
   1ce98:	2301      	movs	r3, #1
   1ce9a:	9301      	str	r3, [sp, #4]
   1ce9c:	2001      	movs	r0, #1
   1ce9e:	4623      	mov	r3, r4
   1cea0:	f7ff fe3c 	bl	1cb1c <appAdvStart>
   1cea4:	e003      	b.n	1ceae <appSlaveLegAdvStart+0x52>
                &maxEaEvents, TRUE);
  }
  else
  {
    /* done with all advertising states */
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STOPPED;
   1cea6:	4b04      	ldr	r3, [pc, #16]	; (1ceb8 <appSlaveLegAdvStart+0x5c>)
   1cea8:	2203      	movs	r2, #3
   1ceaa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
}
   1ceae:	370c      	adds	r7, #12
   1ceb0:	46bd      	mov	sp, r7
   1ceb2:	bd90      	pop	{r4, r7, pc}
   1ceb4:	1000a25c 	.word	0x1000a25c
   1ceb8:	1000a360 	.word	0x1000a360

0001cebc <appSlaveLegAdvTypeChanged>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveLegAdvTypeChanged(dmEvt_t *pMsg)
{
   1cebc:	b580      	push	{r7, lr}
   1cebe:	b082      	sub	sp, #8
   1cec0:	af00      	add	r7, sp, #0
   1cec2:	6078      	str	r0, [r7, #4]
  /* clear advertising type changed flag */
  appSlaveCb.advTypeChanged[DM_ADV_HANDLE_DEFAULT] = FALSE;
   1cec4:	4b06      	ldr	r3, [pc, #24]	; (1cee0 <appSlaveLegAdvTypeChanged+0x24>)
   1cec6:	2200      	movs	r2, #0
   1cec8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

  /* set advertising state */
  appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STATE1;
   1cecc:	4b04      	ldr	r3, [pc, #16]	; (1cee0 <appSlaveLegAdvTypeChanged+0x24>)
   1cece:	2200      	movs	r2, #0
   1ced0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* start advertising */
  appSlaveLegAdvStart();
   1ced4:	f7ff ffc2 	bl	1ce5c <appSlaveLegAdvStart>
}
   1ced8:	3708      	adds	r7, #8
   1ceda:	46bd      	mov	sp, r7
   1cedc:	bd80      	pop	{r7, pc}
   1cede:	bf00      	nop
   1cee0:	1000a360 	.word	0x1000a360

0001cee4 <appSlaveNextLegAdvState>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveNextLegAdvState(dmEvt_t *pMsg)
{
   1cee4:	b580      	push	{r7, lr}
   1cee6:	b082      	sub	sp, #8
   1cee8:	af00      	add	r7, sp, #0
   1ceea:	6078      	str	r0, [r7, #4]
  /* go to next advertising state */
  appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT]++;
   1ceec:	4b08      	ldr	r3, [pc, #32]	; (1cf10 <appSlaveNextLegAdvState+0x2c>)
   1ceee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   1cef2:	3301      	adds	r3, #1
   1cef4:	b2da      	uxtb	r2, r3
   1cef6:	4b06      	ldr	r3, [pc, #24]	; (1cf10 <appSlaveNextLegAdvState+0x2c>)
   1cef8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* if haven't reached stopped state then start advertising */
  if (appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] < APP_ADV_STOPPED)
   1cefc:	4b04      	ldr	r3, [pc, #16]	; (1cf10 <appSlaveNextLegAdvState+0x2c>)
   1cefe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   1cf02:	2b02      	cmp	r3, #2
   1cf04:	d801      	bhi.n	1cf0a <appSlaveNextLegAdvState+0x26>
  {
    appSlaveLegAdvStart();
   1cf06:	f7ff ffa9 	bl	1ce5c <appSlaveLegAdvStart>
  }
}
   1cf0a:	3708      	adds	r7, #8
   1cf0c:	46bd      	mov	sp, r7
   1cf0e:	bd80      	pop	{r7, pc}
   1cf10:	1000a360 	.word	0x1000a360

0001cf14 <appSlaveLegAdvStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveLegAdvStop(dmEvt_t *pMsg)
{
   1cf14:	b580      	push	{r7, lr}
   1cf16:	b082      	sub	sp, #8
   1cf18:	af00      	add	r7, sp, #0
   1cf1a:	6078      	str	r0, [r7, #4]
  /* if legacy advertising PDUs are used with advertising extensions feature */
  if (pMsg->hdr.event == DM_ADV_SET_STOP_IND)
   1cf1c:	687b      	ldr	r3, [r7, #4]
   1cf1e:	789b      	ldrb	r3, [r3, #2]
   1cf20:	2b47      	cmp	r3, #71	; 0x47
   1cf22:	d104      	bne.n	1cf2e <appSlaveLegAdvStop+0x1a>
  {
    /* if advertising successfully ended with connection being created */
    if (pMsg->advSetStop.status == HCI_SUCCESS)
   1cf24:	687b      	ldr	r3, [r7, #4]
   1cf26:	791b      	ldrb	r3, [r3, #4]
   1cf28:	2b00      	cmp	r3, #0
   1cf2a:	d100      	bne.n	1cf2e <appSlaveLegAdvStop+0x1a>
    {
      /* connection open indication event will determine next advertising state */
      return;
   1cf2c:	e00b      	b.n	1cf46 <appSlaveLegAdvStop+0x32>
    }
  }

  /* if advertising was stopped for change to advertising type */
  if (appSlaveCb.advTypeChanged[DM_ADV_HANDLE_DEFAULT])
   1cf2e:	4b07      	ldr	r3, [pc, #28]	; (1cf4c <appSlaveLegAdvStop+0x38>)
   1cf30:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
   1cf34:	2b00      	cmp	r3, #0
   1cf36:	d003      	beq.n	1cf40 <appSlaveLegAdvStop+0x2c>
  {
    appSlaveLegAdvTypeChanged(pMsg);
   1cf38:	6878      	ldr	r0, [r7, #4]
   1cf3a:	f7ff ffbf 	bl	1cebc <appSlaveLegAdvTypeChanged>
   1cf3e:	e002      	b.n	1cf46 <appSlaveLegAdvStop+0x32>
  }
  /* else advertising ended for another reason */
  else
  {
    appSlaveNextLegAdvState(pMsg);
   1cf40:	6878      	ldr	r0, [r7, #4]
   1cf42:	f7ff ffcf 	bl	1cee4 <appSlaveNextLegAdvState>
  }
}
   1cf46:	3708      	adds	r7, #8
   1cf48:	46bd      	mov	sp, r7
   1cf4a:	bd80      	pop	{r7, pc}
   1cf4c:	1000a360 	.word	0x1000a360

0001cf50 <appSlaveLegAdvRestart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveLegAdvRestart(dmEvt_t *pMsg)
{
   1cf50:	b580      	push	{r7, lr}
   1cf52:	b082      	sub	sp, #8
   1cf54:	af00      	add	r7, sp, #0
   1cf56:	6078      	str	r0, [r7, #4]
  if (pMsg->hdr.event == DM_CONN_OPEN_IND)
   1cf58:	687b      	ldr	r3, [r7, #4]
   1cf5a:	789b      	ldrb	r3, [r3, #2]
   1cf5c:	2b27      	cmp	r3, #39	; 0x27
   1cf5e:	d103      	bne.n	1cf68 <appSlaveLegAdvRestart+0x18>
  {
    /* advertising is stopped once a connection is opened */
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STOPPED;
   1cf60:	4b08      	ldr	r3, [pc, #32]	; (1cf84 <appSlaveLegAdvRestart+0x34>)
   1cf62:	2203      	movs	r2, #3
   1cf64:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }

  /* if advertising stopped restart advertising */
  if (appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] == APP_ADV_STOPPED)
   1cf68:	4b06      	ldr	r3, [pc, #24]	; (1cf84 <appSlaveLegAdvRestart+0x34>)
   1cf6a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   1cf6e:	2b03      	cmp	r3, #3
   1cf70:	d105      	bne.n	1cf7e <appSlaveLegAdvRestart+0x2e>
  {
    /* set advertising state */
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STATE1;
   1cf72:	4b04      	ldr	r3, [pc, #16]	; (1cf84 <appSlaveLegAdvRestart+0x34>)
   1cf74:	2200      	movs	r2, #0
   1cf76:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* start advertising */
    appSlaveLegAdvStart();
   1cf7a:	f7ff ff6f 	bl	1ce5c <appSlaveLegAdvStart>
  }
}
   1cf7e:	3708      	adds	r7, #8
   1cf80:	46bd      	mov	sp, r7
   1cf82:	bd80      	pop	{r7, pc}
   1cf84:	1000a360 	.word	0x1000a360

0001cf88 <appSlaveAdvMode>:
 *
 *  \return TRUE if legacy advertising mode. FALSE, otherwise.
 */
/*************************************************************************************************/
static bool_t appSlaveAdvMode(void)
{
   1cf88:	b580      	push	{r7, lr}
   1cf8a:	af00      	add	r7, sp, #0
  /* legacy app slave works with both DM legacy and extended advertising */

  /* if first time since last power-on or reset */
  if (appSlaveCb.advStopCback == NULL)
   1cf8c:	4b0c      	ldr	r3, [pc, #48]	; (1cfc0 <appSlaveAdvMode+0x38>)
   1cf8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1cf90:	2b00      	cmp	r3, #0
   1cf92:	d107      	bne.n	1cfa4 <appSlaveAdvMode+0x1c>
  {
    appSlaveCb.advStopCback = appSlaveLegAdvStop;
   1cf94:	4b0a      	ldr	r3, [pc, #40]	; (1cfc0 <appSlaveAdvMode+0x38>)
   1cf96:	4a0b      	ldr	r2, [pc, #44]	; (1cfc4 <appSlaveAdvMode+0x3c>)
   1cf98:	641a      	str	r2, [r3, #64]	; 0x40
    appSlaveCb.advRestartCback = appSlaveLegAdvRestart;
   1cf9a:	4b09      	ldr	r3, [pc, #36]	; (1cfc0 <appSlaveAdvMode+0x38>)
   1cf9c:	4a0a      	ldr	r2, [pc, #40]	; (1cfc8 <appSlaveAdvMode+0x40>)
   1cf9e:	645a      	str	r2, [r3, #68]	; 0x44

    return TRUE;
   1cfa0:	2301      	movs	r3, #1
   1cfa2:	e00a      	b.n	1cfba <appSlaveAdvMode+0x32>
  }

  if (appSlaveCb.advStopCback == appSlaveLegAdvStop)
   1cfa4:	4b06      	ldr	r3, [pc, #24]	; (1cfc0 <appSlaveAdvMode+0x38>)
   1cfa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1cfa8:	4a06      	ldr	r2, [pc, #24]	; (1cfc4 <appSlaveAdvMode+0x3c>)
   1cfaa:	4293      	cmp	r3, r2
   1cfac:	d101      	bne.n	1cfb2 <appSlaveAdvMode+0x2a>
  {
    return TRUE;
   1cfae:	2301      	movs	r3, #1
   1cfb0:	e003      	b.n	1cfba <appSlaveAdvMode+0x32>
  }

  APP_TRACE_WARN0("Invalid DM advertising mode; mode configured as extended");
   1cfb2:	4806      	ldr	r0, [pc, #24]	; (1cfcc <appSlaveAdvMode+0x44>)
   1cfb4:	f7f7 fdd6 	bl	14b64 <WsfTrace>

  return FALSE;
   1cfb8:	2300      	movs	r3, #0
}
   1cfba:	4618      	mov	r0, r3
   1cfbc:	bd80      	pop	{r7, pc}
   1cfbe:	bf00      	nop
   1cfc0:	1000a360 	.word	0x1000a360
   1cfc4:	0001cf15 	.word	0x0001cf15
   1cfc8:	0001cf51 	.word	0x0001cf51
   1cfcc:	000244a8 	.word	0x000244a8

0001cfd0 <AppAdvSetData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppAdvSetData(uint8_t location, uint8_t len, uint8_t *pData)
{
   1cfd0:	b580      	push	{r7, lr}
   1cfd2:	b084      	sub	sp, #16
   1cfd4:	af02      	add	r7, sp, #8
   1cfd6:	4603      	mov	r3, r0
   1cfd8:	603a      	str	r2, [r7, #0]
   1cfda:	71fb      	strb	r3, [r7, #7]
   1cfdc:	460b      	mov	r3, r1
   1cfde:	71bb      	strb	r3, [r7, #6]
  if (appSlaveAdvMode())
   1cfe0:	f7ff ffd2 	bl	1cf88 <appSlaveAdvMode>
   1cfe4:	4603      	mov	r3, r0
   1cfe6:	2b00      	cmp	r3, #0
   1cfe8:	d00f      	beq.n	1d00a <AppAdvSetData+0x3a>
  {
    /* legacy advertising data length cannot exceed 31 bytes */
    if (len > HCI_ADV_DATA_LEN)
   1cfea:	79bb      	ldrb	r3, [r7, #6]
   1cfec:	2b1f      	cmp	r3, #31
   1cfee:	d901      	bls.n	1cff4 <AppAdvSetData+0x24>
    {
      len = HCI_ADV_DATA_LEN;
   1cff0:	231f      	movs	r3, #31
   1cff2:	71bb      	strb	r3, [r7, #6]
    }

    /* maximum advertising data length supported by Controller is 31 bytes */
    appAdvSetData(DM_ADV_HANDLE_DEFAULT, location, len, pData, HCI_ADV_DATA_LEN, HCI_ADV_DATA_LEN);
   1cff4:	79bb      	ldrb	r3, [r7, #6]
   1cff6:	b29a      	uxth	r2, r3
   1cff8:	79f9      	ldrb	r1, [r7, #7]
   1cffa:	231f      	movs	r3, #31
   1cffc:	9300      	str	r3, [sp, #0]
   1cffe:	231f      	movs	r3, #31
   1d000:	9301      	str	r3, [sp, #4]
   1d002:	2000      	movs	r0, #0
   1d004:	683b      	ldr	r3, [r7, #0]
   1d006:	f7ff fd2d 	bl	1ca64 <appAdvSetData>
  }
}
   1d00a:	3708      	adds	r7, #8
   1d00c:	46bd      	mov	sp, r7
   1d00e:	bd80      	pop	{r7, pc}

0001d010 <AppAdvStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppAdvStart(uint8_t mode)
{
   1d010:	b590      	push	{r4, r7, lr}
   1d012:	b089      	sub	sp, #36	; 0x24
   1d014:	af04      	add	r7, sp, #16
   1d016:	4603      	mov	r3, r0
   1d018:	71fb      	strb	r3, [r7, #7]
  uint8_t advHandle;
  uint8_t maxEaEvents;

  if (appSlaveAdvMode())
   1d01a:	f7ff ffb5 	bl	1cf88 <appSlaveAdvMode>
   1d01e:	4603      	mov	r3, r0
   1d020:	2b00      	cmp	r3, #0
   1d022:	d01a      	beq.n	1d05a <AppAdvStart+0x4a>
  {
    advHandle = DM_ADV_HANDLE_DEFAULT;
   1d024:	2300      	movs	r3, #0
   1d026:	73fb      	strb	r3, [r7, #15]
    maxEaEvents = 0;
   1d028:	2300      	movs	r3, #0
   1d02a:	73bb      	strb	r3, [r7, #14]

    /* initialize advertising state */
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STATE1;
   1d02c:	4b0c      	ldr	r3, [pc, #48]	; (1d060 <AppAdvStart+0x50>)
   1d02e:	2200      	movs	r2, #0
   1d030:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    appSlaveAdvStart(1, &advHandle, &(pAppAdvCfg->advInterval[APP_ADV_STATE1]),
   1d034:	4b0b      	ldr	r3, [pc, #44]	; (1d064 <AppAdvStart+0x54>)
   1d036:	681b      	ldr	r3, [r3, #0]
   1d038:	1d9a      	adds	r2, r3, #6
                     &(pAppAdvCfg->advDuration[APP_ADV_STATE1]), &maxEaEvents, TRUE, mode);
   1d03a:	4b0a      	ldr	r3, [pc, #40]	; (1d064 <AppAdvStart+0x54>)
   1d03c:	681b      	ldr	r3, [r3, #0]
    maxEaEvents = 0;

    /* initialize advertising state */
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STATE1;

    appSlaveAdvStart(1, &advHandle, &(pAppAdvCfg->advInterval[APP_ADV_STATE1]),
   1d03e:	461c      	mov	r4, r3
   1d040:	f107 010f 	add.w	r1, r7, #15
   1d044:	f107 030e 	add.w	r3, r7, #14
   1d048:	9300      	str	r3, [sp, #0]
   1d04a:	2301      	movs	r3, #1
   1d04c:	9301      	str	r3, [sp, #4]
   1d04e:	79fb      	ldrb	r3, [r7, #7]
   1d050:	9302      	str	r3, [sp, #8]
   1d052:	2001      	movs	r0, #1
   1d054:	4623      	mov	r3, r4
   1d056:	f7ff fdeb 	bl	1cc30 <appSlaveAdvStart>
                     &(pAppAdvCfg->advDuration[APP_ADV_STATE1]), &maxEaEvents, TRUE, mode);
  }
}
   1d05a:	3714      	adds	r7, #20
   1d05c:	46bd      	mov	sp, r7
   1d05e:	bd90      	pop	{r4, r7, pc}
   1d060:	1000a360 	.word	0x1000a360
   1d064:	1000a25c 	.word	0x1000a25c

0001d068 <SvcCoreAddGroup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcCoreAddGroup(void)
{
   1d068:	b580      	push	{r7, lr}
   1d06a:	af00      	add	r7, sp, #0
  AttsAddGroup(&svcGapGroup);
   1d06c:	4803      	ldr	r0, [pc, #12]	; (1d07c <SvcCoreAddGroup+0x14>)
   1d06e:	f7f0 fd0f 	bl	da90 <AttsAddGroup>
  AttsAddGroup(&svcGattGroup);
   1d072:	4803      	ldr	r0, [pc, #12]	; (1d080 <SvcCoreAddGroup+0x18>)
   1d074:	f7f0 fd0c 	bl	da90 <AttsAddGroup>
}
   1d078:	bd80      	pop	{r7, pc}
   1d07a:	bf00      	nop
   1d07c:	10002bdc 	.word	0x10002bdc
   1d080:	10002bf0 	.word	0x10002bf0

0001d084 <SvcCoreGapCentAddrResUpdate>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcCoreGapCentAddrResUpdate(bool_t value)
{
   1d084:	b480      	push	{r7}
   1d086:	b083      	sub	sp, #12
   1d088:	af00      	add	r7, sp, #0
   1d08a:	4603      	mov	r3, r0
   1d08c:	71fb      	strb	r3, [r7, #7]
  gapValCar[0] = value;
   1d08e:	4a04      	ldr	r2, [pc, #16]	; (1d0a0 <SvcCoreGapCentAddrResUpdate+0x1c>)
   1d090:	79fb      	ldrb	r3, [r7, #7]
   1d092:	7013      	strb	r3, [r2, #0]
}
   1d094:	370c      	adds	r7, #12
   1d096:	46bd      	mov	sp, r7
   1d098:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d09c:	4770      	bx	lr
   1d09e:	bf00      	nop
   1d0a0:	10004ea0 	.word	0x10004ea0

0001d0a4 <SvcDisAddGroup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcDisAddGroup(void)
{
   1d0a4:	b580      	push	{r7, lr}
   1d0a6:	af00      	add	r7, sp, #0
  AttsAddGroup(&svcDisGroup);
   1d0a8:	4801      	ldr	r0, [pc, #4]	; (1d0b0 <SvcDisAddGroup+0xc>)
   1d0aa:	f7f0 fcf1 	bl	da90 <AttsAddGroup>
}
   1d0ae:	bd80      	pop	{r7, pc}
   1d0b0:	10002c90 	.word	0x10002c90

0001d0b4 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
   1d0b4:	b580      	push	{r7, lr}
   1d0b6:	b088      	sub	sp, #32
   1d0b8:	af00      	add	r7, sp, #0
   1d0ba:	6078      	str	r0, [r7, #4]
    uint32_t ui32Loops, ui32HFRC;

#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
   1d0bc:	f107 030c 	add.w	r3, r7, #12
   1d0c0:	4618      	mov	r0, r3
   1d0c2:	f005 fe99 	bl	22df8 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
   1d0c6:	68fb      	ldr	r3, [r7, #12]
   1d0c8:	61fb      	str	r3, [r7, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
   1d0ca:	69fb      	ldr	r3, [r7, #28]
   1d0cc:	4a06      	ldr	r2, [pc, #24]	; (1d0e8 <am_util_delay_ms+0x34>)
   1d0ce:	fba2 2303 	umull	r2, r3, r2, r3
   1d0d2:	099b      	lsrs	r3, r3, #6
   1d0d4:	687a      	ldr	r2, [r7, #4]
   1d0d6:	fb02 f303 	mul.w	r3, r2, r3
   1d0da:	61bb      	str	r3, [r7, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
   1d0dc:	69b8      	ldr	r0, [r7, #24]
   1d0de:	f005 fee9 	bl	22eb4 <am_hal_flash_delay>
}
   1d0e2:	3720      	adds	r7, #32
   1d0e4:	46bd      	mov	sp, r7
   1d0e6:	bd80      	pop	{r7, pc}
   1d0e8:	057619f1 	.word	0x057619f1

0001d0ec <am_util_delay_us>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_us(uint32_t ui32MicroSeconds)
{
   1d0ec:	b580      	push	{r7, lr}
   1d0ee:	b088      	sub	sp, #32
   1d0f0:	af00      	add	r7, sp, #0
   1d0f2:	6078      	str	r0, [r7, #4]
    uint32_t ui32Loops, ui32HFRC;

#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
   1d0f4:	f107 030c 	add.w	r3, r7, #12
   1d0f8:	4618      	mov	r0, r3
   1d0fa:	f005 fe7d 	bl	22df8 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
   1d0fe:	68fb      	ldr	r3, [r7, #12]
   1d100:	61fb      	str	r3, [r7, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MicroSeconds * (ui32HFRC / 3000000);
   1d102:	69fb      	ldr	r3, [r7, #28]
   1d104:	4a06      	ldr	r2, [pc, #24]	; (1d120 <am_util_delay_us+0x34>)
   1d106:	fba2 2303 	umull	r2, r3, r2, r3
   1d10a:	0c9b      	lsrs	r3, r3, #18
   1d10c:	687a      	ldr	r2, [r7, #4]
   1d10e:	fb02 f303 	mul.w	r3, r2, r3
   1d112:	61bb      	str	r3, [r7, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
   1d114:	69b8      	ldr	r0, [r7, #24]
   1d116:	f005 fecd 	bl	22eb4 <am_hal_flash_delay>
}
   1d11a:	3720      	adds	r7, #32
   1d11c:	46bd      	mov	sp, r7
   1d11e:	bd80      	pop	{r7, pc}
   1d120:	165e9f81 	.word	0x165e9f81

0001d124 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
   1d124:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
   1d126:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
   1d12a:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
   1d12c:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
   1d130:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
   1d134:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
   1d138:	f000 f808 	bl	1d14c <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
   1d13c:	bd01      	pop	{r0, pc}
}
   1d13e:	4618      	mov	r0, r3

0001d140 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
   1d140:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
   1d142:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
   1d144:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
   1d146:	4770      	bx	lr
}
   1d148:	4618      	mov	r0, r3
   1d14a:	bf00      	nop

0001d14c <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
   1d14c:	b580      	push	{r7, lr}
   1d14e:	b096      	sub	sp, #88	; 0x58
   1d150:	af00      	add	r7, sp, #0
   1d152:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
   1d154:	f107 030c 	add.w	r3, r7, #12
   1d158:	2200      	movs	r2, #0
   1d15a:	601a      	str	r2, [r3, #0]
   1d15c:	3304      	adds	r3, #4
   1d15e:	2200      	movs	r2, #0
   1d160:	601a      	str	r2, [r3, #0]
   1d162:	3304      	adds	r3, #4
   1d164:	2200      	movs	r2, #0
   1d166:	601a      	str	r2, [r3, #0]
   1d168:	3304      	adds	r3, #4
   1d16a:	2200      	movs	r2, #0
   1d16c:	601a      	str	r2, [r3, #0]
   1d16e:	3304      	adds	r3, #4
   1d170:	2200      	movs	r2, #0
   1d172:	601a      	str	r2, [r3, #0]
   1d174:	3304      	adds	r3, #4
   1d176:	2200      	movs	r2, #0
   1d178:	601a      	str	r2, [r3, #0]
   1d17a:	3304      	adds	r3, #4

    uint32_t u32Mask = 0;
   1d17c:	2300      	movs	r3, #0
   1d17e:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
   1d180:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1d182:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
   1d184:	4b2e      	ldr	r3, [pc, #184]	; (1d240 <am_util_faultisr_collect_data+0xf4>)
   1d186:	681b      	ldr	r3, [r3, #0]
   1d188:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
   1d18a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1d18c:	b2db      	uxtb	r3, r3
   1d18e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
   1d192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1d194:	0a1b      	lsrs	r3, r3, #8
   1d196:	b2db      	uxtb	r3, r3
   1d198:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
   1d19c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1d19e:	0c1b      	lsrs	r3, r3, #16
   1d1a0:	b29b      	uxth	r3, r3
   1d1a2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
   1d1a6:	4b27      	ldr	r3, [pc, #156]	; (1d244 <am_util_faultisr_collect_data+0xf8>)
   1d1a8:	681b      	ldr	r3, [r3, #0]
   1d1aa:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
   1d1ac:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
   1d1b0:	b2db      	uxtb	r3, r3
   1d1b2:	f003 0302 	and.w	r3, r3, #2
   1d1b6:	2b00      	cmp	r3, #0
   1d1b8:	d005      	beq.n	1d1c6 <am_util_faultisr_collect_data+0x7a>
   1d1ba:	2006      	movs	r0, #6
   1d1bc:	6879      	ldr	r1, [r7, #4]
   1d1be:	f7ff ffbf 	bl	1d140 <getStackedReg>
   1d1c2:	4603      	mov	r3, r0
   1d1c4:	e001      	b.n	1d1ca <am_util_faultisr_collect_data+0x7e>
   1d1c6:	f04f 33ff 	mov.w	r3, #4294967295
   1d1ca:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
   1d1cc:	2000      	movs	r0, #0
   1d1ce:	6879      	ldr	r1, [r7, #4]
   1d1d0:	f7ff ffb6 	bl	1d140 <getStackedReg>
   1d1d4:	4603      	mov	r3, r0
   1d1d6:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
   1d1d8:	2001      	movs	r0, #1
   1d1da:	6879      	ldr	r1, [r7, #4]
   1d1dc:	f7ff ffb0 	bl	1d140 <getStackedReg>
   1d1e0:	4603      	mov	r3, r0
   1d1e2:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
   1d1e4:	2002      	movs	r0, #2
   1d1e6:	6879      	ldr	r1, [r7, #4]
   1d1e8:	f7ff ffaa 	bl	1d140 <getStackedReg>
   1d1ec:	4603      	mov	r3, r0
   1d1ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
   1d1f0:	2003      	movs	r0, #3
   1d1f2:	6879      	ldr	r1, [r7, #4]
   1d1f4:	f7ff ffa4 	bl	1d140 <getStackedReg>
   1d1f8:	4603      	mov	r3, r0
   1d1fa:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
   1d1fc:	2004      	movs	r0, #4
   1d1fe:	6879      	ldr	r1, [r7, #4]
   1d200:	f7ff ff9e 	bl	1d140 <getStackedReg>
   1d204:	4603      	mov	r3, r0
   1d206:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
   1d208:	2005      	movs	r0, #5
   1d20a:	6879      	ldr	r1, [r7, #4]
   1d20c:	f7ff ff98 	bl	1d140 <getStackedReg>
   1d210:	4603      	mov	r3, r0
   1d212:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
   1d214:	2006      	movs	r0, #6
   1d216:	6879      	ldr	r1, [r7, #4]
   1d218:	f7ff ff92 	bl	1d140 <getStackedReg>
   1d21c:	4603      	mov	r3, r0
   1d21e:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
   1d220:	2007      	movs	r0, #7
   1d222:	6879      	ldr	r1, [r7, #4]
   1d224:	f7ff ff8c 	bl	1d140 <getStackedReg>
   1d228:	4603      	mov	r3, r0
   1d22a:	643b      	str	r3, [r7, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
   1d22c:	f107 030c 	add.w	r3, r7, #12
   1d230:	2002      	movs	r0, #2
   1d232:	4619      	mov	r1, r3
   1d234:	f006 f816 	bl	23264 <am_hal_mcuctrl_info_get>
    }


#endif

    u32Mask = 0;
   1d238:	2300      	movs	r3, #0
   1d23a:	657b      	str	r3, [r7, #84]	; 0x54
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    {
    }
   1d23c:	e7fe      	b.n	1d23c <am_util_faultisr_collect_data+0xf0>
   1d23e:	bf00      	nop
   1d240:	e000ed28 	.word	0xe000ed28
   1d244:	e000ed38 	.word	0xe000ed38

0001d248 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
   1d248:	b480      	push	{r7}
   1d24a:	b083      	sub	sp, #12
   1d24c:	af00      	add	r7, sp, #0
   1d24e:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
   1d250:	4a03      	ldr	r2, [pc, #12]	; (1d260 <am_util_stdio_printf_init+0x18>)
   1d252:	687b      	ldr	r3, [r7, #4]
   1d254:	6013      	str	r3, [r2, #0]
}
   1d256:	370c      	adds	r7, #12
   1d258:	46bd      	mov	sp, r7
   1d25a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d25e:	4770      	bx	lr
   1d260:	1000a3a8 	.word	0x1000a3a8

0001d264 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
   1d264:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
   1d268:	b097      	sub	sp, #92	; 0x5c
   1d26a:	af00      	add	r7, sp, #0
   1d26c:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
   1d270:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
   1d274:	001c      	movs	r4, r3
   1d276:	2500      	movs	r5, #0
   1d278:	ea54 0305 	orrs.w	r3, r4, r5
   1d27c:	f000 809e 	beq.w	1d3bc <divu64_10+0x158>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
   1d280:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
   1d284:	0859      	lsrs	r1, r3, #1
   1d286:	ea4f 0032 	mov.w	r0, r2, rrx
   1d28a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
   1d28e:	ea4f 0892 	mov.w	r8, r2, lsr #2
   1d292:	ea48 7883 	orr.w	r8, r8, r3, lsl #30
   1d296:	ea4f 0993 	mov.w	r9, r3, lsr #2
   1d29a:	eb10 0208 	adds.w	r2, r0, r8
   1d29e:	eb41 0309 	adc.w	r3, r1, r9
   1d2a2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
   1d2a6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
   1d2aa:	ea4f 1a12 	mov.w	sl, r2, lsr #4
   1d2ae:	ea4a 7a03 	orr.w	sl, sl, r3, lsl #28
   1d2b2:	ea4f 1b13 	mov.w	fp, r3, lsr #4
   1d2b6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
   1d2ba:	eb12 020a 	adds.w	r2, r2, sl
   1d2be:	eb43 030b 	adc.w	r3, r3, fp
   1d2c2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
   1d2c6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
   1d2ca:	0a11      	lsrs	r1, r2, #8
   1d2cc:	62b9      	str	r1, [r7, #40]	; 0x28
   1d2ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1d2d0:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
   1d2d4:	62b9      	str	r1, [r7, #40]	; 0x28
   1d2d6:	0a1b      	lsrs	r3, r3, #8
   1d2d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   1d2da:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
   1d2de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   1d2e2:	1880      	adds	r0, r0, r2
   1d2e4:	eb41 0103 	adc.w	r1, r1, r3
   1d2e8:	4602      	mov	r2, r0
   1d2ea:	460b      	mov	r3, r1
   1d2ec:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
   1d2f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
   1d2f4:	0c11      	lsrs	r1, r2, #16
   1d2f6:	6239      	str	r1, [r7, #32]
   1d2f8:	6a39      	ldr	r1, [r7, #32]
   1d2fa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1d2fe:	6239      	str	r1, [r7, #32]
   1d300:	0c1b      	lsrs	r3, r3, #16
   1d302:	627b      	str	r3, [r7, #36]	; 0x24
   1d304:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
   1d308:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
   1d30c:	1880      	adds	r0, r0, r2
   1d30e:	eb41 0103 	adc.w	r1, r1, r3
   1d312:	4602      	mov	r2, r0
   1d314:	460b      	mov	r3, r1
   1d316:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
   1d31a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
   1d31e:	001b      	movs	r3, r3
   1d320:	603b      	str	r3, [r7, #0]
   1d322:	2300      	movs	r3, #0
   1d324:	607b      	str	r3, [r7, #4]
   1d326:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
   1d32a:	e9d7 0100 	ldrd	r0, r1, [r7]
   1d32e:	1880      	adds	r0, r0, r2
   1d330:	eb41 0103 	adc.w	r1, r1, r3
   1d334:	4602      	mov	r2, r0
   1d336:	460b      	mov	r3, r1
   1d338:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
        q64 >>= 3;
   1d33c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
   1d340:	08d1      	lsrs	r1, r2, #3
   1d342:	6139      	str	r1, [r7, #16]
   1d344:	6939      	ldr	r1, [r7, #16]
   1d346:	ea41 7143 	orr.w	r1, r1, r3, lsl #29
   1d34a:	6139      	str	r1, [r7, #16]
   1d34c:	08db      	lsrs	r3, r3, #3
   1d34e:	617b      	str	r3, [r7, #20]
   1d350:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   1d354:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
   1d358:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
   1d35c:	1892      	adds	r2, r2, r2
   1d35e:	eb43 0303 	adc.w	r3, r3, r3
   1d362:	0099      	lsls	r1, r3, #2
   1d364:	60f9      	str	r1, [r7, #12]
   1d366:	68f9      	ldr	r1, [r7, #12]
   1d368:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
   1d36c:	60f9      	str	r1, [r7, #12]
   1d36e:	0091      	lsls	r1, r2, #2
   1d370:	60b9      	str	r1, [r7, #8]
   1d372:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   1d376:	1880      	adds	r0, r0, r2
   1d378:	eb41 0103 	adc.w	r1, r1, r3
   1d37c:	4602      	mov	r2, r0
   1d37e:	460b      	mov	r3, r1
   1d380:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
   1d384:	1a82      	subs	r2, r0, r2
   1d386:	eb61 0303 	sbc.w	r3, r1, r3
   1d38a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
   1d38e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
   1d392:	3206      	adds	r2, #6
   1d394:	f143 0300 	adc.w	r3, r3, #0
   1d398:	0911      	lsrs	r1, r2, #4
   1d39a:	61b9      	str	r1, [r7, #24]
   1d39c:	69b9      	ldr	r1, [r7, #24]
   1d39e:	ea41 7103 	orr.w	r1, r1, r3, lsl #28
   1d3a2:	61b9      	str	r1, [r7, #24]
   1d3a4:	091b      	lsrs	r3, r3, #4
   1d3a6:	61fb      	str	r3, [r7, #28]
   1d3a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
   1d3ac:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   1d3b0:	1880      	adds	r0, r0, r2
   1d3b2:	eb41 0103 	adc.w	r1, r1, r3
   1d3b6:	4602      	mov	r2, r0
   1d3b8:	460b      	mov	r3, r1
   1d3ba:	e02a      	b.n	1d412 <divu64_10+0x1ae>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
   1d3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1d3be:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
   1d3c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1d3c2:	085a      	lsrs	r2, r3, #1
   1d3c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1d3c6:	089b      	lsrs	r3, r3, #2
   1d3c8:	4413      	add	r3, r2
   1d3ca:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
   1d3cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1d3ce:	091b      	lsrs	r3, r3, #4
   1d3d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1d3d2:	4413      	add	r3, r2
   1d3d4:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
   1d3d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1d3d8:	0a1b      	lsrs	r3, r3, #8
   1d3da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1d3dc:	4413      	add	r3, r2
   1d3de:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
   1d3e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1d3e2:	0c1b      	lsrs	r3, r3, #16
   1d3e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1d3e6:	4413      	add	r3, r2
   1d3e8:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
   1d3ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1d3ec:	08db      	lsrs	r3, r3, #3
   1d3ee:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
   1d3f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1d3f2:	4613      	mov	r3, r2
   1d3f4:	009b      	lsls	r3, r3, #2
   1d3f6:	4413      	add	r3, r2
   1d3f8:	005b      	lsls	r3, r3, #1
   1d3fa:	461a      	mov	r2, r3
   1d3fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1d3fe:	1a9b      	subs	r3, r3, r2
   1d400:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
   1d402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1d404:	3306      	adds	r3, #6
   1d406:	091a      	lsrs	r2, r3, #4
   1d408:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1d40a:	4413      	add	r3, r2
   1d40c:	461a      	mov	r2, r3
   1d40e:	f04f 0300 	mov.w	r3, #0
    }
}
   1d412:	4610      	mov	r0, r2
   1d414:	4619      	mov	r1, r3
   1d416:	375c      	adds	r7, #92	; 0x5c
   1d418:	46bd      	mov	sp, r7
   1d41a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
   1d41e:	4770      	bx	lr

0001d420 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
   1d420:	b580      	push	{r7, lr}
   1d422:	b084      	sub	sp, #16
   1d424:	af00      	add	r7, sp, #0
   1d426:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
   1d42a:	683a      	ldr	r2, [r7, #0]
   1d42c:	687b      	ldr	r3, [r7, #4]
   1d42e:	4313      	orrs	r3, r2
   1d430:	2b00      	cmp	r3, #0
   1d432:	bf0c      	ite	eq
   1d434:	2301      	moveq	r3, #1
   1d436:	2300      	movne	r3, #0
   1d438:	b2db      	uxtb	r3, r3
   1d43a:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
   1d43c:	e008      	b.n	1d450 <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
   1d43e:	e9d7 0100 	ldrd	r0, r1, [r7]
   1d442:	f7ff ff0f 	bl	1d264 <divu64_10>
   1d446:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
   1d44a:	68fb      	ldr	r3, [r7, #12]
   1d44c:	3301      	adds	r3, #1
   1d44e:	60fb      	str	r3, [r7, #12]
static int
ndigits_in_u64(uint64_t ui64Val)
{
    int iNDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
   1d450:	e9d7 2300 	ldrd	r2, r3, [r7]
   1d454:	4313      	orrs	r3, r2
   1d456:	d1f2      	bne.n	1d43e <ndigits_in_u64+0x1e>
        //
        ui64Val = divu64_10(ui64Val);
        ++iNDigits;
    }

    return iNDigits;
   1d458:	68fb      	ldr	r3, [r7, #12]
}
   1d45a:	4618      	mov	r0, r3
   1d45c:	3710      	adds	r7, #16
   1d45e:	46bd      	mov	sp, r7
   1d460:	bd80      	pop	{r7, pc}
   1d462:	bf00      	nop

0001d464 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
   1d464:	b580      	push	{r7, lr}
   1d466:	b082      	sub	sp, #8
   1d468:	af00      	add	r7, sp, #0
   1d46a:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
   1d46e:	e9d7 2300 	ldrd	r2, r3, [r7]
   1d472:	2a00      	cmp	r2, #0
   1d474:	f173 0300 	sbcs.w	r3, r3, #0
   1d478:	da06      	bge.n	1d488 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
   1d47a:	e9d7 2300 	ldrd	r2, r3, [r7]
   1d47e:	4252      	negs	r2, r2
   1d480:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1d484:	e9c7 2300 	strd	r2, r3, [r7]
    }

    return ndigits_in_u64((uint64_t) i64Val);
   1d488:	e9d7 2300 	ldrd	r2, r3, [r7]
   1d48c:	4610      	mov	r0, r2
   1d48e:	4619      	mov	r1, r3
   1d490:	f7ff ffc6 	bl	1d420 <ndigits_in_u64>
   1d494:	4603      	mov	r3, r0
}
   1d496:	4618      	mov	r0, r3
   1d498:	3708      	adds	r7, #8
   1d49a:	46bd      	mov	sp, r7
   1d49c:	bd80      	pop	{r7, pc}
   1d49e:	bf00      	nop

0001d4a0 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
   1d4a0:	b480      	push	{r7}
   1d4a2:	b085      	sub	sp, #20
   1d4a4:	af00      	add	r7, sp, #0
   1d4a6:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
   1d4aa:	6838      	ldr	r0, [r7, #0]
   1d4ac:	6879      	ldr	r1, [r7, #4]
   1d4ae:	4301      	orrs	r1, r0
   1d4b0:	2900      	cmp	r1, #0
   1d4b2:	bf0c      	ite	eq
   1d4b4:	2101      	moveq	r1, #1
   1d4b6:	2100      	movne	r1, #0
   1d4b8:	b2c9      	uxtb	r1, r1
   1d4ba:	60f9      	str	r1, [r7, #12]

    while ( ui64Val )
   1d4bc:	e00a      	b.n	1d4d4 <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
   1d4be:	e9d7 0100 	ldrd	r0, r1, [r7]
   1d4c2:	0902      	lsrs	r2, r0, #4
   1d4c4:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
   1d4c8:	090b      	lsrs	r3, r1, #4
   1d4ca:	e9c7 2300 	strd	r2, r3, [r7]
        ++iDigits;
   1d4ce:	68f9      	ldr	r1, [r7, #12]
   1d4d0:	3101      	adds	r1, #1
   1d4d2:	60f9      	str	r1, [r7, #12]
static int
ndigits_in_hex(uint64_t ui64Val)
{
    int iDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
   1d4d4:	e9d7 0100 	ldrd	r0, r1, [r7]
   1d4d8:	4301      	orrs	r1, r0
   1d4da:	d1f0      	bne.n	1d4be <ndigits_in_hex+0x1e>
    {
        ui64Val >>= 4;
        ++iDigits;
    }

    return iDigits;
   1d4dc:	68fb      	ldr	r3, [r7, #12]
}
   1d4de:	4618      	mov	r0, r3
   1d4e0:	3714      	adds	r7, #20
   1d4e2:	46bd      	mov	sp, r7
   1d4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d4e8:	4770      	bx	lr
   1d4ea:	bf00      	nop

0001d4ec <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
   1d4ec:	b480      	push	{r7}
   1d4ee:	b087      	sub	sp, #28
   1d4f0:	af00      	add	r7, sp, #0
   1d4f2:	6078      	str	r0, [r7, #4]
   1d4f4:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
   1d4f6:	2300      	movs	r3, #0
   1d4f8:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
   1d4fa:	2300      	movs	r3, #0
   1d4fc:	613b      	str	r3, [r7, #16]
   1d4fe:	2300      	movs	r3, #0
   1d500:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
   1d502:	687b      	ldr	r3, [r7, #4]
   1d504:	781b      	ldrb	r3, [r3, #0]
   1d506:	2b2d      	cmp	r3, #45	; 0x2d
   1d508:	d107      	bne.n	1d51a <decstr_to_int+0x2e>
    {
        bNeg = true;
   1d50a:	2301      	movs	r3, #1
   1d50c:	75fb      	strb	r3, [r7, #23]
        pcStr++;
   1d50e:	687b      	ldr	r3, [r7, #4]
   1d510:	3301      	adds	r3, #1
   1d512:	607b      	str	r3, [r7, #4]
        uCnt++;
   1d514:	68fb      	ldr	r3, [r7, #12]
   1d516:	3301      	adds	r3, #1
   1d518:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1d51a:	e012      	b.n	1d542 <decstr_to_int+0x56>
    {
        ++uCnt;
   1d51c:	68fb      	ldr	r3, [r7, #12]
   1d51e:	3301      	adds	r3, #1
   1d520:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
   1d522:	693a      	ldr	r2, [r7, #16]
   1d524:	4613      	mov	r3, r2
   1d526:	009b      	lsls	r3, r3, #2
   1d528:	4413      	add	r3, r2
   1d52a:	005b      	lsls	r3, r3, #1
   1d52c:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
   1d52e:	687b      	ldr	r3, [r7, #4]
   1d530:	781b      	ldrb	r3, [r3, #0]
   1d532:	461a      	mov	r2, r3
   1d534:	693b      	ldr	r3, [r7, #16]
   1d536:	4413      	add	r3, r2
   1d538:	3b30      	subs	r3, #48	; 0x30
   1d53a:	613b      	str	r3, [r7, #16]
        pcStr++;
   1d53c:	687b      	ldr	r3, [r7, #4]
   1d53e:	3301      	adds	r3, #1
   1d540:	607b      	str	r3, [r7, #4]
        bNeg = true;
        pcStr++;
        uCnt++;
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1d542:	687b      	ldr	r3, [r7, #4]
   1d544:	781b      	ldrb	r3, [r3, #0]
   1d546:	2b2f      	cmp	r3, #47	; 0x2f
   1d548:	d903      	bls.n	1d552 <decstr_to_int+0x66>
   1d54a:	687b      	ldr	r3, [r7, #4]
   1d54c:	781b      	ldrb	r3, [r3, #0]
   1d54e:	2b39      	cmp	r3, #57	; 0x39
   1d550:	d9e4      	bls.n	1d51c <decstr_to_int+0x30>
        //
        ui32Val += (*pcStr - '0');
        pcStr++;
    }

    if ( pui32CharCnt )
   1d552:	683b      	ldr	r3, [r7, #0]
   1d554:	2b00      	cmp	r3, #0
   1d556:	d002      	beq.n	1d55e <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
   1d558:	683b      	ldr	r3, [r7, #0]
   1d55a:	68fa      	ldr	r2, [r7, #12]
   1d55c:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
   1d55e:	7dfb      	ldrb	r3, [r7, #23]
   1d560:	2b00      	cmp	r3, #0
   1d562:	d002      	beq.n	1d56a <decstr_to_int+0x7e>
   1d564:	693b      	ldr	r3, [r7, #16]
   1d566:	425b      	negs	r3, r3
   1d568:	e000      	b.n	1d56c <decstr_to_int+0x80>
   1d56a:	693b      	ldr	r3, [r7, #16]
}
   1d56c:	4618      	mov	r0, r3
   1d56e:	371c      	adds	r7, #28
   1d570:	46bd      	mov	sp, r7
   1d572:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d576:	4770      	bx	lr

0001d578 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
   1d578:	b580      	push	{r7, lr}
   1d57a:	b090      	sub	sp, #64	; 0x40
   1d57c:	af00      	add	r7, sp, #0
   1d57e:	e9c7 0102 	strd	r0, r1, [r7, #8]
   1d582:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
   1d584:	2300      	movs	r3, #0
   1d586:	63fb      	str	r3, [r7, #60]	; 0x3c
   1d588:	2300      	movs	r3, #0
   1d58a:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
   1d58c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   1d590:	f7ff fe68 	bl	1d264 <divu64_10>
   1d594:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
   1d598:	68b9      	ldr	r1, [r7, #8]
   1d59a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1d59c:	4613      	mov	r3, r2
   1d59e:	009b      	lsls	r3, r3, #2
   1d5a0:	4413      	add	r3, r2
   1d5a2:	005b      	lsls	r3, r3, #1
   1d5a4:	1acb      	subs	r3, r1, r3
   1d5a6:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
   1d5a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1d5aa:	1c5a      	adds	r2, r3, #1
   1d5ac:	63fa      	str	r2, [r7, #60]	; 0x3c
   1d5ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1d5b0:	b2d2      	uxtb	r2, r2
   1d5b2:	3230      	adds	r2, #48	; 0x30
   1d5b4:	b2d2      	uxtb	r2, r2
   1d5b6:	f107 0140 	add.w	r1, r7, #64	; 0x40
   1d5ba:	440b      	add	r3, r1
   1d5bc:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
   1d5c0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
   1d5c4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    } while ( ui64Val );
   1d5c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1d5cc:	4313      	orrs	r3, r2
   1d5ce:	d1dd      	bne.n	1d58c <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
   1d5d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1d5d2:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
   1d5d4:	687b      	ldr	r3, [r7, #4]
   1d5d6:	2b00      	cmp	r3, #0
   1d5d8:	d011      	beq.n	1d5fe <uint64_to_str+0x86>
    {
        while ( ix-- )
   1d5da:	e008      	b.n	1d5ee <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
   1d5dc:	687b      	ldr	r3, [r7, #4]
   1d5de:	1c5a      	adds	r2, r3, #1
   1d5e0:	607a      	str	r2, [r7, #4]
   1d5e2:	f107 0110 	add.w	r1, r7, #16
   1d5e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1d5e8:	440a      	add	r2, r1
   1d5ea:	7812      	ldrb	r2, [r2, #0]
   1d5ec:	701a      	strb	r2, [r3, #0]
    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    {
        while ( ix-- )
   1d5ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1d5f0:	1e5a      	subs	r2, r3, #1
   1d5f2:	63fa      	str	r2, [r7, #60]	; 0x3c
   1d5f4:	2b00      	cmp	r3, #0
   1d5f6:	d1f1      	bne.n	1d5dc <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
   1d5f8:	687b      	ldr	r3, [r7, #4]
   1d5fa:	2200      	movs	r2, #0
   1d5fc:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
   1d5fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
   1d600:	4618      	mov	r0, r3
   1d602:	3740      	adds	r7, #64	; 0x40
   1d604:	46bd      	mov	sp, r7
   1d606:	bd80      	pop	{r7, pc}

0001d608 <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
   1d608:	b4b0      	push	{r4, r5, r7}
   1d60a:	b08d      	sub	sp, #52	; 0x34
   1d60c:	af00      	add	r7, sp, #0
   1d60e:	e9c7 0102 	strd	r0, r1, [r7, #8]
   1d612:	607a      	str	r2, [r7, #4]
   1d614:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
   1d616:	2300      	movs	r3, #0
   1d618:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
   1d61a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1d61e:	4313      	orrs	r3, r2
   1d620:	d108      	bne.n	1d634 <uint64_to_hexstr+0x2c>
    {
        tbuf[ix++] = '0';   // Print a '0'
   1d622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d624:	1c5a      	adds	r2, r3, #1
   1d626:	62fa      	str	r2, [r7, #44]	; 0x2c
   1d628:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1d62c:	4413      	add	r3, r2
   1d62e:	2230      	movs	r2, #48	; 0x30
   1d630:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
   1d634:	e027      	b.n	1d686 <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
   1d636:	7a3b      	ldrb	r3, [r7, #8]
   1d638:	f003 030f 	and.w	r3, r3, #15
   1d63c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
   1d640:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   1d644:	2b09      	cmp	r3, #9
   1d646:	d90a      	bls.n	1d65e <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
   1d648:	78fb      	ldrb	r3, [r7, #3]
   1d64a:	2b00      	cmp	r3, #0
   1d64c:	d001      	beq.n	1d652 <uint64_to_hexstr+0x4a>
   1d64e:	2227      	movs	r2, #39	; 0x27
   1d650:	e000      	b.n	1d654 <uint64_to_hexstr+0x4c>
   1d652:	2207      	movs	r2, #7
   1d654:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   1d658:	4413      	add	r3, r2
   1d65a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
   1d65e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d660:	1c5a      	adds	r2, r3, #1
   1d662:	62fa      	str	r2, [r7, #44]	; 0x2c
   1d664:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
   1d668:	3230      	adds	r2, #48	; 0x30
   1d66a:	b2d2      	uxtb	r2, r2
   1d66c:	f107 0130 	add.w	r1, r7, #48	; 0x30
   1d670:	440b      	add	r3, r1
   1d672:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
   1d676:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1d67a:	0914      	lsrs	r4, r2, #4
   1d67c:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
   1d680:	091d      	lsrs	r5, r3, #4
   1d682:	e9c7 4502 	strd	r4, r5, [r7, #8]
    if ( ui64Val == 0 )
    {
        tbuf[ix++] = '0';   // Print a '0'
    }

    while ( ui64Val )
   1d686:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1d68a:	4313      	orrs	r3, r2
   1d68c:	d1d3      	bne.n	1d636 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
   1d68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d690:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
   1d692:	687b      	ldr	r3, [r7, #4]
   1d694:	2b00      	cmp	r3, #0
   1d696:	d011      	beq.n	1d6bc <uint64_to_hexstr+0xb4>
    {
        while (ix--)
   1d698:	e008      	b.n	1d6ac <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
   1d69a:	687b      	ldr	r3, [r7, #4]
   1d69c:	1c5a      	adds	r2, r3, #1
   1d69e:	607a      	str	r2, [r7, #4]
   1d6a0:	f107 0110 	add.w	r1, r7, #16
   1d6a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1d6a6:	440a      	add	r2, r1
   1d6a8:	7812      	ldrb	r2, [r2, #0]
   1d6aa:	701a      	strb	r2, [r3, #0]
    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    {
        while (ix--)
   1d6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d6ae:	1e5a      	subs	r2, r3, #1
   1d6b0:	62fa      	str	r2, [r7, #44]	; 0x2c
   1d6b2:	2b00      	cmp	r3, #0
   1d6b4:	d1f1      	bne.n	1d69a <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
   1d6b6:	687b      	ldr	r3, [r7, #4]
   1d6b8:	2200      	movs	r2, #0
   1d6ba:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
   1d6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1d6be:	4618      	mov	r0, r3
   1d6c0:	3734      	adds	r7, #52	; 0x34
   1d6c2:	46bd      	mov	sp, r7
   1d6c4:	bcb0      	pop	{r4, r5, r7}
   1d6c6:	4770      	bx	lr

0001d6c8 <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
   1d6c8:	b480      	push	{r7}
   1d6ca:	b085      	sub	sp, #20
   1d6cc:	af00      	add	r7, sp, #0
   1d6ce:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
   1d6d0:	2300      	movs	r3, #0
   1d6d2:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
   1d6d4:	687b      	ldr	r3, [r7, #4]
   1d6d6:	2b00      	cmp	r3, #0
   1d6d8:	d101      	bne.n	1d6de <simple_strlen+0x16>
    {
        return ui32RetVal;
   1d6da:	68fb      	ldr	r3, [r7, #12]
   1d6dc:	e00a      	b.n	1d6f4 <simple_strlen+0x2c>
    }

    while ( *pcBuf++ )
   1d6de:	e002      	b.n	1d6e6 <simple_strlen+0x1e>
    {
        ui32RetVal++;
   1d6e0:	68fb      	ldr	r3, [r7, #12]
   1d6e2:	3301      	adds	r3, #1
   1d6e4:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    {
        return ui32RetVal;
    }

    while ( *pcBuf++ )
   1d6e6:	687b      	ldr	r3, [r7, #4]
   1d6e8:	1c5a      	adds	r2, r3, #1
   1d6ea:	607a      	str	r2, [r7, #4]
   1d6ec:	781b      	ldrb	r3, [r3, #0]
   1d6ee:	2b00      	cmp	r3, #0
   1d6f0:	d1f6      	bne.n	1d6e0 <simple_strlen+0x18>
    {
        ui32RetVal++;
    }
    return ui32RetVal;
   1d6f2:	68fb      	ldr	r3, [r7, #12]
}
   1d6f4:	4618      	mov	r0, r3
   1d6f6:	3714      	adds	r7, #20
   1d6f8:	46bd      	mov	sp, r7
   1d6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d6fe:	4770      	bx	lr

0001d700 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
   1d700:	b480      	push	{r7}
   1d702:	b087      	sub	sp, #28
   1d704:	af00      	add	r7, sp, #0
   1d706:	60f8      	str	r0, [r7, #12]
   1d708:	460b      	mov	r3, r1
   1d70a:	607a      	str	r2, [r7, #4]
   1d70c:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
   1d70e:	2300      	movs	r3, #0
   1d710:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
   1d712:	687b      	ldr	r3, [r7, #4]
   1d714:	2b00      	cmp	r3, #0
   1d716:	dc01      	bgt.n	1d71c <padbuffer+0x1c>
    {
        return i32Cnt;
   1d718:	697b      	ldr	r3, [r7, #20]
   1d71a:	e011      	b.n	1d740 <padbuffer+0x40>
    }

    while ( i32NumChars-- )
   1d71c:	e00a      	b.n	1d734 <padbuffer+0x34>
    {
        if ( pcBuf )
   1d71e:	68fb      	ldr	r3, [r7, #12]
   1d720:	2b00      	cmp	r3, #0
   1d722:	d004      	beq.n	1d72e <padbuffer+0x2e>
        {
            *pcBuf++ = cPadChar;
   1d724:	68fb      	ldr	r3, [r7, #12]
   1d726:	1c5a      	adds	r2, r3, #1
   1d728:	60fa      	str	r2, [r7, #12]
   1d72a:	7afa      	ldrb	r2, [r7, #11]
   1d72c:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
   1d72e:	697b      	ldr	r3, [r7, #20]
   1d730:	3301      	adds	r3, #1
   1d732:	617b      	str	r3, [r7, #20]
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
   1d734:	687b      	ldr	r3, [r7, #4]
   1d736:	1e5a      	subs	r2, r3, #1
   1d738:	607a      	str	r2, [r7, #4]
   1d73a:	2b00      	cmp	r3, #0
   1d73c:	d1ef      	bne.n	1d71e <padbuffer+0x1e>
            *pcBuf++ = cPadChar;
        }
        i32Cnt++;
    }

    return i32Cnt;
   1d73e:	697b      	ldr	r3, [r7, #20]
}
   1d740:	4618      	mov	r0, r3
   1d742:	371c      	adds	r7, #28
   1d744:	46bd      	mov	sp, r7
   1d746:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d74a:	4770      	bx	lr

0001d74c <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
   1d74c:	b580      	push	{r7, lr}
   1d74e:	b08e      	sub	sp, #56	; 0x38
   1d750:	af00      	add	r7, sp, #0
   1d752:	ed87 0a03 	vstr	s0, [r7, #12]
   1d756:	60b8      	str	r0, [r7, #8]
   1d758:	6079      	str	r1, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
   1d75a:	68bb      	ldr	r3, [r7, #8]
   1d75c:	681b      	ldr	r3, [r3, #0]
   1d75e:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
   1d760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d762:	2b03      	cmp	r3, #3
   1d764:	dc02      	bgt.n	1d76c <ftoa+0x20>
    {
        return AM_FTOA_ERR_BUFSIZE;
   1d766:	f06f 0302 	mvn.w	r3, #2
   1d76a:	e0e9      	b.n	1d940 <ftoa+0x1f4>
    }

    if (fValue == 0.0f)
   1d76c:	edd7 7a03 	vldr	s15, [r7, #12]
   1d770:	eef5 7a40 	vcmp.f32	s15, #0.0
   1d774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1d778:	d104      	bne.n	1d784 <ftoa+0x38>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
   1d77a:	68bb      	ldr	r3, [r7, #8]
   1d77c:	4a72      	ldr	r2, [pc, #456]	; (1d948 <ftoa+0x1fc>)
   1d77e:	601a      	str	r2, [r3, #0]
        return 3;
   1d780:	2303      	movs	r3, #3
   1d782:	e0dd      	b.n	1d940 <ftoa+0x1f4>
    }

    pcBufInitial = pcBuf;
   1d784:	68bb      	ldr	r3, [r7, #8]
   1d786:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
   1d788:	68fb      	ldr	r3, [r7, #12]
   1d78a:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
   1d78c:	693b      	ldr	r3, [r7, #16]
   1d78e:	15db      	asrs	r3, r3, #23
   1d790:	b2db      	uxtb	r3, r3
   1d792:	3b7f      	subs	r3, #127	; 0x7f
   1d794:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
   1d796:	693b      	ldr	r3, [r7, #16]
   1d798:	f3c3 0316 	ubfx	r3, r3, #0, #23
   1d79c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1d7a0:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
   1d7a2:	2300      	movs	r3, #0
   1d7a4:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
   1d7a6:	2300      	movs	r3, #0
   1d7a8:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
   1d7aa:	69fb      	ldr	r3, [r7, #28]
   1d7ac:	2b1e      	cmp	r3, #30
   1d7ae:	dd02      	ble.n	1d7b6 <ftoa+0x6a>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
   1d7b0:	f06f 0301 	mvn.w	r3, #1
   1d7b4:	e0c4      	b.n	1d940 <ftoa+0x1f4>
    }
    else if (iExp2 < -23)
   1d7b6:	69fb      	ldr	r3, [r7, #28]
   1d7b8:	f113 0f17 	cmn.w	r3, #23
   1d7bc:	da02      	bge.n	1d7c4 <ftoa+0x78>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
   1d7be:	f04f 33ff 	mov.w	r3, #4294967295
   1d7c2:	e0bd      	b.n	1d940 <ftoa+0x1f4>
    }
    else if (iExp2 >= 23)
   1d7c4:	69fb      	ldr	r3, [r7, #28]
   1d7c6:	2b16      	cmp	r3, #22
   1d7c8:	dd06      	ble.n	1d7d8 <ftoa+0x8c>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
   1d7ca:	69fb      	ldr	r3, [r7, #28]
   1d7cc:	3b17      	subs	r3, #23
   1d7ce:	69ba      	ldr	r2, [r7, #24]
   1d7d0:	fa02 f303 	lsl.w	r3, r2, r3
   1d7d4:	637b      	str	r3, [r7, #52]	; 0x34
   1d7d6:	e01a      	b.n	1d80e <ftoa+0xc2>
    }
    else if (iExp2 >= 0)
   1d7d8:	69fb      	ldr	r3, [r7, #28]
   1d7da:	2b00      	cmp	r3, #0
   1d7dc:	db0f      	blt.n	1d7fe <ftoa+0xb2>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
   1d7de:	69fb      	ldr	r3, [r7, #28]
   1d7e0:	f1c3 0317 	rsb	r3, r3, #23
   1d7e4:	69ba      	ldr	r2, [r7, #24]
   1d7e6:	fa42 f303 	asr.w	r3, r2, r3
   1d7ea:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
   1d7ec:	69fb      	ldr	r3, [r7, #28]
   1d7ee:	3301      	adds	r3, #1
   1d7f0:	69ba      	ldr	r2, [r7, #24]
   1d7f2:	fa02 f303 	lsl.w	r3, r2, r3
   1d7f6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1d7fa:	633b      	str	r3, [r7, #48]	; 0x30
   1d7fc:	e007      	b.n	1d80e <ftoa+0xc2>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
   1d7fe:	69bb      	ldr	r3, [r7, #24]
   1d800:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
   1d804:	69fb      	ldr	r3, [r7, #28]
   1d806:	43db      	mvns	r3, r3
   1d808:	fa42 f303 	asr.w	r3, r2, r3
   1d80c:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
   1d80e:	693b      	ldr	r3, [r7, #16]
   1d810:	2b00      	cmp	r3, #0
   1d812:	da04      	bge.n	1d81e <ftoa+0xd2>
    {
        *pcBuf++ = '-';
   1d814:	68bb      	ldr	r3, [r7, #8]
   1d816:	1c5a      	adds	r2, r3, #1
   1d818:	60ba      	str	r2, [r7, #8]
   1d81a:	222d      	movs	r2, #45	; 0x2d
   1d81c:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
   1d81e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1d820:	2b00      	cmp	r3, #0
   1d822:	d105      	bne.n	1d830 <ftoa+0xe4>
    {
        *pcBuf++ = '0';
   1d824:	68bb      	ldr	r3, [r7, #8]
   1d826:	1c5a      	adds	r2, r3, #1
   1d828:	60ba      	str	r2, [r7, #8]
   1d82a:	2230      	movs	r2, #48	; 0x30
   1d82c:	701a      	strb	r2, [r3, #0]
   1d82e:	e023      	b.n	1d878 <ftoa+0x12c>
    }
    else
    {
        if (i32IntPart > 0)
   1d830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1d832:	2b00      	cmp	r3, #0
   1d834:	dd09      	ble.n	1d84a <ftoa+0xfe>
        {
            uint64_to_str(i32IntPart, pcBuf);
   1d836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1d838:	461a      	mov	r2, r3
   1d83a:	ea4f 73e2 	mov.w	r3, r2, asr #31
   1d83e:	4610      	mov	r0, r2
   1d840:	4619      	mov	r1, r3
   1d842:	68ba      	ldr	r2, [r7, #8]
   1d844:	f7ff fe98 	bl	1d578 <uint64_to_str>
   1d848:	e00e      	b.n	1d868 <ftoa+0x11c>
        }
        else
        {
            *pcBuf++ = '-';
   1d84a:	68bb      	ldr	r3, [r7, #8]
   1d84c:	1c5a      	adds	r2, r3, #1
   1d84e:	60ba      	str	r2, [r7, #8]
   1d850:	222d      	movs	r2, #45	; 0x2d
   1d852:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
   1d854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1d856:	425b      	negs	r3, r3
   1d858:	461a      	mov	r2, r3
   1d85a:	ea4f 73e2 	mov.w	r3, r2, asr #31
   1d85e:	4610      	mov	r0, r2
   1d860:	4619      	mov	r1, r3
   1d862:	68ba      	ldr	r2, [r7, #8]
   1d864:	f7ff fe88 	bl	1d578 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
   1d868:	e002      	b.n	1d870 <ftoa+0x124>
        {
            pcBuf++;
   1d86a:	68bb      	ldr	r3, [r7, #8]
   1d86c:	3301      	adds	r3, #1
   1d86e:	60bb      	str	r3, [r7, #8]
        else
        {
            *pcBuf++ = '-';
            uint64_to_str(-i32IntPart, pcBuf);
        }
        while (*pcBuf)    // Get to end of new string
   1d870:	68bb      	ldr	r3, [r7, #8]
   1d872:	781b      	ldrb	r3, [r3, #0]
   1d874:	2b00      	cmp	r3, #0
   1d876:	d1f8      	bne.n	1d86a <ftoa+0x11e>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
   1d878:	68bb      	ldr	r3, [r7, #8]
   1d87a:	1c5a      	adds	r2, r3, #1
   1d87c:	60ba      	str	r2, [r7, #8]
   1d87e:	222e      	movs	r2, #46	; 0x2e
   1d880:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
   1d882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1d884:	2b00      	cmp	r3, #0
   1d886:	d105      	bne.n	1d894 <ftoa+0x148>
    {
        *pcBuf++ = '0';
   1d888:	68bb      	ldr	r3, [r7, #8]
   1d88a:	1c5a      	adds	r2, r3, #1
   1d88c:	60ba      	str	r2, [r7, #8]
   1d88e:	2230      	movs	r2, #48	; 0x30
   1d890:	701a      	strb	r2, [r3, #0]
   1d892:	e04f      	b.n	1d934 <ftoa+0x1e8>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
   1d894:	6a3a      	ldr	r2, [r7, #32]
   1d896:	68bb      	ldr	r3, [r7, #8]
   1d898:	1ad2      	subs	r2, r2, r3
   1d89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d89c:	4413      	add	r3, r2
   1d89e:	3b01      	subs	r3, #1
   1d8a0:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
   1d8a2:	697a      	ldr	r2, [r7, #20]
   1d8a4:	687b      	ldr	r3, [r7, #4]
   1d8a6:	4293      	cmp	r3, r2
   1d8a8:	bfa8      	it	ge
   1d8aa:	4613      	movge	r3, r2
   1d8ac:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
   1d8ae:	2300      	movs	r3, #0
   1d8b0:	62bb      	str	r3, [r7, #40]	; 0x28
   1d8b2:	e015      	b.n	1d8e0 <ftoa+0x194>
        {
            i32FracPart *= 10;
   1d8b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1d8b6:	4613      	mov	r3, r2
   1d8b8:	009b      	lsls	r3, r3, #2
   1d8ba:	4413      	add	r3, r2
   1d8bc:	005b      	lsls	r3, r3, #1
   1d8be:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
   1d8c0:	68bb      	ldr	r3, [r7, #8]
   1d8c2:	1c5a      	adds	r2, r3, #1
   1d8c4:	60ba      	str	r2, [r7, #8]
   1d8c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1d8c8:	1612      	asrs	r2, r2, #24
   1d8ca:	b2d2      	uxtb	r2, r2
   1d8cc:	3230      	adds	r2, #48	; 0x30
   1d8ce:	b2d2      	uxtb	r2, r2
   1d8d0:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
   1d8d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1d8d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1d8d8:	633b      	str	r3, [r7, #48]	; 0x30
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
        iMax = (iMax > iPrecision) ? iPrecision : iMax;

        for (jx = 0; jx < iMax; jx++)
   1d8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1d8dc:	3301      	adds	r3, #1
   1d8de:	62bb      	str	r3, [r7, #40]	; 0x28
   1d8e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1d8e2:	697b      	ldr	r3, [r7, #20]
   1d8e4:	429a      	cmp	r2, r3
   1d8e6:	dbe5      	blt.n	1d8b4 <ftoa+0x168>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
   1d8e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1d8ea:	4613      	mov	r3, r2
   1d8ec:	009b      	lsls	r3, r3, #2
   1d8ee:	4413      	add	r3, r2
   1d8f0:	005b      	lsls	r3, r3, #1
   1d8f2:	161b      	asrs	r3, r3, #24
   1d8f4:	2b04      	cmp	r3, #4
   1d8f6:	dd1d      	ble.n	1d934 <ftoa+0x1e8>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
   1d8f8:	68bb      	ldr	r3, [r7, #8]
   1d8fa:	3b01      	subs	r3, #1
   1d8fc:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
   1d8fe:	e015      	b.n	1d92c <ftoa+0x1e0>
            {
                if ( *pcBuftmp == '.' )
   1d900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d902:	781b      	ldrb	r3, [r3, #0]
   1d904:	2b2e      	cmp	r3, #46	; 0x2e
   1d906:	d00e      	beq.n	1d926 <ftoa+0x1da>
                {
                }
                else if ( *pcBuftmp == '9' )
   1d908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d90a:	781b      	ldrb	r3, [r3, #0]
   1d90c:	2b39      	cmp	r3, #57	; 0x39
   1d90e:	d103      	bne.n	1d918 <ftoa+0x1cc>
                {
                    *pcBuftmp = '0';
   1d910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d912:	2230      	movs	r2, #48	; 0x30
   1d914:	701a      	strb	r2, [r3, #0]
   1d916:	e006      	b.n	1d926 <ftoa+0x1da>
                }
                else
                {
                    *pcBuftmp += 1;
   1d918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d91a:	781b      	ldrb	r3, [r3, #0]
   1d91c:	3301      	adds	r3, #1
   1d91e:	b2da      	uxtb	r2, r3
   1d920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d922:	701a      	strb	r2, [r3, #0]
                    break;
   1d924:	e006      	b.n	1d934 <ftoa+0x1e8>
                }
                pcBuftmp--;
   1d926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d928:	3b01      	subs	r3, #1
   1d92a:	62fb      	str	r3, [r7, #44]	; 0x2c
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
            while ( pcBuftmp >= pcBufInitial )
   1d92c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1d92e:	6a3b      	ldr	r3, [r7, #32]
   1d930:	429a      	cmp	r2, r3
   1d932:	d2e5      	bcs.n	1d900 <ftoa+0x1b4>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
   1d934:	68bb      	ldr	r3, [r7, #8]
   1d936:	2200      	movs	r2, #0
   1d938:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
   1d93a:	68ba      	ldr	r2, [r7, #8]
   1d93c:	6a3b      	ldr	r3, [r7, #32]
   1d93e:	1ad3      	subs	r3, r2, r3
} // ftoa()
   1d940:	4618      	mov	r0, r3
   1d942:	3738      	adds	r7, #56	; 0x38
   1d944:	46bd      	mov	sp, r7
   1d946:	bd80      	pop	{r7, pc}
   1d948:	00302e30 	.word	0x00302e30

0001d94c <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
   1d94c:	b580      	push	{r7, lr}
   1d94e:	b094      	sub	sp, #80	; 0x50
   1d950:	af00      	add	r7, sp, #0
   1d952:	60f8      	str	r0, [r7, #12]
   1d954:	60b9      	str	r1, [r7, #8]
   1d956:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
   1d958:	2300      	movs	r3, #0
   1d95a:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
   1d95c:	2300      	movs	r3, #0
   1d95e:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
   1d960:	e2e8      	b.n	1df34 <am_util_stdio_vsprintf+0x5e8>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
   1d962:	2306      	movs	r3, #6
   1d964:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
   1d966:	68bb      	ldr	r3, [r7, #8]
   1d968:	781b      	ldrb	r3, [r3, #0]
   1d96a:	2b25      	cmp	r3, #37	; 0x25
   1d96c:	d01f      	beq.n	1d9ae <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
   1d96e:	68fb      	ldr	r3, [r7, #12]
   1d970:	2b00      	cmp	r3, #0
   1d972:	d015      	beq.n	1d9a0 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
   1d974:	68bb      	ldr	r3, [r7, #8]
   1d976:	781b      	ldrb	r3, [r3, #0]
   1d978:	2b0a      	cmp	r3, #10
   1d97a:	d10b      	bne.n	1d994 <am_util_stdio_vsprintf+0x48>
   1d97c:	4bb1      	ldr	r3, [pc, #708]	; (1dc44 <am_util_stdio_vsprintf+0x2f8>)
   1d97e:	781b      	ldrb	r3, [r3, #0]
   1d980:	2b00      	cmp	r3, #0
   1d982:	d007      	beq.n	1d994 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
   1d984:	68fb      	ldr	r3, [r7, #12]
   1d986:	1c5a      	adds	r2, r3, #1
   1d988:	60fa      	str	r2, [r7, #12]
   1d98a:	220d      	movs	r2, #13
   1d98c:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
   1d98e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1d990:	3301      	adds	r3, #1
   1d992:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
   1d994:	68fb      	ldr	r3, [r7, #12]
   1d996:	1c5a      	adds	r2, r3, #1
   1d998:	60fa      	str	r2, [r7, #12]
   1d99a:	68ba      	ldr	r2, [r7, #8]
   1d99c:	7812      	ldrb	r2, [r2, #0]
   1d99e:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
   1d9a0:	68bb      	ldr	r3, [r7, #8]
   1d9a2:	3301      	adds	r3, #1
   1d9a4:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
   1d9a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1d9a8:	3301      	adds	r3, #1
   1d9aa:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
   1d9ac:	e2c2      	b.n	1df34 <am_util_stdio_vsprintf+0x5e8>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
   1d9ae:	68bb      	ldr	r3, [r7, #8]
   1d9b0:	3301      	adds	r3, #1
   1d9b2:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
   1d9b4:	2300      	movs	r3, #0
   1d9b6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
   1d9ba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
   1d9be:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
   1d9c2:	2320      	movs	r3, #32
   1d9c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
   1d9c8:	68bb      	ldr	r3, [r7, #8]
   1d9ca:	781b      	ldrb	r3, [r3, #0]
   1d9cc:	2b30      	cmp	r3, #48	; 0x30
   1d9ce:	d105      	bne.n	1d9dc <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
   1d9d0:	2330      	movs	r3, #48	; 0x30
   1d9d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
   1d9d6:	68bb      	ldr	r3, [r7, #8]
   1d9d8:	3301      	adds	r3, #1
   1d9da:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
   1d9dc:	f107 0310 	add.w	r3, r7, #16
   1d9e0:	68b8      	ldr	r0, [r7, #8]
   1d9e2:	4619      	mov	r1, r3
   1d9e4:	f7ff fd82 	bl	1d4ec <decstr_to_int>
   1d9e8:	4603      	mov	r3, r0
   1d9ea:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
   1d9ec:	693b      	ldr	r3, [r7, #16]
   1d9ee:	68ba      	ldr	r2, [r7, #8]
   1d9f0:	4413      	add	r3, r2
   1d9f2:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
   1d9f4:	68bb      	ldr	r3, [r7, #8]
   1d9f6:	781b      	ldrb	r3, [r3, #0]
   1d9f8:	2b73      	cmp	r3, #115	; 0x73
   1d9fa:	d005      	beq.n	1da08 <am_util_stdio_vsprintf+0xbc>
   1d9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1d9fe:	2b00      	cmp	r3, #0
   1da00:	da02      	bge.n	1da08 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
   1da02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1da04:	425b      	negs	r3, r3
   1da06:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
   1da08:	68bb      	ldr	r3, [r7, #8]
   1da0a:	781b      	ldrb	r3, [r3, #0]
   1da0c:	2b2e      	cmp	r3, #46	; 0x2e
   1da0e:	d10e      	bne.n	1da2e <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
   1da10:	68bb      	ldr	r3, [r7, #8]
   1da12:	3301      	adds	r3, #1
   1da14:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
   1da16:	f107 0310 	add.w	r3, r7, #16
   1da1a:	68b8      	ldr	r0, [r7, #8]
   1da1c:	4619      	mov	r1, r3
   1da1e:	f7ff fd65 	bl	1d4ec <decstr_to_int>
   1da22:	4603      	mov	r3, r0
   1da24:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
   1da26:	693b      	ldr	r3, [r7, #16]
   1da28:	68ba      	ldr	r2, [r7, #8]
   1da2a:	4413      	add	r3, r2
   1da2c:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
   1da2e:	68bb      	ldr	r3, [r7, #8]
   1da30:	781b      	ldrb	r3, [r3, #0]
   1da32:	2b6c      	cmp	r3, #108	; 0x6c
   1da34:	d10c      	bne.n	1da50 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
   1da36:	68bb      	ldr	r3, [r7, #8]
   1da38:	3301      	adds	r3, #1
   1da3a:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
   1da3c:	68bb      	ldr	r3, [r7, #8]
   1da3e:	781b      	ldrb	r3, [r3, #0]
   1da40:	2b6c      	cmp	r3, #108	; 0x6c
   1da42:	d105      	bne.n	1da50 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
   1da44:	68bb      	ldr	r3, [r7, #8]
   1da46:	3301      	adds	r3, #1
   1da48:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
   1da4a:	2301      	movs	r3, #1
   1da4c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
   1da50:	68bb      	ldr	r3, [r7, #8]
   1da52:	781b      	ldrb	r3, [r3, #0]
   1da54:	3b46      	subs	r3, #70	; 0x46
   1da56:	2b32      	cmp	r3, #50	; 0x32
   1da58:	f200 825c 	bhi.w	1df14 <am_util_stdio_vsprintf+0x5c8>
   1da5c:	a201      	add	r2, pc, #4	; (adr r2, 1da64 <am_util_stdio_vsprintf+0x118>)
   1da5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1da62:	bf00      	nop
   1da64:	0001de99 	.word	0x0001de99
   1da68:	0001df15 	.word	0x0001df15
   1da6c:	0001df15 	.word	0x0001df15
   1da70:	0001df15 	.word	0x0001df15
   1da74:	0001df15 	.word	0x0001df15
   1da78:	0001df15 	.word	0x0001df15
   1da7c:	0001df15 	.word	0x0001df15
   1da80:	0001df15 	.word	0x0001df15
   1da84:	0001df15 	.word	0x0001df15
   1da88:	0001df15 	.word	0x0001df15
   1da8c:	0001df15 	.word	0x0001df15
   1da90:	0001df15 	.word	0x0001df15
   1da94:	0001df15 	.word	0x0001df15
   1da98:	0001df15 	.word	0x0001df15
   1da9c:	0001df15 	.word	0x0001df15
   1daa0:	0001df15 	.word	0x0001df15
   1daa4:	0001df15 	.word	0x0001df15
   1daa8:	0001df15 	.word	0x0001df15
   1daac:	0001dc29 	.word	0x0001dc29
   1dab0:	0001df15 	.word	0x0001df15
   1dab4:	0001df15 	.word	0x0001df15
   1dab8:	0001df15 	.word	0x0001df15
   1dabc:	0001df15 	.word	0x0001df15
   1dac0:	0001df15 	.word	0x0001df15
   1dac4:	0001df15 	.word	0x0001df15
   1dac8:	0001df15 	.word	0x0001df15
   1dacc:	0001df15 	.word	0x0001df15
   1dad0:	0001df15 	.word	0x0001df15
   1dad4:	0001df15 	.word	0x0001df15
   1dad8:	0001db31 	.word	0x0001db31
   1dadc:	0001dd5d 	.word	0x0001dd5d
   1dae0:	0001df15 	.word	0x0001df15
   1dae4:	0001de99 	.word	0x0001de99
   1dae8:	0001df15 	.word	0x0001df15
   1daec:	0001df15 	.word	0x0001df15
   1daf0:	0001dd5d 	.word	0x0001dd5d
   1daf4:	0001df15 	.word	0x0001df15
   1daf8:	0001df15 	.word	0x0001df15
   1dafc:	0001df15 	.word	0x0001df15
   1db00:	0001df15 	.word	0x0001df15
   1db04:	0001df15 	.word	0x0001df15
   1db08:	0001df15 	.word	0x0001df15
   1db0c:	0001df15 	.word	0x0001df15
   1db10:	0001df15 	.word	0x0001df15
   1db14:	0001df15 	.word	0x0001df15
   1db18:	0001db57 	.word	0x0001db57
   1db1c:	0001df15 	.word	0x0001df15
   1db20:	0001dcc7 	.word	0x0001dcc7
   1db24:	0001df15 	.word	0x0001df15
   1db28:	0001df15 	.word	0x0001df15
   1db2c:	0001dc23 	.word	0x0001dc23
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
   1db30:	687b      	ldr	r3, [r7, #4]
   1db32:	1d1a      	adds	r2, r3, #4
   1db34:	607a      	str	r2, [r7, #4]
   1db36:	681b      	ldr	r3, [r3, #0]
   1db38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
   1db3c:	68fb      	ldr	r3, [r7, #12]
   1db3e:	2b00      	cmp	r3, #0
   1db40:	d005      	beq.n	1db4e <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
   1db42:	68fb      	ldr	r3, [r7, #12]
   1db44:	1c5a      	adds	r2, r3, #1
   1db46:	60fa      	str	r2, [r7, #12]
   1db48:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
   1db4c:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
   1db4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1db50:	3301      	adds	r3, #1
   1db52:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
   1db54:	e1eb      	b.n	1df2e <am_util_stdio_vsprintf+0x5e2>

            case 's':
                pcStr = va_arg(pArgs, char *);
   1db56:	687b      	ldr	r3, [r7, #4]
   1db58:	1d1a      	adds	r2, r3, #4
   1db5a:	607a      	str	r2, [r7, #4]
   1db5c:	681b      	ldr	r3, [r3, #0]
   1db5e:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
   1db60:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   1db62:	f7ff fdb1 	bl	1d6c8 <simple_strlen>
   1db66:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
   1db68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1db6a:	2b00      	cmp	r3, #0
   1db6c:	dd1e      	ble.n	1dbac <am_util_stdio_vsprintf+0x260>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
   1db6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1db70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1db72:	429a      	cmp	r2, r3
   1db74:	d91a      	bls.n	1dbac <am_util_stdio_vsprintf+0x260>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
   1db76:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1db78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1db7a:	1ad3      	subs	r3, r2, r3
   1db7c:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
   1db7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   1db82:	68f8      	ldr	r0, [r7, #12]
   1db84:	4619      	mov	r1, r3
   1db86:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1db88:	f7ff fdba 	bl	1d700 <padbuffer>
   1db8c:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
   1db8e:	68fb      	ldr	r3, [r7, #12]
   1db90:	2b00      	cmp	r3, #0
   1db92:	d001      	beq.n	1db98 <am_util_stdio_vsprintf+0x24c>
   1db94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1db96:	e000      	b.n	1db9a <am_util_stdio_vsprintf+0x24e>
   1db98:	2300      	movs	r3, #0
   1db9a:	68fa      	ldr	r2, [r7, #12]
   1db9c:	4413      	add	r3, r2
   1db9e:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
   1dba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1dba2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1dba4:	4413      	add	r3, r2
   1dba6:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
   1dba8:	2300      	movs	r3, #0
   1dbaa:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
   1dbac:	e00e      	b.n	1dbcc <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
   1dbae:	68fb      	ldr	r3, [r7, #12]
   1dbb0:	2b00      	cmp	r3, #0
   1dbb2:	d005      	beq.n	1dbc0 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
   1dbb4:	68fb      	ldr	r3, [r7, #12]
   1dbb6:	1c5a      	adds	r2, r3, #1
   1dbb8:	60fa      	str	r2, [r7, #12]
   1dbba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   1dbbc:	7812      	ldrb	r2, [r2, #0]
   1dbbe:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
   1dbc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1dbc2:	3301      	adds	r3, #1
   1dbc4:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
   1dbc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1dbc8:	3301      	adds	r3, #1
   1dbca:	63fb      	str	r3, [r7, #60]	; 0x3c
                        ui32CharCnt += iWidth;
                        iWidth = 0;
                    }
                }

                while (*pcStr != 0x0)
   1dbcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1dbce:	781b      	ldrb	r3, [r3, #0]
   1dbd0:	2b00      	cmp	r3, #0
   1dbd2:	d1ec      	bne.n	1dbae <am_util_stdio_vsprintf+0x262>

                    ++pcStr;
                    ++ui32CharCnt;
                }

                if ( iWidth )
   1dbd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1dbd6:	2b00      	cmp	r3, #0
   1dbd8:	d022      	beq.n	1dc20 <am_util_stdio_vsprintf+0x2d4>
                {
                    iWidth = -iWidth;
   1dbda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1dbdc:	425b      	negs	r3, r3
   1dbde:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
   1dbe0:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1dbe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1dbe4:	429a      	cmp	r2, r3
   1dbe6:	d91b      	bls.n	1dc20 <am_util_stdio_vsprintf+0x2d4>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
   1dbe8:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1dbea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1dbec:	1ad3      	subs	r3, r2, r3
   1dbee:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
   1dbf0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   1dbf4:	68f8      	ldr	r0, [r7, #12]
   1dbf6:	4619      	mov	r1, r3
   1dbf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1dbfa:	f7ff fd81 	bl	1d700 <padbuffer>
   1dbfe:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
   1dc00:	68fb      	ldr	r3, [r7, #12]
   1dc02:	2b00      	cmp	r3, #0
   1dc04:	d001      	beq.n	1dc0a <am_util_stdio_vsprintf+0x2be>
   1dc06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1dc08:	e000      	b.n	1dc0c <am_util_stdio_vsprintf+0x2c0>
   1dc0a:	2300      	movs	r3, #0
   1dc0c:	68fa      	ldr	r2, [r7, #12]
   1dc0e:	4413      	add	r3, r2
   1dc10:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
   1dc12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1dc14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1dc16:	4413      	add	r3, r2
   1dc18:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
   1dc1a:	2300      	movs	r3, #0
   1dc1c:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
   1dc1e:	e186      	b.n	1df2e <am_util_stdio_vsprintf+0x5e2>
   1dc20:	e185      	b.n	1df2e <am_util_stdio_vsprintf+0x5e2>

            case 'x':
                bLower = true;
   1dc22:	2301      	movs	r3, #1
   1dc24:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   1dc28:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
   1dc2c:	2b00      	cmp	r3, #0
   1dc2e:	d00b      	beq.n	1dc48 <am_util_stdio_vsprintf+0x2fc>
   1dc30:	687b      	ldr	r3, [r7, #4]
   1dc32:	3307      	adds	r3, #7
   1dc34:	f023 0307 	bic.w	r3, r3, #7
   1dc38:	f103 0208 	add.w	r2, r3, #8
   1dc3c:	607a      	str	r2, [r7, #4]
   1dc3e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1dc42:	e008      	b.n	1dc56 <am_util_stdio_vsprintf+0x30a>
   1dc44:	10004fb4 	.word	0x10004fb4
                                      va_arg(pArgs, uint32_t);
   1dc48:	687b      	ldr	r3, [r7, #4]
   1dc4a:	1d1a      	adds	r2, r3, #4
   1dc4c:	607a      	str	r2, [r7, #4]
   1dc4e:	681b      	ldr	r3, [r3, #0]
                break;

            case 'x':
                bLower = true;
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   1dc50:	461a      	mov	r2, r3
   1dc52:	f04f 0300 	mov.w	r3, #0
   1dc56:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
                                      va_arg(pArgs, uint32_t);

                if ( iWidth )
   1dc5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1dc5c:	2b00      	cmp	r3, #0
   1dc5e:	d01e      	beq.n	1dc9e <am_util_stdio_vsprintf+0x352>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
   1dc60:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
   1dc64:	f7ff fc1c 	bl	1d4a0 <ndigits_in_hex>
   1dc68:	4602      	mov	r2, r0
   1dc6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1dc6c:	1a9b      	subs	r3, r3, r2
   1dc6e:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
   1dc70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   1dc74:	68f8      	ldr	r0, [r7, #12]
   1dc76:	4619      	mov	r1, r3
   1dc78:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1dc7a:	f7ff fd41 	bl	1d700 <padbuffer>
   1dc7e:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
   1dc80:	68fb      	ldr	r3, [r7, #12]
   1dc82:	2b00      	cmp	r3, #0
   1dc84:	d001      	beq.n	1dc8a <am_util_stdio_vsprintf+0x33e>
   1dc86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1dc88:	e000      	b.n	1dc8c <am_util_stdio_vsprintf+0x340>
   1dc8a:	2300      	movs	r3, #0
   1dc8c:	68fa      	ldr	r2, [r7, #12]
   1dc8e:	4413      	add	r3, r2
   1dc90:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
   1dc92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1dc94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1dc96:	4413      	add	r3, r2
   1dc98:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
   1dc9a:	2300      	movs	r3, #0
   1dc9c:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
   1dc9e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   1dca2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
   1dca6:	68fa      	ldr	r2, [r7, #12]
   1dca8:	f7ff fcae 	bl	1d608 <uint64_to_hexstr>
   1dcac:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
   1dcae:	68fb      	ldr	r3, [r7, #12]
   1dcb0:	2b00      	cmp	r3, #0
   1dcb2:	d003      	beq.n	1dcbc <am_util_stdio_vsprintf+0x370>
                {
                    pcBuf += iVal;
   1dcb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1dcb6:	68fa      	ldr	r2, [r7, #12]
   1dcb8:	4413      	add	r3, r2
   1dcba:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
   1dcbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1dcbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1dcc0:	4413      	add	r3, r2
   1dcc2:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
   1dcc4:	e133      	b.n	1df2e <am_util_stdio_vsprintf+0x5e2>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   1dcc6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
   1dcca:	2b00      	cmp	r3, #0
   1dccc:	d009      	beq.n	1dce2 <am_util_stdio_vsprintf+0x396>
   1dcce:	687b      	ldr	r3, [r7, #4]
   1dcd0:	3307      	adds	r3, #7
   1dcd2:	f023 0307 	bic.w	r3, r3, #7
   1dcd6:	f103 0208 	add.w	r2, r3, #8
   1dcda:	607a      	str	r2, [r7, #4]
   1dcdc:	e9d3 2300 	ldrd	r2, r3, [r3]
   1dce0:	e006      	b.n	1dcf0 <am_util_stdio_vsprintf+0x3a4>
                                      va_arg(pArgs, uint32_t);
   1dce2:	687b      	ldr	r3, [r7, #4]
   1dce4:	1d1a      	adds	r2, r3, #4
   1dce6:	607a      	str	r2, [r7, #4]
   1dce8:	681b      	ldr	r3, [r3, #0]

                ui32CharCnt += iVal;
                break;

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   1dcea:	461a      	mov	r2, r3
   1dcec:	f04f 0300 	mov.w	r3, #0
   1dcf0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
                                      va_arg(pArgs, uint32_t);

                if ( iWidth )
   1dcf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1dcf6:	2b00      	cmp	r3, #0
   1dcf8:	d01e      	beq.n	1dd38 <am_util_stdio_vsprintf+0x3ec>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
   1dcfa:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
   1dcfe:	f7ff fb8f 	bl	1d420 <ndigits_in_u64>
   1dd02:	4602      	mov	r2, r0
   1dd04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1dd06:	1a9b      	subs	r3, r3, r2
   1dd08:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
   1dd0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   1dd0e:	68f8      	ldr	r0, [r7, #12]
   1dd10:	4619      	mov	r1, r3
   1dd12:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1dd14:	f7ff fcf4 	bl	1d700 <padbuffer>
   1dd18:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
   1dd1a:	68fb      	ldr	r3, [r7, #12]
   1dd1c:	2b00      	cmp	r3, #0
   1dd1e:	d001      	beq.n	1dd24 <am_util_stdio_vsprintf+0x3d8>
   1dd20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1dd22:	e000      	b.n	1dd26 <am_util_stdio_vsprintf+0x3da>
   1dd24:	2300      	movs	r3, #0
   1dd26:	68fa      	ldr	r2, [r7, #12]
   1dd28:	4413      	add	r3, r2
   1dd2a:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
   1dd2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1dd2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1dd30:	4413      	add	r3, r2
   1dd32:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
   1dd34:	2300      	movs	r3, #0
   1dd36:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
   1dd38:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
   1dd3c:	68fa      	ldr	r2, [r7, #12]
   1dd3e:	f7ff fc1b 	bl	1d578 <uint64_to_str>
   1dd42:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
   1dd44:	68fb      	ldr	r3, [r7, #12]
   1dd46:	2b00      	cmp	r3, #0
   1dd48:	d003      	beq.n	1dd52 <am_util_stdio_vsprintf+0x406>
                {
                    pcBuf += iVal;
   1dd4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1dd4c:	68fa      	ldr	r2, [r7, #12]
   1dd4e:	4413      	add	r3, r2
   1dd50:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
   1dd52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1dd54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1dd56:	4413      	add	r3, r2
   1dd58:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
   1dd5a:	e0e8      	b.n	1df2e <am_util_stdio_vsprintf+0x5e2>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
   1dd5c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
   1dd60:	2b00      	cmp	r3, #0
   1dd62:	d009      	beq.n	1dd78 <am_util_stdio_vsprintf+0x42c>
   1dd64:	687b      	ldr	r3, [r7, #4]
   1dd66:	3307      	adds	r3, #7
   1dd68:	f023 0307 	bic.w	r3, r3, #7
   1dd6c:	f103 0208 	add.w	r2, r3, #8
   1dd70:	607a      	str	r2, [r7, #4]
   1dd72:	e9d3 2300 	ldrd	r2, r3, [r3]
   1dd76:	e006      	b.n	1dd86 <am_util_stdio_vsprintf+0x43a>
                                     va_arg(pArgs, int32_t);
   1dd78:	687b      	ldr	r3, [r7, #4]
   1dd7a:	1d1a      	adds	r2, r3, #4
   1dd7c:	607a      	str	r2, [r7, #4]
   1dd7e:	681b      	ldr	r3, [r3, #0]
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
   1dd80:	461a      	mov	r2, r3
   1dd82:	ea4f 73e2 	mov.w	r3, r2, asr #31
   1dd86:	e9c7 2306 	strd	r2, r3, [r7, #24]
                                     va_arg(pArgs, int32_t);

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
   1dd8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   1dd8e:	2a00      	cmp	r2, #0
   1dd90:	f173 0300 	sbcs.w	r3, r3, #0
   1dd94:	da0a      	bge.n	1ddac <am_util_stdio_vsprintf+0x460>
                {
                    ui64Val = -i64Val;          // Get absolute value
   1dd96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   1dd9a:	4252      	negs	r2, r2
   1dd9c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1dda0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
                    bNeg = true;
   1dda4:	2301      	movs	r3, #1
   1dda6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
   1ddaa:	e006      	b.n	1ddba <am_util_stdio_vsprintf+0x46e>
                }
                else
                {
                    ui64Val = i64Val;
   1ddac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   1ddb0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
                    bNeg = false;
   1ddb4:	2300      	movs	r3, #0
   1ddb6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
   1ddba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1ddbc:	2b00      	cmp	r3, #0
   1ddbe:	d04a      	beq.n	1de56 <am_util_stdio_vsprintf+0x50a>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
   1ddc0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
   1ddc4:	4610      	mov	r0, r2
   1ddc6:	4619      	mov	r1, r3
   1ddc8:	f7ff fb4c 	bl	1d464 <ndigits_in_i64>
   1ddcc:	4602      	mov	r2, r0
   1ddce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1ddd0:	1a9b      	subs	r3, r3, r2
   1ddd2:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
   1ddd4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   1ddd8:	2b00      	cmp	r3, #0
   1ddda:	d011      	beq.n	1de00 <am_util_stdio_vsprintf+0x4b4>
                    {
                        --iWidth;
   1dddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1ddde:	3b01      	subs	r3, #1
   1dde0:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
   1dde2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   1dde6:	2b30      	cmp	r3, #48	; 0x30
   1dde8:	d10a      	bne.n	1de00 <am_util_stdio_vsprintf+0x4b4>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
   1ddea:	68fb      	ldr	r3, [r7, #12]
   1ddec:	2b00      	cmp	r3, #0
   1ddee:	d004      	beq.n	1ddfa <am_util_stdio_vsprintf+0x4ae>
                            {
                                *pcBuf++ = '-';
   1ddf0:	68fb      	ldr	r3, [r7, #12]
   1ddf2:	1c5a      	adds	r2, r3, #1
   1ddf4:	60fa      	str	r2, [r7, #12]
   1ddf6:	222d      	movs	r2, #45	; 0x2d
   1ddf8:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
   1ddfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1ddfc:	3301      	adds	r3, #1
   1ddfe:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
   1de00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   1de04:	68f8      	ldr	r0, [r7, #12]
   1de06:	4619      	mov	r1, r3
   1de08:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1de0a:	f7ff fc79 	bl	1d700 <padbuffer>
   1de0e:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
   1de10:	68fb      	ldr	r3, [r7, #12]
   1de12:	2b00      	cmp	r3, #0
   1de14:	d001      	beq.n	1de1a <am_util_stdio_vsprintf+0x4ce>
   1de16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1de18:	e000      	b.n	1de1c <am_util_stdio_vsprintf+0x4d0>
   1de1a:	2300      	movs	r3, #0
   1de1c:	68fa      	ldr	r2, [r7, #12]
   1de1e:	4413      	add	r3, r2
   1de20:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
   1de22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1de24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1de26:	4413      	add	r3, r2
   1de28:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
   1de2a:	2300      	movs	r3, #0
   1de2c:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
   1de2e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   1de32:	2b00      	cmp	r3, #0
   1de34:	d01e      	beq.n	1de74 <am_util_stdio_vsprintf+0x528>
   1de36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   1de3a:	2b20      	cmp	r3, #32
   1de3c:	d11a      	bne.n	1de74 <am_util_stdio_vsprintf+0x528>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
   1de3e:	68fb      	ldr	r3, [r7, #12]
   1de40:	2b00      	cmp	r3, #0
   1de42:	d004      	beq.n	1de4e <am_util_stdio_vsprintf+0x502>
                        {
                            *pcBuf++ = '-';
   1de44:	68fb      	ldr	r3, [r7, #12]
   1de46:	1c5a      	adds	r2, r3, #1
   1de48:	60fa      	str	r2, [r7, #12]
   1de4a:	222d      	movs	r2, #45	; 0x2d
   1de4c:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
   1de4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1de50:	3301      	adds	r3, #1
   1de52:	63fb      	str	r3, [r7, #60]	; 0x3c
   1de54:	e00e      	b.n	1de74 <am_util_stdio_vsprintf+0x528>
                    }
                }
                else
                {
                    if ( bNeg )
   1de56:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   1de5a:	2b00      	cmp	r3, #0
   1de5c:	d00a      	beq.n	1de74 <am_util_stdio_vsprintf+0x528>
                    {
                        if ( pcBuf )
   1de5e:	68fb      	ldr	r3, [r7, #12]
   1de60:	2b00      	cmp	r3, #0
   1de62:	d004      	beq.n	1de6e <am_util_stdio_vsprintf+0x522>
                        {
                            *pcBuf++ = '-';
   1de64:	68fb      	ldr	r3, [r7, #12]
   1de66:	1c5a      	adds	r2, r3, #1
   1de68:	60fa      	str	r2, [r7, #12]
   1de6a:	222d      	movs	r2, #45	; 0x2d
   1de6c:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
   1de6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1de70:	3301      	adds	r3, #1
   1de72:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
   1de74:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
   1de78:	68fa      	ldr	r2, [r7, #12]
   1de7a:	f7ff fb7d 	bl	1d578 <uint64_to_str>
   1de7e:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
   1de80:	68fb      	ldr	r3, [r7, #12]
   1de82:	2b00      	cmp	r3, #0
   1de84:	d003      	beq.n	1de8e <am_util_stdio_vsprintf+0x542>
                {
                    pcBuf += iVal;
   1de86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1de88:	68fa      	ldr	r2, [r7, #12]
   1de8a:	4413      	add	r3, r2
   1de8c:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
   1de8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1de90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1de92:	4413      	add	r3, r2
   1de94:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
   1de96:	e04a      	b.n	1df2e <am_util_stdio_vsprintf+0x5e2>


            case 'f':
            case 'F':
                if ( pcBuf )
   1de98:	68fb      	ldr	r3, [r7, #12]
   1de9a:	2b00      	cmp	r3, #0
   1de9c:	d039      	beq.n	1df12 <am_util_stdio_vsprintf+0x5c6>
                {
                    float fValue = va_arg(pArgs, double);
   1de9e:	687b      	ldr	r3, [r7, #4]
   1dea0:	3307      	adds	r3, #7
   1dea2:	f023 0307 	bic.w	r3, r3, #7
   1dea6:	f103 0208 	add.w	r2, r3, #8
   1deaa:	607a      	str	r2, [r7, #4]
   1deac:	e9d3 2300 	ldrd	r2, r3, [r3]
   1deb0:	4610      	mov	r0, r2
   1deb2:	4619      	mov	r1, r3
   1deb4:	f7ee f9be 	bl	c234 <__aeabi_d2f>
   1deb8:	4603      	mov	r3, r0
   1deba:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
   1debc:	68fb      	ldr	r3, [r7, #12]
   1debe:	2214      	movs	r2, #20
   1dec0:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
   1dec2:	ed97 0a05 	vldr	s0, [r7, #20]
   1dec6:	68f8      	ldr	r0, [r7, #12]
   1dec8:	6b39      	ldr	r1, [r7, #48]	; 0x30
   1deca:	f7ff fc3f 	bl	1d74c <ftoa>
   1dece:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
   1ded0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1ded2:	2b00      	cmp	r3, #0
   1ded4:	da14      	bge.n	1df00 <am_util_stdio_vsprintf+0x5b4>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
   1ded6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1ded8:	f1b3 3fff 	cmp.w	r3, #4294967295
   1dedc:	d102      	bne.n	1dee4 <am_util_stdio_vsprintf+0x598>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
   1dede:	4b1d      	ldr	r3, [pc, #116]	; (1df54 <am_util_stdio_vsprintf+0x608>)
   1dee0:	62bb      	str	r3, [r7, #40]	; 0x28
   1dee2:	e008      	b.n	1def6 <am_util_stdio_vsprintf+0x5aa>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
   1dee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1dee6:	f113 0f02 	cmn.w	r3, #2
   1deea:	d102      	bne.n	1def2 <am_util_stdio_vsprintf+0x5a6>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
   1deec:	4b1a      	ldr	r3, [pc, #104]	; (1df58 <am_util_stdio_vsprintf+0x60c>)
   1deee:	62bb      	str	r3, [r7, #40]	; 0x28
   1def0:	e001      	b.n	1def6 <am_util_stdio_vsprintf+0x5aa>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
   1def2:	4b1a      	ldr	r3, [pc, #104]	; (1df5c <am_util_stdio_vsprintf+0x610>)
   1def4:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
   1def6:	68fb      	ldr	r3, [r7, #12]
   1def8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1defa:	601a      	str	r2, [r3, #0]
                        iVal = 3;
   1defc:	2303      	movs	r3, #3
   1defe:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
   1df00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1df02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1df04:	4413      	add	r3, r2
   1df06:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
   1df08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1df0a:	68fa      	ldr	r2, [r7, #12]
   1df0c:	4413      	add	r3, r2
   1df0e:	60fb      	str	r3, [r7, #12]
                }
                break;
   1df10:	e00d      	b.n	1df2e <am_util_stdio_vsprintf+0x5e2>
   1df12:	e00c      	b.n	1df2e <am_util_stdio_vsprintf+0x5e2>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
   1df14:	68fb      	ldr	r3, [r7, #12]
   1df16:	2b00      	cmp	r3, #0
   1df18:	d005      	beq.n	1df26 <am_util_stdio_vsprintf+0x5da>
                {
                    *pcBuf++ = *pcFmt;
   1df1a:	68fb      	ldr	r3, [r7, #12]
   1df1c:	1c5a      	adds	r2, r3, #1
   1df1e:	60fa      	str	r2, [r7, #12]
   1df20:	68ba      	ldr	r2, [r7, #8]
   1df22:	7812      	ldrb	r2, [r2, #0]
   1df24:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
   1df26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1df28:	3301      	adds	r3, #1
   1df2a:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
   1df2c:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
   1df2e:	68bb      	ldr	r3, [r7, #8]
   1df30:	3301      	adds	r3, #1
   1df32:	60bb      	str	r3, [r7, #8]
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
   1df34:	68bb      	ldr	r3, [r7, #8]
   1df36:	781b      	ldrb	r3, [r3, #0]
   1df38:	2b00      	cmp	r3, #0
   1df3a:	f47f ad12 	bne.w	1d962 <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
   1df3e:	68fb      	ldr	r3, [r7, #12]
   1df40:	2b00      	cmp	r3, #0
   1df42:	d002      	beq.n	1df4a <am_util_stdio_vsprintf+0x5fe>
    {
        *pcBuf = 0x0;
   1df44:	68fb      	ldr	r3, [r7, #12]
   1df46:	2200      	movs	r2, #0
   1df48:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
   1df4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   1df4c:	4618      	mov	r0, r3
   1df4e:	3750      	adds	r7, #80	; 0x50
   1df50:	46bd      	mov	sp, r7
   1df52:	bd80      	pop	{r7, pc}
   1df54:	00302e30 	.word	0x00302e30
   1df58:	00232e23 	.word	0x00232e23
   1df5c:	003f2e3f 	.word	0x003f2e3f

0001df60 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
   1df60:	b40f      	push	{r0, r1, r2, r3}
   1df62:	b580      	push	{r7, lr}
   1df64:	b082      	sub	sp, #8
   1df66:	af00      	add	r7, sp, #0
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
   1df68:	4b0d      	ldr	r3, [pc, #52]	; (1dfa0 <am_util_stdio_printf+0x40>)
   1df6a:	681b      	ldr	r3, [r3, #0]
   1df6c:	2b00      	cmp	r3, #0
   1df6e:	d101      	bne.n	1df74 <am_util_stdio_printf+0x14>
    {
        return 0;
   1df70:	2300      	movs	r3, #0
   1df72:	e00d      	b.n	1df90 <am_util_stdio_printf+0x30>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
   1df74:	f107 0314 	add.w	r3, r7, #20
   1df78:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
   1df7a:	480a      	ldr	r0, [pc, #40]	; (1dfa4 <am_util_stdio_printf+0x44>)
   1df7c:	6939      	ldr	r1, [r7, #16]
   1df7e:	683a      	ldr	r2, [r7, #0]
   1df80:	f7ff fce4 	bl	1d94c <am_util_stdio_vsprintf>
   1df84:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
   1df86:	4b06      	ldr	r3, [pc, #24]	; (1dfa0 <am_util_stdio_printf+0x40>)
   1df88:	681b      	ldr	r3, [r3, #0]
   1df8a:	4806      	ldr	r0, [pc, #24]	; (1dfa4 <am_util_stdio_printf+0x44>)
   1df8c:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
   1df8e:	687b      	ldr	r3, [r7, #4]
}
   1df90:	4618      	mov	r0, r3
   1df92:	3708      	adds	r7, #8
   1df94:	46bd      	mov	sp, r7
   1df96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
   1df9a:	b004      	add	sp, #16
   1df9c:	4770      	bx	lr
   1df9e:	bf00      	nop
   1dfa0:	1000a3a8 	.word	0x1000a3a8
   1dfa4:	10004eb4 	.word	0x10004eb4

0001dfa8 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
   1dfa8:	b580      	push	{r7, lr}
   1dfaa:	b082      	sub	sp, #8
   1dfac:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
   1dfae:	2018      	movs	r0, #24
   1dfb0:	f002 f858 	bl	20064 <pvPortMalloc>
   1dfb4:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
   1dfb6:	687b      	ldr	r3, [r7, #4]
   1dfb8:	2b00      	cmp	r3, #0
   1dfba:	d007      	beq.n	1dfcc <xEventGroupCreate+0x24>
		{
			pxEventBits->uxEventBits = 0;
   1dfbc:	687b      	ldr	r3, [r7, #4]
   1dfbe:	2200      	movs	r2, #0
   1dfc0:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
   1dfc2:	687b      	ldr	r3, [r7, #4]
   1dfc4:	3304      	adds	r3, #4
   1dfc6:	4618      	mov	r0, r3
   1dfc8:	f000 f952 	bl	1e270 <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
   1dfcc:	687b      	ldr	r3, [r7, #4]
	}
   1dfce:	4618      	mov	r0, r3
   1dfd0:	3708      	adds	r7, #8
   1dfd2:	46bd      	mov	sp, r7
   1dfd4:	bd80      	pop	{r7, pc}
   1dfd6:	bf00      	nop

0001dfd8 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
   1dfd8:	b580      	push	{r7, lr}
   1dfda:	b08c      	sub	sp, #48	; 0x30
   1dfdc:	af00      	add	r7, sp, #0
   1dfde:	60f8      	str	r0, [r7, #12]
   1dfe0:	60b9      	str	r1, [r7, #8]
   1dfe2:	607a      	str	r2, [r7, #4]
   1dfe4:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
   1dfe6:	68fb      	ldr	r3, [r7, #12]
   1dfe8:	627b      	str	r3, [r7, #36]	; 0x24
EventBits_t uxReturn, uxControlBits = 0;
   1dfea:	2300      	movs	r3, #0
   1dfec:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
   1dfee:	2300      	movs	r3, #0
   1dff0:	623b      	str	r3, [r7, #32]

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
   1dff2:	68fb      	ldr	r3, [r7, #12]
   1dff4:	2b00      	cmp	r3, #0
   1dff6:	d100      	bne.n	1dffa <xEventGroupWaitBits+0x22>
   1dff8:	e7fe      	b.n	1dff8 <xEventGroupWaitBits+0x20>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
   1dffa:	68bb      	ldr	r3, [r7, #8]
   1dffc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
   1e000:	2b00      	cmp	r3, #0
   1e002:	d000      	beq.n	1e006 <xEventGroupWaitBits+0x2e>
   1e004:	e7fe      	b.n	1e004 <xEventGroupWaitBits+0x2c>
	configASSERT( uxBitsToWaitFor != 0 );
   1e006:	68bb      	ldr	r3, [r7, #8]
   1e008:	2b00      	cmp	r3, #0
   1e00a:	d100      	bne.n	1e00e <xEventGroupWaitBits+0x36>
   1e00c:	e7fe      	b.n	1e00c <xEventGroupWaitBits+0x34>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1e00e:	f001 fc91 	bl	1f934 <xTaskGetSchedulerState>
   1e012:	4603      	mov	r3, r0
   1e014:	2b00      	cmp	r3, #0
   1e016:	d102      	bne.n	1e01e <xEventGroupWaitBits+0x46>
   1e018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1e01a:	2b00      	cmp	r3, #0
   1e01c:	d101      	bne.n	1e022 <xEventGroupWaitBits+0x4a>
   1e01e:	2301      	movs	r3, #1
   1e020:	e000      	b.n	1e024 <xEventGroupWaitBits+0x4c>
   1e022:	2300      	movs	r3, #0
   1e024:	2b00      	cmp	r3, #0
   1e026:	d100      	bne.n	1e02a <xEventGroupWaitBits+0x52>
   1e028:	e7fe      	b.n	1e028 <xEventGroupWaitBits+0x50>
	}
	#endif

	vTaskSuspendAll();
   1e02a:	f001 f813 	bl	1f054 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
   1e02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e030:	681b      	ldr	r3, [r3, #0]
   1e032:	61fb      	str	r3, [r7, #28]

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
   1e034:	69f8      	ldr	r0, [r7, #28]
   1e036:	68b9      	ldr	r1, [r7, #8]
   1e038:	683a      	ldr	r2, [r7, #0]
   1e03a:	f000 f8f7 	bl	1e22c <prvTestWaitCondition>
   1e03e:	61b8      	str	r0, [r7, #24]

		if( xWaitConditionMet != pdFALSE )
   1e040:	69bb      	ldr	r3, [r7, #24]
   1e042:	2b00      	cmp	r3, #0
   1e044:	d00e      	beq.n	1e064 <xEventGroupWaitBits+0x8c>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
   1e046:	69fb      	ldr	r3, [r7, #28]
   1e048:	62fb      	str	r3, [r7, #44]	; 0x2c
			xTicksToWait = ( TickType_t ) 0;
   1e04a:	2300      	movs	r3, #0
   1e04c:	63bb      	str	r3, [r7, #56]	; 0x38

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
   1e04e:	687b      	ldr	r3, [r7, #4]
   1e050:	2b00      	cmp	r3, #0
   1e052:	d027      	beq.n	1e0a4 <xEventGroupWaitBits+0xcc>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
   1e054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e056:	681a      	ldr	r2, [r3, #0]
   1e058:	68bb      	ldr	r3, [r7, #8]
   1e05a:	43db      	mvns	r3, r3
   1e05c:	401a      	ands	r2, r3
   1e05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e060:	601a      	str	r2, [r3, #0]
   1e062:	e01f      	b.n	1e0a4 <xEventGroupWaitBits+0xcc>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
   1e064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1e066:	2b00      	cmp	r3, #0
   1e068:	d102      	bne.n	1e070 <xEventGroupWaitBits+0x98>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
   1e06a:	69fb      	ldr	r3, [r7, #28]
   1e06c:	62fb      	str	r3, [r7, #44]	; 0x2c
   1e06e:	e019      	b.n	1e0a4 <xEventGroupWaitBits+0xcc>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
   1e070:	687b      	ldr	r3, [r7, #4]
   1e072:	2b00      	cmp	r3, #0
   1e074:	d003      	beq.n	1e07e <xEventGroupWaitBits+0xa6>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
   1e076:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e078:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1e07c:	62bb      	str	r3, [r7, #40]	; 0x28
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
   1e07e:	683b      	ldr	r3, [r7, #0]
   1e080:	2b00      	cmp	r3, #0
   1e082:	d003      	beq.n	1e08c <xEventGroupWaitBits+0xb4>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
   1e084:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e086:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   1e08a:	62bb      	str	r3, [r7, #40]	; 0x28
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
   1e08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e08e:	1d19      	adds	r1, r3, #4
   1e090:	68ba      	ldr	r2, [r7, #8]
   1e092:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e094:	4313      	orrs	r3, r2
   1e096:	4608      	mov	r0, r1
   1e098:	4619      	mov	r1, r3
   1e09a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1e09c:	f001 fa18 	bl	1f4d0 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
   1e0a0:	2300      	movs	r3, #0
   1e0a2:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
   1e0a4:	f001 f81c 	bl	1f0e0 <xTaskResumeAll>
   1e0a8:	6178      	str	r0, [r7, #20]

	if( xTicksToWait != ( TickType_t ) 0 )
   1e0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1e0ac:	2b00      	cmp	r3, #0
   1e0ae:	d031      	beq.n	1e114 <xEventGroupWaitBits+0x13c>
	{
		if( xAlreadyYielded == pdFALSE )
   1e0b0:	697b      	ldr	r3, [r7, #20]
   1e0b2:	2b00      	cmp	r3, #0
   1e0b4:	d107      	bne.n	1e0c6 <xEventGroupWaitBits+0xee>
		{
			portYIELD_WITHIN_API();
   1e0b6:	4b1a      	ldr	r3, [pc, #104]	; (1e120 <xEventGroupWaitBits+0x148>)
   1e0b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1e0bc:	601a      	str	r2, [r3, #0]
   1e0be:	f3bf 8f4f 	dsb	sy
   1e0c2:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
   1e0c6:	f001 fc53 	bl	1f970 <uxTaskResetEventItemValue>
   1e0ca:	62f8      	str	r0, [r7, #44]	; 0x2c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
   1e0cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e0ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
   1e0d2:	2b00      	cmp	r3, #0
   1e0d4:	d11a      	bne.n	1e10c <xEventGroupWaitBits+0x134>
		{
			taskENTER_CRITICAL();
   1e0d6:	f7f6 f9b3 	bl	14440 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
   1e0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e0dc:	681b      	ldr	r3, [r3, #0]
   1e0de:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
   1e0e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1e0e2:	68b9      	ldr	r1, [r7, #8]
   1e0e4:	683a      	ldr	r2, [r7, #0]
   1e0e6:	f000 f8a1 	bl	1e22c <prvTestWaitCondition>
   1e0ea:	4603      	mov	r3, r0
   1e0ec:	2b00      	cmp	r3, #0
   1e0ee:	d009      	beq.n	1e104 <xEventGroupWaitBits+0x12c>
				{
					if( xClearOnExit != pdFALSE )
   1e0f0:	687b      	ldr	r3, [r7, #4]
   1e0f2:	2b00      	cmp	r3, #0
   1e0f4:	d006      	beq.n	1e104 <xEventGroupWaitBits+0x12c>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
   1e0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e0f8:	681a      	ldr	r2, [r3, #0]
   1e0fa:	68bb      	ldr	r3, [r7, #8]
   1e0fc:	43db      	mvns	r3, r3
   1e0fe:	401a      	ands	r2, r3
   1e100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e102:	601a      	str	r2, [r3, #0]
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
   1e104:	f7f6 f9c0 	bl	14488 <vPortExitCritical>

			/* Prevent compiler warnings when trace macros are not used. */
			xTimeoutOccurred = pdFALSE;
   1e108:	2300      	movs	r3, #0
   1e10a:	623b      	str	r3, [r7, #32]
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
   1e10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e10e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1e112:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	return uxReturn;
   1e114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
   1e116:	4618      	mov	r0, r3
   1e118:	3730      	adds	r7, #48	; 0x30
   1e11a:	46bd      	mov	sp, r7
   1e11c:	bd80      	pop	{r7, pc}
   1e11e:	bf00      	nop
   1e120:	e000ed04 	.word	0xe000ed04

0001e124 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
   1e124:	b580      	push	{r7, lr}
   1e126:	b08c      	sub	sp, #48	; 0x30
   1e128:	af00      	add	r7, sp, #0
   1e12a:	6078      	str	r0, [r7, #4]
   1e12c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
   1e12e:	2300      	movs	r3, #0
   1e130:	62bb      	str	r3, [r7, #40]	; 0x28
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
   1e132:	687b      	ldr	r3, [r7, #4]
   1e134:	623b      	str	r3, [r7, #32]
BaseType_t xMatchFound = pdFALSE;
   1e136:	2300      	movs	r3, #0
   1e138:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
   1e13a:	687b      	ldr	r3, [r7, #4]
   1e13c:	2b00      	cmp	r3, #0
   1e13e:	d100      	bne.n	1e142 <xEventGroupSetBits+0x1e>
   1e140:	e7fe      	b.n	1e140 <xEventGroupSetBits+0x1c>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
   1e142:	683b      	ldr	r3, [r7, #0]
   1e144:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
   1e148:	2b00      	cmp	r3, #0
   1e14a:	d000      	beq.n	1e14e <xEventGroupSetBits+0x2a>
   1e14c:	e7fe      	b.n	1e14c <xEventGroupSetBits+0x28>

	pxList = &( pxEventBits->xTasksWaitingForBits );
   1e14e:	6a3b      	ldr	r3, [r7, #32]
   1e150:	3304      	adds	r3, #4
   1e152:	61fb      	str	r3, [r7, #28]
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1e154:	69fb      	ldr	r3, [r7, #28]
   1e156:	3308      	adds	r3, #8
   1e158:	61bb      	str	r3, [r7, #24]
	vTaskSuspendAll();
   1e15a:	f000 ff7b 	bl	1f054 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
   1e15e:	69fb      	ldr	r3, [r7, #28]
   1e160:	68db      	ldr	r3, [r3, #12]
   1e162:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
   1e164:	6a3b      	ldr	r3, [r7, #32]
   1e166:	681a      	ldr	r2, [r3, #0]
   1e168:	683b      	ldr	r3, [r7, #0]
   1e16a:	431a      	orrs	r2, r3
   1e16c:	6a3b      	ldr	r3, [r7, #32]
   1e16e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
   1e170:	e03c      	b.n	1e1ec <xEventGroupSetBits+0xc8>
		{
			pxNext = listGET_NEXT( pxListItem );
   1e172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e174:	685b      	ldr	r3, [r3, #4]
   1e176:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
   1e178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e17a:	681b      	ldr	r3, [r3, #0]
   1e17c:	613b      	str	r3, [r7, #16]
			xMatchFound = pdFALSE;
   1e17e:	2300      	movs	r3, #0
   1e180:	627b      	str	r3, [r7, #36]	; 0x24

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
   1e182:	693b      	ldr	r3, [r7, #16]
   1e184:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
   1e188:	60fb      	str	r3, [r7, #12]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
   1e18a:	693b      	ldr	r3, [r7, #16]
   1e18c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1e190:	613b      	str	r3, [r7, #16]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
   1e192:	68fb      	ldr	r3, [r7, #12]
   1e194:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
   1e198:	2b00      	cmp	r3, #0
   1e19a:	d108      	bne.n	1e1ae <xEventGroupSetBits+0x8a>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
   1e19c:	6a3b      	ldr	r3, [r7, #32]
   1e19e:	681a      	ldr	r2, [r3, #0]
   1e1a0:	693b      	ldr	r3, [r7, #16]
   1e1a2:	4013      	ands	r3, r2
   1e1a4:	2b00      	cmp	r3, #0
   1e1a6:	d00b      	beq.n	1e1c0 <xEventGroupSetBits+0x9c>
				{
					xMatchFound = pdTRUE;
   1e1a8:	2301      	movs	r3, #1
   1e1aa:	627b      	str	r3, [r7, #36]	; 0x24
   1e1ac:	e008      	b.n	1e1c0 <xEventGroupSetBits+0x9c>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
   1e1ae:	6a3b      	ldr	r3, [r7, #32]
   1e1b0:	681a      	ldr	r2, [r3, #0]
   1e1b2:	693b      	ldr	r3, [r7, #16]
   1e1b4:	401a      	ands	r2, r3
   1e1b6:	693b      	ldr	r3, [r7, #16]
   1e1b8:	429a      	cmp	r2, r3
   1e1ba:	d101      	bne.n	1e1c0 <xEventGroupSetBits+0x9c>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
   1e1bc:	2301      	movs	r3, #1
   1e1be:	627b      	str	r3, [r7, #36]	; 0x24
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
   1e1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e1c2:	2b00      	cmp	r3, #0
   1e1c4:	d010      	beq.n	1e1e8 <xEventGroupSetBits+0xc4>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
   1e1c6:	68fb      	ldr	r3, [r7, #12]
   1e1c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   1e1cc:	2b00      	cmp	r3, #0
   1e1ce:	d003      	beq.n	1e1d8 <xEventGroupSetBits+0xb4>
				{
					uxBitsToClear |= uxBitsWaitedFor;
   1e1d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1e1d2:	693b      	ldr	r3, [r7, #16]
   1e1d4:	4313      	orrs	r3, r2
   1e1d6:	62bb      	str	r3, [r7, #40]	; 0x28
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
   1e1d8:	6a3b      	ldr	r3, [r7, #32]
   1e1da:	681b      	ldr	r3, [r3, #0]
   1e1dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   1e1e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1e1e2:	4619      	mov	r1, r3
   1e1e4:	f001 fa18 	bl	1f618 <xTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
   1e1e8:	697b      	ldr	r3, [r7, #20]
   1e1ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
   1e1ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1e1ee:	69bb      	ldr	r3, [r7, #24]
   1e1f0:	429a      	cmp	r2, r3
   1e1f2:	d1be      	bne.n	1e172 <xEventGroupSetBits+0x4e>
			pxListItem = pxNext;
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
   1e1f4:	6a3b      	ldr	r3, [r7, #32]
   1e1f6:	681a      	ldr	r2, [r3, #0]
   1e1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e1fa:	43db      	mvns	r3, r3
   1e1fc:	401a      	ands	r2, r3
   1e1fe:	6a3b      	ldr	r3, [r7, #32]
   1e200:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
   1e202:	f000 ff6d 	bl	1f0e0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
   1e206:	6a3b      	ldr	r3, [r7, #32]
   1e208:	681b      	ldr	r3, [r3, #0]
}
   1e20a:	4618      	mov	r0, r3
   1e20c:	3730      	adds	r7, #48	; 0x30
   1e20e:	46bd      	mov	sp, r7
   1e210:	bd80      	pop	{r7, pc}
   1e212:	bf00      	nop

0001e214 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
   1e214:	b580      	push	{r7, lr}
   1e216:	b082      	sub	sp, #8
   1e218:	af00      	add	r7, sp, #0
   1e21a:	6078      	str	r0, [r7, #4]
   1e21c:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
   1e21e:	6878      	ldr	r0, [r7, #4]
   1e220:	6839      	ldr	r1, [r7, #0]
   1e222:	f7ff ff7f 	bl	1e124 <xEventGroupSetBits>
}
   1e226:	3708      	adds	r7, #8
   1e228:	46bd      	mov	sp, r7
   1e22a:	bd80      	pop	{r7, pc}

0001e22c <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
   1e22c:	b480      	push	{r7}
   1e22e:	b087      	sub	sp, #28
   1e230:	af00      	add	r7, sp, #0
   1e232:	60f8      	str	r0, [r7, #12]
   1e234:	60b9      	str	r1, [r7, #8]
   1e236:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
   1e238:	2300      	movs	r3, #0
   1e23a:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
   1e23c:	687b      	ldr	r3, [r7, #4]
   1e23e:	2b00      	cmp	r3, #0
   1e240:	d107      	bne.n	1e252 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
   1e242:	68fa      	ldr	r2, [r7, #12]
   1e244:	68bb      	ldr	r3, [r7, #8]
   1e246:	4013      	ands	r3, r2
   1e248:	2b00      	cmp	r3, #0
   1e24a:	d00a      	beq.n	1e262 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
   1e24c:	2301      	movs	r3, #1
   1e24e:	617b      	str	r3, [r7, #20]
   1e250:	e007      	b.n	1e262 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
   1e252:	68fa      	ldr	r2, [r7, #12]
   1e254:	68bb      	ldr	r3, [r7, #8]
   1e256:	401a      	ands	r2, r3
   1e258:	68bb      	ldr	r3, [r7, #8]
   1e25a:	429a      	cmp	r2, r3
   1e25c:	d101      	bne.n	1e262 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
   1e25e:	2301      	movs	r3, #1
   1e260:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
   1e262:	697b      	ldr	r3, [r7, #20]
}
   1e264:	4618      	mov	r0, r3
   1e266:	371c      	adds	r7, #28
   1e268:	46bd      	mov	sp, r7
   1e26a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1e26e:	4770      	bx	lr

0001e270 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   1e270:	b480      	push	{r7}
   1e272:	b083      	sub	sp, #12
   1e274:	af00      	add	r7, sp, #0
   1e276:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1e278:	687b      	ldr	r3, [r7, #4]
   1e27a:	f103 0208 	add.w	r2, r3, #8
   1e27e:	687b      	ldr	r3, [r7, #4]
   1e280:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   1e282:	687b      	ldr	r3, [r7, #4]
   1e284:	f04f 32ff 	mov.w	r2, #4294967295
   1e288:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1e28a:	687b      	ldr	r3, [r7, #4]
   1e28c:	f103 0208 	add.w	r2, r3, #8
   1e290:	687b      	ldr	r3, [r7, #4]
   1e292:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1e294:	687b      	ldr	r3, [r7, #4]
   1e296:	f103 0208 	add.w	r2, r3, #8
   1e29a:	687b      	ldr	r3, [r7, #4]
   1e29c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   1e29e:	687b      	ldr	r3, [r7, #4]
   1e2a0:	2200      	movs	r2, #0
   1e2a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   1e2a4:	370c      	adds	r7, #12
   1e2a6:	46bd      	mov	sp, r7
   1e2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
   1e2ac:	4770      	bx	lr
   1e2ae:	bf00      	nop

0001e2b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   1e2b0:	b480      	push	{r7}
   1e2b2:	b083      	sub	sp, #12
   1e2b4:	af00      	add	r7, sp, #0
   1e2b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   1e2b8:	687b      	ldr	r3, [r7, #4]
   1e2ba:	2200      	movs	r2, #0
   1e2bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   1e2be:	370c      	adds	r7, #12
   1e2c0:	46bd      	mov	sp, r7
   1e2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
   1e2c6:	4770      	bx	lr

0001e2c8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1e2c8:	b480      	push	{r7}
   1e2ca:	b085      	sub	sp, #20
   1e2cc:	af00      	add	r7, sp, #0
   1e2ce:	6078      	str	r0, [r7, #4]
   1e2d0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   1e2d2:	687b      	ldr	r3, [r7, #4]
   1e2d4:	685b      	ldr	r3, [r3, #4]
   1e2d6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   1e2d8:	683b      	ldr	r3, [r7, #0]
   1e2da:	68fa      	ldr	r2, [r7, #12]
   1e2dc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   1e2de:	68fb      	ldr	r3, [r7, #12]
   1e2e0:	689a      	ldr	r2, [r3, #8]
   1e2e2:	683b      	ldr	r3, [r7, #0]
   1e2e4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   1e2e6:	68fb      	ldr	r3, [r7, #12]
   1e2e8:	689b      	ldr	r3, [r3, #8]
   1e2ea:	683a      	ldr	r2, [r7, #0]
   1e2ec:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   1e2ee:	68fb      	ldr	r3, [r7, #12]
   1e2f0:	683a      	ldr	r2, [r7, #0]
   1e2f2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1e2f4:	683b      	ldr	r3, [r7, #0]
   1e2f6:	687a      	ldr	r2, [r7, #4]
   1e2f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1e2fa:	687b      	ldr	r3, [r7, #4]
   1e2fc:	681b      	ldr	r3, [r3, #0]
   1e2fe:	1c5a      	adds	r2, r3, #1
   1e300:	687b      	ldr	r3, [r7, #4]
   1e302:	601a      	str	r2, [r3, #0]
}
   1e304:	3714      	adds	r7, #20
   1e306:	46bd      	mov	sp, r7
   1e308:	f85d 7b04 	ldr.w	r7, [sp], #4
   1e30c:	4770      	bx	lr
   1e30e:	bf00      	nop

0001e310 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1e310:	b480      	push	{r7}
   1e312:	b085      	sub	sp, #20
   1e314:	af00      	add	r7, sp, #0
   1e316:	6078      	str	r0, [r7, #4]
   1e318:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   1e31a:	683b      	ldr	r3, [r7, #0]
   1e31c:	681b      	ldr	r3, [r3, #0]
   1e31e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   1e320:	68bb      	ldr	r3, [r7, #8]
   1e322:	f1b3 3fff 	cmp.w	r3, #4294967295
   1e326:	d103      	bne.n	1e330 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   1e328:	687b      	ldr	r3, [r7, #4]
   1e32a:	691b      	ldr	r3, [r3, #16]
   1e32c:	60fb      	str	r3, [r7, #12]
   1e32e:	e00c      	b.n	1e34a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1e330:	687b      	ldr	r3, [r7, #4]
   1e332:	3308      	adds	r3, #8
   1e334:	60fb      	str	r3, [r7, #12]
   1e336:	e002      	b.n	1e33e <vListInsert+0x2e>
   1e338:	68fb      	ldr	r3, [r7, #12]
   1e33a:	685b      	ldr	r3, [r3, #4]
   1e33c:	60fb      	str	r3, [r7, #12]
   1e33e:	68fb      	ldr	r3, [r7, #12]
   1e340:	685b      	ldr	r3, [r3, #4]
   1e342:	681a      	ldr	r2, [r3, #0]
   1e344:	68bb      	ldr	r3, [r7, #8]
   1e346:	429a      	cmp	r2, r3
   1e348:	d9f6      	bls.n	1e338 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   1e34a:	68fb      	ldr	r3, [r7, #12]
   1e34c:	685a      	ldr	r2, [r3, #4]
   1e34e:	683b      	ldr	r3, [r7, #0]
   1e350:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   1e352:	683b      	ldr	r3, [r7, #0]
   1e354:	685b      	ldr	r3, [r3, #4]
   1e356:	683a      	ldr	r2, [r7, #0]
   1e358:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   1e35a:	683b      	ldr	r3, [r7, #0]
   1e35c:	68fa      	ldr	r2, [r7, #12]
   1e35e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   1e360:	68fb      	ldr	r3, [r7, #12]
   1e362:	683a      	ldr	r2, [r7, #0]
   1e364:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1e366:	683b      	ldr	r3, [r7, #0]
   1e368:	687a      	ldr	r2, [r7, #4]
   1e36a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1e36c:	687b      	ldr	r3, [r7, #4]
   1e36e:	681b      	ldr	r3, [r3, #0]
   1e370:	1c5a      	adds	r2, r3, #1
   1e372:	687b      	ldr	r3, [r7, #4]
   1e374:	601a      	str	r2, [r3, #0]
}
   1e376:	3714      	adds	r7, #20
   1e378:	46bd      	mov	sp, r7
   1e37a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1e37e:	4770      	bx	lr

0001e380 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   1e380:	b480      	push	{r7}
   1e382:	b085      	sub	sp, #20
   1e384:	af00      	add	r7, sp, #0
   1e386:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   1e388:	687b      	ldr	r3, [r7, #4]
   1e38a:	691b      	ldr	r3, [r3, #16]
   1e38c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   1e38e:	687b      	ldr	r3, [r7, #4]
   1e390:	685b      	ldr	r3, [r3, #4]
   1e392:	687a      	ldr	r2, [r7, #4]
   1e394:	6892      	ldr	r2, [r2, #8]
   1e396:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   1e398:	687b      	ldr	r3, [r7, #4]
   1e39a:	689b      	ldr	r3, [r3, #8]
   1e39c:	687a      	ldr	r2, [r7, #4]
   1e39e:	6852      	ldr	r2, [r2, #4]
   1e3a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   1e3a2:	68fb      	ldr	r3, [r7, #12]
   1e3a4:	685a      	ldr	r2, [r3, #4]
   1e3a6:	687b      	ldr	r3, [r7, #4]
   1e3a8:	429a      	cmp	r2, r3
   1e3aa:	d103      	bne.n	1e3b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   1e3ac:	687b      	ldr	r3, [r7, #4]
   1e3ae:	689a      	ldr	r2, [r3, #8]
   1e3b0:	68fb      	ldr	r3, [r7, #12]
   1e3b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   1e3b4:	687b      	ldr	r3, [r7, #4]
   1e3b6:	2200      	movs	r2, #0
   1e3b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   1e3ba:	68fb      	ldr	r3, [r7, #12]
   1e3bc:	681b      	ldr	r3, [r3, #0]
   1e3be:	1e5a      	subs	r2, r3, #1
   1e3c0:	68fb      	ldr	r3, [r7, #12]
   1e3c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   1e3c4:	68fb      	ldr	r3, [r7, #12]
   1e3c6:	681b      	ldr	r3, [r3, #0]
}
   1e3c8:	4618      	mov	r0, r3
   1e3ca:	3714      	adds	r7, #20
   1e3cc:	46bd      	mov	sp, r7
   1e3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
   1e3d2:	4770      	bx	lr

0001e3d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   1e3d4:	b580      	push	{r7, lr}
   1e3d6:	b084      	sub	sp, #16
   1e3d8:	af00      	add	r7, sp, #0
   1e3da:	6078      	str	r0, [r7, #4]
   1e3dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1e3de:	687b      	ldr	r3, [r7, #4]
   1e3e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   1e3e2:	68fb      	ldr	r3, [r7, #12]
   1e3e4:	2b00      	cmp	r3, #0
   1e3e6:	d100      	bne.n	1e3ea <xQueueGenericReset+0x16>
   1e3e8:	e7fe      	b.n	1e3e8 <xQueueGenericReset+0x14>

	taskENTER_CRITICAL();
   1e3ea:	f7f6 f829 	bl	14440 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   1e3ee:	68fb      	ldr	r3, [r7, #12]
   1e3f0:	681a      	ldr	r2, [r3, #0]
   1e3f2:	68fb      	ldr	r3, [r7, #12]
   1e3f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1e3f6:	68f9      	ldr	r1, [r7, #12]
   1e3f8:	6c09      	ldr	r1, [r1, #64]	; 0x40
   1e3fa:	fb01 f303 	mul.w	r3, r1, r3
   1e3fe:	441a      	add	r2, r3
   1e400:	68fb      	ldr	r3, [r7, #12]
   1e402:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   1e404:	68fb      	ldr	r3, [r7, #12]
   1e406:	2200      	movs	r2, #0
   1e408:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   1e40a:	68fb      	ldr	r3, [r7, #12]
   1e40c:	681a      	ldr	r2, [r3, #0]
   1e40e:	68fb      	ldr	r3, [r7, #12]
   1e410:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   1e412:	68fb      	ldr	r3, [r7, #12]
   1e414:	681a      	ldr	r2, [r3, #0]
   1e416:	68fb      	ldr	r3, [r7, #12]
   1e418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1e41a:	3b01      	subs	r3, #1
   1e41c:	68f9      	ldr	r1, [r7, #12]
   1e41e:	6c09      	ldr	r1, [r1, #64]	; 0x40
   1e420:	fb01 f303 	mul.w	r3, r1, r3
   1e424:	441a      	add	r2, r3
   1e426:	68fb      	ldr	r3, [r7, #12]
   1e428:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   1e42a:	68fb      	ldr	r3, [r7, #12]
   1e42c:	22ff      	movs	r2, #255	; 0xff
   1e42e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
   1e432:	68fb      	ldr	r3, [r7, #12]
   1e434:	22ff      	movs	r2, #255	; 0xff
   1e436:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
   1e43a:	683b      	ldr	r3, [r7, #0]
   1e43c:	2b00      	cmp	r3, #0
   1e43e:	d114      	bne.n	1e46a <xQueueGenericReset+0x96>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1e440:	68fb      	ldr	r3, [r7, #12]
   1e442:	691b      	ldr	r3, [r3, #16]
   1e444:	2b00      	cmp	r3, #0
   1e446:	d01a      	beq.n	1e47e <xQueueGenericReset+0xaa>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1e448:	68fb      	ldr	r3, [r7, #12]
   1e44a:	3310      	adds	r3, #16
   1e44c:	4618      	mov	r0, r3
   1e44e:	f001 f887 	bl	1f560 <xTaskRemoveFromEventList>
   1e452:	4603      	mov	r3, r0
   1e454:	2b00      	cmp	r3, #0
   1e456:	d012      	beq.n	1e47e <xQueueGenericReset+0xaa>
				{
					queueYIELD_IF_USING_PREEMPTION();
   1e458:	4b0c      	ldr	r3, [pc, #48]	; (1e48c <xQueueGenericReset+0xb8>)
   1e45a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1e45e:	601a      	str	r2, [r3, #0]
   1e460:	f3bf 8f4f 	dsb	sy
   1e464:	f3bf 8f6f 	isb	sy
   1e468:	e009      	b.n	1e47e <xQueueGenericReset+0xaa>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   1e46a:	68fb      	ldr	r3, [r7, #12]
   1e46c:	3310      	adds	r3, #16
   1e46e:	4618      	mov	r0, r3
   1e470:	f7ff fefe 	bl	1e270 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   1e474:	68fb      	ldr	r3, [r7, #12]
   1e476:	3324      	adds	r3, #36	; 0x24
   1e478:	4618      	mov	r0, r3
   1e47a:	f7ff fef9 	bl	1e270 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
   1e47e:	f7f6 f803 	bl	14488 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   1e482:	2301      	movs	r3, #1
}
   1e484:	4618      	mov	r0, r3
   1e486:	3710      	adds	r7, #16
   1e488:	46bd      	mov	sp, r7
   1e48a:	bd80      	pop	{r7, pc}
   1e48c:	e000ed04 	.word	0xe000ed04

0001e490 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   1e490:	b590      	push	{r4, r7, lr}
   1e492:	b08b      	sub	sp, #44	; 0x2c
   1e494:	af02      	add	r7, sp, #8
   1e496:	60f8      	str	r0, [r7, #12]
   1e498:	60b9      	str	r1, [r7, #8]
   1e49a:	4613      	mov	r3, r2
   1e49c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   1e49e:	68fb      	ldr	r3, [r7, #12]
   1e4a0:	2b00      	cmp	r3, #0
   1e4a2:	d100      	bne.n	1e4a6 <xQueueGenericCreate+0x16>
   1e4a4:	e7fe      	b.n	1e4a4 <xQueueGenericCreate+0x14>

		if( uxItemSize == ( UBaseType_t ) 0 )
   1e4a6:	68bb      	ldr	r3, [r7, #8]
   1e4a8:	2b00      	cmp	r3, #0
   1e4aa:	d102      	bne.n	1e4b2 <xQueueGenericCreate+0x22>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   1e4ac:	2300      	movs	r3, #0
   1e4ae:	61fb      	str	r3, [r7, #28]
   1e4b0:	e004      	b.n	1e4bc <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1e4b2:	68fb      	ldr	r3, [r7, #12]
   1e4b4:	68ba      	ldr	r2, [r7, #8]
   1e4b6:	fb02 f303 	mul.w	r3, r2, r3
   1e4ba:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   1e4bc:	69fb      	ldr	r3, [r7, #28]
   1e4be:	3348      	adds	r3, #72	; 0x48
   1e4c0:	4618      	mov	r0, r3
   1e4c2:	f001 fdcf 	bl	20064 <pvPortMalloc>
   1e4c6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
   1e4c8:	69bb      	ldr	r3, [r7, #24]
   1e4ca:	2b00      	cmp	r3, #0
   1e4cc:	d00b      	beq.n	1e4e6 <xQueueGenericCreate+0x56>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   1e4ce:	69bb      	ldr	r3, [r7, #24]
   1e4d0:	3348      	adds	r3, #72	; 0x48
   1e4d2:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   1e4d4:	79fc      	ldrb	r4, [r7, #7]
   1e4d6:	69bb      	ldr	r3, [r7, #24]
   1e4d8:	9300      	str	r3, [sp, #0]
   1e4da:	68f8      	ldr	r0, [r7, #12]
   1e4dc:	68b9      	ldr	r1, [r7, #8]
   1e4de:	697a      	ldr	r2, [r7, #20]
   1e4e0:	4623      	mov	r3, r4
   1e4e2:	f000 f805 	bl	1e4f0 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
   1e4e6:	69bb      	ldr	r3, [r7, #24]
	}
   1e4e8:	4618      	mov	r0, r3
   1e4ea:	3724      	adds	r7, #36	; 0x24
   1e4ec:	46bd      	mov	sp, r7
   1e4ee:	bd90      	pop	{r4, r7, pc}

0001e4f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   1e4f0:	b580      	push	{r7, lr}
   1e4f2:	b084      	sub	sp, #16
   1e4f4:	af00      	add	r7, sp, #0
   1e4f6:	60f8      	str	r0, [r7, #12]
   1e4f8:	60b9      	str	r1, [r7, #8]
   1e4fa:	607a      	str	r2, [r7, #4]
   1e4fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   1e4fe:	68bb      	ldr	r3, [r7, #8]
   1e500:	2b00      	cmp	r3, #0
   1e502:	d103      	bne.n	1e50c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   1e504:	69bb      	ldr	r3, [r7, #24]
   1e506:	69ba      	ldr	r2, [r7, #24]
   1e508:	601a      	str	r2, [r3, #0]
   1e50a:	e002      	b.n	1e512 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   1e50c:	69bb      	ldr	r3, [r7, #24]
   1e50e:	687a      	ldr	r2, [r7, #4]
   1e510:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   1e512:	69bb      	ldr	r3, [r7, #24]
   1e514:	68fa      	ldr	r2, [r7, #12]
   1e516:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   1e518:	69bb      	ldr	r3, [r7, #24]
   1e51a:	68ba      	ldr	r2, [r7, #8]
   1e51c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   1e51e:	69b8      	ldr	r0, [r7, #24]
   1e520:	2101      	movs	r1, #1
   1e522:	f7ff ff57 	bl	1e3d4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
   1e526:	3710      	adds	r7, #16
   1e528:	46bd      	mov	sp, r7
   1e52a:	bd80      	pop	{r7, pc}

0001e52c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   1e52c:	b580      	push	{r7, lr}
   1e52e:	b08a      	sub	sp, #40	; 0x28
   1e530:	af00      	add	r7, sp, #0
   1e532:	60f8      	str	r0, [r7, #12]
   1e534:	60b9      	str	r1, [r7, #8]
   1e536:	607a      	str	r2, [r7, #4]
   1e538:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   1e53a:	2300      	movs	r3, #0
   1e53c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1e53e:	68fb      	ldr	r3, [r7, #12]
   1e540:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   1e542:	6a3b      	ldr	r3, [r7, #32]
   1e544:	2b00      	cmp	r3, #0
   1e546:	d100      	bne.n	1e54a <xQueueGenericSend+0x1e>
   1e548:	e7fe      	b.n	1e548 <xQueueGenericSend+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1e54a:	68bb      	ldr	r3, [r7, #8]
   1e54c:	2b00      	cmp	r3, #0
   1e54e:	d103      	bne.n	1e558 <xQueueGenericSend+0x2c>
   1e550:	6a3b      	ldr	r3, [r7, #32]
   1e552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1e554:	2b00      	cmp	r3, #0
   1e556:	d101      	bne.n	1e55c <xQueueGenericSend+0x30>
   1e558:	2301      	movs	r3, #1
   1e55a:	e000      	b.n	1e55e <xQueueGenericSend+0x32>
   1e55c:	2300      	movs	r3, #0
   1e55e:	2b00      	cmp	r3, #0
   1e560:	d100      	bne.n	1e564 <xQueueGenericSend+0x38>
   1e562:	e7fe      	b.n	1e562 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1e564:	683b      	ldr	r3, [r7, #0]
   1e566:	2b02      	cmp	r3, #2
   1e568:	d103      	bne.n	1e572 <xQueueGenericSend+0x46>
   1e56a:	6a3b      	ldr	r3, [r7, #32]
   1e56c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1e56e:	2b01      	cmp	r3, #1
   1e570:	d101      	bne.n	1e576 <xQueueGenericSend+0x4a>
   1e572:	2301      	movs	r3, #1
   1e574:	e000      	b.n	1e578 <xQueueGenericSend+0x4c>
   1e576:	2300      	movs	r3, #0
   1e578:	2b00      	cmp	r3, #0
   1e57a:	d100      	bne.n	1e57e <xQueueGenericSend+0x52>
   1e57c:	e7fe      	b.n	1e57c <xQueueGenericSend+0x50>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1e57e:	f001 f9d9 	bl	1f934 <xTaskGetSchedulerState>
   1e582:	4603      	mov	r3, r0
   1e584:	2b00      	cmp	r3, #0
   1e586:	d102      	bne.n	1e58e <xQueueGenericSend+0x62>
   1e588:	687b      	ldr	r3, [r7, #4]
   1e58a:	2b00      	cmp	r3, #0
   1e58c:	d101      	bne.n	1e592 <xQueueGenericSend+0x66>
   1e58e:	2301      	movs	r3, #1
   1e590:	e000      	b.n	1e594 <xQueueGenericSend+0x68>
   1e592:	2300      	movs	r3, #0
   1e594:	2b00      	cmp	r3, #0
   1e596:	d100      	bne.n	1e59a <xQueueGenericSend+0x6e>
   1e598:	e7fe      	b.n	1e598 <xQueueGenericSend+0x6c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   1e59a:	f7f5 ff51 	bl	14440 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1e59e:	6a3b      	ldr	r3, [r7, #32]
   1e5a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1e5a2:	6a3b      	ldr	r3, [r7, #32]
   1e5a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1e5a6:	429a      	cmp	r2, r3
   1e5a8:	d302      	bcc.n	1e5b0 <xQueueGenericSend+0x84>
   1e5aa:	683b      	ldr	r3, [r7, #0]
   1e5ac:	2b02      	cmp	r3, #2
   1e5ae:	d129      	bne.n	1e604 <xQueueGenericSend+0xd8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1e5b0:	6a38      	ldr	r0, [r7, #32]
   1e5b2:	68b9      	ldr	r1, [r7, #8]
   1e5b4:	683a      	ldr	r2, [r7, #0]
   1e5b6:	f000 f9f1 	bl	1e99c <prvCopyDataToQueue>
   1e5ba:	61f8      	str	r0, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1e5bc:	6a3b      	ldr	r3, [r7, #32]
   1e5be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1e5c0:	2b00      	cmp	r3, #0
   1e5c2:	d010      	beq.n	1e5e6 <xQueueGenericSend+0xba>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1e5c4:	6a3b      	ldr	r3, [r7, #32]
   1e5c6:	3324      	adds	r3, #36	; 0x24
   1e5c8:	4618      	mov	r0, r3
   1e5ca:	f000 ffc9 	bl	1f560 <xTaskRemoveFromEventList>
   1e5ce:	4603      	mov	r3, r0
   1e5d0:	2b00      	cmp	r3, #0
   1e5d2:	d013      	beq.n	1e5fc <xQueueGenericSend+0xd0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
   1e5d4:	4b41      	ldr	r3, [pc, #260]	; (1e6dc <xQueueGenericSend+0x1b0>)
   1e5d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1e5da:	601a      	str	r2, [r3, #0]
   1e5dc:	f3bf 8f4f 	dsb	sy
   1e5e0:	f3bf 8f6f 	isb	sy
   1e5e4:	e00a      	b.n	1e5fc <xQueueGenericSend+0xd0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
   1e5e6:	69fb      	ldr	r3, [r7, #28]
   1e5e8:	2b00      	cmp	r3, #0
   1e5ea:	d007      	beq.n	1e5fc <xQueueGenericSend+0xd0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
   1e5ec:	4b3b      	ldr	r3, [pc, #236]	; (1e6dc <xQueueGenericSend+0x1b0>)
   1e5ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1e5f2:	601a      	str	r2, [r3, #0]
   1e5f4:	f3bf 8f4f 	dsb	sy
   1e5f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   1e5fc:	f7f5 ff44 	bl	14488 <vPortExitCritical>
				return pdPASS;
   1e600:	2301      	movs	r3, #1
   1e602:	e067      	b.n	1e6d4 <xQueueGenericSend+0x1a8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1e604:	687b      	ldr	r3, [r7, #4]
   1e606:	2b00      	cmp	r3, #0
   1e608:	d103      	bne.n	1e612 <xQueueGenericSend+0xe6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1e60a:	f7f5 ff3d 	bl	14488 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   1e60e:	2300      	movs	r3, #0
   1e610:	e060      	b.n	1e6d4 <xQueueGenericSend+0x1a8>
				}
				else if( xEntryTimeSet == pdFALSE )
   1e612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e614:	2b00      	cmp	r3, #0
   1e616:	d106      	bne.n	1e626 <xQueueGenericSend+0xfa>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   1e618:	f107 0314 	add.w	r3, r7, #20
   1e61c:	4618      	mov	r0, r3
   1e61e:	f001 f84f 	bl	1f6c0 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
   1e622:	2301      	movs	r3, #1
   1e624:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1e626:	f7f5 ff2f 	bl	14488 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1e62a:	f000 fd13 	bl	1f054 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
   1e62e:	f7f5 ff07 	bl	14440 <vPortEnterCritical>
   1e632:	6a3b      	ldr	r3, [r7, #32]
   1e634:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   1e638:	b2db      	uxtb	r3, r3
   1e63a:	b25b      	sxtb	r3, r3
   1e63c:	f1b3 3fff 	cmp.w	r3, #4294967295
   1e640:	d103      	bne.n	1e64a <xQueueGenericSend+0x11e>
   1e642:	6a3b      	ldr	r3, [r7, #32]
   1e644:	2200      	movs	r2, #0
   1e646:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
   1e64a:	6a3b      	ldr	r3, [r7, #32]
   1e64c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   1e650:	b2db      	uxtb	r3, r3
   1e652:	b25b      	sxtb	r3, r3
   1e654:	f1b3 3fff 	cmp.w	r3, #4294967295
   1e658:	d103      	bne.n	1e662 <xQueueGenericSend+0x136>
   1e65a:	6a3b      	ldr	r3, [r7, #32]
   1e65c:	2200      	movs	r2, #0
   1e65e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   1e662:	f7f5 ff11 	bl	14488 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1e666:	f107 0214 	add.w	r2, r7, #20
   1e66a:	1d3b      	adds	r3, r7, #4
   1e66c:	4610      	mov	r0, r2
   1e66e:	4619      	mov	r1, r3
   1e670:	f001 f840 	bl	1f6f4 <xTaskCheckForTimeOut>
   1e674:	4603      	mov	r3, r0
   1e676:	2b00      	cmp	r3, #0
   1e678:	d124      	bne.n	1e6c4 <xQueueGenericSend+0x198>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   1e67a:	6a38      	ldr	r0, [r7, #32]
   1e67c:	f000 fa7a 	bl	1eb74 <prvIsQueueFull>
   1e680:	4603      	mov	r3, r0
   1e682:	2b00      	cmp	r3, #0
   1e684:	d018      	beq.n	1e6b8 <xQueueGenericSend+0x18c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   1e686:	6a3b      	ldr	r3, [r7, #32]
   1e688:	f103 0210 	add.w	r2, r3, #16
   1e68c:	687b      	ldr	r3, [r7, #4]
   1e68e:	4610      	mov	r0, r2
   1e690:	4619      	mov	r1, r3
   1e692:	f000 ff03 	bl	1f49c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   1e696:	6a38      	ldr	r0, [r7, #32]
   1e698:	f000 fa04 	bl	1eaa4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   1e69c:	f000 fd20 	bl	1f0e0 <xTaskResumeAll>
   1e6a0:	4603      	mov	r3, r0
   1e6a2:	2b00      	cmp	r3, #0
   1e6a4:	d115      	bne.n	1e6d2 <xQueueGenericSend+0x1a6>
				{
					portYIELD_WITHIN_API();
   1e6a6:	4b0d      	ldr	r3, [pc, #52]	; (1e6dc <xQueueGenericSend+0x1b0>)
   1e6a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1e6ac:	601a      	str	r2, [r3, #0]
   1e6ae:	f3bf 8f4f 	dsb	sy
   1e6b2:	f3bf 8f6f 	isb	sy
   1e6b6:	e00c      	b.n	1e6d2 <xQueueGenericSend+0x1a6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   1e6b8:	6a38      	ldr	r0, [r7, #32]
   1e6ba:	f000 f9f3 	bl	1eaa4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
   1e6be:	f000 fd0f 	bl	1f0e0 <xTaskResumeAll>
   1e6c2:	e76a      	b.n	1e59a <xQueueGenericSend+0x6e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   1e6c4:	6a38      	ldr	r0, [r7, #32]
   1e6c6:	f000 f9ed 	bl	1eaa4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
   1e6ca:	f000 fd09 	bl	1f0e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   1e6ce:	2300      	movs	r3, #0
   1e6d0:	e000      	b.n	1e6d4 <xQueueGenericSend+0x1a8>
		}
	}
   1e6d2:	e762      	b.n	1e59a <xQueueGenericSend+0x6e>
}
   1e6d4:	4618      	mov	r0, r3
   1e6d6:	3728      	adds	r7, #40	; 0x28
   1e6d8:	46bd      	mov	sp, r7
   1e6da:	bd80      	pop	{r7, pc}
   1e6dc:	e000ed04 	.word	0xe000ed04

0001e6e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   1e6e0:	b580      	push	{r7, lr}
   1e6e2:	b08c      	sub	sp, #48	; 0x30
   1e6e4:	af00      	add	r7, sp, #0
   1e6e6:	60f8      	str	r0, [r7, #12]
   1e6e8:	60b9      	str	r1, [r7, #8]
   1e6ea:	607a      	str	r2, [r7, #4]
   1e6ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1e6ee:	68fb      	ldr	r3, [r7, #12]
   1e6f0:	62bb      	str	r3, [r7, #40]	; 0x28

	configASSERT( pxQueue );
   1e6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e6f4:	2b00      	cmp	r3, #0
   1e6f6:	d100      	bne.n	1e6fa <xQueueGenericSendFromISR+0x1a>
   1e6f8:	e7fe      	b.n	1e6f8 <xQueueGenericSendFromISR+0x18>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1e6fa:	68bb      	ldr	r3, [r7, #8]
   1e6fc:	2b00      	cmp	r3, #0
   1e6fe:	d103      	bne.n	1e708 <xQueueGenericSendFromISR+0x28>
   1e700:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1e704:	2b00      	cmp	r3, #0
   1e706:	d101      	bne.n	1e70c <xQueueGenericSendFromISR+0x2c>
   1e708:	2301      	movs	r3, #1
   1e70a:	e000      	b.n	1e70e <xQueueGenericSendFromISR+0x2e>
   1e70c:	2300      	movs	r3, #0
   1e70e:	2b00      	cmp	r3, #0
   1e710:	d100      	bne.n	1e714 <xQueueGenericSendFromISR+0x34>
   1e712:	e7fe      	b.n	1e712 <xQueueGenericSendFromISR+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1e714:	683b      	ldr	r3, [r7, #0]
   1e716:	2b02      	cmp	r3, #2
   1e718:	d103      	bne.n	1e722 <xQueueGenericSendFromISR+0x42>
   1e71a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e71c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1e71e:	2b01      	cmp	r3, #1
   1e720:	d101      	bne.n	1e726 <xQueueGenericSendFromISR+0x46>
   1e722:	2301      	movs	r3, #1
   1e724:	e000      	b.n	1e728 <xQueueGenericSendFromISR+0x48>
   1e726:	2300      	movs	r3, #0
   1e728:	2b00      	cmp	r3, #0
   1e72a:	d100      	bne.n	1e72e <xQueueGenericSendFromISR+0x4e>
   1e72c:	e7fe      	b.n	1e72c <xQueueGenericSendFromISR+0x4c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
   1e72e:	f7f5 ff21 	bl	14574 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
   1e732:	f3ef 8211 	mrs	r2, BASEPRI
   1e736:	f04f 0380 	mov.w	r3, #128	; 0x80
   1e73a:	f383 8811 	msr	BASEPRI, r3
   1e73e:	f3bf 8f6f 	isb	sy
   1e742:	f3bf 8f4f 	dsb	sy
   1e746:	61fa      	str	r2, [r7, #28]
   1e748:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
   1e74a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1e74c:	627b      	str	r3, [r7, #36]	; 0x24
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1e74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e750:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1e752:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1e756:	429a      	cmp	r2, r3
   1e758:	d302      	bcc.n	1e760 <xQueueGenericSendFromISR+0x80>
   1e75a:	683b      	ldr	r3, [r7, #0]
   1e75c:	2b02      	cmp	r3, #2
   1e75e:	d12c      	bne.n	1e7ba <xQueueGenericSendFromISR+0xda>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1e760:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e762:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   1e766:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1e76a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1e76c:	68b9      	ldr	r1, [r7, #8]
   1e76e:	683a      	ldr	r2, [r7, #0]
   1e770:	f000 f914 	bl	1e99c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1e774:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
   1e778:	f1b3 3fff 	cmp.w	r3, #4294967295
   1e77c:	d112      	bne.n	1e7a4 <xQueueGenericSendFromISR+0xc4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1e77e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1e782:	2b00      	cmp	r3, #0
   1e784:	d016      	beq.n	1e7b4 <xQueueGenericSendFromISR+0xd4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1e786:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e788:	3324      	adds	r3, #36	; 0x24
   1e78a:	4618      	mov	r0, r3
   1e78c:	f000 fee8 	bl	1f560 <xTaskRemoveFromEventList>
   1e790:	4603      	mov	r3, r0
   1e792:	2b00      	cmp	r3, #0
   1e794:	d00e      	beq.n	1e7b4 <xQueueGenericSendFromISR+0xd4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1e796:	687b      	ldr	r3, [r7, #4]
   1e798:	2b00      	cmp	r3, #0
   1e79a:	d00b      	beq.n	1e7b4 <xQueueGenericSendFromISR+0xd4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1e79c:	687b      	ldr	r3, [r7, #4]
   1e79e:	2201      	movs	r2, #1
   1e7a0:	601a      	str	r2, [r3, #0]
   1e7a2:	e007      	b.n	1e7b4 <xQueueGenericSendFromISR+0xd4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1e7a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   1e7a8:	3301      	adds	r3, #1
   1e7aa:	b2db      	uxtb	r3, r3
   1e7ac:	b2da      	uxtb	r2, r3
   1e7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e7b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
   1e7b4:	2301      	movs	r3, #1
   1e7b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
   1e7b8:	e001      	b.n	1e7be <xQueueGenericSendFromISR+0xde>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   1e7ba:	2300      	movs	r3, #0
   1e7bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   1e7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e7c0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
   1e7c2:	697b      	ldr	r3, [r7, #20]
   1e7c4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   1e7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
   1e7ca:	4618      	mov	r0, r3
   1e7cc:	3730      	adds	r7, #48	; 0x30
   1e7ce:	46bd      	mov	sp, r7
   1e7d0:	bd80      	pop	{r7, pc}
   1e7d2:	bf00      	nop

0001e7d4 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
   1e7d4:	b580      	push	{r7, lr}
   1e7d6:	b08a      	sub	sp, #40	; 0x28
   1e7d8:	af00      	add	r7, sp, #0
   1e7da:	60f8      	str	r0, [r7, #12]
   1e7dc:	60b9      	str	r1, [r7, #8]
   1e7de:	607a      	str	r2, [r7, #4]
   1e7e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   1e7e2:	2300      	movs	r3, #0
   1e7e4:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1e7e6:	68fb      	ldr	r3, [r7, #12]
   1e7e8:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   1e7ea:	6a3b      	ldr	r3, [r7, #32]
   1e7ec:	2b00      	cmp	r3, #0
   1e7ee:	d100      	bne.n	1e7f2 <xQueueGenericReceive+0x1e>
   1e7f0:	e7fe      	b.n	1e7f0 <xQueueGenericReceive+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1e7f2:	68bb      	ldr	r3, [r7, #8]
   1e7f4:	2b00      	cmp	r3, #0
   1e7f6:	d103      	bne.n	1e800 <xQueueGenericReceive+0x2c>
   1e7f8:	6a3b      	ldr	r3, [r7, #32]
   1e7fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1e7fc:	2b00      	cmp	r3, #0
   1e7fe:	d101      	bne.n	1e804 <xQueueGenericReceive+0x30>
   1e800:	2301      	movs	r3, #1
   1e802:	e000      	b.n	1e806 <xQueueGenericReceive+0x32>
   1e804:	2300      	movs	r3, #0
   1e806:	2b00      	cmp	r3, #0
   1e808:	d100      	bne.n	1e80c <xQueueGenericReceive+0x38>
   1e80a:	e7fe      	b.n	1e80a <xQueueGenericReceive+0x36>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1e80c:	f001 f892 	bl	1f934 <xTaskGetSchedulerState>
   1e810:	4603      	mov	r3, r0
   1e812:	2b00      	cmp	r3, #0
   1e814:	d102      	bne.n	1e81c <xQueueGenericReceive+0x48>
   1e816:	687b      	ldr	r3, [r7, #4]
   1e818:	2b00      	cmp	r3, #0
   1e81a:	d101      	bne.n	1e820 <xQueueGenericReceive+0x4c>
   1e81c:	2301      	movs	r3, #1
   1e81e:	e000      	b.n	1e822 <xQueueGenericReceive+0x4e>
   1e820:	2300      	movs	r3, #0
   1e822:	2b00      	cmp	r3, #0
   1e824:	d100      	bne.n	1e828 <xQueueGenericReceive+0x54>
   1e826:	e7fe      	b.n	1e826 <xQueueGenericReceive+0x52>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1e828:	f7f5 fe0a 	bl	14440 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1e82c:	6a3b      	ldr	r3, [r7, #32]
   1e82e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1e830:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1e832:	69fb      	ldr	r3, [r7, #28]
   1e834:	2b00      	cmp	r3, #0
   1e836:	d03d      	beq.n	1e8b4 <xQueueGenericReceive+0xe0>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
   1e838:	6a3b      	ldr	r3, [r7, #32]
   1e83a:	68db      	ldr	r3, [r3, #12]
   1e83c:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   1e83e:	6a38      	ldr	r0, [r7, #32]
   1e840:	68b9      	ldr	r1, [r7, #8]
   1e842:	f000 f909 	bl	1ea58 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
   1e846:	683b      	ldr	r3, [r7, #0]
   1e848:	2b00      	cmp	r3, #0
   1e84a:	d118      	bne.n	1e87e <xQueueGenericReceive+0xaa>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
   1e84c:	69fb      	ldr	r3, [r7, #28]
   1e84e:	1e5a      	subs	r2, r3, #1
   1e850:	6a3b      	ldr	r3, [r7, #32]
   1e852:	639a      	str	r2, [r3, #56]	; 0x38
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1e854:	6a3b      	ldr	r3, [r7, #32]
   1e856:	691b      	ldr	r3, [r3, #16]
   1e858:	2b00      	cmp	r3, #0
   1e85a:	d027      	beq.n	1e8ac <xQueueGenericReceive+0xd8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1e85c:	6a3b      	ldr	r3, [r7, #32]
   1e85e:	3310      	adds	r3, #16
   1e860:	4618      	mov	r0, r3
   1e862:	f000 fe7d 	bl	1f560 <xTaskRemoveFromEventList>
   1e866:	4603      	mov	r3, r0
   1e868:	2b00      	cmp	r3, #0
   1e86a:	d01f      	beq.n	1e8ac <xQueueGenericReceive+0xd8>
						{
							queueYIELD_IF_USING_PREEMPTION();
   1e86c:	4b4a      	ldr	r3, [pc, #296]	; (1e998 <xQueueGenericReceive+0x1c4>)
   1e86e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1e872:	601a      	str	r2, [r3, #0]
   1e874:	f3bf 8f4f 	dsb	sy
   1e878:	f3bf 8f6f 	isb	sy
   1e87c:	e016      	b.n	1e8ac <xQueueGenericReceive+0xd8>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
   1e87e:	6a3b      	ldr	r3, [r7, #32]
   1e880:	69ba      	ldr	r2, [r7, #24]
   1e882:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1e884:	6a3b      	ldr	r3, [r7, #32]
   1e886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1e888:	2b00      	cmp	r3, #0
   1e88a:	d00f      	beq.n	1e8ac <xQueueGenericReceive+0xd8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1e88c:	6a3b      	ldr	r3, [r7, #32]
   1e88e:	3324      	adds	r3, #36	; 0x24
   1e890:	4618      	mov	r0, r3
   1e892:	f000 fe65 	bl	1f560 <xTaskRemoveFromEventList>
   1e896:	4603      	mov	r3, r0
   1e898:	2b00      	cmp	r3, #0
   1e89a:	d007      	beq.n	1e8ac <xQueueGenericReceive+0xd8>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
   1e89c:	4b3e      	ldr	r3, [pc, #248]	; (1e998 <xQueueGenericReceive+0x1c4>)
   1e89e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1e8a2:	601a      	str	r2, [r3, #0]
   1e8a4:	f3bf 8f4f 	dsb	sy
   1e8a8:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
   1e8ac:	f7f5 fdec 	bl	14488 <vPortExitCritical>
				return pdPASS;
   1e8b0:	2301      	movs	r3, #1
   1e8b2:	e06d      	b.n	1e990 <xQueueGenericReceive+0x1bc>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1e8b4:	687b      	ldr	r3, [r7, #4]
   1e8b6:	2b00      	cmp	r3, #0
   1e8b8:	d103      	bne.n	1e8c2 <xQueueGenericReceive+0xee>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1e8ba:	f7f5 fde5 	bl	14488 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   1e8be:	2300      	movs	r3, #0
   1e8c0:	e066      	b.n	1e990 <xQueueGenericReceive+0x1bc>
				}
				else if( xEntryTimeSet == pdFALSE )
   1e8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e8c4:	2b00      	cmp	r3, #0
   1e8c6:	d106      	bne.n	1e8d6 <xQueueGenericReceive+0x102>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   1e8c8:	f107 0310 	add.w	r3, r7, #16
   1e8cc:	4618      	mov	r0, r3
   1e8ce:	f000 fef7 	bl	1f6c0 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
   1e8d2:	2301      	movs	r3, #1
   1e8d4:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1e8d6:	f7f5 fdd7 	bl	14488 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1e8da:	f000 fbbb 	bl	1f054 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
   1e8de:	f7f5 fdaf 	bl	14440 <vPortEnterCritical>
   1e8e2:	6a3b      	ldr	r3, [r7, #32]
   1e8e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   1e8e8:	b2db      	uxtb	r3, r3
   1e8ea:	b25b      	sxtb	r3, r3
   1e8ec:	f1b3 3fff 	cmp.w	r3, #4294967295
   1e8f0:	d103      	bne.n	1e8fa <xQueueGenericReceive+0x126>
   1e8f2:	6a3b      	ldr	r3, [r7, #32]
   1e8f4:	2200      	movs	r2, #0
   1e8f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
   1e8fa:	6a3b      	ldr	r3, [r7, #32]
   1e8fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   1e900:	b2db      	uxtb	r3, r3
   1e902:	b25b      	sxtb	r3, r3
   1e904:	f1b3 3fff 	cmp.w	r3, #4294967295
   1e908:	d103      	bne.n	1e912 <xQueueGenericReceive+0x13e>
   1e90a:	6a3b      	ldr	r3, [r7, #32]
   1e90c:	2200      	movs	r2, #0
   1e90e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   1e912:	f7f5 fdb9 	bl	14488 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1e916:	f107 0210 	add.w	r2, r7, #16
   1e91a:	1d3b      	adds	r3, r7, #4
   1e91c:	4610      	mov	r0, r2
   1e91e:	4619      	mov	r1, r3
   1e920:	f000 fee8 	bl	1f6f4 <xTaskCheckForTimeOut>
   1e924:	4603      	mov	r3, r0
   1e926:	2b00      	cmp	r3, #0
   1e928:	d124      	bne.n	1e974 <xQueueGenericReceive+0x1a0>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1e92a:	6a38      	ldr	r0, [r7, #32]
   1e92c:	f000 f90c 	bl	1eb48 <prvIsQueueEmpty>
   1e930:	4603      	mov	r3, r0
   1e932:	2b00      	cmp	r3, #0
   1e934:	d018      	beq.n	1e968 <xQueueGenericReceive+0x194>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1e936:	6a3b      	ldr	r3, [r7, #32]
   1e938:	f103 0224 	add.w	r2, r3, #36	; 0x24
   1e93c:	687b      	ldr	r3, [r7, #4]
   1e93e:	4610      	mov	r0, r2
   1e940:	4619      	mov	r1, r3
   1e942:	f000 fdab 	bl	1f49c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
   1e946:	6a38      	ldr	r0, [r7, #32]
   1e948:	f000 f8ac 	bl	1eaa4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
   1e94c:	f000 fbc8 	bl	1f0e0 <xTaskResumeAll>
   1e950:	4603      	mov	r3, r0
   1e952:	2b00      	cmp	r3, #0
   1e954:	d11b      	bne.n	1e98e <xQueueGenericReceive+0x1ba>
				{
					portYIELD_WITHIN_API();
   1e956:	4b10      	ldr	r3, [pc, #64]	; (1e998 <xQueueGenericReceive+0x1c4>)
   1e958:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1e95c:	601a      	str	r2, [r3, #0]
   1e95e:	f3bf 8f4f 	dsb	sy
   1e962:	f3bf 8f6f 	isb	sy
   1e966:	e012      	b.n	1e98e <xQueueGenericReceive+0x1ba>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   1e968:	6a38      	ldr	r0, [r7, #32]
   1e96a:	f000 f89b 	bl	1eaa4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
   1e96e:	f000 fbb7 	bl	1f0e0 <xTaskResumeAll>
   1e972:	e759      	b.n	1e828 <xQueueGenericReceive+0x54>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   1e974:	6a38      	ldr	r0, [r7, #32]
   1e976:	f000 f895 	bl	1eaa4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
   1e97a:	f000 fbb1 	bl	1f0e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1e97e:	6a38      	ldr	r0, [r7, #32]
   1e980:	f000 f8e2 	bl	1eb48 <prvIsQueueEmpty>
   1e984:	4603      	mov	r3, r0
   1e986:	2b00      	cmp	r3, #0
   1e988:	d001      	beq.n	1e98e <xQueueGenericReceive+0x1ba>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
   1e98a:	2300      	movs	r3, #0
   1e98c:	e000      	b.n	1e990 <xQueueGenericReceive+0x1bc>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
   1e98e:	e74b      	b.n	1e828 <xQueueGenericReceive+0x54>
}
   1e990:	4618      	mov	r0, r3
   1e992:	3728      	adds	r7, #40	; 0x28
   1e994:	46bd      	mov	sp, r7
   1e996:	bd80      	pop	{r7, pc}
   1e998:	e000ed04 	.word	0xe000ed04

0001e99c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   1e99c:	b580      	push	{r7, lr}
   1e99e:	b086      	sub	sp, #24
   1e9a0:	af00      	add	r7, sp, #0
   1e9a2:	60f8      	str	r0, [r7, #12]
   1e9a4:	60b9      	str	r1, [r7, #8]
   1e9a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   1e9a8:	2300      	movs	r3, #0
   1e9aa:	613b      	str	r3, [r7, #16]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1e9ac:	68fb      	ldr	r3, [r7, #12]
   1e9ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1e9b0:	617b      	str	r3, [r7, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1e9b2:	68fb      	ldr	r3, [r7, #12]
   1e9b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1e9b6:	2b00      	cmp	r3, #0
   1e9b8:	d045      	beq.n	1ea46 <prvCopyDataToQueue+0xaa>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   1e9ba:	687b      	ldr	r3, [r7, #4]
   1e9bc:	2b00      	cmp	r3, #0
   1e9be:	d11a      	bne.n	1e9f6 <prvCopyDataToQueue+0x5a>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   1e9c0:	68fb      	ldr	r3, [r7, #12]
   1e9c2:	689a      	ldr	r2, [r3, #8]
   1e9c4:	68fb      	ldr	r3, [r7, #12]
   1e9c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1e9c8:	4610      	mov	r0, r2
   1e9ca:	68b9      	ldr	r1, [r7, #8]
   1e9cc:	461a      	mov	r2, r3
   1e9ce:	f7ed fb97 	bl	c100 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   1e9d2:	68fb      	ldr	r3, [r7, #12]
   1e9d4:	689a      	ldr	r2, [r3, #8]
   1e9d6:	68fb      	ldr	r3, [r7, #12]
   1e9d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1e9da:	441a      	add	r2, r3
   1e9dc:	68fb      	ldr	r3, [r7, #12]
   1e9de:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1e9e0:	68fb      	ldr	r3, [r7, #12]
   1e9e2:	689a      	ldr	r2, [r3, #8]
   1e9e4:	68fb      	ldr	r3, [r7, #12]
   1e9e6:	685b      	ldr	r3, [r3, #4]
   1e9e8:	429a      	cmp	r2, r3
   1e9ea:	d32c      	bcc.n	1ea46 <prvCopyDataToQueue+0xaa>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1e9ec:	68fb      	ldr	r3, [r7, #12]
   1e9ee:	681a      	ldr	r2, [r3, #0]
   1e9f0:	68fb      	ldr	r3, [r7, #12]
   1e9f2:	609a      	str	r2, [r3, #8]
   1e9f4:	e027      	b.n	1ea46 <prvCopyDataToQueue+0xaa>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1e9f6:	68fb      	ldr	r3, [r7, #12]
   1e9f8:	68da      	ldr	r2, [r3, #12]
   1e9fa:	68fb      	ldr	r3, [r7, #12]
   1e9fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1e9fe:	4610      	mov	r0, r2
   1ea00:	68b9      	ldr	r1, [r7, #8]
   1ea02:	461a      	mov	r2, r3
   1ea04:	f7ed fb7c 	bl	c100 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   1ea08:	68fb      	ldr	r3, [r7, #12]
   1ea0a:	68da      	ldr	r2, [r3, #12]
   1ea0c:	68fb      	ldr	r3, [r7, #12]
   1ea0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ea10:	425b      	negs	r3, r3
   1ea12:	441a      	add	r2, r3
   1ea14:	68fb      	ldr	r3, [r7, #12]
   1ea16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1ea18:	68fb      	ldr	r3, [r7, #12]
   1ea1a:	68da      	ldr	r2, [r3, #12]
   1ea1c:	68fb      	ldr	r3, [r7, #12]
   1ea1e:	681b      	ldr	r3, [r3, #0]
   1ea20:	429a      	cmp	r2, r3
   1ea22:	d207      	bcs.n	1ea34 <prvCopyDataToQueue+0x98>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   1ea24:	68fb      	ldr	r3, [r7, #12]
   1ea26:	685a      	ldr	r2, [r3, #4]
   1ea28:	68fb      	ldr	r3, [r7, #12]
   1ea2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ea2c:	425b      	negs	r3, r3
   1ea2e:	441a      	add	r2, r3
   1ea30:	68fb      	ldr	r3, [r7, #12]
   1ea32:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   1ea34:	687b      	ldr	r3, [r7, #4]
   1ea36:	2b02      	cmp	r3, #2
   1ea38:	d105      	bne.n	1ea46 <prvCopyDataToQueue+0xaa>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1ea3a:	697b      	ldr	r3, [r7, #20]
   1ea3c:	2b00      	cmp	r3, #0
   1ea3e:	d002      	beq.n	1ea46 <prvCopyDataToQueue+0xaa>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   1ea40:	697b      	ldr	r3, [r7, #20]
   1ea42:	3b01      	subs	r3, #1
   1ea44:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
   1ea46:	697b      	ldr	r3, [r7, #20]
   1ea48:	1c5a      	adds	r2, r3, #1
   1ea4a:	68fb      	ldr	r3, [r7, #12]
   1ea4c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   1ea4e:	693b      	ldr	r3, [r7, #16]
}
   1ea50:	4618      	mov	r0, r3
   1ea52:	3718      	adds	r7, #24
   1ea54:	46bd      	mov	sp, r7
   1ea56:	bd80      	pop	{r7, pc}

0001ea58 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   1ea58:	b580      	push	{r7, lr}
   1ea5a:	b082      	sub	sp, #8
   1ea5c:	af00      	add	r7, sp, #0
   1ea5e:	6078      	str	r0, [r7, #4]
   1ea60:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   1ea62:	687b      	ldr	r3, [r7, #4]
   1ea64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ea66:	2b00      	cmp	r3, #0
   1ea68:	d019      	beq.n	1ea9e <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   1ea6a:	687b      	ldr	r3, [r7, #4]
   1ea6c:	68da      	ldr	r2, [r3, #12]
   1ea6e:	687b      	ldr	r3, [r7, #4]
   1ea70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ea72:	441a      	add	r2, r3
   1ea74:	687b      	ldr	r3, [r7, #4]
   1ea76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   1ea78:	687b      	ldr	r3, [r7, #4]
   1ea7a:	68da      	ldr	r2, [r3, #12]
   1ea7c:	687b      	ldr	r3, [r7, #4]
   1ea7e:	685b      	ldr	r3, [r3, #4]
   1ea80:	429a      	cmp	r2, r3
   1ea82:	d303      	bcc.n	1ea8c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   1ea84:	687b      	ldr	r3, [r7, #4]
   1ea86:	681a      	ldr	r2, [r3, #0]
   1ea88:	687b      	ldr	r3, [r7, #4]
   1ea8a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   1ea8c:	687b      	ldr	r3, [r7, #4]
   1ea8e:	68da      	ldr	r2, [r3, #12]
   1ea90:	687b      	ldr	r3, [r7, #4]
   1ea92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ea94:	6838      	ldr	r0, [r7, #0]
   1ea96:	4611      	mov	r1, r2
   1ea98:	461a      	mov	r2, r3
   1ea9a:	f7ed fb31 	bl	c100 <memcpy>
	}
}
   1ea9e:	3708      	adds	r7, #8
   1eaa0:	46bd      	mov	sp, r7
   1eaa2:	bd80      	pop	{r7, pc}

0001eaa4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   1eaa4:	b580      	push	{r7, lr}
   1eaa6:	b084      	sub	sp, #16
   1eaa8:	af00      	add	r7, sp, #0
   1eaaa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   1eaac:	f7f5 fcc8 	bl	14440 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
   1eab0:	687b      	ldr	r3, [r7, #4]
   1eab2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   1eab6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1eab8:	e013      	b.n	1eae2 <prvUnlockQueue+0x3e>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1eaba:	687b      	ldr	r3, [r7, #4]
   1eabc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1eabe:	2b00      	cmp	r3, #0
   1eac0:	d00a      	beq.n	1ead8 <prvUnlockQueue+0x34>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1eac2:	687b      	ldr	r3, [r7, #4]
   1eac4:	3324      	adds	r3, #36	; 0x24
   1eac6:	4618      	mov	r0, r3
   1eac8:	f000 fd4a 	bl	1f560 <xTaskRemoveFromEventList>
   1eacc:	4603      	mov	r3, r0
   1eace:	2b00      	cmp	r3, #0
   1ead0:	d003      	beq.n	1eada <prvUnlockQueue+0x36>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
   1ead2:	f000 fe5b 	bl	1f78c <vTaskMissedYield>
   1ead6:	e000      	b.n	1eada <prvUnlockQueue+0x36>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
   1ead8:	e007      	b.n	1eaea <prvUnlockQueue+0x46>
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   1eada:	7bfb      	ldrb	r3, [r7, #15]
   1eadc:	3b01      	subs	r3, #1
   1eade:	b2db      	uxtb	r3, r3
   1eae0:	73fb      	strb	r3, [r7, #15]
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1eae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
   1eae6:	2b00      	cmp	r3, #0
   1eae8:	dce7      	bgt.n	1eaba <prvUnlockQueue+0x16>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
   1eaea:	687b      	ldr	r3, [r7, #4]
   1eaec:	22ff      	movs	r2, #255	; 0xff
   1eaee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
   1eaf2:	f7f5 fcc9 	bl	14488 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   1eaf6:	f7f5 fca3 	bl	14440 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
   1eafa:	687b      	ldr	r3, [r7, #4]
   1eafc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   1eb00:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   1eb02:	e013      	b.n	1eb2c <prvUnlockQueue+0x88>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1eb04:	687b      	ldr	r3, [r7, #4]
   1eb06:	691b      	ldr	r3, [r3, #16]
   1eb08:	2b00      	cmp	r3, #0
   1eb0a:	d00e      	beq.n	1eb2a <prvUnlockQueue+0x86>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1eb0c:	687b      	ldr	r3, [r7, #4]
   1eb0e:	3310      	adds	r3, #16
   1eb10:	4618      	mov	r0, r3
   1eb12:	f000 fd25 	bl	1f560 <xTaskRemoveFromEventList>
   1eb16:	4603      	mov	r3, r0
   1eb18:	2b00      	cmp	r3, #0
   1eb1a:	d001      	beq.n	1eb20 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
   1eb1c:	f000 fe36 	bl	1f78c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   1eb20:	7bbb      	ldrb	r3, [r7, #14]
   1eb22:	3b01      	subs	r3, #1
   1eb24:	b2db      	uxtb	r3, r3
   1eb26:	73bb      	strb	r3, [r7, #14]
   1eb28:	e000      	b.n	1eb2c <prvUnlockQueue+0x88>
			}
			else
			{
				break;
   1eb2a:	e003      	b.n	1eb34 <prvUnlockQueue+0x90>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
   1eb2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
   1eb30:	2b00      	cmp	r3, #0
   1eb32:	dce7      	bgt.n	1eb04 <prvUnlockQueue+0x60>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   1eb34:	687b      	ldr	r3, [r7, #4]
   1eb36:	22ff      	movs	r2, #255	; 0xff
   1eb38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   1eb3c:	f7f5 fca4 	bl	14488 <vPortExitCritical>
}
   1eb40:	3710      	adds	r7, #16
   1eb42:	46bd      	mov	sp, r7
   1eb44:	bd80      	pop	{r7, pc}
   1eb46:	bf00      	nop

0001eb48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   1eb48:	b580      	push	{r7, lr}
   1eb4a:	b084      	sub	sp, #16
   1eb4c:	af00      	add	r7, sp, #0
   1eb4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1eb50:	f7f5 fc76 	bl	14440 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   1eb54:	687b      	ldr	r3, [r7, #4]
   1eb56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1eb58:	2b00      	cmp	r3, #0
   1eb5a:	d102      	bne.n	1eb62 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   1eb5c:	2301      	movs	r3, #1
   1eb5e:	60fb      	str	r3, [r7, #12]
   1eb60:	e001      	b.n	1eb66 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   1eb62:	2300      	movs	r3, #0
   1eb64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1eb66:	f7f5 fc8f 	bl	14488 <vPortExitCritical>

	return xReturn;
   1eb6a:	68fb      	ldr	r3, [r7, #12]
}
   1eb6c:	4618      	mov	r0, r3
   1eb6e:	3710      	adds	r7, #16
   1eb70:	46bd      	mov	sp, r7
   1eb72:	bd80      	pop	{r7, pc}

0001eb74 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   1eb74:	b580      	push	{r7, lr}
   1eb76:	b084      	sub	sp, #16
   1eb78:	af00      	add	r7, sp, #0
   1eb7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1eb7c:	f7f5 fc60 	bl	14440 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   1eb80:	687b      	ldr	r3, [r7, #4]
   1eb82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1eb84:	687b      	ldr	r3, [r7, #4]
   1eb86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1eb88:	429a      	cmp	r2, r3
   1eb8a:	d102      	bne.n	1eb92 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   1eb8c:	2301      	movs	r3, #1
   1eb8e:	60fb      	str	r3, [r7, #12]
   1eb90:	e001      	b.n	1eb96 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   1eb92:	2300      	movs	r3, #0
   1eb94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1eb96:	f7f5 fc77 	bl	14488 <vPortExitCritical>

	return xReturn;
   1eb9a:	68fb      	ldr	r3, [r7, #12]
}
   1eb9c:	4618      	mov	r0, r3
   1eb9e:	3710      	adds	r7, #16
   1eba0:	46bd      	mov	sp, r7
   1eba2:	bd80      	pop	{r7, pc}

0001eba4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1eba4:	b580      	push	{r7, lr}
   1eba6:	b086      	sub	sp, #24
   1eba8:	af00      	add	r7, sp, #0
   1ebaa:	60f8      	str	r0, [r7, #12]
   1ebac:	60b9      	str	r1, [r7, #8]
   1ebae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1ebb0:	68fb      	ldr	r3, [r7, #12]
   1ebb2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   1ebb4:	f7f5 fc44 	bl	14440 <vPortEnterCritical>
   1ebb8:	697b      	ldr	r3, [r7, #20]
   1ebba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   1ebbe:	b2db      	uxtb	r3, r3
   1ebc0:	b25b      	sxtb	r3, r3
   1ebc2:	f1b3 3fff 	cmp.w	r3, #4294967295
   1ebc6:	d103      	bne.n	1ebd0 <vQueueWaitForMessageRestricted+0x2c>
   1ebc8:	697b      	ldr	r3, [r7, #20]
   1ebca:	2200      	movs	r2, #0
   1ebcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
   1ebd0:	697b      	ldr	r3, [r7, #20]
   1ebd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   1ebd6:	b2db      	uxtb	r3, r3
   1ebd8:	b25b      	sxtb	r3, r3
   1ebda:	f1b3 3fff 	cmp.w	r3, #4294967295
   1ebde:	d103      	bne.n	1ebe8 <vQueueWaitForMessageRestricted+0x44>
   1ebe0:	697b      	ldr	r3, [r7, #20]
   1ebe2:	2200      	movs	r2, #0
   1ebe4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   1ebe8:	f7f5 fc4e 	bl	14488 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   1ebec:	697b      	ldr	r3, [r7, #20]
   1ebee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1ebf0:	2b00      	cmp	r3, #0
   1ebf2:	d106      	bne.n	1ec02 <vQueueWaitForMessageRestricted+0x5e>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   1ebf4:	697b      	ldr	r3, [r7, #20]
   1ebf6:	3324      	adds	r3, #36	; 0x24
   1ebf8:	4618      	mov	r0, r3
   1ebfa:	68b9      	ldr	r1, [r7, #8]
   1ebfc:	687a      	ldr	r2, [r7, #4]
   1ebfe:	f000 fc8f 	bl	1f520 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   1ec02:	6978      	ldr	r0, [r7, #20]
   1ec04:	f7ff ff4e 	bl	1eaa4 <prvUnlockQueue>
	}
   1ec08:	3718      	adds	r7, #24
   1ec0a:	46bd      	mov	sp, r7
   1ec0c:	bd80      	pop	{r7, pc}
   1ec0e:	bf00      	nop

0001ec10 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
   1ec10:	b580      	push	{r7, lr}
   1ec12:	b08c      	sub	sp, #48	; 0x30
   1ec14:	af04      	add	r7, sp, #16
   1ec16:	60f8      	str	r0, [r7, #12]
   1ec18:	60b9      	str	r1, [r7, #8]
   1ec1a:	603b      	str	r3, [r7, #0]
   1ec1c:	4613      	mov	r3, r2
   1ec1e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */ // Stack grows DOWN on M4F
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1ec20:	88fb      	ldrh	r3, [r7, #6]
   1ec22:	009b      	lsls	r3, r3, #2
   1ec24:	4618      	mov	r0, r3
   1ec26:	f001 fa1d 	bl	20064 <pvPortMalloc>
   1ec2a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
   1ec2c:	697b      	ldr	r3, [r7, #20]
   1ec2e:	2b00      	cmp	r3, #0
   1ec30:	d00e      	beq.n	1ec50 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   1ec32:	204c      	movs	r0, #76	; 0x4c
   1ec34:	f001 fa16 	bl	20064 <pvPortMalloc>
   1ec38:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
   1ec3a:	69fb      	ldr	r3, [r7, #28]
   1ec3c:	2b00      	cmp	r3, #0
   1ec3e:	d003      	beq.n	1ec48 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   1ec40:	69fb      	ldr	r3, [r7, #28]
   1ec42:	697a      	ldr	r2, [r7, #20]
   1ec44:	631a      	str	r2, [r3, #48]	; 0x30
   1ec46:	e005      	b.n	1ec54 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   1ec48:	6978      	ldr	r0, [r7, #20]
   1ec4a:	f001 fa9d 	bl	20188 <vPortFree>
   1ec4e:	e001      	b.n	1ec54 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
   1ec50:	2300      	movs	r3, #0
   1ec52:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   1ec54:	69fb      	ldr	r3, [r7, #28]
   1ec56:	2b00      	cmp	r3, #0
   1ec58:	d013      	beq.n	1ec82 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   1ec5a:	88fa      	ldrh	r2, [r7, #6]
   1ec5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ec5e:	9300      	str	r3, [sp, #0]
   1ec60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ec62:	9301      	str	r3, [sp, #4]
   1ec64:	69fb      	ldr	r3, [r7, #28]
   1ec66:	9302      	str	r3, [sp, #8]
   1ec68:	2300      	movs	r3, #0
   1ec6a:	9303      	str	r3, [sp, #12]
   1ec6c:	68f8      	ldr	r0, [r7, #12]
   1ec6e:	68b9      	ldr	r1, [r7, #8]
   1ec70:	683b      	ldr	r3, [r7, #0]
   1ec72:	f000 f80f 	bl	1ec94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
   1ec76:	69f8      	ldr	r0, [r7, #28]
   1ec78:	f000 f882 	bl	1ed80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
   1ec7c:	2301      	movs	r3, #1
   1ec7e:	61bb      	str	r3, [r7, #24]
   1ec80:	e002      	b.n	1ec88 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   1ec82:	f04f 33ff 	mov.w	r3, #4294967295
   1ec86:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
   1ec88:	69bb      	ldr	r3, [r7, #24]
	}
   1ec8a:	4618      	mov	r0, r3
   1ec8c:	3720      	adds	r7, #32
   1ec8e:	46bd      	mov	sp, r7
   1ec90:	bd80      	pop	{r7, pc}
   1ec92:	bf00      	nop

0001ec94 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
   1ec94:	b580      	push	{r7, lr}
   1ec96:	b086      	sub	sp, #24
   1ec98:	af00      	add	r7, sp, #0
   1ec9a:	60f8      	str	r0, [r7, #12]
   1ec9c:	60b9      	str	r1, [r7, #8]
   1ec9e:	607a      	str	r2, [r7, #4]
   1eca0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   1eca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1eca4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1eca6:	687b      	ldr	r3, [r7, #4]
   1eca8:	009b      	lsls	r3, r3, #2
   1ecaa:	4610      	mov	r0, r2
   1ecac:	21a5      	movs	r1, #165	; 0xa5
   1ecae:	461a      	mov	r2, r3
   1ecb0:	f001 fb9c 	bl	203ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   1ecb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ecb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1ecb8:	687b      	ldr	r3, [r7, #4]
   1ecba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1ecbe:	3b01      	subs	r3, #1
   1ecc0:	009b      	lsls	r3, r3, #2
   1ecc2:	4413      	add	r3, r2
   1ecc4:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   1ecc6:	693b      	ldr	r3, [r7, #16]
   1ecc8:	f023 0307 	bic.w	r3, r3, #7
   1eccc:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   1ecce:	693b      	ldr	r3, [r7, #16]
   1ecd0:	f003 0307 	and.w	r3, r3, #7
   1ecd4:	2b00      	cmp	r3, #0
   1ecd6:	d000      	beq.n	1ecda <prvInitialiseNewTask+0x46>
   1ecd8:	e7fe      	b.n	1ecd8 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1ecda:	2300      	movs	r3, #0
   1ecdc:	617b      	str	r3, [r7, #20]
   1ecde:	e013      	b.n	1ed08 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1ece0:	68ba      	ldr	r2, [r7, #8]
   1ece2:	697b      	ldr	r3, [r7, #20]
   1ece4:	4413      	add	r3, r2
   1ece6:	7819      	ldrb	r1, [r3, #0]
   1ece8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1ecea:	697b      	ldr	r3, [r7, #20]
   1ecec:	4413      	add	r3, r2
   1ecee:	3330      	adds	r3, #48	; 0x30
   1ecf0:	460a      	mov	r2, r1
   1ecf2:	711a      	strb	r2, [r3, #4]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   1ecf4:	68ba      	ldr	r2, [r7, #8]
   1ecf6:	697b      	ldr	r3, [r7, #20]
   1ecf8:	4413      	add	r3, r2
   1ecfa:	781b      	ldrb	r3, [r3, #0]
   1ecfc:	2b00      	cmp	r3, #0
   1ecfe:	d100      	bne.n	1ed02 <prvInitialiseNewTask+0x6e>
		{
			break;
   1ed00:	e005      	b.n	1ed0e <prvInitialiseNewTask+0x7a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1ed02:	697b      	ldr	r3, [r7, #20]
   1ed04:	3301      	adds	r3, #1
   1ed06:	617b      	str	r3, [r7, #20]
   1ed08:	697b      	ldr	r3, [r7, #20]
   1ed0a:	2b0f      	cmp	r3, #15
   1ed0c:	d9e8      	bls.n	1ece0 <prvInitialiseNewTask+0x4c>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   1ed0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ed10:	2200      	movs	r2, #0
   1ed12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   1ed16:	6a3b      	ldr	r3, [r7, #32]
   1ed18:	2b03      	cmp	r3, #3
   1ed1a:	d901      	bls.n	1ed20 <prvInitialiseNewTask+0x8c>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   1ed1c:	2303      	movs	r3, #3
   1ed1e:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   1ed20:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ed22:	6a3a      	ldr	r2, [r7, #32]
   1ed24:	62da      	str	r2, [r3, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1ed26:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ed28:	3304      	adds	r3, #4
   1ed2a:	4618      	mov	r0, r3
   1ed2c:	f7ff fac0 	bl	1e2b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   1ed30:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ed32:	3318      	adds	r3, #24
   1ed34:	4618      	mov	r0, r3
   1ed36:	f7ff fabb 	bl	1e2b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   1ed3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ed3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1ed3e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1ed40:	6a3b      	ldr	r3, [r7, #32]
   1ed42:	f1c3 0204 	rsb	r2, r3, #4
   1ed46:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ed48:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   1ed4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ed4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1ed4e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   1ed50:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ed52:	2200      	movs	r2, #0
   1ed54:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1ed56:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ed58:	2200      	movs	r2, #0
   1ed5a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1ed5e:	6938      	ldr	r0, [r7, #16]
   1ed60:	68f9      	ldr	r1, [r7, #12]
   1ed62:	683a      	ldr	r2, [r7, #0]
   1ed64:	f7f5 fa70 	bl	14248 <pxPortInitialiseStack>
   1ed68:	4602      	mov	r2, r0
   1ed6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ed6c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
   1ed6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ed70:	2b00      	cmp	r3, #0
   1ed72:	d002      	beq.n	1ed7a <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   1ed74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ed76:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1ed78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1ed7a:	3718      	adds	r7, #24
   1ed7c:	46bd      	mov	sp, r7
   1ed7e:	bd80      	pop	{r7, pc}

0001ed80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   1ed80:	b580      	push	{r7, lr}
   1ed82:	b082      	sub	sp, #8
   1ed84:	af00      	add	r7, sp, #0
   1ed86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   1ed88:	f7f5 fb5a 	bl	14440 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
   1ed8c:	4b2a      	ldr	r3, [pc, #168]	; (1ee38 <prvAddNewTaskToReadyList+0xb8>)
   1ed8e:	681b      	ldr	r3, [r3, #0]
   1ed90:	3301      	adds	r3, #1
   1ed92:	4a29      	ldr	r2, [pc, #164]	; (1ee38 <prvAddNewTaskToReadyList+0xb8>)
   1ed94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
   1ed96:	4b29      	ldr	r3, [pc, #164]	; (1ee3c <prvAddNewTaskToReadyList+0xbc>)
   1ed98:	681b      	ldr	r3, [r3, #0]
   1ed9a:	2b00      	cmp	r3, #0
   1ed9c:	d109      	bne.n	1edb2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   1ed9e:	4a27      	ldr	r2, [pc, #156]	; (1ee3c <prvAddNewTaskToReadyList+0xbc>)
   1eda0:	687b      	ldr	r3, [r7, #4]
   1eda2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   1eda4:	4b24      	ldr	r3, [pc, #144]	; (1ee38 <prvAddNewTaskToReadyList+0xb8>)
   1eda6:	681b      	ldr	r3, [r3, #0]
   1eda8:	2b01      	cmp	r3, #1
   1edaa:	d110      	bne.n	1edce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   1edac:	f000 fd5e 	bl	1f86c <prvInitialiseTaskLists>
   1edb0:	e00d      	b.n	1edce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   1edb2:	4b23      	ldr	r3, [pc, #140]	; (1ee40 <prvAddNewTaskToReadyList+0xc0>)
   1edb4:	681b      	ldr	r3, [r3, #0]
   1edb6:	2b00      	cmp	r3, #0
   1edb8:	d109      	bne.n	1edce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   1edba:	4b20      	ldr	r3, [pc, #128]	; (1ee3c <prvAddNewTaskToReadyList+0xbc>)
   1edbc:	681b      	ldr	r3, [r3, #0]
   1edbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1edc0:	687b      	ldr	r3, [r7, #4]
   1edc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1edc4:	429a      	cmp	r2, r3
   1edc6:	d802      	bhi.n	1edce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
   1edc8:	4a1c      	ldr	r2, [pc, #112]	; (1ee3c <prvAddNewTaskToReadyList+0xbc>)
   1edca:	687b      	ldr	r3, [r7, #4]
   1edcc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   1edce:	4b1d      	ldr	r3, [pc, #116]	; (1ee44 <prvAddNewTaskToReadyList+0xc4>)
   1edd0:	681b      	ldr	r3, [r3, #0]
   1edd2:	3301      	adds	r3, #1
   1edd4:	4a1b      	ldr	r2, [pc, #108]	; (1ee44 <prvAddNewTaskToReadyList+0xc4>)
   1edd6:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		//prvAddTaskToReadyList( pxNewTCB );
		prvReaddTaskToReadyList( pxNewTCB );
   1edd8:	687b      	ldr	r3, [r7, #4]
   1edda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1eddc:	4b1a      	ldr	r3, [pc, #104]	; (1ee48 <prvAddNewTaskToReadyList+0xc8>)
   1edde:	681b      	ldr	r3, [r3, #0]
   1ede0:	429a      	cmp	r2, r3
   1ede2:	d903      	bls.n	1edec <prvAddNewTaskToReadyList+0x6c>
   1ede4:	687b      	ldr	r3, [r7, #4]
   1ede6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ede8:	4a17      	ldr	r2, [pc, #92]	; (1ee48 <prvAddNewTaskToReadyList+0xc8>)
   1edea:	6013      	str	r3, [r2, #0]
   1edec:	687b      	ldr	r3, [r7, #4]
   1edee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1edf0:	4613      	mov	r3, r2
   1edf2:	009b      	lsls	r3, r3, #2
   1edf4:	4413      	add	r3, r2
   1edf6:	009b      	lsls	r3, r3, #2
   1edf8:	4a14      	ldr	r2, [pc, #80]	; (1ee4c <prvAddNewTaskToReadyList+0xcc>)
   1edfa:	441a      	add	r2, r3
   1edfc:	687b      	ldr	r3, [r7, #4]
   1edfe:	3304      	adds	r3, #4
   1ee00:	4610      	mov	r0, r2
   1ee02:	4619      	mov	r1, r3
   1ee04:	f7ff fa60 	bl	1e2c8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   1ee08:	f7f5 fb3e 	bl	14488 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
   1ee0c:	4b0c      	ldr	r3, [pc, #48]	; (1ee40 <prvAddNewTaskToReadyList+0xc0>)
   1ee0e:	681b      	ldr	r3, [r3, #0]
   1ee10:	2b00      	cmp	r3, #0
   1ee12:	d00e      	beq.n	1ee32 <prvAddNewTaskToReadyList+0xb2>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   1ee14:	4b09      	ldr	r3, [pc, #36]	; (1ee3c <prvAddNewTaskToReadyList+0xbc>)
   1ee16:	681b      	ldr	r3, [r3, #0]
   1ee18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ee1a:	687b      	ldr	r3, [r7, #4]
   1ee1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ee1e:	429a      	cmp	r2, r3
   1ee20:	d207      	bcs.n	1ee32 <prvAddNewTaskToReadyList+0xb2>
		{
			taskYIELD_IF_USING_PREEMPTION();    /* Set a PendSV to request a context switch. */                             \
   1ee22:	4b0b      	ldr	r3, [pc, #44]	; (1ee50 <prvAddNewTaskToReadyList+0xd0>)
   1ee24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1ee28:	601a      	str	r2, [r3, #0]
   1ee2a:	f3bf 8f4f 	dsb	sy
   1ee2e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1ee32:	3708      	adds	r7, #8
   1ee34:	46bd      	mov	sp, r7
   1ee36:	bd80      	pop	{r7, pc}
   1ee38:	10005064 	.word	0x10005064
   1ee3c:	10004fb8 	.word	0x10004fb8
   1ee40:	10005070 	.word	0x10005070
   1ee44:	10005080 	.word	0x10005080
   1ee48:	1000506c 	.word	0x1000506c
   1ee4c:	10004fbc 	.word	0x10004fbc
   1ee50:	e000ed04 	.word	0xe000ed04

0001ee54 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
   1ee54:	b580      	push	{r7, lr}
   1ee56:	b086      	sub	sp, #24
   1ee58:	af00      	add	r7, sp, #0
   1ee5a:	6078      	str	r0, [r7, #4]
   1ee5c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
   1ee5e:	2300      	movs	r3, #0
   1ee60:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
   1ee62:	687b      	ldr	r3, [r7, #4]
   1ee64:	2b00      	cmp	r3, #0
   1ee66:	d100      	bne.n	1ee6a <vTaskDelayUntil+0x16>
   1ee68:	e7fe      	b.n	1ee68 <vTaskDelayUntil+0x14>
		configASSERT( ( xTimeIncrement > 0U ) );
   1ee6a:	683b      	ldr	r3, [r7, #0]
   1ee6c:	2b00      	cmp	r3, #0
   1ee6e:	d100      	bne.n	1ee72 <vTaskDelayUntil+0x1e>
   1ee70:	e7fe      	b.n	1ee70 <vTaskDelayUntil+0x1c>
		configASSERT( uxSchedulerSuspended == 0 );
   1ee72:	4b24      	ldr	r3, [pc, #144]	; (1ef04 <vTaskDelayUntil+0xb0>)
   1ee74:	681b      	ldr	r3, [r3, #0]
   1ee76:	2b00      	cmp	r3, #0
   1ee78:	d000      	beq.n	1ee7c <vTaskDelayUntil+0x28>
   1ee7a:	e7fe      	b.n	1ee7a <vTaskDelayUntil+0x26>

		vTaskSuspendAll();
   1ee7c:	f000 f8ea 	bl	1f054 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
   1ee80:	4b21      	ldr	r3, [pc, #132]	; (1ef08 <vTaskDelayUntil+0xb4>)
   1ee82:	681b      	ldr	r3, [r3, #0]
   1ee84:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   1ee86:	687b      	ldr	r3, [r7, #4]
   1ee88:	681a      	ldr	r2, [r3, #0]
   1ee8a:	683b      	ldr	r3, [r7, #0]
   1ee8c:	4413      	add	r3, r2
   1ee8e:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
   1ee90:	687b      	ldr	r3, [r7, #4]
   1ee92:	681a      	ldr	r2, [r3, #0]
   1ee94:	693b      	ldr	r3, [r7, #16]
   1ee96:	429a      	cmp	r2, r3
   1ee98:	d90b      	bls.n	1eeb2 <vTaskDelayUntil+0x5e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
   1ee9a:	687b      	ldr	r3, [r7, #4]
   1ee9c:	681a      	ldr	r2, [r3, #0]
   1ee9e:	68fb      	ldr	r3, [r7, #12]
   1eea0:	429a      	cmp	r2, r3
   1eea2:	d911      	bls.n	1eec8 <vTaskDelayUntil+0x74>
   1eea4:	68fa      	ldr	r2, [r7, #12]
   1eea6:	693b      	ldr	r3, [r7, #16]
   1eea8:	429a      	cmp	r2, r3
   1eeaa:	d90d      	bls.n	1eec8 <vTaskDelayUntil+0x74>
				{
					xShouldDelay = pdTRUE;
   1eeac:	2301      	movs	r3, #1
   1eeae:	617b      	str	r3, [r7, #20]
   1eeb0:	e00a      	b.n	1eec8 <vTaskDelayUntil+0x74>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
   1eeb2:	687b      	ldr	r3, [r7, #4]
   1eeb4:	681a      	ldr	r2, [r3, #0]
   1eeb6:	68fb      	ldr	r3, [r7, #12]
   1eeb8:	429a      	cmp	r2, r3
   1eeba:	d803      	bhi.n	1eec4 <vTaskDelayUntil+0x70>
   1eebc:	68fa      	ldr	r2, [r7, #12]
   1eebe:	693b      	ldr	r3, [r7, #16]
   1eec0:	429a      	cmp	r2, r3
   1eec2:	d901      	bls.n	1eec8 <vTaskDelayUntil+0x74>
				{
					xShouldDelay = pdTRUE;
   1eec4:	2301      	movs	r3, #1
   1eec6:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   1eec8:	687b      	ldr	r3, [r7, #4]
   1eeca:	68fa      	ldr	r2, [r7, #12]
   1eecc:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
   1eece:	697b      	ldr	r3, [r7, #20]
   1eed0:	2b00      	cmp	r3, #0
   1eed2:	d006      	beq.n	1eee2 <vTaskDelayUntil+0x8e>
				//traceTASK_DELAY_UNTIL( xTimeToWake );
				traceTASK_DELAY_UNTIL();

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
   1eed4:	68fa      	ldr	r2, [r7, #12]
   1eed6:	693b      	ldr	r3, [r7, #16]
   1eed8:	1ad3      	subs	r3, r2, r3
   1eeda:	4618      	mov	r0, r3
   1eedc:	2100      	movs	r1, #0
   1eede:	f000 fd5f 	bl	1f9a0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   1eee2:	f000 f8fd 	bl	1f0e0 <xTaskResumeAll>
   1eee6:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   1eee8:	68bb      	ldr	r3, [r7, #8]
   1eeea:	2b00      	cmp	r3, #0
   1eeec:	d107      	bne.n	1eefe <vTaskDelayUntil+0xaa>
		{
			portYIELD_WITHIN_API();
   1eeee:	4b07      	ldr	r3, [pc, #28]	; (1ef0c <vTaskDelayUntil+0xb8>)
   1eef0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1eef4:	601a      	str	r2, [r3, #0]
   1eef6:	f3bf 8f4f 	dsb	sy
   1eefa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1eefe:	3718      	adds	r7, #24
   1ef00:	46bd      	mov	sp, r7
   1ef02:	bd80      	pop	{r7, pc}
   1ef04:	1000508c 	.word	0x1000508c
   1ef08:	10005068 	.word	0x10005068
   1ef0c:	e000ed04 	.word	0xe000ed04

0001ef10 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
   1ef10:	b580      	push	{r7, lr}
   1ef12:	b084      	sub	sp, #16
   1ef14:	af00      	add	r7, sp, #0
   1ef16:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
   1ef18:	f7f5 fa92 	bl	14440 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   1ef1c:	687b      	ldr	r3, [r7, #4]
   1ef1e:	2b00      	cmp	r3, #0
   1ef20:	d102      	bne.n	1ef28 <vTaskSuspend+0x18>
   1ef22:	4b25      	ldr	r3, [pc, #148]	; (1efb8 <vTaskSuspend+0xa8>)
   1ef24:	681b      	ldr	r3, [r3, #0]
   1ef26:	e000      	b.n	1ef2a <vTaskSuspend+0x1a>
   1ef28:	687b      	ldr	r3, [r7, #4]
   1ef2a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1ef2c:	68fb      	ldr	r3, [r7, #12]
   1ef2e:	3304      	adds	r3, #4
   1ef30:	4618      	mov	r0, r3
   1ef32:	f7ff fa25 	bl	1e380 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1ef36:	68fb      	ldr	r3, [r7, #12]
   1ef38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1ef3a:	2b00      	cmp	r3, #0
   1ef3c:	d004      	beq.n	1ef48 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1ef3e:	68fb      	ldr	r3, [r7, #12]
   1ef40:	3318      	adds	r3, #24
   1ef42:	4618      	mov	r0, r3
   1ef44:	f7ff fa1c 	bl	1e380 <uxListRemove>
				mtCOVERAGE_TEST_MARKER();
			}
			//GEO: addition for support of SystemView Profiler
			traceMOVED_TASK_TO_SUSPENDED_LIST(pxTCB);
			//GEO: end modification
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   1ef48:	68fb      	ldr	r3, [r7, #12]
   1ef4a:	3304      	adds	r3, #4
   1ef4c:	481b      	ldr	r0, [pc, #108]	; (1efbc <vTaskSuspend+0xac>)
   1ef4e:	4619      	mov	r1, r3
   1ef50:	f7ff f9ba 	bl	1e2c8 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
   1ef54:	f7f5 fa98 	bl	14488 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
   1ef58:	4b19      	ldr	r3, [pc, #100]	; (1efc0 <vTaskSuspend+0xb0>)
   1ef5a:	681b      	ldr	r3, [r3, #0]
   1ef5c:	2b00      	cmp	r3, #0
   1ef5e:	d005      	beq.n	1ef6c <vTaskSuspend+0x5c>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
   1ef60:	f7f5 fa6e 	bl	14440 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
   1ef64:	f000 fcc2 	bl	1f8ec <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
   1ef68:	f7f5 fa8e 	bl	14488 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
   1ef6c:	4b12      	ldr	r3, [pc, #72]	; (1efb8 <vTaskSuspend+0xa8>)
   1ef6e:	681b      	ldr	r3, [r3, #0]
   1ef70:	68fa      	ldr	r2, [r7, #12]
   1ef72:	429a      	cmp	r2, r3
   1ef74:	d11d      	bne.n	1efb2 <vTaskSuspend+0xa2>
		{
			if( xSchedulerRunning != pdFALSE )
   1ef76:	4b12      	ldr	r3, [pc, #72]	; (1efc0 <vTaskSuspend+0xb0>)
   1ef78:	681b      	ldr	r3, [r3, #0]
   1ef7a:	2b00      	cmp	r3, #0
   1ef7c:	d00d      	beq.n	1ef9a <vTaskSuspend+0x8a>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
   1ef7e:	4b11      	ldr	r3, [pc, #68]	; (1efc4 <vTaskSuspend+0xb4>)
   1ef80:	681b      	ldr	r3, [r3, #0]
   1ef82:	2b00      	cmp	r3, #0
   1ef84:	d000      	beq.n	1ef88 <vTaskSuspend+0x78>
   1ef86:	e7fe      	b.n	1ef86 <vTaskSuspend+0x76>
				portYIELD_WITHIN_API();
   1ef88:	4b0f      	ldr	r3, [pc, #60]	; (1efc8 <vTaskSuspend+0xb8>)
   1ef8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1ef8e:	601a      	str	r2, [r3, #0]
   1ef90:	f3bf 8f4f 	dsb	sy
   1ef94:	f3bf 8f6f 	isb	sy
   1ef98:	e00b      	b.n	1efb2 <vTaskSuspend+0xa2>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   1ef9a:	4b08      	ldr	r3, [pc, #32]	; (1efbc <vTaskSuspend+0xac>)
   1ef9c:	681a      	ldr	r2, [r3, #0]
   1ef9e:	4b0b      	ldr	r3, [pc, #44]	; (1efcc <vTaskSuspend+0xbc>)
   1efa0:	681b      	ldr	r3, [r3, #0]
   1efa2:	429a      	cmp	r2, r3
   1efa4:	d103      	bne.n	1efae <vTaskSuspend+0x9e>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
   1efa6:	4b04      	ldr	r3, [pc, #16]	; (1efb8 <vTaskSuspend+0xa8>)
   1efa8:	2200      	movs	r2, #0
   1efaa:	601a      	str	r2, [r3, #0]
   1efac:	e001      	b.n	1efb2 <vTaskSuspend+0xa2>
				}
				else
				{
					vTaskSwitchContext();
   1efae:	f000 f9fd 	bl	1f3ac <vTaskSwitchContext>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1efb2:	3710      	adds	r7, #16
   1efb4:	46bd      	mov	sp, r7
   1efb6:	bd80      	pop	{r7, pc}
   1efb8:	10004fb8 	.word	0x10004fb8
   1efbc:	10005050 	.word	0x10005050
   1efc0:	10005070 	.word	0x10005070
   1efc4:	1000508c 	.word	0x1000508c
   1efc8:	e000ed04 	.word	0xe000ed04
   1efcc:	10005064 	.word	0x10005064

0001efd0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   1efd0:	b580      	push	{r7, lr}
   1efd2:	b084      	sub	sp, #16
   1efd4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   1efd6:	2300      	movs	r3, #0
   1efd8:	9300      	str	r3, [sp, #0]
   1efda:	4b18      	ldr	r3, [pc, #96]	; (1f03c <vTaskStartScheduler+0x6c>)
   1efdc:	9301      	str	r3, [sp, #4]
   1efde:	4818      	ldr	r0, [pc, #96]	; (1f040 <vTaskStartScheduler+0x70>)
   1efe0:	4918      	ldr	r1, [pc, #96]	; (1f044 <vTaskStartScheduler+0x74>)
   1efe2:	f44f 7280 	mov.w	r2, #256	; 0x100
   1efe6:	2300      	movs	r3, #0
   1efe8:	f7ff fe12 	bl	1ec10 <xTaskCreate>
   1efec:	6078      	str	r0, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   1efee:	687b      	ldr	r3, [r7, #4]
   1eff0:	2b01      	cmp	r3, #1
   1eff2:	d102      	bne.n	1effa <vTaskStartScheduler+0x2a>
		{
			xReturn = xTimerCreateTimerTask();
   1eff4:	f000 fd28 	bl	1fa48 <xTimerCreateTimerTask>
   1eff8:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   1effa:	687b      	ldr	r3, [r7, #4]
   1effc:	2b01      	cmp	r3, #1
   1effe:	d115      	bne.n	1f02c <vTaskStartScheduler+0x5c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
   1f000:	f04f 0380 	mov.w	r3, #128	; 0x80
   1f004:	f383 8811 	msr	BASEPRI, r3
   1f008:	f3bf 8f6f 	isb	sy
   1f00c:	f3bf 8f4f 	dsb	sy
   1f010:	603b      	str	r3, [r7, #0]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   1f012:	4b0d      	ldr	r3, [pc, #52]	; (1f048 <vTaskStartScheduler+0x78>)
   1f014:	f04f 32ff 	mov.w	r2, #4294967295
   1f018:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   1f01a:	4b0c      	ldr	r3, [pc, #48]	; (1f04c <vTaskStartScheduler+0x7c>)
   1f01c:	2201      	movs	r2, #1
   1f01e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   1f020:	4b0b      	ldr	r3, [pc, #44]	; (1f050 <vTaskStartScheduler+0x80>)
   1f022:	2200      	movs	r2, #0
   1f024:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   1f026:	f7f5 f987 	bl	14338 <xPortStartScheduler>
   1f02a:	e004      	b.n	1f036 <vTaskStartScheduler+0x66>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   1f02c:	687b      	ldr	r3, [r7, #4]
   1f02e:	f1b3 3fff 	cmp.w	r3, #4294967295
   1f032:	d100      	bne.n	1f036 <vTaskStartScheduler+0x66>
   1f034:	e7fe      	b.n	1f034 <vTaskStartScheduler+0x64>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   1f036:	3708      	adds	r7, #8
   1f038:	46bd      	mov	sp, r7
   1f03a:	bd80      	pop	{r7, pc}
   1f03c:	10005088 	.word	0x10005088
   1f040:	0001f7a5 	.word	0x0001f7a5
   1f044:	000244e4 	.word	0x000244e4
   1f048:	10005084 	.word	0x10005084
   1f04c:	10005070 	.word	0x10005070
   1f050:	10005068 	.word	0x10005068

0001f054 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   1f054:	b480      	push	{r7}
   1f056:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   1f058:	4b04      	ldr	r3, [pc, #16]	; (1f06c <vTaskSuspendAll+0x18>)
   1f05a:	681b      	ldr	r3, [r3, #0]
   1f05c:	3301      	adds	r3, #1
   1f05e:	4a03      	ldr	r2, [pc, #12]	; (1f06c <vTaskSuspendAll+0x18>)
   1f060:	6013      	str	r3, [r2, #0]
}
   1f062:	46bd      	mov	sp, r7
   1f064:	f85d 7b04 	ldr.w	r7, [sp], #4
   1f068:	4770      	bx	lr
   1f06a:	bf00      	nop
   1f06c:	1000508c 	.word	0x1000508c

0001f070 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
   1f070:	b480      	push	{r7}
   1f072:	b083      	sub	sp, #12
   1f074:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
   1f076:	2300      	movs	r3, #0
   1f078:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
   1f07a:	4b14      	ldr	r3, [pc, #80]	; (1f0cc <prvGetExpectedIdleTime+0x5c>)
   1f07c:	681b      	ldr	r3, [r3, #0]
   1f07e:	2b00      	cmp	r3, #0
   1f080:	d001      	beq.n	1f086 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
   1f082:	2301      	movs	r3, #1
   1f084:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
   1f086:	4b12      	ldr	r3, [pc, #72]	; (1f0d0 <prvGetExpectedIdleTime+0x60>)
   1f088:	681b      	ldr	r3, [r3, #0]
   1f08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f08c:	2b00      	cmp	r3, #0
   1f08e:	d002      	beq.n	1f096 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
   1f090:	2300      	movs	r3, #0
   1f092:	607b      	str	r3, [r7, #4]
   1f094:	e012      	b.n	1f0bc <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
   1f096:	4b0f      	ldr	r3, [pc, #60]	; (1f0d4 <prvGetExpectedIdleTime+0x64>)
   1f098:	681b      	ldr	r3, [r3, #0]
   1f09a:	2b01      	cmp	r3, #1
   1f09c:	d902      	bls.n	1f0a4 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
   1f09e:	2300      	movs	r3, #0
   1f0a0:	607b      	str	r3, [r7, #4]
   1f0a2:	e00b      	b.n	1f0bc <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
   1f0a4:	683b      	ldr	r3, [r7, #0]
   1f0a6:	2b00      	cmp	r3, #0
   1f0a8:	d002      	beq.n	1f0b0 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
   1f0aa:	2300      	movs	r3, #0
   1f0ac:	607b      	str	r3, [r7, #4]
   1f0ae:	e005      	b.n	1f0bc <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
   1f0b0:	4b09      	ldr	r3, [pc, #36]	; (1f0d8 <prvGetExpectedIdleTime+0x68>)
   1f0b2:	681a      	ldr	r2, [r3, #0]
   1f0b4:	4b09      	ldr	r3, [pc, #36]	; (1f0dc <prvGetExpectedIdleTime+0x6c>)
   1f0b6:	681b      	ldr	r3, [r3, #0]
   1f0b8:	1ad3      	subs	r3, r2, r3
   1f0ba:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
   1f0bc:	687b      	ldr	r3, [r7, #4]
	}
   1f0be:	4618      	mov	r0, r3
   1f0c0:	370c      	adds	r7, #12
   1f0c2:	46bd      	mov	sp, r7
   1f0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
   1f0c8:	4770      	bx	lr
   1f0ca:	bf00      	nop
   1f0cc:	1000506c 	.word	0x1000506c
   1f0d0:	10004fb8 	.word	0x10004fb8
   1f0d4:	10004fbc 	.word	0x10004fbc
   1f0d8:	10005084 	.word	0x10005084
   1f0dc:	10005068 	.word	0x10005068

0001f0e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   1f0e0:	b580      	push	{r7, lr}
   1f0e2:	b084      	sub	sp, #16
   1f0e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
   1f0e6:	2300      	movs	r3, #0
   1f0e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   1f0ea:	2300      	movs	r3, #0
   1f0ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   1f0ee:	4b3d      	ldr	r3, [pc, #244]	; (1f1e4 <xTaskResumeAll+0x104>)
   1f0f0:	681b      	ldr	r3, [r3, #0]
   1f0f2:	2b00      	cmp	r3, #0
   1f0f4:	d100      	bne.n	1f0f8 <xTaskResumeAll+0x18>
   1f0f6:	e7fe      	b.n	1f0f6 <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   1f0f8:	f7f5 f9a2 	bl	14440 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
   1f0fc:	4b39      	ldr	r3, [pc, #228]	; (1f1e4 <xTaskResumeAll+0x104>)
   1f0fe:	681b      	ldr	r3, [r3, #0]
   1f100:	3b01      	subs	r3, #1
   1f102:	4a38      	ldr	r2, [pc, #224]	; (1f1e4 <xTaskResumeAll+0x104>)
   1f104:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1f106:	4b37      	ldr	r3, [pc, #220]	; (1f1e4 <xTaskResumeAll+0x104>)
   1f108:	681b      	ldr	r3, [r3, #0]
   1f10a:	2b00      	cmp	r3, #0
   1f10c:	d162      	bne.n	1f1d4 <xTaskResumeAll+0xf4>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   1f10e:	4b36      	ldr	r3, [pc, #216]	; (1f1e8 <xTaskResumeAll+0x108>)
   1f110:	681b      	ldr	r3, [r3, #0]
   1f112:	2b00      	cmp	r3, #0
   1f114:	d05e      	beq.n	1f1d4 <xTaskResumeAll+0xf4>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1f116:	e02f      	b.n	1f178 <xTaskResumeAll+0x98>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   1f118:	4b34      	ldr	r3, [pc, #208]	; (1f1ec <xTaskResumeAll+0x10c>)
   1f11a:	68db      	ldr	r3, [r3, #12]
   1f11c:	68db      	ldr	r3, [r3, #12]
   1f11e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1f120:	68fb      	ldr	r3, [r7, #12]
   1f122:	3318      	adds	r3, #24
   1f124:	4618      	mov	r0, r3
   1f126:	f7ff f92b 	bl	1e380 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1f12a:	68fb      	ldr	r3, [r7, #12]
   1f12c:	3304      	adds	r3, #4
   1f12e:	4618      	mov	r0, r3
   1f130:	f7ff f926 	bl	1e380 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
   1f134:	68fb      	ldr	r3, [r7, #12]
   1f136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f138:	4b2d      	ldr	r3, [pc, #180]	; (1f1f0 <xTaskResumeAll+0x110>)
   1f13a:	681b      	ldr	r3, [r3, #0]
   1f13c:	429a      	cmp	r2, r3
   1f13e:	d903      	bls.n	1f148 <xTaskResumeAll+0x68>
   1f140:	68fb      	ldr	r3, [r7, #12]
   1f142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f144:	4a2a      	ldr	r2, [pc, #168]	; (1f1f0 <xTaskResumeAll+0x110>)
   1f146:	6013      	str	r3, [r2, #0]
   1f148:	68fb      	ldr	r3, [r7, #12]
   1f14a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f14c:	4613      	mov	r3, r2
   1f14e:	009b      	lsls	r3, r3, #2
   1f150:	4413      	add	r3, r2
   1f152:	009b      	lsls	r3, r3, #2
   1f154:	4a27      	ldr	r2, [pc, #156]	; (1f1f4 <xTaskResumeAll+0x114>)
   1f156:	441a      	add	r2, r3
   1f158:	68fb      	ldr	r3, [r7, #12]
   1f15a:	3304      	adds	r3, #4
   1f15c:	4610      	mov	r0, r2
   1f15e:	4619      	mov	r1, r3
   1f160:	f7ff f8b2 	bl	1e2c8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1f164:	68fb      	ldr	r3, [r7, #12]
   1f166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f168:	4b23      	ldr	r3, [pc, #140]	; (1f1f8 <xTaskResumeAll+0x118>)
   1f16a:	681b      	ldr	r3, [r3, #0]
   1f16c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f16e:	429a      	cmp	r2, r3
   1f170:	d302      	bcc.n	1f178 <xTaskResumeAll+0x98>
					{
						xYieldPending = pdTRUE;
   1f172:	4b22      	ldr	r3, [pc, #136]	; (1f1fc <xTaskResumeAll+0x11c>)
   1f174:	2201      	movs	r2, #1
   1f176:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1f178:	4b1c      	ldr	r3, [pc, #112]	; (1f1ec <xTaskResumeAll+0x10c>)
   1f17a:	681b      	ldr	r3, [r3, #0]
   1f17c:	2b00      	cmp	r3, #0
   1f17e:	d1cb      	bne.n	1f118 <xTaskResumeAll+0x38>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   1f180:	68fb      	ldr	r3, [r7, #12]
   1f182:	2b00      	cmp	r3, #0
   1f184:	d001      	beq.n	1f18a <xTaskResumeAll+0xaa>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   1f186:	f000 fbb1 	bl	1f8ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   1f18a:	4b1d      	ldr	r3, [pc, #116]	; (1f200 <xTaskResumeAll+0x120>)
   1f18c:	681b      	ldr	r3, [r3, #0]
   1f18e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   1f190:	687b      	ldr	r3, [r7, #4]
   1f192:	2b00      	cmp	r3, #0
   1f194:	d010      	beq.n	1f1b8 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   1f196:	f000 f863 	bl	1f260 <xTaskIncrementTick>
   1f19a:	4603      	mov	r3, r0
   1f19c:	2b00      	cmp	r3, #0
   1f19e:	d002      	beq.n	1f1a6 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
   1f1a0:	4b16      	ldr	r3, [pc, #88]	; (1f1fc <xTaskResumeAll+0x11c>)
   1f1a2:	2201      	movs	r2, #1
   1f1a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   1f1a6:	687b      	ldr	r3, [r7, #4]
   1f1a8:	3b01      	subs	r3, #1
   1f1aa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   1f1ac:	687b      	ldr	r3, [r7, #4]
   1f1ae:	2b00      	cmp	r3, #0
   1f1b0:	d1f1      	bne.n	1f196 <xTaskResumeAll+0xb6>

						uxPendedTicks = 0;
   1f1b2:	4b13      	ldr	r3, [pc, #76]	; (1f200 <xTaskResumeAll+0x120>)
   1f1b4:	2200      	movs	r2, #0
   1f1b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   1f1b8:	4b10      	ldr	r3, [pc, #64]	; (1f1fc <xTaskResumeAll+0x11c>)
   1f1ba:	681b      	ldr	r3, [r3, #0]
   1f1bc:	2b00      	cmp	r3, #0
   1f1be:	d009      	beq.n	1f1d4 <xTaskResumeAll+0xf4>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   1f1c0:	2301      	movs	r3, #1
   1f1c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   1f1c4:	4b0f      	ldr	r3, [pc, #60]	; (1f204 <xTaskResumeAll+0x124>)
   1f1c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1f1ca:	601a      	str	r2, [r3, #0]
   1f1cc:	f3bf 8f4f 	dsb	sy
   1f1d0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1f1d4:	f7f5 f958 	bl	14488 <vPortExitCritical>

	return xAlreadyYielded;
   1f1d8:	68bb      	ldr	r3, [r7, #8]
}
   1f1da:	4618      	mov	r0, r3
   1f1dc:	3710      	adds	r7, #16
   1f1de:	46bd      	mov	sp, r7
   1f1e0:	bd80      	pop	{r7, pc}
   1f1e2:	bf00      	nop
   1f1e4:	1000508c 	.word	0x1000508c
   1f1e8:	10005064 	.word	0x10005064
   1f1ec:	1000503c 	.word	0x1000503c
   1f1f0:	1000506c 	.word	0x1000506c
   1f1f4:	10004fbc 	.word	0x10004fbc
   1f1f8:	10004fb8 	.word	0x10004fb8
   1f1fc:	10005078 	.word	0x10005078
   1f200:	10005074 	.word	0x10005074
   1f204:	e000ed04 	.word	0xe000ed04

0001f208 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   1f208:	b480      	push	{r7}
   1f20a:	b083      	sub	sp, #12
   1f20c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   1f20e:	4b05      	ldr	r3, [pc, #20]	; (1f224 <xTaskGetTickCount+0x1c>)
   1f210:	681b      	ldr	r3, [r3, #0]
   1f212:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   1f214:	687b      	ldr	r3, [r7, #4]
}
   1f216:	4618      	mov	r0, r3
   1f218:	370c      	adds	r7, #12
   1f21a:	46bd      	mov	sp, r7
   1f21c:	f85d 7b04 	ldr.w	r7, [sp], #4
   1f220:	4770      	bx	lr
   1f222:	bf00      	nop
   1f224:	10005068 	.word	0x10005068

0001f228 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
   1f228:	b480      	push	{r7}
   1f22a:	b083      	sub	sp, #12
   1f22c:	af00      	add	r7, sp, #0
   1f22e:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
   1f230:	4b09      	ldr	r3, [pc, #36]	; (1f258 <vTaskStepTick+0x30>)
   1f232:	681a      	ldr	r2, [r3, #0]
   1f234:	687b      	ldr	r3, [r7, #4]
   1f236:	441a      	add	r2, r3
   1f238:	4b08      	ldr	r3, [pc, #32]	; (1f25c <vTaskStepTick+0x34>)
   1f23a:	681b      	ldr	r3, [r3, #0]
   1f23c:	429a      	cmp	r2, r3
   1f23e:	d900      	bls.n	1f242 <vTaskStepTick+0x1a>
   1f240:	e7fe      	b.n	1f240 <vTaskStepTick+0x18>
		xTickCount += xTicksToJump;
   1f242:	4b05      	ldr	r3, [pc, #20]	; (1f258 <vTaskStepTick+0x30>)
   1f244:	681a      	ldr	r2, [r3, #0]
   1f246:	687b      	ldr	r3, [r7, #4]
   1f248:	4413      	add	r3, r2
   1f24a:	4a03      	ldr	r2, [pc, #12]	; (1f258 <vTaskStepTick+0x30>)
   1f24c:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
   1f24e:	370c      	adds	r7, #12
   1f250:	46bd      	mov	sp, r7
   1f252:	f85d 7b04 	ldr.w	r7, [sp], #4
   1f256:	4770      	bx	lr
   1f258:	10005068 	.word	0x10005068
   1f25c:	10005084 	.word	0x10005084

0001f260 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   1f260:	b580      	push	{r7, lr}
   1f262:	b086      	sub	sp, #24
   1f264:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   1f266:	2300      	movs	r3, #0
   1f268:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1f26a:	4b45      	ldr	r3, [pc, #276]	; (1f380 <xTaskIncrementTick+0x120>)
   1f26c:	681b      	ldr	r3, [r3, #0]
   1f26e:	2b00      	cmp	r3, #0
   1f270:	d175      	bne.n	1f35e <xTaskIncrementTick+0xfe>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
   1f272:	4b44      	ldr	r3, [pc, #272]	; (1f384 <xTaskIncrementTick+0x124>)
   1f274:	681b      	ldr	r3, [r3, #0]
   1f276:	3301      	adds	r3, #1
   1f278:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   1f27a:	4a42      	ldr	r2, [pc, #264]	; (1f384 <xTaskIncrementTick+0x124>)
   1f27c:	693b      	ldr	r3, [r7, #16]
   1f27e:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
   1f280:	693b      	ldr	r3, [r7, #16]
   1f282:	2b00      	cmp	r3, #0
   1f284:	d116      	bne.n	1f2b4 <xTaskIncrementTick+0x54>
		{
			taskSWITCH_DELAYED_LISTS();
   1f286:	4b40      	ldr	r3, [pc, #256]	; (1f388 <xTaskIncrementTick+0x128>)
   1f288:	681b      	ldr	r3, [r3, #0]
   1f28a:	681b      	ldr	r3, [r3, #0]
   1f28c:	2b00      	cmp	r3, #0
   1f28e:	d000      	beq.n	1f292 <xTaskIncrementTick+0x32>
   1f290:	e7fe      	b.n	1f290 <xTaskIncrementTick+0x30>
   1f292:	4b3d      	ldr	r3, [pc, #244]	; (1f388 <xTaskIncrementTick+0x128>)
   1f294:	681b      	ldr	r3, [r3, #0]
   1f296:	60fb      	str	r3, [r7, #12]
   1f298:	4b3c      	ldr	r3, [pc, #240]	; (1f38c <xTaskIncrementTick+0x12c>)
   1f29a:	681b      	ldr	r3, [r3, #0]
   1f29c:	4a3a      	ldr	r2, [pc, #232]	; (1f388 <xTaskIncrementTick+0x128>)
   1f29e:	6013      	str	r3, [r2, #0]
   1f2a0:	4a3a      	ldr	r2, [pc, #232]	; (1f38c <xTaskIncrementTick+0x12c>)
   1f2a2:	68fb      	ldr	r3, [r7, #12]
   1f2a4:	6013      	str	r3, [r2, #0]
   1f2a6:	4b3a      	ldr	r3, [pc, #232]	; (1f390 <xTaskIncrementTick+0x130>)
   1f2a8:	681b      	ldr	r3, [r3, #0]
   1f2aa:	3301      	adds	r3, #1
   1f2ac:	4a38      	ldr	r2, [pc, #224]	; (1f390 <xTaskIncrementTick+0x130>)
   1f2ae:	6013      	str	r3, [r2, #0]
   1f2b0:	f000 fb1c 	bl	1f8ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   1f2b4:	4b37      	ldr	r3, [pc, #220]	; (1f394 <xTaskIncrementTick+0x134>)
   1f2b6:	681b      	ldr	r3, [r3, #0]
   1f2b8:	693a      	ldr	r2, [r7, #16]
   1f2ba:	429a      	cmp	r2, r3
   1f2bc:	d34e      	bcc.n	1f35c <xTaskIncrementTick+0xfc>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1f2be:	4b32      	ldr	r3, [pc, #200]	; (1f388 <xTaskIncrementTick+0x128>)
   1f2c0:	681b      	ldr	r3, [r3, #0]
   1f2c2:	681b      	ldr	r3, [r3, #0]
   1f2c4:	2b00      	cmp	r3, #0
   1f2c6:	d101      	bne.n	1f2cc <xTaskIncrementTick+0x6c>
   1f2c8:	2301      	movs	r3, #1
   1f2ca:	e000      	b.n	1f2ce <xTaskIncrementTick+0x6e>
   1f2cc:	2300      	movs	r3, #0
   1f2ce:	2b00      	cmp	r3, #0
   1f2d0:	d004      	beq.n	1f2dc <xTaskIncrementTick+0x7c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1f2d2:	4b30      	ldr	r3, [pc, #192]	; (1f394 <xTaskIncrementTick+0x134>)
   1f2d4:	f04f 32ff 	mov.w	r2, #4294967295
   1f2d8:	601a      	str	r2, [r3, #0]
					break;
   1f2da:	e03f      	b.n	1f35c <xTaskIncrementTick+0xfc>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1f2dc:	4b2a      	ldr	r3, [pc, #168]	; (1f388 <xTaskIncrementTick+0x128>)
   1f2de:	681b      	ldr	r3, [r3, #0]
   1f2e0:	68db      	ldr	r3, [r3, #12]
   1f2e2:	68db      	ldr	r3, [r3, #12]
   1f2e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   1f2e6:	68bb      	ldr	r3, [r7, #8]
   1f2e8:	685b      	ldr	r3, [r3, #4]
   1f2ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
   1f2ec:	693a      	ldr	r2, [r7, #16]
   1f2ee:	687b      	ldr	r3, [r7, #4]
   1f2f0:	429a      	cmp	r2, r3
   1f2f2:	d203      	bcs.n	1f2fc <xTaskIncrementTick+0x9c>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   1f2f4:	4a27      	ldr	r2, [pc, #156]	; (1f394 <xTaskIncrementTick+0x134>)
   1f2f6:	687b      	ldr	r3, [r7, #4]
   1f2f8:	6013      	str	r3, [r2, #0]
						break;
   1f2fa:	e02f      	b.n	1f35c <xTaskIncrementTick+0xfc>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1f2fc:	68bb      	ldr	r3, [r7, #8]
   1f2fe:	3304      	adds	r3, #4
   1f300:	4618      	mov	r0, r3
   1f302:	f7ff f83d 	bl	1e380 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1f306:	68bb      	ldr	r3, [r7, #8]
   1f308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1f30a:	2b00      	cmp	r3, #0
   1f30c:	d004      	beq.n	1f318 <xTaskIncrementTick+0xb8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1f30e:	68bb      	ldr	r3, [r7, #8]
   1f310:	3318      	adds	r3, #24
   1f312:	4618      	mov	r0, r3
   1f314:	f7ff f834 	bl	1e380 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   1f318:	68bb      	ldr	r3, [r7, #8]
   1f31a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f31c:	4b1e      	ldr	r3, [pc, #120]	; (1f398 <xTaskIncrementTick+0x138>)
   1f31e:	681b      	ldr	r3, [r3, #0]
   1f320:	429a      	cmp	r2, r3
   1f322:	d903      	bls.n	1f32c <xTaskIncrementTick+0xcc>
   1f324:	68bb      	ldr	r3, [r7, #8]
   1f326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f328:	4a1b      	ldr	r2, [pc, #108]	; (1f398 <xTaskIncrementTick+0x138>)
   1f32a:	6013      	str	r3, [r2, #0]
   1f32c:	68bb      	ldr	r3, [r7, #8]
   1f32e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f330:	4613      	mov	r3, r2
   1f332:	009b      	lsls	r3, r3, #2
   1f334:	4413      	add	r3, r2
   1f336:	009b      	lsls	r3, r3, #2
   1f338:	4a18      	ldr	r2, [pc, #96]	; (1f39c <xTaskIncrementTick+0x13c>)
   1f33a:	441a      	add	r2, r3
   1f33c:	68bb      	ldr	r3, [r7, #8]
   1f33e:	3304      	adds	r3, #4
   1f340:	4610      	mov	r0, r2
   1f342:	4619      	mov	r1, r3
   1f344:	f7fe ffc0 	bl	1e2c8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1f348:	68bb      	ldr	r3, [r7, #8]
   1f34a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f34c:	4b14      	ldr	r3, [pc, #80]	; (1f3a0 <xTaskIncrementTick+0x140>)
   1f34e:	681b      	ldr	r3, [r3, #0]
   1f350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f352:	429a      	cmp	r2, r3
   1f354:	d301      	bcc.n	1f35a <xTaskIncrementTick+0xfa>
						{
							xSwitchRequired = pdTRUE;
   1f356:	2301      	movs	r3, #1
   1f358:	617b      	str	r3, [r7, #20]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
   1f35a:	e7b0      	b.n	1f2be <xTaskIncrementTick+0x5e>
   1f35c:	e004      	b.n	1f368 <xTaskIncrementTick+0x108>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   1f35e:	4b11      	ldr	r3, [pc, #68]	; (1f3a4 <xTaskIncrementTick+0x144>)
   1f360:	681b      	ldr	r3, [r3, #0]
   1f362:	3301      	adds	r3, #1
   1f364:	4a0f      	ldr	r2, [pc, #60]	; (1f3a4 <xTaskIncrementTick+0x144>)
   1f366:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   1f368:	4b0f      	ldr	r3, [pc, #60]	; (1f3a8 <xTaskIncrementTick+0x148>)
   1f36a:	681b      	ldr	r3, [r3, #0]
   1f36c:	2b00      	cmp	r3, #0
   1f36e:	d001      	beq.n	1f374 <xTaskIncrementTick+0x114>
		{
			xSwitchRequired = pdTRUE;
   1f370:	2301      	movs	r3, #1
   1f372:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   1f374:	697b      	ldr	r3, [r7, #20]
}
   1f376:	4618      	mov	r0, r3
   1f378:	3718      	adds	r7, #24
   1f37a:	46bd      	mov	sp, r7
   1f37c:	bd80      	pop	{r7, pc}
   1f37e:	bf00      	nop
   1f380:	1000508c 	.word	0x1000508c
   1f384:	10005068 	.word	0x10005068
   1f388:	10005034 	.word	0x10005034
   1f38c:	10005038 	.word	0x10005038
   1f390:	1000507c 	.word	0x1000507c
   1f394:	10005084 	.word	0x10005084
   1f398:	1000506c 	.word	0x1000506c
   1f39c:	10004fbc 	.word	0x10004fbc
   1f3a0:	10004fb8 	.word	0x10004fb8
   1f3a4:	10005074 	.word	0x10005074
   1f3a8:	10005078 	.word	0x10005078

0001f3ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   1f3ac:	b580      	push	{r7, lr}
   1f3ae:	b084      	sub	sp, #16
   1f3b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   1f3b2:	4b35      	ldr	r3, [pc, #212]	; (1f488 <vTaskSwitchContext+0xdc>)
   1f3b4:	681b      	ldr	r3, [r3, #0]
   1f3b6:	2b00      	cmp	r3, #0
   1f3b8:	d003      	beq.n	1f3c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   1f3ba:	4b34      	ldr	r3, [pc, #208]	; (1f48c <vTaskSwitchContext+0xe0>)
   1f3bc:	2201      	movs	r2, #1
   1f3be:	601a      	str	r2, [r3, #0]
   1f3c0:	e05e      	b.n	1f480 <vTaskSwitchContext+0xd4>
	}
	else
	{
		xYieldPending = pdFALSE;
   1f3c2:	4b32      	ldr	r3, [pc, #200]	; (1f48c <vTaskSwitchContext+0xe0>)
   1f3c4:	2200      	movs	r2, #0
   1f3c6:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
   1f3c8:	4b31      	ldr	r3, [pc, #196]	; (1f490 <vTaskSwitchContext+0xe4>)
   1f3ca:	681b      	ldr	r3, [r3, #0]
   1f3cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1f3ce:	60bb      	str	r3, [r7, #8]
   1f3d0:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
   1f3d4:	607b      	str	r3, [r7, #4]
   1f3d6:	68bb      	ldr	r3, [r7, #8]
   1f3d8:	681a      	ldr	r2, [r3, #0]
   1f3da:	687b      	ldr	r3, [r7, #4]
   1f3dc:	429a      	cmp	r2, r3
   1f3de:	d111      	bne.n	1f404 <vTaskSwitchContext+0x58>
   1f3e0:	68bb      	ldr	r3, [r7, #8]
   1f3e2:	3304      	adds	r3, #4
   1f3e4:	681a      	ldr	r2, [r3, #0]
   1f3e6:	687b      	ldr	r3, [r7, #4]
   1f3e8:	429a      	cmp	r2, r3
   1f3ea:	d10b      	bne.n	1f404 <vTaskSwitchContext+0x58>
   1f3ec:	68bb      	ldr	r3, [r7, #8]
   1f3ee:	3308      	adds	r3, #8
   1f3f0:	681a      	ldr	r2, [r3, #0]
   1f3f2:	687b      	ldr	r3, [r7, #4]
   1f3f4:	429a      	cmp	r2, r3
   1f3f6:	d105      	bne.n	1f404 <vTaskSwitchContext+0x58>
   1f3f8:	68bb      	ldr	r3, [r7, #8]
   1f3fa:	330c      	adds	r3, #12
   1f3fc:	681a      	ldr	r2, [r3, #0]
   1f3fe:	687b      	ldr	r3, [r7, #4]
   1f400:	429a      	cmp	r2, r3
   1f402:	d008      	beq.n	1f416 <vTaskSwitchContext+0x6a>
   1f404:	4b22      	ldr	r3, [pc, #136]	; (1f490 <vTaskSwitchContext+0xe4>)
   1f406:	681a      	ldr	r2, [r3, #0]
   1f408:	4b21      	ldr	r3, [pc, #132]	; (1f490 <vTaskSwitchContext+0xe4>)
   1f40a:	681b      	ldr	r3, [r3, #0]
   1f40c:	3334      	adds	r3, #52	; 0x34
   1f40e:	4610      	mov	r0, r2
   1f410:	4619      	mov	r1, r3
   1f412:	f7fb fd09 	bl	1ae28 <vApplicationStackOverflowHook>

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
   1f416:	4b1f      	ldr	r3, [pc, #124]	; (1f494 <vTaskSwitchContext+0xe8>)
   1f418:	681b      	ldr	r3, [r3, #0]
   1f41a:	60fb      	str	r3, [r7, #12]
   1f41c:	e006      	b.n	1f42c <vTaskSwitchContext+0x80>
   1f41e:	68fb      	ldr	r3, [r7, #12]
   1f420:	2b00      	cmp	r3, #0
   1f422:	d100      	bne.n	1f426 <vTaskSwitchContext+0x7a>
   1f424:	e7fe      	b.n	1f424 <vTaskSwitchContext+0x78>
   1f426:	68fb      	ldr	r3, [r7, #12]
   1f428:	3b01      	subs	r3, #1
   1f42a:	60fb      	str	r3, [r7, #12]
   1f42c:	491a      	ldr	r1, [pc, #104]	; (1f498 <vTaskSwitchContext+0xec>)
   1f42e:	68fa      	ldr	r2, [r7, #12]
   1f430:	4613      	mov	r3, r2
   1f432:	009b      	lsls	r3, r3, #2
   1f434:	4413      	add	r3, r2
   1f436:	009b      	lsls	r3, r3, #2
   1f438:	440b      	add	r3, r1
   1f43a:	681b      	ldr	r3, [r3, #0]
   1f43c:	2b00      	cmp	r3, #0
   1f43e:	d0ee      	beq.n	1f41e <vTaskSwitchContext+0x72>
   1f440:	68fa      	ldr	r2, [r7, #12]
   1f442:	4613      	mov	r3, r2
   1f444:	009b      	lsls	r3, r3, #2
   1f446:	4413      	add	r3, r2
   1f448:	009b      	lsls	r3, r3, #2
   1f44a:	4a13      	ldr	r2, [pc, #76]	; (1f498 <vTaskSwitchContext+0xec>)
   1f44c:	4413      	add	r3, r2
   1f44e:	603b      	str	r3, [r7, #0]
   1f450:	683b      	ldr	r3, [r7, #0]
   1f452:	685b      	ldr	r3, [r3, #4]
   1f454:	685a      	ldr	r2, [r3, #4]
   1f456:	683b      	ldr	r3, [r7, #0]
   1f458:	605a      	str	r2, [r3, #4]
   1f45a:	683b      	ldr	r3, [r7, #0]
   1f45c:	685a      	ldr	r2, [r3, #4]
   1f45e:	683b      	ldr	r3, [r7, #0]
   1f460:	3308      	adds	r3, #8
   1f462:	429a      	cmp	r2, r3
   1f464:	d104      	bne.n	1f470 <vTaskSwitchContext+0xc4>
   1f466:	683b      	ldr	r3, [r7, #0]
   1f468:	685b      	ldr	r3, [r3, #4]
   1f46a:	685a      	ldr	r2, [r3, #4]
   1f46c:	683b      	ldr	r3, [r7, #0]
   1f46e:	605a      	str	r2, [r3, #4]
   1f470:	683b      	ldr	r3, [r7, #0]
   1f472:	685b      	ldr	r3, [r3, #4]
   1f474:	68db      	ldr	r3, [r3, #12]
   1f476:	4a06      	ldr	r2, [pc, #24]	; (1f490 <vTaskSwitchContext+0xe4>)
   1f478:	6013      	str	r3, [r2, #0]
   1f47a:	4a06      	ldr	r2, [pc, #24]	; (1f494 <vTaskSwitchContext+0xe8>)
   1f47c:	68fb      	ldr	r3, [r7, #12]
   1f47e:	6013      	str	r3, [r2, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   1f480:	3710      	adds	r7, #16
   1f482:	46bd      	mov	sp, r7
   1f484:	bd80      	pop	{r7, pc}
   1f486:	bf00      	nop
   1f488:	1000508c 	.word	0x1000508c
   1f48c:	10005078 	.word	0x10005078
   1f490:	10004fb8 	.word	0x10004fb8
   1f494:	1000506c 	.word	0x1000506c
   1f498:	10004fbc 	.word	0x10004fbc

0001f49c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   1f49c:	b580      	push	{r7, lr}
   1f49e:	b082      	sub	sp, #8
   1f4a0:	af00      	add	r7, sp, #0
   1f4a2:	6078      	str	r0, [r7, #4]
   1f4a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
   1f4a6:	687b      	ldr	r3, [r7, #4]
   1f4a8:	2b00      	cmp	r3, #0
   1f4aa:	d100      	bne.n	1f4ae <vTaskPlaceOnEventList+0x12>
   1f4ac:	e7fe      	b.n	1f4ac <vTaskPlaceOnEventList+0x10>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1f4ae:	4b07      	ldr	r3, [pc, #28]	; (1f4cc <vTaskPlaceOnEventList+0x30>)
   1f4b0:	681b      	ldr	r3, [r3, #0]
   1f4b2:	3318      	adds	r3, #24
   1f4b4:	6878      	ldr	r0, [r7, #4]
   1f4b6:	4619      	mov	r1, r3
   1f4b8:	f7fe ff2a 	bl	1e310 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   1f4bc:	6838      	ldr	r0, [r7, #0]
   1f4be:	2101      	movs	r1, #1
   1f4c0:	f000 fa6e 	bl	1f9a0 <prvAddCurrentTaskToDelayedList>
}
   1f4c4:	3708      	adds	r7, #8
   1f4c6:	46bd      	mov	sp, r7
   1f4c8:	bd80      	pop	{r7, pc}
   1f4ca:	bf00      	nop
   1f4cc:	10004fb8 	.word	0x10004fb8

0001f4d0 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
   1f4d0:	b580      	push	{r7, lr}
   1f4d2:	b084      	sub	sp, #16
   1f4d4:	af00      	add	r7, sp, #0
   1f4d6:	60f8      	str	r0, [r7, #12]
   1f4d8:	60b9      	str	r1, [r7, #8]
   1f4da:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
   1f4dc:	68fb      	ldr	r3, [r7, #12]
   1f4de:	2b00      	cmp	r3, #0
   1f4e0:	d100      	bne.n	1f4e4 <vTaskPlaceOnUnorderedEventList+0x14>
   1f4e2:	e7fe      	b.n	1f4e2 <vTaskPlaceOnUnorderedEventList+0x12>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
   1f4e4:	4b0c      	ldr	r3, [pc, #48]	; (1f518 <vTaskPlaceOnUnorderedEventList+0x48>)
   1f4e6:	681b      	ldr	r3, [r3, #0]
   1f4e8:	2b00      	cmp	r3, #0
   1f4ea:	d100      	bne.n	1f4ee <vTaskPlaceOnUnorderedEventList+0x1e>
   1f4ec:	e7fe      	b.n	1f4ec <vTaskPlaceOnUnorderedEventList+0x1c>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
   1f4ee:	4b0b      	ldr	r3, [pc, #44]	; (1f51c <vTaskPlaceOnUnorderedEventList+0x4c>)
   1f4f0:	681b      	ldr	r3, [r3, #0]
   1f4f2:	68ba      	ldr	r2, [r7, #8]
   1f4f4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
   1f4f8:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1f4fa:	4b08      	ldr	r3, [pc, #32]	; (1f51c <vTaskPlaceOnUnorderedEventList+0x4c>)
   1f4fc:	681b      	ldr	r3, [r3, #0]
   1f4fe:	3318      	adds	r3, #24
   1f500:	68f8      	ldr	r0, [r7, #12]
   1f502:	4619      	mov	r1, r3
   1f504:	f7fe fee0 	bl	1e2c8 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   1f508:	6878      	ldr	r0, [r7, #4]
   1f50a:	2101      	movs	r1, #1
   1f50c:	f000 fa48 	bl	1f9a0 <prvAddCurrentTaskToDelayedList>
}
   1f510:	3710      	adds	r7, #16
   1f512:	46bd      	mov	sp, r7
   1f514:	bd80      	pop	{r7, pc}
   1f516:	bf00      	nop
   1f518:	1000508c 	.word	0x1000508c
   1f51c:	10004fb8 	.word	0x10004fb8

0001f520 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1f520:	b580      	push	{r7, lr}
   1f522:	b084      	sub	sp, #16
   1f524:	af00      	add	r7, sp, #0
   1f526:	60f8      	str	r0, [r7, #12]
   1f528:	60b9      	str	r1, [r7, #8]
   1f52a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
   1f52c:	68fb      	ldr	r3, [r7, #12]
   1f52e:	2b00      	cmp	r3, #0
   1f530:	d100      	bne.n	1f534 <vTaskPlaceOnEventListRestricted+0x14>
   1f532:	e7fe      	b.n	1f532 <vTaskPlaceOnEventListRestricted+0x12>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1f534:	4b09      	ldr	r3, [pc, #36]	; (1f55c <vTaskPlaceOnEventListRestricted+0x3c>)
   1f536:	681b      	ldr	r3, [r3, #0]
   1f538:	3318      	adds	r3, #24
   1f53a:	68f8      	ldr	r0, [r7, #12]
   1f53c:	4619      	mov	r1, r3
   1f53e:	f7fe fec3 	bl	1e2c8 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   1f542:	687b      	ldr	r3, [r7, #4]
   1f544:	2b00      	cmp	r3, #0
   1f546:	d002      	beq.n	1f54e <vTaskPlaceOnEventListRestricted+0x2e>
		{
			xTicksToWait = portMAX_DELAY;
   1f548:	f04f 33ff 	mov.w	r3, #4294967295
   1f54c:	60bb      	str	r3, [r7, #8]
		}

//		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   1f54e:	68b8      	ldr	r0, [r7, #8]
   1f550:	6879      	ldr	r1, [r7, #4]
   1f552:	f000 fa25 	bl	1f9a0 <prvAddCurrentTaskToDelayedList>
	}
   1f556:	3710      	adds	r7, #16
   1f558:	46bd      	mov	sp, r7
   1f55a:	bd80      	pop	{r7, pc}
   1f55c:	10004fb8 	.word	0x10004fb8

0001f560 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   1f560:	b580      	push	{r7, lr}
   1f562:	b084      	sub	sp, #16
   1f564:	af00      	add	r7, sp, #0
   1f566:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   1f568:	687b      	ldr	r3, [r7, #4]
   1f56a:	68db      	ldr	r3, [r3, #12]
   1f56c:	68db      	ldr	r3, [r3, #12]
   1f56e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   1f570:	68bb      	ldr	r3, [r7, #8]
   1f572:	2b00      	cmp	r3, #0
   1f574:	d100      	bne.n	1f578 <xTaskRemoveFromEventList+0x18>
   1f576:	e7fe      	b.n	1f576 <xTaskRemoveFromEventList+0x16>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   1f578:	68bb      	ldr	r3, [r7, #8]
   1f57a:	3318      	adds	r3, #24
   1f57c:	4618      	mov	r0, r3
   1f57e:	f7fe feff 	bl	1e380 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1f582:	4b1f      	ldr	r3, [pc, #124]	; (1f600 <xTaskRemoveFromEventList+0xa0>)
   1f584:	681b      	ldr	r3, [r3, #0]
   1f586:	2b00      	cmp	r3, #0
   1f588:	d11d      	bne.n	1f5c6 <xTaskRemoveFromEventList+0x66>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   1f58a:	68bb      	ldr	r3, [r7, #8]
   1f58c:	3304      	adds	r3, #4
   1f58e:	4618      	mov	r0, r3
   1f590:	f7fe fef6 	bl	1e380 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
   1f594:	68bb      	ldr	r3, [r7, #8]
   1f596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f598:	4b1a      	ldr	r3, [pc, #104]	; (1f604 <xTaskRemoveFromEventList+0xa4>)
   1f59a:	681b      	ldr	r3, [r3, #0]
   1f59c:	429a      	cmp	r2, r3
   1f59e:	d903      	bls.n	1f5a8 <xTaskRemoveFromEventList+0x48>
   1f5a0:	68bb      	ldr	r3, [r7, #8]
   1f5a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f5a4:	4a17      	ldr	r2, [pc, #92]	; (1f604 <xTaskRemoveFromEventList+0xa4>)
   1f5a6:	6013      	str	r3, [r2, #0]
   1f5a8:	68bb      	ldr	r3, [r7, #8]
   1f5aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f5ac:	4613      	mov	r3, r2
   1f5ae:	009b      	lsls	r3, r3, #2
   1f5b0:	4413      	add	r3, r2
   1f5b2:	009b      	lsls	r3, r3, #2
   1f5b4:	4a14      	ldr	r2, [pc, #80]	; (1f608 <xTaskRemoveFromEventList+0xa8>)
   1f5b6:	441a      	add	r2, r3
   1f5b8:	68bb      	ldr	r3, [r7, #8]
   1f5ba:	3304      	adds	r3, #4
   1f5bc:	4610      	mov	r0, r2
   1f5be:	4619      	mov	r1, r3
   1f5c0:	f7fe fe82 	bl	1e2c8 <vListInsertEnd>
   1f5c4:	e005      	b.n	1f5d2 <xTaskRemoveFromEventList+0x72>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   1f5c6:	68bb      	ldr	r3, [r7, #8]
   1f5c8:	3318      	adds	r3, #24
   1f5ca:	4810      	ldr	r0, [pc, #64]	; (1f60c <xTaskRemoveFromEventList+0xac>)
   1f5cc:	4619      	mov	r1, r3
   1f5ce:	f7fe fe7b 	bl	1e2c8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   1f5d2:	68bb      	ldr	r3, [r7, #8]
   1f5d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f5d6:	4b0e      	ldr	r3, [pc, #56]	; (1f610 <xTaskRemoveFromEventList+0xb0>)
   1f5d8:	681b      	ldr	r3, [r3, #0]
   1f5da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f5dc:	429a      	cmp	r2, r3
   1f5de:	d905      	bls.n	1f5ec <xTaskRemoveFromEventList+0x8c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   1f5e0:	2301      	movs	r3, #1
   1f5e2:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   1f5e4:	4b0b      	ldr	r3, [pc, #44]	; (1f614 <xTaskRemoveFromEventList+0xb4>)
   1f5e6:	2201      	movs	r2, #1
   1f5e8:	601a      	str	r2, [r3, #0]
   1f5ea:	e001      	b.n	1f5f0 <xTaskRemoveFromEventList+0x90>
	}
	else
	{
		xReturn = pdFALSE;
   1f5ec:	2300      	movs	r3, #0
   1f5ee:	60fb      	str	r3, [r7, #12]
		normally left unchanged, because it is automatically reset to a new
		value when the tick count equals xNextTaskUnblockTime.  However if
		tickless idling is used it might be more important to enter sleep mode
		at the earliest possible time - so reset xNextTaskUnblockTime here to
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
   1f5f0:	f000 f97c 	bl	1f8ec <prvResetNextTaskUnblockTime>
	}
	#endif

	return xReturn;
   1f5f4:	68fb      	ldr	r3, [r7, #12]
}
   1f5f6:	4618      	mov	r0, r3
   1f5f8:	3710      	adds	r7, #16
   1f5fa:	46bd      	mov	sp, r7
   1f5fc:	bd80      	pop	{r7, pc}
   1f5fe:	bf00      	nop
   1f600:	1000508c 	.word	0x1000508c
   1f604:	1000506c 	.word	0x1000506c
   1f608:	10004fbc 	.word	0x10004fbc
   1f60c:	1000503c 	.word	0x1000503c
   1f610:	10004fb8 	.word	0x10004fb8
   1f614:	10005078 	.word	0x10005078

0001f618 <xTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
   1f618:	b580      	push	{r7, lr}
   1f61a:	b084      	sub	sp, #16
   1f61c:	af00      	add	r7, sp, #0
   1f61e:	6078      	str	r0, [r7, #4]
   1f620:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;
BaseType_t xReturn;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
   1f622:	4b22      	ldr	r3, [pc, #136]	; (1f6ac <xTaskRemoveFromUnorderedEventList+0x94>)
   1f624:	681b      	ldr	r3, [r3, #0]
   1f626:	2b00      	cmp	r3, #0
   1f628:	d100      	bne.n	1f62c <xTaskRemoveFromUnorderedEventList+0x14>
   1f62a:	e7fe      	b.n	1f62a <xTaskRemoveFromUnorderedEventList+0x12>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
   1f62c:	683b      	ldr	r3, [r7, #0]
   1f62e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
   1f632:	687b      	ldr	r3, [r7, #4]
   1f634:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
   1f636:	687b      	ldr	r3, [r7, #4]
   1f638:	68db      	ldr	r3, [r3, #12]
   1f63a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   1f63c:	68bb      	ldr	r3, [r7, #8]
   1f63e:	2b00      	cmp	r3, #0
   1f640:	d100      	bne.n	1f644 <xTaskRemoveFromUnorderedEventList+0x2c>
   1f642:	e7fe      	b.n	1f642 <xTaskRemoveFromUnorderedEventList+0x2a>
	( void ) uxListRemove( pxEventListItem );
   1f644:	6878      	ldr	r0, [r7, #4]
   1f646:	f7fe fe9b 	bl	1e380 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   1f64a:	68bb      	ldr	r3, [r7, #8]
   1f64c:	3304      	adds	r3, #4
   1f64e:	4618      	mov	r0, r3
   1f650:	f7fe fe96 	bl	1e380 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
   1f654:	68bb      	ldr	r3, [r7, #8]
   1f656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f658:	4b15      	ldr	r3, [pc, #84]	; (1f6b0 <xTaskRemoveFromUnorderedEventList+0x98>)
   1f65a:	681b      	ldr	r3, [r3, #0]
   1f65c:	429a      	cmp	r2, r3
   1f65e:	d903      	bls.n	1f668 <xTaskRemoveFromUnorderedEventList+0x50>
   1f660:	68bb      	ldr	r3, [r7, #8]
   1f662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f664:	4a12      	ldr	r2, [pc, #72]	; (1f6b0 <xTaskRemoveFromUnorderedEventList+0x98>)
   1f666:	6013      	str	r3, [r2, #0]
   1f668:	68bb      	ldr	r3, [r7, #8]
   1f66a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f66c:	4613      	mov	r3, r2
   1f66e:	009b      	lsls	r3, r3, #2
   1f670:	4413      	add	r3, r2
   1f672:	009b      	lsls	r3, r3, #2
   1f674:	4a0f      	ldr	r2, [pc, #60]	; (1f6b4 <xTaskRemoveFromUnorderedEventList+0x9c>)
   1f676:	441a      	add	r2, r3
   1f678:	68bb      	ldr	r3, [r7, #8]
   1f67a:	3304      	adds	r3, #4
   1f67c:	4610      	mov	r0, r2
   1f67e:	4619      	mov	r1, r3
   1f680:	f7fe fe22 	bl	1e2c8 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   1f684:	68bb      	ldr	r3, [r7, #8]
   1f686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f688:	4b0b      	ldr	r3, [pc, #44]	; (1f6b8 <xTaskRemoveFromUnorderedEventList+0xa0>)
   1f68a:	681b      	ldr	r3, [r3, #0]
   1f68c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f68e:	429a      	cmp	r2, r3
   1f690:	d905      	bls.n	1f69e <xTaskRemoveFromUnorderedEventList+0x86>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
   1f692:	2301      	movs	r3, #1
   1f694:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   1f696:	4b09      	ldr	r3, [pc, #36]	; (1f6bc <xTaskRemoveFromUnorderedEventList+0xa4>)
   1f698:	2201      	movs	r2, #1
   1f69a:	601a      	str	r2, [r3, #0]
   1f69c:	e001      	b.n	1f6a2 <xTaskRemoveFromUnorderedEventList+0x8a>
	}
	else
	{
		xReturn = pdFALSE;
   1f69e:	2300      	movs	r3, #0
   1f6a0:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   1f6a2:	68fb      	ldr	r3, [r7, #12]
}
   1f6a4:	4618      	mov	r0, r3
   1f6a6:	3710      	adds	r7, #16
   1f6a8:	46bd      	mov	sp, r7
   1f6aa:	bd80      	pop	{r7, pc}
   1f6ac:	1000508c 	.word	0x1000508c
   1f6b0:	1000506c 	.word	0x1000506c
   1f6b4:	10004fbc 	.word	0x10004fbc
   1f6b8:	10004fb8 	.word	0x10004fb8
   1f6bc:	10005078 	.word	0x10005078

0001f6c0 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1f6c0:	b480      	push	{r7}
   1f6c2:	b083      	sub	sp, #12
   1f6c4:	af00      	add	r7, sp, #0
   1f6c6:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
   1f6c8:	687b      	ldr	r3, [r7, #4]
   1f6ca:	2b00      	cmp	r3, #0
   1f6cc:	d100      	bne.n	1f6d0 <vTaskSetTimeOutState+0x10>
   1f6ce:	e7fe      	b.n	1f6ce <vTaskSetTimeOutState+0xe>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   1f6d0:	4b06      	ldr	r3, [pc, #24]	; (1f6ec <vTaskSetTimeOutState+0x2c>)
   1f6d2:	681a      	ldr	r2, [r3, #0]
   1f6d4:	687b      	ldr	r3, [r7, #4]
   1f6d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   1f6d8:	4b05      	ldr	r3, [pc, #20]	; (1f6f0 <vTaskSetTimeOutState+0x30>)
   1f6da:	681a      	ldr	r2, [r3, #0]
   1f6dc:	687b      	ldr	r3, [r7, #4]
   1f6de:	605a      	str	r2, [r3, #4]
}
   1f6e0:	370c      	adds	r7, #12
   1f6e2:	46bd      	mov	sp, r7
   1f6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
   1f6e8:	4770      	bx	lr
   1f6ea:	bf00      	nop
   1f6ec:	1000507c 	.word	0x1000507c
   1f6f0:	10005068 	.word	0x10005068

0001f6f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   1f6f4:	b580      	push	{r7, lr}
   1f6f6:	b084      	sub	sp, #16
   1f6f8:	af00      	add	r7, sp, #0
   1f6fa:	6078      	str	r0, [r7, #4]
   1f6fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   1f6fe:	687b      	ldr	r3, [r7, #4]
   1f700:	2b00      	cmp	r3, #0
   1f702:	d100      	bne.n	1f706 <xTaskCheckForTimeOut+0x12>
   1f704:	e7fe      	b.n	1f704 <xTaskCheckForTimeOut+0x10>
	configASSERT( pxTicksToWait );
   1f706:	683b      	ldr	r3, [r7, #0]
   1f708:	2b00      	cmp	r3, #0
   1f70a:	d100      	bne.n	1f70e <xTaskCheckForTimeOut+0x1a>
   1f70c:	e7fe      	b.n	1f70c <xTaskCheckForTimeOut+0x18>

	taskENTER_CRITICAL();
   1f70e:	f7f4 fe97 	bl	14440 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   1f712:	4b1c      	ldr	r3, [pc, #112]	; (1f784 <xTaskCheckForTimeOut+0x90>)
   1f714:	681b      	ldr	r3, [r3, #0]
   1f716:	60bb      	str	r3, [r7, #8]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   1f718:	683b      	ldr	r3, [r7, #0]
   1f71a:	681b      	ldr	r3, [r3, #0]
   1f71c:	f1b3 3fff 	cmp.w	r3, #4294967295
   1f720:	d102      	bne.n	1f728 <xTaskCheckForTimeOut+0x34>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   1f722:	2300      	movs	r3, #0
   1f724:	60fb      	str	r3, [r7, #12]
   1f726:	e026      	b.n	1f776 <xTaskCheckForTimeOut+0x82>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   1f728:	687b      	ldr	r3, [r7, #4]
   1f72a:	681a      	ldr	r2, [r3, #0]
   1f72c:	4b16      	ldr	r3, [pc, #88]	; (1f788 <xTaskCheckForTimeOut+0x94>)
   1f72e:	681b      	ldr	r3, [r3, #0]
   1f730:	429a      	cmp	r2, r3
   1f732:	d007      	beq.n	1f744 <xTaskCheckForTimeOut+0x50>
   1f734:	687b      	ldr	r3, [r7, #4]
   1f736:	685a      	ldr	r2, [r3, #4]
   1f738:	68bb      	ldr	r3, [r7, #8]
   1f73a:	429a      	cmp	r2, r3
   1f73c:	d802      	bhi.n	1f744 <xTaskCheckForTimeOut+0x50>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   1f73e:	2301      	movs	r3, #1
   1f740:	60fb      	str	r3, [r7, #12]
   1f742:	e018      	b.n	1f776 <xTaskCheckForTimeOut+0x82>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   1f744:	687b      	ldr	r3, [r7, #4]
   1f746:	685b      	ldr	r3, [r3, #4]
   1f748:	68ba      	ldr	r2, [r7, #8]
   1f74a:	1ad2      	subs	r2, r2, r3
   1f74c:	683b      	ldr	r3, [r7, #0]
   1f74e:	681b      	ldr	r3, [r3, #0]
   1f750:	429a      	cmp	r2, r3
   1f752:	d20e      	bcs.n	1f772 <xTaskCheckForTimeOut+0x7e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
   1f754:	683b      	ldr	r3, [r7, #0]
   1f756:	681a      	ldr	r2, [r3, #0]
   1f758:	687b      	ldr	r3, [r7, #4]
   1f75a:	6859      	ldr	r1, [r3, #4]
   1f75c:	68bb      	ldr	r3, [r7, #8]
   1f75e:	1acb      	subs	r3, r1, r3
   1f760:	441a      	add	r2, r3
   1f762:	683b      	ldr	r3, [r7, #0]
   1f764:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
   1f766:	6878      	ldr	r0, [r7, #4]
   1f768:	f7ff ffaa 	bl	1f6c0 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
   1f76c:	2300      	movs	r3, #0
   1f76e:	60fb      	str	r3, [r7, #12]
   1f770:	e001      	b.n	1f776 <xTaskCheckForTimeOut+0x82>
		}
		else
		{
			xReturn = pdTRUE;
   1f772:	2301      	movs	r3, #1
   1f774:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1f776:	f7f4 fe87 	bl	14488 <vPortExitCritical>

	return xReturn;
   1f77a:	68fb      	ldr	r3, [r7, #12]
}
   1f77c:	4618      	mov	r0, r3
   1f77e:	3710      	adds	r7, #16
   1f780:	46bd      	mov	sp, r7
   1f782:	bd80      	pop	{r7, pc}
   1f784:	10005068 	.word	0x10005068
   1f788:	1000507c 	.word	0x1000507c

0001f78c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   1f78c:	b480      	push	{r7}
   1f78e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   1f790:	4b03      	ldr	r3, [pc, #12]	; (1f7a0 <vTaskMissedYield+0x14>)
   1f792:	2201      	movs	r2, #1
   1f794:	601a      	str	r2, [r3, #0]
}
   1f796:	46bd      	mov	sp, r7
   1f798:	f85d 7b04 	ldr.w	r7, [sp], #4
   1f79c:	4770      	bx	lr
   1f79e:	bf00      	nop
   1f7a0:	10005078 	.word	0x10005078

0001f7a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   1f7a4:	b580      	push	{r7, lr}
   1f7a6:	b084      	sub	sp, #16
   1f7a8:	af00      	add	r7, sp, #0
   1f7aa:	6078      	str	r0, [r7, #4]
	for( ;; )
	{
	
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   1f7ac:	f000 f898 	bl	1f8e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   1f7b0:	4b13      	ldr	r3, [pc, #76]	; (1f800 <prvIdleTask+0x5c>)
   1f7b2:	681b      	ldr	r3, [r3, #0]
   1f7b4:	2b01      	cmp	r3, #1
   1f7b6:	d907      	bls.n	1f7c8 <prvIdleTask+0x24>
			{
				taskYIELD();
   1f7b8:	4b12      	ldr	r3, [pc, #72]	; (1f804 <prvIdleTask+0x60>)
   1f7ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1f7be:	601a      	str	r2, [r3, #0]
   1f7c0:	f3bf 8f4f 	dsb	sy
   1f7c4:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
   1f7c8:	f7ff fc52 	bl	1f070 <prvGetExpectedIdleTime>
   1f7cc:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
   1f7ce:	68fb      	ldr	r3, [r7, #12]
   1f7d0:	2b01      	cmp	r3, #1
   1f7d2:	d913      	bls.n	1f7fc <prvIdleTask+0x58>
			{
				vTaskSuspendAll();
   1f7d4:	f7ff fc3e 	bl	1f054 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
   1f7d8:	4b0b      	ldr	r3, [pc, #44]	; (1f808 <prvIdleTask+0x64>)
   1f7da:	681a      	ldr	r2, [r3, #0]
   1f7dc:	4b0b      	ldr	r3, [pc, #44]	; (1f80c <prvIdleTask+0x68>)
   1f7de:	681b      	ldr	r3, [r3, #0]
   1f7e0:	429a      	cmp	r2, r3
   1f7e2:	d200      	bcs.n	1f7e6 <prvIdleTask+0x42>
   1f7e4:	e7fe      	b.n	1f7e4 <prvIdleTask+0x40>
					xExpectedIdleTime = prvGetExpectedIdleTime();
   1f7e6:	f7ff fc43 	bl	1f070 <prvGetExpectedIdleTime>
   1f7ea:	60f8      	str	r0, [r7, #12]

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
   1f7ec:	68fb      	ldr	r3, [r7, #12]
   1f7ee:	2b01      	cmp	r3, #1
   1f7f0:	d902      	bls.n	1f7f8 <prvIdleTask+0x54>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
   1f7f2:	68f8      	ldr	r0, [r7, #12]
   1f7f4:	f7f4 fee8 	bl	145c8 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
   1f7f8:	f7ff fc72 	bl	1f0e0 <xTaskResumeAll>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
   1f7fc:	e7d6      	b.n	1f7ac <prvIdleTask+0x8>
   1f7fe:	bf00      	nop
   1f800:	10004fbc 	.word	0x10004fbc
   1f804:	e000ed04 	.word	0xe000ed04
   1f808:	10005084 	.word	0x10005084
   1f80c:	10005068 	.word	0x10005068

0001f810 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
   1f810:	b480      	push	{r7}
   1f812:	b083      	sub	sp, #12
   1f814:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
   1f816:	2301      	movs	r3, #1
   1f818:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
   1f81a:	2301      	movs	r3, #1
   1f81c:	71fb      	strb	r3, [r7, #7]

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
   1f81e:	4b0f      	ldr	r3, [pc, #60]	; (1f85c <eTaskConfirmSleepModeStatus+0x4c>)
   1f820:	681b      	ldr	r3, [r3, #0]
   1f822:	2b00      	cmp	r3, #0
   1f824:	d002      	beq.n	1f82c <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
   1f826:	2300      	movs	r3, #0
   1f828:	71fb      	strb	r3, [r7, #7]
   1f82a:	e010      	b.n	1f84e <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
   1f82c:	4b0c      	ldr	r3, [pc, #48]	; (1f860 <eTaskConfirmSleepModeStatus+0x50>)
   1f82e:	681b      	ldr	r3, [r3, #0]
   1f830:	2b00      	cmp	r3, #0
   1f832:	d002      	beq.n	1f83a <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
   1f834:	2300      	movs	r3, #0
   1f836:	71fb      	strb	r3, [r7, #7]
   1f838:	e009      	b.n	1f84e <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
   1f83a:	4b0a      	ldr	r3, [pc, #40]	; (1f864 <eTaskConfirmSleepModeStatus+0x54>)
   1f83c:	681a      	ldr	r2, [r3, #0]
   1f83e:	4b0a      	ldr	r3, [pc, #40]	; (1f868 <eTaskConfirmSleepModeStatus+0x58>)
   1f840:	6819      	ldr	r1, [r3, #0]
   1f842:	683b      	ldr	r3, [r7, #0]
   1f844:	1acb      	subs	r3, r1, r3
   1f846:	429a      	cmp	r2, r3
   1f848:	d101      	bne.n	1f84e <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
   1f84a:	2302      	movs	r3, #2
   1f84c:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
   1f84e:	79fb      	ldrb	r3, [r7, #7]
	}
   1f850:	4618      	mov	r0, r3
   1f852:	370c      	adds	r7, #12
   1f854:	46bd      	mov	sp, r7
   1f856:	f85d 7b04 	ldr.w	r7, [sp], #4
   1f85a:	4770      	bx	lr
   1f85c:	1000503c 	.word	0x1000503c
   1f860:	10005078 	.word	0x10005078
   1f864:	10005050 	.word	0x10005050
   1f868:	10005064 	.word	0x10005064

0001f86c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   1f86c:	b580      	push	{r7, lr}
   1f86e:	b082      	sub	sp, #8
   1f870:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1f872:	2300      	movs	r3, #0
   1f874:	607b      	str	r3, [r7, #4]
   1f876:	e00c      	b.n	1f892 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   1f878:	687a      	ldr	r2, [r7, #4]
   1f87a:	4613      	mov	r3, r2
   1f87c:	009b      	lsls	r3, r3, #2
   1f87e:	4413      	add	r3, r2
   1f880:	009b      	lsls	r3, r3, #2
   1f882:	4a10      	ldr	r2, [pc, #64]	; (1f8c4 <prvInitialiseTaskLists+0x58>)
   1f884:	4413      	add	r3, r2
   1f886:	4618      	mov	r0, r3
   1f888:	f7fe fcf2 	bl	1e270 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1f88c:	687b      	ldr	r3, [r7, #4]
   1f88e:	3301      	adds	r3, #1
   1f890:	607b      	str	r3, [r7, #4]
   1f892:	687b      	ldr	r3, [r7, #4]
   1f894:	2b03      	cmp	r3, #3
   1f896:	d9ef      	bls.n	1f878 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
   1f898:	480b      	ldr	r0, [pc, #44]	; (1f8c8 <prvInitialiseTaskLists+0x5c>)
   1f89a:	f7fe fce9 	bl	1e270 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
   1f89e:	480b      	ldr	r0, [pc, #44]	; (1f8cc <prvInitialiseTaskLists+0x60>)
   1f8a0:	f7fe fce6 	bl	1e270 <vListInitialise>
	vListInitialise( &xPendingReadyList );
   1f8a4:	480a      	ldr	r0, [pc, #40]	; (1f8d0 <prvInitialiseTaskLists+0x64>)
   1f8a6:	f7fe fce3 	bl	1e270 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   1f8aa:	480a      	ldr	r0, [pc, #40]	; (1f8d4 <prvInitialiseTaskLists+0x68>)
   1f8ac:	f7fe fce0 	bl	1e270 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   1f8b0:	4b09      	ldr	r3, [pc, #36]	; (1f8d8 <prvInitialiseTaskLists+0x6c>)
   1f8b2:	4a05      	ldr	r2, [pc, #20]	; (1f8c8 <prvInitialiseTaskLists+0x5c>)
   1f8b4:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   1f8b6:	4b09      	ldr	r3, [pc, #36]	; (1f8dc <prvInitialiseTaskLists+0x70>)
   1f8b8:	4a04      	ldr	r2, [pc, #16]	; (1f8cc <prvInitialiseTaskLists+0x60>)
   1f8ba:	601a      	str	r2, [r3, #0]
}
   1f8bc:	3708      	adds	r7, #8
   1f8be:	46bd      	mov	sp, r7
   1f8c0:	bd80      	pop	{r7, pc}
   1f8c2:	bf00      	nop
   1f8c4:	10004fbc 	.word	0x10004fbc
   1f8c8:	1000500c 	.word	0x1000500c
   1f8cc:	10005020 	.word	0x10005020
   1f8d0:	1000503c 	.word	0x1000503c
   1f8d4:	10005050 	.word	0x10005050
   1f8d8:	10005034 	.word	0x10005034
   1f8dc:	10005038 	.word	0x10005038

0001f8e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   1f8e0:	b480      	push	{r7}
   1f8e2:	af00      	add	r7, sp, #0
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   1f8e4:	46bd      	mov	sp, r7
   1f8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
   1f8ea:	4770      	bx	lr

0001f8ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   1f8ec:	b480      	push	{r7}
   1f8ee:	b083      	sub	sp, #12
   1f8f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1f8f2:	4b0e      	ldr	r3, [pc, #56]	; (1f92c <prvResetNextTaskUnblockTime+0x40>)
   1f8f4:	681b      	ldr	r3, [r3, #0]
   1f8f6:	681b      	ldr	r3, [r3, #0]
   1f8f8:	2b00      	cmp	r3, #0
   1f8fa:	d101      	bne.n	1f900 <prvResetNextTaskUnblockTime+0x14>
   1f8fc:	2301      	movs	r3, #1
   1f8fe:	e000      	b.n	1f902 <prvResetNextTaskUnblockTime+0x16>
   1f900:	2300      	movs	r3, #0
   1f902:	2b00      	cmp	r3, #0
   1f904:	d004      	beq.n	1f910 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   1f906:	4b0a      	ldr	r3, [pc, #40]	; (1f930 <prvResetNextTaskUnblockTime+0x44>)
   1f908:	f04f 32ff 	mov.w	r2, #4294967295
   1f90c:	601a      	str	r2, [r3, #0]
   1f90e:	e008      	b.n	1f922 <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1f910:	4b06      	ldr	r3, [pc, #24]	; (1f92c <prvResetNextTaskUnblockTime+0x40>)
   1f912:	681b      	ldr	r3, [r3, #0]
   1f914:	68db      	ldr	r3, [r3, #12]
   1f916:	68db      	ldr	r3, [r3, #12]
   1f918:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1f91a:	687b      	ldr	r3, [r7, #4]
   1f91c:	685b      	ldr	r3, [r3, #4]
   1f91e:	4a04      	ldr	r2, [pc, #16]	; (1f930 <prvResetNextTaskUnblockTime+0x44>)
   1f920:	6013      	str	r3, [r2, #0]
	}
}
   1f922:	370c      	adds	r7, #12
   1f924:	46bd      	mov	sp, r7
   1f926:	f85d 7b04 	ldr.w	r7, [sp], #4
   1f92a:	4770      	bx	lr
   1f92c:	10005034 	.word	0x10005034
   1f930:	10005084 	.word	0x10005084

0001f934 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   1f934:	b480      	push	{r7}
   1f936:	b083      	sub	sp, #12
   1f938:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   1f93a:	4b0b      	ldr	r3, [pc, #44]	; (1f968 <xTaskGetSchedulerState+0x34>)
   1f93c:	681b      	ldr	r3, [r3, #0]
   1f93e:	2b00      	cmp	r3, #0
   1f940:	d102      	bne.n	1f948 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   1f942:	2301      	movs	r3, #1
   1f944:	607b      	str	r3, [r7, #4]
   1f946:	e008      	b.n	1f95a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1f948:	4b08      	ldr	r3, [pc, #32]	; (1f96c <xTaskGetSchedulerState+0x38>)
   1f94a:	681b      	ldr	r3, [r3, #0]
   1f94c:	2b00      	cmp	r3, #0
   1f94e:	d102      	bne.n	1f956 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   1f950:	2302      	movs	r3, #2
   1f952:	607b      	str	r3, [r7, #4]
   1f954:	e001      	b.n	1f95a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   1f956:	2300      	movs	r3, #0
   1f958:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   1f95a:	687b      	ldr	r3, [r7, #4]
	}
   1f95c:	4618      	mov	r0, r3
   1f95e:	370c      	adds	r7, #12
   1f960:	46bd      	mov	sp, r7
   1f962:	f85d 7b04 	ldr.w	r7, [sp], #4
   1f966:	4770      	bx	lr
   1f968:	10005070 	.word	0x10005070
   1f96c:	1000508c 	.word	0x1000508c

0001f970 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
   1f970:	b480      	push	{r7}
   1f972:	b083      	sub	sp, #12
   1f974:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
   1f976:	4b09      	ldr	r3, [pc, #36]	; (1f99c <uxTaskResetEventItemValue+0x2c>)
   1f978:	681b      	ldr	r3, [r3, #0]
   1f97a:	699b      	ldr	r3, [r3, #24]
   1f97c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1f97e:	4b07      	ldr	r3, [pc, #28]	; (1f99c <uxTaskResetEventItemValue+0x2c>)
   1f980:	681b      	ldr	r3, [r3, #0]
   1f982:	4a06      	ldr	r2, [pc, #24]	; (1f99c <uxTaskResetEventItemValue+0x2c>)
   1f984:	6812      	ldr	r2, [r2, #0]
   1f986:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   1f988:	f1c2 0204 	rsb	r2, r2, #4
   1f98c:	619a      	str	r2, [r3, #24]

	return uxReturn;
   1f98e:	687b      	ldr	r3, [r7, #4]
}
   1f990:	4618      	mov	r0, r3
   1f992:	370c      	adds	r7, #12
   1f994:	46bd      	mov	sp, r7
   1f996:	f85d 7b04 	ldr.w	r7, [sp], #4
   1f99a:	4770      	bx	lr
   1f99c:	10004fb8 	.word	0x10004fb8

0001f9a0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   1f9a0:	b580      	push	{r7, lr}
   1f9a2:	b084      	sub	sp, #16
   1f9a4:	af00      	add	r7, sp, #0
   1f9a6:	6078      	str	r0, [r7, #4]
   1f9a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   1f9aa:	4b21      	ldr	r3, [pc, #132]	; (1fa30 <prvAddCurrentTaskToDelayedList+0x90>)
   1f9ac:	681b      	ldr	r3, [r3, #0]
   1f9ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1f9b0:	4b20      	ldr	r3, [pc, #128]	; (1fa34 <prvAddCurrentTaskToDelayedList+0x94>)
   1f9b2:	681b      	ldr	r3, [r3, #0]
   1f9b4:	3304      	adds	r3, #4
   1f9b6:	4618      	mov	r0, r3
   1f9b8:	f7fe fce2 	bl	1e380 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   1f9bc:	687b      	ldr	r3, [r7, #4]
   1f9be:	f1b3 3fff 	cmp.w	r3, #4294967295
   1f9c2:	d10a      	bne.n	1f9da <prvAddCurrentTaskToDelayedList+0x3a>
   1f9c4:	683b      	ldr	r3, [r7, #0]
   1f9c6:	2b00      	cmp	r3, #0
   1f9c8:	d007      	beq.n	1f9da <prvAddCurrentTaskToDelayedList+0x3a>
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
		  //GEO: addition for support of SystemView Profiler
		  traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
		  //GEO: end addition
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1f9ca:	4b1a      	ldr	r3, [pc, #104]	; (1fa34 <prvAddCurrentTaskToDelayedList+0x94>)
   1f9cc:	681b      	ldr	r3, [r3, #0]
   1f9ce:	3304      	adds	r3, #4
   1f9d0:	4819      	ldr	r0, [pc, #100]	; (1fa38 <prvAddCurrentTaskToDelayedList+0x98>)
   1f9d2:	4619      	mov	r1, r3
   1f9d4:	f7fe fc78 	bl	1e2c8 <vListInsertEnd>
   1f9d8:	e026      	b.n	1fa28 <prvAddCurrentTaskToDelayedList+0x88>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
   1f9da:	68fa      	ldr	r2, [r7, #12]
   1f9dc:	687b      	ldr	r3, [r7, #4]
   1f9de:	4413      	add	r3, r2
   1f9e0:	60bb      	str	r3, [r7, #8]

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   1f9e2:	4b14      	ldr	r3, [pc, #80]	; (1fa34 <prvAddCurrentTaskToDelayedList+0x94>)
   1f9e4:	681b      	ldr	r3, [r3, #0]
   1f9e6:	68ba      	ldr	r2, [r7, #8]
   1f9e8:	605a      	str	r2, [r3, #4]

			if( xTimeToWake < xConstTickCount )
   1f9ea:	68ba      	ldr	r2, [r7, #8]
   1f9ec:	68fb      	ldr	r3, [r7, #12]
   1f9ee:	429a      	cmp	r2, r3
   1f9f0:	d209      	bcs.n	1fa06 <prvAddCurrentTaskToDelayedList+0x66>
			  //GEO: addition for support of SystemView Profiler
			  traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
			  //GEO: end addition
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1f9f2:	4b12      	ldr	r3, [pc, #72]	; (1fa3c <prvAddCurrentTaskToDelayedList+0x9c>)
   1f9f4:	681a      	ldr	r2, [r3, #0]
   1f9f6:	4b0f      	ldr	r3, [pc, #60]	; (1fa34 <prvAddCurrentTaskToDelayedList+0x94>)
   1f9f8:	681b      	ldr	r3, [r3, #0]
   1f9fa:	3304      	adds	r3, #4
   1f9fc:	4610      	mov	r0, r2
   1f9fe:	4619      	mov	r1, r3
   1fa00:	f7fe fc86 	bl	1e310 <vListInsert>
   1fa04:	e010      	b.n	1fa28 <prvAddCurrentTaskToDelayedList+0x88>
			  //GEO: addition for support of SystemView Profiler
			  traceMOVED_TASK_TO_DELAYED_LIST();
                          //GEO: end addition
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1fa06:	4b0e      	ldr	r3, [pc, #56]	; (1fa40 <prvAddCurrentTaskToDelayedList+0xa0>)
   1fa08:	681a      	ldr	r2, [r3, #0]
   1fa0a:	4b0a      	ldr	r3, [pc, #40]	; (1fa34 <prvAddCurrentTaskToDelayedList+0x94>)
   1fa0c:	681b      	ldr	r3, [r3, #0]
   1fa0e:	3304      	adds	r3, #4
   1fa10:	4610      	mov	r0, r2
   1fa12:	4619      	mov	r1, r3
   1fa14:	f7fe fc7c 	bl	1e310 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
   1fa18:	4b0a      	ldr	r3, [pc, #40]	; (1fa44 <prvAddCurrentTaskToDelayedList+0xa4>)
   1fa1a:	681b      	ldr	r3, [r3, #0]
   1fa1c:	68ba      	ldr	r2, [r7, #8]
   1fa1e:	429a      	cmp	r2, r3
   1fa20:	d202      	bcs.n	1fa28 <prvAddCurrentTaskToDelayedList+0x88>
				{
					xNextTaskUnblockTime = xTimeToWake;
   1fa22:	4a08      	ldr	r2, [pc, #32]	; (1fa44 <prvAddCurrentTaskToDelayedList+0xa4>)
   1fa24:	68bb      	ldr	r3, [r7, #8]
   1fa26:	6013      	str	r3, [r2, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   1fa28:	3710      	adds	r7, #16
   1fa2a:	46bd      	mov	sp, r7
   1fa2c:	bd80      	pop	{r7, pc}
   1fa2e:	bf00      	nop
   1fa30:	10005068 	.word	0x10005068
   1fa34:	10004fb8 	.word	0x10004fb8
   1fa38:	10005050 	.word	0x10005050
   1fa3c:	10005038 	.word	0x10005038
   1fa40:	10005034 	.word	0x10005034
   1fa44:	10005084 	.word	0x10005084

0001fa48 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   1fa48:	b580      	push	{r7, lr}
   1fa4a:	b084      	sub	sp, #16
   1fa4c:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
   1fa4e:	2300      	movs	r3, #0
   1fa50:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   1fa52:	f000 fabb 	bl	1ffcc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
   1fa56:	4b0c      	ldr	r3, [pc, #48]	; (1fa88 <xTimerCreateTimerTask+0x40>)
   1fa58:	681b      	ldr	r3, [r3, #0]
   1fa5a:	2b00      	cmp	r3, #0
   1fa5c:	d00b      	beq.n	1fa76 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   1fa5e:	2303      	movs	r3, #3
   1fa60:	9300      	str	r3, [sp, #0]
   1fa62:	4b0a      	ldr	r3, [pc, #40]	; (1fa8c <xTimerCreateTimerTask+0x44>)
   1fa64:	9301      	str	r3, [sp, #4]
   1fa66:	480a      	ldr	r0, [pc, #40]	; (1fa90 <xTimerCreateTimerTask+0x48>)
   1fa68:	490a      	ldr	r1, [pc, #40]	; (1fa94 <xTimerCreateTimerTask+0x4c>)
   1fa6a:	f44f 7280 	mov.w	r2, #256	; 0x100
   1fa6e:	2300      	movs	r3, #0
   1fa70:	f7ff f8ce 	bl	1ec10 <xTaskCreate>
   1fa74:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   1fa76:	687b      	ldr	r3, [r7, #4]
   1fa78:	2b00      	cmp	r3, #0
   1fa7a:	d100      	bne.n	1fa7e <xTimerCreateTimerTask+0x36>
   1fa7c:	e7fe      	b.n	1fa7c <xTimerCreateTimerTask+0x34>
	return xReturn;
   1fa7e:	687b      	ldr	r3, [r7, #4]
}
   1fa80:	4618      	mov	r0, r3
   1fa82:	3708      	adds	r7, #8
   1fa84:	46bd      	mov	sp, r7
   1fa86:	bd80      	pop	{r7, pc}
   1fa88:	100050c0 	.word	0x100050c0
   1fa8c:	100050c4 	.word	0x100050c4
   1fa90:	0001fc25 	.word	0x0001fc25
   1fa94:	000244ec 	.word	0x000244ec

0001fa98 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
   1fa98:	b580      	push	{r7, lr}
   1fa9a:	b088      	sub	sp, #32
   1fa9c:	af02      	add	r7, sp, #8
   1fa9e:	60f8      	str	r0, [r7, #12]
   1faa0:	60b9      	str	r1, [r7, #8]
   1faa2:	607a      	str	r2, [r7, #4]
   1faa4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
   1faa6:	2028      	movs	r0, #40	; 0x28
   1faa8:	f000 fadc 	bl	20064 <pvPortMalloc>
   1faac:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
   1faae:	697b      	ldr	r3, [r7, #20]
   1fab0:	2b00      	cmp	r3, #0
   1fab2:	d009      	beq.n	1fac8 <xTimerCreate+0x30>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
   1fab4:	6a3b      	ldr	r3, [r7, #32]
   1fab6:	9300      	str	r3, [sp, #0]
   1fab8:	697b      	ldr	r3, [r7, #20]
   1faba:	9301      	str	r3, [sp, #4]
   1fabc:	68f8      	ldr	r0, [r7, #12]
   1fabe:	68b9      	ldr	r1, [r7, #8]
   1fac0:	687a      	ldr	r2, [r7, #4]
   1fac2:	683b      	ldr	r3, [r7, #0]
   1fac4:	f000 f806 	bl	1fad4 <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
   1fac8:	697b      	ldr	r3, [r7, #20]
	}
   1faca:	4618      	mov	r0, r3
   1facc:	3718      	adds	r7, #24
   1face:	46bd      	mov	sp, r7
   1fad0:	bd80      	pop	{r7, pc}
   1fad2:	bf00      	nop

0001fad4 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
   1fad4:	b580      	push	{r7, lr}
   1fad6:	b084      	sub	sp, #16
   1fad8:	af00      	add	r7, sp, #0
   1fada:	60f8      	str	r0, [r7, #12]
   1fadc:	60b9      	str	r1, [r7, #8]
   1fade:	607a      	str	r2, [r7, #4]
   1fae0:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
   1fae2:	68bb      	ldr	r3, [r7, #8]
   1fae4:	2b00      	cmp	r3, #0
   1fae6:	d100      	bne.n	1faea <prvInitialiseNewTimer+0x16>
   1fae8:	e7fe      	b.n	1fae8 <prvInitialiseNewTimer+0x14>

	if( pxNewTimer != NULL )
   1faea:	69fb      	ldr	r3, [r7, #28]
   1faec:	2b00      	cmp	r3, #0
   1faee:	d015      	beq.n	1fb1c <prvInitialiseNewTimer+0x48>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
   1faf0:	f000 fa6c 	bl	1ffcc <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
   1faf4:	69fb      	ldr	r3, [r7, #28]
   1faf6:	68fa      	ldr	r2, [r7, #12]
   1faf8:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
   1fafa:	69fb      	ldr	r3, [r7, #28]
   1fafc:	68ba      	ldr	r2, [r7, #8]
   1fafe:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
   1fb00:	69fb      	ldr	r3, [r7, #28]
   1fb02:	687a      	ldr	r2, [r7, #4]
   1fb04:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
   1fb06:	69fb      	ldr	r3, [r7, #28]
   1fb08:	683a      	ldr	r2, [r7, #0]
   1fb0a:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
   1fb0c:	69fb      	ldr	r3, [r7, #28]
   1fb0e:	69ba      	ldr	r2, [r7, #24]
   1fb10:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
   1fb12:	69fb      	ldr	r3, [r7, #28]
   1fb14:	3304      	adds	r3, #4
   1fb16:	4618      	mov	r0, r3
   1fb18:	f7fe fbca 	bl	1e2b0 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
   1fb1c:	3710      	adds	r7, #16
   1fb1e:	46bd      	mov	sp, r7
   1fb20:	bd80      	pop	{r7, pc}
   1fb22:	bf00      	nop

0001fb24 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   1fb24:	b580      	push	{r7, lr}
   1fb26:	b08a      	sub	sp, #40	; 0x28
   1fb28:	af00      	add	r7, sp, #0
   1fb2a:	60f8      	str	r0, [r7, #12]
   1fb2c:	60b9      	str	r1, [r7, #8]
   1fb2e:	607a      	str	r2, [r7, #4]
   1fb30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   1fb32:	2300      	movs	r3, #0
   1fb34:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   1fb36:	68fb      	ldr	r3, [r7, #12]
   1fb38:	2b00      	cmp	r3, #0
   1fb3a:	d100      	bne.n	1fb3e <xTimerGenericCommand+0x1a>
   1fb3c:	e7fe      	b.n	1fb3c <xTimerGenericCommand+0x18>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   1fb3e:	4b1d      	ldr	r3, [pc, #116]	; (1fbb4 <xTimerGenericCommand+0x90>)
   1fb40:	681b      	ldr	r3, [r3, #0]
   1fb42:	2b00      	cmp	r3, #0
   1fb44:	d030      	beq.n	1fba8 <xTimerGenericCommand+0x84>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   1fb46:	68bb      	ldr	r3, [r7, #8]
   1fb48:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   1fb4a:	687b      	ldr	r3, [r7, #4]
   1fb4c:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   1fb4e:	68fb      	ldr	r3, [r7, #12]
   1fb50:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   1fb52:	68bb      	ldr	r3, [r7, #8]
   1fb54:	2b05      	cmp	r3, #5
   1fb56:	dc1c      	bgt.n	1fb92 <xTimerGenericCommand+0x6e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   1fb58:	f7ff feec 	bl	1f934 <xTaskGetSchedulerState>
   1fb5c:	4603      	mov	r3, r0
   1fb5e:	2b02      	cmp	r3, #2
   1fb60:	d10b      	bne.n	1fb7a <xTimerGenericCommand+0x56>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   1fb62:	4b14      	ldr	r3, [pc, #80]	; (1fbb4 <xTimerGenericCommand+0x90>)
   1fb64:	681a      	ldr	r2, [r3, #0]
   1fb66:	f107 0314 	add.w	r3, r7, #20
   1fb6a:	4610      	mov	r0, r2
   1fb6c:	4619      	mov	r1, r3
   1fb6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1fb70:	2300      	movs	r3, #0
   1fb72:	f7fe fcdb 	bl	1e52c <xQueueGenericSend>
   1fb76:	6278      	str	r0, [r7, #36]	; 0x24
   1fb78:	e016      	b.n	1fba8 <xTimerGenericCommand+0x84>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   1fb7a:	4b0e      	ldr	r3, [pc, #56]	; (1fbb4 <xTimerGenericCommand+0x90>)
   1fb7c:	681a      	ldr	r2, [r3, #0]
   1fb7e:	f107 0314 	add.w	r3, r7, #20
   1fb82:	4610      	mov	r0, r2
   1fb84:	4619      	mov	r1, r3
   1fb86:	2200      	movs	r2, #0
   1fb88:	2300      	movs	r3, #0
   1fb8a:	f7fe fccf 	bl	1e52c <xQueueGenericSend>
   1fb8e:	6278      	str	r0, [r7, #36]	; 0x24
   1fb90:	e00a      	b.n	1fba8 <xTimerGenericCommand+0x84>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1fb92:	4b08      	ldr	r3, [pc, #32]	; (1fbb4 <xTimerGenericCommand+0x90>)
   1fb94:	681a      	ldr	r2, [r3, #0]
   1fb96:	f107 0314 	add.w	r3, r7, #20
   1fb9a:	4610      	mov	r0, r2
   1fb9c:	4619      	mov	r1, r3
   1fb9e:	683a      	ldr	r2, [r7, #0]
   1fba0:	2300      	movs	r3, #0
   1fba2:	f7fe fd9d 	bl	1e6e0 <xQueueGenericSendFromISR>
   1fba6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   1fba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1fbaa:	4618      	mov	r0, r3
   1fbac:	3728      	adds	r7, #40	; 0x28
   1fbae:	46bd      	mov	sp, r7
   1fbb0:	bd80      	pop	{r7, pc}
   1fbb2:	bf00      	nop
   1fbb4:	100050c0 	.word	0x100050c0

0001fbb8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   1fbb8:	b580      	push	{r7, lr}
   1fbba:	b086      	sub	sp, #24
   1fbbc:	af02      	add	r7, sp, #8
   1fbbe:	6078      	str	r0, [r7, #4]
   1fbc0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1fbc2:	4b17      	ldr	r3, [pc, #92]	; (1fc20 <prvProcessExpiredTimer+0x68>)
   1fbc4:	681b      	ldr	r3, [r3, #0]
   1fbc6:	68db      	ldr	r3, [r3, #12]
   1fbc8:	68db      	ldr	r3, [r3, #12]
   1fbca:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1fbcc:	68fb      	ldr	r3, [r7, #12]
   1fbce:	3304      	adds	r3, #4
   1fbd0:	4618      	mov	r0, r3
   1fbd2:	f7fe fbd5 	bl	1e380 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1fbd6:	68fb      	ldr	r3, [r7, #12]
   1fbd8:	69db      	ldr	r3, [r3, #28]
   1fbda:	2b01      	cmp	r3, #1
   1fbdc:	d119      	bne.n	1fc12 <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   1fbde:	68fb      	ldr	r3, [r7, #12]
   1fbe0:	699a      	ldr	r2, [r3, #24]
   1fbe2:	687b      	ldr	r3, [r7, #4]
   1fbe4:	4413      	add	r3, r2
   1fbe6:	68f8      	ldr	r0, [r7, #12]
   1fbe8:	4619      	mov	r1, r3
   1fbea:	683a      	ldr	r2, [r7, #0]
   1fbec:	687b      	ldr	r3, [r7, #4]
   1fbee:	f000 f8bd 	bl	1fd6c <prvInsertTimerInActiveList>
   1fbf2:	4603      	mov	r3, r0
   1fbf4:	2b00      	cmp	r3, #0
   1fbf6:	d00c      	beq.n	1fc12 <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1fbf8:	2300      	movs	r3, #0
   1fbfa:	9300      	str	r3, [sp, #0]
   1fbfc:	68f8      	ldr	r0, [r7, #12]
   1fbfe:	2100      	movs	r1, #0
   1fc00:	687a      	ldr	r2, [r7, #4]
   1fc02:	2300      	movs	r3, #0
   1fc04:	f7ff ff8e 	bl	1fb24 <xTimerGenericCommand>
   1fc08:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
   1fc0a:	68bb      	ldr	r3, [r7, #8]
   1fc0c:	2b00      	cmp	r3, #0
   1fc0e:	d100      	bne.n	1fc12 <prvProcessExpiredTimer+0x5a>
   1fc10:	e7fe      	b.n	1fc10 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1fc12:	68fb      	ldr	r3, [r7, #12]
   1fc14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1fc16:	68f8      	ldr	r0, [r7, #12]
   1fc18:	4798      	blx	r3
}
   1fc1a:	3710      	adds	r7, #16
   1fc1c:	46bd      	mov	sp, r7
   1fc1e:	bd80      	pop	{r7, pc}
   1fc20:	100050b8 	.word	0x100050b8

0001fc24 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   1fc24:	b580      	push	{r7, lr}
   1fc26:	b084      	sub	sp, #16
   1fc28:	af00      	add	r7, sp, #0
   1fc2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1fc2c:	f107 0308 	add.w	r3, r7, #8
   1fc30:	4618      	mov	r0, r3
   1fc32:	f000 f857 	bl	1fce4 <prvGetNextExpireTime>
   1fc36:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   1fc38:	68bb      	ldr	r3, [r7, #8]
   1fc3a:	68f8      	ldr	r0, [r7, #12]
   1fc3c:	4619      	mov	r1, r3
   1fc3e:	f000 f803 	bl	1fc48 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   1fc42:	f000 f8d5 	bl	1fdf0 <prvProcessReceivedCommands>
	}
   1fc46:	e7f1      	b.n	1fc2c <prvTimerTask+0x8>

0001fc48 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   1fc48:	b580      	push	{r7, lr}
   1fc4a:	b084      	sub	sp, #16
   1fc4c:	af00      	add	r7, sp, #0
   1fc4e:	6078      	str	r0, [r7, #4]
   1fc50:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   1fc52:	f7ff f9ff 	bl	1f054 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1fc56:	f107 0308 	add.w	r3, r7, #8
   1fc5a:	4618      	mov	r0, r3
   1fc5c:	f000 f866 	bl	1fd2c <prvSampleTimeNow>
   1fc60:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   1fc62:	68bb      	ldr	r3, [r7, #8]
   1fc64:	2b00      	cmp	r3, #0
   1fc66:	d131      	bne.n	1fccc <prvProcessTimerOrBlockTask+0x84>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   1fc68:	683b      	ldr	r3, [r7, #0]
   1fc6a:	2b00      	cmp	r3, #0
   1fc6c:	d10a      	bne.n	1fc84 <prvProcessTimerOrBlockTask+0x3c>
   1fc6e:	687a      	ldr	r2, [r7, #4]
   1fc70:	68fb      	ldr	r3, [r7, #12]
   1fc72:	429a      	cmp	r2, r3
   1fc74:	d806      	bhi.n	1fc84 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
   1fc76:	f7ff fa33 	bl	1f0e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   1fc7a:	6878      	ldr	r0, [r7, #4]
   1fc7c:	68f9      	ldr	r1, [r7, #12]
   1fc7e:	f7ff ff9b 	bl	1fbb8 <prvProcessExpiredTimer>
   1fc82:	e025      	b.n	1fcd0 <prvProcessTimerOrBlockTask+0x88>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
   1fc84:	683b      	ldr	r3, [r7, #0]
   1fc86:	2b00      	cmp	r3, #0
   1fc88:	d008      	beq.n	1fc9c <prvProcessTimerOrBlockTask+0x54>
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   1fc8a:	4b13      	ldr	r3, [pc, #76]	; (1fcd8 <prvProcessTimerOrBlockTask+0x90>)
   1fc8c:	681b      	ldr	r3, [r3, #0]
   1fc8e:	681b      	ldr	r3, [r3, #0]
   1fc90:	2b00      	cmp	r3, #0
   1fc92:	bf0c      	ite	eq
   1fc94:	2301      	moveq	r3, #1
   1fc96:	2300      	movne	r3, #0
   1fc98:	b2db      	uxtb	r3, r3
   1fc9a:	603b      	str	r3, [r7, #0]
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   1fc9c:	4b0f      	ldr	r3, [pc, #60]	; (1fcdc <prvProcessTimerOrBlockTask+0x94>)
   1fc9e:	6819      	ldr	r1, [r3, #0]
   1fca0:	687a      	ldr	r2, [r7, #4]
   1fca2:	68fb      	ldr	r3, [r7, #12]
   1fca4:	1ad3      	subs	r3, r2, r3
   1fca6:	4608      	mov	r0, r1
   1fca8:	4619      	mov	r1, r3
   1fcaa:	683a      	ldr	r2, [r7, #0]
   1fcac:	f7fe ff7a 	bl	1eba4 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
   1fcb0:	f7ff fa16 	bl	1f0e0 <xTaskResumeAll>
   1fcb4:	4603      	mov	r3, r0
   1fcb6:	2b00      	cmp	r3, #0
   1fcb8:	d10a      	bne.n	1fcd0 <prvProcessTimerOrBlockTask+0x88>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
   1fcba:	4b09      	ldr	r3, [pc, #36]	; (1fce0 <prvProcessTimerOrBlockTask+0x98>)
   1fcbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1fcc0:	601a      	str	r2, [r3, #0]
   1fcc2:	f3bf 8f4f 	dsb	sy
   1fcc6:	f3bf 8f6f 	isb	sy
   1fcca:	e001      	b.n	1fcd0 <prvProcessTimerOrBlockTask+0x88>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
   1fccc:	f7ff fa08 	bl	1f0e0 <xTaskResumeAll>
		}
	}
}
   1fcd0:	3710      	adds	r7, #16
   1fcd2:	46bd      	mov	sp, r7
   1fcd4:	bd80      	pop	{r7, pc}
   1fcd6:	bf00      	nop
   1fcd8:	100050bc 	.word	0x100050bc
   1fcdc:	100050c0 	.word	0x100050c0
   1fce0:	e000ed04 	.word	0xe000ed04

0001fce4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   1fce4:	b480      	push	{r7}
   1fce6:	b085      	sub	sp, #20
   1fce8:	af00      	add	r7, sp, #0
   1fcea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   1fcec:	4b0e      	ldr	r3, [pc, #56]	; (1fd28 <prvGetNextExpireTime+0x44>)
   1fcee:	681b      	ldr	r3, [r3, #0]
   1fcf0:	681b      	ldr	r3, [r3, #0]
   1fcf2:	2b00      	cmp	r3, #0
   1fcf4:	bf0c      	ite	eq
   1fcf6:	2301      	moveq	r3, #1
   1fcf8:	2300      	movne	r3, #0
   1fcfa:	b2db      	uxtb	r3, r3
   1fcfc:	461a      	mov	r2, r3
   1fcfe:	687b      	ldr	r3, [r7, #4]
   1fd00:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   1fd02:	687b      	ldr	r3, [r7, #4]
   1fd04:	681b      	ldr	r3, [r3, #0]
   1fd06:	2b00      	cmp	r3, #0
   1fd08:	d105      	bne.n	1fd16 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1fd0a:	4b07      	ldr	r3, [pc, #28]	; (1fd28 <prvGetNextExpireTime+0x44>)
   1fd0c:	681b      	ldr	r3, [r3, #0]
   1fd0e:	68db      	ldr	r3, [r3, #12]
   1fd10:	681b      	ldr	r3, [r3, #0]
   1fd12:	60fb      	str	r3, [r7, #12]
   1fd14:	e001      	b.n	1fd1a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   1fd16:	2300      	movs	r3, #0
   1fd18:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   1fd1a:	68fb      	ldr	r3, [r7, #12]
}
   1fd1c:	4618      	mov	r0, r3
   1fd1e:	3714      	adds	r7, #20
   1fd20:	46bd      	mov	sp, r7
   1fd22:	f85d 7b04 	ldr.w	r7, [sp], #4
   1fd26:	4770      	bx	lr
   1fd28:	100050b8 	.word	0x100050b8

0001fd2c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   1fd2c:	b580      	push	{r7, lr}
   1fd2e:	b084      	sub	sp, #16
   1fd30:	af00      	add	r7, sp, #0
   1fd32:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   1fd34:	f7ff fa68 	bl	1f208 <xTaskGetTickCount>
   1fd38:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
   1fd3a:	4b0b      	ldr	r3, [pc, #44]	; (1fd68 <prvSampleTimeNow+0x3c>)
   1fd3c:	681b      	ldr	r3, [r3, #0]
   1fd3e:	68fa      	ldr	r2, [r7, #12]
   1fd40:	429a      	cmp	r2, r3
   1fd42:	d205      	bcs.n	1fd50 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
   1fd44:	f000 f8ec 	bl	1ff20 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
   1fd48:	687b      	ldr	r3, [r7, #4]
   1fd4a:	2201      	movs	r2, #1
   1fd4c:	601a      	str	r2, [r3, #0]
   1fd4e:	e002      	b.n	1fd56 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   1fd50:	687b      	ldr	r3, [r7, #4]
   1fd52:	2200      	movs	r2, #0
   1fd54:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   1fd56:	4a04      	ldr	r2, [pc, #16]	; (1fd68 <prvSampleTimeNow+0x3c>)
   1fd58:	68fb      	ldr	r3, [r7, #12]
   1fd5a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
   1fd5c:	68fb      	ldr	r3, [r7, #12]
}
   1fd5e:	4618      	mov	r0, r3
   1fd60:	3710      	adds	r7, #16
   1fd62:	46bd      	mov	sp, r7
   1fd64:	bd80      	pop	{r7, pc}
   1fd66:	bf00      	nop
   1fd68:	100050c8 	.word	0x100050c8

0001fd6c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   1fd6c:	b580      	push	{r7, lr}
   1fd6e:	b086      	sub	sp, #24
   1fd70:	af00      	add	r7, sp, #0
   1fd72:	60f8      	str	r0, [r7, #12]
   1fd74:	60b9      	str	r1, [r7, #8]
   1fd76:	607a      	str	r2, [r7, #4]
   1fd78:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   1fd7a:	2300      	movs	r3, #0
   1fd7c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   1fd7e:	68fb      	ldr	r3, [r7, #12]
   1fd80:	68ba      	ldr	r2, [r7, #8]
   1fd82:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1fd84:	68fb      	ldr	r3, [r7, #12]
   1fd86:	68fa      	ldr	r2, [r7, #12]
   1fd88:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   1fd8a:	68ba      	ldr	r2, [r7, #8]
   1fd8c:	687b      	ldr	r3, [r7, #4]
   1fd8e:	429a      	cmp	r2, r3
   1fd90:	d812      	bhi.n	1fdb8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1fd92:	687a      	ldr	r2, [r7, #4]
   1fd94:	683b      	ldr	r3, [r7, #0]
   1fd96:	1ad2      	subs	r2, r2, r3
   1fd98:	68fb      	ldr	r3, [r7, #12]
   1fd9a:	699b      	ldr	r3, [r3, #24]
   1fd9c:	429a      	cmp	r2, r3
   1fd9e:	d302      	bcc.n	1fda6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   1fda0:	2301      	movs	r3, #1
   1fda2:	617b      	str	r3, [r7, #20]
   1fda4:	e01b      	b.n	1fdde <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   1fda6:	4b10      	ldr	r3, [pc, #64]	; (1fde8 <prvInsertTimerInActiveList+0x7c>)
   1fda8:	681a      	ldr	r2, [r3, #0]
   1fdaa:	68fb      	ldr	r3, [r7, #12]
   1fdac:	3304      	adds	r3, #4
   1fdae:	4610      	mov	r0, r2
   1fdb0:	4619      	mov	r1, r3
   1fdb2:	f7fe faad 	bl	1e310 <vListInsert>
   1fdb6:	e012      	b.n	1fdde <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   1fdb8:	687a      	ldr	r2, [r7, #4]
   1fdba:	683b      	ldr	r3, [r7, #0]
   1fdbc:	429a      	cmp	r2, r3
   1fdbe:	d206      	bcs.n	1fdce <prvInsertTimerInActiveList+0x62>
   1fdc0:	68ba      	ldr	r2, [r7, #8]
   1fdc2:	683b      	ldr	r3, [r7, #0]
   1fdc4:	429a      	cmp	r2, r3
   1fdc6:	d302      	bcc.n	1fdce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   1fdc8:	2301      	movs	r3, #1
   1fdca:	617b      	str	r3, [r7, #20]
   1fdcc:	e007      	b.n	1fdde <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1fdce:	4b07      	ldr	r3, [pc, #28]	; (1fdec <prvInsertTimerInActiveList+0x80>)
   1fdd0:	681a      	ldr	r2, [r3, #0]
   1fdd2:	68fb      	ldr	r3, [r7, #12]
   1fdd4:	3304      	adds	r3, #4
   1fdd6:	4610      	mov	r0, r2
   1fdd8:	4619      	mov	r1, r3
   1fdda:	f7fe fa99 	bl	1e310 <vListInsert>
		}
	}

	return xProcessTimerNow;
   1fdde:	697b      	ldr	r3, [r7, #20]
}
   1fde0:	4618      	mov	r0, r3
   1fde2:	3718      	adds	r7, #24
   1fde4:	46bd      	mov	sp, r7
   1fde6:	bd80      	pop	{r7, pc}
   1fde8:	100050bc 	.word	0x100050bc
   1fdec:	100050b8 	.word	0x100050b8

0001fdf0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   1fdf0:	b580      	push	{r7, lr}
   1fdf2:	b08c      	sub	sp, #48	; 0x30
   1fdf4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1fdf6:	e07f      	b.n	1fef8 <prvProcessReceivedCommands+0x108>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
   1fdf8:	68bb      	ldr	r3, [r7, #8]
   1fdfa:	2b00      	cmp	r3, #0
   1fdfc:	da10      	bge.n	1fe20 <prvProcessReceivedCommands+0x30>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
   1fdfe:	f107 0308 	add.w	r3, r7, #8
   1fe02:	3304      	adds	r3, #4
   1fe04:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
   1fe06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1fe08:	2b00      	cmp	r3, #0
   1fe0a:	d100      	bne.n	1fe0e <prvProcessReceivedCommands+0x1e>
   1fe0c:	e7fe      	b.n	1fe0c <prvProcessReceivedCommands+0x1c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
   1fe0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1fe10:	681b      	ldr	r3, [r3, #0]
   1fe12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1fe14:	6851      	ldr	r1, [r2, #4]
   1fe16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1fe18:	6892      	ldr	r2, [r2, #8]
   1fe1a:	4608      	mov	r0, r1
   1fe1c:	4611      	mov	r1, r2
   1fe1e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   1fe20:	68bb      	ldr	r3, [r7, #8]
   1fe22:	2b00      	cmp	r3, #0
   1fe24:	db68      	blt.n	1fef8 <prvProcessReceivedCommands+0x108>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   1fe26:	693b      	ldr	r3, [r7, #16]
   1fe28:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   1fe2a:	6a3b      	ldr	r3, [r7, #32]
   1fe2c:	695b      	ldr	r3, [r3, #20]
   1fe2e:	2b00      	cmp	r3, #0
   1fe30:	d004      	beq.n	1fe3c <prvProcessReceivedCommands+0x4c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1fe32:	6a3b      	ldr	r3, [r7, #32]
   1fe34:	3304      	adds	r3, #4
   1fe36:	4618      	mov	r0, r3
   1fe38:	f7fe faa2 	bl	1e380 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1fe3c:	1d3b      	adds	r3, r7, #4
   1fe3e:	4618      	mov	r0, r3
   1fe40:	f7ff ff74 	bl	1fd2c <prvSampleTimeNow>
   1fe44:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
   1fe46:	68bb      	ldr	r3, [r7, #8]
   1fe48:	2b09      	cmp	r3, #9
   1fe4a:	d854      	bhi.n	1fef6 <prvProcessReceivedCommands+0x106>
   1fe4c:	a201      	add	r2, pc, #4	; (adr r2, 1fe54 <prvProcessReceivedCommands+0x64>)
   1fe4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1fe52:	bf00      	nop
   1fe54:	0001fe7d 	.word	0x0001fe7d
   1fe58:	0001fe7d 	.word	0x0001fe7d
   1fe5c:	0001fe7d 	.word	0x0001fe7d
   1fe60:	0001fef9 	.word	0x0001fef9
   1fe64:	0001fec9 	.word	0x0001fec9
   1fe68:	0001feef 	.word	0x0001feef
   1fe6c:	0001fe7d 	.word	0x0001fe7d
   1fe70:	0001fe7d 	.word	0x0001fe7d
   1fe74:	0001fef9 	.word	0x0001fef9
   1fe78:	0001fec9 	.word	0x0001fec9
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   1fe7c:	68fa      	ldr	r2, [r7, #12]
   1fe7e:	6a3b      	ldr	r3, [r7, #32]
   1fe80:	699b      	ldr	r3, [r3, #24]
   1fe82:	441a      	add	r2, r3
   1fe84:	68fb      	ldr	r3, [r7, #12]
   1fe86:	6a38      	ldr	r0, [r7, #32]
   1fe88:	4611      	mov	r1, r2
   1fe8a:	69fa      	ldr	r2, [r7, #28]
   1fe8c:	f7ff ff6e 	bl	1fd6c <prvInsertTimerInActiveList>
   1fe90:	4603      	mov	r3, r0
   1fe92:	2b00      	cmp	r3, #0
   1fe94:	d017      	beq.n	1fec6 <prvProcessReceivedCommands+0xd6>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1fe96:	6a3b      	ldr	r3, [r7, #32]
   1fe98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1fe9a:	6a38      	ldr	r0, [r7, #32]
   1fe9c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1fe9e:	6a3b      	ldr	r3, [r7, #32]
   1fea0:	69db      	ldr	r3, [r3, #28]
   1fea2:	2b01      	cmp	r3, #1
   1fea4:	d10f      	bne.n	1fec6 <prvProcessReceivedCommands+0xd6>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   1fea6:	68fa      	ldr	r2, [r7, #12]
   1fea8:	6a3b      	ldr	r3, [r7, #32]
   1feaa:	699b      	ldr	r3, [r3, #24]
   1feac:	441a      	add	r2, r3
   1feae:	2300      	movs	r3, #0
   1feb0:	9300      	str	r3, [sp, #0]
   1feb2:	6a38      	ldr	r0, [r7, #32]
   1feb4:	2100      	movs	r1, #0
   1feb6:	2300      	movs	r3, #0
   1feb8:	f7ff fe34 	bl	1fb24 <xTimerGenericCommand>
   1febc:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
   1febe:	69bb      	ldr	r3, [r7, #24]
   1fec0:	2b00      	cmp	r3, #0
   1fec2:	d100      	bne.n	1fec6 <prvProcessReceivedCommands+0xd6>
   1fec4:	e7fe      	b.n	1fec4 <prvProcessReceivedCommands+0xd4>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
   1fec6:	e017      	b.n	1fef8 <prvProcessReceivedCommands+0x108>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   1fec8:	68fa      	ldr	r2, [r7, #12]
   1feca:	6a3b      	ldr	r3, [r7, #32]
   1fecc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   1fece:	6a3b      	ldr	r3, [r7, #32]
   1fed0:	699b      	ldr	r3, [r3, #24]
   1fed2:	2b00      	cmp	r3, #0
   1fed4:	d100      	bne.n	1fed8 <prvProcessReceivedCommands+0xe8>
   1fed6:	e7fe      	b.n	1fed6 <prvProcessReceivedCommands+0xe6>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   1fed8:	6a3b      	ldr	r3, [r7, #32]
   1feda:	699a      	ldr	r2, [r3, #24]
   1fedc:	69fb      	ldr	r3, [r7, #28]
   1fede:	4413      	add	r3, r2
   1fee0:	6a38      	ldr	r0, [r7, #32]
   1fee2:	4619      	mov	r1, r3
   1fee4:	69fa      	ldr	r2, [r7, #28]
   1fee6:	69fb      	ldr	r3, [r7, #28]
   1fee8:	f7ff ff40 	bl	1fd6c <prvInsertTimerInActiveList>
					break;
   1feec:	e004      	b.n	1fef8 <prvProcessReceivedCommands+0x108>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   1feee:	6a38      	ldr	r0, [r7, #32]
   1fef0:	f000 f94a 	bl	20188 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   1fef4:	e000      	b.n	1fef8 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
   1fef6:	bf00      	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1fef8:	4b08      	ldr	r3, [pc, #32]	; (1ff1c <prvProcessReceivedCommands+0x12c>)
   1fefa:	681a      	ldr	r2, [r3, #0]
   1fefc:	f107 0308 	add.w	r3, r7, #8
   1ff00:	4610      	mov	r0, r2
   1ff02:	4619      	mov	r1, r3
   1ff04:	2200      	movs	r2, #0
   1ff06:	2300      	movs	r3, #0
   1ff08:	f7fe fc64 	bl	1e7d4 <xQueueGenericReceive>
   1ff0c:	4603      	mov	r3, r0
   1ff0e:	2b00      	cmp	r3, #0
   1ff10:	f47f af72 	bne.w	1fdf8 <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
   1ff14:	3728      	adds	r7, #40	; 0x28
   1ff16:	46bd      	mov	sp, r7
   1ff18:	bd80      	pop	{r7, pc}
   1ff1a:	bf00      	nop
   1ff1c:	100050c0 	.word	0x100050c0

0001ff20 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   1ff20:	b580      	push	{r7, lr}
   1ff22:	b088      	sub	sp, #32
   1ff24:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1ff26:	e03b      	b.n	1ffa0 <prvSwitchTimerLists+0x80>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1ff28:	4b26      	ldr	r3, [pc, #152]	; (1ffc4 <prvSwitchTimerLists+0xa4>)
   1ff2a:	681b      	ldr	r3, [r3, #0]
   1ff2c:	68db      	ldr	r3, [r3, #12]
   1ff2e:	681b      	ldr	r3, [r3, #0]
   1ff30:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1ff32:	4b24      	ldr	r3, [pc, #144]	; (1ffc4 <prvSwitchTimerLists+0xa4>)
   1ff34:	681b      	ldr	r3, [r3, #0]
   1ff36:	68db      	ldr	r3, [r3, #12]
   1ff38:	68db      	ldr	r3, [r3, #12]
   1ff3a:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1ff3c:	693b      	ldr	r3, [r7, #16]
   1ff3e:	3304      	adds	r3, #4
   1ff40:	4618      	mov	r0, r3
   1ff42:	f7fe fa1d 	bl	1e380 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1ff46:	693b      	ldr	r3, [r7, #16]
   1ff48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1ff4a:	6938      	ldr	r0, [r7, #16]
   1ff4c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1ff4e:	693b      	ldr	r3, [r7, #16]
   1ff50:	69db      	ldr	r3, [r3, #28]
   1ff52:	2b01      	cmp	r3, #1
   1ff54:	d124      	bne.n	1ffa0 <prvSwitchTimerLists+0x80>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   1ff56:	693b      	ldr	r3, [r7, #16]
   1ff58:	699a      	ldr	r2, [r3, #24]
   1ff5a:	697b      	ldr	r3, [r7, #20]
   1ff5c:	4413      	add	r3, r2
   1ff5e:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   1ff60:	68fa      	ldr	r2, [r7, #12]
   1ff62:	697b      	ldr	r3, [r7, #20]
   1ff64:	429a      	cmp	r2, r3
   1ff66:	d90e      	bls.n	1ff86 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   1ff68:	693b      	ldr	r3, [r7, #16]
   1ff6a:	68fa      	ldr	r2, [r7, #12]
   1ff6c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1ff6e:	693b      	ldr	r3, [r7, #16]
   1ff70:	693a      	ldr	r2, [r7, #16]
   1ff72:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1ff74:	4b13      	ldr	r3, [pc, #76]	; (1ffc4 <prvSwitchTimerLists+0xa4>)
   1ff76:	681a      	ldr	r2, [r3, #0]
   1ff78:	693b      	ldr	r3, [r7, #16]
   1ff7a:	3304      	adds	r3, #4
   1ff7c:	4610      	mov	r0, r2
   1ff7e:	4619      	mov	r1, r3
   1ff80:	f7fe f9c6 	bl	1e310 <vListInsert>
   1ff84:	e00c      	b.n	1ffa0 <prvSwitchTimerLists+0x80>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1ff86:	2300      	movs	r3, #0
   1ff88:	9300      	str	r3, [sp, #0]
   1ff8a:	6938      	ldr	r0, [r7, #16]
   1ff8c:	2100      	movs	r1, #0
   1ff8e:	697a      	ldr	r2, [r7, #20]
   1ff90:	2300      	movs	r3, #0
   1ff92:	f7ff fdc7 	bl	1fb24 <xTimerGenericCommand>
   1ff96:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
   1ff98:	68bb      	ldr	r3, [r7, #8]
   1ff9a:	2b00      	cmp	r3, #0
   1ff9c:	d100      	bne.n	1ffa0 <prvSwitchTimerLists+0x80>
   1ff9e:	e7fe      	b.n	1ff9e <prvSwitchTimerLists+0x7e>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1ffa0:	4b08      	ldr	r3, [pc, #32]	; (1ffc4 <prvSwitchTimerLists+0xa4>)
   1ffa2:	681b      	ldr	r3, [r3, #0]
   1ffa4:	681b      	ldr	r3, [r3, #0]
   1ffa6:	2b00      	cmp	r3, #0
   1ffa8:	d1be      	bne.n	1ff28 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   1ffaa:	4b06      	ldr	r3, [pc, #24]	; (1ffc4 <prvSwitchTimerLists+0xa4>)
   1ffac:	681b      	ldr	r3, [r3, #0]
   1ffae:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   1ffb0:	4b05      	ldr	r3, [pc, #20]	; (1ffc8 <prvSwitchTimerLists+0xa8>)
   1ffb2:	681b      	ldr	r3, [r3, #0]
   1ffb4:	4a03      	ldr	r2, [pc, #12]	; (1ffc4 <prvSwitchTimerLists+0xa4>)
   1ffb6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
   1ffb8:	4a03      	ldr	r2, [pc, #12]	; (1ffc8 <prvSwitchTimerLists+0xa8>)
   1ffba:	687b      	ldr	r3, [r7, #4]
   1ffbc:	6013      	str	r3, [r2, #0]
}
   1ffbe:	3718      	adds	r7, #24
   1ffc0:	46bd      	mov	sp, r7
   1ffc2:	bd80      	pop	{r7, pc}
   1ffc4:	100050b8 	.word	0x100050b8
   1ffc8:	100050bc 	.word	0x100050bc

0001ffcc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   1ffcc:	b580      	push	{r7, lr}
   1ffce:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   1ffd0:	f7f4 fa36 	bl	14440 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
   1ffd4:	4b0d      	ldr	r3, [pc, #52]	; (2000c <prvCheckForValidListAndQueue+0x40>)
   1ffd6:	681b      	ldr	r3, [r3, #0]
   1ffd8:	2b00      	cmp	r3, #0
   1ffda:	d113      	bne.n	20004 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
   1ffdc:	480c      	ldr	r0, [pc, #48]	; (20010 <prvCheckForValidListAndQueue+0x44>)
   1ffde:	f7fe f947 	bl	1e270 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
   1ffe2:	480c      	ldr	r0, [pc, #48]	; (20014 <prvCheckForValidListAndQueue+0x48>)
   1ffe4:	f7fe f944 	bl	1e270 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
   1ffe8:	4b0b      	ldr	r3, [pc, #44]	; (20018 <prvCheckForValidListAndQueue+0x4c>)
   1ffea:	4a09      	ldr	r2, [pc, #36]	; (20010 <prvCheckForValidListAndQueue+0x44>)
   1ffec:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   1ffee:	4b0b      	ldr	r3, [pc, #44]	; (2001c <prvCheckForValidListAndQueue+0x50>)
   1fff0:	4a08      	ldr	r2, [pc, #32]	; (20014 <prvCheckForValidListAndQueue+0x48>)
   1fff2:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   1fff4:	2005      	movs	r0, #5
   1fff6:	2110      	movs	r1, #16
   1fff8:	2200      	movs	r2, #0
   1fffa:	f7fe fa49 	bl	1e490 <xQueueGenericCreate>
   1fffe:	4602      	mov	r2, r0
   20000:	4b02      	ldr	r3, [pc, #8]	; (2000c <prvCheckForValidListAndQueue+0x40>)
   20002:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   20004:	f7f4 fa40 	bl	14488 <vPortExitCritical>
}
   20008:	bd80      	pop	{r7, pc}
   2000a:	bf00      	nop
   2000c:	100050c0 	.word	0x100050c0
   20010:	10005090 	.word	0x10005090
   20014:	100050a4 	.word	0x100050a4
   20018:	100050b8 	.word	0x100050b8
   2001c:	100050bc 	.word	0x100050bc

00020020 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
   20020:	b580      	push	{r7, lr}
   20022:	b08a      	sub	sp, #40	; 0x28
   20024:	af00      	add	r7, sp, #0
   20026:	60f8      	str	r0, [r7, #12]
   20028:	60b9      	str	r1, [r7, #8]
   2002a:	607a      	str	r2, [r7, #4]
   2002c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
   2002e:	f06f 0301 	mvn.w	r3, #1
   20032:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
   20034:	68fb      	ldr	r3, [r7, #12]
   20036:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
   20038:	68bb      	ldr	r3, [r7, #8]
   2003a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
   2003c:	687b      	ldr	r3, [r7, #4]
   2003e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   20040:	4b07      	ldr	r3, [pc, #28]	; (20060 <xTimerPendFunctionCallFromISR+0x40>)
   20042:	681a      	ldr	r2, [r3, #0]
   20044:	f107 0314 	add.w	r3, r7, #20
   20048:	4610      	mov	r0, r2
   2004a:	4619      	mov	r1, r3
   2004c:	683a      	ldr	r2, [r7, #0]
   2004e:	2300      	movs	r3, #0
   20050:	f7fe fb46 	bl	1e6e0 <xQueueGenericSendFromISR>
   20054:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
   20056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
   20058:	4618      	mov	r0, r3
   2005a:	3728      	adds	r7, #40	; 0x28
   2005c:	46bd      	mov	sp, r7
   2005e:	bd80      	pop	{r7, pc}
   20060:	100050c0 	.word	0x100050c0

00020064 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   20064:	b580      	push	{r7, lr}
   20066:	b088      	sub	sp, #32
   20068:	af00      	add	r7, sp, #0
   2006a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
   2006c:	2300      	movs	r3, #0
   2006e:	617b      	str	r3, [r7, #20]

	vTaskSuspendAll();
   20070:	f7fe fff0 	bl	1f054 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
   20074:	4b40      	ldr	r3, [pc, #256]	; (20178 <pvPortMalloc+0x114>)
   20076:	681b      	ldr	r3, [r3, #0]
   20078:	2b00      	cmp	r3, #0
   2007a:	d104      	bne.n	20086 <pvPortMalloc+0x22>
		{
			prvHeapInit();
   2007c:	f000 f8bc 	bl	201f8 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
   20080:	4b3d      	ldr	r3, [pc, #244]	; (20178 <pvPortMalloc+0x114>)
   20082:	2201      	movs	r2, #1
   20084:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   20086:	687b      	ldr	r3, [r7, #4]
   20088:	2b00      	cmp	r3, #0
   2008a:	d00e      	beq.n	200aa <pvPortMalloc+0x46>
		{
			xWantedSize += heapSTRUCT_SIZE;
   2008c:	2308      	movs	r3, #8
   2008e:	461a      	mov	r2, r3
   20090:	687b      	ldr	r3, [r7, #4]
   20092:	4413      	add	r3, r2
   20094:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
   20096:	687b      	ldr	r3, [r7, #4]
   20098:	f003 0307 	and.w	r3, r3, #7
   2009c:	2b00      	cmp	r3, #0
   2009e:	d004      	beq.n	200aa <pvPortMalloc+0x46>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   200a0:	687b      	ldr	r3, [r7, #4]
   200a2:	f023 0307 	bic.w	r3, r3, #7
   200a6:	3308      	adds	r3, #8
   200a8:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
   200aa:	687b      	ldr	r3, [r7, #4]
   200ac:	2b00      	cmp	r3, #0
   200ae:	d057      	beq.n	20160 <pvPortMalloc+0xfc>
   200b0:	687b      	ldr	r3, [r7, #4]
   200b2:	f643 72f7 	movw	r2, #16375	; 0x3ff7
   200b6:	4293      	cmp	r3, r2
   200b8:	d852      	bhi.n	20160 <pvPortMalloc+0xfc>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
   200ba:	4b30      	ldr	r3, [pc, #192]	; (2017c <pvPortMalloc+0x118>)
   200bc:	61bb      	str	r3, [r7, #24]
			pxBlock = xStart.pxNextFreeBlock;
   200be:	4b2f      	ldr	r3, [pc, #188]	; (2017c <pvPortMalloc+0x118>)
   200c0:	681b      	ldr	r3, [r3, #0]
   200c2:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   200c4:	e004      	b.n	200d0 <pvPortMalloc+0x6c>
			{
				pxPreviousBlock = pxBlock;
   200c6:	69fb      	ldr	r3, [r7, #28]
   200c8:	61bb      	str	r3, [r7, #24]
				pxBlock = pxBlock->pxNextFreeBlock;
   200ca:	69fb      	ldr	r3, [r7, #28]
   200cc:	681b      	ldr	r3, [r3, #0]
   200ce:	61fb      	str	r3, [r7, #28]
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   200d0:	69fb      	ldr	r3, [r7, #28]
   200d2:	685a      	ldr	r2, [r3, #4]
   200d4:	687b      	ldr	r3, [r7, #4]
   200d6:	429a      	cmp	r2, r3
   200d8:	d203      	bcs.n	200e2 <pvPortMalloc+0x7e>
   200da:	69fb      	ldr	r3, [r7, #28]
   200dc:	681b      	ldr	r3, [r3, #0]
   200de:	2b00      	cmp	r3, #0
   200e0:	d1f1      	bne.n	200c6 <pvPortMalloc+0x62>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
   200e2:	69fb      	ldr	r3, [r7, #28]
   200e4:	4a26      	ldr	r2, [pc, #152]	; (20180 <pvPortMalloc+0x11c>)
   200e6:	4293      	cmp	r3, r2
   200e8:	d03a      	beq.n	20160 <pvPortMalloc+0xfc>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   200ea:	69bb      	ldr	r3, [r7, #24]
   200ec:	681b      	ldr	r3, [r3, #0]
   200ee:	2208      	movs	r2, #8
   200f0:	4413      	add	r3, r2
   200f2:	617b      	str	r3, [r7, #20]

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   200f4:	69fb      	ldr	r3, [r7, #28]
   200f6:	681a      	ldr	r2, [r3, #0]
   200f8:	69bb      	ldr	r3, [r7, #24]
   200fa:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   200fc:	69fb      	ldr	r3, [r7, #28]
   200fe:	685a      	ldr	r2, [r3, #4]
   20100:	687b      	ldr	r3, [r7, #4]
   20102:	1ad3      	subs	r3, r2, r3
   20104:	2208      	movs	r2, #8
   20106:	0052      	lsls	r2, r2, #1
   20108:	4293      	cmp	r3, r2
   2010a:	d922      	bls.n	20152 <pvPortMalloc+0xee>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
   2010c:	69fa      	ldr	r2, [r7, #28]
   2010e:	687b      	ldr	r3, [r7, #4]
   20110:	4413      	add	r3, r2
   20112:	60fb      	str	r3, [r7, #12]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   20114:	69fb      	ldr	r3, [r7, #28]
   20116:	685a      	ldr	r2, [r3, #4]
   20118:	687b      	ldr	r3, [r7, #4]
   2011a:	1ad2      	subs	r2, r2, r3
   2011c:	68fb      	ldr	r3, [r7, #12]
   2011e:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
   20120:	69fb      	ldr	r3, [r7, #28]
   20122:	687a      	ldr	r2, [r7, #4]
   20124:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   20126:	68fb      	ldr	r3, [r7, #12]
   20128:	685b      	ldr	r3, [r3, #4]
   2012a:	60bb      	str	r3, [r7, #8]
   2012c:	4b13      	ldr	r3, [pc, #76]	; (2017c <pvPortMalloc+0x118>)
   2012e:	613b      	str	r3, [r7, #16]
   20130:	e002      	b.n	20138 <pvPortMalloc+0xd4>
   20132:	693b      	ldr	r3, [r7, #16]
   20134:	681b      	ldr	r3, [r3, #0]
   20136:	613b      	str	r3, [r7, #16]
   20138:	693b      	ldr	r3, [r7, #16]
   2013a:	681b      	ldr	r3, [r3, #0]
   2013c:	685a      	ldr	r2, [r3, #4]
   2013e:	68bb      	ldr	r3, [r7, #8]
   20140:	429a      	cmp	r2, r3
   20142:	d3f6      	bcc.n	20132 <pvPortMalloc+0xce>
   20144:	693b      	ldr	r3, [r7, #16]
   20146:	681a      	ldr	r2, [r3, #0]
   20148:	68fb      	ldr	r3, [r7, #12]
   2014a:	601a      	str	r2, [r3, #0]
   2014c:	693b      	ldr	r3, [r7, #16]
   2014e:	68fa      	ldr	r2, [r7, #12]
   20150:	601a      	str	r2, [r3, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   20152:	4b0c      	ldr	r3, [pc, #48]	; (20184 <pvPortMalloc+0x120>)
   20154:	681a      	ldr	r2, [r3, #0]
   20156:	69fb      	ldr	r3, [r7, #28]
   20158:	685b      	ldr	r3, [r3, #4]
   2015a:	1ad3      	subs	r3, r2, r3
   2015c:	4a09      	ldr	r2, [pc, #36]	; (20184 <pvPortMalloc+0x120>)
   2015e:	6013      	str	r3, [r2, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
   20160:	f7fe ffbe 	bl	1f0e0 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   20164:	697b      	ldr	r3, [r7, #20]
   20166:	2b00      	cmp	r3, #0
   20168:	d101      	bne.n	2016e <pvPortMalloc+0x10a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   2016a:	f7fa fe59 	bl	1ae20 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
   2016e:	697b      	ldr	r3, [r7, #20]
}
   20170:	4618      	mov	r0, r3
   20172:	3720      	adds	r7, #32
   20174:	46bd      	mov	sp, r7
   20176:	bd80      	pop	{r7, pc}
   20178:	100090dc 	.word	0x100090dc
   2017c:	100090cc 	.word	0x100090cc
   20180:	100090d4 	.word	0x100090d4
   20184:	10002ca4 	.word	0x10002ca4

00020188 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   20188:	b580      	push	{r7, lr}
   2018a:	b086      	sub	sp, #24
   2018c:	af00      	add	r7, sp, #0
   2018e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
   20190:	687b      	ldr	r3, [r7, #4]
   20192:	613b      	str	r3, [r7, #16]
BlockLink_t *pxLink;

	if( pv != NULL )
   20194:	687b      	ldr	r3, [r7, #4]
   20196:	2b00      	cmp	r3, #0
   20198:	d027      	beq.n	201ea <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
   2019a:	2308      	movs	r3, #8
   2019c:	425b      	negs	r3, r3
   2019e:	693a      	ldr	r2, [r7, #16]
   201a0:	4413      	add	r3, r2
   201a2:	613b      	str	r3, [r7, #16]

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
   201a4:	693b      	ldr	r3, [r7, #16]
   201a6:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
   201a8:	f7fe ff54 	bl	1f054 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
   201ac:	68fb      	ldr	r3, [r7, #12]
   201ae:	685b      	ldr	r3, [r3, #4]
   201b0:	60bb      	str	r3, [r7, #8]
   201b2:	4b0f      	ldr	r3, [pc, #60]	; (201f0 <vPortFree+0x68>)
   201b4:	617b      	str	r3, [r7, #20]
   201b6:	e002      	b.n	201be <vPortFree+0x36>
   201b8:	697b      	ldr	r3, [r7, #20]
   201ba:	681b      	ldr	r3, [r3, #0]
   201bc:	617b      	str	r3, [r7, #20]
   201be:	697b      	ldr	r3, [r7, #20]
   201c0:	681b      	ldr	r3, [r3, #0]
   201c2:	685a      	ldr	r2, [r3, #4]
   201c4:	68bb      	ldr	r3, [r7, #8]
   201c6:	429a      	cmp	r2, r3
   201c8:	d3f6      	bcc.n	201b8 <vPortFree+0x30>
   201ca:	697b      	ldr	r3, [r7, #20]
   201cc:	681a      	ldr	r2, [r3, #0]
   201ce:	68fb      	ldr	r3, [r7, #12]
   201d0:	601a      	str	r2, [r3, #0]
   201d2:	697b      	ldr	r3, [r7, #20]
   201d4:	68fa      	ldr	r2, [r7, #12]
   201d6:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
   201d8:	68fb      	ldr	r3, [r7, #12]
   201da:	685a      	ldr	r2, [r3, #4]
   201dc:	4b05      	ldr	r3, [pc, #20]	; (201f4 <vPortFree+0x6c>)
   201de:	681b      	ldr	r3, [r3, #0]
   201e0:	4413      	add	r3, r2
   201e2:	4a04      	ldr	r2, [pc, #16]	; (201f4 <vPortFree+0x6c>)
   201e4:	6013      	str	r3, [r2, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
   201e6:	f7fe ff7b 	bl	1f0e0 <xTaskResumeAll>
	}
}
   201ea:	3718      	adds	r7, #24
   201ec:	46bd      	mov	sp, r7
   201ee:	bd80      	pop	{r7, pc}
   201f0:	100090cc 	.word	0x100090cc
   201f4:	10002ca4 	.word	0x10002ca4

000201f8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
   201f8:	b480      	push	{r7}
   201fa:	b083      	sub	sp, #12
   201fc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   201fe:	4b0f      	ldr	r3, [pc, #60]	; (2023c <prvHeapInit+0x44>)
   20200:	f023 0307 	bic.w	r3, r3, #7
   20204:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
   20206:	4a0e      	ldr	r2, [pc, #56]	; (20240 <prvHeapInit+0x48>)
   20208:	687b      	ldr	r3, [r7, #4]
   2020a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   2020c:	4b0c      	ldr	r3, [pc, #48]	; (20240 <prvHeapInit+0x48>)
   2020e:	2200      	movs	r2, #0
   20210:	605a      	str	r2, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
   20212:	4b0c      	ldr	r3, [pc, #48]	; (20244 <prvHeapInit+0x4c>)
   20214:	f643 72f8 	movw	r2, #16376	; 0x3ff8
   20218:	605a      	str	r2, [r3, #4]
	xEnd.pxNextFreeBlock = NULL;
   2021a:	4b0a      	ldr	r3, [pc, #40]	; (20244 <prvHeapInit+0x4c>)
   2021c:	2200      	movs	r2, #0
   2021e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
   20220:	687b      	ldr	r3, [r7, #4]
   20222:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
   20224:	683b      	ldr	r3, [r7, #0]
   20226:	f643 72f8 	movw	r2, #16376	; 0x3ff8
   2022a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
   2022c:	683b      	ldr	r3, [r7, #0]
   2022e:	4a05      	ldr	r2, [pc, #20]	; (20244 <prvHeapInit+0x4c>)
   20230:	601a      	str	r2, [r3, #0]
}
   20232:	370c      	adds	r7, #12
   20234:	46bd      	mov	sp, r7
   20236:	f85d 7b04 	ldr.w	r7, [sp], #4
   2023a:	4770      	bx	lr
   2023c:	100050d4 	.word	0x100050d4
   20240:	100090cc 	.word	0x100090cc
   20244:	100090d4 	.word	0x100090d4

00020248 <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
   20248:	4811      	ldr	r0, [pc, #68]	; (20290 <zero_loop+0x12>)
   2024a:	4912      	ldr	r1, [pc, #72]	; (20294 <zero_loop+0x16>)
   2024c:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
   2024e:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
   20252:	4811      	ldr	r0, [pc, #68]	; (20298 <zero_loop+0x1a>)
   20254:	6801      	ldr	r1, [r0, #0]
   20256:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   2025a:	6001      	str	r1, [r0, #0]
   2025c:	f3bf 8f4f 	dsb	sy
   20260:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
   20264:	480d      	ldr	r0, [pc, #52]	; (2029c <zero_loop+0x1e>)
   20266:	490e      	ldr	r1, [pc, #56]	; (202a0 <zero_loop+0x22>)
   20268:	4a0e      	ldr	r2, [pc, #56]	; (202a4 <zero_loop+0x26>)

0002026a <copy_loop>:
   2026a:	f850 3b04 	ldr.w	r3, [r0], #4
   2026e:	f841 3b04 	str.w	r3, [r1], #4
   20272:	4291      	cmp	r1, r2
   20274:	dbf9      	blt.n	2026a <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
   20276:	480c      	ldr	r0, [pc, #48]	; (202a8 <zero_loop+0x2a>)
   20278:	490c      	ldr	r1, [pc, #48]	; (202ac <zero_loop+0x2e>)
   2027a:	f04f 0200 	mov.w	r2, #0

0002027e <zero_loop>:
   2027e:	4288      	cmp	r0, r1
   20280:	bfb8      	it	lt
   20282:	f840 2b04 	strlt.w	r2, [r0], #4
   20286:	dbfa      	blt.n	2027e <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
   20288:	f7fa fbe6 	bl	1aa58 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
   2028c:	be00      	bkpt	0x0000
   2028e:	0000      	.short	0x0000
   20290:	e000ed08 	.word	0xe000ed08
   20294:	0000c000 	.word	0x0000c000
   20298:	e000ed88 	.word	0xe000ed88
   2029c:	000276fc 	.word	0x000276fc
   202a0:	10002b00 	.word	0x10002b00
   202a4:	100035f0 	.word	0x100035f0
   202a8:	100035f0 	.word	0x100035f0
   202ac:	1000a478 	.word	0x1000a478

000202b0 <NMI_Handler>:
// by a debugger.
//
//*****************************************************************************
void
NMI_Handler(void)
{
   202b0:	b480      	push	{r7}
   202b2:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
   202b4:	e7fe      	b.n	202b4 <NMI_Handler+0x4>
   202b6:	bf00      	nop

000202b8 <DebugMon_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
   202b8:	b480      	push	{r7}
   202ba:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
   202bc:	e7fe      	b.n	202bc <DebugMon_Handler+0x4>
   202be:	bf00      	nop

000202c0 <memcmp>:
   202c0:	2a03      	cmp	r2, #3
   202c2:	b470      	push	{r4, r5, r6}
   202c4:	d926      	bls.n	20314 <memcmp+0x54>
   202c6:	ea40 0301 	orr.w	r3, r0, r1
   202ca:	079b      	lsls	r3, r3, #30
   202cc:	d011      	beq.n	202f2 <memcmp+0x32>
   202ce:	7804      	ldrb	r4, [r0, #0]
   202d0:	780d      	ldrb	r5, [r1, #0]
   202d2:	42ac      	cmp	r4, r5
   202d4:	d122      	bne.n	2031c <memcmp+0x5c>
   202d6:	4402      	add	r2, r0
   202d8:	1c43      	adds	r3, r0, #1
   202da:	e005      	b.n	202e8 <memcmp+0x28>
   202dc:	f813 4b01 	ldrb.w	r4, [r3], #1
   202e0:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   202e4:	42ac      	cmp	r4, r5
   202e6:	d119      	bne.n	2031c <memcmp+0x5c>
   202e8:	4293      	cmp	r3, r2
   202ea:	d1f7      	bne.n	202dc <memcmp+0x1c>
   202ec:	2000      	movs	r0, #0
   202ee:	bc70      	pop	{r4, r5, r6}
   202f0:	4770      	bx	lr
   202f2:	460c      	mov	r4, r1
   202f4:	4603      	mov	r3, r0
   202f6:	681e      	ldr	r6, [r3, #0]
   202f8:	6825      	ldr	r5, [r4, #0]
   202fa:	42ae      	cmp	r6, r5
   202fc:	4618      	mov	r0, r3
   202fe:	4621      	mov	r1, r4
   20300:	f103 0304 	add.w	r3, r3, #4
   20304:	f104 0404 	add.w	r4, r4, #4
   20308:	d104      	bne.n	20314 <memcmp+0x54>
   2030a:	3a04      	subs	r2, #4
   2030c:	2a03      	cmp	r2, #3
   2030e:	4618      	mov	r0, r3
   20310:	4621      	mov	r1, r4
   20312:	d8f0      	bhi.n	202f6 <memcmp+0x36>
   20314:	2a00      	cmp	r2, #0
   20316:	d1da      	bne.n	202ce <memcmp+0xe>
   20318:	4610      	mov	r0, r2
   2031a:	e7e8      	b.n	202ee <memcmp+0x2e>
   2031c:	1b60      	subs	r0, r4, r5
   2031e:	bc70      	pop	{r4, r5, r6}
   20320:	4770      	bx	lr
   20322:	bf00      	nop

00020324 <memmove>:
   20324:	4288      	cmp	r0, r1
   20326:	b5f0      	push	{r4, r5, r6, r7, lr}
   20328:	d90d      	bls.n	20346 <memmove+0x22>
   2032a:	188b      	adds	r3, r1, r2
   2032c:	4298      	cmp	r0, r3
   2032e:	d20a      	bcs.n	20346 <memmove+0x22>
   20330:	1881      	adds	r1, r0, r2
   20332:	2a00      	cmp	r2, #0
   20334:	d054      	beq.n	203e0 <memmove+0xbc>
   20336:	1a9a      	subs	r2, r3, r2
   20338:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   2033c:	f801 4d01 	strb.w	r4, [r1, #-1]!
   20340:	4293      	cmp	r3, r2
   20342:	d1f9      	bne.n	20338 <memmove+0x14>
   20344:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20346:	2a0f      	cmp	r2, #15
   20348:	d948      	bls.n	203dc <memmove+0xb8>
   2034a:	ea40 0301 	orr.w	r3, r0, r1
   2034e:	079b      	lsls	r3, r3, #30
   20350:	d147      	bne.n	203e2 <memmove+0xbe>
   20352:	f100 0410 	add.w	r4, r0, #16
   20356:	f101 0310 	add.w	r3, r1, #16
   2035a:	4615      	mov	r5, r2
   2035c:	f853 6c10 	ldr.w	r6, [r3, #-16]
   20360:	f844 6c10 	str.w	r6, [r4, #-16]
   20364:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   20368:	f844 6c0c 	str.w	r6, [r4, #-12]
   2036c:	f853 6c08 	ldr.w	r6, [r3, #-8]
   20370:	f844 6c08 	str.w	r6, [r4, #-8]
   20374:	3d10      	subs	r5, #16
   20376:	f853 6c04 	ldr.w	r6, [r3, #-4]
   2037a:	f844 6c04 	str.w	r6, [r4, #-4]
   2037e:	2d0f      	cmp	r5, #15
   20380:	f103 0310 	add.w	r3, r3, #16
   20384:	f104 0410 	add.w	r4, r4, #16
   20388:	d8e8      	bhi.n	2035c <memmove+0x38>
   2038a:	f1a2 0310 	sub.w	r3, r2, #16
   2038e:	f023 030f 	bic.w	r3, r3, #15
   20392:	f002 0e0f 	and.w	lr, r2, #15
   20396:	3310      	adds	r3, #16
   20398:	f1be 0f03 	cmp.w	lr, #3
   2039c:	4419      	add	r1, r3
   2039e:	4403      	add	r3, r0
   203a0:	d921      	bls.n	203e6 <memmove+0xc2>
   203a2:	1f1e      	subs	r6, r3, #4
   203a4:	460d      	mov	r5, r1
   203a6:	4674      	mov	r4, lr
   203a8:	3c04      	subs	r4, #4
   203aa:	f855 7b04 	ldr.w	r7, [r5], #4
   203ae:	f846 7f04 	str.w	r7, [r6, #4]!
   203b2:	2c03      	cmp	r4, #3
   203b4:	d8f8      	bhi.n	203a8 <memmove+0x84>
   203b6:	f1ae 0404 	sub.w	r4, lr, #4
   203ba:	f024 0403 	bic.w	r4, r4, #3
   203be:	3404      	adds	r4, #4
   203c0:	4423      	add	r3, r4
   203c2:	4421      	add	r1, r4
   203c4:	f002 0203 	and.w	r2, r2, #3
   203c8:	b152      	cbz	r2, 203e0 <memmove+0xbc>
   203ca:	3b01      	subs	r3, #1
   203cc:	440a      	add	r2, r1
   203ce:	f811 4b01 	ldrb.w	r4, [r1], #1
   203d2:	f803 4f01 	strb.w	r4, [r3, #1]!
   203d6:	4291      	cmp	r1, r2
   203d8:	d1f9      	bne.n	203ce <memmove+0xaa>
   203da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   203dc:	4603      	mov	r3, r0
   203de:	e7f3      	b.n	203c8 <memmove+0xa4>
   203e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   203e2:	4603      	mov	r3, r0
   203e4:	e7f1      	b.n	203ca <memmove+0xa6>
   203e6:	4672      	mov	r2, lr
   203e8:	e7ee      	b.n	203c8 <memmove+0xa4>
   203ea:	bf00      	nop

000203ec <memset>:
   203ec:	b470      	push	{r4, r5, r6}
   203ee:	0784      	lsls	r4, r0, #30
   203f0:	d046      	beq.n	20480 <memset+0x94>
   203f2:	1e54      	subs	r4, r2, #1
   203f4:	2a00      	cmp	r2, #0
   203f6:	d041      	beq.n	2047c <memset+0x90>
   203f8:	b2cd      	uxtb	r5, r1
   203fa:	4603      	mov	r3, r0
   203fc:	e002      	b.n	20404 <memset+0x18>
   203fe:	1e62      	subs	r2, r4, #1
   20400:	b3e4      	cbz	r4, 2047c <memset+0x90>
   20402:	4614      	mov	r4, r2
   20404:	f803 5b01 	strb.w	r5, [r3], #1
   20408:	079a      	lsls	r2, r3, #30
   2040a:	d1f8      	bne.n	203fe <memset+0x12>
   2040c:	2c03      	cmp	r4, #3
   2040e:	d92e      	bls.n	2046e <memset+0x82>
   20410:	b2cd      	uxtb	r5, r1
   20412:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   20416:	2c0f      	cmp	r4, #15
   20418:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   2041c:	d919      	bls.n	20452 <memset+0x66>
   2041e:	f103 0210 	add.w	r2, r3, #16
   20422:	4626      	mov	r6, r4
   20424:	3e10      	subs	r6, #16
   20426:	2e0f      	cmp	r6, #15
   20428:	f842 5c10 	str.w	r5, [r2, #-16]
   2042c:	f842 5c0c 	str.w	r5, [r2, #-12]
   20430:	f842 5c08 	str.w	r5, [r2, #-8]
   20434:	f842 5c04 	str.w	r5, [r2, #-4]
   20438:	f102 0210 	add.w	r2, r2, #16
   2043c:	d8f2      	bhi.n	20424 <memset+0x38>
   2043e:	f1a4 0210 	sub.w	r2, r4, #16
   20442:	f022 020f 	bic.w	r2, r2, #15
   20446:	f004 040f 	and.w	r4, r4, #15
   2044a:	3210      	adds	r2, #16
   2044c:	2c03      	cmp	r4, #3
   2044e:	4413      	add	r3, r2
   20450:	d90d      	bls.n	2046e <memset+0x82>
   20452:	461e      	mov	r6, r3
   20454:	4622      	mov	r2, r4
   20456:	3a04      	subs	r2, #4
   20458:	2a03      	cmp	r2, #3
   2045a:	f846 5b04 	str.w	r5, [r6], #4
   2045e:	d8fa      	bhi.n	20456 <memset+0x6a>
   20460:	1f22      	subs	r2, r4, #4
   20462:	f022 0203 	bic.w	r2, r2, #3
   20466:	3204      	adds	r2, #4
   20468:	4413      	add	r3, r2
   2046a:	f004 0403 	and.w	r4, r4, #3
   2046e:	b12c      	cbz	r4, 2047c <memset+0x90>
   20470:	b2c9      	uxtb	r1, r1
   20472:	441c      	add	r4, r3
   20474:	f803 1b01 	strb.w	r1, [r3], #1
   20478:	42a3      	cmp	r3, r4
   2047a:	d1fb      	bne.n	20474 <memset+0x88>
   2047c:	bc70      	pop	{r4, r5, r6}
   2047e:	4770      	bx	lr
   20480:	4614      	mov	r4, r2
   20482:	4603      	mov	r3, r0
   20484:	e7c2      	b.n	2040c <memset+0x20>
   20486:	bf00      	nop
	...

00020490 <uECC_vli_sub>:
   20490:	f1c3 0308 	rsb	r3, r3, #8
   20494:	00db      	lsls	r3, r3, #3
   20496:	b470      	push	{r4, r5, r6}
   20498:	3301      	adds	r3, #1
   2049a:	2400      	movs	r4, #0
   2049c:	a503      	add	r5, pc, #12	; (adr r5, 204ac <uECC_vli_sub+0x1c>)
   2049e:	bf00      	nop
   204a0:	195b      	adds	r3, r3, r5
   204a2:	c920      	ldmia	r1!, {r5}
   204a4:	ca40      	ldmia	r2!, {r6}
   204a6:	1bad      	subs	r5, r5, r6
   204a8:	c020      	stmia	r0!, {r5}
   204aa:	4718      	bx	r3
   204ac:	c920      	ldmia	r1!, {r5}
   204ae:	ca40      	ldmia	r2!, {r6}
   204b0:	41b5      	sbcs	r5, r6
   204b2:	c020      	stmia	r0!, {r5}
   204b4:	c920      	ldmia	r1!, {r5}
   204b6:	ca40      	ldmia	r2!, {r6}
   204b8:	41b5      	sbcs	r5, r6
   204ba:	c020      	stmia	r0!, {r5}
   204bc:	c920      	ldmia	r1!, {r5}
   204be:	ca40      	ldmia	r2!, {r6}
   204c0:	41b5      	sbcs	r5, r6
   204c2:	c020      	stmia	r0!, {r5}
   204c4:	c920      	ldmia	r1!, {r5}
   204c6:	ca40      	ldmia	r2!, {r6}
   204c8:	41b5      	sbcs	r5, r6
   204ca:	c020      	stmia	r0!, {r5}
   204cc:	c920      	ldmia	r1!, {r5}
   204ce:	ca40      	ldmia	r2!, {r6}
   204d0:	41b5      	sbcs	r5, r6
   204d2:	c020      	stmia	r0!, {r5}
   204d4:	c920      	ldmia	r1!, {r5}
   204d6:	ca40      	ldmia	r2!, {r6}
   204d8:	41b5      	sbcs	r5, r6
   204da:	c020      	stmia	r0!, {r5}
   204dc:	c920      	ldmia	r1!, {r5}
   204de:	ca40      	ldmia	r2!, {r6}
   204e0:	41b5      	sbcs	r5, r6
   204e2:	c020      	stmia	r0!, {r5}
   204e4:	4164      	adcs	r4, r4
   204e6:	fab4 f084 	clz	r0, r4
   204ea:	0940      	lsrs	r0, r0, #5
   204ec:	bc70      	pop	{r4, r5, r6}
   204ee:	4770      	bx	lr

000204f0 <uECC_vli_mult>:
   204f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   204f4:	b408      	push	{r3}
   204f6:	caf8      	ldmia	r2!, {r3, r4, r5, r6, r7}
   204f8:	b404      	push	{r2}
   204fa:	f851 2b04 	ldr.w	r2, [r1], #4
   204fe:	fba3 8902 	umull	r8, r9, r3, r2
   20502:	f840 8b04 	str.w	r8, [r0], #4
   20506:	f04f 0a00 	mov.w	sl, #0
   2050a:	fbe4 9a62 	umaal	r9, sl, r4, r2
   2050e:	f04f 0b00 	mov.w	fp, #0
   20512:	fbe5 ab62 	umaal	sl, fp, r5, r2
   20516:	f04f 0c00 	mov.w	ip, #0
   2051a:	fbe6 bc62 	umaal	fp, ip, r6, r2
   2051e:	f04f 0e00 	mov.w	lr, #0
   20522:	fbe7 ce62 	umaal	ip, lr, r7, r2
   20526:	f851 2b04 	ldr.w	r2, [r1], #4
   2052a:	f04f 0800 	mov.w	r8, #0
   2052e:	fbe3 8962 	umaal	r8, r9, r3, r2
   20532:	f840 8b04 	str.w	r8, [r0], #4
   20536:	fbe4 9a62 	umaal	r9, sl, r4, r2
   2053a:	fbe5 ab62 	umaal	sl, fp, r5, r2
   2053e:	fbe6 bc62 	umaal	fp, ip, r6, r2
   20542:	fbe7 ce62 	umaal	ip, lr, r7, r2
   20546:	f851 2b04 	ldr.w	r2, [r1], #4
   2054a:	f04f 0800 	mov.w	r8, #0
   2054e:	fbe3 8962 	umaal	r8, r9, r3, r2
   20552:	f840 8b04 	str.w	r8, [r0], #4
   20556:	fbe4 9a62 	umaal	r9, sl, r4, r2
   2055a:	fbe5 ab62 	umaal	sl, fp, r5, r2
   2055e:	fbe6 bc62 	umaal	fp, ip, r6, r2
   20562:	fbe7 ce62 	umaal	ip, lr, r7, r2
   20566:	f851 2b04 	ldr.w	r2, [r1], #4
   2056a:	f04f 0800 	mov.w	r8, #0
   2056e:	fbe3 8962 	umaal	r8, r9, r3, r2
   20572:	f840 8b04 	str.w	r8, [r0], #4
   20576:	fbe4 9a62 	umaal	r9, sl, r4, r2
   2057a:	fbe5 ab62 	umaal	sl, fp, r5, r2
   2057e:	fbe6 bc62 	umaal	fp, ip, r6, r2
   20582:	fbe7 ce62 	umaal	ip, lr, r7, r2
   20586:	f851 2b04 	ldr.w	r2, [r1], #4
   2058a:	f04f 0800 	mov.w	r8, #0
   2058e:	fbe3 8962 	umaal	r8, r9, r3, r2
   20592:	f840 8b04 	str.w	r8, [r0], #4
   20596:	fbe4 9a62 	umaal	r9, sl, r4, r2
   2059a:	fbe5 ab62 	umaal	sl, fp, r5, r2
   2059e:	fbe6 bc62 	umaal	fp, ip, r6, r2
   205a2:	fbe7 ce62 	umaal	ip, lr, r7, r2
   205a6:	f840 9b04 	str.w	r9, [r0], #4
   205aa:	f840 ab04 	str.w	sl, [r0], #4
   205ae:	f840 bb04 	str.w	fp, [r0], #4
   205b2:	f840 cb04 	str.w	ip, [r0], #4
   205b6:	f840 eb04 	str.w	lr, [r0], #4
   205ba:	bc0c      	pop	{r2, r3}
   205bc:	2b05      	cmp	r3, #5
   205be:	f000 811e 	beq.w	207fe <uECC_vli_mult+0x30e>
   205c2:	680c      	ldr	r4, [r1, #0]
   205c4:	f1a0 0014 	sub.w	r0, r0, #20
   205c8:	f1a1 0114 	sub.w	r1, r1, #20
   205cc:	f1a2 0214 	sub.w	r2, r2, #20
   205d0:	f852 eb04 	ldr.w	lr, [r2], #4
   205d4:	f04f 0500 	mov.w	r5, #0
   205d8:	f850 6b04 	ldr.w	r6, [r0], #4
   205dc:	fbe4 566e 	umaal	r5, r6, r4, lr
   205e0:	f852 eb04 	ldr.w	lr, [r2], #4
   205e4:	f850 7b04 	ldr.w	r7, [r0], #4
   205e8:	fbe4 676e 	umaal	r6, r7, r4, lr
   205ec:	f852 eb04 	ldr.w	lr, [r2], #4
   205f0:	f850 8b04 	ldr.w	r8, [r0], #4
   205f4:	fbe4 786e 	umaal	r7, r8, r4, lr
   205f8:	f852 eb04 	ldr.w	lr, [r2], #4
   205fc:	f850 9b04 	ldr.w	r9, [r0], #4
   20600:	fbe4 896e 	umaal	r8, r9, r4, lr
   20604:	f852 eb04 	ldr.w	lr, [r2], #4
   20608:	f850 ab04 	ldr.w	sl, [r0], #4
   2060c:	fbe4 9a6e 	umaal	r9, sl, r4, lr
   20610:	f1a0 0014 	sub.w	r0, r0, #20
   20614:	f852 4b04 	ldr.w	r4, [r2], #4
   20618:	f851 eb04 	ldr.w	lr, [r1], #4
   2061c:	f04f 0c00 	mov.w	ip, #0
   20620:	fbe4 c56e 	umaal	ip, r5, r4, lr
   20624:	f840 cb04 	str.w	ip, [r0], #4
   20628:	f851 eb04 	ldr.w	lr, [r1], #4
   2062c:	fbe4 566e 	umaal	r5, r6, r4, lr
   20630:	f840 5b04 	str.w	r5, [r0], #4
   20634:	f851 eb04 	ldr.w	lr, [r1], #4
   20638:	fbe4 676e 	umaal	r6, r7, r4, lr
   2063c:	f840 6b04 	str.w	r6, [r0], #4
   20640:	f851 eb04 	ldr.w	lr, [r1], #4
   20644:	fbe4 786e 	umaal	r7, r8, r4, lr
   20648:	f840 7b04 	str.w	r7, [r0], #4
   2064c:	f851 eb04 	ldr.w	lr, [r1], #4
   20650:	fbe4 896e 	umaal	r8, r9, r4, lr
   20654:	f840 8b04 	str.w	r8, [r0], #4
   20658:	f851 eb04 	ldr.w	lr, [r1], #4
   2065c:	fbe4 9a6e 	umaal	r9, sl, r4, lr
   20660:	e8a0 0600 	stmia.w	r0!, {r9, sl}
   20664:	2b06      	cmp	r3, #6
   20666:	f000 80ca 	beq.w	207fe <uECC_vli_mult+0x30e>
   2066a:	680c      	ldr	r4, [r1, #0]
   2066c:	f1a0 0018 	sub.w	r0, r0, #24
   20670:	f1a1 0118 	sub.w	r1, r1, #24
   20674:	f1a2 0218 	sub.w	r2, r2, #24
   20678:	f852 eb04 	ldr.w	lr, [r2], #4
   2067c:	f04f 0500 	mov.w	r5, #0
   20680:	f850 6b04 	ldr.w	r6, [r0], #4
   20684:	fbe4 566e 	umaal	r5, r6, r4, lr
   20688:	f852 eb04 	ldr.w	lr, [r2], #4
   2068c:	f850 7b04 	ldr.w	r7, [r0], #4
   20690:	fbe4 676e 	umaal	r6, r7, r4, lr
   20694:	f852 eb04 	ldr.w	lr, [r2], #4
   20698:	f850 8b04 	ldr.w	r8, [r0], #4
   2069c:	fbe4 786e 	umaal	r7, r8, r4, lr
   206a0:	f852 eb04 	ldr.w	lr, [r2], #4
   206a4:	f850 9b04 	ldr.w	r9, [r0], #4
   206a8:	fbe4 896e 	umaal	r8, r9, r4, lr
   206ac:	f852 eb04 	ldr.w	lr, [r2], #4
   206b0:	f850 ab04 	ldr.w	sl, [r0], #4
   206b4:	fbe4 9a6e 	umaal	r9, sl, r4, lr
   206b8:	f852 eb04 	ldr.w	lr, [r2], #4
   206bc:	f850 bb04 	ldr.w	fp, [r0], #4
   206c0:	fbe4 ab6e 	umaal	sl, fp, r4, lr
   206c4:	f1a0 0018 	sub.w	r0, r0, #24
   206c8:	f852 4b04 	ldr.w	r4, [r2], #4
   206cc:	f851 eb04 	ldr.w	lr, [r1], #4
   206d0:	f04f 0c00 	mov.w	ip, #0
   206d4:	fbe4 c56e 	umaal	ip, r5, r4, lr
   206d8:	f840 cb04 	str.w	ip, [r0], #4
   206dc:	f851 eb04 	ldr.w	lr, [r1], #4
   206e0:	fbe4 566e 	umaal	r5, r6, r4, lr
   206e4:	f840 5b04 	str.w	r5, [r0], #4
   206e8:	f851 eb04 	ldr.w	lr, [r1], #4
   206ec:	fbe4 676e 	umaal	r6, r7, r4, lr
   206f0:	f840 6b04 	str.w	r6, [r0], #4
   206f4:	f851 eb04 	ldr.w	lr, [r1], #4
   206f8:	fbe4 786e 	umaal	r7, r8, r4, lr
   206fc:	f840 7b04 	str.w	r7, [r0], #4
   20700:	f851 eb04 	ldr.w	lr, [r1], #4
   20704:	fbe4 896e 	umaal	r8, r9, r4, lr
   20708:	f840 8b04 	str.w	r8, [r0], #4
   2070c:	f851 eb04 	ldr.w	lr, [r1], #4
   20710:	fbe4 9a6e 	umaal	r9, sl, r4, lr
   20714:	f840 9b04 	str.w	r9, [r0], #4
   20718:	f851 eb04 	ldr.w	lr, [r1], #4
   2071c:	fbe4 ab6e 	umaal	sl, fp, r4, lr
   20720:	e8a0 0c00 	stmia.w	r0!, {sl, fp}
   20724:	2b07      	cmp	r3, #7
   20726:	d06a      	beq.n	207fe <uECC_vli_mult+0x30e>
   20728:	b408      	push	{r3}
   2072a:	680c      	ldr	r4, [r1, #0]
   2072c:	f1a0 001c 	sub.w	r0, r0, #28
   20730:	f1a1 011c 	sub.w	r1, r1, #28
   20734:	f1a2 021c 	sub.w	r2, r2, #28
   20738:	f852 eb04 	ldr.w	lr, [r2], #4
   2073c:	f04f 0500 	mov.w	r5, #0
   20740:	f850 6b04 	ldr.w	r6, [r0], #4
   20744:	fbe4 566e 	umaal	r5, r6, r4, lr
   20748:	f852 eb04 	ldr.w	lr, [r2], #4
   2074c:	f850 7b04 	ldr.w	r7, [r0], #4
   20750:	fbe4 676e 	umaal	r6, r7, r4, lr
   20754:	f852 eb04 	ldr.w	lr, [r2], #4
   20758:	f850 8b04 	ldr.w	r8, [r0], #4
   2075c:	fbe4 786e 	umaal	r7, r8, r4, lr
   20760:	f852 eb04 	ldr.w	lr, [r2], #4
   20764:	f850 9b04 	ldr.w	r9, [r0], #4
   20768:	fbe4 896e 	umaal	r8, r9, r4, lr
   2076c:	f852 eb04 	ldr.w	lr, [r2], #4
   20770:	f850 ab04 	ldr.w	sl, [r0], #4
   20774:	fbe4 9a6e 	umaal	r9, sl, r4, lr
   20778:	f852 eb04 	ldr.w	lr, [r2], #4
   2077c:	f850 bb04 	ldr.w	fp, [r0], #4
   20780:	fbe4 ab6e 	umaal	sl, fp, r4, lr
   20784:	f852 eb04 	ldr.w	lr, [r2], #4
   20788:	f850 cb04 	ldr.w	ip, [r0], #4
   2078c:	fbe4 bc6e 	umaal	fp, ip, r4, lr
   20790:	f1a0 001c 	sub.w	r0, r0, #28
   20794:	f852 4b04 	ldr.w	r4, [r2], #4
   20798:	f851 eb04 	ldr.w	lr, [r1], #4
   2079c:	f04f 0300 	mov.w	r3, #0
   207a0:	fbe4 356e 	umaal	r3, r5, r4, lr
   207a4:	f840 3b04 	str.w	r3, [r0], #4
   207a8:	f851 eb04 	ldr.w	lr, [r1], #4
   207ac:	fbe4 566e 	umaal	r5, r6, r4, lr
   207b0:	f840 5b04 	str.w	r5, [r0], #4
   207b4:	f851 eb04 	ldr.w	lr, [r1], #4
   207b8:	fbe4 676e 	umaal	r6, r7, r4, lr
   207bc:	f840 6b04 	str.w	r6, [r0], #4
   207c0:	f851 eb04 	ldr.w	lr, [r1], #4
   207c4:	fbe4 786e 	umaal	r7, r8, r4, lr
   207c8:	f840 7b04 	str.w	r7, [r0], #4
   207cc:	f851 eb04 	ldr.w	lr, [r1], #4
   207d0:	fbe4 896e 	umaal	r8, r9, r4, lr
   207d4:	f840 8b04 	str.w	r8, [r0], #4
   207d8:	f851 eb04 	ldr.w	lr, [r1], #4
   207dc:	fbe4 9a6e 	umaal	r9, sl, r4, lr
   207e0:	f840 9b04 	str.w	r9, [r0], #4
   207e4:	f851 eb04 	ldr.w	lr, [r1], #4
   207e8:	fbe4 ab6e 	umaal	sl, fp, r4, lr
   207ec:	f840 ab04 	str.w	sl, [r0], #4
   207f0:	f851 eb04 	ldr.w	lr, [r1], #4
   207f4:	fbe4 bc6e 	umaal	fp, ip, r4, lr
   207f8:	e8a0 1800 	stmia.w	r0!, {fp, ip}
   207fc:	bc08      	pop	{r3}
   207fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20802:	bf00      	nop
	...

00020810 <uECC_vli_modAdd>:
   20810:	b5f0      	push	{r4, r5, r6, r7, lr}
   20812:	f99d c014 	ldrsb.w	ip, [sp, #20]
   20816:	f1cc 0408 	rsb	r4, ip, #8
   2081a:	00e4      	lsls	r4, r4, #3
   2081c:	3401      	adds	r4, #1
   2081e:	469e      	mov	lr, r3
   20820:	4623      	mov	r3, r4
   20822:	4604      	mov	r4, r0
   20824:	2700      	movs	r7, #0
   20826:	a505      	add	r5, pc, #20	; (adr r5, 2083c <uECC_vli_modAdd+0x2c>)
   20828:	f3af 8000 	nop.w
   2082c:	f3af 8000 	nop.w
   20830:	195b      	adds	r3, r3, r5
   20832:	c920      	ldmia	r1!, {r5}
   20834:	ca40      	ldmia	r2!, {r6}
   20836:	19ad      	adds	r5, r5, r6
   20838:	c420      	stmia	r4!, {r5}
   2083a:	4718      	bx	r3
   2083c:	c920      	ldmia	r1!, {r5}
   2083e:	ca40      	ldmia	r2!, {r6}
   20840:	4175      	adcs	r5, r6
   20842:	c420      	stmia	r4!, {r5}
   20844:	c920      	ldmia	r1!, {r5}
   20846:	ca40      	ldmia	r2!, {r6}
   20848:	4175      	adcs	r5, r6
   2084a:	c420      	stmia	r4!, {r5}
   2084c:	c920      	ldmia	r1!, {r5}
   2084e:	ca40      	ldmia	r2!, {r6}
   20850:	4175      	adcs	r5, r6
   20852:	c420      	stmia	r4!, {r5}
   20854:	c920      	ldmia	r1!, {r5}
   20856:	ca40      	ldmia	r2!, {r6}
   20858:	4175      	adcs	r5, r6
   2085a:	c420      	stmia	r4!, {r5}
   2085c:	c920      	ldmia	r1!, {r5}
   2085e:	ca40      	ldmia	r2!, {r6}
   20860:	4175      	adcs	r5, r6
   20862:	c420      	stmia	r4!, {r5}
   20864:	c920      	ldmia	r1!, {r5}
   20866:	ca40      	ldmia	r2!, {r6}
   20868:	4175      	adcs	r5, r6
   2086a:	c420      	stmia	r4!, {r5}
   2086c:	c920      	ldmia	r1!, {r5}
   2086e:	ca40      	ldmia	r2!, {r6}
   20870:	4175      	adcs	r5, r6
   20872:	c420      	stmia	r4!, {r5}
   20874:	417f      	adcs	r7, r7
   20876:	b9c7      	cbnz	r7, 208aa <uECC_vli_modAdd+0x9a>
   20878:	f10c 33ff 	add.w	r3, ip, #4294967295
   2087c:	b25b      	sxtb	r3, r3
   2087e:	2b00      	cmp	r3, #0
   20880:	db13      	blt.n	208aa <uECC_vli_modAdd+0x9a>
   20882:	b21a      	sxth	r2, r3
   20884:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
   20888:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   2088c:	4291      	cmp	r1, r2
   2088e:	d80b      	bhi.n	208a8 <uECC_vli_modAdd+0x98>
   20890:	d30b      	bcc.n	208aa <uECC_vli_modAdd+0x9a>
   20892:	3b01      	subs	r3, #1
   20894:	b25b      	sxtb	r3, r3
   20896:	1c59      	adds	r1, r3, #1
   20898:	b21a      	sxth	r2, r3
   2089a:	d006      	beq.n	208aa <uECC_vli_modAdd+0x9a>
   2089c:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
   208a0:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   208a4:	4291      	cmp	r1, r2
   208a6:	d9f3      	bls.n	20890 <uECC_vli_modAdd+0x80>
   208a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   208aa:	4672      	mov	r2, lr
   208ac:	4663      	mov	r3, ip
   208ae:	4601      	mov	r1, r0
   208b0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   208b4:	f7ff bdec 	b.w	20490 <uECC_vli_sub>
	...

000208c0 <uECC_vli_modSub>:
   208c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   208c2:	f99d 4014 	ldrsb.w	r4, [sp, #20]
   208c6:	f1c4 0408 	rsb	r4, r4, #8
   208ca:	00e4      	lsls	r4, r4, #3
   208cc:	1c66      	adds	r6, r4, #1
   208ce:	4686      	mov	lr, r0
   208d0:	469c      	mov	ip, r3
   208d2:	4635      	mov	r5, r6
   208d4:	4604      	mov	r4, r0
   208d6:	2700      	movs	r7, #0
   208d8:	a304      	add	r3, pc, #16	; (adr r3, 208ec <uECC_vli_modSub+0x2c>)
   208da:	bf00      	nop
   208dc:	f3af 8000 	nop.w
   208e0:	18ed      	adds	r5, r5, r3
   208e2:	c908      	ldmia	r1!, {r3}
   208e4:	ca01      	ldmia	r2!, {r0}
   208e6:	1a1b      	subs	r3, r3, r0
   208e8:	c408      	stmia	r4!, {r3}
   208ea:	4728      	bx	r5
   208ec:	c908      	ldmia	r1!, {r3}
   208ee:	ca01      	ldmia	r2!, {r0}
   208f0:	4183      	sbcs	r3, r0
   208f2:	c408      	stmia	r4!, {r3}
   208f4:	c908      	ldmia	r1!, {r3}
   208f6:	ca01      	ldmia	r2!, {r0}
   208f8:	4183      	sbcs	r3, r0
   208fa:	c408      	stmia	r4!, {r3}
   208fc:	c908      	ldmia	r1!, {r3}
   208fe:	ca01      	ldmia	r2!, {r0}
   20900:	4183      	sbcs	r3, r0
   20902:	c408      	stmia	r4!, {r3}
   20904:	c908      	ldmia	r1!, {r3}
   20906:	ca01      	ldmia	r2!, {r0}
   20908:	4183      	sbcs	r3, r0
   2090a:	c408      	stmia	r4!, {r3}
   2090c:	c908      	ldmia	r1!, {r3}
   2090e:	ca01      	ldmia	r2!, {r0}
   20910:	4183      	sbcs	r3, r0
   20912:	c408      	stmia	r4!, {r3}
   20914:	c908      	ldmia	r1!, {r3}
   20916:	ca01      	ldmia	r2!, {r0}
   20918:	4183      	sbcs	r3, r0
   2091a:	c408      	stmia	r4!, {r3}
   2091c:	c908      	ldmia	r1!, {r3}
   2091e:	ca01      	ldmia	r2!, {r0}
   20920:	4183      	sbcs	r3, r0
   20922:	c408      	stmia	r4!, {r3}
   20924:	417f      	adcs	r7, r7
   20926:	2f00      	cmp	r7, #0
   20928:	d12d      	bne.n	20986 <uECC_vli_modSub+0xc6>
   2092a:	4670      	mov	r0, lr
   2092c:	4663      	mov	r3, ip
   2092e:	4634      	mov	r4, r6
   20930:	4672      	mov	r2, lr
   20932:	2100      	movs	r1, #0
   20934:	a505      	add	r5, pc, #20	; (adr r5, 2094c <uECC_vli_modSub+0x8c>)
   20936:	bf00      	nop
   20938:	f3af 8000 	nop.w
   2093c:	f3af 8000 	nop.w
   20940:	1964      	adds	r4, r4, r5
   20942:	ca20      	ldmia	r2!, {r5}
   20944:	cb40      	ldmia	r3!, {r6}
   20946:	19ad      	adds	r5, r5, r6
   20948:	c020      	stmia	r0!, {r5}
   2094a:	4720      	bx	r4
   2094c:	ca20      	ldmia	r2!, {r5}
   2094e:	cb40      	ldmia	r3!, {r6}
   20950:	4175      	adcs	r5, r6
   20952:	c020      	stmia	r0!, {r5}
   20954:	ca20      	ldmia	r2!, {r5}
   20956:	cb40      	ldmia	r3!, {r6}
   20958:	4175      	adcs	r5, r6
   2095a:	c020      	stmia	r0!, {r5}
   2095c:	ca20      	ldmia	r2!, {r5}
   2095e:	cb40      	ldmia	r3!, {r6}
   20960:	4175      	adcs	r5, r6
   20962:	c020      	stmia	r0!, {r5}
   20964:	ca20      	ldmia	r2!, {r5}
   20966:	cb40      	ldmia	r3!, {r6}
   20968:	4175      	adcs	r5, r6
   2096a:	c020      	stmia	r0!, {r5}
   2096c:	ca20      	ldmia	r2!, {r5}
   2096e:	cb40      	ldmia	r3!, {r6}
   20970:	4175      	adcs	r5, r6
   20972:	c020      	stmia	r0!, {r5}
   20974:	ca20      	ldmia	r2!, {r5}
   20976:	cb40      	ldmia	r3!, {r6}
   20978:	4175      	adcs	r5, r6
   2097a:	c020      	stmia	r0!, {r5}
   2097c:	ca20      	ldmia	r2!, {r5}
   2097e:	cb40      	ldmia	r3!, {r6}
   20980:	4175      	adcs	r5, r6
   20982:	c020      	stmia	r0!, {r5}
   20984:	4149      	adcs	r1, r1
   20986:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00020990 <x_side_default>:
   20990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20994:	4693      	mov	fp, r2
   20996:	b09b      	sub	sp, #108	; 0x6c
   20998:	4604      	mov	r4, r0
   2099a:	4689      	mov	r9, r1
   2099c:	a802      	add	r0, sp, #8
   2099e:	2220      	movs	r2, #32
   209a0:	2100      	movs	r1, #0
   209a2:	f7ff fd23 	bl	203ec <memset>
   209a6:	f99b 3000 	ldrsb.w	r3, [fp]
   209aa:	9301      	str	r3, [sp, #4]
   209ac:	464a      	mov	r2, r9
   209ae:	4649      	mov	r1, r9
   209b0:	a80a      	add	r0, sp, #40	; 0x28
   209b2:	2503      	movs	r5, #3
   209b4:	461e      	mov	r6, r3
   209b6:	9502      	str	r5, [sp, #8]
   209b8:	f7ff fd9a 	bl	204f0 <uECC_vli_mult>
   209bc:	f8db 30ac 	ldr.w	r3, [fp, #172]	; 0xac
   209c0:	a90a      	add	r1, sp, #40	; 0x28
   209c2:	4620      	mov	r0, r4
   209c4:	4798      	blx	r3
   209c6:	f1c6 0108 	rsb	r1, r6, #8
   209ca:	40a9      	lsls	r1, r5
   209cc:	f101 0801 	add.w	r8, r1, #1
   209d0:	aa02      	add	r2, sp, #8
   209d2:	4641      	mov	r1, r8
   209d4:	f10b 0a04 	add.w	sl, fp, #4
   209d8:	4623      	mov	r3, r4
   209da:	4626      	mov	r6, r4
   209dc:	2000      	movs	r0, #0
   209de:	a703      	add	r7, pc, #12	; (adr r7, 209ec <x_side_default+0x5c>)
   209e0:	19c9      	adds	r1, r1, r7
   209e2:	ce80      	ldmia	r6!, {r7}
   209e4:	ca20      	ldmia	r2!, {r5}
   209e6:	1b7f      	subs	r7, r7, r5
   209e8:	c380      	stmia	r3!, {r7}
   209ea:	4708      	bx	r1
   209ec:	ce80      	ldmia	r6!, {r7}
   209ee:	ca20      	ldmia	r2!, {r5}
   209f0:	41af      	sbcs	r7, r5
   209f2:	c380      	stmia	r3!, {r7}
   209f4:	ce80      	ldmia	r6!, {r7}
   209f6:	ca20      	ldmia	r2!, {r5}
   209f8:	41af      	sbcs	r7, r5
   209fa:	c380      	stmia	r3!, {r7}
   209fc:	ce80      	ldmia	r6!, {r7}
   209fe:	ca20      	ldmia	r2!, {r5}
   20a00:	41af      	sbcs	r7, r5
   20a02:	c380      	stmia	r3!, {r7}
   20a04:	ce80      	ldmia	r6!, {r7}
   20a06:	ca20      	ldmia	r2!, {r5}
   20a08:	41af      	sbcs	r7, r5
   20a0a:	c380      	stmia	r3!, {r7}
   20a0c:	ce80      	ldmia	r6!, {r7}
   20a0e:	ca20      	ldmia	r2!, {r5}
   20a10:	41af      	sbcs	r7, r5
   20a12:	c380      	stmia	r3!, {r7}
   20a14:	ce80      	ldmia	r6!, {r7}
   20a16:	ca20      	ldmia	r2!, {r5}
   20a18:	41af      	sbcs	r7, r5
   20a1a:	c380      	stmia	r3!, {r7}
   20a1c:	ce80      	ldmia	r6!, {r7}
   20a1e:	ca20      	ldmia	r2!, {r5}
   20a20:	41af      	sbcs	r7, r5
   20a22:	c380      	stmia	r3!, {r7}
   20a24:	4140      	adcs	r0, r0
   20a26:	2800      	cmp	r0, #0
   20a28:	d12d      	bne.n	20a86 <x_side_default+0xf6>
   20a2a:	4623      	mov	r3, r4
   20a2c:	4652      	mov	r2, sl
   20a2e:	4641      	mov	r1, r8
   20a30:	4620      	mov	r0, r4
   20a32:	2500      	movs	r5, #0
   20a34:	a605      	add	r6, pc, #20	; (adr r6, 20a4c <x_side_default+0xbc>)
   20a36:	bf00      	nop
   20a38:	f3af 8000 	nop.w
   20a3c:	f3af 8000 	nop.w
   20a40:	1989      	adds	r1, r1, r6
   20a42:	c840      	ldmia	r0!, {r6}
   20a44:	ca80      	ldmia	r2!, {r7}
   20a46:	19f6      	adds	r6, r6, r7
   20a48:	c340      	stmia	r3!, {r6}
   20a4a:	4708      	bx	r1
   20a4c:	c840      	ldmia	r0!, {r6}
   20a4e:	ca80      	ldmia	r2!, {r7}
   20a50:	417e      	adcs	r6, r7
   20a52:	c340      	stmia	r3!, {r6}
   20a54:	c840      	ldmia	r0!, {r6}
   20a56:	ca80      	ldmia	r2!, {r7}
   20a58:	417e      	adcs	r6, r7
   20a5a:	c340      	stmia	r3!, {r6}
   20a5c:	c840      	ldmia	r0!, {r6}
   20a5e:	ca80      	ldmia	r2!, {r7}
   20a60:	417e      	adcs	r6, r7
   20a62:	c340      	stmia	r3!, {r6}
   20a64:	c840      	ldmia	r0!, {r6}
   20a66:	ca80      	ldmia	r2!, {r7}
   20a68:	417e      	adcs	r6, r7
   20a6a:	c340      	stmia	r3!, {r6}
   20a6c:	c840      	ldmia	r0!, {r6}
   20a6e:	ca80      	ldmia	r2!, {r7}
   20a70:	417e      	adcs	r6, r7
   20a72:	c340      	stmia	r3!, {r6}
   20a74:	c840      	ldmia	r0!, {r6}
   20a76:	ca80      	ldmia	r2!, {r7}
   20a78:	417e      	adcs	r6, r7
   20a7a:	c340      	stmia	r3!, {r6}
   20a7c:	c840      	ldmia	r0!, {r6}
   20a7e:	ca80      	ldmia	r2!, {r7}
   20a80:	417e      	adcs	r6, r7
   20a82:	c340      	stmia	r3!, {r6}
   20a84:	416d      	adcs	r5, r5
   20a86:	464a      	mov	r2, r9
   20a88:	f99b 3000 	ldrsb.w	r3, [fp]
   20a8c:	4621      	mov	r1, r4
   20a8e:	a80a      	add	r0, sp, #40	; 0x28
   20a90:	f7ff fd2e 	bl	204f0 <uECC_vli_mult>
   20a94:	a90a      	add	r1, sp, #40	; 0x28
   20a96:	f8db 30ac 	ldr.w	r3, [fp, #172]	; 0xac
   20a9a:	4620      	mov	r0, r4
   20a9c:	4798      	blx	r3
   20a9e:	4626      	mov	r6, r4
   20aa0:	f10b 0384 	add.w	r3, fp, #132	; 0x84
   20aa4:	4641      	mov	r1, r8
   20aa6:	4622      	mov	r2, r4
   20aa8:	2000      	movs	r0, #0
   20aaa:	a504      	add	r5, pc, #16	; (adr r5, 20abc <x_side_default+0x12c>)
   20aac:	f3af 8000 	nop.w
   20ab0:	1949      	adds	r1, r1, r5
   20ab2:	ce20      	ldmia	r6!, {r5}
   20ab4:	cb80      	ldmia	r3!, {r7}
   20ab6:	19ed      	adds	r5, r5, r7
   20ab8:	c220      	stmia	r2!, {r5}
   20aba:	4708      	bx	r1
   20abc:	ce20      	ldmia	r6!, {r5}
   20abe:	cb80      	ldmia	r3!, {r7}
   20ac0:	417d      	adcs	r5, r7
   20ac2:	c220      	stmia	r2!, {r5}
   20ac4:	ce20      	ldmia	r6!, {r5}
   20ac6:	cb80      	ldmia	r3!, {r7}
   20ac8:	417d      	adcs	r5, r7
   20aca:	c220      	stmia	r2!, {r5}
   20acc:	ce20      	ldmia	r6!, {r5}
   20ace:	cb80      	ldmia	r3!, {r7}
   20ad0:	417d      	adcs	r5, r7
   20ad2:	c220      	stmia	r2!, {r5}
   20ad4:	ce20      	ldmia	r6!, {r5}
   20ad6:	cb80      	ldmia	r3!, {r7}
   20ad8:	417d      	adcs	r5, r7
   20ada:	c220      	stmia	r2!, {r5}
   20adc:	ce20      	ldmia	r6!, {r5}
   20ade:	cb80      	ldmia	r3!, {r7}
   20ae0:	417d      	adcs	r5, r7
   20ae2:	c220      	stmia	r2!, {r5}
   20ae4:	ce20      	ldmia	r6!, {r5}
   20ae6:	cb80      	ldmia	r3!, {r7}
   20ae8:	417d      	adcs	r5, r7
   20aea:	c220      	stmia	r2!, {r5}
   20aec:	ce20      	ldmia	r6!, {r5}
   20aee:	cb80      	ldmia	r3!, {r7}
   20af0:	417d      	adcs	r5, r7
   20af2:	c220      	stmia	r2!, {r5}
   20af4:	4140      	adcs	r0, r0
   20af6:	b9d0      	cbnz	r0, 20b2e <x_side_default+0x19e>
   20af8:	9b01      	ldr	r3, [sp, #4]
   20afa:	3b01      	subs	r3, #1
   20afc:	b25b      	sxtb	r3, r3
   20afe:	2b00      	cmp	r3, #0
   20b00:	db15      	blt.n	20b2e <x_side_default+0x19e>
   20b02:	b21a      	sxth	r2, r3
   20b04:	f85a 1022 	ldr.w	r1, [sl, r2, lsl #2]
   20b08:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   20b0c:	4291      	cmp	r1, r2
   20b0e:	d80b      	bhi.n	20b28 <x_side_default+0x198>
   20b10:	d30d      	bcc.n	20b2e <x_side_default+0x19e>
   20b12:	3b01      	subs	r3, #1
   20b14:	b25b      	sxtb	r3, r3
   20b16:	1c59      	adds	r1, r3, #1
   20b18:	b21a      	sxth	r2, r3
   20b1a:	d008      	beq.n	20b2e <x_side_default+0x19e>
   20b1c:	f85a 1022 	ldr.w	r1, [sl, r2, lsl #2]
   20b20:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   20b24:	4291      	cmp	r1, r2
   20b26:	d9f3      	bls.n	20b10 <x_side_default+0x180>
   20b28:	b01b      	add	sp, #108	; 0x6c
   20b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20b2e:	9b01      	ldr	r3, [sp, #4]
   20b30:	4652      	mov	r2, sl
   20b32:	4621      	mov	r1, r4
   20b34:	4620      	mov	r0, r4
   20b36:	f7ff fcab 	bl	20490 <uECC_vli_sub>
   20b3a:	b01b      	add	sp, #108	; 0x6c
   20b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00020b40 <vli_mmod_fast_secp256r1>:
   20b40:	680b      	ldr	r3, [r1, #0]
   20b42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20b46:	6003      	str	r3, [r0, #0]
   20b48:	684b      	ldr	r3, [r1, #4]
   20b4a:	6043      	str	r3, [r0, #4]
   20b4c:	688b      	ldr	r3, [r1, #8]
   20b4e:	6083      	str	r3, [r0, #8]
   20b50:	68cb      	ldr	r3, [r1, #12]
   20b52:	60c3      	str	r3, [r0, #12]
   20b54:	690b      	ldr	r3, [r1, #16]
   20b56:	6103      	str	r3, [r0, #16]
   20b58:	694b      	ldr	r3, [r1, #20]
   20b5a:	6143      	str	r3, [r0, #20]
   20b5c:	698b      	ldr	r3, [r1, #24]
   20b5e:	6183      	str	r3, [r0, #24]
   20b60:	69cb      	ldr	r3, [r1, #28]
   20b62:	61c3      	str	r3, [r0, #28]
   20b64:	b08d      	sub	sp, #52	; 0x34
   20b66:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
   20b68:	6b0f      	ldr	r7, [r1, #48]	; 0x30
   20b6a:	6b4e      	ldr	r6, [r1, #52]	; 0x34
   20b6c:	6b8d      	ldr	r5, [r1, #56]	; 0x38
   20b6e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   20b70:	940b      	str	r4, [sp, #44]	; 0x2c
   20b72:	f04f 0a00 	mov.w	sl, #0
   20b76:	ac04      	add	r4, sp, #16
   20b78:	9708      	str	r7, [sp, #32]
   20b7a:	9609      	str	r6, [sp, #36]	; 0x24
   20b7c:	950a      	str	r5, [sp, #40]	; 0x28
   20b7e:	4681      	mov	r9, r0
   20b80:	9307      	str	r3, [sp, #28]
   20b82:	f8cd a018 	str.w	sl, [sp, #24]
   20b86:	f8cd a014 	str.w	sl, [sp, #20]
   20b8a:	f8cd a010 	str.w	sl, [sp, #16]
   20b8e:	2501      	movs	r5, #1
   20b90:	4626      	mov	r6, r4
   20b92:	4627      	mov	r7, r4
   20b94:	2300      	movs	r3, #0
   20b96:	a205      	add	r2, pc, #20	; (adr r2, 20bac <vli_mmod_fast_secp256r1+0x6c>)
   20b98:	f3af 8000 	nop.w
   20b9c:	f3af 8000 	nop.w
   20ba0:	18ad      	adds	r5, r5, r2
   20ba2:	ce04      	ldmia	r6!, {r2}
   20ba4:	cf01      	ldmia	r7!, {r0}
   20ba6:	1812      	adds	r2, r2, r0
   20ba8:	c404      	stmia	r4!, {r2}
   20baa:	4728      	bx	r5
   20bac:	ce04      	ldmia	r6!, {r2}
   20bae:	cf01      	ldmia	r7!, {r0}
   20bb0:	4142      	adcs	r2, r0
   20bb2:	c404      	stmia	r4!, {r2}
   20bb4:	ce04      	ldmia	r6!, {r2}
   20bb6:	cf01      	ldmia	r7!, {r0}
   20bb8:	4142      	adcs	r2, r0
   20bba:	c404      	stmia	r4!, {r2}
   20bbc:	ce04      	ldmia	r6!, {r2}
   20bbe:	cf01      	ldmia	r7!, {r0}
   20bc0:	4142      	adcs	r2, r0
   20bc2:	c404      	stmia	r4!, {r2}
   20bc4:	ce04      	ldmia	r6!, {r2}
   20bc6:	cf01      	ldmia	r7!, {r0}
   20bc8:	4142      	adcs	r2, r0
   20bca:	c404      	stmia	r4!, {r2}
   20bcc:	ce04      	ldmia	r6!, {r2}
   20bce:	cf01      	ldmia	r7!, {r0}
   20bd0:	4142      	adcs	r2, r0
   20bd2:	c404      	stmia	r4!, {r2}
   20bd4:	ce04      	ldmia	r6!, {r2}
   20bd6:	cf01      	ldmia	r7!, {r0}
   20bd8:	4142      	adcs	r2, r0
   20bda:	c404      	stmia	r4!, {r2}
   20bdc:	ce04      	ldmia	r6!, {r2}
   20bde:	cf01      	ldmia	r7!, {r0}
   20be0:	4142      	adcs	r2, r0
   20be2:	c404      	stmia	r4!, {r2}
   20be4:	415b      	adcs	r3, r3
   20be6:	2601      	movs	r6, #1
   20be8:	9300      	str	r3, [sp, #0]
   20bea:	464c      	mov	r4, r9
   20bec:	ad04      	add	r5, sp, #16
   20bee:	464f      	mov	r7, r9
   20bf0:	2300      	movs	r3, #0
   20bf2:	a206      	add	r2, pc, #24	; (adr r2, 20c0c <vli_mmod_fast_secp256r1+0xcc>)
   20bf4:	f3af 8000 	nop.w
   20bf8:	f3af 8000 	nop.w
   20bfc:	f3af 8000 	nop.w
   20c00:	18b6      	adds	r6, r6, r2
   20c02:	cf04      	ldmia	r7!, {r2}
   20c04:	cd01      	ldmia	r5!, {r0}
   20c06:	1812      	adds	r2, r2, r0
   20c08:	c404      	stmia	r4!, {r2}
   20c0a:	4730      	bx	r6
   20c0c:	cf04      	ldmia	r7!, {r2}
   20c0e:	cd01      	ldmia	r5!, {r0}
   20c10:	4142      	adcs	r2, r0
   20c12:	c404      	stmia	r4!, {r2}
   20c14:	cf04      	ldmia	r7!, {r2}
   20c16:	cd01      	ldmia	r5!, {r0}
   20c18:	4142      	adcs	r2, r0
   20c1a:	c404      	stmia	r4!, {r2}
   20c1c:	cf04      	ldmia	r7!, {r2}
   20c1e:	cd01      	ldmia	r5!, {r0}
   20c20:	4142      	adcs	r2, r0
   20c22:	c404      	stmia	r4!, {r2}
   20c24:	cf04      	ldmia	r7!, {r2}
   20c26:	cd01      	ldmia	r5!, {r0}
   20c28:	4142      	adcs	r2, r0
   20c2a:	c404      	stmia	r4!, {r2}
   20c2c:	cf04      	ldmia	r7!, {r2}
   20c2e:	cd01      	ldmia	r5!, {r0}
   20c30:	4142      	adcs	r2, r0
   20c32:	c404      	stmia	r4!, {r2}
   20c34:	cf04      	ldmia	r7!, {r2}
   20c36:	cd01      	ldmia	r5!, {r0}
   20c38:	4142      	adcs	r2, r0
   20c3a:	c404      	stmia	r4!, {r2}
   20c3c:	cf04      	ldmia	r7!, {r2}
   20c3e:	cd01      	ldmia	r5!, {r0}
   20c40:	4142      	adcs	r2, r0
   20c42:	c404      	stmia	r4!, {r2}
   20c44:	415b      	adcs	r3, r3
   20c46:	f101 0434 	add.w	r4, r1, #52	; 0x34
   20c4a:	ccd0      	ldmia	r4, {r4, r6, r7}
   20c4c:	6b0d      	ldr	r5, [r1, #48]	; 0x30
   20c4e:	9408      	str	r4, [sp, #32]
   20c50:	ac04      	add	r4, sp, #16
   20c52:	9507      	str	r5, [sp, #28]
   20c54:	9609      	str	r6, [sp, #36]	; 0x24
   20c56:	970a      	str	r7, [sp, #40]	; 0x28
   20c58:	4698      	mov	r8, r3
   20c5a:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
   20c5e:	2501      	movs	r5, #1
   20c60:	4626      	mov	r6, r4
   20c62:	4627      	mov	r7, r4
   20c64:	2300      	movs	r3, #0
   20c66:	a205      	add	r2, pc, #20	; (adr r2, 20c7c <vli_mmod_fast_secp256r1+0x13c>)
   20c68:	f3af 8000 	nop.w
   20c6c:	f3af 8000 	nop.w
   20c70:	18ad      	adds	r5, r5, r2
   20c72:	ce04      	ldmia	r6!, {r2}
   20c74:	cf01      	ldmia	r7!, {r0}
   20c76:	1812      	adds	r2, r2, r0
   20c78:	c404      	stmia	r4!, {r2}
   20c7a:	4728      	bx	r5
   20c7c:	ce04      	ldmia	r6!, {r2}
   20c7e:	cf01      	ldmia	r7!, {r0}
   20c80:	4142      	adcs	r2, r0
   20c82:	c404      	stmia	r4!, {r2}
   20c84:	ce04      	ldmia	r6!, {r2}
   20c86:	cf01      	ldmia	r7!, {r0}
   20c88:	4142      	adcs	r2, r0
   20c8a:	c404      	stmia	r4!, {r2}
   20c8c:	ce04      	ldmia	r6!, {r2}
   20c8e:	cf01      	ldmia	r7!, {r0}
   20c90:	4142      	adcs	r2, r0
   20c92:	c404      	stmia	r4!, {r2}
   20c94:	ce04      	ldmia	r6!, {r2}
   20c96:	cf01      	ldmia	r7!, {r0}
   20c98:	4142      	adcs	r2, r0
   20c9a:	c404      	stmia	r4!, {r2}
   20c9c:	ce04      	ldmia	r6!, {r2}
   20c9e:	cf01      	ldmia	r7!, {r0}
   20ca0:	4142      	adcs	r2, r0
   20ca2:	c404      	stmia	r4!, {r2}
   20ca4:	ce04      	ldmia	r6!, {r2}
   20ca6:	cf01      	ldmia	r7!, {r0}
   20ca8:	4142      	adcs	r2, r0
   20caa:	c404      	stmia	r4!, {r2}
   20cac:	ce04      	ldmia	r6!, {r2}
   20cae:	cf01      	ldmia	r7!, {r0}
   20cb0:	4142      	adcs	r2, r0
   20cb2:	c404      	stmia	r4!, {r2}
   20cb4:	415b      	adcs	r3, r3
   20cb6:	2601      	movs	r6, #1
   20cb8:	9301      	str	r3, [sp, #4]
   20cba:	464c      	mov	r4, r9
   20cbc:	ad04      	add	r5, sp, #16
   20cbe:	464f      	mov	r7, r9
   20cc0:	2300      	movs	r3, #0
   20cc2:	a206      	add	r2, pc, #24	; (adr r2, 20cdc <vli_mmod_fast_secp256r1+0x19c>)
   20cc4:	f3af 8000 	nop.w
   20cc8:	f3af 8000 	nop.w
   20ccc:	f3af 8000 	nop.w
   20cd0:	18b6      	adds	r6, r6, r2
   20cd2:	cf04      	ldmia	r7!, {r2}
   20cd4:	cd01      	ldmia	r5!, {r0}
   20cd6:	1812      	adds	r2, r2, r0
   20cd8:	c404      	stmia	r4!, {r2}
   20cda:	4730      	bx	r6
   20cdc:	cf04      	ldmia	r7!, {r2}
   20cde:	cd01      	ldmia	r5!, {r0}
   20ce0:	4142      	adcs	r2, r0
   20ce2:	c404      	stmia	r4!, {r2}
   20ce4:	cf04      	ldmia	r7!, {r2}
   20ce6:	cd01      	ldmia	r5!, {r0}
   20ce8:	4142      	adcs	r2, r0
   20cea:	c404      	stmia	r4!, {r2}
   20cec:	cf04      	ldmia	r7!, {r2}
   20cee:	cd01      	ldmia	r5!, {r0}
   20cf0:	4142      	adcs	r2, r0
   20cf2:	c404      	stmia	r4!, {r2}
   20cf4:	cf04      	ldmia	r7!, {r2}
   20cf6:	cd01      	ldmia	r5!, {r0}
   20cf8:	4142      	adcs	r2, r0
   20cfa:	c404      	stmia	r4!, {r2}
   20cfc:	cf04      	ldmia	r7!, {r2}
   20cfe:	cd01      	ldmia	r5!, {r0}
   20d00:	4142      	adcs	r2, r0
   20d02:	c404      	stmia	r4!, {r2}
   20d04:	cf04      	ldmia	r7!, {r2}
   20d06:	cd01      	ldmia	r5!, {r0}
   20d08:	4142      	adcs	r2, r0
   20d0a:	c404      	stmia	r4!, {r2}
   20d0c:	cf04      	ldmia	r7!, {r2}
   20d0e:	cd01      	ldmia	r5!, {r0}
   20d10:	4142      	adcs	r2, r0
   20d12:	c404      	stmia	r4!, {r2}
   20d14:	415b      	adcs	r3, r3
   20d16:	f101 0420 	add.w	r4, r1, #32
   20d1a:	cc70      	ldmia	r4, {r4, r5, r6}
   20d1c:	6b8f      	ldr	r7, [r1, #56]	; 0x38
   20d1e:	9404      	str	r4, [sp, #16]
   20d20:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
   20d22:	9505      	str	r5, [sp, #20]
   20d24:	9606      	str	r6, [sp, #24]
   20d26:	970a      	str	r7, [sp, #40]	; 0x28
   20d28:	940b      	str	r4, [sp, #44]	; 0x2c
   20d2a:	9302      	str	r3, [sp, #8]
   20d2c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
   20d30:	f8cd a020 	str.w	sl, [sp, #32]
   20d34:	f8cd a01c 	str.w	sl, [sp, #28]
   20d38:	464c      	mov	r4, r9
   20d3a:	ad04      	add	r5, sp, #16
   20d3c:	2601      	movs	r6, #1
   20d3e:	464f      	mov	r7, r9
   20d40:	2300      	movs	r3, #0
   20d42:	a206      	add	r2, pc, #24	; (adr r2, 20d5c <vli_mmod_fast_secp256r1+0x21c>)
   20d44:	f3af 8000 	nop.w
   20d48:	f3af 8000 	nop.w
   20d4c:	f3af 8000 	nop.w
   20d50:	18b6      	adds	r6, r6, r2
   20d52:	cf04      	ldmia	r7!, {r2}
   20d54:	cd01      	ldmia	r5!, {r0}
   20d56:	1812      	adds	r2, r2, r0
   20d58:	c404      	stmia	r4!, {r2}
   20d5a:	4730      	bx	r6
   20d5c:	cf04      	ldmia	r7!, {r2}
   20d5e:	cd01      	ldmia	r5!, {r0}
   20d60:	4142      	adcs	r2, r0
   20d62:	c404      	stmia	r4!, {r2}
   20d64:	cf04      	ldmia	r7!, {r2}
   20d66:	cd01      	ldmia	r5!, {r0}
   20d68:	4142      	adcs	r2, r0
   20d6a:	c404      	stmia	r4!, {r2}
   20d6c:	cf04      	ldmia	r7!, {r2}
   20d6e:	cd01      	ldmia	r5!, {r0}
   20d70:	4142      	adcs	r2, r0
   20d72:	c404      	stmia	r4!, {r2}
   20d74:	cf04      	ldmia	r7!, {r2}
   20d76:	cd01      	ldmia	r5!, {r0}
   20d78:	4142      	adcs	r2, r0
   20d7a:	c404      	stmia	r4!, {r2}
   20d7c:	cf04      	ldmia	r7!, {r2}
   20d7e:	cd01      	ldmia	r5!, {r0}
   20d80:	4142      	adcs	r2, r0
   20d82:	c404      	stmia	r4!, {r2}
   20d84:	cf04      	ldmia	r7!, {r2}
   20d86:	cd01      	ldmia	r5!, {r0}
   20d88:	4142      	adcs	r2, r0
   20d8a:	c404      	stmia	r4!, {r2}
   20d8c:	cf04      	ldmia	r7!, {r2}
   20d8e:	cd01      	ldmia	r5!, {r0}
   20d90:	4142      	adcs	r2, r0
   20d92:	c404      	stmia	r4!, {r2}
   20d94:	415b      	adcs	r3, r3
   20d96:	6a8d      	ldr	r5, [r1, #40]	; 0x28
   20d98:	9505      	str	r5, [sp, #20]
   20d9a:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
   20d9c:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   20d9e:	6ace      	ldr	r6, [r1, #44]	; 0x2c
   20da0:	6b8f      	ldr	r7, [r1, #56]	; 0x38
   20da2:	9303      	str	r3, [sp, #12]
   20da4:	9509      	str	r5, [sp, #36]	; 0x24
   20da6:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   20da8:	6a0d      	ldr	r5, [r1, #32]
   20daa:	9606      	str	r6, [sp, #24]
   20dac:	9708      	str	r7, [sp, #32]
   20dae:	950b      	str	r5, [sp, #44]	; 0x2c
   20db0:	9407      	str	r4, [sp, #28]
   20db2:	940a      	str	r4, [sp, #40]	; 0x28
   20db4:	9304      	str	r3, [sp, #16]
   20db6:	464c      	mov	r4, r9
   20db8:	ad04      	add	r5, sp, #16
   20dba:	2601      	movs	r6, #1
   20dbc:	464f      	mov	r7, r9
   20dbe:	2300      	movs	r3, #0
   20dc0:	a206      	add	r2, pc, #24	; (adr r2, 20ddc <vli_mmod_fast_secp256r1+0x29c>)
   20dc2:	bf00      	nop
   20dc4:	f3af 8000 	nop.w
   20dc8:	f3af 8000 	nop.w
   20dcc:	f3af 8000 	nop.w
   20dd0:	18b6      	adds	r6, r6, r2
   20dd2:	cf04      	ldmia	r7!, {r2}
   20dd4:	cd01      	ldmia	r5!, {r0}
   20dd6:	1812      	adds	r2, r2, r0
   20dd8:	c404      	stmia	r4!, {r2}
   20dda:	4730      	bx	r6
   20ddc:	cf04      	ldmia	r7!, {r2}
   20dde:	cd01      	ldmia	r5!, {r0}
   20de0:	4142      	adcs	r2, r0
   20de2:	c404      	stmia	r4!, {r2}
   20de4:	cf04      	ldmia	r7!, {r2}
   20de6:	cd01      	ldmia	r5!, {r0}
   20de8:	4142      	adcs	r2, r0
   20dea:	c404      	stmia	r4!, {r2}
   20dec:	cf04      	ldmia	r7!, {r2}
   20dee:	cd01      	ldmia	r5!, {r0}
   20df0:	4142      	adcs	r2, r0
   20df2:	c404      	stmia	r4!, {r2}
   20df4:	cf04      	ldmia	r7!, {r2}
   20df6:	cd01      	ldmia	r5!, {r0}
   20df8:	4142      	adcs	r2, r0
   20dfa:	c404      	stmia	r4!, {r2}
   20dfc:	cf04      	ldmia	r7!, {r2}
   20dfe:	cd01      	ldmia	r5!, {r0}
   20e00:	4142      	adcs	r2, r0
   20e02:	c404      	stmia	r4!, {r2}
   20e04:	cf04      	ldmia	r7!, {r2}
   20e06:	cd01      	ldmia	r5!, {r0}
   20e08:	4142      	adcs	r2, r0
   20e0a:	c404      	stmia	r4!, {r2}
   20e0c:	cf04      	ldmia	r7!, {r2}
   20e0e:	cd01      	ldmia	r5!, {r0}
   20e10:	4142      	adcs	r2, r0
   20e12:	c404      	stmia	r4!, {r2}
   20e14:	415b      	adcs	r3, r3
   20e16:	f101 042c 	add.w	r4, r1, #44	; 0x2c
   20e1a:	cc70      	ldmia	r4, {r4, r5, r6}
   20e1c:	6a0f      	ldr	r7, [r1, #32]
   20e1e:	9404      	str	r4, [sp, #16]
   20e20:	6a8c      	ldr	r4, [r1, #40]	; 0x28
   20e22:	9505      	str	r5, [sp, #20]
   20e24:	9606      	str	r6, [sp, #24]
   20e26:	970a      	str	r7, [sp, #40]	; 0x28
   20e28:	940b      	str	r4, [sp, #44]	; 0x2c
   20e2a:	469b      	mov	fp, r3
   20e2c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
   20e30:	f8cd a020 	str.w	sl, [sp, #32]
   20e34:	f8cd a01c 	str.w	sl, [sp, #28]
   20e38:	464c      	mov	r4, r9
   20e3a:	ad04      	add	r5, sp, #16
   20e3c:	2601      	movs	r6, #1
   20e3e:	464f      	mov	r7, r9
   20e40:	2300      	movs	r3, #0
   20e42:	a206      	add	r2, pc, #24	; (adr r2, 20e5c <vli_mmod_fast_secp256r1+0x31c>)
   20e44:	f3af 8000 	nop.w
   20e48:	f3af 8000 	nop.w
   20e4c:	f3af 8000 	nop.w
   20e50:	18b6      	adds	r6, r6, r2
   20e52:	cf04      	ldmia	r7!, {r2}
   20e54:	cd01      	ldmia	r5!, {r0}
   20e56:	1a12      	subs	r2, r2, r0
   20e58:	c404      	stmia	r4!, {r2}
   20e5a:	4730      	bx	r6
   20e5c:	cf04      	ldmia	r7!, {r2}
   20e5e:	cd01      	ldmia	r5!, {r0}
   20e60:	4182      	sbcs	r2, r0
   20e62:	c404      	stmia	r4!, {r2}
   20e64:	cf04      	ldmia	r7!, {r2}
   20e66:	cd01      	ldmia	r5!, {r0}
   20e68:	4182      	sbcs	r2, r0
   20e6a:	c404      	stmia	r4!, {r2}
   20e6c:	cf04      	ldmia	r7!, {r2}
   20e6e:	cd01      	ldmia	r5!, {r0}
   20e70:	4182      	sbcs	r2, r0
   20e72:	c404      	stmia	r4!, {r2}
   20e74:	cf04      	ldmia	r7!, {r2}
   20e76:	cd01      	ldmia	r5!, {r0}
   20e78:	4182      	sbcs	r2, r0
   20e7a:	c404      	stmia	r4!, {r2}
   20e7c:	cf04      	ldmia	r7!, {r2}
   20e7e:	cd01      	ldmia	r5!, {r0}
   20e80:	4182      	sbcs	r2, r0
   20e82:	c404      	stmia	r4!, {r2}
   20e84:	cf04      	ldmia	r7!, {r2}
   20e86:	cd01      	ldmia	r5!, {r0}
   20e88:	4182      	sbcs	r2, r0
   20e8a:	c404      	stmia	r4!, {r2}
   20e8c:	cf04      	ldmia	r7!, {r2}
   20e8e:	cd01      	ldmia	r5!, {r0}
   20e90:	4182      	sbcs	r2, r0
   20e92:	c404      	stmia	r4!, {r2}
   20e94:	415b      	adcs	r3, r3
   20e96:	f101 0430 	add.w	r4, r1, #48	; 0x30
   20e9a:	ccf0      	ldmia	r4, {r4, r5, r6, r7}
   20e9c:	9404      	str	r4, [sp, #16]
   20e9e:	9505      	str	r5, [sp, #20]
   20ea0:	6acc      	ldr	r4, [r1, #44]	; 0x2c
   20ea2:	6a4d      	ldr	r5, [r1, #36]	; 0x24
   20ea4:	9606      	str	r6, [sp, #24]
   20ea6:	9707      	str	r7, [sp, #28]
   20ea8:	950a      	str	r5, [sp, #40]	; 0x28
   20eaa:	940b      	str	r4, [sp, #44]	; 0x2c
   20eac:	469c      	mov	ip, r3
   20eae:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
   20eb2:	f8cd a020 	str.w	sl, [sp, #32]
   20eb6:	464c      	mov	r4, r9
   20eb8:	ad04      	add	r5, sp, #16
   20eba:	2601      	movs	r6, #1
   20ebc:	464f      	mov	r7, r9
   20ebe:	2300      	movs	r3, #0
   20ec0:	a206      	add	r2, pc, #24	; (adr r2, 20edc <vli_mmod_fast_secp256r1+0x39c>)
   20ec2:	bf00      	nop
   20ec4:	f3af 8000 	nop.w
   20ec8:	f3af 8000 	nop.w
   20ecc:	f3af 8000 	nop.w
   20ed0:	18b6      	adds	r6, r6, r2
   20ed2:	cf04      	ldmia	r7!, {r2}
   20ed4:	cd01      	ldmia	r5!, {r0}
   20ed6:	1a12      	subs	r2, r2, r0
   20ed8:	c404      	stmia	r4!, {r2}
   20eda:	4730      	bx	r6
   20edc:	cf04      	ldmia	r7!, {r2}
   20ede:	cd01      	ldmia	r5!, {r0}
   20ee0:	4182      	sbcs	r2, r0
   20ee2:	c404      	stmia	r4!, {r2}
   20ee4:	cf04      	ldmia	r7!, {r2}
   20ee6:	cd01      	ldmia	r5!, {r0}
   20ee8:	4182      	sbcs	r2, r0
   20eea:	c404      	stmia	r4!, {r2}
   20eec:	cf04      	ldmia	r7!, {r2}
   20eee:	cd01      	ldmia	r5!, {r0}
   20ef0:	4182      	sbcs	r2, r0
   20ef2:	c404      	stmia	r4!, {r2}
   20ef4:	cf04      	ldmia	r7!, {r2}
   20ef6:	cd01      	ldmia	r5!, {r0}
   20ef8:	4182      	sbcs	r2, r0
   20efa:	c404      	stmia	r4!, {r2}
   20efc:	cf04      	ldmia	r7!, {r2}
   20efe:	cd01      	ldmia	r5!, {r0}
   20f00:	4182      	sbcs	r2, r0
   20f02:	c404      	stmia	r4!, {r2}
   20f04:	cf04      	ldmia	r7!, {r2}
   20f06:	cd01      	ldmia	r5!, {r0}
   20f08:	4182      	sbcs	r2, r0
   20f0a:	c404      	stmia	r4!, {r2}
   20f0c:	cf04      	ldmia	r7!, {r2}
   20f0e:	cd01      	ldmia	r5!, {r0}
   20f10:	4182      	sbcs	r2, r0
   20f12:	c404      	stmia	r4!, {r2}
   20f14:	415b      	adcs	r3, r3
   20f16:	f101 0434 	add.w	r4, r1, #52	; 0x34
   20f1a:	cc70      	ldmia	r4, {r4, r5, r6}
   20f1c:	6a0f      	ldr	r7, [r1, #32]
   20f1e:	9404      	str	r4, [sp, #16]
   20f20:	9505      	str	r5, [sp, #20]
   20f22:	6a4c      	ldr	r4, [r1, #36]	; 0x24
   20f24:	6a8d      	ldr	r5, [r1, #40]	; 0x28
   20f26:	9606      	str	r6, [sp, #24]
   20f28:	6b0e      	ldr	r6, [r1, #48]	; 0x30
   20f2a:	9408      	str	r4, [sp, #32]
   20f2c:	469e      	mov	lr, r3
   20f2e:	9509      	str	r5, [sp, #36]	; 0x24
   20f30:	960b      	str	r6, [sp, #44]	; 0x2c
   20f32:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   20f36:	9707      	str	r7, [sp, #28]
   20f38:	464c      	mov	r4, r9
   20f3a:	ad04      	add	r5, sp, #16
   20f3c:	2601      	movs	r6, #1
   20f3e:	464b      	mov	r3, r9
   20f40:	2700      	movs	r7, #0
   20f42:	a206      	add	r2, pc, #24	; (adr r2, 20f5c <vli_mmod_fast_secp256r1+0x41c>)
   20f44:	f3af 8000 	nop.w
   20f48:	f3af 8000 	nop.w
   20f4c:	f3af 8000 	nop.w
   20f50:	18b6      	adds	r6, r6, r2
   20f52:	cb04      	ldmia	r3!, {r2}
   20f54:	cd01      	ldmia	r5!, {r0}
   20f56:	1a12      	subs	r2, r2, r0
   20f58:	c404      	stmia	r4!, {r2}
   20f5a:	4730      	bx	r6
   20f5c:	cb04      	ldmia	r3!, {r2}
   20f5e:	cd01      	ldmia	r5!, {r0}
   20f60:	4182      	sbcs	r2, r0
   20f62:	c404      	stmia	r4!, {r2}
   20f64:	cb04      	ldmia	r3!, {r2}
   20f66:	cd01      	ldmia	r5!, {r0}
   20f68:	4182      	sbcs	r2, r0
   20f6a:	c404      	stmia	r4!, {r2}
   20f6c:	cb04      	ldmia	r3!, {r2}
   20f6e:	cd01      	ldmia	r5!, {r0}
   20f70:	4182      	sbcs	r2, r0
   20f72:	c404      	stmia	r4!, {r2}
   20f74:	cb04      	ldmia	r3!, {r2}
   20f76:	cd01      	ldmia	r5!, {r0}
   20f78:	4182      	sbcs	r2, r0
   20f7a:	c404      	stmia	r4!, {r2}
   20f7c:	cb04      	ldmia	r3!, {r2}
   20f7e:	cd01      	ldmia	r5!, {r0}
   20f80:	4182      	sbcs	r2, r0
   20f82:	c404      	stmia	r4!, {r2}
   20f84:	cb04      	ldmia	r3!, {r2}
   20f86:	cd01      	ldmia	r5!, {r0}
   20f88:	4182      	sbcs	r2, r0
   20f8a:	c404      	stmia	r4!, {r2}
   20f8c:	cb04      	ldmia	r3!, {r2}
   20f8e:	cd01      	ldmia	r5!, {r0}
   20f90:	4182      	sbcs	r2, r0
   20f92:	c404      	stmia	r4!, {r2}
   20f94:	417f      	adcs	r7, r7
   20f96:	6b8c      	ldr	r4, [r1, #56]	; 0x38
   20f98:	6a4e      	ldr	r6, [r1, #36]	; 0x24
   20f9a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
   20f9c:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
   20f9e:	9404      	str	r4, [sp, #16]
   20fa0:	6acc      	ldr	r4, [r1, #44]	; 0x2c
   20fa2:	6b49      	ldr	r1, [r1, #52]	; 0x34
   20fa4:	9208      	str	r2, [sp, #32]
   20fa6:	9607      	str	r6, [sp, #28]
   20fa8:	9409      	str	r4, [sp, #36]	; 0x24
   20faa:	910b      	str	r1, [sp, #44]	; 0x2c
   20fac:	f8cd a018 	str.w	sl, [sp, #24]
   20fb0:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   20fb4:	9505      	str	r5, [sp, #20]
   20fb6:	aa04      	add	r2, sp, #16
   20fb8:	4649      	mov	r1, r9
   20fba:	2401      	movs	r4, #1
   20fbc:	464e      	mov	r6, r9
   20fbe:	2500      	movs	r5, #0
   20fc0:	a006      	add	r0, pc, #24	; (adr r0, 20fdc <vli_mmod_fast_secp256r1+0x49c>)
   20fc2:	bf00      	nop
   20fc4:	f3af 8000 	nop.w
   20fc8:	f3af 8000 	nop.w
   20fcc:	f3af 8000 	nop.w
   20fd0:	1824      	adds	r4, r4, r0
   20fd2:	ce01      	ldmia	r6!, {r0}
   20fd4:	ca08      	ldmia	r2!, {r3}
   20fd6:	1ac0      	subs	r0, r0, r3
   20fd8:	c101      	stmia	r1!, {r0}
   20fda:	4720      	bx	r4
   20fdc:	ce01      	ldmia	r6!, {r0}
   20fde:	ca08      	ldmia	r2!, {r3}
   20fe0:	4198      	sbcs	r0, r3
   20fe2:	c101      	stmia	r1!, {r0}
   20fe4:	ce01      	ldmia	r6!, {r0}
   20fe6:	ca08      	ldmia	r2!, {r3}
   20fe8:	4198      	sbcs	r0, r3
   20fea:	c101      	stmia	r1!, {r0}
   20fec:	ce01      	ldmia	r6!, {r0}
   20fee:	ca08      	ldmia	r2!, {r3}
   20ff0:	4198      	sbcs	r0, r3
   20ff2:	c101      	stmia	r1!, {r0}
   20ff4:	ce01      	ldmia	r6!, {r0}
   20ff6:	ca08      	ldmia	r2!, {r3}
   20ff8:	4198      	sbcs	r0, r3
   20ffa:	c101      	stmia	r1!, {r0}
   20ffc:	ce01      	ldmia	r6!, {r0}
   20ffe:	ca08      	ldmia	r2!, {r3}
   21000:	4198      	sbcs	r0, r3
   21002:	c101      	stmia	r1!, {r0}
   21004:	ce01      	ldmia	r6!, {r0}
   21006:	ca08      	ldmia	r2!, {r3}
   21008:	4198      	sbcs	r0, r3
   2100a:	c101      	stmia	r1!, {r0}
   2100c:	ce01      	ldmia	r6!, {r0}
   2100e:	ca08      	ldmia	r2!, {r3}
   21010:	4198      	sbcs	r0, r3
   21012:	c101      	stmia	r1!, {r0}
   21014:	416d      	adcs	r5, r5
   21016:	9b00      	ldr	r3, [sp, #0]
   21018:	eb08 0203 	add.w	r2, r8, r3
   2101c:	9b01      	ldr	r3, [sp, #4]
   2101e:	441a      	add	r2, r3
   21020:	9b02      	ldr	r3, [sp, #8]
   21022:	441a      	add	r2, r3
   21024:	9b03      	ldr	r3, [sp, #12]
   21026:	441a      	add	r2, r3
   21028:	445a      	add	r2, fp
   2102a:	45d4      	cmp	ip, sl
   2102c:	bf14      	ite	ne
   2102e:	4694      	movne	ip, r2
   21030:	f1a2 0c01 	subeq.w	ip, r2, #1
   21034:	45d6      	cmp	lr, sl
   21036:	bf14      	ite	ne
   21038:	46e6      	movne	lr, ip
   2103a:	f1ac 0e01 	subeq.w	lr, ip, #1
   2103e:	4557      	cmp	r7, sl
   21040:	bf14      	ite	ne
   21042:	4677      	movne	r7, lr
   21044:	f1ae 0701 	subeq.w	r7, lr, #1
   21048:	4555      	cmp	r5, sl
   2104a:	bf14      	ite	ne
   2104c:	463d      	movne	r5, r7
   2104e:	1e7d      	subeq	r5, r7, #1
   21050:	4555      	cmp	r5, sl
   21052:	db4d      	blt.n	210f0 <vli_mmod_fast_secp256r1+0x5b0>
   21054:	f8df c108 	ldr.w	ip, [pc, #264]	; 21160 <vli_mmod_fast_secp256r1+0x620>
   21058:	f04f 0801 	mov.w	r8, #1
   2105c:	46ae      	mov	lr, r5
   2105e:	4648      	mov	r0, r9
   21060:	f1be 0f00 	cmp.w	lr, #0
   21064:	d116      	bne.n	21094 <vli_mmod_fast_secp256r1+0x554>
   21066:	69c2      	ldr	r2, [r0, #28]
   21068:	3201      	adds	r2, #1
   2106a:	d176      	bne.n	2115a <vli_mmod_fast_secp256r1+0x61a>
   2106c:	6982      	ldr	r2, [r0, #24]
   2106e:	2a00      	cmp	r2, #0
   21070:	d073      	beq.n	2115a <vli_mmod_fast_secp256r1+0x61a>
   21072:	2a01      	cmp	r2, #1
   21074:	d80e      	bhi.n	21094 <vli_mmod_fast_secp256r1+0x554>
   21076:	6942      	ldr	r2, [r0, #20]
   21078:	b962      	cbnz	r2, 21094 <vli_mmod_fast_secp256r1+0x554>
   2107a:	6902      	ldr	r2, [r0, #16]
   2107c:	b952      	cbnz	r2, 21094 <vli_mmod_fast_secp256r1+0x554>
   2107e:	68c2      	ldr	r2, [r0, #12]
   21080:	b942      	cbnz	r2, 21094 <vli_mmod_fast_secp256r1+0x554>
   21082:	6882      	ldr	r2, [r0, #8]
   21084:	3201      	adds	r2, #1
   21086:	d168      	bne.n	2115a <vli_mmod_fast_secp256r1+0x61a>
   21088:	6842      	ldr	r2, [r0, #4]
   2108a:	3201      	adds	r2, #1
   2108c:	d165      	bne.n	2115a <vli_mmod_fast_secp256r1+0x61a>
   2108e:	6802      	ldr	r2, [r0, #0]
   21090:	3201      	adds	r2, #1
   21092:	d162      	bne.n	2115a <vli_mmod_fast_secp256r1+0x61a>
   21094:	4602      	mov	r2, r0
   21096:	4661      	mov	r1, ip
   21098:	4644      	mov	r4, r8
   2109a:	4603      	mov	r3, r0
   2109c:	2600      	movs	r6, #0
   2109e:	a703      	add	r7, pc, #12	; (adr r7, 210ac <vli_mmod_fast_secp256r1+0x56c>)
   210a0:	19e4      	adds	r4, r4, r7
   210a2:	cb80      	ldmia	r3!, {r7}
   210a4:	c920      	ldmia	r1!, {r5}
   210a6:	1b7f      	subs	r7, r7, r5
   210a8:	c280      	stmia	r2!, {r7}
   210aa:	4720      	bx	r4
   210ac:	cb80      	ldmia	r3!, {r7}
   210ae:	c920      	ldmia	r1!, {r5}
   210b0:	41af      	sbcs	r7, r5
   210b2:	c280      	stmia	r2!, {r7}
   210b4:	cb80      	ldmia	r3!, {r7}
   210b6:	c920      	ldmia	r1!, {r5}
   210b8:	41af      	sbcs	r7, r5
   210ba:	c280      	stmia	r2!, {r7}
   210bc:	cb80      	ldmia	r3!, {r7}
   210be:	c920      	ldmia	r1!, {r5}
   210c0:	41af      	sbcs	r7, r5
   210c2:	c280      	stmia	r2!, {r7}
   210c4:	cb80      	ldmia	r3!, {r7}
   210c6:	c920      	ldmia	r1!, {r5}
   210c8:	41af      	sbcs	r7, r5
   210ca:	c280      	stmia	r2!, {r7}
   210cc:	cb80      	ldmia	r3!, {r7}
   210ce:	c920      	ldmia	r1!, {r5}
   210d0:	41af      	sbcs	r7, r5
   210d2:	c280      	stmia	r2!, {r7}
   210d4:	cb80      	ldmia	r3!, {r7}
   210d6:	c920      	ldmia	r1!, {r5}
   210d8:	41af      	sbcs	r7, r5
   210da:	c280      	stmia	r2!, {r7}
   210dc:	cb80      	ldmia	r3!, {r7}
   210de:	c920      	ldmia	r1!, {r5}
   210e0:	41af      	sbcs	r7, r5
   210e2:	c280      	stmia	r2!, {r7}
   210e4:	4176      	adcs	r6, r6
   210e6:	2e00      	cmp	r6, #0
   210e8:	bf08      	it	eq
   210ea:	f1ae 0e01 	subeq.w	lr, lr, #1
   210ee:	e7b7      	b.n	21060 <vli_mmod_fast_secp256r1+0x520>
   210f0:	f8df e06c 	ldr.w	lr, [pc, #108]	; 21160 <vli_mmod_fast_secp256r1+0x620>
   210f4:	f04f 0c01 	mov.w	ip, #1
   210f8:	46c8      	mov	r8, r9
   210fa:	4642      	mov	r2, r8
   210fc:	4671      	mov	r1, lr
   210fe:	4664      	mov	r4, ip
   21100:	4643      	mov	r3, r8
   21102:	2600      	movs	r6, #0
   21104:	a705      	add	r7, pc, #20	; (adr r7, 2111c <vli_mmod_fast_secp256r1+0x5dc>)
   21106:	bf00      	nop
   21108:	f3af 8000 	nop.w
   2110c:	f3af 8000 	nop.w
   21110:	19e4      	adds	r4, r4, r7
   21112:	cb80      	ldmia	r3!, {r7}
   21114:	c901      	ldmia	r1!, {r0}
   21116:	183f      	adds	r7, r7, r0
   21118:	c280      	stmia	r2!, {r7}
   2111a:	4720      	bx	r4
   2111c:	cb80      	ldmia	r3!, {r7}
   2111e:	c901      	ldmia	r1!, {r0}
   21120:	4147      	adcs	r7, r0
   21122:	c280      	stmia	r2!, {r7}
   21124:	cb80      	ldmia	r3!, {r7}
   21126:	c901      	ldmia	r1!, {r0}
   21128:	4147      	adcs	r7, r0
   2112a:	c280      	stmia	r2!, {r7}
   2112c:	cb80      	ldmia	r3!, {r7}
   2112e:	c901      	ldmia	r1!, {r0}
   21130:	4147      	adcs	r7, r0
   21132:	c280      	stmia	r2!, {r7}
   21134:	cb80      	ldmia	r3!, {r7}
   21136:	c901      	ldmia	r1!, {r0}
   21138:	4147      	adcs	r7, r0
   2113a:	c280      	stmia	r2!, {r7}
   2113c:	cb80      	ldmia	r3!, {r7}
   2113e:	c901      	ldmia	r1!, {r0}
   21140:	4147      	adcs	r7, r0
   21142:	c280      	stmia	r2!, {r7}
   21144:	cb80      	ldmia	r3!, {r7}
   21146:	c901      	ldmia	r1!, {r0}
   21148:	4147      	adcs	r7, r0
   2114a:	c280      	stmia	r2!, {r7}
   2114c:	cb80      	ldmia	r3!, {r7}
   2114e:	c901      	ldmia	r1!, {r0}
   21150:	4147      	adcs	r7, r0
   21152:	c280      	stmia	r2!, {r7}
   21154:	4176      	adcs	r6, r6
   21156:	19ad      	adds	r5, r5, r6
   21158:	d4cf      	bmi.n	210fa <vli_mmod_fast_secp256r1+0x5ba>
   2115a:	b00d      	add	sp, #52	; 0x34
   2115c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21160:	00025b50 	.word	0x00025b50
	...

00021170 <double_jacobian_default>:
   21170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21174:	f993 9000 	ldrsb.w	r9, [r3]
   21178:	f1b9 0f00 	cmp.w	r9, #0
   2117c:	b0a9      	sub	sp, #164	; 0xa4
   2117e:	dd15      	ble.n	211ac <double_jacobian_default+0x3c>
   21180:	f109 34ff 	add.w	r4, r9, #4294967295
   21184:	b2e4      	uxtb	r4, r4
   21186:	1f15      	subs	r5, r2, #4
   21188:	9405      	str	r4, [sp, #20]
   2118a:	00a4      	lsls	r4, r4, #2
   2118c:	462e      	mov	r6, r5
   2118e:	9406      	str	r4, [sp, #24]
   21190:	1914      	adds	r4, r2, r4
   21192:	4625      	mov	r5, r4
   21194:	46b6      	mov	lr, r6
   21196:	2400      	movs	r4, #0
   21198:	4637      	mov	r7, r6
   2119a:	f85e 6f04 	ldr.w	r6, [lr, #4]!
   2119e:	4575      	cmp	r5, lr
   211a0:	ea44 0406 	orr.w	r4, r4, r6
   211a4:	d1f9      	bne.n	2119a <double_jacobian_default+0x2a>
   211a6:	9703      	str	r7, [sp, #12]
   211a8:	9504      	str	r5, [sp, #16]
   211aa:	b914      	cbnz	r4, 211b2 <double_jacobian_default+0x42>
   211ac:	b029      	add	sp, #164	; 0xa4
   211ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   211b2:	4698      	mov	r8, r3
   211b4:	4615      	mov	r5, r2
   211b6:	4604      	mov	r4, r0
   211b8:	9207      	str	r2, [sp, #28]
   211ba:	a818      	add	r0, sp, #96	; 0x60
   211bc:	460a      	mov	r2, r1
   211be:	464b      	mov	r3, r9
   211c0:	468a      	mov	sl, r1
   211c2:	f7ff f995 	bl	204f0 <uECC_vli_mult>
   211c6:	a918      	add	r1, sp, #96	; 0x60
   211c8:	a808      	add	r0, sp, #32
   211ca:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   211ce:	4798      	blx	r3
   211d0:	aa08      	add	r2, sp, #32
   211d2:	a818      	add	r0, sp, #96	; 0x60
   211d4:	f998 3000 	ldrsb.w	r3, [r8]
   211d8:	4621      	mov	r1, r4
   211da:	f7ff f989 	bl	204f0 <uECC_vli_mult>
   211de:	a918      	add	r1, sp, #96	; 0x60
   211e0:	a810      	add	r0, sp, #64	; 0x40
   211e2:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   211e6:	4798      	blx	r3
   211e8:	aa08      	add	r2, sp, #32
   211ea:	4611      	mov	r1, r2
   211ec:	a818      	add	r0, sp, #96	; 0x60
   211ee:	f998 3000 	ldrsb.w	r3, [r8]
   211f2:	f7ff f97d 	bl	204f0 <uECC_vli_mult>
   211f6:	a918      	add	r1, sp, #96	; 0x60
   211f8:	a808      	add	r0, sp, #32
   211fa:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   211fe:	4798      	blx	r3
   21200:	462a      	mov	r2, r5
   21202:	a818      	add	r0, sp, #96	; 0x60
   21204:	f998 3000 	ldrsb.w	r3, [r8]
   21208:	4651      	mov	r1, sl
   2120a:	f7ff f971 	bl	204f0 <uECC_vli_mult>
   2120e:	a918      	add	r1, sp, #96	; 0x60
   21210:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   21214:	4650      	mov	r0, sl
   21216:	4798      	blx	r3
   21218:	462a      	mov	r2, r5
   2121a:	a818      	add	r0, sp, #96	; 0x60
   2121c:	f998 3000 	ldrsb.w	r3, [r8]
   21220:	4629      	mov	r1, r5
   21222:	f7ff f965 	bl	204f0 <uECC_vli_mult>
   21226:	f108 0b04 	add.w	fp, r8, #4
   2122a:	a918      	add	r1, sp, #96	; 0x60
   2122c:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   21230:	4628      	mov	r0, r5
   21232:	4798      	blx	r3
   21234:	465b      	mov	r3, fp
   21236:	462a      	mov	r2, r5
   21238:	4621      	mov	r1, r4
   2123a:	4620      	mov	r0, r4
   2123c:	f8cd 9000 	str.w	r9, [sp]
   21240:	f7ff fae6 	bl	20810 <uECC_vli_modAdd>
   21244:	465b      	mov	r3, fp
   21246:	462a      	mov	r2, r5
   21248:	4629      	mov	r1, r5
   2124a:	4628      	mov	r0, r5
   2124c:	f8cd 9000 	str.w	r9, [sp]
   21250:	f7ff fade 	bl	20810 <uECC_vli_modAdd>
   21254:	465b      	mov	r3, fp
   21256:	462a      	mov	r2, r5
   21258:	4621      	mov	r1, r4
   2125a:	4628      	mov	r0, r5
   2125c:	f8cd 9000 	str.w	r9, [sp]
   21260:	f7ff fb2e 	bl	208c0 <uECC_vli_modSub>
   21264:	462a      	mov	r2, r5
   21266:	a818      	add	r0, sp, #96	; 0x60
   21268:	f998 3000 	ldrsb.w	r3, [r8]
   2126c:	4621      	mov	r1, r4
   2126e:	f7ff f93f 	bl	204f0 <uECC_vli_mult>
   21272:	a918      	add	r1, sp, #96	; 0x60
   21274:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   21278:	4620      	mov	r0, r4
   2127a:	4798      	blx	r3
   2127c:	465b      	mov	r3, fp
   2127e:	4622      	mov	r2, r4
   21280:	4621      	mov	r1, r4
   21282:	4628      	mov	r0, r5
   21284:	f8cd 9000 	str.w	r9, [sp]
   21288:	f7ff fac2 	bl	20810 <uECC_vli_modAdd>
   2128c:	465b      	mov	r3, fp
   2128e:	f8cd 9000 	str.w	r9, [sp]
   21292:	462a      	mov	r2, r5
   21294:	4621      	mov	r1, r4
   21296:	4620      	mov	r0, r4
   21298:	f7ff faba 	bl	20810 <uECC_vli_modAdd>
   2129c:	6823      	ldr	r3, [r4, #0]
   2129e:	f013 0301 	ands.w	r3, r3, #1
   212a2:	d16a      	bne.n	2137a <double_jacobian_default+0x20a>
   212a4:	eb04 0289 	add.w	r2, r4, r9, lsl #2
   212a8:	4294      	cmp	r4, r2
   212aa:	d20e      	bcs.n	212ca <double_jacobian_default+0x15a>
   212ac:	9f03      	ldr	r7, [sp, #12]
   212ae:	9d04      	ldr	r5, [sp, #16]
   212b0:	9e07      	ldr	r6, [sp, #28]
   212b2:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   212b6:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
   212ba:	4294      	cmp	r4, r2
   212bc:	6013      	str	r3, [r2, #0]
   212be:	ea4f 73c1 	mov.w	r3, r1, lsl #31
   212c2:	d3f6      	bcc.n	212b2 <double_jacobian_default+0x142>
   212c4:	9703      	str	r7, [sp, #12]
   212c6:	9504      	str	r5, [sp, #16]
   212c8:	9607      	str	r6, [sp, #28]
   212ca:	4622      	mov	r2, r4
   212cc:	4621      	mov	r1, r4
   212ce:	f998 3000 	ldrsb.w	r3, [r8]
   212d2:	a818      	add	r0, sp, #96	; 0x60
   212d4:	f7ff f90c 	bl	204f0 <uECC_vli_mult>
   212d8:	9d07      	ldr	r5, [sp, #28]
   212da:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   212de:	4628      	mov	r0, r5
   212e0:	a918      	add	r1, sp, #96	; 0x60
   212e2:	4798      	blx	r3
   212e4:	4629      	mov	r1, r5
   212e6:	4628      	mov	r0, r5
   212e8:	465b      	mov	r3, fp
   212ea:	aa10      	add	r2, sp, #64	; 0x40
   212ec:	f8cd 9000 	str.w	r9, [sp]
   212f0:	f7ff fae6 	bl	208c0 <uECC_vli_modSub>
   212f4:	4629      	mov	r1, r5
   212f6:	4628      	mov	r0, r5
   212f8:	465b      	mov	r3, fp
   212fa:	aa10      	add	r2, sp, #64	; 0x40
   212fc:	f8cd 9000 	str.w	r9, [sp]
   21300:	f7ff fade 	bl	208c0 <uECC_vli_modSub>
   21304:	a910      	add	r1, sp, #64	; 0x40
   21306:	462a      	mov	r2, r5
   21308:	4608      	mov	r0, r1
   2130a:	465b      	mov	r3, fp
   2130c:	f8cd 9000 	str.w	r9, [sp]
   21310:	f7ff fad6 	bl	208c0 <uECC_vli_modSub>
   21314:	aa10      	add	r2, sp, #64	; 0x40
   21316:	4621      	mov	r1, r4
   21318:	f998 3000 	ldrsb.w	r3, [r8]
   2131c:	a818      	add	r0, sp, #96	; 0x60
   2131e:	f7ff f8e7 	bl	204f0 <uECC_vli_mult>
   21322:	4620      	mov	r0, r4
   21324:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   21328:	a918      	add	r1, sp, #96	; 0x60
   2132a:	4798      	blx	r3
   2132c:	aa08      	add	r2, sp, #32
   2132e:	465b      	mov	r3, fp
   21330:	4621      	mov	r1, r4
   21332:	f8cd 9000 	str.w	r9, [sp]
   21336:	4610      	mov	r0, r2
   21338:	f7ff fac2 	bl	208c0 <uECC_vli_modSub>
   2133c:	9f03      	ldr	r7, [sp, #12]
   2133e:	9d04      	ldr	r5, [sp, #16]
   21340:	3c04      	subs	r4, #4
   21342:	463b      	mov	r3, r7
   21344:	f853 2f04 	ldr.w	r2, [r3, #4]!
   21348:	f844 2f04 	str.w	r2, [r4, #4]!
   2134c:	42ab      	cmp	r3, r5
   2134e:	d1f9      	bne.n	21344 <double_jacobian_default+0x1d4>
   21350:	9b06      	ldr	r3, [sp, #24]
   21352:	4453      	add	r3, sl
   21354:	4619      	mov	r1, r3
   21356:	f1aa 0304 	sub.w	r3, sl, #4
   2135a:	f853 2f04 	ldr.w	r2, [r3, #4]!
   2135e:	f847 2f04 	str.w	r2, [r7, #4]!
   21362:	428b      	cmp	r3, r1
   21364:	d1f9      	bne.n	2135a <double_jacobian_default+0x1ea>
   21366:	9a05      	ldr	r2, [sp, #20]
   21368:	3201      	adds	r2, #1
   2136a:	0092      	lsls	r2, r2, #2
   2136c:	a908      	add	r1, sp, #32
   2136e:	4650      	mov	r0, sl
   21370:	f7ea fec6 	bl	c100 <memcpy>
   21374:	b029      	add	sp, #164	; 0xa4
   21376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2137a:	f1c9 0208 	rsb	r2, r9, #8
   2137e:	00d2      	lsls	r2, r2, #3
   21380:	3201      	adds	r2, #1
   21382:	4623      	mov	r3, r4
   21384:	4659      	mov	r1, fp
   21386:	4620      	mov	r0, r4
   21388:	2500      	movs	r5, #0
   2138a:	a704      	add	r7, pc, #16	; (adr r7, 2139c <double_jacobian_default+0x22c>)
   2138c:	f3af 8000 	nop.w
   21390:	19d2      	adds	r2, r2, r7
   21392:	c880      	ldmia	r0!, {r7}
   21394:	c940      	ldmia	r1!, {r6}
   21396:	19bf      	adds	r7, r7, r6
   21398:	c380      	stmia	r3!, {r7}
   2139a:	4710      	bx	r2
   2139c:	c880      	ldmia	r0!, {r7}
   2139e:	c940      	ldmia	r1!, {r6}
   213a0:	4177      	adcs	r7, r6
   213a2:	c380      	stmia	r3!, {r7}
   213a4:	c880      	ldmia	r0!, {r7}
   213a6:	c940      	ldmia	r1!, {r6}
   213a8:	4177      	adcs	r7, r6
   213aa:	c380      	stmia	r3!, {r7}
   213ac:	c880      	ldmia	r0!, {r7}
   213ae:	c940      	ldmia	r1!, {r6}
   213b0:	4177      	adcs	r7, r6
   213b2:	c380      	stmia	r3!, {r7}
   213b4:	c880      	ldmia	r0!, {r7}
   213b6:	c940      	ldmia	r1!, {r6}
   213b8:	4177      	adcs	r7, r6
   213ba:	c380      	stmia	r3!, {r7}
   213bc:	c880      	ldmia	r0!, {r7}
   213be:	c940      	ldmia	r1!, {r6}
   213c0:	4177      	adcs	r7, r6
   213c2:	c380      	stmia	r3!, {r7}
   213c4:	c880      	ldmia	r0!, {r7}
   213c6:	c940      	ldmia	r1!, {r6}
   213c8:	4177      	adcs	r7, r6
   213ca:	c380      	stmia	r3!, {r7}
   213cc:	c880      	ldmia	r0!, {r7}
   213ce:	c940      	ldmia	r1!, {r6}
   213d0:	4177      	adcs	r7, r6
   213d2:	c380      	stmia	r3!, {r7}
   213d4:	416d      	adcs	r5, r5
   213d6:	ea4f 0189 	mov.w	r1, r9, lsl #2
   213da:	1863      	adds	r3, r4, r1
   213dc:	429c      	cmp	r4, r3
   213de:	46ae      	mov	lr, r5
   213e0:	d20f      	bcs.n	21402 <double_jacobian_default+0x292>
   213e2:	9f03      	ldr	r7, [sp, #12]
   213e4:	9d04      	ldr	r5, [sp, #16]
   213e6:	9e07      	ldr	r6, [sp, #28]
   213e8:	2200      	movs	r2, #0
   213ea:	f853 0d04 	ldr.w	r0, [r3, #-4]!
   213ee:	ea42 0250 	orr.w	r2, r2, r0, lsr #1
   213f2:	429c      	cmp	r4, r3
   213f4:	601a      	str	r2, [r3, #0]
   213f6:	ea4f 72c0 	mov.w	r2, r0, lsl #31
   213fa:	d3f6      	bcc.n	213ea <double_jacobian_default+0x27a>
   213fc:	9703      	str	r7, [sp, #12]
   213fe:	9504      	str	r5, [sp, #16]
   21400:	9607      	str	r6, [sp, #28]
   21402:	3904      	subs	r1, #4
   21404:	5863      	ldr	r3, [r4, r1]
   21406:	ea43 73ce 	orr.w	r3, r3, lr, lsl #31
   2140a:	5063      	str	r3, [r4, r1]
   2140c:	e75d      	b.n	212ca <double_jacobian_default+0x15a>
   2140e:	bf00      	nop

00021410 <uECC_secp256r1>:
   21410:	4800      	ldr	r0, [pc, #0]	; (21414 <uECC_secp256r1+0x4>)
   21412:	4770      	bx	lr
   21414:	00025b4c 	.word	0x00025b4c

00021418 <uECC_valid_point>:
   21418:	b5f0      	push	{r4, r5, r6, r7, lr}
   2141a:	f991 3000 	ldrsb.w	r3, [r1]
   2141e:	b2da      	uxtb	r2, r3
   21420:	0057      	lsls	r7, r2, #1
   21422:	b2ff      	uxtb	r7, r7
   21424:	b27c      	sxtb	r4, r7
   21426:	2c00      	cmp	r4, #0
   21428:	b099      	sub	sp, #100	; 0x64
   2142a:	dd28      	ble.n	2147e <uECC_valid_point+0x66>
   2142c:	3f01      	subs	r7, #1
   2142e:	b2ff      	uxtb	r7, r7
   21430:	eb00 0787 	add.w	r7, r0, r7, lsl #2
   21434:	1f04      	subs	r4, r0, #4
   21436:	2500      	movs	r5, #0
   21438:	f854 6f04 	ldr.w	r6, [r4, #4]!
   2143c:	42bc      	cmp	r4, r7
   2143e:	ea45 0506 	orr.w	r5, r5, r6
   21442:	d1f9      	bne.n	21438 <uECC_valid_point+0x20>
   21444:	b1f5      	cbz	r5, 21484 <uECC_valid_point+0x6c>
   21446:	1e55      	subs	r5, r2, #1
   21448:	b26d      	sxtb	r5, r5
   2144a:	2d00      	cmp	r5, #0
   2144c:	f101 0e04 	add.w	lr, r1, #4
   21450:	db15      	blt.n	2147e <uECC_valid_point+0x66>
   21452:	b22e      	sxth	r6, r5
   21454:	f85e c026 	ldr.w	ip, [lr, r6, lsl #2]
   21458:	f850 2026 	ldr.w	r2, [r0, r6, lsl #2]
   2145c:	4594      	cmp	ip, r2
   2145e:	d814      	bhi.n	2148a <uECC_valid_point+0x72>
   21460:	d30d      	bcc.n	2147e <uECC_valid_point+0x66>
   21462:	462c      	mov	r4, r5
   21464:	e006      	b.n	21474 <uECC_valid_point+0x5c>
   21466:	f85e 7022 	ldr.w	r7, [lr, r2, lsl #2]
   2146a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   2146e:	4297      	cmp	r7, r2
   21470:	d80b      	bhi.n	2148a <uECC_valid_point+0x72>
   21472:	d304      	bcc.n	2147e <uECC_valid_point+0x66>
   21474:	3c01      	subs	r4, #1
   21476:	b264      	sxtb	r4, r4
   21478:	1c67      	adds	r7, r4, #1
   2147a:	b222      	sxth	r2, r4
   2147c:	d1f3      	bne.n	21466 <uECC_valid_point+0x4e>
   2147e:	2000      	movs	r0, #0
   21480:	b019      	add	sp, #100	; 0x64
   21482:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21484:	4628      	mov	r0, r5
   21486:	b019      	add	sp, #100	; 0x64
   21488:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2148a:	eb00 0283 	add.w	r2, r0, r3, lsl #2
   2148e:	f852 4026 	ldr.w	r4, [r2, r6, lsl #2]
   21492:	4564      	cmp	r4, ip
   21494:	d310      	bcc.n	214b8 <uECC_valid_point+0xa0>
   21496:	d8f2      	bhi.n	2147e <uECC_valid_point+0x66>
   21498:	462c      	mov	r4, r5
   2149a:	e006      	b.n	214aa <uECC_valid_point+0x92>
   2149c:	f85e c027 	ldr.w	ip, [lr, r7, lsl #2]
   214a0:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
   214a4:	45bc      	cmp	ip, r7
   214a6:	d807      	bhi.n	214b8 <uECC_valid_point+0xa0>
   214a8:	d3e9      	bcc.n	2147e <uECC_valid_point+0x66>
   214aa:	3c01      	subs	r4, #1
   214ac:	b264      	sxtb	r4, r4
   214ae:	f1b4 3fff 	cmp.w	r4, #4294967295
   214b2:	b227      	sxth	r7, r4
   214b4:	d1f2      	bne.n	2149c <uECC_valid_point+0x84>
   214b6:	e7e2      	b.n	2147e <uECC_valid_point+0x66>
   214b8:	460f      	mov	r7, r1
   214ba:	4604      	mov	r4, r0
   214bc:	4611      	mov	r1, r2
   214be:	a808      	add	r0, sp, #32
   214c0:	f7ff f816 	bl	204f0 <uECC_vli_mult>
   214c4:	a908      	add	r1, sp, #32
   214c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   214ca:	4668      	mov	r0, sp
   214cc:	4798      	blx	r3
   214ce:	a808      	add	r0, sp, #32
   214d0:	4621      	mov	r1, r4
   214d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
   214d6:	463a      	mov	r2, r7
   214d8:	4798      	blx	r3
   214da:	2000      	movs	r0, #0
   214dc:	e000      	b.n	214e0 <uECC_valid_point+0xc8>
   214de:	b22e      	sxth	r6, r5
   214e0:	ab18      	add	r3, sp, #96	; 0x60
   214e2:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   214e6:	3d01      	subs	r5, #1
   214e8:	f856 2c60 	ldr.w	r2, [r6, #-96]
   214ec:	f856 3c40 	ldr.w	r3, [r6, #-64]
   214f0:	b26d      	sxtb	r5, r5
   214f2:	4053      	eors	r3, r2
   214f4:	4318      	orrs	r0, r3
   214f6:	1c6b      	adds	r3, r5, #1
   214f8:	d1f1      	bne.n	214de <uECC_valid_point+0xc6>
   214fa:	fab0 f080 	clz	r0, r0
   214fe:	0940      	lsrs	r0, r0, #5
   21500:	e7be      	b.n	21480 <uECC_valid_point+0x68>
   21502:	bf00      	nop

00021504 <uECC_valid_public_key>:
   21504:	f7ff bf88 	b.w	21418 <uECC_valid_point>

00021508 <am_hal_ble_blocking_transfer.part.7>:
   21508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2150c:	4dcb      	ldr	r5, [pc, #812]	; (2183c <am_hal_ble_blocking_transfer.part.7+0x334>)
   2150e:	f8d5 8220 	ldr.w	r8, [r5, #544]	; 0x220
   21512:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   21516:	f36f 13c7 	bfc	r3, #7, #1
   2151a:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   2151e:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   21522:	f36f 2308 	bfc	r3, #8, #1
   21526:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   2152a:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   2152e:	f36f 0300 	bfc	r3, #0, #1
   21532:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   21536:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   2153a:	f36f 0341 	bfc	r3, #1, #1
   2153e:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   21542:	f8d5 3228 	ldr.w	r3, [r5, #552]	; 0x228
   21546:	f043 0301 	orr.w	r3, r3, #1
   2154a:	f8c5 3228 	str.w	r3, [r5, #552]	; 0x228
   2154e:	f8d5 3228 	ldr.w	r3, [r5, #552]	; 0x228
   21552:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   21556:	f8c5 3228 	str.w	r3, [r5, #552]	; 0x228
   2155a:	7a8b      	ldrb	r3, [r1, #10]
   2155c:	2b01      	cmp	r3, #1
   2155e:	b085      	sub	sp, #20
   21560:	460e      	mov	r6, r1
   21562:	4604      	mov	r4, r0
   21564:	d00a      	beq.n	2157c <am_hal_ble_blocking_transfer.part.7+0x74>
   21566:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   2156a:	061f      	lsls	r7, r3, #24
   2156c:	f100 8123 	bmi.w	217b6 <am_hal_ble_blocking_transfer.part.7+0x2ae>
   21570:	48b3      	ldr	r0, [pc, #716]	; (21840 <am_hal_ble_blocking_transfer.part.7+0x338>)
   21572:	f8c5 8220 	str.w	r8, [r5, #544]	; 0x220
   21576:	b005      	add	sp, #20
   21578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2157c:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
   21580:	2b00      	cmp	r3, #0
   21582:	f000 80e6 	beq.w	21752 <am_hal_ble_blocking_transfer.part.7+0x24a>
   21586:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
   2158a:	2b00      	cmp	r3, #0
   2158c:	f000 81f2 	beq.w	21974 <am_hal_ble_blocking_transfer.part.7+0x46c>
   21590:	2200      	movs	r2, #0
   21592:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
   21596:	b1a3      	cbz	r3, 215c2 <am_hal_ble_blocking_transfer.part.7+0xba>
   21598:	f8df 92a0 	ldr.w	r9, [pc, #672]	; 2183c <am_hal_ble_blocking_transfer.part.7+0x334>
   2159c:	f240 152d 	movw	r5, #301	; 0x12d
   215a0:	2700      	movs	r7, #0
   215a2:	e006      	b.n	215b2 <am_hal_ble_blocking_transfer.part.7+0xaa>
   215a4:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
   215a8:	20a0      	movs	r0, #160	; 0xa0
   215aa:	f001 fc83 	bl	22eb4 <am_hal_flash_delay>
   215ae:	3d01      	subs	r5, #1
   215b0:	d007      	beq.n	215c2 <am_hal_ble_blocking_transfer.part.7+0xba>
   215b2:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   215b6:	2b00      	cmp	r3, #0
   215b8:	d1f4      	bne.n	215a4 <am_hal_ble_blocking_transfer.part.7+0x9c>
   215ba:	f8d9 330c 	ldr.w	r3, [r9, #780]	; 0x30c
   215be:	0718      	lsls	r0, r3, #28
   215c0:	d4f2      	bmi.n	215a8 <am_hal_ble_blocking_transfer.part.7+0xa0>
   215c2:	4a9e      	ldr	r2, [pc, #632]	; (2183c <am_hal_ble_blocking_transfer.part.7+0x334>)
   215c4:	f8d2 3410 	ldr.w	r3, [r2, #1040]	; 0x410
   215c8:	f043 0302 	orr.w	r3, r3, #2
   215cc:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
   215d0:	2050      	movs	r0, #80	; 0x50
   215d2:	f001 fc6f 	bl	22eb4 <am_hal_flash_delay>
   215d6:	6823      	ldr	r3, [r4, #0]
   215d8:	4a9a      	ldr	r2, [pc, #616]	; (21844 <am_hal_ble_blocking_transfer.part.7+0x33c>)
   215da:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   215de:	4293      	cmp	r3, r2
   215e0:	f000 81d5 	beq.w	2198e <am_hal_ble_blocking_transfer.part.7+0x486>
   215e4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   215e8:	f8df 9250 	ldr.w	r9, [pc, #592]	; 2183c <am_hal_ble_blocking_transfer.part.7+0x334>
   215ec:	2500      	movs	r5, #0
   215ee:	46aa      	mov	sl, r5
   215f0:	2b00      	cmp	r3, #0
   215f2:	f040 80c6 	bne.w	21782 <am_hal_ble_blocking_transfer.part.7+0x27a>
   215f6:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   215fa:	2b00      	cmp	r3, #0
   215fc:	f040 80ac 	bne.w	21758 <am_hal_ble_blocking_transfer.part.7+0x250>
   21600:	f8d9 330c 	ldr.w	r3, [r9, #780]	; 0x30c
   21604:	0719      	lsls	r1, r3, #28
   21606:	f140 80ac 	bpl.w	21762 <am_hal_ble_blocking_transfer.part.7+0x25a>
   2160a:	f001 fe23 	bl	23254 <am_hal_interrupt_master_disable>
   2160e:	f894 7044 	ldrb.w	r7, [r4, #68]	; 0x44
   21612:	9002      	str	r0, [sp, #8]
   21614:	9802      	ldr	r0, [sp, #8]
   21616:	2f00      	cmp	r7, #0
   21618:	f040 80b6 	bne.w	21788 <am_hal_ble_blocking_transfer.part.7+0x280>
   2161c:	2301      	movs	r3, #1
   2161e:	6463      	str	r3, [r4, #68]	; 0x44
   21620:	f001 fe1c 	bl	2325c <am_hal_interrupt_master_set>
   21624:	4b85      	ldr	r3, [pc, #532]	; (2183c <am_hal_ble_blocking_transfer.part.7+0x334>)
   21626:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   2162a:	f367 0241 	bfi	r2, r7, #1, #1
   2162e:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
   21632:	7b33      	ldrb	r3, [r6, #12]
   21634:	2b00      	cmp	r3, #0
   21636:	f000 80cb 	beq.w	217d0 <am_hal_ble_blocking_transfer.part.7+0x2c8>
   2163a:	2301      	movs	r3, #1
   2163c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
   21640:	f104 070c 	add.w	r7, r4, #12
   21644:	6833      	ldr	r3, [r6, #0]
   21646:	6872      	ldr	r2, [r6, #4]
   21648:	68b0      	ldr	r0, [r6, #8]
   2164a:	68f1      	ldr	r1, [r6, #12]
   2164c:	60e3      	str	r3, [r4, #12]
   2164e:	607a      	str	r2, [r7, #4]
   21650:	60b8      	str	r0, [r7, #8]
   21652:	60f9      	str	r1, [r7, #12]
   21654:	6933      	ldr	r3, [r6, #16]
   21656:	6972      	ldr	r2, [r6, #20]
   21658:	617a      	str	r2, [r7, #20]
   2165a:	613b      	str	r3, [r7, #16]
   2165c:	f001 fdfa 	bl	23254 <am_hal_interrupt_master_disable>
   21660:	9001      	str	r0, [sp, #4]
   21662:	6823      	ldr	r3, [r4, #0]
   21664:	4a77      	ldr	r2, [pc, #476]	; (21844 <am_hal_ble_blocking_transfer.part.7+0x33c>)
   21666:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2166a:	4293      	cmp	r3, r2
   2166c:	f000 8197 	beq.w	2199e <am_hal_ble_blocking_transfer.part.7+0x496>
   21670:	7ab3      	ldrb	r3, [r6, #10]
   21672:	2b01      	cmp	r3, #1
   21674:	f000 8185 	beq.w	21982 <am_hal_ble_blocking_transfer.part.7+0x47a>
   21678:	6be5      	ldr	r5, [r4, #60]	; 0x3c
   2167a:	f8b4 9014 	ldrh.w	r9, [r4, #20]
   2167e:	f8df c1c4 	ldr.w	ip, [pc, #452]	; 21844 <am_hal_ble_blocking_transfer.part.7+0x33c>
   21682:	496e      	ldr	r1, [pc, #440]	; (2183c <am_hal_ble_blocking_transfer.part.7+0x334>)
   21684:	f04f 0e00 	mov.w	lr, #0
   21688:	45a9      	cmp	r9, r5
   2168a:	d926      	bls.n	216da <am_hal_ble_blocking_transfer.part.7+0x1d2>
   2168c:	6823      	ldr	r3, [r4, #0]
   2168e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   21692:	4563      	cmp	r3, ip
   21694:	d1f8      	bne.n	21688 <am_hal_ble_blocking_transfer.part.7+0x180>
   21696:	f8d1 0100 	ldr.w	r0, [r1, #256]	; 0x100
   2169a:	f3c0 4007 	ubfx	r0, r0, #16, #8
   2169e:	2803      	cmp	r0, #3
   216a0:	d9f2      	bls.n	21688 <am_hal_ble_blocking_transfer.part.7+0x180>
   216a2:	4581      	cmp	r9, r0
   216a4:	bf94      	ite	ls
   216a6:	ebc5 0009 	rsbls	r0, r5, r9
   216aa:	f020 0003 	bichi.w	r0, r0, #3
   216ae:	68e2      	ldr	r2, [r4, #12]
   216b0:	f025 0303 	bic.w	r3, r5, #3
   216b4:	b168      	cbz	r0, 216d2 <am_hal_ble_blocking_transfer.part.7+0x1ca>
   216b6:	441a      	add	r2, r3
   216b8:	2300      	movs	r3, #0
   216ba:	3304      	adds	r3, #4
   216bc:	f8d1 5108 	ldr.w	r5, [r1, #264]	; 0x108
   216c0:	f842 5b04 	str.w	r5, [r2], #4
   216c4:	4283      	cmp	r3, r0
   216c6:	f8c1 e108 	str.w	lr, [r1, #264]	; 0x108
   216ca:	d3f6      	bcc.n	216ba <am_hal_ble_blocking_transfer.part.7+0x1b2>
   216cc:	6be5      	ldr	r5, [r4, #60]	; 0x3c
   216ce:	f8b4 9014 	ldrh.w	r9, [r4, #20]
   216d2:	4405      	add	r5, r0
   216d4:	45a9      	cmp	r9, r5
   216d6:	63e5      	str	r5, [r4, #60]	; 0x3c
   216d8:	d8d8      	bhi.n	2168c <am_hal_ble_blocking_transfer.part.7+0x184>
   216da:	9801      	ldr	r0, [sp, #4]
   216dc:	f001 fdbe 	bl	2325c <am_hal_interrupt_master_set>
   216e0:	4b56      	ldr	r3, [pc, #344]	; (2183c <am_hal_ble_blocking_transfer.part.7+0x334>)
   216e2:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
   216e6:	07d2      	lsls	r2, r2, #31
   216e8:	d40d      	bmi.n	21706 <am_hal_ble_blocking_transfer.part.7+0x1fe>
   216ea:	4699      	mov	r9, r3
   216ec:	f242 7510 	movw	r5, #10000	; 0x2710
   216f0:	e002      	b.n	216f8 <am_hal_ble_blocking_transfer.part.7+0x1f0>
   216f2:	3d01      	subs	r5, #1
   216f4:	f000 8149 	beq.w	2198a <am_hal_ble_blocking_transfer.part.7+0x482>
   216f8:	2010      	movs	r0, #16
   216fa:	f001 fbdb 	bl	22eb4 <am_hal_flash_delay>
   216fe:	f8d9 3224 	ldr.w	r3, [r9, #548]	; 0x224
   21702:	07db      	lsls	r3, r3, #31
   21704:	d5f5      	bpl.n	216f2 <am_hal_ble_blocking_transfer.part.7+0x1ea>
   21706:	4a4d      	ldr	r2, [pc, #308]	; (2183c <am_hal_ble_blocking_transfer.part.7+0x334>)
   21708:	f8d2 3228 	ldr.w	r3, [r2, #552]	; 0x228
   2170c:	f043 0301 	orr.w	r3, r3, #1
   21710:	f8c2 3228 	str.w	r3, [r2, #552]	; 0x228
   21714:	f8d2 1228 	ldr.w	r1, [r2, #552]	; 0x228
   21718:	2300      	movs	r3, #0
   2171a:	f041 0102 	orr.w	r1, r1, #2
   2171e:	f8c2 1228 	str.w	r1, [r2, #552]	; 0x228
   21722:	603b      	str	r3, [r7, #0]
   21724:	607b      	str	r3, [r7, #4]
   21726:	60bb      	str	r3, [r7, #8]
   21728:	60fb      	str	r3, [r7, #12]
   2172a:	613b      	str	r3, [r7, #16]
   2172c:	617b      	str	r3, [r7, #20]
   2172e:	63e3      	str	r3, [r4, #60]	; 0x3c
   21730:	7ab3      	ldrb	r3, [r6, #10]
   21732:	2b01      	cmp	r3, #1
   21734:	f000 8113 	beq.w	2195e <am_hal_ble_blocking_transfer.part.7+0x456>
   21738:	2b02      	cmp	r3, #2
   2173a:	f000 8107 	beq.w	2194c <am_hal_ble_blocking_transfer.part.7+0x444>
   2173e:	2300      	movs	r3, #0
   21740:	4a3e      	ldr	r2, [pc, #248]	; (2183c <am_hal_ble_blocking_transfer.part.7+0x334>)
   21742:	4618      	mov	r0, r3
   21744:	f8c2 8220 	str.w	r8, [r2, #544]	; 0x220
   21748:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
   2174c:	b005      	add	sp, #20
   2174e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21752:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
   21756:	e71e      	b.n	21596 <am_hal_ble_blocking_transfer.part.7+0x8e>
   21758:	f8d9 3224 	ldr.w	r3, [r9, #548]	; 0x224
   2175c:	05da      	lsls	r2, r3, #23
   2175e:	f53f af54 	bmi.w	2160a <am_hal_ble_blocking_transfer.part.7+0x102>
   21762:	f5b5 7f96 	cmp.w	r5, #300	; 0x12c
   21766:	d012      	beq.n	2178e <am_hal_ble_blocking_transfer.part.7+0x286>
   21768:	f8d9 330c 	ldr.w	r3, [r9, #780]	; 0x30c
   2176c:	061b      	lsls	r3, r3, #24
   2176e:	d40e      	bmi.n	2178e <am_hal_ble_blocking_transfer.part.7+0x286>
   21770:	20a0      	movs	r0, #160	; 0xa0
   21772:	f001 fb9f 	bl	22eb4 <am_hal_flash_delay>
   21776:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   2177a:	3501      	adds	r5, #1
   2177c:	2b00      	cmp	r3, #0
   2177e:	f43f af3a 	beq.w	215f6 <am_hal_ble_blocking_transfer.part.7+0xee>
   21782:	f884 a041 	strb.w	sl, [r4, #65]	; 0x41
   21786:	e740      	b.n	2160a <am_hal_ble_blocking_transfer.part.7+0x102>
   21788:	f001 fd68 	bl	2325c <am_hal_interrupt_master_set>
   2178c:	e7f0      	b.n	21770 <am_hal_ble_blocking_transfer.part.7+0x268>
   2178e:	6823      	ldr	r3, [r4, #0]
   21790:	4a2c      	ldr	r2, [pc, #176]	; (21844 <am_hal_ble_blocking_transfer.part.7+0x33c>)
   21792:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   21796:	4293      	cmp	r3, r2
   21798:	f000 811e 	beq.w	219d8 <am_hal_ble_blocking_transfer.part.7+0x4d0>
   2179c:	4b27      	ldr	r3, [pc, #156]	; (2183c <am_hal_ble_blocking_transfer.part.7+0x334>)
   2179e:	482a      	ldr	r0, [pc, #168]	; (21848 <am_hal_ble_blocking_transfer.part.7+0x340>)
   217a0:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   217a4:	f36f 0241 	bfc	r2, #1, #1
   217a8:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
   217ac:	f8c3 8220 	str.w	r8, [r3, #544]	; 0x220
   217b0:	b005      	add	sp, #20
   217b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   217b6:	f001 fd4d 	bl	23254 <am_hal_interrupt_master_disable>
   217ba:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   217be:	9003      	str	r0, [sp, #12]
   217c0:	9803      	ldr	r0, [sp, #12]
   217c2:	2b00      	cmp	r3, #0
   217c4:	d157      	bne.n	21876 <am_hal_ble_blocking_transfer.part.7+0x36e>
   217c6:	2301      	movs	r3, #1
   217c8:	6463      	str	r3, [r4, #68]	; 0x44
   217ca:	f001 fd47 	bl	2325c <am_hal_interrupt_master_set>
   217ce:	e730      	b.n	21632 <am_hal_ble_blocking_transfer.part.7+0x12a>
   217d0:	f104 070c 	add.w	r7, r4, #12
   217d4:	6833      	ldr	r3, [r6, #0]
   217d6:	6872      	ldr	r2, [r6, #4]
   217d8:	68b0      	ldr	r0, [r6, #8]
   217da:	68f1      	ldr	r1, [r6, #12]
   217dc:	60e3      	str	r3, [r4, #12]
   217de:	607a      	str	r2, [r7, #4]
   217e0:	60b8      	str	r0, [r7, #8]
   217e2:	60f9      	str	r1, [r7, #12]
   217e4:	6933      	ldr	r3, [r6, #16]
   217e6:	6972      	ldr	r2, [r6, #20]
   217e8:	617a      	str	r2, [r7, #20]
   217ea:	613b      	str	r3, [r7, #16]
   217ec:	f001 fd32 	bl	23254 <am_hal_interrupt_master_disable>
   217f0:	9001      	str	r0, [sp, #4]
   217f2:	2c00      	cmp	r4, #0
   217f4:	f47f af35 	bne.w	21662 <am_hal_ble_blocking_transfer.part.7+0x15a>
   217f8:	7ab3      	ldrb	r3, [r6, #10]
   217fa:	2b01      	cmp	r3, #1
   217fc:	f47f af3c 	bne.w	21678 <am_hal_ble_blocking_transfer.part.7+0x170>
   21800:	6823      	ldr	r3, [r4, #0]
   21802:	4a10      	ldr	r2, [pc, #64]	; (21844 <am_hal_ble_blocking_transfer.part.7+0x33c>)
   21804:	f8b4 b014 	ldrh.w	fp, [r4, #20]
   21808:	68e5      	ldr	r5, [r4, #12]
   2180a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2180e:	4293      	cmp	r3, r2
   21810:	d06b      	beq.n	218ea <am_hal_ble_blocking_transfer.part.7+0x3e2>
   21812:	f1bb 0f00 	cmp.w	fp, #0
   21816:	f43f af60 	beq.w	216da <am_hal_ble_blocking_transfer.part.7+0x1d2>
   2181a:	f8df a020 	ldr.w	sl, [pc, #32]	; 2183c <am_hal_ble_blocking_transfer.part.7+0x334>
   2181e:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
   21822:	f3c3 2307 	ubfx	r3, r3, #8, #8
   21826:	2b03      	cmp	r3, #3
   21828:	d833      	bhi.n	21892 <am_hal_ble_blocking_transfer.part.7+0x38a>
   2182a:	f8da 3224 	ldr.w	r3, [sl, #548]	; 0x224
   2182e:	07d9      	lsls	r1, r3, #31
   21830:	f53f af53 	bmi.w	216da <am_hal_ble_blocking_transfer.part.7+0x1d2>
   21834:	f8df 9014 	ldr.w	r9, [pc, #20]	; 2184c <am_hal_ble_blocking_transfer.part.7+0x344>
   21838:	e013      	b.n	21862 <am_hal_ble_blocking_transfer.part.7+0x35a>
   2183a:	bf00      	nop
   2183c:	5000c000 	.word	0x5000c000
   21840:	08000001 	.word	0x08000001
   21844:	01775230 	.word	0x01775230
   21848:	08000002 	.word	0x08000002
   2184c:	0007a120 	.word	0x0007a120
   21850:	f8da 3224 	ldr.w	r3, [sl, #548]	; 0x224
   21854:	07d8      	lsls	r0, r3, #31
   21856:	f53f af40 	bmi.w	216da <am_hal_ble_blocking_transfer.part.7+0x1d2>
   2185a:	f1b9 0901 	subs.w	r9, r9, #1
   2185e:	f43f af3c 	beq.w	216da <am_hal_ble_blocking_transfer.part.7+0x1d2>
   21862:	2010      	movs	r0, #16
   21864:	f001 fb26 	bl	22eb4 <am_hal_flash_delay>
   21868:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
   2186c:	f3c3 2307 	ubfx	r3, r3, #8, #8
   21870:	2b03      	cmp	r3, #3
   21872:	d9ed      	bls.n	21850 <am_hal_ble_blocking_transfer.part.7+0x348>
   21874:	e00d      	b.n	21892 <am_hal_ble_blocking_transfer.part.7+0x38a>
   21876:	f001 fcf1 	bl	2325c <am_hal_interrupt_master_set>
   2187a:	f8c5 8220 	str.w	r8, [r5, #544]	; 0x220
   2187e:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   21882:	e678      	b.n	21576 <am_hal_ble_blocking_transfer.part.7+0x6e>
   21884:	2b03      	cmp	r3, #3
   21886:	f240 80b8 	bls.w	219fa <am_hal_ble_blocking_transfer.part.7+0x4f2>
   2188a:	f1bb 0f00 	cmp.w	fp, #0
   2188e:	f43f af24 	beq.w	216da <am_hal_ble_blocking_transfer.part.7+0x1d2>
   21892:	f855 2b04 	ldr.w	r2, [r5], #4
   21896:	f8ca 210c 	str.w	r2, [sl, #268]	; 0x10c
   2189a:	f1bb 0f03 	cmp.w	fp, #3
   2189e:	f1a3 0304 	sub.w	r3, r3, #4
   218a2:	f1ab 0b04 	sub.w	fp, fp, #4
   218a6:	f67f af18 	bls.w	216da <am_hal_ble_blocking_transfer.part.7+0x1d2>
   218aa:	e7eb      	b.n	21884 <am_hal_ble_blocking_transfer.part.7+0x37c>
   218ac:	2000      	movs	r0, #0
   218ae:	4602      	mov	r2, r0
   218b0:	f896 c00c 	ldrb.w	ip, [r6, #12]
   218b4:	f896 e00a 	ldrb.w	lr, [r6, #10]
   218b8:	8935      	ldrh	r5, [r6, #8]
   218ba:	4952      	ldr	r1, [pc, #328]	; (21a04 <am_hal_ble_blocking_transfer.part.7+0x4fc>)
   218bc:	015b      	lsls	r3, r3, #5
   218be:	f003 0360 	and.w	r3, r3, #96	; 0x60
   218c2:	ea4e 1ecc 	orr.w	lr, lr, ip, lsl #7
   218c6:	022d      	lsls	r5, r5, #8
   218c8:	4029      	ands	r1, r5
   218ca:	ea4e 0303 	orr.w	r3, lr, r3
   218ce:	430b      	orrs	r3, r1
   218d0:	494d      	ldr	r1, [pc, #308]	; (21a08 <am_hal_ble_blocking_transfer.part.7+0x500>)
   218d2:	4313      	orrs	r3, r2
   218d4:	f8c1 0214 	str.w	r0, [r1, #532]	; 0x214
   218d8:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
   218dc:	7ab3      	ldrb	r3, [r6, #10]
   218de:	2b01      	cmp	r3, #1
   218e0:	f47f aeca 	bne.w	21678 <am_hal_ble_blocking_transfer.part.7+0x170>
   218e4:	f8b4 b014 	ldrh.w	fp, [r4, #20]
   218e8:	68e5      	ldr	r5, [r4, #12]
   218ea:	79f2      	ldrb	r2, [r6, #7]
   218ec:	2a03      	cmp	r2, #3
   218ee:	d890      	bhi.n	21812 <am_hal_ble_blocking_transfer.part.7+0x30a>
   218f0:	e8df f002 	tbb	[pc, r2]
   218f4:	1e242802 	.word	0x1e242802
   218f8:	2100      	movs	r1, #0
   218fa:	460b      	mov	r3, r1
   218fc:	f896 e00c 	ldrb.w	lr, [r6, #12]
   21900:	f8b6 c008 	ldrh.w	ip, [r6, #8]
   21904:	483f      	ldr	r0, [pc, #252]	; (21a04 <am_hal_ble_blocking_transfer.part.7+0x4fc>)
   21906:	0152      	lsls	r2, r2, #5
   21908:	ea4f 1ece 	mov.w	lr, lr, lsl #7
   2190c:	f002 0260 	and.w	r2, r2, #96	; 0x60
   21910:	f04e 0e01 	orr.w	lr, lr, #1
   21914:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
   21918:	ea0c 0000 	and.w	r0, ip, r0
   2191c:	ea4e 0202 	orr.w	r2, lr, r2
   21920:	4302      	orrs	r2, r0
   21922:	4839      	ldr	r0, [pc, #228]	; (21a08 <am_hal_ble_blocking_transfer.part.7+0x500>)
   21924:	4313      	orrs	r3, r2
   21926:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
   2192a:	f8c0 320c 	str.w	r3, [r0, #524]	; 0x20c
   2192e:	e770      	b.n	21812 <am_hal_ble_blocking_transfer.part.7+0x30a>
   21930:	88b1      	ldrh	r1, [r6, #4]
   21932:	79b3      	ldrb	r3, [r6, #6]
   21934:	ba49      	rev16	r1, r1
   21936:	b289      	uxth	r1, r1
   21938:	061b      	lsls	r3, r3, #24
   2193a:	e7df      	b.n	218fc <am_hal_ble_blocking_transfer.part.7+0x3f4>
   2193c:	7973      	ldrb	r3, [r6, #5]
   2193e:	7931      	ldrb	r1, [r6, #4]
   21940:	061b      	lsls	r3, r3, #24
   21942:	e7db      	b.n	218fc <am_hal_ble_blocking_transfer.part.7+0x3f4>
   21944:	7933      	ldrb	r3, [r6, #4]
   21946:	2100      	movs	r1, #0
   21948:	061b      	lsls	r3, r3, #24
   2194a:	e7d7      	b.n	218fc <am_hal_ble_blocking_transfer.part.7+0x3f4>
   2194c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   21950:	2b00      	cmp	r3, #0
   21952:	f43f aef4 	beq.w	2173e <am_hal_ble_blocking_transfer.part.7+0x236>
   21956:	2300      	movs	r3, #0
   21958:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   2195c:	e6ef      	b.n	2173e <am_hal_ble_blocking_transfer.part.7+0x236>
   2195e:	6823      	ldr	r3, [r4, #0]
   21960:	492a      	ldr	r1, [pc, #168]	; (21a0c <am_hal_ble_blocking_transfer.part.7+0x504>)
   21962:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   21966:	428b      	cmp	r3, r1
   21968:	d03f      	beq.n	219ea <am_hal_ble_blocking_transfer.part.7+0x4e2>
   2196a:	2301      	movs	r3, #1
   2196c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   21970:	7ab3      	ldrb	r3, [r6, #10]
   21972:	e6e1      	b.n	21738 <am_hal_ble_blocking_transfer.part.7+0x230>
   21974:	f64b 3080 	movw	r0, #48000	; 0xbb80
   21978:	f001 fa9c 	bl	22eb4 <am_hal_flash_delay>
   2197c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   21980:	e606      	b.n	21590 <am_hal_ble_blocking_transfer.part.7+0x88>
   21982:	f8b4 b014 	ldrh.w	fp, [r4, #20]
   21986:	68e5      	ldr	r5, [r4, #12]
   21988:	e743      	b.n	21812 <am_hal_ble_blocking_transfer.part.7+0x30a>
   2198a:	4821      	ldr	r0, [pc, #132]	; (21a10 <am_hal_ble_blocking_transfer.part.7+0x508>)
   2198c:	e5f3      	b.n	21576 <am_hal_ble_blocking_transfer.part.7+0x6e>
   2198e:	4a1e      	ldr	r2, [pc, #120]	; (21a08 <am_hal_ble_blocking_transfer.part.7+0x500>)
   21990:	f8b2 3304 	ldrh.w	r3, [r2, #772]	; 0x304
   21994:	f043 030c 	orr.w	r3, r3, #12
   21998:	f8a2 3304 	strh.w	r3, [r2, #772]	; 0x304
   2199c:	e622      	b.n	215e4 <am_hal_ble_blocking_transfer.part.7+0xdc>
   2199e:	79f3      	ldrb	r3, [r6, #7]
   219a0:	2b03      	cmp	r3, #3
   219a2:	f63f af29 	bhi.w	217f8 <am_hal_ble_blocking_transfer.part.7+0x2f0>
   219a6:	a201      	add	r2, pc, #4	; (adr r2, 219ac <am_hal_ble_blocking_transfer.part.7+0x4a4>)
   219a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   219ac:	000218ad 	.word	0x000218ad
   219b0:	000219d1 	.word	0x000219d1
   219b4:	000219c9 	.word	0x000219c9
   219b8:	000219bd 	.word	0x000219bd
   219bc:	88b0      	ldrh	r0, [r6, #4]
   219be:	79b2      	ldrb	r2, [r6, #6]
   219c0:	ba40      	rev16	r0, r0
   219c2:	b280      	uxth	r0, r0
   219c4:	0612      	lsls	r2, r2, #24
   219c6:	e773      	b.n	218b0 <am_hal_ble_blocking_transfer.part.7+0x3a8>
   219c8:	7972      	ldrb	r2, [r6, #5]
   219ca:	7930      	ldrb	r0, [r6, #4]
   219cc:	0612      	lsls	r2, r2, #24
   219ce:	e76f      	b.n	218b0 <am_hal_ble_blocking_transfer.part.7+0x3a8>
   219d0:	7932      	ldrb	r2, [r6, #4]
   219d2:	2000      	movs	r0, #0
   219d4:	0612      	lsls	r2, r2, #24
   219d6:	e76b      	b.n	218b0 <am_hal_ble_blocking_transfer.part.7+0x3a8>
   219d8:	4b0b      	ldr	r3, [pc, #44]	; (21a08 <am_hal_ble_blocking_transfer.part.7+0x500>)
   219da:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   219de:	2102      	movs	r1, #2
   219e0:	f361 0283 	bfi	r2, r1, #2, #2
   219e4:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   219e8:	e6d8      	b.n	2179c <am_hal_ble_blocking_transfer.part.7+0x294>
   219ea:	f8b2 3304 	ldrh.w	r3, [r2, #772]	; 0x304
   219ee:	2102      	movs	r1, #2
   219f0:	f361 0383 	bfi	r3, r1, #2, #2
   219f4:	f8a2 3304 	strh.w	r3, [r2, #772]	; 0x304
   219f8:	e7b7      	b.n	2196a <am_hal_ble_blocking_transfer.part.7+0x462>
   219fa:	f1bb 0f00 	cmp.w	fp, #0
   219fe:	f47f af0e 	bne.w	2181e <am_hal_ble_blocking_transfer.part.7+0x316>
   21a02:	e66a      	b.n	216da <am_hal_ble_blocking_transfer.part.7+0x1d2>
   21a04:	000fff00 	.word	0x000fff00
   21a08:	5000c000 	.word	0x5000c000
   21a0c:	01775230 	.word	0x01775230
   21a10:	08000009 	.word	0x08000009

00021a14 <am_hal_ble_initialize>:
   21a14:	b108      	cbz	r0, 21a1a <am_hal_ble_initialize+0x6>
   21a16:	2005      	movs	r0, #5
   21a18:	4770      	bx	lr
   21a1a:	b149      	cbz	r1, 21a30 <am_hal_ble_initialize+0x1c>
   21a1c:	b4f0      	push	{r4, r5, r6, r7}
   21a1e:	4b19      	ldr	r3, [pc, #100]	; (21a84 <am_hal_ble_initialize+0x70>)
   21a20:	78dc      	ldrb	r4, [r3, #3]
   21a22:	f3c4 0200 	ubfx	r2, r4, #0, #1
   21a26:	b2d0      	uxtb	r0, r2
   21a28:	b120      	cbz	r0, 21a34 <am_hal_ble_initialize+0x20>
   21a2a:	2007      	movs	r0, #7
   21a2c:	bcf0      	pop	{r4, r5, r6, r7}
   21a2e:	4770      	bx	lr
   21a30:	2006      	movs	r0, #6
   21a32:	4770      	bx	lr
   21a34:	f044 0401 	orr.w	r4, r4, #1
   21a38:	70dc      	strb	r4, [r3, #3]
   21a3a:	681e      	ldr	r6, [r3, #0]
   21a3c:	4f12      	ldr	r7, [pc, #72]	; (21a88 <am_hal_ble_initialize+0x74>)
   21a3e:	60d8      	str	r0, [r3, #12]
   21a40:	f367 0617 	bfi	r6, r7, #0, #24
   21a44:	6258      	str	r0, [r3, #36]	; 0x24
   21a46:	6058      	str	r0, [r3, #4]
   21a48:	63d8      	str	r0, [r3, #60]	; 0x3c
   21a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   21a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
   21a52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
   21a56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
   21a5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   21a5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
   21a62:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
   21a66:	721a      	strb	r2, [r3, #8]
   21a68:	601e      	str	r6, [r3, #0]
   21a6a:	6118      	str	r0, [r3, #16]
   21a6c:	6158      	str	r0, [r3, #20]
   21a6e:	6198      	str	r0, [r3, #24]
   21a70:	61d8      	str	r0, [r3, #28]
   21a72:	6218      	str	r0, [r3, #32]
   21a74:	6298      	str	r0, [r3, #40]	; 0x28
   21a76:	62d8      	str	r0, [r3, #44]	; 0x2c
   21a78:	6318      	str	r0, [r3, #48]	; 0x30
   21a7a:	6358      	str	r0, [r3, #52]	; 0x34
   21a7c:	6398      	str	r0, [r3, #56]	; 0x38
   21a7e:	600b      	str	r3, [r1, #0]
   21a80:	e7d4      	b.n	21a2c <am_hal_ble_initialize+0x18>
   21a82:	bf00      	nop
   21a84:	1000a3ac 	.word	0x1000a3ac
   21a88:	00775230 	.word	0x00775230

00021a8c <am_hal_ble_deinitialize>:
   21a8c:	b128      	cbz	r0, 21a9a <am_hal_ble_deinitialize+0xe>
   21a8e:	6803      	ldr	r3, [r0, #0]
   21a90:	4a13      	ldr	r2, [pc, #76]	; (21ae0 <am_hal_ble_deinitialize+0x54>)
   21a92:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   21a96:	4293      	cmp	r3, r2
   21a98:	d001      	beq.n	21a9e <am_hal_ble_deinitialize+0x12>
   21a9a:	2002      	movs	r0, #2
   21a9c:	4770      	bx	lr
   21a9e:	78c2      	ldrb	r2, [r0, #3]
   21aa0:	2300      	movs	r3, #0
   21aa2:	f363 0200 	bfi	r2, r3, #0, #1
   21aa6:	70c2      	strb	r2, [r0, #3]
   21aa8:	6802      	ldr	r2, [r0, #0]
   21aaa:	60c3      	str	r3, [r0, #12]
   21aac:	f363 0217 	bfi	r2, r3, #0, #24
   21ab0:	6103      	str	r3, [r0, #16]
   21ab2:	6143      	str	r3, [r0, #20]
   21ab4:	6183      	str	r3, [r0, #24]
   21ab6:	61c3      	str	r3, [r0, #28]
   21ab8:	6203      	str	r3, [r0, #32]
   21aba:	6043      	str	r3, [r0, #4]
   21abc:	63c3      	str	r3, [r0, #60]	; 0x3c
   21abe:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
   21ac2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
   21ac6:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
   21aca:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
   21ace:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
   21ad2:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
   21ad6:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
   21ada:	6002      	str	r2, [r0, #0]
   21adc:	4618      	mov	r0, r3
   21ade:	4770      	bx	lr
   21ae0:	01775230 	.word	0x01775230

00021ae4 <am_hal_ble_config>:
   21ae4:	b128      	cbz	r0, 21af2 <am_hal_ble_config+0xe>
   21ae6:	6803      	ldr	r3, [r0, #0]
   21ae8:	4a3c      	ldr	r2, [pc, #240]	; (21bdc <am_hal_ble_config+0xf8>)
   21aea:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   21aee:	4293      	cmp	r3, r2
   21af0:	d001      	beq.n	21af6 <am_hal_ble_config+0x12>
   21af2:	2002      	movs	r0, #2
   21af4:	4770      	bx	lr
   21af6:	b4f0      	push	{r4, r5, r6, r7}
   21af8:	4b39      	ldr	r3, [pc, #228]	; (21be0 <am_hal_ble_config+0xfc>)
   21afa:	6844      	ldr	r4, [r0, #4]
   21afc:	4d38      	ldr	r5, [pc, #224]	; (21be0 <am_hal_ble_config+0xfc>)
   21afe:	2203      	movs	r2, #3
   21b00:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   21b04:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   21b08:	f36f 4251 	bfc	r2, #17, #1
   21b0c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   21b10:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   21b14:	f36f 4210 	bfc	r2, #16, #1
   21b18:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   21b1c:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   21b20:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   21b24:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   21b28:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
   21b2c:	6888      	ldr	r0, [r1, #8]
   21b2e:	f360 220d 	bfi	r2, r0, #8, #6
   21b32:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
   21b36:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
   21b3a:	6848      	ldr	r0, [r1, #4]
   21b3c:	f360 0205 	bfi	r2, r0, #0, #6
   21b40:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
   21b44:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   21b48:	f042 0201 	orr.w	r2, r2, #1
   21b4c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   21b50:	680b      	ldr	r3, [r1, #0]
   21b52:	68c8      	ldr	r0, [r1, #12]
   21b54:	4a23      	ldr	r2, [pc, #140]	; (21be4 <am_hal_ble_config+0x100>)
   21b56:	021b      	lsls	r3, r3, #8
   21b58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   21b5c:	2802      	cmp	r0, #2
   21b5e:	bf08      	it	eq
   21b60:	f443 6300 	orreq.w	r3, r3, #2048	; 0x800
   21b64:	f043 0301 	orr.w	r3, r3, #1
   21b68:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
   21b6c:	68d3      	ldr	r3, [r2, #12]
   21b6e:	b2db      	uxtb	r3, r3
   21b70:	2b12      	cmp	r3, #18
   21b72:	d009      	beq.n	21b88 <am_hal_ble_config+0xa4>
   21b74:	4b1c      	ldr	r3, [pc, #112]	; (21be8 <am_hal_ble_config+0x104>)
   21b76:	7e8a      	ldrb	r2, [r1, #26]
   21b78:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   21b7c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   21b80:	2000      	movs	r0, #0
   21b82:	7222      	strb	r2, [r4, #8]
   21b84:	bcf0      	pop	{r4, r5, r6, r7}
   21b86:	4770      	bx	lr
   21b88:	4f18      	ldr	r7, [pc, #96]	; (21bec <am_hal_ble_config+0x108>)
   21b8a:	68fa      	ldr	r2, [r7, #12]
   21b8c:	687b      	ldr	r3, [r7, #4]
   21b8e:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
   21b92:	6908      	ldr	r0, [r1, #16]
   21b94:	f882 0021 	strb.w	r0, [r2, #33]	; 0x21
   21b98:	6908      	ldr	r0, [r1, #16]
   21b9a:	0a00      	lsrs	r0, r0, #8
   21b9c:	f882 0022 	strb.w	r0, [r2, #34]	; 0x22
   21ba0:	6948      	ldr	r0, [r1, #20]
   21ba2:	f882 0026 	strb.w	r0, [r2, #38]	; 0x26
   21ba6:	6948      	ldr	r0, [r1, #20]
   21ba8:	0a00      	lsrs	r0, r0, #8
   21baa:	f882 0027 	strb.w	r0, [r2, #39]	; 0x27
   21bae:	7e48      	ldrb	r0, [r1, #25]
   21bb0:	f882 0058 	strb.w	r0, [r2, #88]	; 0x58
   21bb4:	7e08      	ldrb	r0, [r1, #24]
   21bb6:	f882 0080 	strb.w	r0, [r2, #128]	; 0x80
   21bba:	b16b      	cbz	r3, 21bd8 <am_hal_ble_config+0xf4>
   21bbc:	4e0c      	ldr	r6, [pc, #48]	; (21bf0 <am_hal_ble_config+0x10c>)
   21bbe:	18d5      	adds	r5, r2, r3
   21bc0:	2300      	movs	r3, #0
   21bc2:	f812 0b01 	ldrb.w	r0, [r2], #1
   21bc6:	ea80 2013 	eor.w	r0, r0, r3, lsr #8
   21bca:	4295      	cmp	r5, r2
   21bcc:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
   21bd0:	ea80 2303 	eor.w	r3, r0, r3, lsl #8
   21bd4:	b29b      	uxth	r3, r3
   21bd6:	d1f4      	bne.n	21bc2 <am_hal_ble_config+0xde>
   21bd8:	60bb      	str	r3, [r7, #8]
   21bda:	e7cb      	b.n	21b74 <am_hal_ble_config+0x90>
   21bdc:	01775230 	.word	0x01775230
   21be0:	5000c000 	.word	0x5000c000
   21be4:	40020000 	.word	0x40020000
   21be8:	1000a3ac 	.word	0x1000a3ac
   21bec:	10002cbc 	.word	0x10002cbc
   21bf0:	00025bfc 	.word	0x00025bfc

00021bf4 <am_hal_ble_power_control>:
   21bf4:	b538      	push	{r3, r4, r5, lr}
   21bf6:	4b52      	ldr	r3, [pc, #328]	; (21d40 <am_hal_ble_power_control+0x14c>)
   21bf8:	68db      	ldr	r3, [r3, #12]
   21bfa:	b2db      	uxtb	r3, r3
   21bfc:	2b11      	cmp	r3, #17
   21bfe:	d903      	bls.n	21c08 <am_hal_ble_power_control+0x14>
   21c00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   21c04:	4a4f      	ldr	r2, [pc, #316]	; (21d44 <am_hal_ble_power_control+0x150>)
   21c06:	63da      	str	r2, [r3, #60]	; 0x3c
   21c08:	b128      	cbz	r0, 21c16 <am_hal_ble_power_control+0x22>
   21c0a:	6803      	ldr	r3, [r0, #0]
   21c0c:	4a4e      	ldr	r2, [pc, #312]	; (21d48 <am_hal_ble_power_control+0x154>)
   21c0e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   21c12:	4293      	cmp	r3, r2
   21c14:	d002      	beq.n	21c1c <am_hal_ble_power_control+0x28>
   21c16:	2402      	movs	r4, #2
   21c18:	4620      	mov	r0, r4
   21c1a:	bd38      	pop	{r3, r4, r5, pc}
   21c1c:	b9f9      	cbnz	r1, 21c5e <am_hal_ble_power_control+0x6a>
   21c1e:	4b4b      	ldr	r3, [pc, #300]	; (21d4c <am_hal_ble_power_control+0x158>)
   21c20:	699b      	ldr	r3, [r3, #24]
   21c22:	05db      	lsls	r3, r3, #23
   21c24:	d454      	bmi.n	21cd0 <am_hal_ble_power_control+0xdc>
   21c26:	4d46      	ldr	r5, [pc, #280]	; (21d40 <am_hal_ble_power_control+0x14c>)
   21c28:	69ab      	ldr	r3, [r5, #24]
   21c2a:	f043 0301 	orr.w	r3, r3, #1
   21c2e:	61ab      	str	r3, [r5, #24]
   21c30:	69ab      	ldr	r3, [r5, #24]
   21c32:	f003 0307 	and.w	r3, r3, #7
   21c36:	2b07      	cmp	r3, #7
   21c38:	d00b      	beq.n	21c52 <am_hal_ble_power_control+0x5e>
   21c3a:	4c45      	ldr	r4, [pc, #276]	; (21d50 <am_hal_ble_power_control+0x15c>)
   21c3c:	e001      	b.n	21c42 <am_hal_ble_power_control+0x4e>
   21c3e:	3c01      	subs	r4, #1
   21c40:	d06b      	beq.n	21d1a <am_hal_ble_power_control+0x126>
   21c42:	2010      	movs	r0, #16
   21c44:	f001 f936 	bl	22eb4 <am_hal_flash_delay>
   21c48:	69ab      	ldr	r3, [r5, #24]
   21c4a:	f003 0307 	and.w	r3, r3, #7
   21c4e:	2b07      	cmp	r3, #7
   21c50:	d1f5      	bne.n	21c3e <am_hal_ble_power_control+0x4a>
   21c52:	200e      	movs	r0, #14
   21c54:	f001 fb9c 	bl	23390 <am_hal_pwrctrl_periph_enable>
   21c58:	b128      	cbz	r0, 21c66 <am_hal_ble_power_control+0x72>
   21c5a:	4c3e      	ldr	r4, [pc, #248]	; (21d54 <am_hal_ble_power_control+0x160>)
   21c5c:	e7dc      	b.n	21c18 <am_hal_ble_power_control+0x24>
   21c5e:	2901      	cmp	r1, #1
   21c60:	d038      	beq.n	21cd4 <am_hal_ble_power_control+0xe0>
   21c62:	2407      	movs	r4, #7
   21c64:	e7d8      	b.n	21c18 <am_hal_ble_power_control+0x24>
   21c66:	4b3c      	ldr	r3, [pc, #240]	; (21d58 <am_hal_ble_power_control+0x164>)
   21c68:	4935      	ldr	r1, [pc, #212]	; (21d40 <am_hal_ble_power_control+0x14c>)
   21c6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   21c6e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   21c72:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   21c76:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   21c7a:	f360 02df 	bfi	r2, r0, #3, #29
   21c7e:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
   21c82:	68cb      	ldr	r3, [r1, #12]
   21c84:	b2db      	uxtb	r3, r3
   21c86:	2b11      	cmp	r3, #17
   21c88:	d949      	bls.n	21d1e <am_hal_ble_power_control+0x12a>
   21c8a:	f891 3198 	ldrb.w	r3, [r1, #408]	; 0x198
   21c8e:	f043 0320 	orr.w	r3, r3, #32
   21c92:	f881 3198 	strb.w	r3, [r1, #408]	; 0x198
   21c96:	4d30      	ldr	r5, [pc, #192]	; (21d58 <am_hal_ble_power_control+0x164>)
   21c98:	4830      	ldr	r0, [pc, #192]	; (21d5c <am_hal_ble_power_control+0x168>)
   21c9a:	f001 f90b 	bl	22eb4 <am_hal_flash_delay>
   21c9e:	f8b5 3304 	ldrh.w	r3, [r5, #772]	; 0x304
   21ca2:	f043 0301 	orr.w	r3, r3, #1
   21ca6:	f8a5 3304 	strh.w	r3, [r5, #772]	; 0x304
   21caa:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   21cae:	f3c3 2302 	ubfx	r3, r3, #8, #3
   21cb2:	2b03      	cmp	r3, #3
   21cb4:	d00c      	beq.n	21cd0 <am_hal_ble_power_control+0xdc>
   21cb6:	4c2a      	ldr	r4, [pc, #168]	; (21d60 <am_hal_ble_power_control+0x16c>)
   21cb8:	e001      	b.n	21cbe <am_hal_ble_power_control+0xca>
   21cba:	3c01      	subs	r4, #1
   21cbc:	d039      	beq.n	21d32 <am_hal_ble_power_control+0x13e>
   21cbe:	2010      	movs	r0, #16
   21cc0:	f001 f8f8 	bl	22eb4 <am_hal_flash_delay>
   21cc4:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   21cc8:	f3c3 2302 	ubfx	r3, r3, #8, #3
   21ccc:	2b03      	cmp	r3, #3
   21cce:	d1f4      	bne.n	21cba <am_hal_ble_power_control+0xc6>
   21cd0:	2400      	movs	r4, #0
   21cd2:	e7a1      	b.n	21c18 <am_hal_ble_power_control+0x24>
   21cd4:	4b20      	ldr	r3, [pc, #128]	; (21d58 <am_hal_ble_power_control+0x164>)
   21cd6:	481a      	ldr	r0, [pc, #104]	; (21d40 <am_hal_ble_power_control+0x14c>)
   21cd8:	2200      	movs	r2, #0
   21cda:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   21cde:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
   21ce2:	f362 01df 	bfi	r1, r2, #3, #29
   21ce6:	f8c3 1410 	str.w	r1, [r3, #1040]	; 0x410
   21cea:	68c3      	ldr	r3, [r0, #12]
   21cec:	b2db      	uxtb	r3, r3
   21cee:	2b11      	cmp	r3, #17
   21cf0:	d919      	bls.n	21d26 <am_hal_ble_power_control+0x132>
   21cf2:	f890 3198 	ldrb.w	r3, [r0, #408]	; 0x198
   21cf6:	f362 1345 	bfi	r3, r2, #5, #1
   21cfa:	f880 3198 	strb.w	r3, [r0, #408]	; 0x198
   21cfe:	4b16      	ldr	r3, [pc, #88]	; (21d58 <am_hal_ble_power_control+0x164>)
   21d00:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   21d04:	f36f 0200 	bfc	r2, #0, #1
   21d08:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   21d0c:	200e      	movs	r0, #14
   21d0e:	f001 fb69 	bl	233e4 <am_hal_pwrctrl_periph_disable>
   21d12:	4604      	mov	r4, r0
   21d14:	b178      	cbz	r0, 21d36 <am_hal_ble_power_control+0x142>
   21d16:	4c13      	ldr	r4, [pc, #76]	; (21d64 <am_hal_ble_power_control+0x170>)
   21d18:	e77e      	b.n	21c18 <am_hal_ble_power_control+0x24>
   21d1a:	4c13      	ldr	r4, [pc, #76]	; (21d68 <am_hal_ble_power_control+0x174>)
   21d1c:	e77c      	b.n	21c18 <am_hal_ble_power_control+0x24>
   21d1e:	4b13      	ldr	r3, [pc, #76]	; (21d6c <am_hal_ble_power_control+0x178>)
   21d20:	2204      	movs	r2, #4
   21d22:	601a      	str	r2, [r3, #0]
   21d24:	e7b7      	b.n	21c96 <am_hal_ble_power_control+0xa2>
   21d26:	4a11      	ldr	r2, [pc, #68]	; (21d6c <am_hal_ble_power_control+0x178>)
   21d28:	6813      	ldr	r3, [r2, #0]
   21d2a:	f023 0304 	bic.w	r3, r3, #4
   21d2e:	6013      	str	r3, [r2, #0]
   21d30:	e7e5      	b.n	21cfe <am_hal_ble_power_control+0x10a>
   21d32:	4c0f      	ldr	r4, [pc, #60]	; (21d70 <am_hal_ble_power_control+0x17c>)
   21d34:	e770      	b.n	21c18 <am_hal_ble_power_control+0x24>
   21d36:	f44f 60c8 	mov.w	r0, #1600	; 0x640
   21d3a:	f001 f8bb 	bl	22eb4 <am_hal_flash_delay>
   21d3e:	e76b      	b.n	21c18 <am_hal_ble_power_control+0x24>
   21d40:	40020000 	.word	0x40020000
   21d44:	0fc0400f 	.word	0x0fc0400f
   21d48:	01775230 	.word	0x01775230
   21d4c:	40021000 	.word	0x40021000
   21d50:	000186a0 	.word	0x000186a0
   21d54:	08000007 	.word	0x08000007
   21d58:	5000c000 	.word	0x5000c000
   21d5c:	00013880 	.word	0x00013880
   21d60:	000f4240 	.word	0x000f4240
   21d64:	08000006 	.word	0x08000006
   21d68:	08000005 	.word	0x08000005
   21d6c:	40020198 	.word	0x40020198
   21d70:	08000008 	.word	0x08000008

00021d74 <am_hal_ble_patch_copy_end_apply>:
   21d74:	b128      	cbz	r0, 21d82 <am_hal_ble_patch_copy_end_apply+0xe>
   21d76:	6803      	ldr	r3, [r0, #0]
   21d78:	4a46      	ldr	r2, [pc, #280]	; (21e94 <am_hal_ble_patch_copy_end_apply+0x120>)
   21d7a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   21d7e:	4293      	cmp	r3, r2
   21d80:	d001      	beq.n	21d86 <am_hal_ble_patch_copy_end_apply+0x12>
   21d82:	2002      	movs	r0, #2
   21d84:	4770      	bx	lr
   21d86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21d8a:	b092      	sub	sp, #72	; 0x48
   21d8c:	2501      	movs	r5, #1
   21d8e:	2400      	movs	r4, #0
   21d90:	4606      	mov	r6, r0
   21d92:	21f1      	movs	r1, #241	; 0xf1
   21d94:	20ee      	movs	r0, #238	; 0xee
   21d96:	2202      	movs	r2, #2
   21d98:	f88d 5000 	strb.w	r5, [sp]
   21d9c:	f88d 0001 	strb.w	r0, [sp, #1]
   21da0:	f88d 1002 	strb.w	r1, [sp, #2]
   21da4:	f88d 2003 	strb.w	r2, [sp, #3]
   21da8:	f88d 4004 	strb.w	r4, [sp, #4]
   21dac:	f88d 4005 	strb.w	r4, [sp, #5]
   21db0:	f241 3588 	movw	r5, #5000	; 0x1388
   21db4:	f04f 0806 	mov.w	r8, #6
   21db8:	461f      	mov	r7, r3
   21dba:	2201      	movs	r2, #1
   21dbc:	42bb      	cmp	r3, r7
   21dbe:	f8cd d028 	str.w	sp, [sp, #40]	; 0x28
   21dc2:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
   21dc6:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
   21dca:	f88d 402e 	strb.w	r4, [sp, #46]	; 0x2e
   21dce:	f88d 402f 	strb.w	r4, [sp, #47]	; 0x2f
   21dd2:	f8ad 8030 	strh.w	r8, [sp, #48]	; 0x30
   21dd6:	f88d 4033 	strb.w	r4, [sp, #51]	; 0x33
   21dda:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
   21dde:	940e      	str	r4, [sp, #56]	; 0x38
   21de0:	940f      	str	r4, [sp, #60]	; 0x3c
   21de2:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
   21de6:	d029      	beq.n	21e3c <am_hal_ble_patch_copy_end_apply+0xc8>
   21de8:	4b2b      	ldr	r3, [pc, #172]	; (21e98 <am_hal_ble_patch_copy_end_apply+0x124>)
   21dea:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   21dee:	0612      	lsls	r2, r2, #24
   21df0:	d40c      	bmi.n	21e0c <am_hal_ble_patch_copy_end_apply+0x98>
   21df2:	4d2a      	ldr	r5, [pc, #168]	; (21e9c <am_hal_ble_patch_copy_end_apply+0x128>)
   21df4:	461c      	mov	r4, r3
   21df6:	2010      	movs	r0, #16
   21df8:	f001 f85c 	bl	22eb4 <am_hal_flash_delay>
   21dfc:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   21e00:	0619      	lsls	r1, r3, #24
   21e02:	d403      	bmi.n	21e0c <am_hal_ble_patch_copy_end_apply+0x98>
   21e04:	3d01      	subs	r5, #1
   21e06:	d1f6      	bne.n	21df6 <am_hal_ble_patch_copy_end_apply+0x82>
   21e08:	4825      	ldr	r0, [pc, #148]	; (21ea0 <am_hal_ble_patch_copy_end_apply+0x12c>)
   21e0a:	e014      	b.n	21e36 <am_hal_ble_patch_copy_end_apply+0xc2>
   21e0c:	6832      	ldr	r2, [r6, #0]
   21e0e:	4921      	ldr	r1, [pc, #132]	; (21e94 <am_hal_ble_patch_copy_end_apply+0x120>)
   21e10:	f8cd d010 	str.w	sp, [sp, #16]
   21e14:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   21e18:	2300      	movs	r3, #0
   21e1a:	2402      	movs	r4, #2
   21e1c:	2005      	movs	r0, #5
   21e1e:	428a      	cmp	r2, r1
   21e20:	9306      	str	r3, [sp, #24]
   21e22:	9305      	str	r3, [sp, #20]
   21e24:	9307      	str	r3, [sp, #28]
   21e26:	9308      	str	r3, [sp, #32]
   21e28:	9309      	str	r3, [sp, #36]	; 0x24
   21e2a:	f88d 401a 	strb.w	r4, [sp, #26]
   21e2e:	f8ad 0018 	strh.w	r0, [sp, #24]
   21e32:	d00f      	beq.n	21e54 <am_hal_ble_patch_copy_end_apply+0xe0>
   21e34:	2002      	movs	r0, #2
   21e36:	b012      	add	sp, #72	; 0x48
   21e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21e3c:	a90a      	add	r1, sp, #40	; 0x28
   21e3e:	4630      	mov	r0, r6
   21e40:	f7ff fb62 	bl	21508 <am_hal_ble_blocking_transfer.part.7>
   21e44:	2800      	cmp	r0, #0
   21e46:	d0cf      	beq.n	21de8 <am_hal_ble_patch_copy_end_apply+0x74>
   21e48:	3d01      	subs	r5, #1
   21e4a:	d0f4      	beq.n	21e36 <am_hal_ble_patch_copy_end_apply+0xc2>
   21e4c:	6833      	ldr	r3, [r6, #0]
   21e4e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   21e52:	e7b2      	b.n	21dba <am_hal_ble_patch_copy_end_apply+0x46>
   21e54:	a904      	add	r1, sp, #16
   21e56:	4630      	mov	r0, r6
   21e58:	f7ff fb56 	bl	21508 <am_hal_ble_blocking_transfer.part.7>
   21e5c:	2800      	cmp	r0, #0
   21e5e:	d1ea      	bne.n	21e36 <am_hal_ble_patch_copy_end_apply+0xc2>
   21e60:	f89d 3000 	ldrb.w	r3, [sp]
   21e64:	2b04      	cmp	r3, #4
   21e66:	f04f 02f1 	mov.w	r2, #241	; 0xf1
   21e6a:	f04f 0001 	mov.w	r0, #1
   21e6e:	d1e2      	bne.n	21e36 <am_hal_ble_patch_copy_end_apply+0xc2>
   21e70:	f89d 3001 	ldrb.w	r3, [sp, #1]
   21e74:	2bee      	cmp	r3, #238	; 0xee
   21e76:	d1de      	bne.n	21e36 <am_hal_ble_patch_copy_end_apply+0xc2>
   21e78:	f89d 3002 	ldrb.w	r3, [sp, #2]
   21e7c:	429a      	cmp	r2, r3
   21e7e:	d1da      	bne.n	21e36 <am_hal_ble_patch_copy_end_apply+0xc2>
   21e80:	f89d 3003 	ldrb.w	r3, [sp, #3]
   21e84:	4283      	cmp	r3, r0
   21e86:	d1d6      	bne.n	21e36 <am_hal_ble_patch_copy_end_apply+0xc2>
   21e88:	f89d 0004 	ldrb.w	r0, [sp, #4]
   21e8c:	3000      	adds	r0, #0
   21e8e:	bf18      	it	ne
   21e90:	2001      	movne	r0, #1
   21e92:	e7d0      	b.n	21e36 <am_hal_ble_patch_copy_end_apply+0xc2>
   21e94:	01775230 	.word	0x01775230
   21e98:	5000c000 	.word	0x5000c000
   21e9c:	000f4240 	.word	0x000f4240
   21ea0:	08000004 	.word	0x08000004

00021ea4 <am_hal_ble_blocking_hci_write>:
   21ea4:	b530      	push	{r4, r5, lr}
   21ea6:	b087      	sub	sp, #28
   21ea8:	2400      	movs	r4, #0
   21eaa:	b29b      	uxth	r3, r3
   21eac:	2501      	movs	r5, #1
   21eae:	f88d 1004 	strb.w	r1, [sp, #4]
   21eb2:	f8ad 3008 	strh.w	r3, [sp, #8]
   21eb6:	9200      	str	r2, [sp, #0]
   21eb8:	f88d 4005 	strb.w	r4, [sp, #5]
   21ebc:	f88d 4006 	strb.w	r4, [sp, #6]
   21ec0:	f88d 4007 	strb.w	r4, [sp, #7]
   21ec4:	f88d 400b 	strb.w	r4, [sp, #11]
   21ec8:	f88d 400c 	strb.w	r4, [sp, #12]
   21ecc:	9404      	str	r4, [sp, #16]
   21ece:	9405      	str	r4, [sp, #20]
   21ed0:	f88d 500a 	strb.w	r5, [sp, #10]
   21ed4:	b128      	cbz	r0, 21ee2 <am_hal_ble_blocking_hci_write+0x3e>
   21ed6:	6802      	ldr	r2, [r0, #0]
   21ed8:	4c09      	ldr	r4, [pc, #36]	; (21f00 <am_hal_ble_blocking_hci_write+0x5c>)
   21eda:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   21ede:	42a2      	cmp	r2, r4
   21ee0:	d002      	beq.n	21ee8 <am_hal_ble_blocking_hci_write+0x44>
   21ee2:	2000      	movs	r0, #0
   21ee4:	b007      	add	sp, #28
   21ee6:	bd30      	pop	{r4, r5, pc}
   21ee8:	b939      	cbnz	r1, 21efa <am_hal_ble_blocking_hci_write+0x56>
   21eea:	2b00      	cmp	r3, #0
   21eec:	d0f9      	beq.n	21ee2 <am_hal_ble_blocking_hci_write+0x3e>
   21eee:	4669      	mov	r1, sp
   21ef0:	f7ff fb0a 	bl	21508 <am_hal_ble_blocking_transfer.part.7>
   21ef4:	2800      	cmp	r0, #0
   21ef6:	d0f4      	beq.n	21ee2 <am_hal_ble_blocking_hci_write+0x3e>
   21ef8:	e7f4      	b.n	21ee4 <am_hal_ble_blocking_hci_write+0x40>
   21efa:	f88d 5007 	strb.w	r5, [sp, #7]
   21efe:	e7f4      	b.n	21eea <am_hal_ble_blocking_hci_write+0x46>
   21f00:	01775230 	.word	0x01775230

00021f04 <am_hal_ble_blocking_hci_read>:
   21f04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21f08:	b089      	sub	sp, #36	; 0x24
   21f0a:	2300      	movs	r3, #0
   21f0c:	2502      	movs	r5, #2
   21f0e:	ac01      	add	r4, sp, #4
   21f10:	9402      	str	r4, [sp, #8]
   21f12:	f88d 300c 	strb.w	r3, [sp, #12]
   21f16:	f88d 300d 	strb.w	r3, [sp, #13]
   21f1a:	f88d 300e 	strb.w	r3, [sp, #14]
   21f1e:	f88d 300f 	strb.w	r3, [sp, #15]
   21f22:	f88d 3013 	strb.w	r3, [sp, #19]
   21f26:	f88d 3014 	strb.w	r3, [sp, #20]
   21f2a:	9306      	str	r3, [sp, #24]
   21f2c:	9307      	str	r3, [sp, #28]
   21f2e:	f8ad 5010 	strh.w	r5, [sp, #16]
   21f32:	f88d 5012 	strb.w	r5, [sp, #18]
   21f36:	b128      	cbz	r0, 21f44 <am_hal_ble_blocking_hci_read+0x40>
   21f38:	6804      	ldr	r4, [r0, #0]
   21f3a:	4e1f      	ldr	r6, [pc, #124]	; (21fb8 <am_hal_ble_blocking_hci_read+0xb4>)
   21f3c:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
   21f40:	42b4      	cmp	r4, r6
   21f42:	d003      	beq.n	21f4c <am_hal_ble_blocking_hci_read+0x48>
   21f44:	2000      	movs	r0, #0
   21f46:	b009      	add	sp, #36	; 0x24
   21f48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   21f4c:	460f      	mov	r7, r1
   21f4e:	491b      	ldr	r1, [pc, #108]	; (21fbc <am_hal_ble_blocking_hci_read+0xb8>)
   21f50:	f8d1 630c 	ldr.w	r6, [r1, #780]	; 0x30c
   21f54:	f3c6 16c0 	ubfx	r6, r6, #7, #1
   21f58:	4681      	mov	r9, r0
   21f5a:	4690      	mov	r8, r2
   21f5c:	b92e      	cbnz	r6, 21f6a <am_hal_ble_blocking_hci_read+0x66>
   21f5e:	f1b8 0f00 	cmp.w	r8, #0
   21f62:	d0ef      	beq.n	21f44 <am_hal_ble_blocking_hci_read+0x40>
   21f64:	f8c8 6000 	str.w	r6, [r8]
   21f68:	e7ec      	b.n	21f44 <am_hal_ble_blocking_hci_read+0x40>
   21f6a:	a902      	add	r1, sp, #8
   21f6c:	f7ff facc 	bl	21508 <am_hal_ble_blocking_transfer.part.7>
   21f70:	2800      	cmp	r0, #0
   21f72:	d1e8      	bne.n	21f46 <am_hal_ble_blocking_hci_read+0x42>
   21f74:	f89d 0005 	ldrb.w	r0, [sp, #5]
   21f78:	f89d 1004 	ldrb.w	r1, [sp, #4]
   21f7c:	9702      	str	r7, [sp, #8]
   21f7e:	eb01 2100 	add.w	r1, r1, r0, lsl #8
   21f82:	b289      	uxth	r1, r1
   21f84:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   21f88:	f8ad 1010 	strh.w	r1, [sp, #16]
   21f8c:	d901      	bls.n	21f92 <am_hal_ble_blocking_hci_read+0x8e>
   21f8e:	2005      	movs	r0, #5
   21f90:	e7d9      	b.n	21f46 <am_hal_ble_blocking_hci_read+0x42>
   21f92:	f8d9 0000 	ldr.w	r0, [r9]
   21f96:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
   21f9a:	42a0      	cmp	r0, r4
   21f9c:	d001      	beq.n	21fa2 <am_hal_ble_blocking_hci_read+0x9e>
   21f9e:	4628      	mov	r0, r5
   21fa0:	e7d1      	b.n	21f46 <am_hal_ble_blocking_hci_read+0x42>
   21fa2:	b129      	cbz	r1, 21fb0 <am_hal_ble_blocking_hci_read+0xac>
   21fa4:	a902      	add	r1, sp, #8
   21fa6:	4648      	mov	r0, r9
   21fa8:	f7ff faae 	bl	21508 <am_hal_ble_blocking_transfer.part.7>
   21fac:	2800      	cmp	r0, #0
   21fae:	d1ca      	bne.n	21f46 <am_hal_ble_blocking_hci_read+0x42>
   21fb0:	f8bd 6010 	ldrh.w	r6, [sp, #16]
   21fb4:	e7d3      	b.n	21f5e <am_hal_ble_blocking_hci_read+0x5a>
   21fb6:	bf00      	nop
   21fb8:	01775230 	.word	0x01775230
   21fbc:	5000c000 	.word	0x5000c000

00021fc0 <am_hal_ble_blocking_transfer>:
   21fc0:	b128      	cbz	r0, 21fce <am_hal_ble_blocking_transfer+0xe>
   21fc2:	6803      	ldr	r3, [r0, #0]
   21fc4:	4a08      	ldr	r2, [pc, #32]	; (21fe8 <am_hal_ble_blocking_transfer+0x28>)
   21fc6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   21fca:	4293      	cmp	r3, r2
   21fcc:	d001      	beq.n	21fd2 <am_hal_ble_blocking_transfer+0x12>
   21fce:	2002      	movs	r0, #2
   21fd0:	4770      	bx	lr
   21fd2:	890b      	ldrh	r3, [r1, #8]
   21fd4:	b410      	push	{r4}
   21fd6:	b11b      	cbz	r3, 21fe0 <am_hal_ble_blocking_transfer+0x20>
   21fd8:	f85d 4b04 	ldr.w	r4, [sp], #4
   21fdc:	f7ff ba94 	b.w	21508 <am_hal_ble_blocking_transfer.part.7>
   21fe0:	4618      	mov	r0, r3
   21fe2:	f85d 4b04 	ldr.w	r4, [sp], #4
   21fe6:	4770      	bx	lr
   21fe8:	01775230 	.word	0x01775230

00021fec <am_hal_ble_patch_apply>:
   21fec:	b128      	cbz	r0, 21ffa <am_hal_ble_patch_apply+0xe>
   21fee:	6803      	ldr	r3, [r0, #0]
   21ff0:	4aae      	ldr	r2, [pc, #696]	; (222ac <am_hal_ble_patch_apply+0x2c0>)
   21ff2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   21ff6:	4293      	cmp	r3, r2
   21ff8:	d002      	beq.n	22000 <am_hal_ble_patch_apply+0x14>
   21ffa:	2302      	movs	r3, #2
   21ffc:	4618      	mov	r0, r3
   21ffe:	4770      	bx	lr
   22000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22004:	684a      	ldr	r2, [r1, #4]
   22006:	680d      	ldr	r5, [r1, #0]
   22008:	b095      	sub	sp, #84	; 0x54
   2200a:	2701      	movs	r7, #1
   2200c:	4604      	mov	r4, r0
   2200e:	460e      	mov	r6, r1
   22010:	f88d 200c 	strb.w	r2, [sp, #12]
   22014:	20f1      	movs	r0, #241	; 0xf1
   22016:	0a12      	lsrs	r2, r2, #8
   22018:	2102      	movs	r1, #2
   2201a:	f88d 7008 	strb.w	r7, [sp, #8]
   2201e:	f88d 5009 	strb.w	r5, [sp, #9]
   22022:	f88d 200d 	strb.w	r2, [sp, #13]
   22026:	f88d 000a 	strb.w	r0, [sp, #10]
   2202a:	f88d 100b 	strb.w	r1, [sp, #11]
   2202e:	f241 3788 	movw	r7, #5000	; 0x1388
   22032:	2500      	movs	r5, #0
   22034:	f04f 0906 	mov.w	r9, #6
   22038:	4698      	mov	r8, r3
   2203a:	2201      	movs	r2, #1
   2203c:	a902      	add	r1, sp, #8
   2203e:	4543      	cmp	r3, r8
   22040:	910c      	str	r1, [sp, #48]	; 0x30
   22042:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
   22046:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
   2204a:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
   2204e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   22052:	f8ad 9038 	strh.w	r9, [sp, #56]	; 0x38
   22056:	f88d 503b 	strb.w	r5, [sp, #59]	; 0x3b
   2205a:	f88d 503c 	strb.w	r5, [sp, #60]	; 0x3c
   2205e:	9510      	str	r5, [sp, #64]	; 0x40
   22060:	9511      	str	r5, [sp, #68]	; 0x44
   22062:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
   22066:	d02b      	beq.n	220c0 <am_hal_ble_patch_apply+0xd4>
   22068:	4b91      	ldr	r3, [pc, #580]	; (222b0 <am_hal_ble_patch_apply+0x2c4>)
   2206a:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   2206e:	0612      	lsls	r2, r2, #24
   22070:	d40c      	bmi.n	2208c <am_hal_ble_patch_apply+0xa0>
   22072:	4f90      	ldr	r7, [pc, #576]	; (222b4 <am_hal_ble_patch_apply+0x2c8>)
   22074:	461d      	mov	r5, r3
   22076:	2010      	movs	r0, #16
   22078:	f000 ff1c 	bl	22eb4 <am_hal_flash_delay>
   2207c:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   22080:	061b      	lsls	r3, r3, #24
   22082:	d403      	bmi.n	2208c <am_hal_ble_patch_apply+0xa0>
   22084:	3f01      	subs	r7, #1
   22086:	d1f6      	bne.n	22076 <am_hal_ble_patch_apply+0x8a>
   22088:	4b8b      	ldr	r3, [pc, #556]	; (222b8 <am_hal_ble_patch_apply+0x2cc>)
   2208a:	e015      	b.n	220b8 <am_hal_ble_patch_apply+0xcc>
   2208c:	6825      	ldr	r5, [r4, #0]
   2208e:	4a87      	ldr	r2, [pc, #540]	; (222ac <am_hal_ble_patch_apply+0x2c0>)
   22090:	ab02      	add	r3, sp, #8
   22092:	9306      	str	r3, [sp, #24]
   22094:	f025 457e 	bic.w	r5, r5, #4261412864	; 0xfe000000
   22098:	2300      	movs	r3, #0
   2209a:	9308      	str	r3, [sp, #32]
   2209c:	2102      	movs	r1, #2
   2209e:	9307      	str	r3, [sp, #28]
   220a0:	9309      	str	r3, [sp, #36]	; 0x24
   220a2:	930a      	str	r3, [sp, #40]	; 0x28
   220a4:	930b      	str	r3, [sp, #44]	; 0x2c
   220a6:	4295      	cmp	r5, r2
   220a8:	f04f 0305 	mov.w	r3, #5
   220ac:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   220b0:	f8ad 3020 	strh.w	r3, [sp, #32]
   220b4:	d011      	beq.n	220da <am_hal_ble_patch_apply+0xee>
   220b6:	2302      	movs	r3, #2
   220b8:	4618      	mov	r0, r3
   220ba:	b015      	add	sp, #84	; 0x54
   220bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   220c0:	a90c      	add	r1, sp, #48	; 0x30
   220c2:	4620      	mov	r0, r4
   220c4:	f7ff fa20 	bl	21508 <am_hal_ble_blocking_transfer.part.7>
   220c8:	4603      	mov	r3, r0
   220ca:	2800      	cmp	r0, #0
   220cc:	d0cc      	beq.n	22068 <am_hal_ble_patch_apply+0x7c>
   220ce:	3f01      	subs	r7, #1
   220d0:	d0f2      	beq.n	220b8 <am_hal_ble_patch_apply+0xcc>
   220d2:	6823      	ldr	r3, [r4, #0]
   220d4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   220d8:	e7af      	b.n	2203a <am_hal_ble_patch_apply+0x4e>
   220da:	a906      	add	r1, sp, #24
   220dc:	4620      	mov	r0, r4
   220de:	f7ff fa13 	bl	21508 <am_hal_ble_blocking_transfer.part.7>
   220e2:	4603      	mov	r3, r0
   220e4:	2800      	cmp	r0, #0
   220e6:	d1e7      	bne.n	220b8 <am_hal_ble_patch_apply+0xcc>
   220e8:	2304      	movs	r3, #4
   220ea:	f89d 1008 	ldrb.w	r1, [sp, #8]
   220ee:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
   220f2:	23f1      	movs	r3, #241	; 0xf1
   220f4:	7832      	ldrb	r2, [r6, #0]
   220f6:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
   220fa:	2904      	cmp	r1, #4
   220fc:	f04f 0301 	mov.w	r3, #1
   22100:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
   22104:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
   22108:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   2210c:	f040 811a 	bne.w	22344 <am_hal_ble_patch_apply+0x358>
   22110:	f89d 1009 	ldrb.w	r1, [sp, #9]
   22114:	b2d3      	uxtb	r3, r2
   22116:	4299      	cmp	r1, r3
   22118:	f040 8114 	bne.w	22344 <am_hal_ble_patch_apply+0x358>
   2211c:	f89d 300a 	ldrb.w	r3, [sp, #10]
   22120:	2bf1      	cmp	r3, #241	; 0xf1
   22122:	f040 810f 	bne.w	22344 <am_hal_ble_patch_apply+0x358>
   22126:	f89d 300b 	ldrb.w	r3, [sp, #11]
   2212a:	2b01      	cmp	r3, #1
   2212c:	f040 810a 	bne.w	22344 <am_hal_ble_patch_apply+0x358>
   22130:	f89d 300c 	ldrb.w	r3, [sp, #12]
   22134:	2b00      	cmp	r3, #0
   22136:	f040 8105 	bne.w	22344 <am_hal_ble_patch_apply+0x358>
   2213a:	f8d6 a004 	ldr.w	sl, [r6, #4]
   2213e:	f1ba 0f00 	cmp.w	sl, #0
   22142:	f000 8091 	beq.w	22268 <am_hal_ble_patch_apply+0x27c>
   22146:	f8df 9178 	ldr.w	r9, [pc, #376]	; 222c0 <am_hal_ble_patch_apply+0x2d4>
   2214a:	4f59      	ldr	r7, [pc, #356]	; (222b0 <am_hal_ble_patch_apply+0x2c4>)
   2214c:	9501      	str	r5, [sp, #4]
   2214e:	469b      	mov	fp, r3
   22150:	2201      	movs	r2, #1
   22152:	f889 2000 	strb.w	r2, [r9]
   22156:	6833      	ldr	r3, [r6, #0]
   22158:	f889 3001 	strb.w	r3, [r9, #1]
   2215c:	f1ba 0f80 	cmp.w	sl, #128	; 0x80
   22160:	46d0      	mov	r8, sl
   22162:	f04f 03f2 	mov.w	r3, #242	; 0xf2
   22166:	bf28      	it	cs
   22168:	f04f 0880 	movcs.w	r8, #128	; 0x80
   2216c:	f889 3002 	strb.w	r3, [r9, #2]
   22170:	f889 8003 	strb.w	r8, [r9, #3]
   22174:	68f1      	ldr	r1, [r6, #12]
   22176:	4851      	ldr	r0, [pc, #324]	; (222bc <am_hal_ble_patch_apply+0x2d0>)
   22178:	f8cd 9018 	str.w	r9, [sp, #24]
   2217c:	2300      	movs	r3, #0
   2217e:	f02b 0503 	bic.w	r5, fp, #3
   22182:	9308      	str	r3, [sp, #32]
   22184:	4429      	add	r1, r5
   22186:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
   2218a:	f108 0504 	add.w	r5, r8, #4
   2218e:	4642      	mov	r2, r8
   22190:	9307      	str	r3, [sp, #28]
   22192:	9309      	str	r3, [sp, #36]	; 0x24
   22194:	930a      	str	r3, [sp, #40]	; 0x28
   22196:	930b      	str	r3, [sp, #44]	; 0x2c
   22198:	f8ad 5020 	strh.w	r5, [sp, #32]
   2219c:	f7e9 ffb0 	bl	c100 <memcpy>
   221a0:	6823      	ldr	r3, [r4, #0]
   221a2:	9a01      	ldr	r2, [sp, #4]
   221a4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   221a8:	4293      	cmp	r3, r2
   221aa:	d184      	bne.n	220b6 <am_hal_ble_patch_apply+0xca>
   221ac:	a906      	add	r1, sp, #24
   221ae:	4620      	mov	r0, r4
   221b0:	f7ff f9aa 	bl	21508 <am_hal_ble_blocking_transfer.part.7>
   221b4:	4603      	mov	r3, r0
   221b6:	2800      	cmp	r0, #0
   221b8:	f47f af7e 	bne.w	220b8 <am_hal_ble_patch_apply+0xcc>
   221bc:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
   221c0:	061d      	lsls	r5, r3, #24
   221c2:	d40b      	bmi.n	221dc <am_hal_ble_patch_apply+0x1f0>
   221c4:	4d3b      	ldr	r5, [pc, #236]	; (222b4 <am_hal_ble_patch_apply+0x2c8>)
   221c6:	e002      	b.n	221ce <am_hal_ble_patch_apply+0x1e2>
   221c8:	3d01      	subs	r5, #1
   221ca:	f43f af5d 	beq.w	22088 <am_hal_ble_patch_apply+0x9c>
   221ce:	2010      	movs	r0, #16
   221d0:	f000 fe70 	bl	22eb4 <am_hal_flash_delay>
   221d4:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
   221d8:	0618      	lsls	r0, r3, #24
   221da:	d5f5      	bpl.n	221c8 <am_hal_ble_patch_apply+0x1dc>
   221dc:	ab02      	add	r3, sp, #8
   221de:	9306      	str	r3, [sp, #24]
   221e0:	2300      	movs	r3, #0
   221e2:	9308      	str	r3, [sp, #32]
   221e4:	6822      	ldr	r2, [r4, #0]
   221e6:	9307      	str	r3, [sp, #28]
   221e8:	9309      	str	r3, [sp, #36]	; 0x24
   221ea:	930a      	str	r3, [sp, #40]	; 0x28
   221ec:	930b      	str	r3, [sp, #44]	; 0x2c
   221ee:	2305      	movs	r3, #5
   221f0:	f8ad 3020 	strh.w	r3, [sp, #32]
   221f4:	9b01      	ldr	r3, [sp, #4]
   221f6:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   221fa:	2102      	movs	r1, #2
   221fc:	429a      	cmp	r2, r3
   221fe:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   22202:	f47f af58 	bne.w	220b6 <am_hal_ble_patch_apply+0xca>
   22206:	a906      	add	r1, sp, #24
   22208:	4620      	mov	r0, r4
   2220a:	f7ff f97d 	bl	21508 <am_hal_ble_blocking_transfer.part.7>
   2220e:	4603      	mov	r3, r0
   22210:	2800      	cmp	r0, #0
   22212:	f47f af51 	bne.w	220b8 <am_hal_ble_patch_apply+0xcc>
   22216:	2304      	movs	r3, #4
   22218:	f89d 1008 	ldrb.w	r1, [sp, #8]
   2221c:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
   22220:	23f2      	movs	r3, #242	; 0xf2
   22222:	7832      	ldrb	r2, [r6, #0]
   22224:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
   22228:	2904      	cmp	r1, #4
   2222a:	f04f 0301 	mov.w	r3, #1
   2222e:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
   22232:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
   22236:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   2223a:	f040 8083 	bne.w	22344 <am_hal_ble_patch_apply+0x358>
   2223e:	f89d 3009 	ldrb.w	r3, [sp, #9]
   22242:	4293      	cmp	r3, r2
   22244:	d17e      	bne.n	22344 <am_hal_ble_patch_apply+0x358>
   22246:	f89d 300a 	ldrb.w	r3, [sp, #10]
   2224a:	2bf2      	cmp	r3, #242	; 0xf2
   2224c:	d17a      	bne.n	22344 <am_hal_ble_patch_apply+0x358>
   2224e:	f89d 300b 	ldrb.w	r3, [sp, #11]
   22252:	2b01      	cmp	r3, #1
   22254:	d176      	bne.n	22344 <am_hal_ble_patch_apply+0x358>
   22256:	f89d 300c 	ldrb.w	r3, [sp, #12]
   2225a:	2b00      	cmp	r3, #0
   2225c:	d172      	bne.n	22344 <am_hal_ble_patch_apply+0x358>
   2225e:	ebba 0a08 	subs.w	sl, sl, r8
   22262:	44c3      	add	fp, r8
   22264:	f47f af74 	bne.w	22150 <am_hal_ble_patch_apply+0x164>
   22268:	68b3      	ldr	r3, [r6, #8]
   2226a:	f88d 2009 	strb.w	r2, [sp, #9]
   2226e:	2101      	movs	r1, #1
   22270:	0a1a      	lsrs	r2, r3, #8
   22272:	20f3      	movs	r0, #243	; 0xf3
   22274:	f88d 300c 	strb.w	r3, [sp, #12]
   22278:	f88d 200d 	strb.w	r2, [sp, #13]
   2227c:	2306      	movs	r3, #6
   2227e:	f88d 1008 	strb.w	r1, [sp, #8]
   22282:	f88d 000a 	strb.w	r0, [sp, #10]
   22286:	2502      	movs	r5, #2
   22288:	aa02      	add	r2, sp, #8
   2228a:	2100      	movs	r1, #0
   2228c:	4620      	mov	r0, r4
   2228e:	f88d 500b 	strb.w	r5, [sp, #11]
   22292:	f7ff fe07 	bl	21ea4 <am_hal_ble_blocking_hci_write>
   22296:	4603      	mov	r3, r0
   22298:	2800      	cmp	r0, #0
   2229a:	d153      	bne.n	22344 <am_hal_ble_patch_apply+0x358>
   2229c:	4f04      	ldr	r7, [pc, #16]	; (222b0 <am_hal_ble_patch_apply+0x2c4>)
   2229e:	f8d7 230c 	ldr.w	r2, [r7, #780]	; 0x30c
   222a2:	0611      	lsls	r1, r2, #24
   222a4:	d41b      	bmi.n	222de <am_hal_ble_patch_apply+0x2f2>
   222a6:	4d03      	ldr	r5, [pc, #12]	; (222b4 <am_hal_ble_patch_apply+0x2c8>)
   222a8:	e00f      	b.n	222ca <am_hal_ble_patch_apply+0x2de>
   222aa:	bf00      	nop
   222ac:	01775230 	.word	0x01775230
   222b0:	5000c000 	.word	0x5000c000
   222b4:	000f4240 	.word	0x000f4240
   222b8:	08000004 	.word	0x08000004
   222bc:	1000a3f8 	.word	0x1000a3f8
   222c0:	1000a3f4 	.word	0x1000a3f4
   222c4:	3d01      	subs	r5, #1
   222c6:	f43f aedf 	beq.w	22088 <am_hal_ble_patch_apply+0x9c>
   222ca:	2010      	movs	r0, #16
   222cc:	9301      	str	r3, [sp, #4]
   222ce:	f000 fdf1 	bl	22eb4 <am_hal_flash_delay>
   222d2:	f8d7 230c 	ldr.w	r2, [r7, #780]	; 0x30c
   222d6:	9b01      	ldr	r3, [sp, #4]
   222d8:	f012 0f80 	tst.w	r2, #128	; 0x80
   222dc:	d0f2      	beq.n	222c4 <am_hal_ble_patch_apply+0x2d8>
   222de:	2200      	movs	r2, #0
   222e0:	9301      	str	r3, [sp, #4]
   222e2:	4620      	mov	r0, r4
   222e4:	ab02      	add	r3, sp, #8
   222e6:	a906      	add	r1, sp, #24
   222e8:	2502      	movs	r5, #2
   222ea:	2405      	movs	r4, #5
   222ec:	9208      	str	r2, [sp, #32]
   222ee:	9306      	str	r3, [sp, #24]
   222f0:	9207      	str	r2, [sp, #28]
   222f2:	9209      	str	r2, [sp, #36]	; 0x24
   222f4:	920a      	str	r2, [sp, #40]	; 0x28
   222f6:	920b      	str	r2, [sp, #44]	; 0x2c
   222f8:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
   222fc:	f8ad 4020 	strh.w	r4, [sp, #32]
   22300:	f7ff fe5e 	bl	21fc0 <am_hal_ble_blocking_transfer>
   22304:	9b01      	ldr	r3, [sp, #4]
   22306:	b9f8      	cbnz	r0, 22348 <am_hal_ble_patch_apply+0x35c>
   22308:	f89d 2008 	ldrb.w	r2, [sp, #8]
   2230c:	6831      	ldr	r1, [r6, #0]
   2230e:	f88d 1031 	strb.w	r1, [sp, #49]	; 0x31
   22312:	2a04      	cmp	r2, #4
   22314:	f04f 00f3 	mov.w	r0, #243	; 0xf3
   22318:	f04f 0101 	mov.w	r1, #1
   2231c:	d112      	bne.n	22344 <am_hal_ble_patch_apply+0x358>
   2231e:	f89d 4031 	ldrb.w	r4, [sp, #49]	; 0x31
   22322:	f89d 2009 	ldrb.w	r2, [sp, #9]
   22326:	4294      	cmp	r4, r2
   22328:	d10c      	bne.n	22344 <am_hal_ble_patch_apply+0x358>
   2232a:	f89d 200a 	ldrb.w	r2, [sp, #10]
   2232e:	4290      	cmp	r0, r2
   22330:	d108      	bne.n	22344 <am_hal_ble_patch_apply+0x358>
   22332:	f89d 200b 	ldrb.w	r2, [sp, #11]
   22336:	4291      	cmp	r1, r2
   22338:	d104      	bne.n	22344 <am_hal_ble_patch_apply+0x358>
   2233a:	f89d 200c 	ldrb.w	r2, [sp, #12]
   2233e:	2a00      	cmp	r2, #0
   22340:	f43f aeba 	beq.w	220b8 <am_hal_ble_patch_apply+0xcc>
   22344:	2301      	movs	r3, #1
   22346:	e6b7      	b.n	220b8 <am_hal_ble_patch_apply+0xcc>
   22348:	4603      	mov	r3, r0
   2234a:	e6b5      	b.n	220b8 <am_hal_ble_patch_apply+0xcc>

0002234c <am_hal_ble_int_enable>:
   2234c:	b128      	cbz	r0, 2235a <am_hal_ble_int_enable+0xe>
   2234e:	6803      	ldr	r3, [r0, #0]
   22350:	4a0c      	ldr	r2, [pc, #48]	; (22384 <am_hal_ble_int_enable+0x38>)
   22352:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   22356:	4293      	cmp	r3, r2
   22358:	d001      	beq.n	2235e <am_hal_ble_int_enable+0x12>
   2235a:	2002      	movs	r0, #2
   2235c:	4770      	bx	lr
   2235e:	b510      	push	{r4, lr}
   22360:	b082      	sub	sp, #8
   22362:	460c      	mov	r4, r1
   22364:	f000 ff76 	bl	23254 <am_hal_interrupt_master_disable>
   22368:	4b07      	ldr	r3, [pc, #28]	; (22388 <am_hal_ble_int_enable+0x3c>)
   2236a:	9001      	str	r0, [sp, #4]
   2236c:	f8d3 1220 	ldr.w	r1, [r3, #544]	; 0x220
   22370:	4321      	orrs	r1, r4
   22372:	f8c3 1220 	str.w	r1, [r3, #544]	; 0x220
   22376:	9801      	ldr	r0, [sp, #4]
   22378:	f000 ff70 	bl	2325c <am_hal_interrupt_master_set>
   2237c:	2000      	movs	r0, #0
   2237e:	b002      	add	sp, #8
   22380:	bd10      	pop	{r4, pc}
   22382:	bf00      	nop
   22384:	01775230 	.word	0x01775230
   22388:	5000c000 	.word	0x5000c000

0002238c <am_hal_ble_int_status>:
   2238c:	4b05      	ldr	r3, [pc, #20]	; (223a4 <am_hal_ble_int_status+0x18>)
   2238e:	b911      	cbnz	r1, 22396 <am_hal_ble_int_status+0xa>
   22390:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
   22394:	4770      	bx	lr
   22396:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
   2239a:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
   2239e:	4018      	ands	r0, r3
   223a0:	4770      	bx	lr
   223a2:	bf00      	nop
   223a4:	5000c000 	.word	0x5000c000

000223a8 <am_hal_ble_int_clear>:
   223a8:	b128      	cbz	r0, 223b6 <am_hal_ble_int_clear+0xe>
   223aa:	6803      	ldr	r3, [r0, #0]
   223ac:	4a05      	ldr	r2, [pc, #20]	; (223c4 <am_hal_ble_int_clear+0x1c>)
   223ae:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   223b2:	4293      	cmp	r3, r2
   223b4:	d001      	beq.n	223ba <am_hal_ble_int_clear+0x12>
   223b6:	2002      	movs	r0, #2
   223b8:	4770      	bx	lr
   223ba:	4b03      	ldr	r3, [pc, #12]	; (223c8 <am_hal_ble_int_clear+0x20>)
   223bc:	2000      	movs	r0, #0
   223be:	f8c3 1228 	str.w	r1, [r3, #552]	; 0x228
   223c2:	4770      	bx	lr
   223c4:	01775230 	.word	0x01775230
   223c8:	5000c000 	.word	0x5000c000

000223cc <am_hal_ble_plf_reg_read>:
   223cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   223d0:	b092      	sub	sp, #72	; 0x48
   223d2:	0a0e      	lsrs	r6, r1, #8
   223d4:	0c0d      	lsrs	r5, r1, #16
   223d6:	2300      	movs	r3, #0
   223d8:	ea4f 6e11 	mov.w	lr, r1, lsr #24
   223dc:	f88d 100c 	strb.w	r1, [sp, #12]
   223e0:	f88d 600d 	strb.w	r6, [sp, #13]
   223e4:	f88d 500e 	strb.w	r5, [sp, #14]
   223e8:	2401      	movs	r4, #1
   223ea:	2702      	movs	r7, #2
   223ec:	26fd      	movs	r6, #253	; 0xfd
   223ee:	2504      	movs	r5, #4
   223f0:	4952      	ldr	r1, [pc, #328]	; (2253c <am_hal_ble_plf_reg_read+0x170>)
   223f2:	f88d e00f 	strb.w	lr, [sp, #15]
   223f6:	f88d 7009 	strb.w	r7, [sp, #9]
   223fa:	f88d 500b 	strb.w	r5, [sp, #11]
   223fe:	930a      	str	r3, [sp, #40]	; 0x28
   22400:	930b      	str	r3, [sp, #44]	; 0x2c
   22402:	930c      	str	r3, [sp, #48]	; 0x30
   22404:	f88d 4008 	strb.w	r4, [sp, #8]
   22408:	f88d 600a 	strb.w	r6, [sp, #10]
   2240c:	f10d 0e08 	add.w	lr, sp, #8
   22410:	2508      	movs	r5, #8
   22412:	f8d1 6220 	ldr.w	r6, [r1, #544]	; 0x220
   22416:	f8c1 3220 	str.w	r3, [r1, #544]	; 0x220
   2241a:	4617      	mov	r7, r2
   2241c:	f88d 3014 	strb.w	r3, [sp, #20]
   22420:	f88d 3015 	strb.w	r3, [sp, #21]
   22424:	f88d 3016 	strb.w	r3, [sp, #22]
   22428:	f88d 3017 	strb.w	r3, [sp, #23]
   2242c:	f88d 401a 	strb.w	r4, [sp, #26]
   22430:	f88d 301b 	strb.w	r3, [sp, #27]
   22434:	f88d 301c 	strb.w	r3, [sp, #28]
   22438:	9308      	str	r3, [sp, #32]
   2243a:	9309      	str	r3, [sp, #36]	; 0x24
   2243c:	f8cd e010 	str.w	lr, [sp, #16]
   22440:	f8ad 5018 	strh.w	r5, [sp, #24]
   22444:	4680      	mov	r8, r0
   22446:	b128      	cbz	r0, 22454 <am_hal_ble_plf_reg_read+0x88>
   22448:	6803      	ldr	r3, [r0, #0]
   2244a:	4a3d      	ldr	r2, [pc, #244]	; (22540 <am_hal_ble_plf_reg_read+0x174>)
   2244c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   22450:	4293      	cmp	r3, r2
   22452:	d06e      	beq.n	22532 <am_hal_ble_plf_reg_read+0x166>
   22454:	4d39      	ldr	r5, [pc, #228]	; (2253c <am_hal_ble_plf_reg_read+0x170>)
   22456:	f8d5 3410 	ldr.w	r3, [r5, #1040]	; 0x410
   2245a:	f043 0302 	orr.w	r3, r3, #2
   2245e:	f8c5 3410 	str.w	r3, [r5, #1040]	; 0x410
   22462:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   22466:	0619      	lsls	r1, r3, #24
   22468:	d40a      	bmi.n	22480 <am_hal_ble_plf_reg_read+0xb4>
   2246a:	4c36      	ldr	r4, [pc, #216]	; (22544 <am_hal_ble_plf_reg_read+0x178>)
   2246c:	e001      	b.n	22472 <am_hal_ble_plf_reg_read+0xa6>
   2246e:	3c01      	subs	r4, #1
   22470:	d05b      	beq.n	2252a <am_hal_ble_plf_reg_read+0x15e>
   22472:	2010      	movs	r0, #16
   22474:	f000 fd1e 	bl	22eb4 <am_hal_flash_delay>
   22478:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   2247c:	061a      	lsls	r2, r3, #24
   2247e:	d5f6      	bpl.n	2246e <am_hal_ble_plf_reg_read+0xa2>
   22480:	2300      	movs	r3, #0
   22482:	2202      	movs	r2, #2
   22484:	a901      	add	r1, sp, #4
   22486:	9104      	str	r1, [sp, #16]
   22488:	f88d 3014 	strb.w	r3, [sp, #20]
   2248c:	f88d 3015 	strb.w	r3, [sp, #21]
   22490:	f88d 3016 	strb.w	r3, [sp, #22]
   22494:	f88d 3017 	strb.w	r3, [sp, #23]
   22498:	f88d 301b 	strb.w	r3, [sp, #27]
   2249c:	f88d 301c 	strb.w	r3, [sp, #28]
   224a0:	9308      	str	r3, [sp, #32]
   224a2:	9309      	str	r3, [sp, #36]	; 0x24
   224a4:	f8ad 2018 	strh.w	r2, [sp, #24]
   224a8:	f88d 201a 	strb.w	r2, [sp, #26]
   224ac:	f1b8 0f00 	cmp.w	r8, #0
   224b0:	d006      	beq.n	224c0 <am_hal_ble_plf_reg_read+0xf4>
   224b2:	f8d8 4000 	ldr.w	r4, [r8]
   224b6:	4b22      	ldr	r3, [pc, #136]	; (22540 <am_hal_ble_plf_reg_read+0x174>)
   224b8:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
   224bc:	429c      	cmp	r4, r3
   224be:	d00e      	beq.n	224de <am_hal_ble_plf_reg_read+0x112>
   224c0:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   224c4:	990c      	ldr	r1, [sp, #48]	; 0x30
   224c6:	4a1d      	ldr	r2, [pc, #116]	; (2253c <am_hal_ble_plf_reg_read+0x170>)
   224c8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   224cc:	2000      	movs	r0, #0
   224ce:	603b      	str	r3, [r7, #0]
   224d0:	f8c2 6228 	str.w	r6, [r2, #552]	; 0x228
   224d4:	f8c2 6220 	str.w	r6, [r2, #544]	; 0x220
   224d8:	b012      	add	sp, #72	; 0x48
   224da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   224de:	4b17      	ldr	r3, [pc, #92]	; (2253c <am_hal_ble_plf_reg_read+0x170>)
   224e0:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   224e4:	061b      	lsls	r3, r3, #24
   224e6:	d5eb      	bpl.n	224c0 <am_hal_ble_plf_reg_read+0xf4>
   224e8:	a904      	add	r1, sp, #16
   224ea:	4640      	mov	r0, r8
   224ec:	f7ff f80c 	bl	21508 <am_hal_ble_blocking_transfer.part.7>
   224f0:	2800      	cmp	r0, #0
   224f2:	d1e5      	bne.n	224c0 <am_hal_ble_plf_reg_read+0xf4>
   224f4:	f89d 2005 	ldrb.w	r2, [sp, #5]
   224f8:	f89d 3004 	ldrb.w	r3, [sp, #4]
   224fc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   22500:	b29b      	uxth	r3, r3
   22502:	aa0a      	add	r2, sp, #40	; 0x28
   22504:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   22508:	f8ad 3018 	strh.w	r3, [sp, #24]
   2250c:	9204      	str	r2, [sp, #16]
   2250e:	d8d7      	bhi.n	224c0 <am_hal_ble_plf_reg_read+0xf4>
   22510:	f8d8 2000 	ldr.w	r2, [r8]
   22514:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   22518:	42a2      	cmp	r2, r4
   2251a:	d1d1      	bne.n	224c0 <am_hal_ble_plf_reg_read+0xf4>
   2251c:	2b00      	cmp	r3, #0
   2251e:	d0cf      	beq.n	224c0 <am_hal_ble_plf_reg_read+0xf4>
   22520:	a904      	add	r1, sp, #16
   22522:	4640      	mov	r0, r8
   22524:	f7fe fff0 	bl	21508 <am_hal_ble_blocking_transfer.part.7>
   22528:	e7ca      	b.n	224c0 <am_hal_ble_plf_reg_read+0xf4>
   2252a:	4807      	ldr	r0, [pc, #28]	; (22548 <am_hal_ble_plf_reg_read+0x17c>)
   2252c:	b012      	add	sp, #72	; 0x48
   2252e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22532:	a904      	add	r1, sp, #16
   22534:	f7fe ffe8 	bl	21508 <am_hal_ble_blocking_transfer.part.7>
   22538:	e78c      	b.n	22454 <am_hal_ble_plf_reg_read+0x88>
   2253a:	bf00      	nop
   2253c:	5000c000 	.word	0x5000c000
   22540:	01775230 	.word	0x01775230
   22544:	0007a120 	.word	0x0007a120
   22548:	08000004 	.word	0x08000004

0002254c <am_hal_ble_plf_reg_write>:
   2254c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2254e:	b091      	sub	sp, #68	; 0x44
   22550:	0c0f      	lsrs	r7, r1, #16
   22552:	0e0e      	lsrs	r6, r1, #24
   22554:	0c14      	lsrs	r4, r2, #16
   22556:	0e13      	lsrs	r3, r2, #24
   22558:	ea4f 2e11 	mov.w	lr, r1, lsr #8
   2255c:	0a15      	lsrs	r5, r2, #8
   2255e:	f88d 2008 	strb.w	r2, [sp, #8]
   22562:	f88d 6007 	strb.w	r6, [sp, #7]
   22566:	f88d 400a 	strb.w	r4, [sp, #10]
   2256a:	f88d 300b 	strb.w	r3, [sp, #11]
   2256e:	f88d 1004 	strb.w	r1, [sp, #4]
   22572:	f88d e005 	strb.w	lr, [sp, #5]
   22576:	f88d 7006 	strb.w	r7, [sp, #6]
   2257a:	f88d 5009 	strb.w	r5, [sp, #9]
   2257e:	ab01      	add	r3, sp, #4
   22580:	4606      	mov	r6, r0
   22582:	e893 0003 	ldmia.w	r3, {r0, r1}
   22586:	ab04      	add	r3, sp, #16
   22588:	e883 0003 	stmia.w	r3, {r0, r1}
   2258c:	4a47      	ldr	r2, [pc, #284]	; (226ac <am_hal_ble_plf_reg_write+0x160>)
   2258e:	4b48      	ldr	r3, [pc, #288]	; (226b0 <am_hal_ble_plf_reg_write+0x164>)
   22590:	9303      	str	r3, [sp, #12]
   22592:	ac03      	add	r4, sp, #12
   22594:	2300      	movs	r3, #0
   22596:	200c      	movs	r0, #12
   22598:	2101      	movs	r1, #1
   2259a:	f8d2 7220 	ldr.w	r7, [r2, #544]	; 0x220
   2259e:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
   225a2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   225a6:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
   225aa:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
   225ae:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   225b2:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   225b6:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   225ba:	930e      	str	r3, [sp, #56]	; 0x38
   225bc:	930f      	str	r3, [sp, #60]	; 0x3c
   225be:	940a      	str	r4, [sp, #40]	; 0x28
   225c0:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
   225c4:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
   225c8:	b12e      	cbz	r6, 225d6 <am_hal_ble_plf_reg_write+0x8a>
   225ca:	6833      	ldr	r3, [r6, #0]
   225cc:	4a39      	ldr	r2, [pc, #228]	; (226b4 <am_hal_ble_plf_reg_write+0x168>)
   225ce:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   225d2:	4293      	cmp	r3, r2
   225d4:	d064      	beq.n	226a0 <am_hal_ble_plf_reg_write+0x154>
   225d6:	4d35      	ldr	r5, [pc, #212]	; (226ac <am_hal_ble_plf_reg_write+0x160>)
   225d8:	f8d5 3410 	ldr.w	r3, [r5, #1040]	; 0x410
   225dc:	f043 0302 	orr.w	r3, r3, #2
   225e0:	f8c5 3410 	str.w	r3, [r5, #1040]	; 0x410
   225e4:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   225e8:	0619      	lsls	r1, r3, #24
   225ea:	bf58      	it	pl
   225ec:	f24c 3450 	movwpl	r4, #50000	; 0xc350
   225f0:	d502      	bpl.n	225f8 <am_hal_ble_plf_reg_write+0xac>
   225f2:	e008      	b.n	22606 <am_hal_ble_plf_reg_write+0xba>
   225f4:	3c01      	subs	r4, #1
   225f6:	d050      	beq.n	2269a <am_hal_ble_plf_reg_write+0x14e>
   225f8:	2010      	movs	r0, #16
   225fa:	f000 fc5b 	bl	22eb4 <am_hal_flash_delay>
   225fe:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   22602:	061a      	lsls	r2, r3, #24
   22604:	d5f6      	bpl.n	225f4 <am_hal_ble_plf_reg_write+0xa8>
   22606:	2300      	movs	r3, #0
   22608:	2202      	movs	r2, #2
   2260a:	f8cd d028 	str.w	sp, [sp, #40]	; 0x28
   2260e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   22612:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
   22616:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
   2261a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   2261e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   22622:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   22626:	930e      	str	r3, [sp, #56]	; 0x38
   22628:	930f      	str	r3, [sp, #60]	; 0x3c
   2262a:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
   2262e:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
   22632:	b12e      	cbz	r6, 22640 <am_hal_ble_plf_reg_write+0xf4>
   22634:	6834      	ldr	r4, [r6, #0]
   22636:	4b1f      	ldr	r3, [pc, #124]	; (226b4 <am_hal_ble_plf_reg_write+0x168>)
   22638:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
   2263c:	429c      	cmp	r4, r3
   2263e:	d007      	beq.n	22650 <am_hal_ble_plf_reg_write+0x104>
   22640:	4b1a      	ldr	r3, [pc, #104]	; (226ac <am_hal_ble_plf_reg_write+0x160>)
   22642:	2000      	movs	r0, #0
   22644:	f8c3 7228 	str.w	r7, [r3, #552]	; 0x228
   22648:	f8c3 7220 	str.w	r7, [r3, #544]	; 0x220
   2264c:	b011      	add	sp, #68	; 0x44
   2264e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22650:	4b16      	ldr	r3, [pc, #88]	; (226ac <am_hal_ble_plf_reg_write+0x160>)
   22652:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   22656:	061b      	lsls	r3, r3, #24
   22658:	d5f2      	bpl.n	22640 <am_hal_ble_plf_reg_write+0xf4>
   2265a:	a90a      	add	r1, sp, #40	; 0x28
   2265c:	4630      	mov	r0, r6
   2265e:	f7fe ff53 	bl	21508 <am_hal_ble_blocking_transfer.part.7>
   22662:	2800      	cmp	r0, #0
   22664:	d1ec      	bne.n	22640 <am_hal_ble_plf_reg_write+0xf4>
   22666:	f89d 2001 	ldrb.w	r2, [sp, #1]
   2266a:	f89d 3000 	ldrb.w	r3, [sp]
   2266e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   22672:	b29b      	uxth	r3, r3
   22674:	aa06      	add	r2, sp, #24
   22676:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   2267a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
   2267e:	920a      	str	r2, [sp, #40]	; 0x28
   22680:	d8de      	bhi.n	22640 <am_hal_ble_plf_reg_write+0xf4>
   22682:	6832      	ldr	r2, [r6, #0]
   22684:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   22688:	42a2      	cmp	r2, r4
   2268a:	d1d9      	bne.n	22640 <am_hal_ble_plf_reg_write+0xf4>
   2268c:	2b00      	cmp	r3, #0
   2268e:	d0d7      	beq.n	22640 <am_hal_ble_plf_reg_write+0xf4>
   22690:	a90a      	add	r1, sp, #40	; 0x28
   22692:	4630      	mov	r0, r6
   22694:	f7fe ff38 	bl	21508 <am_hal_ble_blocking_transfer.part.7>
   22698:	e7d2      	b.n	22640 <am_hal_ble_plf_reg_write+0xf4>
   2269a:	4807      	ldr	r0, [pc, #28]	; (226b8 <am_hal_ble_plf_reg_write+0x16c>)
   2269c:	b011      	add	sp, #68	; 0x44
   2269e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   226a0:	a90a      	add	r1, sp, #40	; 0x28
   226a2:	4630      	mov	r0, r6
   226a4:	f7fe ff30 	bl	21508 <am_hal_ble_blocking_transfer.part.7>
   226a8:	e795      	b.n	225d6 <am_hal_ble_plf_reg_write+0x8a>
   226aa:	bf00      	nop
   226ac:	5000c000 	.word	0x5000c000
   226b0:	08fd0301 	.word	0x08fd0301
   226b4:	01775230 	.word	0x01775230
   226b8:	08000004 	.word	0x08000004

000226bc <am_hal_ble_transmitter_modex_set>:
   226bc:	b530      	push	{r4, r5, lr}
   226be:	b085      	sub	sp, #20
   226c0:	4604      	mov	r4, r0
   226c2:	2300      	movs	r3, #0
   226c4:	f001 057f 	and.w	r5, r1, #127	; 0x7f
   226c8:	466a      	mov	r2, sp
   226ca:	4927      	ldr	r1, [pc, #156]	; (22768 <am_hal_ble_transmitter_modex_set+0xac>)
   226cc:	9303      	str	r3, [sp, #12]
   226ce:	f7ff fe7d 	bl	223cc <am_hal_ble_plf_reg_read>
   226d2:	4620      	mov	r0, r4
   226d4:	f04f 32ff 	mov.w	r2, #4294967295
   226d8:	4923      	ldr	r1, [pc, #140]	; (22768 <am_hal_ble_transmitter_modex_set+0xac>)
   226da:	f7ff ff37 	bl	2254c <am_hal_ble_plf_reg_write>
   226de:	aa03      	add	r2, sp, #12
   226e0:	4620      	mov	r0, r4
   226e2:	4922      	ldr	r1, [pc, #136]	; (2276c <am_hal_ble_transmitter_modex_set+0xb0>)
   226e4:	f7ff fe72 	bl	223cc <am_hal_ble_plf_reg_read>
   226e8:	9b03      	ldr	r3, [sp, #12]
   226ea:	aa02      	add	r2, sp, #8
   226ec:	f043 0308 	orr.w	r3, r3, #8
   226f0:	4620      	mov	r0, r4
   226f2:	f04f 41a4 	mov.w	r1, #1375731712	; 0x52000000
   226f6:	9303      	str	r3, [sp, #12]
   226f8:	f7ff fe68 	bl	223cc <am_hal_ble_plf_reg_read>
   226fc:	9b02      	ldr	r3, [sp, #8]
   226fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   22702:	461a      	mov	r2, r3
   22704:	4620      	mov	r0, r4
   22706:	f04f 41a4 	mov.w	r1, #1375731712	; 0x52000000
   2270a:	9302      	str	r3, [sp, #8]
   2270c:	f7ff ff1e 	bl	2254c <am_hal_ble_plf_reg_write>
   22710:	aa01      	add	r2, sp, #4
   22712:	4620      	mov	r0, r4
   22714:	4916      	ldr	r1, [pc, #88]	; (22770 <am_hal_ble_transmitter_modex_set+0xb4>)
   22716:	f7ff fe59 	bl	223cc <am_hal_ble_plf_reg_read>
   2271a:	9a01      	ldr	r2, [sp, #4]
   2271c:	4914      	ldr	r1, [pc, #80]	; (22770 <am_hal_ble_transmitter_modex_set+0xb4>)
   2271e:	4620      	mov	r0, r4
   22720:	f042 0208 	orr.w	r2, r2, #8
   22724:	f7ff ff12 	bl	2254c <am_hal_ble_plf_reg_write>
   22728:	006a      	lsls	r2, r5, #1
   2272a:	f042 0201 	orr.w	r2, r2, #1
   2272e:	4620      	mov	r0, r4
   22730:	4910      	ldr	r1, [pc, #64]	; (22774 <am_hal_ble_transmitter_modex_set+0xb8>)
   22732:	f7ff ff0b 	bl	2254c <am_hal_ble_plf_reg_write>
   22736:	490d      	ldr	r1, [pc, #52]	; (2276c <am_hal_ble_transmitter_modex_set+0xb0>)
   22738:	9a03      	ldr	r2, [sp, #12]
   2273a:	4620      	mov	r0, r4
   2273c:	f7ff ff06 	bl	2254c <am_hal_ble_plf_reg_write>
   22740:	4b0d      	ldr	r3, [pc, #52]	; (22778 <am_hal_ble_transmitter_modex_set+0xbc>)
   22742:	68db      	ldr	r3, [r3, #12]
   22744:	b2db      	uxtb	r3, r3
   22746:	2b21      	cmp	r3, #33	; 0x21
   22748:	bf0c      	ite	eq
   2274a:	490c      	ldreq	r1, [pc, #48]	; (2277c <am_hal_ble_transmitter_modex_set+0xc0>)
   2274c:	490c      	ldrne	r1, [pc, #48]	; (22780 <am_hal_ble_transmitter_modex_set+0xc4>)
   2274e:	462a      	mov	r2, r5
   22750:	4620      	mov	r0, r4
   22752:	f7ff fefb 	bl	2254c <am_hal_ble_plf_reg_write>
   22756:	4620      	mov	r0, r4
   22758:	9a00      	ldr	r2, [sp, #0]
   2275a:	4903      	ldr	r1, [pc, #12]	; (22768 <am_hal_ble_transmitter_modex_set+0xac>)
   2275c:	f7ff fef6 	bl	2254c <am_hal_ble_plf_reg_write>
   22760:	2000      	movs	r0, #0
   22762:	b005      	add	sp, #20
   22764:	bd30      	pop	{r4, r5, pc}
   22766:	bf00      	nop
   22768:	43000004 	.word	0x43000004
   2276c:	52000008 	.word	0x52000008
   22770:	45800070 	.word	0x45800070
   22774:	52000014 	.word	0x52000014
   22778:	40020000 	.word	0x40020000
   2277c:	20006874 	.word	0x20006874
   22780:	20006070 	.word	0x20006070

00022784 <am_hal_ble_patch_complete.part.10>:
   22784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22788:	b08c      	sub	sp, #48	; 0x30
   2278a:	2300      	movs	r3, #0
   2278c:	9308      	str	r3, [sp, #32]
   2278e:	2201      	movs	r2, #1
   22790:	2506      	movs	r5, #6
   22792:	24ee      	movs	r4, #238	; 0xee
   22794:	21f1      	movs	r1, #241	; 0xf1
   22796:	9307      	str	r3, [sp, #28]
   22798:	9309      	str	r3, [sp, #36]	; 0x24
   2279a:	930a      	str	r3, [sp, #40]	; 0x28
   2279c:	930b      	str	r3, [sp, #44]	; 0x2c
   2279e:	f88d 3004 	strb.w	r3, [sp, #4]
   227a2:	f88d 3005 	strb.w	r3, [sp, #5]
   227a6:	2302      	movs	r3, #2
   227a8:	f8ad 5020 	strh.w	r5, [sp, #32]
   227ac:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
   227b0:	f88d 2000 	strb.w	r2, [sp]
   227b4:	f8cd d018 	str.w	sp, [sp, #24]
   227b8:	f88d 4001 	strb.w	r4, [sp, #1]
   227bc:	f88d 1002 	strb.w	r1, [sp, #2]
   227c0:	f88d 3003 	strb.w	r3, [sp, #3]
   227c4:	4605      	mov	r5, r0
   227c6:	2800      	cmp	r0, #0
   227c8:	f000 80e4 	beq.w	22994 <am_hal_ble_patch_complete.part.10+0x210>
   227cc:	4e7d      	ldr	r6, [pc, #500]	; (229c4 <am_hal_ble_patch_complete.part.10+0x240>)
   227ce:	f241 3488 	movw	r4, #5000	; 0x1388
   227d2:	e001      	b.n	227d8 <am_hal_ble_patch_complete.part.10+0x54>
   227d4:	3c01      	subs	r4, #1
   227d6:	d00d      	beq.n	227f4 <am_hal_ble_patch_complete.part.10+0x70>
   227d8:	682b      	ldr	r3, [r5, #0]
   227da:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   227de:	42b3      	cmp	r3, r6
   227e0:	d1f8      	bne.n	227d4 <am_hal_ble_patch_complete.part.10+0x50>
   227e2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   227e6:	a906      	add	r1, sp, #24
   227e8:	4628      	mov	r0, r5
   227ea:	b11b      	cbz	r3, 227f4 <am_hal_ble_patch_complete.part.10+0x70>
   227ec:	f7fe fe8c 	bl	21508 <am_hal_ble_blocking_transfer.part.7>
   227f0:	2800      	cmp	r0, #0
   227f2:	d1ef      	bne.n	227d4 <am_hal_ble_patch_complete.part.10+0x50>
   227f4:	4b74      	ldr	r3, [pc, #464]	; (229c8 <am_hal_ble_patch_complete.part.10+0x244>)
   227f6:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   227fa:	061b      	lsls	r3, r3, #24
   227fc:	f100 80d1 	bmi.w	229a2 <am_hal_ble_patch_complete.part.10+0x21e>
   22800:	4c72      	ldr	r4, [pc, #456]	; (229cc <am_hal_ble_patch_complete.part.10+0x248>)
   22802:	4e71      	ldr	r6, [pc, #452]	; (229c8 <am_hal_ble_patch_complete.part.10+0x244>)
   22804:	e001      	b.n	2280a <am_hal_ble_patch_complete.part.10+0x86>
   22806:	3c01      	subs	r4, #1
   22808:	d019      	beq.n	2283e <am_hal_ble_patch_complete.part.10+0xba>
   2280a:	2010      	movs	r0, #16
   2280c:	f000 fb52 	bl	22eb4 <am_hal_flash_delay>
   22810:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   22814:	061f      	lsls	r7, r3, #24
   22816:	d5f6      	bpl.n	22806 <am_hal_ble_patch_complete.part.10+0x82>
   22818:	2302      	movs	r3, #2
   2281a:	af03      	add	r7, sp, #12
   2281c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   22820:	f8ad 3020 	strh.w	r3, [sp, #32]
   22824:	9706      	str	r7, [sp, #24]
   22826:	b12d      	cbz	r5, 22834 <am_hal_ble_patch_complete.part.10+0xb0>
   22828:	682e      	ldr	r6, [r5, #0]
   2282a:	4b66      	ldr	r3, [pc, #408]	; (229c4 <am_hal_ble_patch_complete.part.10+0x240>)
   2282c:	f026 467e 	bic.w	r6, r6, #4261412864	; 0xfe000000
   22830:	429e      	cmp	r6, r3
   22832:	d009      	beq.n	22848 <am_hal_ble_patch_complete.part.10+0xc4>
   22834:	2402      	movs	r4, #2
   22836:	4620      	mov	r0, r4
   22838:	b00c      	add	sp, #48	; 0x30
   2283a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2283e:	4c64      	ldr	r4, [pc, #400]	; (229d0 <am_hal_ble_patch_complete.part.10+0x24c>)
   22840:	4620      	mov	r0, r4
   22842:	b00c      	add	sp, #48	; 0x30
   22844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22848:	a906      	add	r1, sp, #24
   2284a:	4628      	mov	r0, r5
   2284c:	f7fe fe5c 	bl	21508 <am_hal_ble_blocking_transfer.part.7>
   22850:	4604      	mov	r4, r0
   22852:	2800      	cmp	r0, #0
   22854:	d1ef      	bne.n	22836 <am_hal_ble_patch_complete.part.10+0xb2>
   22856:	f89d 100d 	ldrb.w	r1, [sp, #13]
   2285a:	29ee      	cmp	r1, #238	; 0xee
   2285c:	d01a      	beq.n	22894 <am_hal_ble_patch_complete.part.10+0x110>
   2285e:	f89d 300c 	ldrb.w	r3, [sp, #12]
   22862:	682a      	ldr	r2, [r5, #0]
   22864:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   22868:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   2286c:	b29b      	uxth	r3, r3
   2286e:	42b2      	cmp	r2, r6
   22870:	f8ad 3020 	strh.w	r3, [sp, #32]
   22874:	d1de      	bne.n	22834 <am_hal_ble_patch_complete.part.10+0xb0>
   22876:	b133      	cbz	r3, 22886 <am_hal_ble_patch_complete.part.10+0x102>
   22878:	a906      	add	r1, sp, #24
   2287a:	4628      	mov	r0, r5
   2287c:	f7fe fe44 	bl	21508 <am_hal_ble_blocking_transfer.part.7>
   22880:	b108      	cbz	r0, 22886 <am_hal_ble_patch_complete.part.10+0x102>
   22882:	4604      	mov	r4, r0
   22884:	e7d7      	b.n	22836 <am_hal_ble_patch_complete.part.10+0xb2>
   22886:	2301      	movs	r3, #1
   22888:	4620      	mov	r0, r4
   2288a:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
   2288e:	b00c      	add	sp, #48	; 0x30
   22890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22894:	682b      	ldr	r3, [r5, #0]
   22896:	f023 487e 	bic.w	r8, r3, #4261412864	; 0xfe000000
   2289a:	2203      	movs	r2, #3
   2289c:	45b0      	cmp	r8, r6
   2289e:	f8ad 2020 	strh.w	r2, [sp, #32]
   228a2:	d1c7      	bne.n	22834 <am_hal_ble_patch_complete.part.10+0xb0>
   228a4:	a906      	add	r1, sp, #24
   228a6:	4628      	mov	r0, r5
   228a8:	f7fe fe2e 	bl	21508 <am_hal_ble_blocking_transfer.part.7>
   228ac:	4604      	mov	r4, r0
   228ae:	2800      	cmp	r0, #0
   228b0:	d1c1      	bne.n	22836 <am_hal_ble_patch_complete.part.10+0xb2>
   228b2:	2301      	movs	r3, #1
   228b4:	2005      	movs	r0, #5
   228b6:	2104      	movs	r1, #4
   228b8:	22fd      	movs	r2, #253	; 0xfd
   228ba:	9408      	str	r4, [sp, #32]
   228bc:	9407      	str	r4, [sp, #28]
   228be:	9409      	str	r4, [sp, #36]	; 0x24
   228c0:	940a      	str	r4, [sp, #40]	; 0x28
   228c2:	940b      	str	r4, [sp, #44]	; 0x2c
   228c4:	f8cd d018 	str.w	sp, [sp, #24]
   228c8:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   228cc:	f88d 3000 	strb.w	r3, [sp]
   228d0:	f88d 3003 	strb.w	r3, [sp, #3]
   228d4:	f88d 3004 	strb.w	r3, [sp, #4]
   228d8:	f8ad 0020 	strh.w	r0, [sp, #32]
   228dc:	f88d 1001 	strb.w	r1, [sp, #1]
   228e0:	f88d 2002 	strb.w	r2, [sp, #2]
   228e4:	f241 3688 	movw	r6, #5000	; 0x1388
   228e8:	e002      	b.n	228f0 <am_hal_ble_patch_complete.part.10+0x16c>
   228ea:	2402      	movs	r4, #2
   228ec:	3e01      	subs	r6, #1
   228ee:	d0a2      	beq.n	22836 <am_hal_ble_patch_complete.part.10+0xb2>
   228f0:	682b      	ldr	r3, [r5, #0]
   228f2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   228f6:	4543      	cmp	r3, r8
   228f8:	d1f7      	bne.n	228ea <am_hal_ble_patch_complete.part.10+0x166>
   228fa:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   228fe:	a906      	add	r1, sp, #24
   22900:	4628      	mov	r0, r5
   22902:	b123      	cbz	r3, 2290e <am_hal_ble_patch_complete.part.10+0x18a>
   22904:	f7fe fe00 	bl	21508 <am_hal_ble_blocking_transfer.part.7>
   22908:	4604      	mov	r4, r0
   2290a:	2800      	cmp	r0, #0
   2290c:	d1ee      	bne.n	228ec <am_hal_ble_patch_complete.part.10+0x168>
   2290e:	4e2e      	ldr	r6, [pc, #184]	; (229c8 <am_hal_ble_patch_complete.part.10+0x244>)
   22910:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   22914:	0619      	lsls	r1, r3, #24
   22916:	d40a      	bmi.n	2292e <am_hal_ble_patch_complete.part.10+0x1aa>
   22918:	4c2c      	ldr	r4, [pc, #176]	; (229cc <am_hal_ble_patch_complete.part.10+0x248>)
   2291a:	e001      	b.n	22920 <am_hal_ble_patch_complete.part.10+0x19c>
   2291c:	3c01      	subs	r4, #1
   2291e:	d08e      	beq.n	2283e <am_hal_ble_patch_complete.part.10+0xba>
   22920:	2010      	movs	r0, #16
   22922:	f000 fac7 	bl	22eb4 <am_hal_flash_delay>
   22926:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   2292a:	0618      	lsls	r0, r3, #24
   2292c:	d5f6      	bpl.n	2291c <am_hal_ble_patch_complete.part.10+0x198>
   2292e:	682e      	ldr	r6, [r5, #0]
   22930:	4b24      	ldr	r3, [pc, #144]	; (229c4 <am_hal_ble_patch_complete.part.10+0x240>)
   22932:	9706      	str	r7, [sp, #24]
   22934:	f026 467e 	bic.w	r6, r6, #4261412864	; 0xfe000000
   22938:	2702      	movs	r7, #2
   2293a:	2209      	movs	r2, #9
   2293c:	429e      	cmp	r6, r3
   2293e:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
   22942:	f8ad 2020 	strh.w	r2, [sp, #32]
   22946:	f47f af75 	bne.w	22834 <am_hal_ble_patch_complete.part.10+0xb0>
   2294a:	a906      	add	r1, sp, #24
   2294c:	4628      	mov	r0, r5
   2294e:	f7fe fddb 	bl	21508 <am_hal_ble_blocking_transfer.part.7>
   22952:	4604      	mov	r4, r0
   22954:	2800      	cmp	r0, #0
   22956:	f47f af6e 	bne.w	22836 <am_hal_ble_patch_complete.part.10+0xb2>
   2295a:	682b      	ldr	r3, [r5, #0]
   2295c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   22960:	42b3      	cmp	r3, r6
   22962:	d026      	beq.n	229b2 <am_hal_ble_patch_complete.part.10+0x22e>
   22964:	2301      	movs	r3, #1
   22966:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
   2296a:	481a      	ldr	r0, [pc, #104]	; (229d4 <am_hal_ble_patch_complete.part.10+0x250>)
   2296c:	f000 faa2 	bl	22eb4 <am_hal_flash_delay>
   22970:	4a19      	ldr	r2, [pc, #100]	; (229d8 <am_hal_ble_patch_complete.part.10+0x254>)
   22972:	4b1a      	ldr	r3, [pc, #104]	; (229dc <am_hal_ble_patch_complete.part.10+0x258>)
   22974:	6811      	ldr	r1, [r2, #0]
   22976:	f021 02ff 	bic.w	r2, r1, #255	; 0xff
   2297a:	429a      	cmp	r2, r3
   2297c:	f47f af5b 	bne.w	22836 <am_hal_ble_patch_complete.part.10+0xb2>
   22980:	b2c9      	uxtb	r1, r1
   22982:	f1a1 0320 	sub.w	r3, r1, #32
   22986:	2b20      	cmp	r3, #32
   22988:	f63f af55 	bhi.w	22836 <am_hal_ble_patch_complete.part.10+0xb2>
   2298c:	4628      	mov	r0, r5
   2298e:	f7ff fe95 	bl	226bc <am_hal_ble_transmitter_modex_set>
   22992:	e750      	b.n	22836 <am_hal_ble_patch_complete.part.10+0xb2>
   22994:	4b0c      	ldr	r3, [pc, #48]	; (229c8 <am_hal_ble_patch_complete.part.10+0x244>)
   22996:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   2299a:	061a      	lsls	r2, r3, #24
   2299c:	f57f af30 	bpl.w	22800 <am_hal_ble_patch_complete.part.10+0x7c>
   229a0:	e748      	b.n	22834 <am_hal_ble_patch_complete.part.10+0xb0>
   229a2:	2302      	movs	r3, #2
   229a4:	af03      	add	r7, sp, #12
   229a6:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   229aa:	f8ad 3020 	strh.w	r3, [sp, #32]
   229ae:	9706      	str	r7, [sp, #24]
   229b0:	e73a      	b.n	22828 <am_hal_ble_patch_complete.part.10+0xa4>
   229b2:	4b05      	ldr	r3, [pc, #20]	; (229c8 <am_hal_ble_patch_complete.part.10+0x244>)
   229b4:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   229b8:	f367 0283 	bfi	r2, r7, #2, #2
   229bc:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   229c0:	e7d0      	b.n	22964 <am_hal_ble_patch_complete.part.10+0x1e0>
   229c2:	bf00      	nop
   229c4:	01775230 	.word	0x01775230
   229c8:	5000c000 	.word	0x5000c000
   229cc:	000186a0 	.word	0x000186a0
   229d0:	08000004 	.word	0x08000004
   229d4:	007a1200 	.word	0x007a1200
   229d8:	50023808 	.word	0x50023808
   229dc:	18240600 	.word	0x18240600

000229e0 <am_hal_ble_boot>:
   229e0:	b128      	cbz	r0, 229ee <am_hal_ble_boot+0xe>
   229e2:	6803      	ldr	r3, [r0, #0]
   229e4:	4a85      	ldr	r2, [pc, #532]	; (22bfc <am_hal_ble_boot+0x21c>)
   229e6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   229ea:	4293      	cmp	r3, r2
   229ec:	d001      	beq.n	229f2 <am_hal_ble_boot+0x12>
   229ee:	2002      	movs	r0, #2
   229f0:	4770      	bx	lr
   229f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   229f6:	7a03      	ldrb	r3, [r0, #8]
   229f8:	b082      	sub	sp, #8
   229fa:	4604      	mov	r4, r0
   229fc:	b16b      	cbz	r3, 22a1a <am_hal_ble_boot+0x3a>
   229fe:	4a80      	ldr	r2, [pc, #512]	; (22c00 <am_hal_ble_boot+0x220>)
   22a00:	68d3      	ldr	r3, [r2, #12]
   22a02:	b2db      	uxtb	r3, r3
   22a04:	2b21      	cmp	r3, #33	; 0x21
   22a06:	68d3      	ldr	r3, [r2, #12]
   22a08:	b2db      	uxtb	r3, r3
   22a0a:	f000 8098 	beq.w	22b3e <am_hal_ble_boot+0x15e>
   22a0e:	2b11      	cmp	r3, #17
   22a10:	d01c      	beq.n	22a4c <am_hal_ble_boot+0x6c>
   22a12:	68d3      	ldr	r3, [r2, #12]
   22a14:	b2db      	uxtb	r3, r3
   22a16:	2b12      	cmp	r3, #18
   22a18:	d018      	beq.n	22a4c <am_hal_ble_boot+0x6c>
   22a1a:	f04f 32ff 	mov.w	r2, #4294967295
   22a1e:	4b78      	ldr	r3, [pc, #480]	; (22c00 <am_hal_ble_boot+0x220>)
   22a20:	9201      	str	r2, [sp, #4]
   22a22:	68db      	ldr	r3, [r3, #12]
   22a24:	b2db      	uxtb	r3, r3
   22a26:	2b21      	cmp	r3, #33	; 0x21
   22a28:	f000 8083 	beq.w	22b32 <am_hal_ble_boot+0x152>
   22a2c:	4620      	mov	r0, r4
   22a2e:	aa01      	add	r2, sp, #4
   22a30:	4974      	ldr	r1, [pc, #464]	; (22c04 <am_hal_ble_boot+0x224>)
   22a32:	f7ff fccb 	bl	223cc <am_hal_ble_plf_reg_read>
   22a36:	9b01      	ldr	r3, [sp, #4]
   22a38:	4873      	ldr	r0, [pc, #460]	; (22c08 <am_hal_ble_boot+0x228>)
   22a3a:	f5a3 43f6 	sub.w	r3, r3, #31488	; 0x7b00
   22a3e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
   22a42:	bf98      	it	ls
   22a44:	2000      	movls	r0, #0
   22a46:	b002      	add	sp, #8
   22a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22a4c:	4b6f      	ldr	r3, [pc, #444]	; (22c0c <am_hal_ble_boot+0x22c>)
   22a4e:	681b      	ldr	r3, [r3, #0]
   22a50:	6819      	ldr	r1, [r3, #0]
   22a52:	684b      	ldr	r3, [r1, #4]
   22a54:	68c8      	ldr	r0, [r1, #12]
   22a56:	b16b      	cbz	r3, 22a74 <am_hal_ble_boot+0x94>
   22a58:	4e6d      	ldr	r6, [pc, #436]	; (22c10 <am_hal_ble_boot+0x230>)
   22a5a:	18c5      	adds	r5, r0, r3
   22a5c:	2300      	movs	r3, #0
   22a5e:	f810 2b01 	ldrb.w	r2, [r0], #1
   22a62:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
   22a66:	4285      	cmp	r5, r0
   22a68:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
   22a6c:	ea82 2303 	eor.w	r3, r2, r3, lsl #8
   22a70:	b29b      	uxth	r3, r3
   22a72:	d1f4      	bne.n	22a5e <am_hal_ble_boot+0x7e>
   22a74:	608b      	str	r3, [r1, #8]
   22a76:	4620      	mov	r0, r4
   22a78:	f7ff fab8 	bl	21fec <am_hal_ble_patch_apply>
   22a7c:	2800      	cmp	r0, #0
   22a7e:	d1e2      	bne.n	22a46 <am_hal_ble_boot+0x66>
   22a80:	4620      	mov	r0, r4
   22a82:	f7ff f977 	bl	21d74 <am_hal_ble_patch_copy_end_apply>
   22a86:	2800      	cmp	r0, #0
   22a88:	d1dd      	bne.n	22a46 <am_hal_ble_boot+0x66>
   22a8a:	4b5d      	ldr	r3, [pc, #372]	; (22c00 <am_hal_ble_boot+0x220>)
   22a8c:	68db      	ldr	r3, [r3, #12]
   22a8e:	b2db      	uxtb	r3, r3
   22a90:	2b21      	cmp	r3, #33	; 0x21
   22a92:	f000 809e 	beq.w	22bd2 <am_hal_ble_boot+0x1f2>
   22a96:	4b5f      	ldr	r3, [pc, #380]	; (22c14 <am_hal_ble_boot+0x234>)
   22a98:	68da      	ldr	r2, [r3, #12]
   22a9a:	4b5f      	ldr	r3, [pc, #380]	; (22c18 <am_hal_ble_boot+0x238>)
   22a9c:	681b      	ldr	r3, [r3, #0]
   22a9e:	ba1b      	rev	r3, r3
   22aa0:	1c5d      	adds	r5, r3, #1
   22aa2:	bf18      	it	ne
   22aa4:	6093      	strne	r3, [r2, #8]
   22aa6:	4b5d      	ldr	r3, [pc, #372]	; (22c1c <am_hal_ble_boot+0x23c>)
   22aa8:	681b      	ldr	r3, [r3, #0]
   22aaa:	1c58      	adds	r0, r3, #1
   22aac:	d009      	beq.n	22ac2 <am_hal_ble_boot+0xe2>
   22aae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   22ab2:	ba1b      	rev	r3, r3
   22ab4:	1c59      	adds	r1, r3, #1
   22ab6:	d004      	beq.n	22ac2 <am_hal_ble_boot+0xe2>
   22ab8:	68d1      	ldr	r1, [r2, #12]
   22aba:	f421 71f8 	bic.w	r1, r1, #496	; 0x1f0
   22abe:	430b      	orrs	r3, r1
   22ac0:	60d3      	str	r3, [r2, #12]
   22ac2:	4a4f      	ldr	r2, [pc, #316]	; (22c00 <am_hal_ble_boot+0x220>)
   22ac4:	68d3      	ldr	r3, [r2, #12]
   22ac6:	b2db      	uxtb	r3, r3
   22ac8:	2b11      	cmp	r3, #17
   22aca:	f000 808a 	beq.w	22be2 <am_hal_ble_boot+0x202>
   22ace:	68d3      	ldr	r3, [r2, #12]
   22ad0:	b2db      	uxtb	r3, r3
   22ad2:	2b12      	cmp	r3, #18
   22ad4:	f000 8085 	beq.w	22be2 <am_hal_ble_boot+0x202>
   22ad8:	4a51      	ldr	r2, [pc, #324]	; (22c20 <am_hal_ble_boot+0x240>)
   22ada:	4b52      	ldr	r3, [pc, #328]	; (22c24 <am_hal_ble_boot+0x244>)
   22adc:	6816      	ldr	r6, [r2, #0]
   22ade:	681b      	ldr	r3, [r3, #0]
   22ae0:	b1fe      	cbz	r6, 22b22 <am_hal_ble_boot+0x142>
   22ae2:	4d4b      	ldr	r5, [pc, #300]	; (22c10 <am_hal_ble_boot+0x230>)
   22ae4:	f1a3 0804 	sub.w	r8, r3, #4
   22ae8:	2700      	movs	r7, #0
   22aea:	f858 1f04 	ldr.w	r1, [r8, #4]!
   22aee:	684b      	ldr	r3, [r1, #4]
   22af0:	68c8      	ldr	r0, [r1, #12]
   22af2:	b16b      	cbz	r3, 22b10 <am_hal_ble_boot+0x130>
   22af4:	eb00 0e03 	add.w	lr, r0, r3
   22af8:	2300      	movs	r3, #0
   22afa:	f810 2b01 	ldrb.w	r2, [r0], #1
   22afe:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
   22b02:	4586      	cmp	lr, r0
   22b04:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
   22b08:	ea82 2303 	eor.w	r3, r2, r3, lsl #8
   22b0c:	b29b      	uxth	r3, r3
   22b0e:	d1f4      	bne.n	22afa <am_hal_ble_boot+0x11a>
   22b10:	608b      	str	r3, [r1, #8]
   22b12:	4620      	mov	r0, r4
   22b14:	f7ff fa6a 	bl	21fec <am_hal_ble_patch_apply>
   22b18:	2800      	cmp	r0, #0
   22b1a:	d194      	bne.n	22a46 <am_hal_ble_boot+0x66>
   22b1c:	3701      	adds	r7, #1
   22b1e:	42b7      	cmp	r7, r6
   22b20:	d1e3      	bne.n	22aea <am_hal_ble_boot+0x10a>
   22b22:	6823      	ldr	r3, [r4, #0]
   22b24:	4a35      	ldr	r2, [pc, #212]	; (22bfc <am_hal_ble_boot+0x21c>)
   22b26:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   22b2a:	4293      	cmp	r3, r2
   22b2c:	d05e      	beq.n	22bec <am_hal_ble_boot+0x20c>
   22b2e:	2002      	movs	r0, #2
   22b30:	e789      	b.n	22a46 <am_hal_ble_boot+0x66>
   22b32:	4620      	mov	r0, r4
   22b34:	aa01      	add	r2, sp, #4
   22b36:	493c      	ldr	r1, [pc, #240]	; (22c28 <am_hal_ble_boot+0x248>)
   22b38:	f7ff fc48 	bl	223cc <am_hal_ble_plf_reg_read>
   22b3c:	e77b      	b.n	22a36 <am_hal_ble_boot+0x56>
   22b3e:	2b21      	cmp	r3, #33	; 0x21
   22b40:	bf0c      	ite	eq
   22b42:	4b3a      	ldreq	r3, [pc, #232]	; (22c2c <am_hal_ble_boot+0x24c>)
   22b44:	4b33      	ldrne	r3, [pc, #204]	; (22c14 <am_hal_ble_boot+0x234>)
   22b46:	68da      	ldr	r2, [r3, #12]
   22b48:	4b33      	ldr	r3, [pc, #204]	; (22c18 <am_hal_ble_boot+0x238>)
   22b4a:	681b      	ldr	r3, [r3, #0]
   22b4c:	ba1b      	rev	r3, r3
   22b4e:	1c59      	adds	r1, r3, #1
   22b50:	bf18      	it	ne
   22b52:	6093      	strne	r3, [r2, #8]
   22b54:	4b31      	ldr	r3, [pc, #196]	; (22c1c <am_hal_ble_boot+0x23c>)
   22b56:	681b      	ldr	r3, [r3, #0]
   22b58:	1c5f      	adds	r7, r3, #1
   22b5a:	d009      	beq.n	22b70 <am_hal_ble_boot+0x190>
   22b5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   22b60:	ba1b      	rev	r3, r3
   22b62:	1c5e      	adds	r6, r3, #1
   22b64:	d004      	beq.n	22b70 <am_hal_ble_boot+0x190>
   22b66:	68d1      	ldr	r1, [r2, #12]
   22b68:	f421 71f8 	bic.w	r1, r1, #496	; 0x1f0
   22b6c:	430b      	orrs	r3, r1
   22b6e:	60d3      	str	r3, [r2, #12]
   22b70:	4a23      	ldr	r2, [pc, #140]	; (22c00 <am_hal_ble_boot+0x220>)
   22b72:	68d3      	ldr	r3, [r2, #12]
   22b74:	b2db      	uxtb	r3, r3
   22b76:	2b11      	cmp	r3, #17
   22b78:	d02e      	beq.n	22bd8 <am_hal_ble_boot+0x1f8>
   22b7a:	68d3      	ldr	r3, [r2, #12]
   22b7c:	b2db      	uxtb	r3, r3
   22b7e:	2b12      	cmp	r3, #18
   22b80:	d02a      	beq.n	22bd8 <am_hal_ble_boot+0x1f8>
   22b82:	4a27      	ldr	r2, [pc, #156]	; (22c20 <am_hal_ble_boot+0x240>)
   22b84:	4b27      	ldr	r3, [pc, #156]	; (22c24 <am_hal_ble_boot+0x244>)
   22b86:	6816      	ldr	r6, [r2, #0]
   22b88:	681b      	ldr	r3, [r3, #0]
   22b8a:	2e00      	cmp	r6, #0
   22b8c:	d0c9      	beq.n	22b22 <am_hal_ble_boot+0x142>
   22b8e:	4d20      	ldr	r5, [pc, #128]	; (22c10 <am_hal_ble_boot+0x230>)
   22b90:	f1a3 0804 	sub.w	r8, r3, #4
   22b94:	2700      	movs	r7, #0
   22b96:	f858 1f04 	ldr.w	r1, [r8, #4]!
   22b9a:	684b      	ldr	r3, [r1, #4]
   22b9c:	68c8      	ldr	r0, [r1, #12]
   22b9e:	b16b      	cbz	r3, 22bbc <am_hal_ble_boot+0x1dc>
   22ba0:	eb00 0e03 	add.w	lr, r0, r3
   22ba4:	2300      	movs	r3, #0
   22ba6:	f810 2b01 	ldrb.w	r2, [r0], #1
   22baa:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
   22bae:	4586      	cmp	lr, r0
   22bb0:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
   22bb4:	ea82 2303 	eor.w	r3, r2, r3, lsl #8
   22bb8:	b29b      	uxth	r3, r3
   22bba:	d1f4      	bne.n	22ba6 <am_hal_ble_boot+0x1c6>
   22bbc:	608b      	str	r3, [r1, #8]
   22bbe:	4620      	mov	r0, r4
   22bc0:	f7ff fa14 	bl	21fec <am_hal_ble_patch_apply>
   22bc4:	2800      	cmp	r0, #0
   22bc6:	f47f af3e 	bne.w	22a46 <am_hal_ble_boot+0x66>
   22bca:	3701      	adds	r7, #1
   22bcc:	42b7      	cmp	r7, r6
   22bce:	d1e2      	bne.n	22b96 <am_hal_ble_boot+0x1b6>
   22bd0:	e7a7      	b.n	22b22 <am_hal_ble_boot+0x142>
   22bd2:	4b16      	ldr	r3, [pc, #88]	; (22c2c <am_hal_ble_boot+0x24c>)
   22bd4:	68da      	ldr	r2, [r3, #12]
   22bd6:	e760      	b.n	22a9a <am_hal_ble_boot+0xba>
   22bd8:	4a15      	ldr	r2, [pc, #84]	; (22c30 <am_hal_ble_boot+0x250>)
   22bda:	4b16      	ldr	r3, [pc, #88]	; (22c34 <am_hal_ble_boot+0x254>)
   22bdc:	6816      	ldr	r6, [r2, #0]
   22bde:	681b      	ldr	r3, [r3, #0]
   22be0:	e7d3      	b.n	22b8a <am_hal_ble_boot+0x1aa>
   22be2:	4a13      	ldr	r2, [pc, #76]	; (22c30 <am_hal_ble_boot+0x250>)
   22be4:	4b13      	ldr	r3, [pc, #76]	; (22c34 <am_hal_ble_boot+0x254>)
   22be6:	6816      	ldr	r6, [r2, #0]
   22be8:	681b      	ldr	r3, [r3, #0]
   22bea:	e779      	b.n	22ae0 <am_hal_ble_boot+0x100>
   22bec:	4620      	mov	r0, r4
   22bee:	f7ff fdc9 	bl	22784 <am_hal_ble_patch_complete.part.10>
   22bf2:	2800      	cmp	r0, #0
   22bf4:	f43f af11 	beq.w	22a1a <am_hal_ble_boot+0x3a>
   22bf8:	e725      	b.n	22a46 <am_hal_ble_boot+0x66>
   22bfa:	bf00      	nop
   22bfc:	01775230 	.word	0x01775230
   22c00:	40020000 	.word	0x40020000
   22c04:	20006054 	.word	0x20006054
   22c08:	0800000b 	.word	0x0800000b
   22c0c:	10002cb8 	.word	0x10002cb8
   22c10:	00025bfc 	.word	0x00025bfc
   22c14:	10002ccc 	.word	0x10002ccc
   22c18:	50023800 	.word	0x50023800
   22c1c:	50023804 	.word	0x50023804
   22c20:	0002744c 	.word	0x0002744c
   22c24:	100035c4 	.word	0x100035c4
   22c28:	20006858 	.word	0x20006858
   22c2c:	100035c8 	.word	0x100035c8
   22c30:	00026b34 	.word	0x00026b34
   22c34:	10002df0 	.word	0x10002df0

00022c38 <am_hal_ble_tx_power_set>:
   22c38:	b570      	push	{r4, r5, r6, lr}
   22c3a:	b082      	sub	sp, #8
   22c3c:	4605      	mov	r5, r0
   22c3e:	2300      	movs	r3, #0
   22c40:	460e      	mov	r6, r1
   22c42:	466a      	mov	r2, sp
   22c44:	040c      	lsls	r4, r1, #16
   22c46:	4919      	ldr	r1, [pc, #100]	; (22cac <am_hal_ble_tx_power_set+0x74>)
   22c48:	9301      	str	r3, [sp, #4]
   22c4a:	f7ff fbbf 	bl	223cc <am_hal_ble_plf_reg_read>
   22c4e:	4917      	ldr	r1, [pc, #92]	; (22cac <am_hal_ble_tx_power_set+0x74>)
   22c50:	4628      	mov	r0, r5
   22c52:	f04f 32ff 	mov.w	r2, #4294967295
   22c56:	f7ff fc79 	bl	2254c <am_hal_ble_plf_reg_write>
   22c5a:	4b15      	ldr	r3, [pc, #84]	; (22cb0 <am_hal_ble_tx_power_set+0x78>)
   22c5c:	68db      	ldr	r3, [r3, #12]
   22c5e:	b2db      	uxtb	r3, r3
   22c60:	2b21      	cmp	r3, #33	; 0x21
   22c62:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
   22c66:	bf0c      	ite	eq
   22c68:	4912      	ldreq	r1, [pc, #72]	; (22cb4 <am_hal_ble_tx_power_set+0x7c>)
   22c6a:	4913      	ldrne	r1, [pc, #76]	; (22cb8 <am_hal_ble_tx_power_set+0x80>)
   22c6c:	aa01      	add	r2, sp, #4
   22c6e:	f044 0408 	orr.w	r4, r4, #8
   22c72:	4628      	mov	r0, r5
   22c74:	f7ff fbaa 	bl	223cc <am_hal_ble_plf_reg_read>
   22c78:	4910      	ldr	r1, [pc, #64]	; (22cbc <am_hal_ble_tx_power_set+0x84>)
   22c7a:	f88d 6004 	strb.w	r6, [sp, #4]
   22c7e:	4622      	mov	r2, r4
   22c80:	4628      	mov	r0, r5
   22c82:	f7ff fc63 	bl	2254c <am_hal_ble_plf_reg_write>
   22c86:	4b0a      	ldr	r3, [pc, #40]	; (22cb0 <am_hal_ble_tx_power_set+0x78>)
   22c88:	9a01      	ldr	r2, [sp, #4]
   22c8a:	68db      	ldr	r3, [r3, #12]
   22c8c:	b2db      	uxtb	r3, r3
   22c8e:	2b21      	cmp	r3, #33	; 0x21
   22c90:	bf0c      	ite	eq
   22c92:	4908      	ldreq	r1, [pc, #32]	; (22cb4 <am_hal_ble_tx_power_set+0x7c>)
   22c94:	4908      	ldrne	r1, [pc, #32]	; (22cb8 <am_hal_ble_tx_power_set+0x80>)
   22c96:	4628      	mov	r0, r5
   22c98:	f7ff fc58 	bl	2254c <am_hal_ble_plf_reg_write>
   22c9c:	4628      	mov	r0, r5
   22c9e:	9a00      	ldr	r2, [sp, #0]
   22ca0:	4902      	ldr	r1, [pc, #8]	; (22cac <am_hal_ble_tx_power_set+0x74>)
   22ca2:	f7ff fc53 	bl	2254c <am_hal_ble_plf_reg_write>
   22ca6:	2000      	movs	r0, #0
   22ca8:	b002      	add	sp, #8
   22caa:	bd70      	pop	{r4, r5, r6, pc}
   22cac:	43000004 	.word	0x43000004
   22cb0:	40020000 	.word	0x40020000
   22cb4:	20006838 	.word	0x20006838
   22cb8:	20006038 	.word	0x20006038
   22cbc:	52400018 	.word	0x52400018

00022cc0 <am_hal_cachectrl_config>:
   22cc0:	b530      	push	{r4, r5, lr}
   22cc2:	b083      	sub	sp, #12
   22cc4:	4605      	mov	r5, r0
   22cc6:	f000 fac5 	bl	23254 <am_hal_interrupt_master_disable>
   22cca:	4c0f      	ldr	r4, [pc, #60]	; (22d08 <am_hal_cachectrl_config+0x48>)
   22ccc:	9001      	str	r0, [sp, #4]
   22cce:	6823      	ldr	r3, [r4, #0]
   22cd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   22cd4:	6023      	str	r3, [r4, #0]
   22cd6:	9801      	ldr	r0, [sp, #4]
   22cd8:	f000 fac0 	bl	2325c <am_hal_interrupt_master_set>
   22cdc:	78ab      	ldrb	r3, [r5, #2]
   22cde:	782a      	ldrb	r2, [r5, #0]
   22ce0:	7869      	ldrb	r1, [r5, #1]
   22ce2:	005b      	lsls	r3, r3, #1
   22ce4:	0112      	lsls	r2, r2, #4
   22ce6:	b2d2      	uxtb	r2, r2
   22ce8:	f003 0302 	and.w	r3, r3, #2
   22cec:	4313      	orrs	r3, r2
   22cee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   22cf2:	020a      	lsls	r2, r1, #8
   22cf4:	f402 7240 	and.w	r2, r2, #768	; 0x300
   22cf8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   22cfc:	4313      	orrs	r3, r2
   22cfe:	2000      	movs	r0, #0
   22d00:	6023      	str	r3, [r4, #0]
   22d02:	b003      	add	sp, #12
   22d04:	bd30      	pop	{r4, r5, pc}
   22d06:	bf00      	nop
   22d08:	40018000 	.word	0x40018000

00022d0c <am_hal_cachectrl_enable>:
   22d0c:	4a03      	ldr	r2, [pc, #12]	; (22d1c <am_hal_cachectrl_enable+0x10>)
   22d0e:	6813      	ldr	r3, [r2, #0]
   22d10:	f043 0301 	orr.w	r3, r3, #1
   22d14:	6013      	str	r3, [r2, #0]
   22d16:	2000      	movs	r0, #0
   22d18:	4770      	bx	lr
   22d1a:	bf00      	nop
   22d1c:	40018000 	.word	0x40018000

00022d20 <am_hal_clkgen_control>:
   22d20:	4b32      	ldr	r3, [pc, #200]	; (22dec <am_hal_clkgen_control+0xcc>)
   22d22:	681a      	ldr	r2, [r3, #0]
   22d24:	b912      	cbnz	r2, 22d2c <am_hal_clkgen_control+0xc>
   22d26:	4a32      	ldr	r2, [pc, #200]	; (22df0 <am_hal_clkgen_control+0xd0>)
   22d28:	6812      	ldr	r2, [r2, #0]
   22d2a:	601a      	str	r2, [r3, #0]
   22d2c:	2809      	cmp	r0, #9
   22d2e:	d85a      	bhi.n	22de6 <am_hal_clkgen_control+0xc6>
   22d30:	e8df f000 	tbb	[pc, r0]
   22d34:	261e160d 	.word	0x261e160d
   22d38:	4640362e 	.word	0x4640362e
   22d3c:	054e      	.short	0x054e
   22d3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   22d42:	2000      	movs	r0, #0
   22d44:	6a1a      	ldr	r2, [r3, #32]
   22d46:	f36f 0200 	bfc	r2, #0, #1
   22d4a:	621a      	str	r2, [r3, #32]
   22d4c:	4770      	bx	lr
   22d4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   22d52:	2200      	movs	r2, #0
   22d54:	2147      	movs	r1, #71	; 0x47
   22d56:	6159      	str	r1, [r3, #20]
   22d58:	4610      	mov	r0, r2
   22d5a:	619a      	str	r2, [r3, #24]
   22d5c:	615a      	str	r2, [r3, #20]
   22d5e:	4770      	bx	lr
   22d60:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   22d64:	2000      	movs	r0, #0
   22d66:	68d3      	ldr	r3, [r2, #12]
   22d68:	f023 0301 	bic.w	r3, r3, #1
   22d6c:	60d3      	str	r3, [r2, #12]
   22d6e:	4770      	bx	lr
   22d70:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   22d74:	2000      	movs	r0, #0
   22d76:	68d3      	ldr	r3, [r2, #12]
   22d78:	f023 0302 	bic.w	r3, r3, #2
   22d7c:	60d3      	str	r3, [r2, #12]
   22d7e:	4770      	bx	lr
   22d80:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   22d84:	2000      	movs	r0, #0
   22d86:	68d3      	ldr	r3, [r2, #12]
   22d88:	f043 0301 	orr.w	r3, r3, #1
   22d8c:	60d3      	str	r3, [r2, #12]
   22d8e:	4770      	bx	lr
   22d90:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   22d94:	2000      	movs	r0, #0
   22d96:	68d3      	ldr	r3, [r2, #12]
   22d98:	f043 0302 	orr.w	r3, r3, #2
   22d9c:	60d3      	str	r3, [r2, #12]
   22d9e:	4770      	bx	lr
   22da0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   22da4:	2200      	movs	r2, #0
   22da6:	2047      	movs	r0, #71	; 0x47
   22da8:	2101      	movs	r1, #1
   22daa:	6158      	str	r0, [r3, #20]
   22dac:	6199      	str	r1, [r3, #24]
   22dae:	4610      	mov	r0, r2
   22db0:	615a      	str	r2, [r3, #20]
   22db2:	4770      	bx	lr
   22db4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   22db8:	2000      	movs	r0, #0
   22dba:	68da      	ldr	r2, [r3, #12]
   22dbc:	60da      	str	r2, [r3, #12]
   22dbe:	4770      	bx	lr
   22dc0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   22dc4:	2000      	movs	r0, #0
   22dc6:	68d3      	ldr	r3, [r2, #12]
   22dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   22dcc:	60d3      	str	r3, [r2, #12]
   22dce:	4770      	bx	lr
   22dd0:	b139      	cbz	r1, 22de2 <am_hal_clkgen_control+0xc2>
   22dd2:	680b      	ldr	r3, [r1, #0]
   22dd4:	f043 0301 	orr.w	r3, r3, #1
   22dd8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   22ddc:	2000      	movs	r0, #0
   22dde:	6213      	str	r3, [r2, #32]
   22de0:	4770      	bx	lr
   22de2:	4b04      	ldr	r3, [pc, #16]	; (22df4 <am_hal_clkgen_control+0xd4>)
   22de4:	e7f8      	b.n	22dd8 <am_hal_clkgen_control+0xb8>
   22de6:	2006      	movs	r0, #6
   22de8:	4770      	bx	lr
   22dea:	bf00      	nop
   22dec:	10009160 	.word	0x10009160
   22df0:	4ffff000 	.word	0x4ffff000
   22df4:	0025b801 	.word	0x0025b801

00022df8 <am_hal_clkgen_status_get>:
   22df8:	b1a8      	cbz	r0, 22e26 <am_hal_clkgen_status_get+0x2e>
   22dfa:	b410      	push	{r4}
   22dfc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   22e00:	490a      	ldr	r1, [pc, #40]	; (22e2c <am_hal_clkgen_status_get+0x34>)
   22e02:	6994      	ldr	r4, [r2, #24]
   22e04:	4b0a      	ldr	r3, [pc, #40]	; (22e30 <am_hal_clkgen_status_get+0x38>)
   22e06:	f014 0f01 	tst.w	r4, #1
   22e0a:	bf08      	it	eq
   22e0c:	460b      	moveq	r3, r1
   22e0e:	6003      	str	r3, [r0, #0]
   22e10:	69d3      	ldr	r3, [r2, #28]
   22e12:	f85d 4b04 	ldr.w	r4, [sp], #4
   22e16:	f003 0201 	and.w	r2, r3, #1
   22e1a:	f3c3 0340 	ubfx	r3, r3, #1, #1
   22e1e:	6042      	str	r2, [r0, #4]
   22e20:	7203      	strb	r3, [r0, #8]
   22e22:	2000      	movs	r0, #0
   22e24:	4770      	bx	lr
   22e26:	2006      	movs	r0, #6
   22e28:	4770      	bx	lr
   22e2a:	bf00      	nop
   22e2c:	02dc6c00 	.word	0x02dc6c00
   22e30:	016e3600 	.word	0x016e3600

00022e34 <am_hal_ctimer_int_service>:
   22e34:	b198      	cbz	r0, 22e5e <am_hal_ctimer_int_service+0x2a>
   22e36:	b570      	push	{r4, r5, r6, lr}
   22e38:	4e09      	ldr	r6, [pc, #36]	; (22e60 <am_hal_ctimer_int_service+0x2c>)
   22e3a:	4604      	mov	r4, r0
   22e3c:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   22e40:	fab4 f384 	clz	r3, r4
   22e44:	f1c3 021f 	rsb	r2, r3, #31
   22e48:	fa25 f303 	lsr.w	r3, r5, r3
   22e4c:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
   22e50:	ea24 0403 	bic.w	r4, r4, r3
   22e54:	b102      	cbz	r2, 22e58 <am_hal_ctimer_int_service+0x24>
   22e56:	4790      	blx	r2
   22e58:	2c00      	cmp	r4, #0
   22e5a:	d1f1      	bne.n	22e40 <am_hal_ctimer_int_service+0xc>
   22e5c:	bd70      	pop	{r4, r5, r6, pc}
   22e5e:	4770      	bx	lr
   22e60:	100090e0 	.word	0x100090e0

00022e64 <am_hal_ctimer_int_clear>:
   22e64:	b510      	push	{r4, lr}
   22e66:	b082      	sub	sp, #8
   22e68:	4604      	mov	r4, r0
   22e6a:	f000 f9f3 	bl	23254 <am_hal_interrupt_master_disable>
   22e6e:	4b04      	ldr	r3, [pc, #16]	; (22e80 <am_hal_ctimer_int_clear+0x1c>)
   22e70:	9001      	str	r0, [sp, #4]
   22e72:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
   22e76:	9801      	ldr	r0, [sp, #4]
   22e78:	f000 f9f0 	bl	2325c <am_hal_interrupt_master_set>
   22e7c:	b002      	add	sp, #8
   22e7e:	bd10      	pop	{r4, pc}
   22e80:	40008000 	.word	0x40008000

00022e84 <am_hal_ctimer_int_status_get>:
   22e84:	b510      	push	{r4, lr}
   22e86:	b082      	sub	sp, #8
   22e88:	4604      	mov	r4, r0
   22e8a:	f000 f9e3 	bl	23254 <am_hal_interrupt_master_disable>
   22e8e:	4b08      	ldr	r3, [pc, #32]	; (22eb0 <am_hal_ctimer_int_status_get+0x2c>)
   22e90:	9001      	str	r0, [sp, #4]
   22e92:	b93c      	cbnz	r4, 22ea4 <am_hal_ctimer_int_status_get+0x20>
   22e94:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
   22e98:	9801      	ldr	r0, [sp, #4]
   22e9a:	f000 f9df 	bl	2325c <am_hal_interrupt_master_set>
   22e9e:	4620      	mov	r0, r4
   22ea0:	b002      	add	sp, #8
   22ea2:	bd10      	pop	{r4, pc}
   22ea4:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
   22ea8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   22eac:	401c      	ands	r4, r3
   22eae:	e7f3      	b.n	22e98 <am_hal_ctimer_int_status_get+0x14>
   22eb0:	40008000 	.word	0x40008000

00022eb4 <am_hal_flash_delay>:
   22eb4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   22eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   22eba:	075b      	lsls	r3, r3, #29
   22ebc:	bf46      	itte	mi
   22ebe:	0040      	lslmi	r0, r0, #1
   22ec0:	230e      	movmi	r3, #14
   22ec2:	230b      	movpl	r3, #11
   22ec4:	4298      	cmp	r0, r3
   22ec6:	d800      	bhi.n	22eca <am_hal_flash_delay+0x16>
   22ec8:	4770      	bx	lr
   22eca:	1ac0      	subs	r0, r0, r3
   22ecc:	4b00      	ldr	r3, [pc, #0]	; (22ed0 <am_hal_flash_delay+0x1c>)
   22ece:	4718      	bx	r3
   22ed0:	0800009d 	.word	0x0800009d

00022ed4 <am_hal_flash_delay_status_check>:
   22ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22ed8:	f89d 4020 	ldrb.w	r4, [sp, #32]
   22edc:	460d      	mov	r5, r1
   22ede:	4616      	mov	r6, r2
   22ee0:	461f      	mov	r7, r3
   22ee2:	b1b4      	cbz	r4, 22f12 <am_hal_flash_delay_status_check+0x3e>
   22ee4:	4604      	mov	r4, r0
   22ee6:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
   22eea:	f8df 8058 	ldr.w	r8, [pc, #88]	; 22f44 <am_hal_flash_delay_status_check+0x70>
   22eee:	e009      	b.n	22f04 <am_hal_flash_delay_status_check+0x30>
   22ef0:	b324      	cbz	r4, 22f3c <am_hal_flash_delay_status_check+0x68>
   22ef2:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
   22ef6:	f013 0f04 	tst.w	r3, #4
   22efa:	bf14      	ite	ne
   22efc:	2012      	movne	r0, #18
   22efe:	2005      	moveq	r0, #5
   22f00:	3c01      	subs	r4, #1
   22f02:	47c0      	blx	r8
   22f04:	682b      	ldr	r3, [r5, #0]
   22f06:	4033      	ands	r3, r6
   22f08:	429f      	cmp	r7, r3
   22f0a:	d1f1      	bne.n	22ef0 <am_hal_flash_delay_status_check+0x1c>
   22f0c:	2000      	movs	r0, #0
   22f0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22f12:	f8df 8030 	ldr.w	r8, [pc, #48]	; 22f44 <am_hal_flash_delay_status_check+0x70>
   22f16:	4604      	mov	r4, r0
   22f18:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
   22f1c:	e009      	b.n	22f32 <am_hal_flash_delay_status_check+0x5e>
   22f1e:	b16c      	cbz	r4, 22f3c <am_hal_flash_delay_status_check+0x68>
   22f20:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
   22f24:	f013 0f04 	tst.w	r3, #4
   22f28:	bf14      	ite	ne
   22f2a:	2012      	movne	r0, #18
   22f2c:	2005      	moveq	r0, #5
   22f2e:	3c01      	subs	r4, #1
   22f30:	47c0      	blx	r8
   22f32:	682b      	ldr	r3, [r5, #0]
   22f34:	4033      	ands	r3, r6
   22f36:	429f      	cmp	r7, r3
   22f38:	d0f1      	beq.n	22f1e <am_hal_flash_delay_status_check+0x4a>
   22f3a:	e7e7      	b.n	22f0c <am_hal_flash_delay_status_check+0x38>
   22f3c:	2004      	movs	r0, #4
   22f3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22f42:	bf00      	nop
   22f44:	0800009d 	.word	0x0800009d

00022f48 <am_hal_gpio_pinconfig>:
   22f48:	2831      	cmp	r0, #49	; 0x31
   22f4a:	d901      	bls.n	22f50 <am_hal_gpio_pinconfig+0x8>
   22f4c:	2006      	movs	r0, #6
   22f4e:	4770      	bx	lr
   22f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22f54:	f001 0307 	and.w	r3, r1, #7
   22f58:	f011 05e0 	ands.w	r5, r1, #224	; 0xe0
   22f5c:	b085      	sub	sp, #20
   22f5e:	ea4f 02c3 	mov.w	r2, r3, lsl #3
   22f62:	d014      	beq.n	22f8e <am_hal_gpio_pinconfig+0x46>
   22f64:	f3c1 1642 	ubfx	r6, r1, #5, #3
   22f68:	1db4      	adds	r4, r6, #6
   22f6a:	f004 0407 	and.w	r4, r4, #7
   22f6e:	2c03      	cmp	r4, #3
   22f70:	f042 0201 	orr.w	r2, r2, #1
   22f74:	f200 80b0 	bhi.w	230d8 <am_hal_gpio_pinconfig+0x190>
   22f78:	4c86      	ldr	r4, [pc, #536]	; (23194 <am_hal_gpio_pinconfig+0x24c>)
   22f7a:	5c24      	ldrb	r4, [r4, r0]
   22f7c:	07e7      	lsls	r7, r4, #31
   22f7e:	d403      	bmi.n	22f88 <am_hal_gpio_pinconfig+0x40>
   22f80:	4885      	ldr	r0, [pc, #532]	; (23198 <am_hal_gpio_pinconfig+0x250>)
   22f82:	b005      	add	sp, #20
   22f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22f88:	3e02      	subs	r6, #2
   22f8a:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
   22f8e:	f3c1 04c1 	ubfx	r4, r1, #3, #2
   22f92:	2c00      	cmp	r4, #0
   22f94:	f040 809a 	bne.w	230cc <am_hal_gpio_pinconfig+0x184>
   22f98:	4c80      	ldr	r4, [pc, #512]	; (2319c <am_hal_gpio_pinconfig+0x254>)
   22f9a:	4d81      	ldr	r5, [pc, #516]	; (231a0 <am_hal_gpio_pinconfig+0x258>)
   22f9c:	5c24      	ldrb	r4, [r4, r0]
   22f9e:	5c2d      	ldrb	r5, [r5, r0]
   22fa0:	411c      	asrs	r4, r3
   22fa2:	f014 0f01 	tst.w	r4, #1
   22fa6:	bf0c      	ite	eq
   22fa8:	2400      	moveq	r4, #0
   22faa:	2402      	movne	r4, #2
   22fac:	42ab      	cmp	r3, r5
   22fae:	ea42 0204 	orr.w	r2, r2, r4
   22fb2:	f000 809d 	beq.w	230f0 <am_hal_gpio_pinconfig+0x1a8>
   22fb6:	f3c1 3341 	ubfx	r3, r1, #13, #2
   22fba:	105d      	asrs	r5, r3, #1
   22fbc:	f3c1 2681 	ubfx	r6, r1, #10, #2
   22fc0:	00db      	lsls	r3, r3, #3
   22fc2:	f3c1 2707 	ubfx	r7, r1, #8, #8
   22fc6:	f003 0408 	and.w	r4, r3, #8
   22fca:	ea45 0346 	orr.w	r3, r5, r6, lsl #1
   22fce:	f007 060c 	and.w	r6, r7, #12
   22fd2:	f3c1 3500 	ubfx	r5, r1, #12, #1
   22fd6:	2e04      	cmp	r6, #4
   22fd8:	ea43 0304 	orr.w	r3, r3, r4
   22fdc:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
   22fe0:	462c      	mov	r4, r5
   22fe2:	f000 8092 	beq.w	2310a <am_hal_gpio_pinconfig+0x1c2>
   22fe6:	4c6f      	ldr	r4, [pc, #444]	; (231a4 <am_hal_gpio_pinconfig+0x25c>)
   22fe8:	6824      	ldr	r4, [r4, #0]
   22fea:	ebc4 0901 	rsb	r9, r4, r1
   22fee:	fab9 f989 	clz	r9, r9
   22ff2:	ea4f 1959 	mov.w	r9, r9, lsr #5
   22ff6:	f017 0f60 	tst.w	r7, #96	; 0x60
   22ffa:	bf04      	itt	eq
   22ffc:	f3c1 34c0 	ubfxeq	r4, r1, #15, #1
   23000:	f364 0300 	bfieq	r3, r4, #0, #1
   23004:	0084      	lsls	r4, r0, #2
   23006:	f3c1 2101 	ubfx	r1, r1, #8, #2
   2300a:	2902      	cmp	r1, #2
   2300c:	ea4f 05c0 	mov.w	r5, r0, lsl #3
   23010:	d07e      	beq.n	23110 <am_hal_gpio_pinconfig+0x1c8>
   23012:	f200 8084 	bhi.w	2311e <am_hal_gpio_pinconfig+0x1d6>
   23016:	2901      	cmp	r1, #1
   23018:	bf08      	it	eq
   2301a:	f042 0204 	orreq.w	r2, r2, #4
   2301e:	f005 0518 	and.w	r5, r5, #24
   23022:	f04f 0800 	mov.w	r8, #0
   23026:	f004 041c 	and.w	r4, r4, #28
   2302a:	0841      	lsrs	r1, r0, #1
   2302c:	f020 0a03 	bic.w	sl, r0, #3
   23030:	270f      	movs	r7, #15
   23032:	f021 0103 	bic.w	r1, r1, #3
   23036:	40a7      	lsls	r7, r4
   23038:	26ff      	movs	r6, #255	; 0xff
   2303a:	fa03 f404 	lsl.w	r4, r3, r4
   2303e:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
   23042:	40ae      	lsls	r6, r5
   23044:	9101      	str	r1, [sp, #4]
   23046:	fa02 f505 	lsl.w	r5, r2, r5
   2304a:	9300      	str	r3, [sp, #0]
   2304c:	4683      	mov	fp, r0
   2304e:	f000 f901 	bl	23254 <am_hal_interrupt_master_disable>
   23052:	9b00      	ldr	r3, [sp, #0]
   23054:	9003      	str	r0, [sp, #12]
   23056:	43ff      	mvns	r7, r7
   23058:	43f6      	mvns	r6, r6
   2305a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   2305e:	f8df e164 	ldr.w	lr, [pc, #356]	; 231c4 <am_hal_gpio_pinconfig+0x27c>
   23062:	4a51      	ldr	r2, [pc, #324]	; (231a8 <am_hal_gpio_pinconfig+0x260>)
   23064:	9901      	ldr	r1, [sp, #4]
   23066:	f1b9 0f00 	cmp.w	r9, #0
   2306a:	d00d      	beq.n	23088 <am_hal_gpio_pinconfig+0x140>
   2306c:	ea4f 0cdb 	mov.w	ip, fp, lsr #3
   23070:	f00b 001f 	and.w	r0, fp, #31
   23074:	f00c 0c04 	and.w	ip, ip, #4
   23078:	f04f 0b01 	mov.w	fp, #1
   2307c:	f8df 9148 	ldr.w	r9, [pc, #328]	; 231c8 <am_hal_gpio_pinconfig+0x280>
   23080:	fa0b f000 	lsl.w	r0, fp, r0
   23084:	f84c 0009 	str.w	r0, [ip, r9]
   23088:	4848      	ldr	r0, [pc, #288]	; (231ac <am_hal_gpio_pinconfig+0x264>)
   2308a:	f04f 0c73 	mov.w	ip, #115	; 0x73
   2308e:	f8c0 c060 	str.w	ip, [r0, #96]	; 0x60
   23092:	f8d3 c000 	ldr.w	ip, [r3]
   23096:	ea06 0c0c 	and.w	ip, r6, ip
   2309a:	ea4c 0505 	orr.w	r5, ip, r5
   2309e:	601d      	str	r5, [r3, #0]
   230a0:	f851 300e 	ldr.w	r3, [r1, lr]
   230a4:	403b      	ands	r3, r7
   230a6:	4323      	orrs	r3, r4
   230a8:	f841 300e 	str.w	r3, [r1, lr]
   230ac:	f85a 3002 	ldr.w	r3, [sl, r2]
   230b0:	401e      	ands	r6, r3
   230b2:	2400      	movs	r4, #0
   230b4:	ea46 0608 	orr.w	r6, r6, r8
   230b8:	f84a 6002 	str.w	r6, [sl, r2]
   230bc:	6604      	str	r4, [r0, #96]	; 0x60
   230be:	9803      	ldr	r0, [sp, #12]
   230c0:	f000 f8cc 	bl	2325c <am_hal_interrupt_master_set>
   230c4:	4620      	mov	r0, r4
   230c6:	b005      	add	sp, #20
   230c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   230cc:	2c01      	cmp	r4, #1
   230ce:	d015      	beq.n	230fc <am_hal_gpio_pinconfig+0x1b4>
   230d0:	2c02      	cmp	r4, #2
   230d2:	d032      	beq.n	2313a <am_hal_gpio_pinconfig+0x1f2>
   230d4:	4836      	ldr	r0, [pc, #216]	; (231b0 <am_hal_gpio_pinconfig+0x268>)
   230d6:	e754      	b.n	22f82 <am_hal_gpio_pinconfig+0x3a>
   230d8:	2dc0      	cmp	r5, #192	; 0xc0
   230da:	d029      	beq.n	23130 <am_hal_gpio_pinconfig+0x1e8>
   230dc:	2d20      	cmp	r5, #32
   230de:	f47f af56 	bne.w	22f8e <am_hal_gpio_pinconfig+0x46>
   230e2:	4c2c      	ldr	r4, [pc, #176]	; (23194 <am_hal_gpio_pinconfig+0x24c>)
   230e4:	5c24      	ldrb	r4, [r4, r0]
   230e6:	f014 0f09 	tst.w	r4, #9
   230ea:	f47f af49 	bne.w	22f80 <am_hal_gpio_pinconfig+0x38>
   230ee:	e74e      	b.n	22f8e <am_hal_gpio_pinconfig+0x46>
   230f0:	f3c1 4402 	ubfx	r4, r1, #16, #3
   230f4:	2c07      	cmp	r4, #7
   230f6:	d127      	bne.n	23148 <am_hal_gpio_pinconfig+0x200>
   230f8:	482e      	ldr	r0, [pc, #184]	; (231b4 <am_hal_gpio_pinconfig+0x26c>)
   230fa:	e742      	b.n	22f82 <am_hal_gpio_pinconfig+0x3a>
   230fc:	4c25      	ldr	r4, [pc, #148]	; (23194 <am_hal_gpio_pinconfig+0x24c>)
   230fe:	5c24      	ldrb	r4, [r4, r0]
   23100:	07a5      	lsls	r5, r4, #30
   23102:	d5e7      	bpl.n	230d4 <am_hal_gpio_pinconfig+0x18c>
   23104:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   23108:	e746      	b.n	22f98 <am_hal_gpio_pinconfig+0x50>
   2310a:	f04f 0901 	mov.w	r9, #1
   2310e:	e772      	b.n	22ff6 <am_hal_gpio_pinconfig+0xae>
   23110:	f005 0518 	and.w	r5, r5, #24
   23114:	f04f 0801 	mov.w	r8, #1
   23118:	fa08 f805 	lsl.w	r8, r8, r5
   2311c:	e783      	b.n	23026 <am_hal_gpio_pinconfig+0xde>
   2311e:	f005 0518 	and.w	r5, r5, #24
   23122:	f04f 0801 	mov.w	r8, #1
   23126:	f042 0204 	orr.w	r2, r2, #4
   2312a:	fa08 f805 	lsl.w	r8, r8, r5
   2312e:	e77a      	b.n	23026 <am_hal_gpio_pinconfig+0xde>
   23130:	2814      	cmp	r0, #20
   23132:	f43f af2c 	beq.w	22f8e <am_hal_gpio_pinconfig+0x46>
   23136:	4820      	ldr	r0, [pc, #128]	; (231b8 <am_hal_gpio_pinconfig+0x270>)
   23138:	e723      	b.n	22f82 <am_hal_gpio_pinconfig+0x3a>
   2313a:	4c16      	ldr	r4, [pc, #88]	; (23194 <am_hal_gpio_pinconfig+0x24c>)
   2313c:	5c24      	ldrb	r4, [r4, r0]
   2313e:	0764      	lsls	r4, r4, #29
   23140:	d5c8      	bpl.n	230d4 <am_hal_gpio_pinconfig+0x18c>
   23142:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   23146:	e727      	b.n	22f98 <am_hal_gpio_pinconfig+0x50>
   23148:	4d1c      	ldr	r5, [pc, #112]	; (231bc <am_hal_gpio_pinconfig+0x274>)
   2314a:	f3c1 43c1 	ubfx	r3, r1, #19, #2
   2314e:	f815 6020 	ldrb.w	r6, [r5, r0, lsl #2]
   23152:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
   23156:	429e      	cmp	r6, r3
   23158:	d00c      	beq.n	23174 <am_hal_gpio_pinconfig+0x22c>
   2315a:	0084      	lsls	r4, r0, #2
   2315c:	4425      	add	r5, r4
   2315e:	786e      	ldrb	r6, [r5, #1]
   23160:	429e      	cmp	r6, r3
   23162:	d013      	beq.n	2318c <am_hal_gpio_pinconfig+0x244>
   23164:	78ae      	ldrb	r6, [r5, #2]
   23166:	429e      	cmp	r6, r3
   23168:	d00e      	beq.n	23188 <am_hal_gpio_pinconfig+0x240>
   2316a:	78ed      	ldrb	r5, [r5, #3]
   2316c:	429d      	cmp	r5, r3
   2316e:	d00f      	beq.n	23190 <am_hal_gpio_pinconfig+0x248>
   23170:	4813      	ldr	r0, [pc, #76]	; (231c0 <am_hal_gpio_pinconfig+0x278>)
   23172:	e706      	b.n	22f82 <am_hal_gpio_pinconfig+0x3a>
   23174:	2300      	movs	r3, #0
   23176:	0084      	lsls	r4, r0, #2
   23178:	005b      	lsls	r3, r3, #1
   2317a:	f3c1 5540 	ubfx	r5, r1, #21, #1
   2317e:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
   23182:	f04f 0900 	mov.w	r9, #0
   23186:	e73e      	b.n	23006 <am_hal_gpio_pinconfig+0xbe>
   23188:	2302      	movs	r3, #2
   2318a:	e7f5      	b.n	23178 <am_hal_gpio_pinconfig+0x230>
   2318c:	2301      	movs	r3, #1
   2318e:	e7f3      	b.n	23178 <am_hal_gpio_pinconfig+0x230>
   23190:	2303      	movs	r3, #3
   23192:	e7f1      	b.n	23178 <am_hal_gpio_pinconfig+0x230>
   23194:	00027454 	.word	0x00027454
   23198:	08000100 	.word	0x08000100
   2319c:	00027550 	.word	0x00027550
   231a0:	0002758c 	.word	0x0002758c
   231a4:	00027584 	.word	0x00027584
   231a8:	400100e0 	.word	0x400100e0
   231ac:	40010000 	.word	0x40010000
   231b0:	08000102 	.word	0x08000102
   231b4:	08000103 	.word	0x08000103
   231b8:	08000101 	.word	0x08000101
   231bc:	00027488 	.word	0x00027488
   231c0:	08000104 	.word	0x08000104
   231c4:	40010040 	.word	0x40010040
   231c8:	400100b4 	.word	0x400100b4

000231cc <am_hal_gpio_state_write>:
   231cc:	2831      	cmp	r0, #49	; 0x31
   231ce:	d901      	bls.n	231d4 <am_hal_gpio_state_write+0x8>
   231d0:	2005      	movs	r0, #5
   231d2:	4770      	bx	lr
   231d4:	2905      	cmp	r1, #5
   231d6:	d901      	bls.n	231dc <am_hal_gpio_state_write+0x10>
   231d8:	2006      	movs	r0, #6
   231da:	4770      	bx	lr
   231dc:	b570      	push	{r4, r5, r6, lr}
   231de:	f000 031f 	and.w	r3, r0, #31
   231e2:	b082      	sub	sp, #8
   231e4:	08c0      	lsrs	r0, r0, #3
   231e6:	2201      	movs	r2, #1
   231e8:	460d      	mov	r5, r1
   231ea:	f000 0404 	and.w	r4, r0, #4
   231ee:	fa02 f603 	lsl.w	r6, r2, r3
   231f2:	f000 f82f 	bl	23254 <am_hal_interrupt_master_disable>
   231f6:	1e69      	subs	r1, r5, #1
   231f8:	9001      	str	r0, [sp, #4]
   231fa:	2904      	cmp	r1, #4
   231fc:	d817      	bhi.n	2322e <am_hal_gpio_state_write+0x62>
   231fe:	e8df f001 	tbb	[pc, r1]
   23202:	0e13      	.short	0x0e13
   23204:	030b      	.short	0x030b
   23206:	19          	.byte	0x19
   23207:	00          	.byte	0x00
   23208:	4b0d      	ldr	r3, [pc, #52]	; (23240 <am_hal_gpio_state_write+0x74>)
   2320a:	50e6      	str	r6, [r4, r3]
   2320c:	9801      	ldr	r0, [sp, #4]
   2320e:	f000 f825 	bl	2325c <am_hal_interrupt_master_set>
   23212:	2000      	movs	r0, #0
   23214:	b002      	add	sp, #8
   23216:	bd70      	pop	{r4, r5, r6, pc}
   23218:	4b0a      	ldr	r3, [pc, #40]	; (23244 <am_hal_gpio_state_write+0x78>)
   2321a:	50e6      	str	r6, [r4, r3]
   2321c:	e7f6      	b.n	2320c <am_hal_gpio_state_write+0x40>
   2321e:	4a0a      	ldr	r2, [pc, #40]	; (23248 <am_hal_gpio_state_write+0x7c>)
   23220:	58a3      	ldr	r3, [r4, r2]
   23222:	4073      	eors	r3, r6
   23224:	50a3      	str	r3, [r4, r2]
   23226:	e7f1      	b.n	2320c <am_hal_gpio_state_write+0x40>
   23228:	4b08      	ldr	r3, [pc, #32]	; (2324c <am_hal_gpio_state_write+0x80>)
   2322a:	50e6      	str	r6, [r4, r3]
   2322c:	e7ee      	b.n	2320c <am_hal_gpio_state_write+0x40>
   2322e:	4b08      	ldr	r3, [pc, #32]	; (23250 <am_hal_gpio_state_write+0x84>)
   23230:	50e6      	str	r6, [r4, r3]
   23232:	e7eb      	b.n	2320c <am_hal_gpio_state_write+0x40>
   23234:	4a03      	ldr	r2, [pc, #12]	; (23244 <am_hal_gpio_state_write+0x78>)
   23236:	58a3      	ldr	r3, [r4, r2]
   23238:	4073      	eors	r3, r6
   2323a:	50a3      	str	r3, [r4, r2]
   2323c:	e7e6      	b.n	2320c <am_hal_gpio_state_write+0x40>
   2323e:	bf00      	nop
   23240:	400100a8 	.word	0x400100a8
   23244:	400100b4 	.word	0x400100b4
   23248:	40010088 	.word	0x40010088
   2324c:	40010090 	.word	0x40010090
   23250:	40010098 	.word	0x40010098

00023254 <am_hal_interrupt_master_disable>:
   23254:	f3ef 8010 	mrs	r0, PRIMASK
   23258:	b672      	cpsid	i
   2325a:	4770      	bx	lr

0002325c <am_hal_interrupt_master_set>:
   2325c:	f380 8810 	msr	PRIMASK, r0
   23260:	4770      	bx	lr
   23262:	bf00      	nop

00023264 <am_hal_mcuctrl_info_get>:
   23264:	b4f0      	push	{r4, r5, r6, r7}
   23266:	b121      	cbz	r1, 23272 <am_hal_mcuctrl_info_get+0xe>
   23268:	2801      	cmp	r0, #1
   2326a:	d038      	beq.n	232de <am_hal_mcuctrl_info_get+0x7a>
   2326c:	d320      	bcc.n	232b0 <am_hal_mcuctrl_info_get+0x4c>
   2326e:	2802      	cmp	r0, #2
   23270:	d002      	beq.n	23278 <am_hal_mcuctrl_info_get+0x14>
   23272:	2006      	movs	r0, #6
   23274:	bcf0      	pop	{r4, r5, r6, r7}
   23276:	4770      	bx	lr
   23278:	4a41      	ldr	r2, [pc, #260]	; (23380 <am_hal_mcuctrl_info_get+0x11c>)
   2327a:	684d      	ldr	r5, [r1, #4]
   2327c:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
   23280:	694c      	ldr	r4, [r1, #20]
   23282:	f003 0601 	and.w	r6, r3, #1
   23286:	f3c3 0040 	ubfx	r0, r3, #1, #1
   2328a:	f3c3 0380 	ubfx	r3, r3, #2, #1
   2328e:	700e      	strb	r6, [r1, #0]
   23290:	7208      	strb	r0, [r1, #8]
   23292:	740b      	strb	r3, [r1, #16]
   23294:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
   23298:	60cb      	str	r3, [r1, #12]
   2329a:	f8d2 01c0 	ldr.w	r0, [r2, #448]	; 0x1c0
   2329e:	4328      	orrs	r0, r5
   232a0:	6048      	str	r0, [r1, #4]
   232a2:	f8d2 31c8 	ldr.w	r3, [r2, #456]	; 0x1c8
   232a6:	4323      	orrs	r3, r4
   232a8:	2000      	movs	r0, #0
   232aa:	614b      	str	r3, [r1, #20]
   232ac:	bcf0      	pop	{r4, r5, r6, r7}
   232ae:	4770      	bx	lr
   232b0:	4a33      	ldr	r2, [pc, #204]	; (23380 <am_hal_mcuctrl_info_get+0x11c>)
   232b2:	6993      	ldr	r3, [r2, #24]
   232b4:	f3c3 1080 	ubfx	r0, r3, #6, #1
   232b8:	f3c3 0380 	ubfx	r3, r3, #2, #1
   232bc:	7008      	strb	r0, [r1, #0]
   232be:	704b      	strb	r3, [r1, #1]
   232c0:	f8d2 31a0 	ldr.w	r3, [r2, #416]	; 0x1a0
   232c4:	f3c3 6381 	ubfx	r3, r3, #26, #2
   232c8:	710b      	strb	r3, [r1, #4]
   232ca:	6953      	ldr	r3, [r2, #20]
   232cc:	f3c3 0240 	ubfx	r2, r3, #1, #1
   232d0:	f003 0301 	and.w	r3, r3, #1
   232d4:	2000      	movs	r0, #0
   232d6:	708a      	strb	r2, [r1, #2]
   232d8:	70cb      	strb	r3, [r1, #3]
   232da:	bcf0      	pop	{r4, r5, r6, r7}
   232dc:	4770      	bx	lr
   232de:	4b28      	ldr	r3, [pc, #160]	; (23380 <am_hal_mcuctrl_info_get+0x11c>)
   232e0:	4c28      	ldr	r4, [pc, #160]	; (23384 <am_hal_mcuctrl_info_get+0x120>)
   232e2:	681a      	ldr	r2, [r3, #0]
   232e4:	600a      	str	r2, [r1, #0]
   232e6:	6858      	ldr	r0, [r3, #4]
   232e8:	6048      	str	r0, [r1, #4]
   232ea:	6898      	ldr	r0, [r3, #8]
   232ec:	6088      	str	r0, [r1, #8]
   232ee:	68d8      	ldr	r0, [r3, #12]
   232f0:	60c8      	str	r0, [r1, #12]
   232f2:	691d      	ldr	r5, [r3, #16]
   232f4:	4824      	ldr	r0, [pc, #144]	; (23388 <am_hal_mcuctrl_info_get+0x124>)
   232f6:	610d      	str	r5, [r1, #16]
   232f8:	f3c2 5703 	ubfx	r7, r2, #20, #4
   232fc:	f3c2 4603 	ubfx	r6, r2, #16, #4
   23300:	695d      	ldr	r5, [r3, #20]
   23302:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
   23306:	4b21      	ldr	r3, [pc, #132]	; (2338c <am_hal_mcuctrl_info_get+0x128>)
   23308:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
   2330c:	6208      	str	r0, [r1, #32]
   2330e:	f002 0201 	and.w	r2, r2, #1
   23312:	614d      	str	r5, [r1, #20]
   23314:	61cc      	str	r4, [r1, #28]
   23316:	618a      	str	r2, [r1, #24]
   23318:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   2331c:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
   23320:	b2d0      	uxtb	r0, r2
   23322:	f004 020f 	and.w	r2, r4, #15
   23326:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
   2332a:	624a      	str	r2, [r1, #36]	; 0x24
   2332c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
   23330:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
   23334:	f3c2 1003 	ubfx	r0, r2, #4, #4
   23338:	f004 020f 	and.w	r2, r4, #15
   2333c:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   23340:	628a      	str	r2, [r1, #40]	; 0x28
   23342:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
   23346:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
   2334a:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
   2334e:	f3c2 1203 	ubfx	r2, r2, #4, #4
   23352:	4302      	orrs	r2, r0
   23354:	62ca      	str	r2, [r1, #44]	; 0x2c
   23356:	f8d3 50fc 	ldr.w	r5, [r3, #252]	; 0xfc
   2335a:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
   2335e:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
   23362:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   23366:	b2c0      	uxtb	r0, r0
   23368:	0400      	lsls	r0, r0, #16
   2336a:	ea40 6305 	orr.w	r3, r0, r5, lsl #24
   2336e:	b2d2      	uxtb	r2, r2
   23370:	431a      	orrs	r2, r3
   23372:	b2e3      	uxtb	r3, r4
   23374:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   23378:	630b      	str	r3, [r1, #48]	; 0x30
   2337a:	2000      	movs	r0, #0
   2337c:	bcf0      	pop	{r4, r5, r6, r7}
   2337e:	4770      	bx	lr
   23380:	40020000 	.word	0x40020000
   23384:	000275c0 	.word	0x000275c0
   23388:	00027600 	.word	0x00027600
   2338c:	f0000f00 	.word	0xf0000f00

00023390 <am_hal_pwrctrl_periph_enable>:
   23390:	b570      	push	{r4, r5, r6, lr}
   23392:	b082      	sub	sp, #8
   23394:	4604      	mov	r4, r0
   23396:	f7ff ff5d 	bl	23254 <am_hal_interrupt_master_disable>
   2339a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   2339e:	4d0f      	ldr	r5, [pc, #60]	; (233dc <am_hal_pwrctrl_periph_enable+0x4c>)
   233a0:	4e0f      	ldr	r6, [pc, #60]	; (233e0 <am_hal_pwrctrl_periph_enable+0x50>)
   233a2:	9001      	str	r0, [sp, #4]
   233a4:	00a4      	lsls	r4, r4, #2
   233a6:	68aa      	ldr	r2, [r5, #8]
   233a8:	5933      	ldr	r3, [r6, r4]
   233aa:	4313      	orrs	r3, r2
   233ac:	60ab      	str	r3, [r5, #8]
   233ae:	9801      	ldr	r0, [sp, #4]
   233b0:	4434      	add	r4, r6
   233b2:	f7ff ff53 	bl	2325c <am_hal_interrupt_master_set>
   233b6:	20a0      	movs	r0, #160	; 0xa0
   233b8:	f7ff fd7c 	bl	22eb4 <am_hal_flash_delay>
   233bc:	69ab      	ldr	r3, [r5, #24]
   233be:	6864      	ldr	r4, [r4, #4]
   233c0:	4223      	tst	r3, r4
   233c2:	d103      	bne.n	233cc <am_hal_pwrctrl_periph_enable+0x3c>
   233c4:	20a0      	movs	r0, #160	; 0xa0
   233c6:	f7ff fd75 	bl	22eb4 <am_hal_flash_delay>
   233ca:	69ab      	ldr	r3, [r5, #24]
   233cc:	4b03      	ldr	r3, [pc, #12]	; (233dc <am_hal_pwrctrl_periph_enable+0x4c>)
   233ce:	699b      	ldr	r3, [r3, #24]
   233d0:	4223      	tst	r3, r4
   233d2:	bf0c      	ite	eq
   233d4:	2001      	moveq	r0, #1
   233d6:	2000      	movne	r0, #0
   233d8:	b002      	add	sp, #8
   233da:	bd70      	pop	{r4, r5, r6, pc}
   233dc:	40021000 	.word	0x40021000
   233e0:	00027640 	.word	0x00027640

000233e4 <am_hal_pwrctrl_periph_disable>:
   233e4:	b570      	push	{r4, r5, r6, lr}
   233e6:	b082      	sub	sp, #8
   233e8:	4604      	mov	r4, r0
   233ea:	f7ff ff33 	bl	23254 <am_hal_interrupt_master_disable>
   233ee:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   233f2:	4d10      	ldr	r5, [pc, #64]	; (23434 <am_hal_pwrctrl_periph_disable+0x50>)
   233f4:	4e10      	ldr	r6, [pc, #64]	; (23438 <am_hal_pwrctrl_periph_disable+0x54>)
   233f6:	9001      	str	r0, [sp, #4]
   233f8:	00a4      	lsls	r4, r4, #2
   233fa:	68ab      	ldr	r3, [r5, #8]
   233fc:	5932      	ldr	r2, [r6, r4]
   233fe:	ea23 0302 	bic.w	r3, r3, r2
   23402:	60ab      	str	r3, [r5, #8]
   23404:	9801      	ldr	r0, [sp, #4]
   23406:	4434      	add	r4, r6
   23408:	f7ff ff28 	bl	2325c <am_hal_interrupt_master_set>
   2340c:	20a0      	movs	r0, #160	; 0xa0
   2340e:	f7ff fd51 	bl	22eb4 <am_hal_flash_delay>
   23412:	69ab      	ldr	r3, [r5, #24]
   23414:	6864      	ldr	r4, [r4, #4]
   23416:	4223      	tst	r3, r4
   23418:	d003      	beq.n	23422 <am_hal_pwrctrl_periph_disable+0x3e>
   2341a:	20a0      	movs	r0, #160	; 0xa0
   2341c:	f7ff fd4a 	bl	22eb4 <am_hal_flash_delay>
   23420:	69ab      	ldr	r3, [r5, #24]
   23422:	4b04      	ldr	r3, [pc, #16]	; (23434 <am_hal_pwrctrl_periph_disable+0x50>)
   23424:	699b      	ldr	r3, [r3, #24]
   23426:	4223      	tst	r3, r4
   23428:	bf14      	ite	ne
   2342a:	2001      	movne	r0, #1
   2342c:	2000      	moveq	r0, #0
   2342e:	b002      	add	sp, #8
   23430:	bd70      	pop	{r4, r5, r6, pc}
   23432:	bf00      	nop
   23434:	40021000 	.word	0x40021000
   23438:	00027640 	.word	0x00027640

0002343c <am_hal_pwrctrl_low_power_init>:
   2343c:	b530      	push	{r4, r5, lr}
   2343e:	4b1f      	ldr	r3, [pc, #124]	; (234bc <am_hal_pwrctrl_low_power_init+0x80>)
   23440:	681a      	ldr	r2, [r3, #0]
   23442:	b083      	sub	sp, #12
   23444:	b912      	cbnz	r2, 2344c <am_hal_pwrctrl_low_power_init+0x10>
   23446:	4a1e      	ldr	r2, [pc, #120]	; (234c0 <am_hal_pwrctrl_low_power_init+0x84>)
   23448:	6812      	ldr	r2, [r2, #0]
   2344a:	601a      	str	r2, [r3, #0]
   2344c:	4c1d      	ldr	r4, [pc, #116]	; (234c4 <am_hal_pwrctrl_low_power_init+0x88>)
   2344e:	69a3      	ldr	r3, [r4, #24]
   23450:	05db      	lsls	r3, r3, #23
   23452:	d502      	bpl.n	2345a <am_hal_pwrctrl_low_power_init+0x1e>
   23454:	2000      	movs	r0, #0
   23456:	b003      	add	sp, #12
   23458:	bd30      	pop	{r4, r5, pc}
   2345a:	4d1b      	ldr	r5, [pc, #108]	; (234c8 <am_hal_pwrctrl_low_power_init+0x8c>)
   2345c:	491b      	ldr	r1, [pc, #108]	; (234cc <am_hal_pwrctrl_low_power_init+0x90>)
   2345e:	7e2a      	ldrb	r2, [r5, #24]
   23460:	2001      	movs	r0, #1
   23462:	4302      	orrs	r2, r0
   23464:	2307      	movs	r3, #7
   23466:	762a      	strb	r2, [r5, #24]
   23468:	9000      	str	r0, [sp, #0]
   2346a:	461a      	mov	r2, r3
   2346c:	f242 7010 	movw	r0, #10000	; 0x2710
   23470:	f7ff fd30 	bl	22ed4 <am_hal_flash_delay_status_check>
   23474:	b110      	cbz	r0, 2347c <am_hal_pwrctrl_low_power_init+0x40>
   23476:	2004      	movs	r0, #4
   23478:	b003      	add	sp, #12
   2347a:	bd30      	pop	{r4, r5, pc}
   2347c:	6823      	ldr	r3, [r4, #0]
   2347e:	f043 0301 	orr.w	r3, r3, #1
   23482:	6023      	str	r3, [r4, #0]
   23484:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23486:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2348a:	6263      	str	r3, [r4, #36]	; 0x24
   2348c:	68eb      	ldr	r3, [r5, #12]
   2348e:	b2db      	uxtb	r3, r3
   23490:	2b11      	cmp	r3, #17
   23492:	d1df      	bne.n	23454 <am_hal_pwrctrl_low_power_init+0x18>
   23494:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
   23498:	f360 5356 	bfi	r3, r0, #21, #2
   2349c:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
   234a0:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
   234a4:	220f      	movs	r2, #15
   234a6:	f362 138b 	bfi	r3, r2, #6, #6
   234aa:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
   234ae:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
   234b2:	f362 0305 	bfi	r3, r2, #0, #6
   234b6:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
   234ba:	e7cc      	b.n	23456 <am_hal_pwrctrl_low_power_init+0x1a>
   234bc:	10009160 	.word	0x10009160
   234c0:	4ffff000 	.word	0x4ffff000
   234c4:	40021000 	.word	0x40021000
   234c8:	40020000 	.word	0x40020000
   234cc:	40020018 	.word	0x40020018

000234d0 <am_hal_queue_init>:
   234d0:	b410      	push	{r4}
   234d2:	2400      	movs	r4, #0
   234d4:	6004      	str	r4, [r0, #0]
   234d6:	6044      	str	r4, [r0, #4]
   234d8:	6084      	str	r4, [r0, #8]
   234da:	60c3      	str	r3, [r0, #12]
   234dc:	6102      	str	r2, [r0, #16]
   234de:	6141      	str	r1, [r0, #20]
   234e0:	f85d 4b04 	ldr.w	r4, [sp], #4
   234e4:	4770      	bx	lr
   234e6:	bf00      	nop

000234e8 <am_hal_queue_item_add>:
   234e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   234ea:	4604      	mov	r4, r0
   234ec:	6906      	ldr	r6, [r0, #16]
   234ee:	b083      	sub	sp, #12
   234f0:	fb06 f602 	mul.w	r6, r6, r2
   234f4:	460d      	mov	r5, r1
   234f6:	f7ff fead 	bl	23254 <am_hal_interrupt_master_disable>
   234fa:	68e7      	ldr	r7, [r4, #12]
   234fc:	68a2      	ldr	r2, [r4, #8]
   234fe:	9001      	str	r0, [sp, #4]
   23500:	1abb      	subs	r3, r7, r2
   23502:	429e      	cmp	r6, r3
   23504:	d826      	bhi.n	23554 <am_hal_queue_item_add+0x6c>
   23506:	b196      	cbz	r6, 2352e <am_hal_queue_item_add+0x46>
   23508:	6823      	ldr	r3, [r4, #0]
   2350a:	4629      	mov	r1, r5
   2350c:	b1c5      	cbz	r5, 23540 <am_hal_queue_item_add+0x58>
   2350e:	19af      	adds	r7, r5, r6
   23510:	6962      	ldr	r2, [r4, #20]
   23512:	f811 0b01 	ldrb.w	r0, [r1], #1
   23516:	54d0      	strb	r0, [r2, r3]
   23518:	6823      	ldr	r3, [r4, #0]
   2351a:	68e5      	ldr	r5, [r4, #12]
   2351c:	3301      	adds	r3, #1
   2351e:	42b9      	cmp	r1, r7
   23520:	fbb3 f0f5 	udiv	r0, r3, r5
   23524:	fb05 3310 	mls	r3, r5, r0, r3
   23528:	6023      	str	r3, [r4, #0]
   2352a:	d1f1      	bne.n	23510 <am_hal_queue_item_add+0x28>
   2352c:	68a2      	ldr	r2, [r4, #8]
   2352e:	4432      	add	r2, r6
   23530:	60a2      	str	r2, [r4, #8]
   23532:	2401      	movs	r4, #1
   23534:	9801      	ldr	r0, [sp, #4]
   23536:	f7ff fe91 	bl	2325c <am_hal_interrupt_master_set>
   2353a:	4620      	mov	r0, r4
   2353c:	b003      	add	sp, #12
   2353e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23540:	3101      	adds	r1, #1
   23542:	3301      	adds	r3, #1
   23544:	428e      	cmp	r6, r1
   23546:	fbb3 f0f7 	udiv	r0, r3, r7
   2354a:	fb07 3310 	mls	r3, r7, r0, r3
   2354e:	d1f7      	bne.n	23540 <am_hal_queue_item_add+0x58>
   23550:	6023      	str	r3, [r4, #0]
   23552:	e7ec      	b.n	2352e <am_hal_queue_item_add+0x46>
   23554:	2400      	movs	r4, #0
   23556:	e7ed      	b.n	23534 <am_hal_queue_item_add+0x4c>

00023558 <am_hal_queue_item_get>:
   23558:	b5f0      	push	{r4, r5, r6, r7, lr}
   2355a:	4604      	mov	r4, r0
   2355c:	6906      	ldr	r6, [r0, #16]
   2355e:	b083      	sub	sp, #12
   23560:	fb06 f602 	mul.w	r6, r6, r2
   23564:	460d      	mov	r5, r1
   23566:	f7ff fe75 	bl	23254 <am_hal_interrupt_master_disable>
   2356a:	68a2      	ldr	r2, [r4, #8]
   2356c:	9001      	str	r0, [sp, #4]
   2356e:	4296      	cmp	r6, r2
   23570:	d81c      	bhi.n	235ac <am_hal_queue_item_get+0x54>
   23572:	b196      	cbz	r6, 2359a <am_hal_queue_item_get+0x42>
   23574:	6863      	ldr	r3, [r4, #4]
   23576:	b1dd      	cbz	r5, 235b0 <am_hal_queue_item_get+0x58>
   23578:	4629      	mov	r1, r5
   2357a:	19af      	adds	r7, r5, r6
   2357c:	6962      	ldr	r2, [r4, #20]
   2357e:	5cd3      	ldrb	r3, [r2, r3]
   23580:	f801 3b01 	strb.w	r3, [r1], #1
   23584:	6863      	ldr	r3, [r4, #4]
   23586:	68e5      	ldr	r5, [r4, #12]
   23588:	3301      	adds	r3, #1
   2358a:	428f      	cmp	r7, r1
   2358c:	fbb3 f0f5 	udiv	r0, r3, r5
   23590:	fb05 3310 	mls	r3, r5, r0, r3
   23594:	6063      	str	r3, [r4, #4]
   23596:	d1f1      	bne.n	2357c <am_hal_queue_item_get+0x24>
   23598:	68a2      	ldr	r2, [r4, #8]
   2359a:	1b92      	subs	r2, r2, r6
   2359c:	60a2      	str	r2, [r4, #8]
   2359e:	2401      	movs	r4, #1
   235a0:	9801      	ldr	r0, [sp, #4]
   235a2:	f7ff fe5b 	bl	2325c <am_hal_interrupt_master_set>
   235a6:	4620      	mov	r0, r4
   235a8:	b003      	add	sp, #12
   235aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   235ac:	2400      	movs	r4, #0
   235ae:	e7f7      	b.n	235a0 <am_hal_queue_item_get+0x48>
   235b0:	68e0      	ldr	r0, [r4, #12]
   235b2:	4629      	mov	r1, r5
   235b4:	3101      	adds	r1, #1
   235b6:	3301      	adds	r3, #1
   235b8:	428e      	cmp	r6, r1
   235ba:	fbb3 f5f0 	udiv	r5, r3, r0
   235be:	fb00 3315 	mls	r3, r0, r5, r3
   235c2:	d1f7      	bne.n	235b4 <am_hal_queue_item_get+0x5c>
   235c4:	6063      	str	r3, [r4, #4]
   235c6:	e7e8      	b.n	2359a <am_hal_queue_item_get+0x42>

000235c8 <am_hal_stimer_config>:
   235c8:	4b03      	ldr	r3, [pc, #12]	; (235d8 <am_hal_stimer_config+0x10>)
   235ca:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   235ce:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
   235d2:	4610      	mov	r0, r2
   235d4:	4770      	bx	lr
   235d6:	bf00      	nop
   235d8:	40008000 	.word	0x40008000

000235dc <am_hal_stimer_counter_get>:
   235dc:	4b01      	ldr	r3, [pc, #4]	; (235e4 <am_hal_stimer_counter_get+0x8>)
   235de:	f8d3 0144 	ldr.w	r0, [r3, #324]	; 0x144
   235e2:	4770      	bx	lr
   235e4:	40008000 	.word	0x40008000

000235e8 <am_hal_stimer_compare_delta_set>:
   235e8:	2807      	cmp	r0, #7
   235ea:	d900      	bls.n	235ee <am_hal_stimer_compare_delta_set+0x6>
   235ec:	4770      	bx	lr
   235ee:	b570      	push	{r4, r5, r6, lr}
   235f0:	b082      	sub	sp, #8
   235f2:	460c      	mov	r4, r1
   235f4:	4605      	mov	r5, r0
   235f6:	f7ff fe2d 	bl	23254 <am_hal_interrupt_master_disable>
   235fa:	4923      	ldr	r1, [pc, #140]	; (23688 <am_hal_stimer_compare_delta_set+0xa0>)
   235fc:	9001      	str	r0, [sp, #4]
   235fe:	4b23      	ldr	r3, [pc, #140]	; (2368c <am_hal_stimer_compare_delta_set+0xa4>)
   23600:	f8d1 0140 	ldr.w	r0, [r1, #320]	; 0x140
   23604:	f8d1 6140 	ldr.w	r6, [r1, #320]	; 0x140
   23608:	f44f 7280 	mov.w	r2, #256	; 0x100
   2360c:	442b      	add	r3, r5
   2360e:	40aa      	lsls	r2, r5
   23610:	ea26 0502 	bic.w	r5, r6, r2
   23614:	009b      	lsls	r3, r3, #2
   23616:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
   2361a:	f8d1 1144 	ldr.w	r1, [r1, #324]	; 0x144
   2361e:	601c      	str	r4, [r3, #0]
   23620:	681d      	ldr	r5, [r3, #0]
   23622:	4421      	add	r1, r4
   23624:	1a6e      	subs	r6, r5, r1
   23626:	2e00      	cmp	r6, #0
   23628:	db03      	blt.n	23632 <am_hal_stimer_compare_delta_set+0x4a>
   2362a:	310a      	adds	r1, #10
   2362c:	1a69      	subs	r1, r5, r1
   2362e:	2900      	cmp	r1, #0
   23630:	dd1e      	ble.n	23670 <am_hal_stimer_compare_delta_set+0x88>
   23632:	4915      	ldr	r1, [pc, #84]	; (23688 <am_hal_stimer_compare_delta_set+0xa0>)
   23634:	f8d1 1144 	ldr.w	r1, [r1, #324]	; 0x144
   23638:	601c      	str	r4, [r3, #0]
   2363a:	681d      	ldr	r5, [r3, #0]
   2363c:	4421      	add	r1, r4
   2363e:	1a6e      	subs	r6, r5, r1
   23640:	2e00      	cmp	r6, #0
   23642:	db03      	blt.n	2364c <am_hal_stimer_compare_delta_set+0x64>
   23644:	310a      	adds	r1, #10
   23646:	1a69      	subs	r1, r5, r1
   23648:	2900      	cmp	r1, #0
   2364a:	dd11      	ble.n	23670 <am_hal_stimer_compare_delta_set+0x88>
   2364c:	490e      	ldr	r1, [pc, #56]	; (23688 <am_hal_stimer_compare_delta_set+0xa0>)
   2364e:	f8d1 1144 	ldr.w	r1, [r1, #324]	; 0x144
   23652:	601c      	str	r4, [r3, #0]
   23654:	681d      	ldr	r5, [r3, #0]
   23656:	4421      	add	r1, r4
   23658:	1a6e      	subs	r6, r5, r1
   2365a:	2e00      	cmp	r6, #0
   2365c:	db03      	blt.n	23666 <am_hal_stimer_compare_delta_set+0x7e>
   2365e:	310a      	adds	r1, #10
   23660:	1a69      	subs	r1, r5, r1
   23662:	2900      	cmp	r1, #0
   23664:	dd04      	ble.n	23670 <am_hal_stimer_compare_delta_set+0x88>
   23666:	4908      	ldr	r1, [pc, #32]	; (23688 <am_hal_stimer_compare_delta_set+0xa0>)
   23668:	f8d1 1144 	ldr.w	r1, [r1, #324]	; 0x144
   2366c:	601c      	str	r4, [r3, #0]
   2366e:	681b      	ldr	r3, [r3, #0]
   23670:	4905      	ldr	r1, [pc, #20]	; (23688 <am_hal_stimer_compare_delta_set+0xa0>)
   23672:	f8d1 3140 	ldr.w	r3, [r1, #320]	; 0x140
   23676:	4002      	ands	r2, r0
   23678:	431a      	orrs	r2, r3
   2367a:	f8c1 2140 	str.w	r2, [r1, #320]	; 0x140
   2367e:	9801      	ldr	r0, [sp, #4]
   23680:	f7ff fdec 	bl	2325c <am_hal_interrupt_master_set>
   23684:	b002      	add	sp, #8
   23686:	bd70      	pop	{r4, r5, r6, pc}
   23688:	40008000 	.word	0x40008000
   2368c:	10002054 	.word	0x10002054

00023690 <am_hal_stimer_int_enable>:
   23690:	4a03      	ldr	r2, [pc, #12]	; (236a0 <am_hal_stimer_int_enable+0x10>)
   23692:	f8d2 3300 	ldr.w	r3, [r2, #768]	; 0x300
   23696:	4318      	orrs	r0, r3
   23698:	f8c2 0300 	str.w	r0, [r2, #768]	; 0x300
   2369c:	4770      	bx	lr
   2369e:	bf00      	nop
   236a0:	40008000 	.word	0x40008000

000236a4 <am_hal_stimer_int_clear>:
   236a4:	4b01      	ldr	r3, [pc, #4]	; (236ac <am_hal_stimer_int_clear+0x8>)
   236a6:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   236aa:	4770      	bx	lr
   236ac:	40008000 	.word	0x40008000

000236b0 <am_hal_stimer_int_status_get>:
   236b0:	4a04      	ldr	r2, [pc, #16]	; (236c4 <am_hal_stimer_int_status_get+0x14>)
   236b2:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
   236b6:	b110      	cbz	r0, 236be <am_hal_stimer_int_status_get+0xe>
   236b8:	f8d2 2300 	ldr.w	r2, [r2, #768]	; 0x300
   236bc:	4013      	ands	r3, r2
   236be:	4618      	mov	r0, r3
   236c0:	4770      	bx	lr
   236c2:	bf00      	nop
   236c4:	40008000 	.word	0x40008000

000236c8 <am_hal_sysctrl_sleep>:
   236c8:	b510      	push	{r4, lr}
   236ca:	b082      	sub	sp, #8
   236cc:	4604      	mov	r4, r0
   236ce:	f7ff fdc1 	bl	23254 <am_hal_interrupt_master_disable>
   236d2:	9001      	str	r0, [sp, #4]
   236d4:	b124      	cbz	r4, 236e0 <am_hal_sysctrl_sleep+0x18>
   236d6:	4b12      	ldr	r3, [pc, #72]	; (23720 <am_hal_sysctrl_sleep+0x58>)
   236d8:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
   236dc:	07db      	lsls	r3, r3, #31
   236de:	d512      	bpl.n	23706 <am_hal_sysctrl_sleep+0x3e>
   236e0:	4a10      	ldr	r2, [pc, #64]	; (23724 <am_hal_sysctrl_sleep+0x5c>)
   236e2:	6913      	ldr	r3, [r2, #16]
   236e4:	f023 0304 	bic.w	r3, r3, #4
   236e8:	6113      	str	r3, [r2, #16]
   236ea:	f3bf 8f4f 	dsb	sy
   236ee:	4a0e      	ldr	r2, [pc, #56]	; (23728 <am_hal_sysctrl_sleep+0x60>)
   236f0:	4b0e      	ldr	r3, [pc, #56]	; (2372c <am_hal_sysctrl_sleep+0x64>)
   236f2:	6812      	ldr	r2, [r2, #0]
   236f4:	601a      	str	r2, [r3, #0]
   236f6:	bf30      	wfi
   236f8:	f3bf 8f6f 	isb	sy
   236fc:	9801      	ldr	r0, [sp, #4]
   236fe:	f7ff fdad 	bl	2325c <am_hal_interrupt_master_set>
   23702:	b002      	add	sp, #8
   23704:	bd10      	pop	{r4, pc}
   23706:	4b0a      	ldr	r3, [pc, #40]	; (23730 <am_hal_sysctrl_sleep+0x68>)
   23708:	681a      	ldr	r2, [r3, #0]
   2370a:	b912      	cbnz	r2, 23712 <am_hal_sysctrl_sleep+0x4a>
   2370c:	4a09      	ldr	r2, [pc, #36]	; (23734 <am_hal_sysctrl_sleep+0x6c>)
   2370e:	6812      	ldr	r2, [r2, #0]
   23710:	601a      	str	r2, [r3, #0]
   23712:	4a04      	ldr	r2, [pc, #16]	; (23724 <am_hal_sysctrl_sleep+0x5c>)
   23714:	6913      	ldr	r3, [r2, #16]
   23716:	f043 0304 	orr.w	r3, r3, #4
   2371a:	6113      	str	r3, [r2, #16]
   2371c:	e7e5      	b.n	236ea <am_hal_sysctrl_sleep+0x22>
   2371e:	bf00      	nop
   23720:	40020000 	.word	0x40020000
   23724:	e000ed00 	.word	0xe000ed00
   23728:	5fff0000 	.word	0x5fff0000
   2372c:	10009164 	.word	0x10009164
   23730:	10009160 	.word	0x10009160
   23734:	4ffff000 	.word	0x4ffff000

00023738 <am_hal_sysctrl_fpu_enable>:
   23738:	4b02      	ldr	r3, [pc, #8]	; (23744 <am_hal_sysctrl_fpu_enable+0xc>)
   2373a:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   2373e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   23742:	4770      	bx	lr
   23744:	e000ed00 	.word	0xe000ed00

00023748 <am_hal_sysctrl_fpu_stacking_enable>:
   23748:	b510      	push	{r4, lr}
   2374a:	b082      	sub	sp, #8
   2374c:	4604      	mov	r4, r0
   2374e:	f7ff fd81 	bl	23254 <am_hal_interrupt_master_disable>
   23752:	4a09      	ldr	r2, [pc, #36]	; (23778 <am_hal_sysctrl_fpu_stacking_enable+0x30>)
   23754:	9001      	str	r0, [sp, #4]
   23756:	6853      	ldr	r3, [r2, #4]
   23758:	2c00      	cmp	r4, #0
   2375a:	bf14      	ite	ne
   2375c:	f04f 4140 	movne.w	r1, #3221225472	; 0xc0000000
   23760:	f04f 4100 	moveq.w	r1, #2147483648	; 0x80000000
   23764:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
   23768:	430b      	orrs	r3, r1
   2376a:	6053      	str	r3, [r2, #4]
   2376c:	9801      	ldr	r0, [sp, #4]
   2376e:	f7ff fd75 	bl	2325c <am_hal_interrupt_master_set>
   23772:	b002      	add	sp, #8
   23774:	bd10      	pop	{r4, pc}
   23776:	bf00      	nop
   23778:	e000ef30 	.word	0xe000ef30

0002377c <am_bsp_low_power_init>:
   2377c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2377e:	f000 f86d 	bl	2385c <am_hal_itm_disable>
   23782:	2000      	movs	r0, #0
   23784:	f7f9 fd60 	bl	1d248 <am_util_stdio_printf_init>
   23788:	4b12      	ldr	r3, [pc, #72]	; (237d4 <am_bsp_low_power_init+0x58>)
   2378a:	4f13      	ldr	r7, [pc, #76]	; (237d8 <am_bsp_low_power_init+0x5c>)
   2378c:	6819      	ldr	r1, [r3, #0]
   2378e:	2029      	movs	r0, #41	; 0x29
   23790:	f7ff fbda 	bl	22f48 <am_hal_gpio_pinconfig>
   23794:	f7ff fe52 	bl	2343c <am_hal_pwrctrl_low_power_init>
   23798:	2001      	movs	r0, #1
   2379a:	f000 f8cd 	bl	23938 <am_hal_rtc_osc_select>
   2379e:	2100      	movs	r1, #0
   237a0:	2003      	movs	r0, #3
   237a2:	f7ff fabd 	bl	22d20 <am_hal_clkgen_control>
   237a6:	f000 f8d3 	bl	23950 <am_hal_rtc_osc_disable>
   237aa:	4b0c      	ldr	r3, [pc, #48]	; (237dc <am_bsp_low_power_init+0x60>)
   237ac:	681e      	ldr	r6, [r3, #0]
   237ae:	2400      	movs	r4, #0
   237b0:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
   237b4:	4631      	mov	r1, r6
   237b6:	4628      	mov	r0, r5
   237b8:	f7ff fbc6 	bl	22f48 <am_hal_gpio_pinconfig>
   237bc:	2103      	movs	r1, #3
   237be:	4628      	mov	r0, r5
   237c0:	f7ff fd04 	bl	231cc <am_hal_gpio_state_write>
   237c4:	3401      	adds	r4, #1
   237c6:	4628      	mov	r0, r5
   237c8:	2100      	movs	r1, #0
   237ca:	f7ff fcff 	bl	231cc <am_hal_gpio_state_write>
   237ce:	2c03      	cmp	r4, #3
   237d0:	d1ee      	bne.n	237b0 <am_bsp_low_power_init+0x34>
   237d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   237d4:	00027584 	.word	0x00027584
   237d8:	100035d8 	.word	0x100035d8
   237dc:	00027588 	.word	0x00027588

000237e0 <am_bsp_itm_printf_enable>:
   237e0:	b500      	push	{lr}
   237e2:	4b0b      	ldr	r3, [pc, #44]	; (23810 <am_bsp_itm_printf_enable+0x30>)
   237e4:	b087      	sub	sp, #28
   237e6:	2201      	movs	r2, #1
   237e8:	601a      	str	r2, [r3, #0]
   237ea:	f000 f819 	bl	23820 <am_hal_itm_enable>
   237ee:	a806      	add	r0, sp, #24
   237f0:	4b08      	ldr	r3, [pc, #32]	; (23814 <am_bsp_itm_printf_enable+0x34>)
   237f2:	f840 3d14 	str.w	r3, [r0, #-20]!
   237f6:	f000 f8b5 	bl	23964 <am_hal_tpiu_enable>
   237fa:	4b07      	ldr	r3, [pc, #28]	; (23818 <am_bsp_itm_printf_enable+0x38>)
   237fc:	2029      	movs	r0, #41	; 0x29
   237fe:	6819      	ldr	r1, [r3, #0]
   23800:	f7ff fba2 	bl	22f48 <am_hal_gpio_pinconfig>
   23804:	4805      	ldr	r0, [pc, #20]	; (2381c <am_bsp_itm_printf_enable+0x3c>)
   23806:	f7f9 fd1f 	bl	1d248 <am_util_stdio_printf_init>
   2380a:	b007      	add	sp, #28
   2380c:	f85d fb04 	ldr.w	pc, [sp], #4
   23810:	10009168 	.word	0x10009168
   23814:	000f4240 	.word	0x000f4240
   23818:	000276f8 	.word	0x000276f8
   2381c:	00023909 	.word	0x00023909

00023820 <am_hal_itm_enable>:
   23820:	4a0b      	ldr	r2, [pc, #44]	; (23850 <am_hal_itm_enable+0x30>)
   23822:	68d3      	ldr	r3, [r2, #12]
   23824:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   23828:	60d3      	str	r3, [r2, #12]
   2382a:	68d3      	ldr	r3, [r2, #12]
   2382c:	01db      	lsls	r3, r3, #7
   2382e:	d5fc      	bpl.n	2382a <am_hal_itm_enable+0xa>
   23830:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
   23834:	4907      	ldr	r1, [pc, #28]	; (23854 <am_hal_itm_enable+0x34>)
   23836:	f8c3 1fb0 	str.w	r1, [r3, #4016]	; 0xfb0
   2383a:	4a07      	ldr	r2, [pc, #28]	; (23858 <am_hal_itm_enable+0x38>)
   2383c:	200f      	movs	r0, #15
   2383e:	f04f 31ff 	mov.w	r1, #4294967295
   23842:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
   23846:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
   2384a:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
   2384e:	4770      	bx	lr
   23850:	e000edf0 	.word	0xe000edf0
   23854:	c5acce55 	.word	0xc5acce55
   23858:	00150511 	.word	0x00150511

0002385c <am_hal_itm_disable>:
   2385c:	b510      	push	{r4, lr}
   2385e:	4b25      	ldr	r3, [pc, #148]	; (238f4 <am_hal_itm_disable+0x98>)
   23860:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
   23864:	b9b3      	cbnz	r3, 23894 <am_hal_itm_disable+0x38>
   23866:	4b24      	ldr	r3, [pc, #144]	; (238f8 <am_hal_itm_disable+0x9c>)
   23868:	68da      	ldr	r2, [r3, #12]
   2386a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   2386e:	60da      	str	r2, [r3, #12]
   23870:	68da      	ldr	r2, [r3, #12]
   23872:	01d2      	lsls	r2, r2, #7
   23874:	d5fc      	bpl.n	23870 <am_hal_itm_disable+0x14>
   23876:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
   2387a:	4920      	ldr	r1, [pc, #128]	; (238fc <am_hal_itm_disable+0xa0>)
   2387c:	f8c3 1fb0 	str.w	r1, [r3, #4016]	; 0xfb0
   23880:	4a1f      	ldr	r2, [pc, #124]	; (23900 <am_hal_itm_disable+0xa4>)
   23882:	200f      	movs	r0, #15
   23884:	f04f 31ff 	mov.w	r1, #4294967295
   23888:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
   2388c:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
   23890:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
   23894:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   23898:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
   2389c:	021b      	lsls	r3, r3, #8
   2389e:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
   238a2:	d4f9      	bmi.n	23898 <am_hal_itm_disable+0x3c>
   238a4:	f44f 7048 	mov.w	r0, #800	; 0x320
   238a8:	f7ff fb04 	bl	22eb4 <am_hal_flash_delay>
   238ac:	4b13      	ldr	r3, [pc, #76]	; (238fc <am_hal_itm_disable+0xa0>)
   238ae:	f8c4 3fb0 	str.w	r3, [r4, #4016]	; 0xfb0
   238b2:	4621      	mov	r1, r4
   238b4:	2064      	movs	r0, #100	; 0x64
   238b6:	f8d1 3e80 	ldr.w	r3, [r1, #3712]	; 0xe80
   238ba:	f023 0301 	bic.w	r3, r3, #1
   238be:	f8c1 3e80 	str.w	r3, [r1, #3712]	; 0xe80
   238c2:	f8d1 2e80 	ldr.w	r2, [r1, #3712]	; 0xe80
   238c6:	4b0f      	ldr	r3, [pc, #60]	; (23904 <am_hal_itm_disable+0xa8>)
   238c8:	4013      	ands	r3, r2
   238ca:	2b00      	cmp	r3, #0
   238cc:	d1f9      	bne.n	238c2 <am_hal_itm_disable+0x66>
   238ce:	3801      	subs	r0, #1
   238d0:	d1f1      	bne.n	238b6 <am_hal_itm_disable+0x5a>
   238d2:	4a09      	ldr	r2, [pc, #36]	; (238f8 <am_hal_itm_disable+0x9c>)
   238d4:	68d3      	ldr	r3, [r2, #12]
   238d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   238da:	60d3      	str	r3, [r2, #12]
   238dc:	68d3      	ldr	r3, [r2, #12]
   238de:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
   238e2:	d1fb      	bne.n	238dc <am_hal_itm_disable+0x80>
   238e4:	4a03      	ldr	r2, [pc, #12]	; (238f4 <am_hal_itm_disable+0x98>)
   238e6:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
   238ea:	f8d2 3250 	ldr.w	r3, [r2, #592]	; 0x250
   238ee:	2b00      	cmp	r3, #0
   238f0:	d1fb      	bne.n	238ea <am_hal_itm_disable+0x8e>
   238f2:	bd10      	pop	{r4, pc}
   238f4:	40020000 	.word	0x40020000
   238f8:	e000edf0 	.word	0xe000edf0
   238fc:	c5acce55 	.word	0xc5acce55
   23900:	00150511 	.word	0x00150511
   23904:	00800001 	.word	0x00800001

00023908 <am_hal_itm_print>:
   23908:	7803      	ldrb	r3, [r0, #0]
   2390a:	b1a3      	cbz	r3, 23936 <am_hal_itm_print+0x2e>
   2390c:	4602      	mov	r2, r0
   2390e:	2300      	movs	r3, #0
   23910:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   23914:	3301      	adds	r3, #1
   23916:	2900      	cmp	r1, #0
   23918:	d1fa      	bne.n	23910 <am_hal_itm_print+0x8>
   2391a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   2391e:	b430      	push	{r4, r5}
   23920:	18c1      	adds	r1, r0, r3
   23922:	4615      	mov	r5, r2
   23924:	f810 4b01 	ldrb.w	r4, [r0], #1
   23928:	6813      	ldr	r3, [r2, #0]
   2392a:	2b00      	cmp	r3, #0
   2392c:	d0fc      	beq.n	23928 <am_hal_itm_print+0x20>
   2392e:	4288      	cmp	r0, r1
   23930:	702c      	strb	r4, [r5, #0]
   23932:	d1f7      	bne.n	23924 <am_hal_itm_print+0x1c>
   23934:	bc30      	pop	{r4, r5}
   23936:	4770      	bx	lr

00023938 <am_hal_rtc_osc_select>:
   23938:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   2393c:	2801      	cmp	r0, #1
   2393e:	68d3      	ldr	r3, [r2, #12]
   23940:	bf0c      	ite	eq
   23942:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
   23946:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
   2394a:	60d3      	str	r3, [r2, #12]
   2394c:	4770      	bx	lr
   2394e:	bf00      	nop

00023950 <am_hal_rtc_osc_disable>:
   23950:	4a03      	ldr	r2, [pc, #12]	; (23960 <am_hal_rtc_osc_disable+0x10>)
   23952:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
   23956:	f043 0310 	orr.w	r3, r3, #16
   2395a:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
   2395e:	4770      	bx	lr
   23960:	40004200 	.word	0x40004200

00023964 <am_hal_tpiu_enable>:
   23964:	b530      	push	{r4, r5, lr}
   23966:	4a23      	ldr	r2, [pc, #140]	; (239f4 <am_hal_tpiu_enable+0x90>)
   23968:	6804      	ldr	r4, [r0, #0]
   2396a:	2300      	movs	r3, #0
   2396c:	b085      	sub	sp, #20
   2396e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
   23972:	b334      	cbz	r4, 239c2 <am_hal_tpiu_enable+0x5e>
   23974:	4b20      	ldr	r3, [pc, #128]	; (239f8 <am_hal_tpiu_enable+0x94>)
   23976:	4921      	ldr	r1, [pc, #132]	; (239fc <am_hal_tpiu_enable+0x98>)
   23978:	2001      	movs	r0, #1
   2397a:	6050      	str	r0, [r2, #4]
   2397c:	f5a4 4261 	sub.w	r2, r4, #57600	; 0xe100
   23980:	a801      	add	r0, sp, #4
   23982:	428a      	cmp	r2, r1
   23984:	bf88      	it	hi
   23986:	461c      	movhi	r4, r3
   23988:	f7ff fa36 	bl	22df8 <am_hal_clkgen_status_get>
   2398c:	9b01      	ldr	r3, [sp, #4]
   2398e:	1c5a      	adds	r2, r3, #1
   23990:	d02d      	beq.n	239ee <am_hal_tpiu_enable+0x8a>
   23992:	08db      	lsrs	r3, r3, #3
   23994:	fbb3 f3f4 	udiv	r3, r3, r4
   23998:	3b01      	subs	r3, #1
   2399a:	b29b      	uxth	r3, r3
   2399c:	4a15      	ldr	r2, [pc, #84]	; (239f4 <am_hal_tpiu_enable+0x90>)
   2399e:	4918      	ldr	r1, [pc, #96]	; (23a00 <am_hal_tpiu_enable+0x9c>)
   239a0:	6113      	str	r3, [r2, #16]
   239a2:	2402      	movs	r4, #2
   239a4:	f240 2301 	movw	r3, #513	; 0x201
   239a8:	2000      	movs	r0, #0
   239aa:	f8c2 40f0 	str.w	r4, [r2, #240]	; 0xf0
   239ae:	f8c2 0f00 	str.w	r0, [r2, #3840]	; 0xf00
   239b2:	f8c1 3250 	str.w	r3, [r1, #592]	; 0x250
   239b6:	f44f 7048 	mov.w	r0, #800	; 0x320
   239ba:	f7ff fa7b 	bl	22eb4 <am_hal_flash_delay>
   239be:	b005      	add	sp, #20
   239c0:	bd30      	pop	{r4, r5, pc}
   239c2:	6903      	ldr	r3, [r0, #16]
   239c4:	6113      	str	r3, [r2, #16]
   239c6:	6883      	ldr	r3, [r0, #8]
   239c8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
   239cc:	68c3      	ldr	r3, [r0, #12]
   239ce:	4d0c      	ldr	r5, [pc, #48]	; (23a00 <am_hal_tpiu_enable+0x9c>)
   239d0:	1e59      	subs	r1, r3, #1
   239d2:	2301      	movs	r3, #1
   239d4:	408b      	lsls	r3, r1
   239d6:	6053      	str	r3, [r2, #4]
   239d8:	f8c2 4f00 	str.w	r4, [r2, #3840]	; 0xf00
   239dc:	6843      	ldr	r3, [r0, #4]
   239de:	f8c5 3250 	str.w	r3, [r5, #592]	; 0x250
   239e2:	f44f 7048 	mov.w	r0, #800	; 0x320
   239e6:	f7ff fa65 	bl	22eb4 <am_hal_flash_delay>
   239ea:	b005      	add	sp, #20
   239ec:	bd30      	pop	{r4, r5, pc}
   239ee:	2305      	movs	r3, #5
   239f0:	e7d4      	b.n	2399c <am_hal_tpiu_enable+0x38>
   239f2:	bf00      	nop
   239f4:	e0040000 	.word	0xe0040000
   239f8:	000f4240 	.word	0x000f4240
   239fc:	001da380 	.word	0x001da380
   23a00:	40020000 	.word	0x40020000
   23a04:	20465357 	.word	0x20465357
   23a08:	20636573 	.word	0x20636573
   23a0c:	20746f6e 	.word	0x20746f6e
   23a10:	69676572 	.word	0x69676572
   23a14:	72657473 	.word	0x72657473
   23a18:	00006465 	.word	0x00006465
   23a1c:	20465357 	.word	0x20465357
   23a20:	20636573 	.word	0x20636573
   23a24:	75657571 	.word	0x75657571
   23a28:	6d652065 	.word	0x6d652065
   23a2c:	21797470 	.word	0x21797470
   23a30:	00000000 	.word	0x00000000
   23a34:	58323025 	.word	0x58323025
   23a38:	00000020 	.word	0x00000020
   23a3c:	0000000a 	.word	0x0000000a
   23a40:	00000a0a 	.word	0x00000a0a
   23a44:	2e2f2e2e 	.word	0x2e2f2e2e
   23a48:	2e2e2f2e 	.word	0x2e2e2f2e
   23a4c:	2f2e2e2f 	.word	0x2f2e2e2f
   23a50:	742f2e2e 	.word	0x742f2e2e
   23a54:	64726968 	.word	0x64726968
   23a58:	7261705f 	.word	0x7261705f
   23a5c:	652f7974 	.word	0x652f7974
   23a60:	74636178 	.word	0x74636178
   23a64:	772f656c 	.word	0x772f656c
   23a68:	6f632d73 	.word	0x6f632d73
   23a6c:	732f6572 	.word	0x732f6572
   23a70:	73772f77 	.word	0x73772f77
   23a74:	6d612f66 	.word	0x6d612f66
   23a78:	2f716962 	.word	0x2f716962
   23a7c:	5f667377 	.word	0x5f667377
   23a80:	63617274 	.word	0x63617274
   23a84:	00632e65 	.word	0x00632e65
   23a88:	4f525245 	.word	0x4f525245
   23a8c:	48435f52 	.word	0x48435f52
   23a90:	5f4b4345 	.word	0x5f4b4345
   23a94:	44494f56 	.word	0x44494f56
   23a98:	5f6d6120 	.word	0x5f6d6120
   23a9c:	5f6c6168 	.word	0x5f6c6168
   23aa0:	5f656c62 	.word	0x5f656c62
   23aa4:	74696e69 	.word	0x74696e69
   23aa8:	696c6169 	.word	0x696c6169
   23aac:	3028657a 	.word	0x3028657a
   23ab0:	4226202c 	.word	0x4226202c
   23ab4:	0a29454c 	.word	0x0a29454c
   23ab8:	00000000 	.word	0x00000000
   23abc:	4f525245 	.word	0x4f525245
   23ac0:	48435f52 	.word	0x48435f52
   23ac4:	5f4b4345 	.word	0x5f4b4345
   23ac8:	44494f56 	.word	0x44494f56
   23acc:	5f6d6120 	.word	0x5f6d6120
   23ad0:	5f6c6168 	.word	0x5f6c6168
   23ad4:	5f656c62 	.word	0x5f656c62
   23ad8:	65776f70 	.word	0x65776f70
   23adc:	6f635f72 	.word	0x6f635f72
   23ae0:	6f72746e 	.word	0x6f72746e
   23ae4:	4c42286c 	.word	0x4c42286c
   23ae8:	41202c45 	.word	0x41202c45
   23aec:	41485f4d 	.word	0x41485f4d
   23af0:	4c425f4c 	.word	0x4c425f4c
   23af4:	4f505f45 	.word	0x4f505f45
   23af8:	5f524557 	.word	0x5f524557
   23afc:	49544341 	.word	0x49544341
   23b00:	0a294556 	.word	0x0a294556
   23b04:	00000000 	.word	0x00000000
   23b08:	4f525245 	.word	0x4f525245
   23b0c:	48435f52 	.word	0x48435f52
   23b10:	5f4b4345 	.word	0x5f4b4345
   23b14:	44494f56 	.word	0x44494f56
   23b18:	5f6d6120 	.word	0x5f6d6120
   23b1c:	5f6c6168 	.word	0x5f6c6168
   23b20:	5f656c62 	.word	0x5f656c62
   23b24:	666e6f63 	.word	0x666e6f63
   23b28:	42286769 	.word	0x42286769
   23b2c:	202c454c 	.word	0x202c454c
   23b30:	6c427326 	.word	0x6c427326
   23b34:	6e6f4365 	.word	0x6e6f4365
   23b38:	29676966 	.word	0x29676966
   23b3c:	0000000a 	.word	0x0000000a
   23b40:	4f525245 	.word	0x4f525245
   23b44:	48435f52 	.word	0x48435f52
   23b48:	5f4b4345 	.word	0x5f4b4345
   23b4c:	44494f56 	.word	0x44494f56
   23b50:	5f6d6120 	.word	0x5f6d6120
   23b54:	5f6c6168 	.word	0x5f6c6168
   23b58:	5f656c62 	.word	0x5f656c62
   23b5c:	65776f70 	.word	0x65776f70
   23b60:	6f635f72 	.word	0x6f635f72
   23b64:	6f72746e 	.word	0x6f72746e
   23b68:	4c42286c 	.word	0x4c42286c
   23b6c:	41202c45 	.word	0x41202c45
   23b70:	41485f4d 	.word	0x41485f4d
   23b74:	4c425f4c 	.word	0x4c425f4c
   23b78:	4f505f45 	.word	0x4f505f45
   23b7c:	5f524557 	.word	0x5f524557
   23b80:	2946464f 	.word	0x2946464f
   23b84:	0000000a 	.word	0x0000000a
   23b88:	4f525245 	.word	0x4f525245
   23b8c:	48435f52 	.word	0x48435f52
   23b90:	5f4b4345 	.word	0x5f4b4345
   23b94:	44494f56 	.word	0x44494f56
   23b98:	5f6d6120 	.word	0x5f6d6120
   23b9c:	5f6c6168 	.word	0x5f6c6168
   23ba0:	5f656c62 	.word	0x5f656c62
   23ba4:	6e696564 	.word	0x6e696564
   23ba8:	61697469 	.word	0x61697469
   23bac:	657a696c 	.word	0x657a696c
   23bb0:	454c4228 	.word	0x454c4228
   23bb4:	00000a29 	.word	0x00000a29
   23bb8:	00000004 	.word	0x00000004
   23bbc:	00000020 	.word	0x00000020
   23bc0:	00000020 	.word	0x00000020
   23bc4:	00000002 	.word	0x00000002
   23bc8:	00000000 	.word	0x00000000
   23bcc:	00000032 	.word	0x00000032
   23bd0:	00010101 	.word	0x00010101
   23bd4:	4f525245 	.word	0x4f525245
   23bd8:	48435f52 	.word	0x48435f52
   23bdc:	5f4b4345 	.word	0x5f4b4345
   23be0:	44494f56 	.word	0x44494f56
   23be4:	49434820 	.word	0x49434820
   23be8:	5652445f 	.word	0x5652445f
   23bec:	5f58525f 	.word	0x5f58525f
   23bf0:	4b434150 	.word	0x4b434150
   23bf4:	545f5445 	.word	0x545f5445
   23bf8:	4c5f4f4f 	.word	0x4c5f4f4f
   23bfc:	45475241 	.word	0x45475241
   23c00:	0000000a 	.word	0x0000000a
   23c04:	42667357 	.word	0x42667357
   23c08:	6c416675 	.word	0x6c416675
   23c0c:	20636f6c 	.word	0x20636f6c
   23c10:	6c696166 	.word	0x6c696166
   23c14:	6c206465 	.word	0x6c206465
   23c18:	253a6e65 	.word	0x253a6e65
   23c1c:	00000075 	.word	0x00000075
   23c20:	203e3e3e 	.word	0x203e3e3e
   23c24:	65736552 	.word	0x65736552
   23c28:	6f632074 	.word	0x6f632074
   23c2c:	656c706d 	.word	0x656c706d
   23c30:	3c206574 	.word	0x3c206574
   23c34:	00003c3c 	.word	0x00003c3c
   23c38:	203e3e3e 	.word	0x203e3e3e
   23c3c:	65766441 	.word	0x65766441
   23c40:	73697472 	.word	0x73697472
   23c44:	20676e69 	.word	0x20676e69
   23c48:	72617473 	.word	0x72617473
   23c4c:	20646574 	.word	0x20646574
   23c50:	003c3c3c 	.word	0x003c3c3c
   23c54:	203e3e3e 	.word	0x203e3e3e
   23c58:	65766441 	.word	0x65766441
   23c5c:	73697472 	.word	0x73697472
   23c60:	20676e69 	.word	0x20676e69
   23c64:	706f7473 	.word	0x706f7473
   23c68:	20646570 	.word	0x20646570
   23c6c:	003c3c3c 	.word	0x003c3c3c
   23c70:	203e3e3e 	.word	0x203e3e3e
   23c74:	6e616353 	.word	0x6e616353
   23c78:	676e696e 	.word	0x676e696e
   23c7c:	61747320 	.word	0x61747320
   23c80:	64657472 	.word	0x64657472
   23c84:	3c3c3c20 	.word	0x3c3c3c20
   23c88:	00000000 	.word	0x00000000
   23c8c:	203e3e3e 	.word	0x203e3e3e
   23c90:	6e616353 	.word	0x6e616353
   23c94:	676e696e 	.word	0x676e696e
   23c98:	6f747320 	.word	0x6f747320
   23c9c:	64657070 	.word	0x64657070
   23ca0:	3c3c3c20 	.word	0x3c3c3c20
   23ca4:	00000000 	.word	0x00000000
   23ca8:	203e3e3e 	.word	0x203e3e3e
   23cac:	6e616353 	.word	0x6e616353
   23cb0:	74616420 	.word	0x74616420
   23cb4:	65722061 	.word	0x65722061
   23cb8:	76696563 	.word	0x76696563
   23cbc:	66206465 	.word	0x66206465
   23cc0:	206d6f72 	.word	0x206d6f72
   23cc4:	72656570 	.word	0x72656570
   23cc8:	3c3c3c20 	.word	0x3c3c3c20
   23ccc:	00000000 	.word	0x00000000
   23cd0:	203e3e3e 	.word	0x203e3e3e
   23cd4:	6e6e6f43 	.word	0x6e6e6f43
   23cd8:	69746365 	.word	0x69746365
   23cdc:	6f206e6f 	.word	0x6f206e6f
   23ce0:	656e6570 	.word	0x656e6570
   23ce4:	3c3c2064 	.word	0x3c3c2064
   23ce8:	0000003c 	.word	0x0000003c
   23cec:	203e3e3e 	.word	0x203e3e3e
   23cf0:	6e6e6f43 	.word	0x6e6e6f43
   23cf4:	69746365 	.word	0x69746365
   23cf8:	63206e6f 	.word	0x63206e6f
   23cfc:	65736f6c 	.word	0x65736f6c
   23d00:	3c3c2064 	.word	0x3c3c2064
   23d04:	0000003c 	.word	0x0000003c
   23d08:	203e3e3e 	.word	0x203e3e3e
   23d0c:	72696150 	.word	0x72696150
   23d10:	20676e69 	.word	0x20676e69
   23d14:	706d6f63 	.word	0x706d6f63
   23d18:	6574656c 	.word	0x6574656c
   23d1c:	75732064 	.word	0x75732064
   23d20:	73656363 	.word	0x73656363
   23d24:	6c756673 	.word	0x6c756673
   23d28:	3c20796c 	.word	0x3c20796c
   23d2c:	00003c3c 	.word	0x00003c3c
   23d30:	203e3e3e 	.word	0x203e3e3e
   23d34:	72696150 	.word	0x72696150
   23d38:	20676e69 	.word	0x20676e69
   23d3c:	6c696166 	.word	0x6c696166
   23d40:	3c206465 	.word	0x3c206465
   23d44:	00003c3c 	.word	0x00003c3c
   23d48:	203e3e3e 	.word	0x203e3e3e
   23d4c:	6e6e6f43 	.word	0x6e6e6f43
   23d50:	69746365 	.word	0x69746365
   23d54:	65206e6f 	.word	0x65206e6f
   23d58:	7972636e 	.word	0x7972636e
   23d5c:	64657470 	.word	0x64657470
   23d60:	3c3c3c20 	.word	0x3c3c3c20
   23d64:	00000000 	.word	0x00000000
   23d68:	203e3e3e 	.word	0x203e3e3e
   23d6c:	72636e45 	.word	0x72636e45
   23d70:	69747079 	.word	0x69747079
   23d74:	66206e6f 	.word	0x66206e6f
   23d78:	656c6961 	.word	0x656c6961
   23d7c:	3c3c2064 	.word	0x3c3c2064
   23d80:	0000003c 	.word	0x0000003c
   23d84:	203e3e3e 	.word	0x203e3e3e
   23d88:	6d6f7250 	.word	0x6d6f7250
   23d8c:	75207470 	.word	0x75207470
   23d90:	20726573 	.word	0x20726573
   23d94:	65206f74 	.word	0x65206f74
   23d98:	7265746e 	.word	0x7265746e
   23d9c:	73617020 	.word	0x73617020
   23da0:	79656b73 	.word	0x79656b73
   23da4:	3c3c3c20 	.word	0x3c3c3c20
   23da8:	00000000 	.word	0x00000000
   23dac:	203e3e3e 	.word	0x203e3e3e
   23db0:	636e6143 	.word	0x636e6143
   23db4:	61206c65 	.word	0x61206c65
   23db8:	776f6c20 	.word	0x776f6c20
   23dbc:	20726f20 	.word	0x20726f20
   23dc0:	68676968 	.word	0x68676968
   23dc4:	656c6120 	.word	0x656c6120
   23dc8:	3c207472 	.word	0x3c207472
   23dcc:	00003c3c 	.word	0x00003c3c
   23dd0:	203e3e3e 	.word	0x203e3e3e
   23dd4:	20776f4c 	.word	0x20776f4c
   23dd8:	72656c61 	.word	0x72656c61
   23ddc:	3c3c2074 	.word	0x3c3c2074
   23de0:	0000003c 	.word	0x0000003c
   23de4:	203e3e3e 	.word	0x203e3e3e
   23de8:	68676948 	.word	0x68676948
   23dec:	656c6120 	.word	0x656c6120
   23df0:	3c207472 	.word	0x3c207472
   23df4:	00003c3c 	.word	0x00003c3c
   23df8:	203e3e3e 	.word	0x203e3e3e
   23dfc:	73736150 	.word	0x73736150
   23e00:	3a79656b 	.word	0x3a79656b
   23e04:	20642520 	.word	0x20642520
   23e08:	003c3c3c 	.word	0x003c3c3c
   23e0c:	203e3e3e 	.word	0x203e3e3e
   23e10:	666e6f43 	.word	0x666e6f43
   23e14:	206d7269 	.word	0x206d7269
   23e18:	756c6156 	.word	0x756c6156
   23e1c:	25203a65 	.word	0x25203a65
   23e20:	3c3c2064 	.word	0x3c3c2064
   23e24:	0000003c 	.word	0x0000003c
   23e28:	203e3e3e 	.word	0x203e3e3e
   23e2c:	49535352 	.word	0x49535352
   23e30:	6425203a 	.word	0x6425203a
   23e34:	6d426420 	.word	0x6d426420
   23e38:	003c3c3c 	.word	0x003c3c3c
   23e3c:	20636363 	.word	0x20636363
   23e40:	74617473 	.word	0x74617473
   23e44:	6e692065 	.word	0x6e692065
   23e48:	61762064 	.word	0x61762064
   23e4c:	3a65756c 	.word	0x3a65756c
   23e50:	68206425 	.word	0x68206425
   23e54:	6c646e61 	.word	0x6c646e61
   23e58:	64253a65 	.word	0x64253a65
   23e5c:	78646920 	.word	0x78646920
   23e60:	0064253a 	.word	0x0064253a
   23e64:	61746144 	.word	0x61746144
   23e68:	63657220 	.word	0x63657220
   23e6c:	65766965 	.word	0x65766965
   23e70:	72662064 	.word	0x72662064
   23e74:	6f206d6f 	.word	0x6f206d6f
   23e78:	72656874 	.word	0x72656874
   23e7c:	68746f20 	.word	0x68746f20
   23e80:	68207265 	.word	0x68207265
   23e84:	6c646e61 	.word	0x6c646e61
   23e88:	00000065 	.word	0x00000065
   23e8c:	206e7462 	.word	0x206e7462
   23e90:	6425203d 	.word	0x6425203d
   23e94:	00000000 	.word	0x00000000
   23e98:	21212121 	.word	0x21212121
   23e9c:	73694421 	.word	0x73694421
   23ea0:	61462063 	.word	0x61462063
   23ea4:	64656c69 	.word	0x64656c69
   23ea8:	6964202e 	.word	0x6964202e
   23eac:	74536373 	.word	0x74536373
   23eb0:	20657461 	.word	0x20657461
   23eb4:	6425203d 	.word	0x6425203d
   23eb8:	21212121 	.word	0x21212121
   23ebc:	00000021 	.word	0x00000021
   23ec0:	63736944 	.word	0x63736944
   23ec4:	7265766f 	.word	0x7265766f
   23ec8:	20676e69 	.word	0x20676e69
   23ecc:	53434e41 	.word	0x53434e41
   23ed0:	0000002e 	.word	0x0000002e
   23ed4:	696e6946 	.word	0x696e6946
   23ed8:	64656873 	.word	0x64656873
   23edc:	434e4120 	.word	0x434e4120
   23ee0:	69642053 	.word	0x69642053
   23ee4:	766f6373 	.word	0x766f6373
   23ee8:	6e697265 	.word	0x6e697265
   23eec:	00002e67 	.word	0x00002e67
   23ef0:	63736944 	.word	0x63736944
   23ef4:	47464320 	.word	0x47464320
   23ef8:	61747320 	.word	0x61747320
   23efc:	002e7472 	.word	0x002e7472
   23f00:	696e6946 	.word	0x696e6946
   23f04:	64656873 	.word	0x64656873
   23f08:	73694420 	.word	0x73694420
   23f0c:	46432063 	.word	0x46432063
   23f10:	00002e47 	.word	0x00002e47
   23f14:	2d2d2d2d 	.word	0x2d2d2d2d
   23f18:	2d2d2d2d 	.word	0x2d2d2d2d
   23f1c:	2d2d2d2d 	.word	0x2d2d2d2d
   23f20:	43545441 	.word	0x43545441
   23f24:	4e41485f 	.word	0x4e41485f
   23f28:	5f454c44 	.word	0x5f454c44
   23f2c:	554c4156 	.word	0x554c4156
   23f30:	544e5f45 	.word	0x544e5f45
   23f34:	4e492f46 	.word	0x4e492f46
   23f38:	2d2d2d44 	.word	0x2d2d2d44
   23f3c:	2d2d2d2d 	.word	0x2d2d2d2d
   23f40:	2d2d2d2d 	.word	0x2d2d2d2d
   23f44:	0000002d 	.word	0x0000002d
   23f48:	2d2d2d2d 	.word	0x2d2d2d2d
   23f4c:	2d2d2d2d 	.word	0x2d2d2d2d
   23f50:	2d2d2d2d 	.word	0x2d2d2d2d
   23f54:	43545441 	.word	0x43545441
   23f58:	4952575f 	.word	0x4952575f
   23f5c:	525f4554 	.word	0x525f4554
   23f60:	2d2d5053 	.word	0x2d2d5053
   23f64:	2d2d2d2d 	.word	0x2d2d2d2d
   23f68:	2d2d2d2d 	.word	0x2d2d2d2d
   23f6c:	00002d2d 	.word	0x00002d2d
   23f70:	6f67654e 	.word	0x6f67654e
   23f74:	74616974 	.word	0x74616974
   23f78:	4d206465 	.word	0x4d206465
   23f7c:	25205554 	.word	0x25205554
   23f80:	00000064 	.word	0x00000064
   23f84:	2d2d2d2d 	.word	0x2d2d2d2d
   23f88:	2d2d2d2d 	.word	0x2d2d2d2d
   23f8c:	2d2d2d2d 	.word	0x2d2d2d2d
   23f90:	2055544d 	.word	0x2055544d
   23f94:	455a4953 	.word	0x455a4953
   23f98:	25203d20 	.word	0x25203d20
   23f9c:	2d2d2d64 	.word	0x2d2d2d64
   23fa0:	2d2d2d2d 	.word	0x2d2d2d2d
   23fa4:	2d2d2d2d 	.word	0x2d2d2d2d
   23fa8:	0000002d 	.word	0x0000002d
   23fac:	73636e41 	.word	0x73636e41
   23fb0:	646e6148 	.word	0x646e6148
   23fb4:	4972656c 	.word	0x4972656c
   23fb8:	0074696e 	.word	0x0074696e
   23fbc:	53434e41 	.word	0x53434e41
   23fc0:	746f6720 	.word	0x746f6720
   23fc4:	74766520 	.word	0x74766520
   23fc8:	20642520 	.word	0x20642520
   23fcc:	68206e6f 	.word	0x68206e6f
   23fd0:	6c646e61 	.word	0x6c646e61
   23fd4:	78302065 	.word	0x78302065
   23fd8:	78343025 	.word	0x78343025
   23fdc:	00000000 	.word	0x00000000
   23fe0:	2a2a2a2a 	.word	0x2a2a2a2a
   23fe4:	2a2a2a2a 	.word	0x2a2a2a2a
   23fe8:	2a2a2a2a 	.word	0x2a2a2a2a
   23fec:	2a2a2a2a 	.word	0x2a2a2a2a
   23ff0:	2a2a2a2a 	.word	0x2a2a2a2a
   23ff4:	2a2a2a2a 	.word	0x2a2a2a2a
   23ff8:	2a2a2a2a 	.word	0x2a2a2a2a
   23ffc:	2a2a2a2a 	.word	0x2a2a2a2a
   24000:	2a2a2a2a 	.word	0x2a2a2a2a
   24004:	2a2a2a2a 	.word	0x2a2a2a2a
   24008:	2a2a2a2a 	.word	0x2a2a2a2a
   2400c:	2a2a2a2a 	.word	0x2a2a2a2a
   24010:	2a2a2a2a 	.word	0x2a2a2a2a
   24014:	2a2a2a2a 	.word	0x2a2a2a2a
   24018:	2a2a2a2a 	.word	0x2a2a2a2a
   2401c:	00000000 	.word	0x00000000
   24020:	6f4e202a 	.word	0x6f4e202a
   24024:	69666974 	.word	0x69666974
   24028:	69746163 	.word	0x69746163
   2402c:	52206e6f 	.word	0x52206e6f
   24030:	69656365 	.word	0x69656365
   24034:	20646576 	.word	0x20646576
   24038:	00000000 	.word	0x00000000
   2403c:	4955202a 	.word	0x4955202a
   24040:	20202044 	.word	0x20202044
   24044:	20202020 	.word	0x20202020
   24048:	20202020 	.word	0x20202020
   2404c:	203d2020 	.word	0x203d2020
   24050:	00006425 	.word	0x00006425
   24054:	6143202a 	.word	0x6143202a
   24058:	6f676574 	.word	0x6f676574
   2405c:	20207972 	.word	0x20207972
   24060:	20202020 	.word	0x20202020
   24064:	203d2020 	.word	0x203d2020
   24068:	6568744f 	.word	0x6568744f
   2406c:	00000072 	.word	0x00000072
   24070:	6143202a 	.word	0x6143202a
   24074:	6f676574 	.word	0x6f676574
   24078:	20207972 	.word	0x20207972
   2407c:	20202020 	.word	0x20202020
   24080:	203d2020 	.word	0x203d2020
   24084:	6f636e49 	.word	0x6f636e49
   24088:	676e696d 	.word	0x676e696d
   2408c:	6c614320 	.word	0x6c614320
   24090:	0000006c 	.word	0x0000006c
   24094:	6143202a 	.word	0x6143202a
   24098:	6f676574 	.word	0x6f676574
   2409c:	20207972 	.word	0x20207972
   240a0:	20202020 	.word	0x20202020
   240a4:	203d2020 	.word	0x203d2020
   240a8:	7373694d 	.word	0x7373694d
   240ac:	43206465 	.word	0x43206465
   240b0:	006c6c61 	.word	0x006c6c61
   240b4:	6143202a 	.word	0x6143202a
   240b8:	6f676574 	.word	0x6f676574
   240bc:	20207972 	.word	0x20207972
   240c0:	20202020 	.word	0x20202020
   240c4:	203d2020 	.word	0x203d2020
   240c8:	63696f56 	.word	0x63696f56
   240cc:	614d2065 	.word	0x614d2065
   240d0:	00006c69 	.word	0x00006c69
   240d4:	6143202a 	.word	0x6143202a
   240d8:	6f676574 	.word	0x6f676574
   240dc:	20207972 	.word	0x20207972
   240e0:	20202020 	.word	0x20202020
   240e4:	203d2020 	.word	0x203d2020
   240e8:	69636f53 	.word	0x69636f53
   240ec:	00006c61 	.word	0x00006c61
   240f0:	6143202a 	.word	0x6143202a
   240f4:	6f676574 	.word	0x6f676574
   240f8:	20207972 	.word	0x20207972
   240fc:	20202020 	.word	0x20202020
   24100:	203d2020 	.word	0x203d2020
   24104:	65686353 	.word	0x65686353
   24108:	656c7564 	.word	0x656c7564
   2410c:	00000000 	.word	0x00000000
   24110:	6143202a 	.word	0x6143202a
   24114:	6f676574 	.word	0x6f676574
   24118:	20207972 	.word	0x20207972
   2411c:	20202020 	.word	0x20202020
   24120:	203d2020 	.word	0x203d2020
   24124:	69616d45 	.word	0x69616d45
   24128:	0000006c 	.word	0x0000006c
   2412c:	6143202a 	.word	0x6143202a
   24130:	6f676574 	.word	0x6f676574
   24134:	20207972 	.word	0x20207972
   24138:	20202020 	.word	0x20202020
   2413c:	203d2020 	.word	0x203d2020
   24140:	7377654e 	.word	0x7377654e
   24144:	00000000 	.word	0x00000000
   24148:	6143202a 	.word	0x6143202a
   2414c:	6f676574 	.word	0x6f676574
   24150:	20207972 	.word	0x20207972
   24154:	20202020 	.word	0x20202020
   24158:	203d2020 	.word	0x203d2020
   2415c:	6c616548 	.word	0x6c616548
   24160:	61206874 	.word	0x61206874
   24164:	4620646e 	.word	0x4620646e
   24168:	656e7469 	.word	0x656e7469
   2416c:	00007373 	.word	0x00007373
   24170:	6143202a 	.word	0x6143202a
   24174:	6f676574 	.word	0x6f676574
   24178:	20207972 	.word	0x20207972
   2417c:	20202020 	.word	0x20202020
   24180:	203d2020 	.word	0x203d2020
   24184:	69737542 	.word	0x69737542
   24188:	7373656e 	.word	0x7373656e
   2418c:	646e6120 	.word	0x646e6120
   24190:	6e694620 	.word	0x6e694620
   24194:	65636e61 	.word	0x65636e61
   24198:	00000000 	.word	0x00000000
   2419c:	6143202a 	.word	0x6143202a
   241a0:	6f676574 	.word	0x6f676574
   241a4:	20207972 	.word	0x20207972
   241a8:	20202020 	.word	0x20202020
   241ac:	203d2020 	.word	0x203d2020
   241b0:	61636f4c 	.word	0x61636f4c
   241b4:	6e6f6974 	.word	0x6e6f6974
   241b8:	00000000 	.word	0x00000000
   241bc:	6143202a 	.word	0x6143202a
   241c0:	6f676574 	.word	0x6f676574
   241c4:	20207972 	.word	0x20207972
   241c8:	20202020 	.word	0x20202020
   241cc:	203d2020 	.word	0x203d2020
   241d0:	65746e45 	.word	0x65746e45
   241d4:	69617472 	.word	0x69617472
   241d8:	6e656d6e 	.word	0x6e656d6e
   241dc:	00000074 	.word	0x00000074
   241e0:	7645202a 	.word	0x7645202a
   241e4:	20746e65 	.word	0x20746e65
   241e8:	20204449 	.word	0x20204449
   241ec:	20202020 	.word	0x20202020
   241f0:	203d2020 	.word	0x203d2020
   241f4:	65646441 	.word	0x65646441
   241f8:	00000064 	.word	0x00000064
   241fc:	7645202a 	.word	0x7645202a
   24200:	20746e65 	.word	0x20746e65
   24204:	20204449 	.word	0x20204449
   24208:	20202020 	.word	0x20202020
   2420c:	203d2020 	.word	0x203d2020
   24210:	69646f4d 	.word	0x69646f4d
   24214:	64656966 	.word	0x64656966
   24218:	00000000 	.word	0x00000000
   2421c:	7645202a 	.word	0x7645202a
   24220:	20746e65 	.word	0x20746e65
   24224:	20204449 	.word	0x20204449
   24228:	20202020 	.word	0x20202020
   2422c:	203d2020 	.word	0x203d2020
   24230:	6f6d6552 	.word	0x6f6d6552
   24234:	00646576 	.word	0x00646576
   24238:	7645202a 	.word	0x7645202a
   2423c:	46746e65 	.word	0x46746e65
   24240:	7367616c 	.word	0x7367616c
   24244:	20202020 	.word	0x20202020
   24248:	203d2020 	.word	0x203d2020
   2424c:	00000000 	.word	0x00000000
   24250:	656c6953 	.word	0x656c6953
   24254:	0020746e 	.word	0x0020746e
   24258:	6f706d49 	.word	0x6f706d49
   2425c:	6e617472 	.word	0x6e617472
   24260:	00002074 	.word	0x00002074
   24264:	45657250 	.word	0x45657250
   24268:	74736978 	.word	0x74736978
   2426c:	20676e69 	.word	0x20676e69
   24270:	00000000 	.word	0x00000000
   24274:	69736f50 	.word	0x69736f50
   24278:	65766974 	.word	0x65766974
   2427c:	69746341 	.word	0x69746341
   24280:	00206e6f 	.word	0x00206e6f
   24284:	6167654e 	.word	0x6167654e
   24288:	65766974 	.word	0x65766974
   2428c:	69746341 	.word	0x69746341
   24290:	00206e6f 	.word	0x00206e6f
   24294:	6143202a 	.word	0x6143202a
   24298:	6f676574 	.word	0x6f676574
   2429c:	43207972 	.word	0x43207972
   242a0:	746e756f 	.word	0x746e756f
   242a4:	203d2020 	.word	0x203d2020
   242a8:	00006425 	.word	0x00006425
   242ac:	6954202a 	.word	0x6954202a
   242b0:	20656c74 	.word	0x20656c74
   242b4:	20202020 	.word	0x20202020
   242b8:	20202020 	.word	0x20202020
   242bc:	203d2020 	.word	0x203d2020
   242c0:	00000000 	.word	0x00000000
   242c4:	00007325 	.word	0x00007325
   242c8:	7553202a 	.word	0x7553202a
   242cc:	74697462 	.word	0x74697462
   242d0:	2020656c 	.word	0x2020656c
   242d4:	20202020 	.word	0x20202020
   242d8:	203d2020 	.word	0x203d2020
   242dc:	00000000 	.word	0x00000000
   242e0:	654d202a 	.word	0x654d202a
   242e4:	67617373 	.word	0x67617373
   242e8:	20202065 	.word	0x20202065
   242ec:	20202020 	.word	0x20202020
   242f0:	203d2020 	.word	0x203d2020
   242f4:	00000000 	.word	0x00000000
   242f8:	6144202a 	.word	0x6144202a
   242fc:	26206574 	.word	0x26206574
   24300:	6d695420 	.word	0x6d695420
   24304:	20202065 	.word	0x20202065
   24308:	203d2020 	.word	0x203d2020
   2430c:	00000000 	.word	0x00000000
   24310:	6f50202a 	.word	0x6f50202a
   24314:	69746973 	.word	0x69746973
   24318:	41206576 	.word	0x41206576
   2431c:	6f697463 	.word	0x6f697463
   24320:	203d206e 	.word	0x203d206e
   24324:	00000000 	.word	0x00000000
   24328:	654e202a 	.word	0x654e202a
   2432c:	69746167 	.word	0x69746167
   24330:	41206576 	.word	0x41206576
   24334:	6f697463 	.word	0x6f697463
   24338:	203d206e 	.word	0x203d206e
   2433c:	00000000 	.word	0x00000000
   24340:	69666f4e 	.word	0x69666f4e
   24344:	72207974 	.word	0x72207974
   24348:	766f6d65 	.word	0x766f6d65
   2434c:	202c6465 	.word	0x202c6465
   24350:	65746163 	.word	0x65746163
   24354:	79726f67 	.word	0x79726f67
   24358:	2064695f 	.word	0x2064695f
   2435c:	6425203d 	.word	0x6425203d
   24360:	00000000 	.word	0x00000000
   24364:	65657246 	.word	0x65657246
   24368:	534f5452 	.word	0x534f5452
   2436c:	434e4120 	.word	0x434e4120
   24370:	78452053 	.word	0x78452053
   24374:	6c706d61 	.word	0x6c706d61
   24378:	00000a65 	.word	0x00000a65
   2437c:	20465357 	.word	0x20465357
   24380:	656d6954 	.word	0x656d6954
   24384:	00000072 	.word	0x00000072
   24388:	6f6d654d 	.word	0x6f6d654d
   2438c:	70207972 	.word	0x70207972
   24390:	206c6f6f 	.word	0x206c6f6f
   24394:	74207369 	.word	0x74207369
   24398:	73206f6f 	.word	0x73206f6f
   2439c:	6c6c616d 	.word	0x6c6c616d
   243a0:	20796220 	.word	0x20796220
   243a4:	0a0d6425 	.word	0x0a0d6425
   243a8:	00000000 	.word	0x00000000
   243ac:	69646152 	.word	0x69646152
   243b0:	7361546f 	.word	0x7361546f
   243b4:	73203a6b 	.word	0x73203a6b
   243b8:	70757465 	.word	0x70757465
   243bc:	00000a0d 	.word	0x00000a0d
   243c0:	72617453 	.word	0x72617453
   243c4:	676e6974 	.word	0x676e6974
   243c8:	63697720 	.word	0x63697720
   243cc:	72746e65 	.word	0x72746e65
   243d0:	74206369 	.word	0x74206369
   243d4:	65636172 	.word	0x65636172
   243d8:	000a0a3a 	.word	0x000a0a3a
   243dc:	6e6e7552 	.word	0x6e6e7552
   243e0:	20676e69 	.word	0x20676e69
   243e4:	75746573 	.word	0x75746573
   243e8:	61742070 	.word	0x61742070
   243ec:	2e736b73 	.word	0x2e736b73
   243f0:	0a0d2e2e 	.word	0x0a0d2e2e
   243f4:	00000000 	.word	0x00000000
   243f8:	69646152 	.word	0x69646152
   243fc:	7361546f 	.word	0x7361546f
   24400:	0000006b 	.word	0x0000006b
   24404:	74736554 	.word	0x74736554
   24408:	6b736154 	.word	0x6b736154
   2440c:	00000000 	.word	0x00000000
   24410:	75746553 	.word	0x75746553
   24414:	00000070 	.word	0x00000070
   24418:	63747441 	.word	0x63747441
   2441c:	63736944 	.word	0x63736944
   24420:	76726553 	.word	0x76726553
   24424:	43656369 	.word	0x43656369
   24428:	206c706d 	.word	0x206c706d
   2442c:	74617473 	.word	0x74617473
   24430:	30207375 	.word	0x30207375
   24434:	32302578 	.word	0x32302578
   24438:	00000078 	.word	0x00000078
   2443c:	63747441 	.word	0x63747441
   24440:	63736944 	.word	0x63736944
   24444:	72616843 	.word	0x72616843
   24448:	6c706d43 	.word	0x6c706d43
   2444c:	61747320 	.word	0x61747320
   24450:	20737574 	.word	0x20737574
   24454:	30257830 	.word	0x30257830
   24458:	00007832 	.word	0x00007832
   2445c:	63747441 	.word	0x63747441
   24460:	63736944 	.word	0x63736944
   24464:	666e6f43 	.word	0x666e6f43
   24468:	6d436769 	.word	0x6d436769
   2446c:	73206c70 	.word	0x73206c70
   24470:	75746174 	.word	0x75746174
   24474:	78302073 	.word	0x78302073
   24478:	78323025 	.word	0x78323025
   2447c:	00000000 	.word	0x00000000
   24480:	44707041 	.word	0x44707041
   24484:	43637369 	.word	0x43637369
   24488:	6c706d6f 	.word	0x6c706d6f
   2448c:	20657465 	.word	0x20657465
   24490:	6e6e6f63 	.word	0x6e6e6f63
   24494:	253a6449 	.word	0x253a6449
   24498:	74732064 	.word	0x74732064
   2449c:	73757461 	.word	0x73757461
   244a0:	2578303a 	.word	0x2578303a
   244a4:	00783230 	.word	0x00783230
   244a8:	61766e49 	.word	0x61766e49
   244ac:	2064696c 	.word	0x2064696c
   244b0:	61204d44 	.word	0x61204d44
   244b4:	72657664 	.word	0x72657664
   244b8:	69736974 	.word	0x69736974
   244bc:	6d20676e 	.word	0x6d20676e
   244c0:	3b65646f 	.word	0x3b65646f
   244c4:	646f6d20 	.word	0x646f6d20
   244c8:	6f632065 	.word	0x6f632065
   244cc:	6769666e 	.word	0x6769666e
   244d0:	64657275 	.word	0x64657275
   244d4:	20736120 	.word	0x20736120
   244d8:	65747865 	.word	0x65747865
   244dc:	6465646e 	.word	0x6465646e
   244e0:	00000000 	.word	0x00000000
   244e4:	454c4449 	.word	0x454c4449
   244e8:	00000000 	.word	0x00000000
   244ec:	20726d54 	.word	0x20726d54
   244f0:	00637653 	.word	0x00637653

000244f4 <attFcnDefault>:
   244f4:	0000c341 0000c33d 0000c33d 0000c33f     A...=...=...?...

00024504 <attWsfChUuid>:
   24504:	2a9d2a9e                                         .*

00024506 <attWmChUuid>:
   24506:	181d2a9d                                         .*

00024508 <attWssSvcUuid>:
   24508:	2a9f181d                                         ..

0002450a <attUcpChUuid>:
   2450a:	2a9a2a9f                                         .*

0002450c <attUiChUuid>:
   2450c:	2a992a9a                                         .*

0002450e <attDbciChUuid>:
   2450e:	2ac92a99                                         .*

00024510 <attRpaoChUuid>:
   24510:	2a5f2ac9                                         .*

00024512 <attPlxcmChUuid>:
   24512:	2a5e2a5f                                         _*

00024514 <attPlxscmChUuid>:
   24514:	2a602a5e                                         ^*

00024516 <attPlxfChUuid>:
   24516:	2a5d2a60                                         `*

00024518 <attSlChUuid>:
   24518:	2a5b2a5d                                         ]*

0002451a <attCsmChUuid>:
   2451a:	2a5c2a5b                                         [*

0002451c <attCsfChUuid>:
   2451c:	2a632a5c                                         \*

0002451e <attCpmChUuid>:
   2451e:	2a652a63                                         c*

00024520 <attCpfChUuid>:
   24520:	2a532a65                                         e*

00024522 <attRsmChUuid>:
   24522:	2a542a53                                         S*

00024524 <attRsfChUuid>:
   24524:	2aa62a54                                         T*

00024526 <attCarChUuid>:
   24526:	2a522aa6                                         .*

00024528 <attRacpChUuid>:
   24528:	2a512a52                                         R*

0002452a <attGlfChUuid>:
   2452a:	2a502a51                                         Q*

0002452c <attPnpChUuid>:
   2452c:	2a4f2a50                                         P*

0002452e <attSiwChUuid>:
   2452e:	2a4e2a4f                                         O*

00024530 <attHidPmChUuid>:
   24530:	2a4d2a4e                                         N*

00024532 <attHidRepChUuid>:
   24532:	2a4c2a4d                                         M*

00024534 <attHidcpChUuid>:
   24534:	2a4b2a4c                                         L*

00024536 <attHidRmChUuid>:
   24536:	2a4a2a4b                                         K*

00024538 <attHidiChUuid>:
   24538:	2a322a4a                                         J*

0002453a <attHidBkoChUuid>:
   2453a:	2a222a32                                         2*

0002453c <attHidBkiChUuid>:
   2453c:	2a212a22                                         "*

0002453e <attHidBmiChUuid>:
   2453e:	2a492a21                                         !*

00024540 <attBpfChUuid>:
   24540:	2a482a49                                         I*

00024542 <attSuacChUuid>:
   24542:	2a472a48                                         H*

00024544 <attSnacChUuid>:
   24544:	2a462a47                                         G*

00024546 <attNaChUuid>:
   24546:	2a452a46                                         F*

00024548 <attUasChUuid>:
   24548:	2a442a45                                         E*

0002454a <attAncpChUuid>:
   2454a:	2a432a44                                         D*

0002454c <attAcChUuid>:
   2454c:	2a422a43                                         C*

0002454e <attAcbmChUuid>:
   2454e:	2a412a42                                         B*

00024550 <attRsChUuid>:
   24550:	2a402a41                                         A*

00024552 <attRcpChUuid>:
   24552:	2a3f2a40                                         @*

00024554 <attAsChUuid>:
   24554:	2a3e2a3f                                         ?*

00024556 <attNwaChUuid>:
   24556:	2a3d2a3e                                         >*

00024558 <attStrChUuid>:
   24558:	2a3c2a3d                                         =*

0002455a <attStcChUuid>:
   2455a:	2a3b2a3c                                         <*

0002455c <attSrChUuid>:
   2455c:	2a3a2a3b                                         ;*

0002455e <attRemChUuid>:
   2455e:	2a392a3a                                         :*

00024560 <attHrcpChUuid>:
   24560:	2a382a39                                         9*

00024562 <attBslChUuid>:
   24562:	2a372a38                                         8*

00024564 <attHrmChUuid>:
   24564:	2a362a37                                         7*

00024566 <attIcpChUuid>:
   24566:	2a352a36                                         6*

00024568 <attBpmChUuid>:
   24568:	2a342a35                                         5*

0002456a <attGlmcChUuid>:
   2456a:	2a332a34                                         4*

0002456c <attHbmiChUuid>:
   2456c:	2a312a33                                         3*

0002456e <attVidChUuid>:
   2456e:	2a302a31                                         1*

00024570 <attP3dChUuid>:
   24570:	2a2f2a30                                         0*

00024572 <attP2dChUuid>:
   24572:	2a2e2a2f                                         /*

00024574 <attLongChUuid>:
   24574:	2a2d2a2e                                         .*

00024576 <attLatChUuid>:
   24576:	2a2c2a2d                                         -*

00024578 <attElChUuid>:
   24578:	2a2b2a2c                                         ,*

0002457a <attCtChUuid>:
   2457a:	2a2a2a2b                                         +*

0002457c <attIeeeChUuid>:
   2457c:	2a292a2a                                         **

0002457e <attMfnsChUuid>:
   2457e:	2a282a29                                         )*

00024580 <attSrsChUuid>:
   24580:	2a272a28                                         (*

00024582 <attHrsChUuid>:
   24582:	2a262a27                                         '*

00024584 <attFrsChUuid>:
   24584:	2a252a26                                         &*

00024586 <attSnsChUuid>:
   24586:	2a242a25                                         %*

00024588 <attMnsChUuid>:
   24588:	2a232a24                                         $*

0002458a <attSidChUuid>:
   2458a:	2a202a23                                         #*

0002458c <attTfahChUuid>:
   2458c:	2a1f2a20                                          *

0002458e <attTcelChUuid>:
   2458e:	2a1e2a1f                                         .*

00024590 <attItChUuid>:
   24590:	2a1d2a1e                                         .*

00024592 <attTtChUuid>:
   24592:	2a1c2a1d                                         .*

00024594 <attTmChUuid>:
   24594:	2a1b2a1c                                         .*

00024596 <attBlsChUuid>:
   24596:	2a1a2a1b                                         .*

00024598 <attBpsChUuid>:
   24598:	2a192a1a                                         .*

0002459a <attBlChUuid>:
   2459a:	2a182a19                                         .*

0002459c <attGlmChUuid>:
   2459c:	2a172a18                                         .*

0002459e <attTusChUuid>:
   2459e:	2a162a17                                         .*

000245a0 <attTucpChUuid>:
   245a0:	2a152a16                                         .*

000245a2 <attTbChUuid>:
   245a2:	2a142a15                                         .*

000245a4 <attRtiChUuid>:
   245a4:	2a132a14                                         .*

000245a6 <attTsChUuid>:
   245a6:	2a122a13                                         .*

000245a8 <attTaChUuid>:
   245a8:	2a112a12                                         .*

000245aa <attTdstChUuid>:
   245aa:	2a102a11                                         .*

000245ac <attStzChUuid>:
   245ac:	2a0f2a10                                         .*

000245ae <attLtiChUuid>:
   245ae:	2a0e2a0f                                         .*

000245b0 <attTzChUuid>:
   245b0:	2a0d2a0e                                         .*

000245b2 <attDstoChUuid>:
   245b2:	2a0c2a0d                                         .*

000245b4 <attEt256ChUuid>:
   245b4:	2a0b2a0c                                         .*

000245b6 <attEt100ChUuid>:
   245b6:	2a0a2a0b                                         .*

000245b8 <attDdtChUuid>:
   245b8:	2a092a0a                                         .*

000245ba <attDwChUuid>:
   245ba:	2a082a09                                         .*

000245bc <attDtChUuid>:
   245bc:	2a072a08                                         .*

000245be <attTxpChUuid>:
   245be:	2a062a07                                         .*

000245c0 <attAlChUuid>:
   245c0:	2a052a06                                         .*

000245c2 <attScChUuid>:
   245c2:	2a042a05                                         .*

000245c4 <attPpcpChUuid>:
   245c4:	2a032a04                                         .*

000245c6 <attRaChUuid>:
   245c6:	2a022a03                                         .*

000245c8 <attPpfChUuid>:
   245c8:	2a012a02                                         .*

000245ca <attApChUuid>:
   245ca:	2a002a01                                         .*

000245cc <attDnChUuid>:
   245cc:	29082a00                                         .*

000245ce <attHidRimUuid>:
   245ce:	29072908                                         .)

000245d0 <attHidErmUuid>:
   245d0:	29062907                                         .)

000245d2 <attValRangeUuid>:
   245d2:	29052906                                         .)

000245d4 <attAggFmtUuid>:
   245d4:	29042905                                         .)

000245d6 <attChPresFmtUuid>:
   245d6:	29032904                                         .)

000245d8 <attSrvChCfgUuid>:
   245d8:	29022903                                         .)

000245da <attCliChCfgUuid>:
   245da:	29012902                                         .)

000245dc <attChUserDescUuid>:
   245dc:	29002901                                         .)

000245de <attChExtUuid>:
   245de:	28032900                                         .)

000245e0 <attChUuid>:
   245e0:	28022803                                         .(

000245e2 <attIncUuid>:
   245e2:	28012802                                         .(

000245e4 <attSecSvcUuid>:
   245e4:	28002801                                         .(

000245e6 <attPrimSvcUuid>:
   245e6:	181c2800                                         .(

000245e8 <attUdsSvcUuid>:
   245e8:	1822181c                                         ..

000245ea <attPlxsSvcUuid>:
   245ea:	18131822                                         ".

000245ec <attSpsSvcUuid>:
   245ec:	18121813                                         ..

000245ee <attHidSvcUuid>:
   245ee:	18111812                                         ..

000245f0 <attAnsSvcUuid>:
   245f0:	18101811                                         ..

000245f2 <attBpsSvcUuid>:
   245f2:	180f1810                                         ..

000245f4 <attBasSvcUuid>:
   245f4:	180e180f                                         ..

000245f6 <attPassSvcUuid>:
   245f6:	180d180e                                         ..

000245f8 <attHrsSvcUuid>:
   245f8:	180c180d                                         ..

000245fa <attWdsSvcUuid>:
   245fa:	180b180c                                         ..

000245fc <attNwaSvcUuid>:
   245fc:	180a180b                                         ..

000245fe <attDisSvcUuid>:
   245fe:	1809180a                                         ..

00024600 <attHtsSvcUuid>:
   24600:	18081809                                         ..

00024602 <attGlsSvcUuid>:
   24602:	18071808                                         ..

00024604 <attNdcsSvcUuid>:
   24604:	18061807                                         ..

00024606 <attRtusSvcUuid>:
   24606:	18051806                                         ..

00024608 <attCtsSvcUuid>:
   24608:	18041805                                         ..

0002460a <attTpsSvcUuid>:
   2460a:	18031804                                         ..

0002460c <attLlsSvcUuid>:
   2460c:	18021803                                         ..

0002460e <attIasSvcUuid>:
   2460e:	18011802                                         ..

00024610 <attGattSvcUuid>:
   24610:	18001801                                         ..

00024612 <attGapSvcUuid>:
   24612:	00001800                                         ..

00024614 <attcSendReqTbl>:
   24614:	00000000 0000c983 0000caa1 0000caa1     ................
   24624:	0000caa1 0000c899 0000caa1 0000c899     ................
   24634:	0000caa1 0000c899 0000c9b5 0000c9f3     ................
   24644:	0000c899                                ....

00024648 <attcFcnIf>:
   24648:	0000c939 0000c33d 0000cbe1 0000cb25     9...=.......%...

00024658 <attcProcRspTbl>:
   24658:	0000ccdd 0000cdd1 0000cd09 0000d0c5     ................
   24668:	0000cd09 0000cdc9 0000d137 0000cdc9     ........7.......
   24678:	0000cd09 0000cdcb 00000000 0000d2eb     ................
   24688:	0000cdcb                                ....

0002468c <attsIndFcnIf>:
   2468c:	0000c341 0000d62d 0000d647 0000d7ed     A...-...G.......

0002469c <attsMinPduLen>:
   2469c:	07050300 05050305 05030305 01000002     ................
   246ac:	0000000f                                ....

000246b0 <attsFcnIf>:
   246b0:	0000d94f 0000d8e1 0000d8ed 0000d9dd     O...............
   246c0:	00002801                                .(..

000246c4 <dmAdvAct>:
   246c4:	0000efd9 0000eff9 0000f019 0000f03d     ............=...
   246d4:	0000ef39 0000f10d 0000f061              9.......a...

000246e0 <dmAdvFcnIf>:
   246e0:	0000ef99 0000f065 0000ef3b              ....e...;...

000246ec <dmConnSpecDefaults>:
   246ec:	00280018 07d00000 00000000              ..(.........

000246f8 <dmConnFcnIf>:
   246f8:	0000f1c1 0000f3f9 0000f491              ............

00024704 <dmConn2FcnIf>:
   24704:	0000fc99 0000f2cd 0000f4a9              ............

00024710 <dmConnActSetMain>:
   24710:	0000f1a5 0000f1b9 0000f53d 0000f5a9     ........=.......
   24720:	0000f5b7 0000f1a7                       ........

00024728 <dmConnActSetSlave>:
   24728:	0000fac1 0000fadf 0000f9dd 0000faf5     ................
   24738:	0000fb0b 0000fa39                       ....9...

00024740 <dmConnStateTbl>:
   24740:	00001001 00002002 00000000 00000000     ..... ..........
   24750:	00002303 00000000 00010000 00011104     .#..............
   24760:	00010001 00010001 02030300 00010300     ................
   24770:	00010001 21000002 00020002 00020002     .......!........
   24780:	24000002 24002303 00020002 00030002     ...$.#.$........
   24790:	00030104 22031203 25031303 00030003     ......."...%....
   247a0:	05030400 05030003 00040004 00040004     ................
   247b0:	00040004 04000004 04000104 00040004     ................
   247c0:	00000004                                ....

000247c4 <dmDevFcnIf>:
   247c4:	0000fc99 0000fb75 0000fbd9              ....u.......

000247d0 <dmHciToIdTbl>:
   247d0:	03030307 04020303 04040404 05050505     ................
   247e0:	07070705 06060607 05060606 07040405     ................
   247f0:	04070407 04050504 09090904 00000202     ................
   24800:	070b0b0b 00020002 0000000a              ............

0002480c <dmFcnDefault>:
   2480c:	0000fc99 0000fc9b 0000fc9b              ............

00024818 <dmEvtCbackLen>:
   24818:	00040004 000c0004 00040004 0024001c     ..............$.
   24828:	000e000a 00040006 00040006 00220006     ..............".
   24838:	00080010 00240006 00140064 00040006     ......$.d.......
   24848:	0006000a 00060006 000c000c 000e0006     ................
   24858:	0008000e 000a0006 000a0006 000a0006     ................
   24868:	0004000c 00200004 00060006 00060016     ...... .........
   24878:	00100010 00440004 00040046              ......D.F...

00024884 <dmPrivAct>:
   24884:	0000fe73 0000fded 0000fe25 0000fe4d     s.......%...M...
   24894:	0000fe65 0000fed5 0000fe69              e.......i...

000248a0 <dmPrivFcnIf>:
   248a0:	0000fdd9 0000fee9 0000fdc5              ............

000248ac <dmSecFcnIf>:
   248ac:	0000fc99 000101d5 000100fd d4f6493f     ............?I..
   248bc:	385fc5a3 e3b3c974 503f10d2 7b60ff4a     .._8t.....?PJ.`{
   248cc:	99b740eb a6b89958 bd1a3ccd d203b020     .@..X....<.. ...
   248dc:	2cbe97f2 a7832c5e b9a5f9e9 1191f4ef     ...,^,..........
   248ec:	dbfdf4ac 480103cc e69d350e 499c80dc     .......H.5.....I
   248fc:	6deb2a65 bf9a3263 5c15525a c2456376     e*.mc2..ZR.\vcE.
   2490c:	2430ed8f d08e1c74 8bd28915              ..0$t.......

00024918 <dmSecLescFcnIf>:
   24918:	0000fc99 0000fc9b 0001034d              ........M...

00024924 <smpPktLenTbl>:
   24924:	11070700 0b110211 02110811 00021141     ............A...

00024934 <CSWTCH.23>:
   24934:	00025628 0002598c 00025635 00025644     (V...Y..5V..DV..
   24944:	00025651 00025662 0002566a 0002567d     QV..bV..jV..}V..
   24954:	0002568d 0002569f 000256ad 000256ba     .V...V...V...V..
   24964:	000256cc 000256dd 000256ee 000256fa     .V...V...V...V..
   24974:	00025703 0002570e 00025718 00025724     .W...W...W..$W..
   24984:	0002572c 0002573d 0002574f 00025761     ,W..=W..OW..aW..
   24994:	0002576e 0002577a 00025786 00025794     nW..zW...W...W..
   249a4:	9183886c 38a5f5aa db0b3760 be83605a     l......8`7..Z`..

000249b4 <smpScF5Key>:
   249b4:	656c7462                                btle

000249b8 <smpiScSmIf>:
   249b8:	00024a58 00024c20 00024c0f              XJ.. L...L..

000249c4 <CSWTCH.2>:
   249c4:	000257af 0002598e 000257b6 000257c4     .W...Y...W...W..
   249d4:	000257cf 000257d9 000257e7 000257f7     .W...W...W...W..
   249e4:	00025803 00025812 00025821 00025832     .X...X..!X..2X..
   249f4:	00025840 0002584a 00025853 0002585d     @X..JX..SX..]X..
   24a04:	00025868 00025874 00025884 000257a5     hX..tX...X...W..
   24a14:	00025894 000258a3 000258b4 000258c2     .X...X...X...X..
   24a24:	000258cf 000258dc 000258ee 000258fb     .X...X...X...X..
   24a34:	00025908 00025915 00025920 0002592c     .Y...Y.. Y..,Y..
   24a44:	0002593d 0002594e 00025959 00025963     =Y..NY..YY..cY..
   24a54:	0002596e                                nY..

00024a58 <smpiScStateTbl>:
   24a58:	00024bfa 00024bf4 00024beb 00024be5     .K...K...K...K..
   24a68:	00024bdf 00024bd3 00024bcd 00024bc7     .K...K...K...K..
   24a78:	00024bc1 00024bbb 00024bb5 00024ba9     .K...K...K...K..
   24a88:	00024ba3 00024b9d 00024b97 00024b91     .K...K...K...K..
   24a98:	00024b88 00024b82 00024b7c 00024b76     .K...K..|K..vK..
   24aa8:	00024b70 00024b6a 00024b64 00024b5e     pK..jK..dK..^K..
   24ab8:	00024b58 00024b52 00024b4c 00024b46     XK..RK..LK..FK..
   24ac8:	00024b40 00024b3a 00024b34 00024b2e     @K..:K..4K...K..
   24ad8:	00024b28 00024b1f 00024b10 00024b01     (K...K...K...K..
   24ae8:	00024aec                                .J..

00024aec <smpiScStateTblAttempts>:
   24aec:	060b000f 01010a24 01000a0d 07010003     ....$...........
   24afc:	00000024 15230600                                $....

00024b01 <smpiScStateTblKeyDist>:
   24b01:	0c152306 000e1623 0023030c 08000000              .#..#.....#....

00024b10 <smpiScStateTblEncrypt>:
   24b10:	09142308 22030200 03001c00 0b000000              .#.....".......

00024b1f <smpiScStateTblStkCalc>:
   24b1f:	0d13220b 00000924 12210b00                       ."..$....

00024b28 <smpiScStateTblCnfVerCalc2>:
   24b28:	0012210b 200b0000                                .!....

00024b2e <smpiScStateTblCnfVerCalc1>:
   24b2e:	0008200b 1f060000                                . ....

00024b34 <smpiScStateTblPairRand>:
   24b34:	00071f06 1e060000                                ......

00024b3a <smpiScStateTblPairCnf>:
   24b3a:	00111e06 1d0b0000                                ......

00024b40 <smpiScStateTblCnfCalc2>:
   24b40:	00061d0b 1c0b0000                                ......

00024b46 <smpiScStateTblCnfCalc1>:
   24b46:	00051c0b 1b040000                                ......

00024b4c <smpiScStateTblLegacyPin>:
   24b4c:	00041b04 22060000                                ......

00024b52 <smpiScStateTblVerifyDHCheck>:
   24b52:	00302206 191b0000                                ."0...

00024b58 <smpiScStateTblDhCalcF6Eb>:
   24b58:	002f191b 181b0000                                ../...

00024b5e <smpiScStateTblDhCalcF6Ea>:
   24b5e:	002e181b 171b0000                                ......

00024b64 <smpiScStateTblCalcF5LTK>:
   24b64:	002d171b 161b0000                                ..-...

00024b6a <smpiScStateTblCalcF5MacKey>:
   24b6a:	002c161b 151b0000                                ..,...

00024b70 <smpiScStateTblCalcF5TKey>:
   24b70:	002b151b 14180000                                ..+...

00024b76 <smpiScStateTblCalcDHKey>:
   24b76:	002a1418 13060000                                ..*...

00024b7c <smpiScStateTblOobWaitRand>:
   24b7c:	00281306 121b0000                                ..(...

00024b82 <smpiScStateTblOobSendRand>:
   24b82:	0027121b 0c190000                                ..'...

00024b88 <smpiScStateTblPasskeyRepeat>:
   24b88:	1a210c19 00002913 25101b00                       ..!..)...

00024b91 <smpiScStateTblPasskeyCheck>:
   24b91:	0025101b 0f060000                                ..%...

00024b97 <smpiScStateTblPasskeyRand>:
   24b97:	00220f06 0e060000                                .."...

00024b9d <smpiScStateTblPasskeyCnf>:
   24b9d:	00240e06 0d1b0000                                ..$...

00024ba3 <smpiScStateTblPasskeyCalc>:
   24ba3:	00230d1b 0b060000                                ..#...

00024ba9 <smprScStateTblPasskeyKeypress>:
   24ba9:	161f0b06 0c04200b 00000021              ..... ..!...

00024bb5 <smpiScStateTblJwNcWaitUser>:
   24bb5:	00291315 0a1b0000                                ..)...

00024bbb <smpiScStateTblJwNcCheck2>:
   24bbb:	001d0a1b 091b0000                                ......

00024bc1 <smpiScStateTblJwNcCheck1>:
   24bc1:	001c091b 08060000                                ......

00024bc7 <smpiScStateTblJwNcRand>:
   24bc7:	001b0806 07060000                                ......

00024bcd <smpiScStateTblJwNcWaitCnf>:
   24bcd:	001a0706 06120000                                ......

00024bd3 <smpiScStateTblAuthSelect>:
   24bd3:	13190612 11141e0b 00000026              ........&...

00024bdf <smpiScStateTblPubKey>:
   24bdf:	00180506 04040000                                ......

00024be5 <smpiScStateTblLescPin>:
   24be5:	00170404 03100000                                ......

00024beb <smpiScStateTblModeSelect>:
   24beb:	11000310 0000001a 10020600                       .........

00024bf4 <smpiScStateTblPairRsp>:
   24bf4:	00100206 01010000                                ......

00024bfa <smpiScStateTblIdle>:
   24bfa:	0a0d0101 00030100 0f00060e 0f000007     ................
   24c0a:	00000000 02000a00                                .....

00024c0f <smpiScStateTblCommon>:
   24c0f:	0702000a 00030200 02000f03 00000000     ................
	...

00024c20 <smpiScActionTbl>:
   24c20:	00011b45 00011543 00011555 0001156b     E...C...U...k...
   24c30:	00011c07 00011c29 00011c31 00011c7b     ....)...1...{...
   24c40:	00011c9f 00011ed9 00011efd 00011f05     ................
   24c50:	00011f27 000120f9 00012169 0001217d     '.... ..i!..}!..
   24c60:	000121a7 0001220d 00012263 000122c5     .!..."..c"..."..
   24c70:	00012309 0001238d 000123bb 000123e5     .#...#...#...#..
   24c80:	000123e1 000123ef 00012425 00012451     .#...#..%$..Q$..
   24c90:	00012473 000116c3 000115e5 00011707     s$..............
   24ca0:	0001173d 000124af 00012529 00012569     =....$..)%..i%..
   24cb0:	0001256f 00012573 000125c3 00012625     o%..s%...%..%&..
   24cc0:	0001267b 0001177d 000117f1 00011851     {&..}.......Q...
   24cd0:	000118c1 00011931 0001199f 0001269d     ....1........&..
   24ce0:	000126c7                                .&..

00024ce4 <smprScSmIf>:
   24ce4:	00024d84 00024f5c 00024f4a              .M..\O..JO..

00024cf0 <CSWTCH.2>:
   24cf0:	00025983 0002598a 00025999 000259a7     .Y...Y...Y...Y..
   24d00:	00025979 000259b1 000259bf 000259cc     yY...Y...Y...Y..
   24d10:	000259dd 000259ec 000259fd 00025979     .Y...Y...Y..yY..
   24d20:	00025a0b 00025a19 00025a23 00025a2d     .Z...Z..#Z..-Z..
   24d30:	00025a38 00025a44 00025a54 00025a64     8Z..DZ..TZ..dZ..
   24d40:	00025979 00025a74 00025a83 00025a94     yY..tZ...Z...Z..
   24d50:	00025aa2 00025aaf 00025abc 00025ac9     .Z...Z...Z...Z..
   24d60:	00025ad6 00025ae3 00025af0 00025afc     .Z...Z...Z...Z..
   24d70:	00025b0d 00025b1e 00025b29 00025b33     .[...[..)[..3[..
   24d80:	00025b3e                                >[..

00024d84 <smprScStateTbl>:
   24d84:	00024f2f 00024f29 00024f20 00024f14     /O..)O.. O...O..
   24d94:	00024f1a 00024f08 00024f02 00024efc     .O...O...O...N..
   24da4:	00024ef6 00024ef0 00024ee1 00024edb     .N...N...N...N..
   24db4:	00024ed5 00024ecf 00024ec9 00024ec3     .N...N...N...N..
   24dc4:	00024eba 00024eae 00024eb4 00024ea8     .N...N...N...N..
   24dd4:	00024ea2 00024e9c 00024e96 00024e90     .N...N...N...N..
   24de4:	00024e8a 00024e84 00024e7b 00024e72     .N...N..{N..rN..
   24df4:	00024e6c 00024e66 00024e60 00024e5a     lN..fN..`N..ZN..
   24e04:	00024e54 00024e4b 00024e3c 00024e2d     TN..KN..<N..-N..
   24e14:	00024e18                                .N..

00024e18 <smprScStateTblAttempts>:
   24e18:	060e000f 00050f24 01000a10 07010003     ....$...........
   24e28:	00000024 33230600                                $....

00024e2d <smprScStateTblKeyDist>:
   24e2d:	0c332306 000e3423 0023030d 08000000              .#3.#4....#....

00024e3c <smprScStateTblEncrypt>:
   24e3c:	09322308 22030200 03001c00 0b000000              .#2....".......

00024e4b <smprScStateTblStkCalc>:
   24e4b:	0d31220b 00000c24 30210b00                       ."1.$....

00024e54 <smprStateTblCnfVerCalc2>:
   24e54:	0030210b 200b0000                                .!0...

00024e5a <smprStateTblCnfVerCalc1>:
   24e5a:	000b200b 1f060000                                . ....

00024e60 <smprStateTblPairRand>:
   24e60:	000a1f06 1e0b0000                                ......

00024e66 <smprStateTblCnfCalc2>:
   24e66:	00091e0b 1d0b0000                                ......

00024e6c <smprStateTblCnfCalc1>:
   24e6c:	00081d0b 1c040000                                ......

00024e72 <smprStateTblPinPair2>:
   24e72:	06071c04 00002f1c 051b0400                       ...../...

00024e7b <smprStateTblPinPair1>:
   24e7b:	06051b04 0000151b 2e221b00                       .........

00024e84 <smprScStateTblDhCalcF6Eb>:
   24e84:	002e221b 191b0000                                ."....

00024e8a <smprScStateTblDhCalcF6Ea>:
   24e8a:	002d191b 181b0000                                ..-...

00024e90 <smprScStateTblCalcF5LTK>:
   24e90:	002c181b 171b0000                                ..,...

00024e96 <smprScStateTblCalcF5MacKey>:
   24e96:	002b171b 161b0000                                ..+...

00024e9c <smprScStateTblCalcF5TKey>:
   24e9c:	002a161b 15180000                                ..*...

00024ea2 <smprScStateTblCalcDHKey>:
   24ea2:	00291518 14060000                                ..)...

00024ea8 <smprScStateTblWaitDhCheck>:
   24ea8:	00281406 131b0000                                ..(...

00024eae <smprScStateTblOobSendRand>:
   24eae:	0026131b 11060000                                ..&...

00024eb4 <smprScStateTblOobWaitRand>:
   24eb4:	00251106 0c190000                                ..%...

00024eba <smprScStateTblPasskeyRepeat>:
   24eba:	1a000c19 00002713 23101b00                       .....'...

00024ec3 <smprScStateTblPasskeyCheck>:
   24ec3:	0023101b 0f060000                                ..#...

00024ec9 <smprScStateTblPasskeyRand>:
   24ec9:	00220f06 0e1b0000                                .."...

00024ecf <smprScStateTblPasskeyCalc>:
   24ecf:	00210e1b 0d060000                                ..!...

00024ed5 <smprScStateTblPasskeyWaitCnf>:
   24ed5:	001e0d06 0d040000                                ......

00024edb <smprScStateTblPassWaitAuthRsp>:
   24edb:	001f0d04 0a060000                                ......

00024ee1 <smprScStateTblPassKeyKeypress>:
   24ee1:	1d1b0a06 0a161d0b 060c041c 15000000              ...............

00024ef0 <smprScStateTblJwNcWaitUser>:
   24ef0:	00271315 091b0000                                ..'...

00024ef6 <smprScStateTblJwNcCalcG2>:
   24ef6:	0019091b 08060000                                ......

00024efc <smprScStateTblJwNcWaitRand>:
   24efc:	00180806 071b0000                                ......

00024f02 <smprScStateTblJwNcSetup>:
   24f02:	0017071b 06120000                                ......

00024f08 <smprScStateTblAuthSelect>:
   24f08:	13160612 12141a0a 00000024              ........$...

00024f14 <smprScStateTblPubKey>:
   24f14:	00040506 03040000                                ......

00024f1a <smprScStateTblLescPin>:
   24f1a:	00060304 04100000                                ......

00024f20 <smprScStateTblModeSelect>:
   24f20:	11000410 0000001a 14020200                       .........

00024f29 <smprScStateTblApiPairRsp>:
   24f29:	00140202 00050000                                ......

00024f2f <smprScStateTblIdle>:
   24f2f:	0a100005 00080100 12000912 07130106     ................
   24f3f:	00031100 00000f01 0a000000                       ...........

00024f4a <smprScStateTblCommon>:
   24f4a:	0702000a 00030200 02000f03 00000000     ................
	...

00024f5c <smprScActionTbl>:
   24f5c:	00011b45 00011543 00011555 0001156b     E...C...U...k...
   24f6c:	00012a91 00011bdf 00012a41 00011c07     .*......A*......
   24f7c:	00011c29 00011c31 00011c7b 00011c9f     )...1...{.......
   24f8c:	00011ed9 00011f27 00011f05 00011efd     ....'...........
   24f9c:	0001272d 00012757 00012763 0001276b     -'..W'..c'..k'..
   24fac:	000127dd 0001286d 00012aa7 00012ae9     .'..m(...*...*..
   24fbc:	00012aef 000116c3 000115e5 00011707     .*..............
   24fcc:	0001173d 00012b0f 00012b61 00012b77     =....+..a+..w+..
   24fdc:	00012b1f 00012b8d 00012b91 00012bcd     .+...+...+...+..
   24fec:	00012c37 00012c3f 00012cad 00012d05     7,..?,...,...-..
   24ffc:	00012d1d 000117f1 00011851 000118c1     .-......Q.......
   2500c:	00011931 0001199f 00012d3f 0001288f     1.......?-...(..
   2501c:	000128b1 0001290d 000129d5 00012a17     .(...)...)...*..
   2502c:	0001296d                                m)..

00025030 <smprSmIf>:
   25030:	0002503c 0002510c 000250fa              <P...Q...P..

0002503c <smprStateTbl>:
   2503c:	000250df 000250d9 000250d0 000250c7     .P...P...P...P..
   2504c:	000250c1 000250bb 000250b5 000250af     .P...P...P...P..
   2505c:	000250a9 000250a0 00025094 00025085     .P...P...P...P..
   2506c:	00025070                                pP..

00025070 <smprStateTblAttempts>:
   25070:	060c000f 00050b0c 01000a0e 07010003     ................
   25080:	0000000c 180b0c00                                .....

00025085 <smprStateTblKeyDist>:
   25085:	06180b0c 000e190b 000b030d 08000000              ...............

00025094 <smprStateTblEncrypt>:
   25094:	09170b08 0a030200 00000000              ............

000250a0 <smprStateTblStkCalc>:
   250a0:	0d160a0b 00000a0c 15090b00                       .........

000250a9 <smprStateTblCnfVerCalc2>:
   250a9:	0015090b 080b0000                                ......

000250af <smprStateTblCnfVerCalc1>:
   250af:	0009080b 07060000                                ......

000250b5 <smprStateTblPairRand>:
   250b5:	00080706 060b0000                                ......

000250bb <smprStateTblCnfCalc2>:
   250bb:	0007060b 050b0000                                ......

000250c1 <smprStateTblCnfCalc1>:
   250c1:	0006050b 04040000                                ......

000250c7 <smprStateTblPinPair2>:
   250c7:	06050404 00001404 04030400                       .........

000250d0 <smprStateTblPinPair1>:
   250d0:	06040304 00001303 12020200                       .........

000250d9 <smprStateTblApiPairRsp>:
   250d9:	00120202 00050000                                ......

000250df <smprStateTblIdle>:
   250df:	0a0e0005 00080100 10000910 07110106     ................
   250ef:	00030f00 00000f01 0a000000                       ...........

000250fa <smprStateTblCommon>:
   250fa:	0702000a 00030200 02000f03 00000000     ................
	...

0002510c <smprActionTbl>:
   2510c:	00011b45 00011b79 00011b9f 00011bc7     E...y...........
   2511c:	00011bdf 00011c07 00011c29 00011c31     ........)...1...
   2512c:	00011c7b 00011c9f 00011ed9 00011efd     {...............
   2513c:	00011f05 00011f27 0001272d 00012757     ....'...-'..W'..
   2514c:	00012763 0001276b 000127dd 0001286d     c'..k'...'..m(..
   2515c:	0001288f 000128b1 0001290d 000129d5     .(...(...)...)..
   2516c:	0001296d 00012a17                       m)...*..

00025174 <calc128Zeros>:
	...

00025184 <gattSc>:
   25184:	000245c2 00000000                       .E......

0002518c <gattScCcc>:
   2518c:	000245da 00000004                       .E......

00025194 <anccAncsSvcUuid>:
   25194:	122d00d0 a40f4b1e b5ce4e99 7905f431     ..-..K...N..1..y

000251a4 <anccNSChUuid>:
   251a4:	99a21dbd 8c5825e6 630142d9 9fbf120d     .....%X..B.c....

000251b4 <anccCPChUuid>:
   251b4:	fdaad9d9 98219bbd 45e149a8 69d1d8f3     ......!..I.E...i

000251c4 <anccDSChUuid>:
   251c4:	ce7c7bfb be44b36a 24d64bb5 22eac6e9     .{|.j.D..K.$..."

000251d4 <anccNSDat>:
   251d4:	000251a4 00000003                       .Q......

000251dc <anccNSdatCcc>:
   251dc:	000245da 00000006                       .E......

000251e4 <anccCtrlPoint>:
   251e4:	000251b4 00000003                       .Q......

000251ec <anccDataSrc>:
   251ec:	000251c4 00000003                       .Q......

000251f4 <anccDataSrcCcc>:
   251f4:	000245da 00000006                       .E......

000251fc <attCfg>:
   251fc:	0000000f 041e01e0                       ........

00025204 <smpCfg>:
   25204:	07030bb8 00000310                       ........

0002520c <hciEventMask>:
   2520c:	02008890 20008000                       ....... 

00025214 <hciLeEventMask>:
   25214:	000fffff 00000000                       ........

0002521c <hciEventMaskPage2>:
   2521c:	00800000 00000000                       ........

00025224 <hciEvtParseFcnTbl>:
   25224:	00000000 00016cf9 00016dfd 00016f09     .....l...m...o..
   25234:	00016f69 0001701d 00000000 00017049     io...p......Ip..
   25244:	000170ad 0001710d 00017161 00017201     .p...q..aq...r..
   25254:	00017261 000172b5 00017309 0001735d     ar...r...s..]s..
   25264:	000173bd 0001742d 00017465 000174bd     .s..-t..et...t..
   25274:	000174e1 00017575 000175a1 000175cd     .t..uu...u...u..
   25284:	000175f9 00017635 00017671 00017505     .u..5v..qv...u..
   25294:	0001753d 0001769d 000176f1 00017745     =u...v...v..Ew..
   252a4:	000177b1 000177dd 00017831 000178dd     .w...w..1x...x..
   252b4:	0001799d 00017a5d 00017a95 00017acd     .y..]z...z...z..
   252c4:	00017b21 00017b61 00017bcd 00017bf9     !{..a{...{...{..
   252d4:	00000000 00017efd 00017f15 00017f81     .....~..........
   252e4:	00017fc1 00000000 00018165 00000000     ........e.......
   252f4:	00018141 00018141 00018141 00018141     A...A...A...A...
   25304:	00018141                                A...

00025308 <hciEvtCbackLen>:
   25308:	0a242404 0a1c060e 100e080e 0a080808     .$$.............
   25318:	44460610 06060606 16060c0c 0a08080e     ..FD............
   25328:	0e0e0806 0826460e 0a060a06 0c0a0420     .....F&..... ...
   25338:	04061016 04040404 00000004              ............

00025344 <ancsAdvCfg>:
   25344:	0000ea60 03200000 00000000              `..... .....

00025350 <ancsSlaveCfg>:
   25350:	00000001                                ....

00025354 <ancsSecCfg>:
   25354:	00010001 00000000                       ........

0002535c <ancsUpdateCfg>:
   2535c:	00000bb8 000f0006 02580000 00000005     ..........X.....

0002536c <ancsSmpCfg>:
   2536c:	07030bb8 00000310                       ........

00025374 <ancsDiscCfg>:
   25374:	00000001                                ....

00025378 <ancsAnccCfg>:
   25378:	000000c8                                ....

0002537c <ancsAdvDataDisc>:
   2537c:	02060102 0303000a 0905180a 53434e41     ............ANCS

0002538c <ancsScanDataDisc>:
   2538c:	00d01511 4b1e122d 4e99a40f f431b5ce     ....-..K...N..1.
   2539c:	00007905                                .y..

000253a0 <ancsCccNtfVal>:
   253a0:	00000001                                ....

000253a4 <ancsDiscCfgList>:
   253a4:	000253a0 00000102 000253a0 00000302     .S.......S......
   253b4:	000253a0 00000602                       .S......

000253bc <ancsCccSet>:
   253bc:	00020013 00000000                       ........

000253c4 <appReqActCfg>:
   253c4:	00000000                                ....

000253c8 <gapValSvc>:
   253c8:	00021800                                         ..

000253ca <gapLenSvc>:
   253ca:	05020002                                         ..

000253cc <gapValApCh>:
   253cc:	01000502 0005002a                                ....*.

000253d2 <gapLenApCh>:
   253d2:	00020005                                         ..

000253d4 <gapLenAp>:
   253d4:	00000002                                ....

000253d8 <gapValCarCh>:
   253d8:	a6000702 0005002a                                ....*.

000253de <gapLenCarCh>:
   253de:	00010005                                         ..

000253e0 <gapLenCar>:
   253e0:	00000001                                ....

000253e4 <gapValRpaoCh>:
   253e4:	c9000902 0005002a                                ....*.

000253ea <gapLenRpaoCh>:
   253ea:	00010005                                         ..

000253ec <gapLenRpao>:
   253ec:	00000001                                ....

000253f0 <gapList>:
   253f0:	000245e6 000253c8 000253ca 01000002     .E...S...S......
   25400:	000245e0 000253cc 000253d2 01000005     .E...S...S......
   25410:	000245ca 10004e9c 000253d4 01000002     .E...N...S......
   25420:	000245e0 000253d8 000253de 01000005     .E...S...S......
   25430:	00024526 10004ea0 000253e0 01000001     &E...N...S......
   25440:	000245e0 000253e4 000253ea 01000005     .E...S...S......
   25450:	00024510 10004ea4 000253ec 01000001     .E...N...S......

00025460 <gattValSvc>:
   25460:	00021801                                         ..

00025462 <gattLenSvc>:
   25462:	12200002                                         ..

00025464 <gattValScCh>:
   25464:	05001220 0005002a                                 ...*.

0002546a <gattLenScCh>:
   2546a:	00010005                                         ..

0002546c <gattValSc>:
   2546c:	ffff0001                                ....

00025470 <gattLenSc>:
   25470:	00020004                                         ..

00025472 <gattLenScChCcc>:
   25472:	45e60002                                         ..

00025474 <gattList>:
   25474:	000245e6 00025460 00025462 01000002     .E..`T..bT......
   25484:	000245e0 00025464 0002546a 01000005     .E..dT..jT......
   25494:	000245c2 0002546c 00025470 00000004     .E..lT..pT......
   254a4:	000245da 10004ea8 00025472 11200002     .E...N..rT.... .

000254b4 <disValSvc>:
   254b4:	0002180a                                         ..

000254b6 <disLenSvc>:
   254b6:	32020002                                         ..

000254b8 <disValMfrCh>:
   254b8:	29003202 0005002a                                .2.)*.

000254be <disLenMfrCh>:
   254be:	2a290005                                         ..

000254c0 <disUuMfr>:
   254c0:	00002a29                                )*..

000254c4 <disValSidCh>:
   254c4:	23003402 0005002a                                .4.#*.

000254ca <disLenSidCh>:
   254ca:	2a230005                                         ..

000254cc <disUuSid>:
   254cc:	00082a23                                         #*

000254ce <disLenSid>:
   254ce:	36020008                                         ..

000254d0 <disValMnCh>:
   254d0:	24003602 0005002a                                .6.$*.

000254d6 <disLenMnCh>:
   254d6:	2a240005                                         ..

000254d8 <disUuMn>:
   254d8:	00002a24                                $*..

000254dc <disValSnCh>:
   254dc:	25003802 0005002a                                .8.%*.

000254e2 <disLenSnCh>:
   254e2:	2a250005                                         ..

000254e4 <disUuSn>:
   254e4:	00002a25                                %*..

000254e8 <disValFwrCh>:
   254e8:	26003a02 0005002a                                .:.&*.

000254ee <disLenFwrCh>:
   254ee:	2a260005                                         ..

000254f0 <disUuFwr>:
   254f0:	00002a26                                &*..

000254f4 <disValHwrCh>:
   254f4:	27003c02 0005002a                                .<.'*.

000254fa <disLenHwrCh>:
   254fa:	2a270005                                         ..

000254fc <disUuHwr>:
   254fc:	00002a27                                '*..

00025500 <disValSwrCh>:
   25500:	28003e02 0005002a                                .>.(*.

00025506 <disLenSwrCh>:
   25506:	2a280005                                         ..

00025508 <disUuSwr>:
   25508:	00002a28                                (*..

0002550c <disValRcdCh>:
   2550c:	2a004002 0005002a                                .@.**.

00025512 <disLenRcdCh>:
   25512:	2a2a0005                                         ..

00025514 <disUuRcd>:
   25514:	00062a2a                                         **

00025516 <disLenRcd>:
   25516:	45e60006                                         ..

00025518 <disList>:
   25518:	000245e6 000254b4 000254b6 01000002     .E...T...T......
   25528:	000245e0 000254b8 000254be 01000005     .E...T...T......
   25538:	000254c0 10002c04 10002c18 01080014     .T...,...,......
   25548:	000245e0 000254c4 000254ca 01000005     .E...T...T......
   25558:	000254cc 10002c1c 000254ce 01000008     .T...,...T......
   25568:	000245e0 000254d0 000254d6 01000005     .E...T...T......
   25578:	000254d8 10002c24 10002c38 01080014     .T..$,..8,......
   25588:	000245e0 000254dc 000254e2 01000005     .E...T...T......
   25598:	000254e4 10002c3c 10002c50 01080014     .T..<,..P,......
   255a8:	000245e0 000254e8 000254ee 01000005     .E...T...T......
   255b8:	000254f0 10002c54 10002c64 01080010     .T..T,..d,......
   255c8:	000245e0 000254f4 000254fa 01000005     .E...T...T......
   255d8:	000254fc 10002c68 10002c78 01080010     .T..h,..x,......
   255e8:	000245e0 00025500 00025506 01000005     .E...U...U......
   255f8:	00025508 10002c7c 10002c8c 01080010     .U..|,...,......
   25608:	000245e0 0002550c 00025512 01000005     .E...U...U......
   25618:	00025514 10004eac 00025516 01000006     .U...N...U......
   25628:	5f495041 52494150 5145525f 49504100     API_PAIR_REQ.API
   25638:	4e41435f 5f4c4543 00514552 5f495041     _CANCEL_REQ.API_
   25648:	48545541 5053525f 49504100 4345535f     AUTH_RSP.API_SEC
   25658:	54495255 45525f59 4d430051 4b505f44     URITY_REQ.CMD_PK
   25668:	4d430054 41505f44 4e495249 41465f47     T.CMD_PAIRING_FA
   25678:	44454c49 5f4d4400 52434e45 5f545059     ILED.DM_ENCRYPT_
   25688:	4c504d43 5f4d4400 52434e45 5f545059     CMPL.DM_ENCRYPT_
   25698:	4c494146 44004445 4f435f4d 435f4e4e     FAILED.DM_CONN_C
   256a8:	45534f4c 46535700 5345415f 504d435f     LOSE.WSF_AES_CMP
   256b8:	4e49004c 45535f54 4e5f444e 5f545845     L.INT_SEND_NEXT_
   256c8:	0059454b 5f544e49 5f58414d 45545441     KEY.INT_MAX_ATTE
   256d8:	5354504d 544e4900 4941505f 474e4952     MPTS.INT_PAIRING
   256e8:	504d435f 4e49004c 49545f54 554f454d     _CMPL.INT_TIMEOU
   256f8:	4e490054 454c5f54 49004353 4c5f544e     T.INT_LESC.INT_L
   25708:	43414745 4e490059 574a5f54 00434e5f     EGACY.INT_JW_NC.
   25718:	5f544e49 53534150 0059454b 5f544e49     INT_PASSKEY.INT_
   25728:	00424f4f 5f495041 52455355 4e4f435f     OOB.API_USER_CON
   25738:	4d524946 49504100 4553555f 454b5f52     FIRM.API_USER_KE
   25748:	45525059 41005353 4b5f4950 52505945     YPRESS.API_KEYPR
   25758:	5f535345 4c504d43 46535700 4343455f     ESS_CMPL.WSF_ECC
   25768:	504d435f 4e49004c 4b505f54 58454e5f     _CMPL.INT_PK_NEX
   25778:	4e490054 4b505f54 504d435f 5357004c     T.INT_PK_CMPL.WS
   25788:	4d435f46 435f4341 004c504d 435f4844     F_CMAC_CMPL.DH_C
   25798:	4b434548 4941465f 4552554c 555f4900     HECK_FAILURE.I_U
   257a8:	6f6e6b6e 49006e77 4c44495f 5f490045     nknown.I_IDLE.I_
   257b8:	45444f4d 4c45535f 00544345 454c5f49     MODE_SELECT.I_LE
   257c8:	505f4353 49004e49 4255505f 59454b5f     SC_PIN.I_PUB_KEY
   257d8:	415f4900 5f485455 454c4553 49005443     .I_AUTH_SELECT.I
   257e8:	4e574a5f 41575f43 435f5449 4900464e     _JWNC_WAIT_CNF.I
   257f8:	4e574a5f 41525f43 4900444e 4e574a5f     _JWNC_RAND.I_JWN
   25808:	48435f43 5f4b4345 5f490031 434e574a     C_CHECK_1.I_JWNC
   25818:	4548435f 325f4b43 4a5f4900 5f434e57     _CHECK_2.I_JWNC_
   25828:	54494157 4553555f 5f490052 4b5f4b50     WAIT_USER.I_PK_K
   25838:	52505945 00535345 4b505f49 4c41435f     EYPRESS.I_PK_CAL
   25848:	5f490043 435f4b50 4900464e 5f4b505f     C.I_PK_CNF.I_PK_
   25858:	444e4152 505f4900 48435f4b 004b4345     RAND.I_PK_CHECK.
   25868:	4b505f49 5045525f 00544145 4f4f5f49     I_PK_REPEAT.I_OO
   25878:	45535f42 525f444e 00444e41 4f4f5f49     B_SEND_RAND.I_OO
   25888:	41575f42 525f5449 00444e41 41435f49     B_WAIT_RAND.I_CA
   25898:	465f434c 4b545f35 49005945 4c41435f     LC_F5_TKEY.I_CAL
   258a8:	35465f43 43414d5f 0059454b 41435f49     C_F5_MACKEY.I_CA
   258b8:	465f434c 544c5f35 5f49004b 434c4143     LC_F5_LTK.I_CALC
   258c8:	5f36465f 49004145 4c41435f 36465f43     _F6_EA.I_CALC_F6
   258d8:	0042455f 45565f49 59464952 5f48445f     _EB.I_VERIFY_DH_
   258e8:	43454843 5f49004b 4147454c 505f5943     CHECK.I_LEGACY_P
   258f8:	49004e49 464e435f 4c41435f 00315f43     IN.I_CNF_CALC_1.
   25908:	4e435f49 41435f46 325f434c 505f4900     I_CNF_CALC_2.I_P
   25918:	5f524941 00464e43 41505f49 525f5249     AIR_CNF.I_PAIR_R
   25928:	00444e41 4e435f49 45565f46 41435f52     AND.I_CNF_VER_CA
   25938:	315f434c 435f4900 565f464e 435f5245     LC_1.I_CNF_VER_C
   25948:	5f434c41 5f490032 5f4b5453 434c4143     ALC_2.I_STK_CALC
   25958:	455f4900 5952434e 49005450 59454b5f     .I_ENCRYPT.I_KEY
   25968:	5349445f 5f490054 45545441 5354504d     _DIST.I_ATTEMPTS
   25978:	555f5200 6f6e6b6e 52006e77 4c44495f     .R_Unknown.R_IDL
   25988:	5f520045 5f495041 52494150 5053525f     E.R_API_PAIR_RSP
   25998:	4d5f5200 5f45444f 454c4553 52005443     .R_MODE_SELECT.R
   259a8:	4255505f 59454b5f 415f5200 5f485455     _PUB_KEY.R_AUTH_
   259b8:	454c4553 52005443 4e574a5f 45535f43     SELECT.R_JWNC_SE
   259c8:	00505554 574a5f52 575f434e 5f544941     TUP.R_JWNC_WAIT_
   259d8:	444e4152 4a5f5200 5f434e57 434c4143     RAND.R_JWNC_CALC
   259e8:	0032475f 574a5f52 575f434e 5f544941     _G2.R_JWNC_WAIT_
   259f8:	52455355 505f5200 454b5f4b 45525059     USER.R_PK_KEYPRE
   25a08:	52005353 5f4b505f 54494157 464e435f     SS.R_PK_WAIT_CNF
   25a18:	505f5200 41435f4b 5200434c 5f4b505f     .R_PK_CALC.R_PK_
   25a28:	444e4152 505f5200 48435f4b 004b4345     RAND.R_PK_CHECK.
   25a38:	4b505f52 5045525f 00544145 4f4f5f52     R_PK_REPEAT.R_OO
   25a48:	45535f42 525f444e 00444e41 4f4f5f52     B_SEND_RAND.R_OO
   25a58:	41575f42 525f5449 00444e41 41575f52     B_WAIT_RAND.R_WA
   25a68:	445f5449 48435f48 004b4345 41435f52     IT_DH_CHECK.R_CA
   25a78:	465f434c 4b545f35 52005945 4c41435f     LC_F5_TKEY.R_CAL
   25a88:	35465f43 43414d5f 0059454b 41435f52     C_F5_MACKEY.R_CA
   25a98:	465f434c 544c5f35 5f52004b 434c4143     LC_F5_LTK.R_CALC
   25aa8:	5f36465f 52004145 4c41435f 36465f43     _F6_EA.R_CALC_F6
   25ab8:	0042455f 49505f52 41505f4e 315f5249     _EB.R_PIN_PAIR_1
   25ac8:	505f5200 505f4e49 5f524941 5f520032     .R_PIN_PAIR_2.R_
   25ad8:	5f464e43 434c4143 5200315f 464e435f     CNF_CALC_1.R_CNF
   25ae8:	4c41435f 00325f43 41505f52 525f5249     _CALC_2.R_PAIR_R
   25af8:	00444e41 4e435f52 45565f46 41435f52     AND.R_CNF_VER_CA
   25b08:	315f434c 435f5200 565f464e 435f5245     LC_1.R_CNF_VER_C
   25b18:	5f434c41 5f520032 5f4b5453 434c4143     ALC_2.R_STK_CALC
   25b28:	455f5200 5952434e 52005450 59454b5f     .R_ENCRYPT.R_KEY
   25b38:	5349445f 5f520054 45545441 5354504d     _DIST.R_ATTEMPTS
   25b48:	00000000                                ....

00025b4c <curve_secp256r1>:
   25b4c:	01002008 ffffffff ffffffff ffffffff     . ..............
	...
   25b68:	00000001 ffffffff fc632551 f3b9cac2     ........Q%c.....
   25b78:	a7179e84 bce6faad ffffffff ffffffff     ................
   25b88:	00000000 ffffffff d898c296 f4a13945     ............E9..
   25b98:	2deb33a0 77037d81 63a440f2 f8bce6e5     .3.-.}.w.@.c....
   25ba8:	e12c4247 6b17d1f2 37bf51f5 cbb64068     GB,....k.Q.7h@..
   25bb8:	6b315ece 2bce3357 7c0f9e16 8ee7eb4a     .^1kW3.+...|J...
   25bc8:	fe1a7f9b 4fe342e2 27d2604b 3bce3c3e     .....B.OK`.'><.;
   25bd8:	cc53b0f6 651d06b0 769886bc b3ebbd55     ..S....e...vU...
   25be8:	aa3a93e7 5ac635d8 00021171 00020991     ..:..5.Zq.......
   25bf8:	00020b41                                A...

00025bfc <ccitt_table>:
   25bfc:	80050000 000a800f 001e801b 80110014     ................
   25c0c:	00368033 8039003c 802d0028 00228027     3.6.<.9.(.-.'.".
   25c1c:	00668063 8069006c 807d0078 00728077     c.f.l.i.x.}.w.r.
   25c2c:	80550050 005a805f 004e804b 80410044     P.U._.Z.K.N.D.A.
   25c3c:	00c680c3 80c900cc 80dd00d8 00d280d7     ................
   25c4c:	80f500f0 00fa80ff 00ee80eb 80e100e4     ................
   25c5c:	80a500a0 00aa80af 00be80bb 80b100b4     ................
   25c6c:	00968093 8099009c 808d0088 00828087     ................
   25c7c:	01868183 8189018c 819d0198 01928197     ................
   25c8c:	81b501b0 01ba81bf 01ae81ab 81a101a4     ................
   25c9c:	81e501e0 01ea81ef 01fe81fb 81f101f4     ................
   25cac:	01d681d3 81d901dc 81cd01c8 01c281c7     ................
   25cbc:	81450140 014a814f 015e815b 81510154     @.E.O.J.[.^.T.Q.
   25ccc:	01768173 8179017c 816d0168 01628167     s.v.|.y.h.m.g.b.
   25cdc:	01268123 8129012c 813d0138 01328137     #.&.,.).8.=.7.2.
   25cec:	81150110 011a811f 010e810b 81010104     ................
   25cfc:	03068303 8309030c 831d0318 03128317     ................
   25d0c:	83350330 033a833f 032e832b 83210324     0.5.?.:.+...$.!.
   25d1c:	83650360 036a836f 037e837b 83710374     `.e.o.j.{.~.t.q.
   25d2c:	03568353 8359035c 834d0348 03428347     S.V.\.Y.H.M.G.B.
   25d3c:	83c503c0 03ca83cf 03de83db 83d103d4     ................
   25d4c:	03f683f3 83f903fc 83ed03e8 03e283e7     ................
   25d5c:	03a683a3 83a903ac 83bd03b8 03b283b7     ................
   25d6c:	83950390 039a839f 038e838b 83810384     ................
   25d7c:	82850280 028a828f 029e829b 82910294     ................
   25d8c:	02b682b3 82b902bc 82ad02a8 02a282a7     ................
   25d9c:	02e682e3 82e902ec 82fd02f8 02f282f7     ................
   25dac:	82d502d0 02da82df 02ce82cb 82c102c4     ................
   25dbc:	02468243 8249024c 825d0258 02528257     C.F.L.I.X.].W.R.
   25dcc:	82750270 027a827f 026e826b 82610264     p.u...z.k.n.d.a.
   25ddc:	82250220 022a822f 023e823b 82310234      .%./.*.;.>.4.1.
   25dec:	02168213 8219021c 820d0208 02028207     ................

00025dfc <am_ble_buffer_patch_data>:
   25dfc:	0d382200 0000ffff 00093532 00093965     ."8.....25..e9..
   25e0c:	0009452b 000948a9 000953f7 00095c1a     +E...H...S...\..
   25e1c:	0009641c 00096afd 0009751a 00097bde     .d...j...u...{..
   25e2c:	0009854b 00098bb3 0009951f 00099c4f     K...........O...
   25e3c:	0009a2f5 0009ad1e 00000000 00000000     ................
	...
   25e78:	47004800 20004841 bf00bf00 b005bf00     .H.GAH. ........
   25e88:	0000bdf0 20006790 00002710 20001000     .....g. .'..... 
   25e98:	00001388 20001018 000003ff b0ffb5ff     ....... ........
   25ea8:	4607b082 4616460c 48302500 99846006     ...F.F.F.%0H.`..
   25eb8:	28eed004 2003d002 bd707360 28f17c60     ...(... `sp.`|.(
   25ec8:	28f2d006 28f3d004 2002d002 bd707360     ...(...(... `sp.
   25ed8:	73602000 0000bd70 20001018 2000100a     . `sp...... ... 
   25ee8:	47004800 20004d81 28008870 2014d116     .H.G.M. p..(... 
   25ef8:	200b2101 fcc6f7ed 0000bd10 47004800     .!. .........H.G
   25f08:	20004e15 d0022800 28017808 7808d01a     .N. .(...x.(...x
   25f18:	d0172802 d00e2800 d00c2801 fed9f7f0     .(...(...(......
   25f28:	d0082800 f816f000 f7ef2032 f7f0f851     .(......2 ..Q...
   25f38:	e000e180 e000e100 68014802 43912228     .........H.h(".C
   25f48:	47706001 52c00000 47004800 20004881     .`pG...R.H.G.H. 
   25f58:	47706001 52c00000 68014802 43912250     .`pG...R.H.hP".C
   25f68:	47706001 52c00000 47004800 200048a1     .`pG...R.H.G.H. 
   25f78:	508040c0 460bb510 24024611 4350220c     .@.P...F.F.$."PC
   25f88:	18804a06 d0062800 2a006842 4618d003     .J...(..Bh.*...F
   25f98:	fb10f000 46204604 0000bd10 00015698     .....F F.....V..
   25fa8:	47084900 20004e99 fd5cf7f3 5b00207c     .I.G.N. ..\.| .[
   25fb8:	1940f80b 2900b2c1 3440d003 f7f98fa0     ..@....)..@4....
   25fc8:	bd70fd73 e7e12101 47084900 20005081     s.p..!...I.G.P. 
   25fd8:	8810f380 f7f34628 2100f94d 8810f381     ....(F..M..!....
   25fe8:	d00f2800 460a8881 2a463a0a 1c64d20c     .(.....F.:F*..d.
   25ff8:	03d20bd2 84c2430a f3802000 47708810     .....C... ....pG
   26008:	00000466 50804440 47084900 200050ed     f...@D.P.I.G.P. 
   26018:	8f809011 9812900e 900d3008 30309812     .........0....00
   26028:	9812900c 900b3044 900a2000 980c2501     ....D0... ...%..
   26038:	f8a4f007 d02d2800 bf00bf00 bf00bf00     .....(-.........
   26048:	bf00bf00 bf00bf00 bf00bf00 9a0ce091     ................
   26058:	232220ff 300a4611 fb9ef7fd 88617007     . "#.F.0.....pa.
   26068:	88a181c1 88e18201 892180c1 7aa18101     ..........!....z
   26078:	e02301c0 9802e077 01401a08 42900940     ..#.w.....@.@..B
   26088:	9802d91c 01401a40 42400940 9802e016     ....@.@.@.@B....
   26098:	bf00bf00 bf00bf00 bf00bf00 bf00bf00     ................
   260a8:	2000bf00 9802e00a 01401a38 42900940     ... ....8.@.@..B
   260b8:	607565c1 84b88960 20019a04 88607550     .eu``...... Pu`.
   260c8:	9a0485f8 75107860 47004800 200048e1     ....`x.u.H.G.H. 
   260d8:	0000bf00 8d3a8960 b2801e40 d1034282     ....`.:.@....B..
   260e8:	43012008 71819803 bdf0b007 20006160     . .C...q....`a. 
	...
   26108:	00000021 00000000 00000001 00000000     !...............
   26118:	ffffffff 000003ff 1f3c00ff 00000000     ..........<.....
   26128:	00002001 00007d89 00002002 000076fd     . ...}... ...v..
   26138:	8c001810 9b080bc0 42181e5b 9808d105     ........[..B....
   26148:	47004800 200048c1 0000bf00 18d24b80     .H.G.H. .....K..
   26158:	20018450 8810f380 280068b8 2000d016     P.. .....h.(... 
   26168:	d0192800 28006b38 2000d012 d0132800     .(..8k.(... .(..
   26178:	1900fc9f 68594b06 088a1809 1b090094     .....KYh........
   26188:	01416059 18801a08 0000bd10 2000602c     Y`A.........,`. 
   26198:	200067b8 47084900 20005579 6a80217d     .g. .I.GyU. }!.j
   261a8:	42880209 1a40d302 e0002201 2a001a08     ...B..@..".....*
   261b8:	1a081929 f7ee4621 b288feb1 3028bd70     )...!F......p.(0
   261c8:	7e003060 b4104770 32404602 24068cd3     `0.~pG...F@2...$
   261d8:	8d144363 b29b18e3 30608493 46187541     cC........`0Au.F
   261e8:	4770bc10 30603028 28007d40 20002000     ..pG(0`0@}.(. . 
   261f8:	07007940 2004d502 e0347060 f0056928     @y..... `p4.(i..
   26208:	2800fb51 2002d002 e02c7060 f0039803     Q..(... `p,.....
   26218:	2804fe4d 4668d107 20027901 d0054388     M..(..hF.y. .C..
   26228:	28002000 2000d004 e01c7060 e7f82001     . .(... `p... ..
   26238:	20006758 50800040 200067b8 04000000     Xg. @..P.g. ....
   26248:	200067c8 47084900 200055cd 207d6a81     .g. .I.G.U. .j} 
   26258:	42810200 1a08d302 e0002201 2a001a40     ...B....."..@..*
   26268:	4360d004 fca4f7eb e0031a20 f7eb4360     ..`C.... ...`C..
   26278:	2400b5f8 7800481c d12d2800 68704e1b     ...$.H.x.(-..Nph
   26288:	28004d1b 4f1bda09 200b2101 210147b8     .M.(...O.!. .G.!
   26298:	47a8200b 28006870 2100dbf6 47a8200b     . .Gph.(...!. .G
   262a8:	200a4e15 270547b0 69f8073f 0d2d0505     .N. .G.'?..i..-.
   262b8:	d1042d00 68c04811 0e800580 2c64d00c     .-...H.h......d,
   262c8:	2014d20a 69f847b0 0d000500 d90442a8     ... .G.i.....B..
   262d8:	1c644605 d3f42c64 4903bdf8 70082001     .Fd.d,.....I. .p
   262e8:	70084907 0000bdf8 20001001 45800080     .I.p....... ...E
   262f8:	00002455 00002391 00003ba1 52c00000     U$...#...;.....R
   26308:	20001000 4818b510 29406801 2140d201     ... ...H.h@)..@!
   26318:	7a806001 d00107c0 bd102000 47804813     .`.z..... ...H.G
   26328:	07002005 491269c0 d0040500 28017808     . ...i.I.....x.(
   26338:	2802d014 7808d012 d0082800 d0062801     ...(...x.(...(..
   26348:	d0042802 4780480b 2032490b 490b4788     .(...H.G.I2 .G.I
   26358:	47882004 4780480a bd102000 20044909     . .G.H.G. ...I. 
   26368:	20014788 0000bd10 200067b8 00009305     .G. .....g. ....
   26378:	20001018 00014b25 00003ba1 00014441     ... %K...;..AD..
   26388:	00014aaf 00014489 b08db5f0 496c4604     .J...D.......FlI
   26398:	4788a804 5b00207c 25009003 90022000     ...G| .[...%. ..
   263a8:	f3802001 6c608810 f3812100 46268810     . ....`l.!....&F
   263b8:	28003660 4621d06b 910c3144 910b3928     `6.(k.!FD1..(9..
   263c8:	910a3164 00ca8881 1851495e 0bc98cc9     d1......^IQ.....
   263d8:	d05c2900 f3812101 68008810 495a9001     .)\..!.....h..ZI
   263e8:	4788980c 69e04607 d0032800 28002000     ...G.F.i.(... .(
   263f8:	e008d002 e7fa2001 980b4953 28004788     ..... ..SI...G.(
   26408:	4952d001 20004788 8810f380 494d88b8     ..RI.G. ......MI
   26418:	184000c0 0bd28cc2 84c203d2 280788b8     ..@............(
   26428:	7e30d21e 76301e40 f3802001 6b208810     ..0~@.0v. .... k
   26438:	d0132800 28002000 980ad005 798021fb     .(... .(.....!.y
   26448:	990a4008 49417188 47884638 f3802000     .@...qAI8F.G. ..
   26458:	4a3f8810 98037b39 e0154790 e7ea2001     ..?J9{...G... ..
   26468:	d90f2809 184000c0 0a008d00 49399000     .(....@.......9I
   26478:	47884638 d0072800 28009800 1c6dd004     8F.G.(.....(..m.
   26488:	e001b2ed b2ed1c6d 28009801 9803d19a     ....m......(....
   26498:	d00e2807 d00c2d00 f3802001 7e308810     .(...-... ....0~
   264a8:	76301b40 f3802000 4a2b8810 98034629     @.0v. ....+J)F..
   264b8:	20014790 8810f380 4f234828 47b89009     .G. ....(H#O...G
   264c8:	20004604 8810f380 d0360020 88e04e1f     .F. .... .6..N..
   264d8:	42889903 2807d112 7aa1d007 4f209100     ...B...(...z.. O
   264e8:	7b227ae3 47b88921 4b1ee005 89207921     .z"{!..G...K!y .
   264f8:	4798462a 46209002 e00347b0 46214a1a     *F.G.. F.G...J!F
   26508:	4790a804 f3802001 490f8810 47889809     ...G. .....I...G
   26518:	00204604 9804d10c d0032800 28002000     .F ......(... .(
   26528:	e005d002 e7fa2001 a9044a10 47909809     ..... ...J.....G
   26538:	f3802000 2c008810 9802d1c9 bdf0b00d     . .....,........
   26548:	000038b5 50804440 00003945 000093a5     .8..@D.PE9......
   26558:	0000b809 0000565d 0000b705 200061b8     ....]V.......a. 
   26568:	0000b729 00012235 00003967 0000390f     )...5"..g9...9..
   26578:	2400b5f1 4e164d15 f3802001 98008810     ...$.M.N. ......
   26588:	210047a8 8810f381 d0172800 460a8881     .G.!.....(.....F
   26598:	2a463a0a 00c9d214 8d091989 21010a0f     .:F*...........!
   265a8:	8810f381 4788490b d0032800 d0012f00     .....I.G.(.../..
   265b8:	b2e41c64 f3802000 e7dd8810 bdf84620     d.... ...... F..
   265c8:	29491fc9 4904d3d8 e7d54788 00003945     ..I)...I.G..E9..
   265d8:	50804440 0000565d 000093a5 b092b5f1     @D.P]V..........
   265e8:	30409812 8f809011 9812900e 900d3008     ..@0.........0..
   265f8:	30309812 9812900c 900b3044 900a2000     ..00....D0... ..
   26608:	980c2501 2c006804 2000d003 d0022800     .%...h.,... .(..
   26618:	2001e093 980ee7fa 48f900c1 90101808     ... .......H....
   26628:	0bc08cc0 d06e2800 49f6980e 900f0080     .....(n....I....
   26638:	30a05808 20017946 d5190771 d0172c00     .X.0Fy. q....,..
   26648:	06b04ff1 7b20d507 078047b8 2000d401     .O.... {.G..... 
   26658:	2001e006 7b20e004 07c047b8 2001d003     ... .. {.G..... 
   26668:	d0022800 2000e004 6824e7fa d1e82c00     .(..... ..$h.,..
   26678:	d0622800 22004be5 980c4621 68a64798     .(b..K."!F...G.h
   26688:	a9094ae3 47904630 d1562800 4fdc88a0     .J..0F.G.(V....O
   26698:	19c000c0 49df8d40 20001841 7912aa08     ....@..IA.. ...y
   266a8:	dd062a00 540a5c32 aa081c40 42907912     .*..2\.T@....y.B
   266b8:	49d9dbf8 478868a0 980f49d2 30a05808     ...I.h.G.I...X.0
   266c8:	07c07940 a908d003 1d007908 a8089009     @y.......y......
   266d8:	98107901 02098d02 430ab2d2 21038502     .y.........C...!
   266e8:	8d029810 430a438a 98118502 21008f80     .....C.C.......!
   266f8:	19c000c0 980b84c1 28006800 2000d004     .........h.(... 
   26708:	d0032800 e018e010 e7f92001 88a1980b     .(....... ......
   26718:	00ca6840 888049c1 00c01851 8cc219c0     @h...I..Q.......
   26728:	03d20bd2 84c2430a 46214abd 4790980b     .....C...J!F...G
   26738:	30609812 1c497e01 98117601 28078f80     ..`0.~I..v.....(
   26748:	990ed208 49af008a 31a05889 07497949     .......I.X.1IyI.
   26758:	2500d500 6809990d d01f2900 462a2100     ...%...h.)...!*F
   26768:	d077438a d2762807 48ae49af 90094788     .Cw..(v..I.H.G..
   26778:	90082000 8f809811 48a20081 30a05840     . .........H@X.0
   26788:	07c07940 90070fc0 6806980d d0092e00     @y.........h....
   26798:	6830990d 28006008 e003d002 e7de2101     ..0h.`.(.....!..
   267a8:	6048990d d07d2e00 90062000 90039812     ..H`..}.. ......
   267b8:	9004a806 9b099f07 25089705 20005f75     ...........%u_. 
   267c8:	90019002 90002001 8e429811 b2d44684     ..... ....B..F..
   267d8:	46292001 b2893109 2f009f05 1d09d001     . )F.1...../....
   267e8:	00c9b289 b2893108 8e3f4667 d205428f     .....1..gF?..B..
   267f8:	05793f50 42a20e0c b2d4d200 dd0142a5     P?y....B.....B..
   26808:	00640864 1a6f4621 42971c62 1909db05     d.d.!Fo.b..B....
   26818:	b2c01c40 42971a6f 4298daf9 2500d901     @...o..B...B...%
   26828:	9904e034 4f817008 487e4981 46014788     4....p.O.I~H.G.F
   26838:	28009800 2000d012 7ab09000 0f800780     ...(... ...z....
   26848:	d0092801 72882002 88c268f0 88809202     .(... .r.h......
   26858:	e0099001 e058e062 e7f42001 72882001     ....b.X.. ... .r
   26868:	19009802 9002b280 dd0142a5 e00072cc     .........B...r..
   26878:	980172cd 980280c8 1b288108 2d00b205     .r........(....-
   26888:	2201dc22 98039b05 250147b8 d0202d00     "..".....G.%.- .
   26898:	7e004668 18099908 9108b2c9 1a089909     hF.~............
   268a8:	e000b280 9009e035 69c09812 d01a2800     ....5......i.(..
   268b8:	6a009812 98126006 20006206 98086030     ...j.`...b. 0`..
   268c8:	d913280a e0242500 9b052200 47b89803     .(...%$..".....G
   268d8:	980de7aa 28006800 990dd101 6030604e     .....h.(....N`0`
   268e8:	6006980d 9812e015 e7e461c6 6806980d     ...`.....a.....h
   268f8:	d0062e00 6830990d 28006008 990dd101     ......0h.`.(....
   26908:	2e006048 e74fd000 4a4ae003 980b990d     H`....O...JJ....
   26918:	2d004790 4948d002 4788980d 6800980b     .G.-..HI...G...h
   26928:	d0032800 28002000 e04bd002 e7fa2001     .(... .(..K.. ..
   26938:	8f809811 d2452807 30809812 280478c0     .....(E....0.x.(
   26948:	493bd140 47884837 d03b2800 21008882     @.;I7H.G.(;....!
   26958:	00d24b2b 855118d2 00c98881 8d8a18c9     +K....Q.........
   26968:	0c640454 858c2200 00c98881 8d0c18c9     T.d.."..........
   26978:	850cb2e4 24018881 18c900c9 08ad8d0d     .......$........
   26988:	432500ad 8881850d 18c900c9 0be48ccc     ..%C............
   26998:	84cc03e4 8884990b 00e56849 88894c1f     ........Ih...L..
   269a8:	00c9192c 8ccb18c9 03db0bdb 84cb4323     ,...........#C..
   269b8:	6809990b d00d2900 6849990b 990b6008     ...h.)....Ih.`..
   269c8:	60026048 6800980b d0062800 29002100     H`.`...h.(...!.)
   269d8:	e03cd005 6008990b 2101e7f1 2800e7f7     ..<....`...!...(
   269e8:	4a07d00a 00c98881 8cc91889 29000bc9     ...J...........)
   269f8:	6800d024 d1f52800 d0262800 0000e027     $..h.(...(&.'...
   26a08:	50804440 20006160 0000af81 00003817     @D.P`a. .....8..
   26a18:	00010341 50804000 000093a5 00000466     A....@.P....f...
   26a28:	00003967 200061e4 000039bb 00010011     g9...a. .9......
   26a38:	00003945 0000390f 000038b5 00ca8881     E9...9...8......
   26a48:	18514907 910ab289 2000e7d6 990a900a     .IQ........ ....
   26a58:	225a980e 4a034350 84811880 bdf0b013     ..Z"PC.J........
   26a68:	00000466 50804080 2300b410 46022114     f....@.P...#.!.F
   26a78:	4911434a 6809247d 42a10224 1b09d902     JC.I}$.h$..B....
   26a88:	e0002301 43481a61 18410081 0c0c0a88     .#..a.HC..A.....
   26a98:	0c4c1900 0d4c1900 0e4c1900 0fc91900     ..L...L...L.....
   26aa8:	08c01840 d0012b00 e0011810 1e401a10     @....+........@.
   26ab8:	bc101e40 00004770 20006054 2300b4f0     @...pG..T`. ...#
   26ac8:	6be54c18 227d4918 02126809 d3024291     .L.k.I}".h...B..
   26ad8:	23011a8a 1a52e000 43564606 435113f2     ...#..R..FVC..QC
   26ae8:	261e1a71 104f434e 118f19f6 124919f6     q..&NCO.......I.
   26af8:	13ce1871 d0012b00 e0001a80 19421810     q....+........B.
   26b08:	008d0891 2b001b52 0143d004 18401a18     ....R..+..C...@.
   26b18:	e0031b80 1a180143 19801840 bcf063e2     ....C...@....c..
   26b28:	00004770 20006780 20006054              pG...g. T`. 

00026b34 <am_hal_ble_num_default_patches>:
   26b34:	00000003                                ....

00026b38 <am_ble_performance_copy_patch_data>:
   26b38:	006e1100 00000400 00000000 01c50101     ..n.............
   26b48:	00000039 00000000 00000000 00000000     9...............
   26b58:	00000000 ffffffff 2000b570 8849490c     ........p.. .II.
   26b68:	188b4a0c 490c881a 24001c9b 022d2513     .J.....I...$.%-.
   26b78:	1c40540c dbfb42a8 2a002000 5c1cdd04     .T@..B... .*...\
   26b88:	1c40540c dbfa4290 47804804 bd702000     .T@..B...H.G. p.
   26b98:	20004800 20004802 20003500 000133af     .H. .H. .5. .3..
   26ba8:	b51f08a0 98002400 d243281d 44790001     .....$...(C...yD
   26bb8:	18497909 130e448f 40251a40 40404040     .yI..D..@.%@@@@@
   26bc8:	40404040 402a4040 2d404040 35403240     @@@@@@*@@@@-@2@5
   26bd8:	00404038 b2c09801 fa07f000 9802e02c     8@@.........,...
   26be8:	9801b2c1 f000b2c0 e025f8b8 b2839806     ..........%.....
   26bf8:	b2829803 b2c19802 b2c09801 f971f000     ..............q.
   26c08:	9801e01a f000b2c0 e015f90a f829f000     ..............).
   26c18:	9801e012 f000b280 e00df962 fb3bf000     ........b.....;.
   26c28:	f000e00a e007fb94 b2c09801 fac7f000     ................
   26c38:	e0014604 43e42400 b0044620 b403bd10     .F...$.C F......
   26c48:	90014801 2739bd01 b4030000 90014801     .H....9'.....H..
   26c58:	2895bd01 b4030000 90014801 0101bd01     ...(.....H......
   26c68:	b4f00000 22432000 68510612 340124ff     ..... C"..Qh.$.4
   26c78:	60514321 03236851 60514319 05db23a3     !CQ`Qh#..CQ`.#..
   26c88:	08496819 60190049 6909492a 4d29b2ce     .hI.I..`*I.i..)M
   26c98:	88294f2a d30142b9 e00d2004 42b94f28     *O)..B... ..(O.B
   26ca8:	2003d301 4f26e008 d30142b9 e0032002     ... ..&O.B... ..
   26cb8:	42b94f25 2001d300 18394f24 7e093120     %O.B... $O9. 1.~
   26cc8:	da0942b1 dd012800 b2401e40 7a091839     .B...(..@.@.9..z
   26cd8:	19c00040 e00b8b00 da042804 42b15c39     @........(..9\.B
   26ce8:	1c40db01 1839b240 00407a09 8b0019c0     ..@.@.9..z@.....
   26cf8:	62314e17 08496819 60190049 6b314e15     .N1b.hI.I..`.N1k
   26d08:	4327460f 62986337 633143a1 68518028     .F'C7c.b.C1c(.Qh
   26d18:	438103b0 78004810 0fc007c0 43190503     ...C.H.x.......C
   26d28:	68516051 43a10200 60514301 4770bcf0     Q`Qh...C.CQ`..pG
   26d38:	00800000 604e4580 3ff62000 38f60000     .....EN`. .?...8
   26d48:	2df60000 09f60000 67fc0000 04802000     ...-.......g. ..
   26d58:	004050c0 603a4580 b5f02000 2243b082     .P@..E:`. ....C"
   26d68:	68530612 04642401 60534323 0fd207ca     ..Sh.$d.#CS`....
   26d78:	078a4696 074a0fd3 070a0fd4 92010fd2     .F....J.........
   26d88:	0fd206ca 068a9200 46940fd2 0fd5064a     ...........FJ...
   26d98:	4a1f09ce 27036811 43b9057f 4f1d6912     ...J.h.'...C.i.O
   26da8:	2800403a 2801d006 2701d009 280205bf     :@.(...(...'...(
   26db8:	4339d003 d0062800 4339e01b 2701e7fa     ..9C.(....9C...'
   26dc8:	4339057f 0330e7f6 016a4310 46624310     ..9C..0..Cj..CbF
   26dd8:	431002d2 01d29a00 9a014310 43100192     ...C.....C.....C
   26de8:	431002a2 4310025a 02124672 4a084310     ...CZ..CrF...C.J
   26df8:	48076110 20436001 68410600 04522201     .a.H.`C ..Ah."R.
   26e08:	4a054391 07d27812 43110b92 b0026041     .C.J.x.....CA`..
   26e18:	0000bdf0 e00343c0 603affff b5f82000     .....C....:`. ..
   26e28:	20432400 68410600 03bf2701 60414339     .$C ..Ah.'..9CA`
   26e38:	00ba6841 60414311 68054821 430d1c51     Ah...CA`!H.hQ..C
   26e48:	4e1f6005 47b020c8 6888491f 60884338     .`.N. .G.I.h8C.`
   26e58:	68f0460e 0fc70400 2001491a 46204788     .F.h.....I. .G F
   26e68:	1c64491a d8014288 d0f22f00 40054818     .Id..B.../...H.@
   26e78:	60054813 03402001 68f160b0 40014815     .H.`. @..`.h.H.@
   26e88:	4a146870 43084010 68306070 0289213f     ph.J.@.Cp`0h?!..
   26e98:	60304388 06092143 2001684a 43820380     .C0`C!..Jh. ...C
   26ea8:	7800480e 0fc007c0 431a0383 684a604a     .H.x.......CJ`Jh
   26eb8:	041b2301 0400439a 604a4302 0000bdf8     .#...C...CJ`....
   26ec8:	3ba15240 00000000 271051c0 fffe0000     @R.;.....Q.'....
   26ed8:	3f3ffffe c0c00000 603affff 47702000     ..??......:`. pG
   26ee8:	b5f00000 2508b083 2000493c 20437008     .......%<I. .pC 
   26ef8:	68410600 431102aa 27296041 067f4938     ..Ah...CA`)'8I..
   26f08:	684160f9 43914b37 07db781b 43190c9b     .`Ah7K.C.x.....C
   26f18:	24256041 684101a4 60414311 10526841     A`%$..Ah.CA`AhR.
   26f28:	60414311 210368f8 43880649 43060356     .CA`.h.!I..CV..C
   26f38:	43060390 200168b8 fe81f7ff 20104621     ...C.h. ....!F. 
   26f48:	fe83f7ff 43060328 2d002400 60fed90c     ....(..C.$.-...`
   26f58:	20644925 68f84788 0a004669 55081c80     %Id .G.hiF.....U
   26f68:	b2e41c64 d3f242ac 79d0466a 18407991     d....B..jF.y.y@.
   26f78:	79127951 18401889 78d1466a 78901841     Qy.y..@.jF.xA..x
   26f88:	78501809 78101809 46291808 fe63f7ff     ..Px...x..)F..c.
   26f98:	b2c04912 68397008 02922201 60394311     .I...p9h."...C9`
   26fa8:	1c400040 20006178 fe49f7ff 06092143     @.@.xa. ..I.C!..
   26fb8:	2001684a 43820300 7800480a 0fc007c0     Jh. ...C.H.x....
   26fc8:	431a0303 684a604a 035b2301 0340439a     ...CJ`Jh.#[..C@.
   26fd8:	604a4302 bdf0b003 60700000 34cc2000     .CJ`......p`. .4
   26fe8:	603a0263 3ba12000 b4700000 06092143     c.:`. .;..p.C!..
   26ff8:	24016848 432004a4 20c46048 05d22287     Hh.$.. CH`. ."..
   27008:	485c6010 68486150 43a04a5c 07d27812     .`\HPaHh\J.C.x..
   27018:	04930fd2 60484318 4b58208b 634305c0     .....CH`. XK..Cc
   27028:	25014b58 250660dd 250560cd 688563c5     XK.%.`.%.`.%.c.h
   27038:	3df0086d 68c56085 355d086d 690560c5     m..=.`.hm.]5.`.i
   27048:	6105086d 086d6945 69856145 6185086d     m..aEim.Ea.im..a
   27058:	086d69c5 6a0561c5 6205086d 086d6a45     .im..a.jm..bEjm.
   27068:	6a856245 6285086d 086d6ac5 250162c5     Eb.jm..b.jm..b.%
   27078:	625d611d 4b43639d 4d43601d 6a1d615d     .a]b.cCK.`CM]a.j
   27088:	621d086d 25016ac3 62c3432b 10a36848     m..b.j.%+C.bHh..
   27098:	60484318 109b6848 60484318 4b3b483d     .CH`Hh...CH`=H;K
   270a8:	68836143 05ad253f 6083432b 60c32300     Ca.h?%..+C.`.#.`
   270b8:	61834b39 682b4d39 43b3261e 6a83602b     9K.a9M+h.&.C+`.j
   270c8:	43ab03f5 6283191b 10a36848 04134398     ...C...bHh...C..
   270d8:	60484318 11236848 03934398 60484318     .CH`Hh#..C...CH`
   270e8:	11636848 60484318 06402029 09246a04     Hhc..CH`) @..j$.
   270f8:	34080124 68486204 03534398 60484318     $..4.bHh.CS..CH`
   27108:	23016848 4318051b 24286048 05c020a3     Hh.#...CH`($. ..
   27118:	4d226004 6285882d 05126848 43104398     .`"M-..bHh...C.C
   27128:	481f6048 700121e6 4a1d7204 8310481e     H`.H.!.p.r.J.H..
   27138:	23e0481e 4c1a7603 706222d4 7262223c     .H.#.v.L."bp<"br
   27148:	83624a1b 22c87641 4d1570a2 72ac2446     .Jb.Av.".p.MF$.r
   27158:	83ac4c18 46297681 215070ca 72d1462a     .L...v)F.pP!*F.r
   27168:	83d14915 215a76c3 49137311 77038411     .I...vZ!.s.I...w
   27178:	4770bc70 7fff0000 603a0000 02492000     p.pG......:`. I.
   27188:	00400000 00804580 021e4580 00030000     ..@..E...E......
   27198:	0000003c 00085240 0000000f 604e51c0     <...@R.......QN`
   271a8:	67fc2000 07f62000 681c0000 09f62000     . .g. .....h. ..
   271b8:	2df60000 38f60000 3ff60000 b5f80000     ...-...8...?....
   271c8:	6800482d d1542800 06122243 21016850     -H.h.(T.C"..Ph.!
   271d8:	430803c9 4f286050 2501683c 06002003     ...CP`(O<h.%. ..
   271e8:	60384320 49252600 4788201e 20014924      C8`.&%I. .G$I. 
   271f8:	68784788 0fc007c0 4a214631 42911c76     .Gxh....1F!Jv..B
   27208:	2800d801 481cd0f2 481e6881 20006001     ...(...H.h.H.`. 
   27218:	2d002600 4b1cd011 25004632 41aa1acb     .&.-...K2F.%...A
   27228:	1c40da14 4f184605 4633434d 1b7d2200     ..@..F.OMC3F."}.
   27238:	1b4d419a dbf44193 4b14e008 d2054299     .AM..A.....K.B..
   27248:	46021c40 1a9a434a d8f9428a 06092101     @..FJC...B...!..
   27258:	0049438c 4908430c 2243600c 68510612     .CI..C.I.`C"..Qh
   27268:	03db2301 4b0a4399 07db781b 43190c1b     .#...C.K.x.....C
   27278:	bdf86051 605c0000 00002000 3ba14440     Q`....\`. ..@D.;
   27288:	27100000 60600000 20002000 d000bebc     ...'..``. . ....
   27298:	603a1312 b5702000 47804823 06242443     ..:`. p.#H.GC$$.
   272a8:	68602101 43080489 481f6060 481f4780     .!`h...C``.H.G.H
   272b8:	28aa7800 68a0d106 d1030780 4788491d     .x.(...h.....I.G
   272c8:	6008491d 05c020a1 21026b02 430a438a     .I.`. ...k.!.C.C
   272d8:	21016302 438a6b02 6302430a 26046b01     .c.!.k.C.C.c.k.&
   272e8:	433143b1 4c146301 4d146860 d5040080     .C1C.c.L`h.M....
   272f8:	47a82001 00806860 4c11d4fa 6060200f     . .G`h.....L. ``
   27308:	47a82001 60602007 47a82004 60602006     . .G. ``. .G. ``
   27318:	480c218b 600805c9 6901480c 61014331     .!.H...`.H.i1C.a
   27328:	bd70bf30 37350000 9c390000 602c0000     0.p...57..9...,`
   27338:	39d12000 60540000 00802000 3ba14580     . .9..T`. ...E.;
   27348:	00400000 03264580 ed000000 b570e000     ..@..E&.......p.
   27358:	200f4d2f 248b6068 682005e4 02492101     /M. h`.$.. h.!I.
   27368:	60204388 4780482b f3802001 48298810     .C `+H.G. ....)H
   27378:	49296840 d4060080 22086820 60204310     @h)I.... h.".C `
   27388:	47882001 2001e001 48244788 48244780     . .G... .G$H.G$H
   27398:	78004925 200d4788 48236068 20434780     %I.x.G. h`#H.GC 
   273a8:	68410600 035b2301 60414319 4a1f2129     ..Ah.#[..CA`)!.J
   273b8:	60ca0649 09126a0a 32080112 680a620a     I..`.j.....2.b.h
   273c8:	432210dc 4a1a600a 00527812 614a1c52     .."C.`.J.xR.R.Ja
   273d8:	49186842 7809439a 0fc907c9 431a034b     Bh.I.C.x....K..C
   273e8:	68436042 431302a2 24286043 05db23a3     B`Ch...CC`($.#..
   273f8:	4c11601c 629c8824 05096843 430b4393     .`.L$..bCh...C.C
   27408:	20006043 8810f380 4780480d 0040bd70     C`. .....H.Gp.@.
   27418:	3b854580 00800001 44894580 346d0001     .E.;.....E.D..m4
   27428:	60400001 3ba12000 4d990000 34cc0001     ..@`. .;...M...4
   27438:	60700463 603a2000 604e2000 34ad2000     c.p`. :`. N`. .4
   27448:	00000001                                ....

0002744c <am_hal_ble_num_default_patches_b0>:
   2744c:	00000003                                ....

00027450 <am_hal_cachectrl_defaults>:
   27450:	00000308                                ....

00027454 <g_ui8Bit76Capabilities>:
   27454:	02800101 80010180 80800101 80808080     ................
   27464:	80808080 80808008 01800180 80808080     ................
   27474:	80808080 01800402 01010401 80808080     ................
   27484:	00000101                                ....

00027488 <g_ui8NCEtable>:
   27488:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
   27498:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
   274a8:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
   274b8:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
   274c8:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
   274d8:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
   274e8:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
   274f8:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
   27508:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
   27518:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
   27528:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
   27538:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
   27548:	32221202 43231303                       .."2..#C

00027550 <g_ui8Inpen>:
   27550:	e2242323 100723a1 e1004303 3561a151     ##$..#...C..Q.a5
   27560:	4181c525 d160b001 31a13130 1100f101     %..A..`.01.1....
   27570:	01d121b1 300511e5 31301037 40006100     .!.....07.01.a.@
   27580:	00003130                                01..

00027584 <g_AM_HAL_GPIO_DISABLE>:
   27584:	00000003                                ....

00027588 <g_AM_HAL_GPIO_OUTPUT>:
   27588:	00000403                                ....

0002758c <g_ui8nCEpins>:
   2758c:	02070707 00080802 01020202 01010101     ................
   2759c:	01010101 01010101 01010101 01010101     ................
   275ac:	01010101 08010101 01010008 01010101     ................
   275bc:	00000101                                ....

000275c0 <g_am_hal_mcuctrl_flash_size>:
   275c0:	00004000 00008000 00010000 00020000     .@..............
   275d0:	00040000 00080000 00100000 00200000     .............. .
	...

00027600 <g_am_hal_mcuctrl_sram_size>:
   27600:	00004000 00008000 00010000 00020000     .@..............
   27610:	00040000 00080000 00100000 00060000     ................
	...

00027640 <am_hal_pwrctrl_peripheral_control>:
	...
   2764c:	00000001 00000004 00000004 00000002     ................
   2765c:	00000008 00000008 00000004 00000008     ................
   2766c:	00000008 00000008 00000008 00000008     ................
   2767c:	00000010 00000010 00000010 00000020     ............ ...
   2768c:	00000010 00000010 00000040 00000010     ........@.......
   2769c:	00000010 00000080 00000004 00000004     ................
   276ac:	00000100 00000004 00000004 00000200     ................
   276bc:	00000020 00000020 00000400 00000004      ... ...........
   276cc:	00000004 00000800 00000040 00000040     ........@...@...
   276dc:	00001000 00000080 00000080 00002000     ............. ..
   276ec:	00000100 00000100                       ........

000276f4 <g_AM_BSP_GPIO_CLICKBEETLE_SW1>:
   276f4:	00001003                                ....

000276f8 <g_AM_BSP_GPIO_ITM_SWO>:
   276f8:	00000002                                ....
