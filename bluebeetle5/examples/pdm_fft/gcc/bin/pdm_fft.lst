
bin/pdm_fft.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 79 db 00 00 71 db 00 00 29 cc 00 00     ....y...q...)...
    c010:	29 cc 00 00 29 cc 00 00 29 cc 00 00 00 00 00 00     )...)...).......
	...
    c02c:	75 db 00 00 75 db 00 00 00 00 00 00 75 db 00 00     u...u.......u...
    c03c:	75 db 00 00 75 db 00 00 75 db 00 00 75 db 00 00     u...u...u...u...
    c04c:	75 db 00 00 75 db 00 00 75 db 00 00 75 db 00 00     u...u...u...u...
    c05c:	75 db 00 00 75 db 00 00 75 db 00 00 75 db 00 00     u...u...u...u...
    c06c:	75 db 00 00 75 db 00 00 75 db 00 00 75 db 00 00     u...u...u...u...
    c07c:	75 db 00 00 75 db 00 00 75 db 00 00 75 db 00 00     u...u...u...u...
    c08c:	a1 ca 00 00 75 db 00 00 75 db 00 00 75 db 00 00     ....u...u...u...
    c09c:	75 db 00 00 75 db 00 00 75 db 00 00 75 db 00 00     u...u...u...u...
    c0ac:	75 db 00 00 75 db 00 00 75 db 00 00 75 db 00 00     u...u...u...u...
    c0bc:	75 db 00 00                                         u...

0000c0c0 <__Patchable>:
	...

0000c100 <__aeabi_drsub>:
    c100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c104:	e002      	b.n	c10c <__adddf3>
    c106:	bf00      	nop

0000c108 <__aeabi_dsub>:
    c108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c10c <__adddf3>:
    c10c:	b530      	push	{r4, r5, lr}
    c10e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c112:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c116:	ea94 0f05 	teq	r4, r5
    c11a:	bf08      	it	eq
    c11c:	ea90 0f02 	teqeq	r0, r2
    c120:	bf1f      	itttt	ne
    c122:	ea54 0c00 	orrsne.w	ip, r4, r0
    c126:	ea55 0c02 	orrsne.w	ip, r5, r2
    c12a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c12e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c132:	f000 80e2 	beq.w	c2fa <__adddf3+0x1ee>
    c136:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c13a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c13e:	bfb8      	it	lt
    c140:	426d      	neglt	r5, r5
    c142:	dd0c      	ble.n	c15e <__adddf3+0x52>
    c144:	442c      	add	r4, r5
    c146:	ea80 0202 	eor.w	r2, r0, r2
    c14a:	ea81 0303 	eor.w	r3, r1, r3
    c14e:	ea82 0000 	eor.w	r0, r2, r0
    c152:	ea83 0101 	eor.w	r1, r3, r1
    c156:	ea80 0202 	eor.w	r2, r0, r2
    c15a:	ea81 0303 	eor.w	r3, r1, r3
    c15e:	2d36      	cmp	r5, #54	; 0x36
    c160:	bf88      	it	hi
    c162:	bd30      	pophi	{r4, r5, pc}
    c164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c168:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c16c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c174:	d002      	beq.n	c17c <__adddf3+0x70>
    c176:	4240      	negs	r0, r0
    c178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c17c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c180:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c188:	d002      	beq.n	c190 <__adddf3+0x84>
    c18a:	4252      	negs	r2, r2
    c18c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c190:	ea94 0f05 	teq	r4, r5
    c194:	f000 80a7 	beq.w	c2e6 <__adddf3+0x1da>
    c198:	f1a4 0401 	sub.w	r4, r4, #1
    c19c:	f1d5 0e20 	rsbs	lr, r5, #32
    c1a0:	db0d      	blt.n	c1be <__adddf3+0xb2>
    c1a2:	fa02 fc0e 	lsl.w	ip, r2, lr
    c1a6:	fa22 f205 	lsr.w	r2, r2, r5
    c1aa:	1880      	adds	r0, r0, r2
    c1ac:	f141 0100 	adc.w	r1, r1, #0
    c1b0:	fa03 f20e 	lsl.w	r2, r3, lr
    c1b4:	1880      	adds	r0, r0, r2
    c1b6:	fa43 f305 	asr.w	r3, r3, r5
    c1ba:	4159      	adcs	r1, r3
    c1bc:	e00e      	b.n	c1dc <__adddf3+0xd0>
    c1be:	f1a5 0520 	sub.w	r5, r5, #32
    c1c2:	f10e 0e20 	add.w	lr, lr, #32
    c1c6:	2a01      	cmp	r2, #1
    c1c8:	fa03 fc0e 	lsl.w	ip, r3, lr
    c1cc:	bf28      	it	cs
    c1ce:	f04c 0c02 	orrcs.w	ip, ip, #2
    c1d2:	fa43 f305 	asr.w	r3, r3, r5
    c1d6:	18c0      	adds	r0, r0, r3
    c1d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c1e0:	d507      	bpl.n	c1f2 <__adddf3+0xe6>
    c1e2:	f04f 0e00 	mov.w	lr, #0
    c1e6:	f1dc 0c00 	rsbs	ip, ip, #0
    c1ea:	eb7e 0000 	sbcs.w	r0, lr, r0
    c1ee:	eb6e 0101 	sbc.w	r1, lr, r1
    c1f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c1f6:	d31b      	bcc.n	c230 <__adddf3+0x124>
    c1f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c1fc:	d30c      	bcc.n	c218 <__adddf3+0x10c>
    c1fe:	0849      	lsrs	r1, r1, #1
    c200:	ea5f 0030 	movs.w	r0, r0, rrx
    c204:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c208:	f104 0401 	add.w	r4, r4, #1
    c20c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c214:	f080 809a 	bcs.w	c34c <__adddf3+0x240>
    c218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c21c:	bf08      	it	eq
    c21e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c222:	f150 0000 	adcs.w	r0, r0, #0
    c226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c22a:	ea41 0105 	orr.w	r1, r1, r5
    c22e:	bd30      	pop	{r4, r5, pc}
    c230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c234:	4140      	adcs	r0, r0
    c236:	eb41 0101 	adc.w	r1, r1, r1
    c23a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c23e:	f1a4 0401 	sub.w	r4, r4, #1
    c242:	d1e9      	bne.n	c218 <__adddf3+0x10c>
    c244:	f091 0f00 	teq	r1, #0
    c248:	bf04      	itt	eq
    c24a:	4601      	moveq	r1, r0
    c24c:	2000      	moveq	r0, #0
    c24e:	fab1 f381 	clz	r3, r1
    c252:	bf08      	it	eq
    c254:	3320      	addeq	r3, #32
    c256:	f1a3 030b 	sub.w	r3, r3, #11
    c25a:	f1b3 0220 	subs.w	r2, r3, #32
    c25e:	da0c      	bge.n	c27a <__adddf3+0x16e>
    c260:	320c      	adds	r2, #12
    c262:	dd08      	ble.n	c276 <__adddf3+0x16a>
    c264:	f102 0c14 	add.w	ip, r2, #20
    c268:	f1c2 020c 	rsb	r2, r2, #12
    c26c:	fa01 f00c 	lsl.w	r0, r1, ip
    c270:	fa21 f102 	lsr.w	r1, r1, r2
    c274:	e00c      	b.n	c290 <__adddf3+0x184>
    c276:	f102 0214 	add.w	r2, r2, #20
    c27a:	bfd8      	it	le
    c27c:	f1c2 0c20 	rsble	ip, r2, #32
    c280:	fa01 f102 	lsl.w	r1, r1, r2
    c284:	fa20 fc0c 	lsr.w	ip, r0, ip
    c288:	bfdc      	itt	le
    c28a:	ea41 010c 	orrle.w	r1, r1, ip
    c28e:	4090      	lslle	r0, r2
    c290:	1ae4      	subs	r4, r4, r3
    c292:	bfa2      	ittt	ge
    c294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c298:	4329      	orrge	r1, r5
    c29a:	bd30      	popge	{r4, r5, pc}
    c29c:	ea6f 0404 	mvn.w	r4, r4
    c2a0:	3c1f      	subs	r4, #31
    c2a2:	da1c      	bge.n	c2de <__adddf3+0x1d2>
    c2a4:	340c      	adds	r4, #12
    c2a6:	dc0e      	bgt.n	c2c6 <__adddf3+0x1ba>
    c2a8:	f104 0414 	add.w	r4, r4, #20
    c2ac:	f1c4 0220 	rsb	r2, r4, #32
    c2b0:	fa20 f004 	lsr.w	r0, r0, r4
    c2b4:	fa01 f302 	lsl.w	r3, r1, r2
    c2b8:	ea40 0003 	orr.w	r0, r0, r3
    c2bc:	fa21 f304 	lsr.w	r3, r1, r4
    c2c0:	ea45 0103 	orr.w	r1, r5, r3
    c2c4:	bd30      	pop	{r4, r5, pc}
    c2c6:	f1c4 040c 	rsb	r4, r4, #12
    c2ca:	f1c4 0220 	rsb	r2, r4, #32
    c2ce:	fa20 f002 	lsr.w	r0, r0, r2
    c2d2:	fa01 f304 	lsl.w	r3, r1, r4
    c2d6:	ea40 0003 	orr.w	r0, r0, r3
    c2da:	4629      	mov	r1, r5
    c2dc:	bd30      	pop	{r4, r5, pc}
    c2de:	fa21 f004 	lsr.w	r0, r1, r4
    c2e2:	4629      	mov	r1, r5
    c2e4:	bd30      	pop	{r4, r5, pc}
    c2e6:	f094 0f00 	teq	r4, #0
    c2ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c2ee:	bf06      	itte	eq
    c2f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c2f4:	3401      	addeq	r4, #1
    c2f6:	3d01      	subne	r5, #1
    c2f8:	e74e      	b.n	c198 <__adddf3+0x8c>
    c2fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c2fe:	bf18      	it	ne
    c300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c304:	d029      	beq.n	c35a <__adddf3+0x24e>
    c306:	ea94 0f05 	teq	r4, r5
    c30a:	bf08      	it	eq
    c30c:	ea90 0f02 	teqeq	r0, r2
    c310:	d005      	beq.n	c31e <__adddf3+0x212>
    c312:	ea54 0c00 	orrs.w	ip, r4, r0
    c316:	bf04      	itt	eq
    c318:	4619      	moveq	r1, r3
    c31a:	4610      	moveq	r0, r2
    c31c:	bd30      	pop	{r4, r5, pc}
    c31e:	ea91 0f03 	teq	r1, r3
    c322:	bf1e      	ittt	ne
    c324:	2100      	movne	r1, #0
    c326:	2000      	movne	r0, #0
    c328:	bd30      	popne	{r4, r5, pc}
    c32a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c32e:	d105      	bne.n	c33c <__adddf3+0x230>
    c330:	0040      	lsls	r0, r0, #1
    c332:	4149      	adcs	r1, r1
    c334:	bf28      	it	cs
    c336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c33a:	bd30      	pop	{r4, r5, pc}
    c33c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c340:	bf3c      	itt	cc
    c342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c346:	bd30      	popcc	{r4, r5, pc}
    c348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c34c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c354:	f04f 0000 	mov.w	r0, #0
    c358:	bd30      	pop	{r4, r5, pc}
    c35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c35e:	bf1a      	itte	ne
    c360:	4619      	movne	r1, r3
    c362:	4610      	movne	r0, r2
    c364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c368:	bf1c      	itt	ne
    c36a:	460b      	movne	r3, r1
    c36c:	4602      	movne	r2, r0
    c36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c372:	bf06      	itte	eq
    c374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c378:	ea91 0f03 	teqeq	r1, r3
    c37c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c380:	bd30      	pop	{r4, r5, pc}
    c382:	bf00      	nop

0000c384 <__aeabi_ui2d>:
    c384:	f090 0f00 	teq	r0, #0
    c388:	bf04      	itt	eq
    c38a:	2100      	moveq	r1, #0
    c38c:	4770      	bxeq	lr
    c38e:	b530      	push	{r4, r5, lr}
    c390:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c394:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c398:	f04f 0500 	mov.w	r5, #0
    c39c:	f04f 0100 	mov.w	r1, #0
    c3a0:	e750      	b.n	c244 <__adddf3+0x138>
    c3a2:	bf00      	nop

0000c3a4 <__aeabi_i2d>:
    c3a4:	f090 0f00 	teq	r0, #0
    c3a8:	bf04      	itt	eq
    c3aa:	2100      	moveq	r1, #0
    c3ac:	4770      	bxeq	lr
    c3ae:	b530      	push	{r4, r5, lr}
    c3b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c3b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c3b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c3bc:	bf48      	it	mi
    c3be:	4240      	negmi	r0, r0
    c3c0:	f04f 0100 	mov.w	r1, #0
    c3c4:	e73e      	b.n	c244 <__adddf3+0x138>
    c3c6:	bf00      	nop

0000c3c8 <__aeabi_f2d>:
    c3c8:	0042      	lsls	r2, r0, #1
    c3ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c3ce:	ea4f 0131 	mov.w	r1, r1, rrx
    c3d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c3d6:	bf1f      	itttt	ne
    c3d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    c3dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c3e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c3e4:	4770      	bxne	lr
    c3e6:	f092 0f00 	teq	r2, #0
    c3ea:	bf14      	ite	ne
    c3ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c3f0:	4770      	bxeq	lr
    c3f2:	b530      	push	{r4, r5, lr}
    c3f4:	f44f 7460 	mov.w	r4, #896	; 0x380
    c3f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c3fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c400:	e720      	b.n	c244 <__adddf3+0x138>
    c402:	bf00      	nop

0000c404 <__aeabi_ul2d>:
    c404:	ea50 0201 	orrs.w	r2, r0, r1
    c408:	bf08      	it	eq
    c40a:	4770      	bxeq	lr
    c40c:	b530      	push	{r4, r5, lr}
    c40e:	f04f 0500 	mov.w	r5, #0
    c412:	e00a      	b.n	c42a <__aeabi_l2d+0x16>

0000c414 <__aeabi_l2d>:
    c414:	ea50 0201 	orrs.w	r2, r0, r1
    c418:	bf08      	it	eq
    c41a:	4770      	bxeq	lr
    c41c:	b530      	push	{r4, r5, lr}
    c41e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c422:	d502      	bpl.n	c42a <__aeabi_l2d+0x16>
    c424:	4240      	negs	r0, r0
    c426:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c42a:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c42e:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c432:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c436:	f43f aedc 	beq.w	c1f2 <__adddf3+0xe6>
    c43a:	f04f 0203 	mov.w	r2, #3
    c43e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c442:	bf18      	it	ne
    c444:	3203      	addne	r2, #3
    c446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c44a:	bf18      	it	ne
    c44c:	3203      	addne	r2, #3
    c44e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c452:	f1c2 0320 	rsb	r3, r2, #32
    c456:	fa00 fc03 	lsl.w	ip, r0, r3
    c45a:	fa20 f002 	lsr.w	r0, r0, r2
    c45e:	fa01 fe03 	lsl.w	lr, r1, r3
    c462:	ea40 000e 	orr.w	r0, r0, lr
    c466:	fa21 f102 	lsr.w	r1, r1, r2
    c46a:	4414      	add	r4, r2
    c46c:	e6c1      	b.n	c1f2 <__adddf3+0xe6>
    c46e:	bf00      	nop

0000c470 <__aeabi_d2f>:
    c470:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c474:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c478:	bf24      	itt	cs
    c47a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c47e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c482:	d90d      	bls.n	c4a0 <__aeabi_d2f+0x30>
    c484:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c488:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c48c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c490:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c494:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c498:	bf08      	it	eq
    c49a:	f020 0001 	biceq.w	r0, r0, #1
    c49e:	4770      	bx	lr
    c4a0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c4a4:	d121      	bne.n	c4ea <__aeabi_d2f+0x7a>
    c4a6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c4aa:	bfbc      	itt	lt
    c4ac:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c4b0:	4770      	bxlt	lr
    c4b2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c4b6:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c4ba:	f1c2 0218 	rsb	r2, r2, #24
    c4be:	f1c2 0c20 	rsb	ip, r2, #32
    c4c2:	fa10 f30c 	lsls.w	r3, r0, ip
    c4c6:	fa20 f002 	lsr.w	r0, r0, r2
    c4ca:	bf18      	it	ne
    c4cc:	f040 0001 	orrne.w	r0, r0, #1
    c4d0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c4d4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c4d8:	fa03 fc0c 	lsl.w	ip, r3, ip
    c4dc:	ea40 000c 	orr.w	r0, r0, ip
    c4e0:	fa23 f302 	lsr.w	r3, r3, r2
    c4e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c4e8:	e7cc      	b.n	c484 <__aeabi_d2f+0x14>
    c4ea:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c4ee:	d107      	bne.n	c500 <__aeabi_d2f+0x90>
    c4f0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c4f4:	bf1e      	ittt	ne
    c4f6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c4fa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c4fe:	4770      	bxne	lr
    c500:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c504:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c508:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c50c:	4770      	bx	lr
    c50e:	bf00      	nop

0000c510 <__aeabi_dmul>:
    c510:	b570      	push	{r4, r5, r6, lr}
    c512:	f04f 0cff 	mov.w	ip, #255	; 0xff
    c516:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    c51a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    c51e:	bf1d      	ittte	ne
    c520:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    c524:	ea94 0f0c 	teqne	r4, ip
    c528:	ea95 0f0c 	teqne	r5, ip
    c52c:	f000 f8de 	bleq	c6ec <__aeabi_dmul+0x1dc>
    c530:	442c      	add	r4, r5
    c532:	ea81 0603 	eor.w	r6, r1, r3
    c536:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    c53a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    c53e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    c542:	bf18      	it	ne
    c544:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    c548:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c54c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    c550:	d038      	beq.n	c5c4 <__aeabi_dmul+0xb4>
    c552:	fba0 ce02 	umull	ip, lr, r0, r2
    c556:	f04f 0500 	mov.w	r5, #0
    c55a:	fbe1 e502 	umlal	lr, r5, r1, r2
    c55e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    c562:	fbe0 e503 	umlal	lr, r5, r0, r3
    c566:	f04f 0600 	mov.w	r6, #0
    c56a:	fbe1 5603 	umlal	r5, r6, r1, r3
    c56e:	f09c 0f00 	teq	ip, #0
    c572:	bf18      	it	ne
    c574:	f04e 0e01 	orrne.w	lr, lr, #1
    c578:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    c57c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    c580:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    c584:	d204      	bcs.n	c590 <__aeabi_dmul+0x80>
    c586:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    c58a:	416d      	adcs	r5, r5
    c58c:	eb46 0606 	adc.w	r6, r6, r6
    c590:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    c594:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    c598:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    c59c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    c5a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    c5a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    c5a8:	bf88      	it	hi
    c5aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    c5ae:	d81e      	bhi.n	c5ee <__aeabi_dmul+0xde>
    c5b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    c5b4:	bf08      	it	eq
    c5b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    c5ba:	f150 0000 	adcs.w	r0, r0, #0
    c5be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c5c2:	bd70      	pop	{r4, r5, r6, pc}
    c5c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    c5c8:	ea46 0101 	orr.w	r1, r6, r1
    c5cc:	ea40 0002 	orr.w	r0, r0, r2
    c5d0:	ea81 0103 	eor.w	r1, r1, r3
    c5d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    c5d8:	bfc2      	ittt	gt
    c5da:	ebd4 050c 	rsbsgt	r5, r4, ip
    c5de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    c5e2:	bd70      	popgt	{r4, r5, r6, pc}
    c5e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c5e8:	f04f 0e00 	mov.w	lr, #0
    c5ec:	3c01      	subs	r4, #1
    c5ee:	f300 80ab 	bgt.w	c748 <__aeabi_dmul+0x238>
    c5f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
    c5f6:	bfde      	ittt	le
    c5f8:	2000      	movle	r0, #0
    c5fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    c5fe:	bd70      	pople	{r4, r5, r6, pc}
    c600:	f1c4 0400 	rsb	r4, r4, #0
    c604:	3c20      	subs	r4, #32
    c606:	da35      	bge.n	c674 <__aeabi_dmul+0x164>
    c608:	340c      	adds	r4, #12
    c60a:	dc1b      	bgt.n	c644 <__aeabi_dmul+0x134>
    c60c:	f104 0414 	add.w	r4, r4, #20
    c610:	f1c4 0520 	rsb	r5, r4, #32
    c614:	fa00 f305 	lsl.w	r3, r0, r5
    c618:	fa20 f004 	lsr.w	r0, r0, r4
    c61c:	fa01 f205 	lsl.w	r2, r1, r5
    c620:	ea40 0002 	orr.w	r0, r0, r2
    c624:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    c628:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c62c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c630:	fa21 f604 	lsr.w	r6, r1, r4
    c634:	eb42 0106 	adc.w	r1, r2, r6
    c638:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c63c:	bf08      	it	eq
    c63e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c642:	bd70      	pop	{r4, r5, r6, pc}
    c644:	f1c4 040c 	rsb	r4, r4, #12
    c648:	f1c4 0520 	rsb	r5, r4, #32
    c64c:	fa00 f304 	lsl.w	r3, r0, r4
    c650:	fa20 f005 	lsr.w	r0, r0, r5
    c654:	fa01 f204 	lsl.w	r2, r1, r4
    c658:	ea40 0002 	orr.w	r0, r0, r2
    c65c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c660:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c664:	f141 0100 	adc.w	r1, r1, #0
    c668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c66c:	bf08      	it	eq
    c66e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c672:	bd70      	pop	{r4, r5, r6, pc}
    c674:	f1c4 0520 	rsb	r5, r4, #32
    c678:	fa00 f205 	lsl.w	r2, r0, r5
    c67c:	ea4e 0e02 	orr.w	lr, lr, r2
    c680:	fa20 f304 	lsr.w	r3, r0, r4
    c684:	fa01 f205 	lsl.w	r2, r1, r5
    c688:	ea43 0302 	orr.w	r3, r3, r2
    c68c:	fa21 f004 	lsr.w	r0, r1, r4
    c690:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c694:	fa21 f204 	lsr.w	r2, r1, r4
    c698:	ea20 0002 	bic.w	r0, r0, r2
    c69c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    c6a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c6a4:	bf08      	it	eq
    c6a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c6aa:	bd70      	pop	{r4, r5, r6, pc}
    c6ac:	f094 0f00 	teq	r4, #0
    c6b0:	d10f      	bne.n	c6d2 <__aeabi_dmul+0x1c2>
    c6b2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    c6b6:	0040      	lsls	r0, r0, #1
    c6b8:	eb41 0101 	adc.w	r1, r1, r1
    c6bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c6c0:	bf08      	it	eq
    c6c2:	3c01      	subeq	r4, #1
    c6c4:	d0f7      	beq.n	c6b6 <__aeabi_dmul+0x1a6>
    c6c6:	ea41 0106 	orr.w	r1, r1, r6
    c6ca:	f095 0f00 	teq	r5, #0
    c6ce:	bf18      	it	ne
    c6d0:	4770      	bxne	lr
    c6d2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    c6d6:	0052      	lsls	r2, r2, #1
    c6d8:	eb43 0303 	adc.w	r3, r3, r3
    c6dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    c6e0:	bf08      	it	eq
    c6e2:	3d01      	subeq	r5, #1
    c6e4:	d0f7      	beq.n	c6d6 <__aeabi_dmul+0x1c6>
    c6e6:	ea43 0306 	orr.w	r3, r3, r6
    c6ea:	4770      	bx	lr
    c6ec:	ea94 0f0c 	teq	r4, ip
    c6f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    c6f4:	bf18      	it	ne
    c6f6:	ea95 0f0c 	teqne	r5, ip
    c6fa:	d00c      	beq.n	c716 <__aeabi_dmul+0x206>
    c6fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c700:	bf18      	it	ne
    c702:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c706:	d1d1      	bne.n	c6ac <__aeabi_dmul+0x19c>
    c708:	ea81 0103 	eor.w	r1, r1, r3
    c70c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c710:	f04f 0000 	mov.w	r0, #0
    c714:	bd70      	pop	{r4, r5, r6, pc}
    c716:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c71a:	bf06      	itte	eq
    c71c:	4610      	moveq	r0, r2
    c71e:	4619      	moveq	r1, r3
    c720:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c724:	d019      	beq.n	c75a <__aeabi_dmul+0x24a>
    c726:	ea94 0f0c 	teq	r4, ip
    c72a:	d102      	bne.n	c732 <__aeabi_dmul+0x222>
    c72c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    c730:	d113      	bne.n	c75a <__aeabi_dmul+0x24a>
    c732:	ea95 0f0c 	teq	r5, ip
    c736:	d105      	bne.n	c744 <__aeabi_dmul+0x234>
    c738:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    c73c:	bf1c      	itt	ne
    c73e:	4610      	movne	r0, r2
    c740:	4619      	movne	r1, r3
    c742:	d10a      	bne.n	c75a <__aeabi_dmul+0x24a>
    c744:	ea81 0103 	eor.w	r1, r1, r3
    c748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c74c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    c750:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c754:	f04f 0000 	mov.w	r0, #0
    c758:	bd70      	pop	{r4, r5, r6, pc}
    c75a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    c75e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    c762:	bd70      	pop	{r4, r5, r6, pc}

0000c764 <__aeabi_ddiv>:
    c764:	b570      	push	{r4, r5, r6, lr}
    c766:	f04f 0cff 	mov.w	ip, #255	; 0xff
    c76a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    c76e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    c772:	bf1d      	ittte	ne
    c774:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    c778:	ea94 0f0c 	teqne	r4, ip
    c77c:	ea95 0f0c 	teqne	r5, ip
    c780:	f000 f8a7 	bleq	c8d2 <__aeabi_ddiv+0x16e>
    c784:	eba4 0405 	sub.w	r4, r4, r5
    c788:	ea81 0e03 	eor.w	lr, r1, r3
    c78c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    c790:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c794:	f000 8088 	beq.w	c8a8 <__aeabi_ddiv+0x144>
    c798:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c79c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    c7a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    c7a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    c7a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
    c7ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    c7b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    c7b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
    c7b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    c7bc:	429d      	cmp	r5, r3
    c7be:	bf08      	it	eq
    c7c0:	4296      	cmpeq	r6, r2
    c7c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    c7c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
    c7ca:	d202      	bcs.n	c7d2 <__aeabi_ddiv+0x6e>
    c7cc:	085b      	lsrs	r3, r3, #1
    c7ce:	ea4f 0232 	mov.w	r2, r2, rrx
    c7d2:	1ab6      	subs	r6, r6, r2
    c7d4:	eb65 0503 	sbc.w	r5, r5, r3
    c7d8:	085b      	lsrs	r3, r3, #1
    c7da:	ea4f 0232 	mov.w	r2, r2, rrx
    c7de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    c7e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    c7e6:	ebb6 0e02 	subs.w	lr, r6, r2
    c7ea:	eb75 0e03 	sbcs.w	lr, r5, r3
    c7ee:	bf22      	ittt	cs
    c7f0:	1ab6      	subcs	r6, r6, r2
    c7f2:	4675      	movcs	r5, lr
    c7f4:	ea40 000c 	orrcs.w	r0, r0, ip
    c7f8:	085b      	lsrs	r3, r3, #1
    c7fa:	ea4f 0232 	mov.w	r2, r2, rrx
    c7fe:	ebb6 0e02 	subs.w	lr, r6, r2
    c802:	eb75 0e03 	sbcs.w	lr, r5, r3
    c806:	bf22      	ittt	cs
    c808:	1ab6      	subcs	r6, r6, r2
    c80a:	4675      	movcs	r5, lr
    c80c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    c810:	085b      	lsrs	r3, r3, #1
    c812:	ea4f 0232 	mov.w	r2, r2, rrx
    c816:	ebb6 0e02 	subs.w	lr, r6, r2
    c81a:	eb75 0e03 	sbcs.w	lr, r5, r3
    c81e:	bf22      	ittt	cs
    c820:	1ab6      	subcs	r6, r6, r2
    c822:	4675      	movcs	r5, lr
    c824:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    c828:	085b      	lsrs	r3, r3, #1
    c82a:	ea4f 0232 	mov.w	r2, r2, rrx
    c82e:	ebb6 0e02 	subs.w	lr, r6, r2
    c832:	eb75 0e03 	sbcs.w	lr, r5, r3
    c836:	bf22      	ittt	cs
    c838:	1ab6      	subcs	r6, r6, r2
    c83a:	4675      	movcs	r5, lr
    c83c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    c840:	ea55 0e06 	orrs.w	lr, r5, r6
    c844:	d018      	beq.n	c878 <__aeabi_ddiv+0x114>
    c846:	ea4f 1505 	mov.w	r5, r5, lsl #4
    c84a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    c84e:	ea4f 1606 	mov.w	r6, r6, lsl #4
    c852:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    c856:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    c85a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    c85e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    c862:	d1c0      	bne.n	c7e6 <__aeabi_ddiv+0x82>
    c864:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c868:	d10b      	bne.n	c882 <__aeabi_ddiv+0x11e>
    c86a:	ea41 0100 	orr.w	r1, r1, r0
    c86e:	f04f 0000 	mov.w	r0, #0
    c872:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    c876:	e7b6      	b.n	c7e6 <__aeabi_ddiv+0x82>
    c878:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c87c:	bf04      	itt	eq
    c87e:	4301      	orreq	r1, r0
    c880:	2000      	moveq	r0, #0
    c882:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    c886:	bf88      	it	hi
    c888:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    c88c:	f63f aeaf 	bhi.w	c5ee <__aeabi_dmul+0xde>
    c890:	ebb5 0c03 	subs.w	ip, r5, r3
    c894:	bf04      	itt	eq
    c896:	ebb6 0c02 	subseq.w	ip, r6, r2
    c89a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c89e:	f150 0000 	adcs.w	r0, r0, #0
    c8a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c8a6:	bd70      	pop	{r4, r5, r6, pc}
    c8a8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    c8ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    c8b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    c8b4:	bfc2      	ittt	gt
    c8b6:	ebd4 050c 	rsbsgt	r5, r4, ip
    c8ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    c8be:	bd70      	popgt	{r4, r5, r6, pc}
    c8c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c8c4:	f04f 0e00 	mov.w	lr, #0
    c8c8:	3c01      	subs	r4, #1
    c8ca:	e690      	b.n	c5ee <__aeabi_dmul+0xde>
    c8cc:	ea45 0e06 	orr.w	lr, r5, r6
    c8d0:	e68d      	b.n	c5ee <__aeabi_dmul+0xde>
    c8d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    c8d6:	ea94 0f0c 	teq	r4, ip
    c8da:	bf08      	it	eq
    c8dc:	ea95 0f0c 	teqeq	r5, ip
    c8e0:	f43f af3b 	beq.w	c75a <__aeabi_dmul+0x24a>
    c8e4:	ea94 0f0c 	teq	r4, ip
    c8e8:	d10a      	bne.n	c900 <__aeabi_ddiv+0x19c>
    c8ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c8ee:	f47f af34 	bne.w	c75a <__aeabi_dmul+0x24a>
    c8f2:	ea95 0f0c 	teq	r5, ip
    c8f6:	f47f af25 	bne.w	c744 <__aeabi_dmul+0x234>
    c8fa:	4610      	mov	r0, r2
    c8fc:	4619      	mov	r1, r3
    c8fe:	e72c      	b.n	c75a <__aeabi_dmul+0x24a>
    c900:	ea95 0f0c 	teq	r5, ip
    c904:	d106      	bne.n	c914 <__aeabi_ddiv+0x1b0>
    c906:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    c90a:	f43f aefd 	beq.w	c708 <__aeabi_dmul+0x1f8>
    c90e:	4610      	mov	r0, r2
    c910:	4619      	mov	r1, r3
    c912:	e722      	b.n	c75a <__aeabi_dmul+0x24a>
    c914:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c918:	bf18      	it	ne
    c91a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c91e:	f47f aec5 	bne.w	c6ac <__aeabi_dmul+0x19c>
    c922:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    c926:	f47f af0d 	bne.w	c744 <__aeabi_dmul+0x234>
    c92a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    c92e:	f47f aeeb 	bne.w	c708 <__aeabi_dmul+0x1f8>
    c932:	e712      	b.n	c75a <__aeabi_dmul+0x24a>

0000c934 <pdm_init>:
// PDM initialization.
//
//*****************************************************************************
void
pdm_init(void)
{
    c934:	b538      	push	{r3, r4, r5, lr}
    am_hal_pdm_enable(PDMHandle);

    //
    // Configure the necessary pins.
    //
    am_hal_gpio_pincfg_t sPinCfg = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    c936:	2400      	movs	r4, #0
    c938:	f36f 04c4 	bfc	r4, #3, #2
    c93c:	f36f 1447 	bfc	r4, #5, #3
    c940:	f36f 2409 	bfc	r4, #8, #2
    c944:	f36f 248b 	bfc	r4, #10, #2
    c948:	f36f 340c 	bfc	r4, #12, #1
pdm_init(void)
{
    //
    // Initialize, power-up, and configure the PDM.
    //
    am_hal_pdm_initialize(0, &PDMHandle);
    c94c:	4d19      	ldr	r5, [pc, #100]	; (c9b4 <pdm_init+0x80>)
    am_hal_pdm_enable(PDMHandle);

    //
    // Configure the necessary pins.
    //
    am_hal_gpio_pincfg_t sPinCfg = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    c94e:	f36f 344e 	bfc	r4, #13, #2
    c952:	f36f 34cf 	bfc	r4, #15, #1
pdm_init(void)
{
    //
    // Initialize, power-up, and configure the PDM.
    //
    am_hal_pdm_initialize(0, &PDMHandle);
    c956:	4629      	mov	r1, r5
    am_hal_pdm_enable(PDMHandle);

    //
    // Configure the necessary pins.
    //
    am_hal_gpio_pincfg_t sPinCfg = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    c958:	f36f 4412 	bfc	r4, #16, #3
pdm_init(void)
{
    //
    // Initialize, power-up, and configure the PDM.
    //
    am_hal_pdm_initialize(0, &PDMHandle);
    c95c:	2000      	movs	r0, #0
    c95e:	f001 fbed 	bl	e13c <am_hal_pdm_initialize>
    am_hal_pdm_enable(PDMHandle);

    //
    // Configure the necessary pins.
    //
    am_hal_gpio_pincfg_t sPinCfg = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    c962:	f36f 44d4 	bfc	r4, #19, #2
{
    //
    // Initialize, power-up, and configure the PDM.
    //
    am_hal_pdm_initialize(0, &PDMHandle);
    am_hal_pdm_power_control(PDMHandle, AM_HAL_PDM_POWER_ON, false);
    c966:	2100      	movs	r1, #0
    c968:	460a      	mov	r2, r1
    am_hal_pdm_enable(PDMHandle);

    //
    // Configure the necessary pins.
    //
    am_hal_gpio_pincfg_t sPinCfg = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    c96a:	f36f 5455 	bfc	r4, #21, #1
{
    //
    // Initialize, power-up, and configure the PDM.
    //
    am_hal_pdm_initialize(0, &PDMHandle);
    am_hal_pdm_power_control(PDMHandle, AM_HAL_PDM_POWER_ON, false);
    c96e:	6828      	ldr	r0, [r5, #0]
    c970:	f001 fc04 	bl	e17c <am_hal_pdm_power_control>
    am_hal_pdm_enable(PDMHandle);

    //
    // Configure the necessary pins.
    //
    am_hal_gpio_pincfg_t sPinCfg = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    c974:	f36f 549f 	bfc	r4, #22, #10
    //
    // Initialize, power-up, and configure the PDM.
    //
    am_hal_pdm_initialize(0, &PDMHandle);
    am_hal_pdm_power_control(PDMHandle, AM_HAL_PDM_POWER_ON, false);
    am_hal_pdm_configure(PDMHandle, &g_sPdmConfig);
    c978:	490f      	ldr	r1, [pc, #60]	; (c9b8 <pdm_init+0x84>)
    c97a:	6828      	ldr	r0, [r5, #0]
    c97c:	f001 fc3c 	bl	e1f8 <am_hal_pdm_configure>
    //
    // Configure the necessary pins.
    //
    am_hal_gpio_pincfg_t sPinCfg = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

    sPinCfg.uFuncSel = AM_HAL_PIN_36_PDMDATA;
    c980:	f044 0407 	orr.w	r4, r4, #7
    // Initialize, power-up, and configure the PDM.
    //
    am_hal_pdm_initialize(0, &PDMHandle);
    am_hal_pdm_power_control(PDMHandle, AM_HAL_PDM_POWER_ON, false);
    am_hal_pdm_configure(PDMHandle, &g_sPdmConfig);
    am_hal_pdm_enable(PDMHandle);
    c984:	6828      	ldr	r0, [r5, #0]
    c986:	f001 fcbd 	bl	e304 <am_hal_pdm_enable>
    // Configure the necessary pins.
    //
    am_hal_gpio_pincfg_t sPinCfg = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

    sPinCfg.uFuncSel = AM_HAL_PIN_36_PDMDATA;
    am_hal_gpio_pinconfig(36, sPinCfg);
    c98a:	4621      	mov	r1, r4
    c98c:	2024      	movs	r0, #36	; 0x24
    c98e:	f001 f9f1 	bl	dd74 <am_hal_gpio_pinconfig>

    sPinCfg.uFuncSel = AM_HAL_PIN_37_PDMCLK;
    c992:	2306      	movs	r3, #6
    c994:	f363 0402 	bfi	r4, r3, #0, #3
    am_hal_gpio_pinconfig(37, sPinCfg);
    c998:	4621      	mov	r1, r4
    c99a:	2025      	movs	r0, #37	; 0x25
    c99c:	f001 f9ea 	bl	dd74 <am_hal_gpio_pinconfig>

    //
    // Configure and enable PDM interrupts (set up to trigger on DMA
    // completion).
    //
    am_hal_pdm_interrupt_enable(PDMHandle, (AM_HAL_PDM_INT_DERR
    c9a0:	6828      	ldr	r0, [r5, #0]
    c9a2:	211e      	movs	r1, #30
    c9a4:	f001 fd38 	bl	e418 <am_hal_pdm_interrupt_enable>
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c9a8:	4b04      	ldr	r3, [pc, #16]	; (c9bc <pdm_init+0x88>)
    c9aa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    c9ae:	601a      	str	r2, [r3, #0]
    c9b0:	bd38      	pop	{r3, r4, r5, pc}
    c9b2:	bf00      	nop
    c9b4:	10015568 	.word	0x10015568
    c9b8:	10001000 	.word	0x10001000
    c9bc:	e000e100 	.word	0xe000e100

0000c9c0 <pdm_config_print>:
// Print PDM configuration data.
//
//*****************************************************************************
void
pdm_config_print(void)
{
    c9c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    //
    // Read the config structure to figure out what our internal clock is set
    // to.
    //
    switch (g_sPdmConfig.eClkDivider)
    c9c4:	4d1e      	ldr	r5, [pc, #120]	; (ca40 <pdm_config_print+0x80>)

    //
    // Record the effective sample frequency. We'll need it later to print the
    // loudest frequency from the sample.
    //
    g_ui32SampleFreq = (ui32PDMClk /
    c9c6:	4e1f      	ldr	r6, [pc, #124]	; (ca44 <pdm_config_print+0x84>)

    //
    // Read the config structure to figure out what our internal clock is set
    // to.
    //
    switch (g_sPdmConfig.eClkDivider)
    c9c8:	782b      	ldrb	r3, [r5, #0]
    c9ca:	686c      	ldr	r4, [r5, #4]
    g_ui32SampleFreq = (ui32PDMClk /
                        (ui32MClkDiv * 2 * g_sPdmConfig.ui32DecimationRate));

    fFrequencyUnits = (float) g_ui32SampleFreq / (float) PDM_FFT_SIZE;

    am_util_stdio_printf("Settings:\n");
    c9cc:	481e      	ldr	r0, [pc, #120]	; (ca48 <pdm_config_print+0x88>)
    c9ce:	2b03      	cmp	r3, #3
    c9d0:	bf9c      	itt	ls
    c9d2:	4a1e      	ldrls	r2, [pc, #120]	; (ca4c <pdm_config_print+0x8c>)
    c9d4:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
    c9d8:	7c2a      	ldrb	r2, [r5, #16]
    c9da:	f102 32ff 	add.w	r2, r2, #4294967295
    c9de:	b2d2      	uxtb	r2, r2

    //
    // Read the config structure to figure out what our internal clock is set
    // to.
    //
    switch (g_sPdmConfig.eClkDivider)
    c9e0:	bf88      	it	hi
    c9e2:	2300      	movhi	r3, #0
    c9e4:	2a06      	cmp	r2, #6
    c9e6:	bf9a      	itte	ls
    c9e8:	4919      	ldrls	r1, [pc, #100]	; (ca50 <pdm_config_print+0x90>)
    c9ea:	f851 7022 	ldrls.w	r7, [r1, r2, lsl #2]

        default:
            ui32MClkDiv = 0;
    }

    switch (g_sPdmConfig.ePDMClkSpeed)
    c9ee:	2700      	movhi	r7, #0
    c9f0:	0064      	lsls	r4, r4, #1
    //
    // Record the effective sample frequency. We'll need it later to print the
    // loudest frequency from the sample.
    //
    g_ui32SampleFreq = (ui32PDMClk /
                        (ui32MClkDiv * 2 * g_sPdmConfig.ui32DecimationRate));
    c9f2:	fb03 f404 	mul.w	r4, r3, r4

    //
    // Record the effective sample frequency. We'll need it later to print the
    // loudest frequency from the sample.
    //
    g_ui32SampleFreq = (ui32PDMClk /
    c9f6:	fbb7 f4f4 	udiv	r4, r7, r4
    c9fa:	6034      	str	r4, [r6, #0]
                        (ui32MClkDiv * 2 * g_sPdmConfig.ui32DecimationRate));

    fFrequencyUnits = (float) g_ui32SampleFreq / (float) PDM_FFT_SIZE;

    am_util_stdio_printf("Settings:\n");
    c9fc:	f001 f896 	bl	db2c <am_util_stdio_printf>
    am_util_stdio_printf("PDM Clock (Hz):         %12d\n", ui32PDMClk);
    ca00:	4639      	mov	r1, r7
    ca02:	4814      	ldr	r0, [pc, #80]	; (ca54 <pdm_config_print+0x94>)
    ca04:	f001 f892 	bl	db2c <am_util_stdio_printf>
    am_util_stdio_printf("Decimation Rate:        %12d\n", g_sPdmConfig.ui32DecimationRate);
    ca08:	6869      	ldr	r1, [r5, #4]
    ca0a:	4813      	ldr	r0, [pc, #76]	; (ca58 <pdm_config_print+0x98>)
    ca0c:	f001 f88e 	bl	db2c <am_util_stdio_printf>
    am_util_stdio_printf("Effective Sample Freq.: %12d\n", g_ui32SampleFreq);
    ca10:	6831      	ldr	r1, [r6, #0]
    ca12:	4812      	ldr	r0, [pc, #72]	; (ca5c <pdm_config_print+0x9c>)
    ca14:	f001 f88a 	bl	db2c <am_util_stdio_printf>
    am_util_stdio_printf("FFT Length:             %12d\n\n", PDM_FFT_SIZE);
    ca18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    ca1c:	4810      	ldr	r0, [pc, #64]	; (ca60 <pdm_config_print+0xa0>)
    ca1e:	f001 f885 	bl	db2c <am_util_stdio_printf>
    am_util_stdio_printf("FFT Resolution: %15.3f Hz\n", fFrequencyUnits);
    ca22:	ee07 4a90 	vmov	s15, r4
    ca26:	eefb 7aca 	vcvt.f32.u32	s15, s15, #12
    ca2a:	ee17 0a90 	vmov	r0, s15
    ca2e:	f7ff fccb 	bl	c3c8 <__aeabi_f2d>
}
    ca32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    am_util_stdio_printf("Settings:\n");
    am_util_stdio_printf("PDM Clock (Hz):         %12d\n", ui32PDMClk);
    am_util_stdio_printf("Decimation Rate:        %12d\n", g_sPdmConfig.ui32DecimationRate);
    am_util_stdio_printf("Effective Sample Freq.: %12d\n", g_ui32SampleFreq);
    am_util_stdio_printf("FFT Length:             %12d\n\n", PDM_FFT_SIZE);
    am_util_stdio_printf("FFT Resolution: %15.3f Hz\n", fFrequencyUnits);
    ca36:	4602      	mov	r2, r0
    ca38:	460b      	mov	r3, r1
    ca3a:	480a      	ldr	r0, [pc, #40]	; (ca64 <pdm_config_print+0xa4>)
    ca3c:	f001 b876 	b.w	db2c <am_util_stdio_printf>
    ca40:	10001000 	.word	0x10001000
    ca44:	10009564 	.word	0x10009564
    ca48:	0000f480 	.word	0x0000f480
    ca4c:	0000f560 	.word	0x0000f560
    ca50:	0000f570 	.word	0x0000f570
    ca54:	0000f48c 	.word	0x0000f48c
    ca58:	0000f4ac 	.word	0x0000f4ac
    ca5c:	0000f4cc 	.word	0x0000f4cc
    ca60:	0000f4ec 	.word	0x0000f4ec
    ca64:	0000f50c 	.word	0x0000f50c

0000ca68 <pdm_data_get>:
// Start a transaction to get some number of bytes from the PDM interface.
//
//*****************************************************************************
void
pdm_data_get(void)
{
    ca68:	b510      	push	{r4, lr}
    sTransfer.ui32TotalCount = PDM_FFT_BYTES;

    //
    // Start the data transfer.
    //
    am_hal_pdm_enable(PDMHandle);
    ca6a:	4c0b      	ldr	r4, [pc, #44]	; (ca98 <pdm_data_get+0x30>)
{
    //
    // Configure DMA and target address.
    //
    am_hal_pdm_transfer_t sTransfer;
    sTransfer.ui32TargetAddr = (uint32_t ) g_ui32PDMDataBuffer;
    ca6c:	4b0b      	ldr	r3, [pc, #44]	; (ca9c <pdm_data_get+0x34>)
    sTransfer.ui32TotalCount = PDM_FFT_BYTES;

    //
    // Start the data transfer.
    //
    am_hal_pdm_enable(PDMHandle);
    ca6e:	6820      	ldr	r0, [r4, #0]
// Start a transaction to get some number of bytes from the PDM interface.
//
//*****************************************************************************
void
pdm_data_get(void)
{
    ca70:	b082      	sub	sp, #8
    //
    // Configure DMA and target address.
    //
    am_hal_pdm_transfer_t sTransfer;
    sTransfer.ui32TargetAddr = (uint32_t ) g_ui32PDMDataBuffer;
    ca72:	9300      	str	r3, [sp, #0]
    sTransfer.ui32TotalCount = PDM_FFT_BYTES;
    ca74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    ca78:	9301      	str	r3, [sp, #4]

    //
    // Start the data transfer.
    //
    am_hal_pdm_enable(PDMHandle);
    ca7a:	f001 fc43 	bl	e304 <am_hal_pdm_enable>
    am_util_delay_ms(100);
    ca7e:	2064      	movs	r0, #100	; 0x64
    ca80:	f000 f8be 	bl	cc00 <am_util_delay_ms>
    am_hal_pdm_fifo_flush(PDMHandle);
    ca84:	6820      	ldr	r0, [r4, #0]
    ca86:	f001 fcb5 	bl	e3f4 <am_hal_pdm_fifo_flush>
    am_hal_pdm_dma_start(PDMHandle, &sTransfer);
    ca8a:	6820      	ldr	r0, [r4, #0]
    ca8c:	4669      	mov	r1, sp
    ca8e:	f001 fc69 	bl	e364 <am_hal_pdm_dma_start>
}
    ca92:	b002      	add	sp, #8
    ca94:	bd10      	pop	{r4, pc}
    ca96:	bf00      	nop
    ca98:	10015568 	.word	0x10015568
    ca9c:	10011568 	.word	0x10011568

0000caa0 <am_pdm0_isr>:
// PDM interrupt handler.
//
//*****************************************************************************
void
am_pdm0_isr(void)
{
    caa0:	b510      	push	{r4, lr}
    uint32_t ui32Status;

    //
    // Read the interrupt status.
    //
    am_hal_pdm_interrupt_status_get(PDMHandle, &ui32Status, true);
    caa2:	4c0b      	ldr	r4, [pc, #44]	; (cad0 <am_pdm0_isr+0x30>)
// PDM interrupt handler.
//
//*****************************************************************************
void
am_pdm0_isr(void)
{
    caa4:	b082      	sub	sp, #8
    uint32_t ui32Status;

    //
    // Read the interrupt status.
    //
    am_hal_pdm_interrupt_status_get(PDMHandle, &ui32Status, true);
    caa6:	a901      	add	r1, sp, #4
    caa8:	2201      	movs	r2, #1
    caaa:	6820      	ldr	r0, [r4, #0]
    caac:	f001 fcdc 	bl	e468 <am_hal_pdm_interrupt_status_get>
    am_hal_pdm_interrupt_clear(PDMHandle, ui32Status);
    cab0:	6820      	ldr	r0, [r4, #0]
    cab2:	9901      	ldr	r1, [sp, #4]
    cab4:	f001 fcc6 	bl	e444 <am_hal_pdm_interrupt_clear>
    // because this example only implemented a single buffer for storing FFT
    // data. More complex programs could use a system of multiple buffers to
    // allow the CPU to run the FFT in one buffer while the DMA pulls PCM data
    // into another buffer.
    //
    if (ui32Status & AM_HAL_PDM_INT_DCMP)
    cab8:	9b01      	ldr	r3, [sp, #4]
    caba:	071b      	lsls	r3, r3, #28
    cabc:	d505      	bpl.n	caca <am_pdm0_isr+0x2a>
    {
        am_hal_pdm_disable(PDMHandle);
    cabe:	6820      	ldr	r0, [r4, #0]
    cac0:	f001 fc38 	bl	e334 <am_hal_pdm_disable>
        g_bPDMDataReady = true;
    cac4:	4b03      	ldr	r3, [pc, #12]	; (cad4 <am_pdm0_isr+0x34>)
    cac6:	2201      	movs	r2, #1
    cac8:	701a      	strb	r2, [r3, #0]
    }
}
    caca:	b002      	add	sp, #8
    cacc:	bd10      	pop	{r4, pc}
    cace:	bf00      	nop
    cad0:	10015568 	.word	0x10015568
    cad4:	10001454 	.word	0x10001454

0000cad8 <main>:
// Main
//
//*****************************************************************************
int
main(void)
{
    cad8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
    //
    // Perform the standard initialzation for clocks, cache settings, and
    // board-level low-power operation.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    cadc:	2000      	movs	r0, #0
// Main
//
//*****************************************************************************
int
main(void)
{
    cade:	b089      	sub	sp, #36	; 0x24
    //
    // Perform the standard initialzation for clocks, cache settings, and
    // board-level low-power operation.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    cae0:	4601      	mov	r1, r0
    cae2:	f001 f8ad 	bl	dc40 <am_hal_clkgen_control>
    // Turn on the PDM, set it up for our chosen recording settings, and start
    // the first DMA transaction.
    //
    pdm_init();
    pdm_config_print();
    am_hal_pdm_fifo_flush(PDMHandle);
    cae6:	f8df 810c 	ldr.w	r8, [pc, #268]	; cbf4 <main+0x11c>
    //
    // Perform the standard initialzation for clocks, cache settings, and
    // board-level low-power operation.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    caea:	4839      	ldr	r0, [pc, #228]	; (cbd0 <main+0xf8>)
    caec:	4f39      	ldr	r7, [pc, #228]	; (cbd4 <main+0xfc>)
    caee:	f8df b108 	ldr.w	fp, [pc, #264]	; cbf8 <main+0x120>
    caf2:	f8df a108 	ldr.w	sl, [pc, #264]	; cbfc <main+0x124>
    caf6:	4e38      	ldr	r6, [pc, #224]	; (cbd8 <main+0x100>)
        {
            am_util_stdio_printf("%d\n", pi16PDMData[i]);
        }

        g_fPDMTimeDomain[2 * i] = pi16PDMData[i] / 1.0;
        g_fPDMTimeDomain[2 * i + 1] = 0.0;
    caf8:	ed9f 8a38 	vldr	s16, [pc, #224]	; cbdc <main+0x104>
    //
    // Perform the standard initialzation for clocks, cache settings, and
    // board-level low-power operation.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    cafc:	f001 f870 	bl	dbe0 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    cb00:	f001 f894 	bl	dc2c <am_hal_cachectrl_enable>
    //am_bsp_low_power_init();

    //
    // Initialize the printf interface for ITM output
    //
    am_bsp_itm_printf_enable();
    cb04:	f002 fb44 	bl	f190 <am_bsp_itm_printf_enable>

    //
    // Print the banner.
    //
    am_util_stdio_terminal_clear();
    cb08:	f001 f82c 	bl	db64 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("PDM FFT example.\n\n");
    cb0c:	4834      	ldr	r0, [pc, #208]	; (cbe0 <main+0x108>)
    cb0e:	f001 f80d 	bl	db2c <am_util_stdio_printf>

    //
    // Turn on the PDM, set it up for our chosen recording settings, and start
    // the first DMA transaction.
    //
    pdm_init();
    cb12:	f7ff ff0f 	bl	c934 <pdm_init>
    pdm_config_print();
    cb16:	f7ff ff53 	bl	c9c0 <pdm_config_print>
    am_hal_pdm_fifo_flush(PDMHandle);
    cb1a:	f8d8 0000 	ldr.w	r0, [r8]
    cb1e:	f001 fc69 	bl	e3f4 <am_hal_pdm_fifo_flush>
    //
    while (1)
    {
        am_hal_interrupt_master_disable();

        if (g_bPDMDataReady)
    cb22:	46b9      	mov	r9, r7
    // the first DMA transaction.
    //
    pdm_init();
    pdm_config_print();
    am_hal_pdm_fifo_flush(PDMHandle);
    pdm_data_get();
    cb24:	f7ff ffa0 	bl	ca68 <pdm_data_get>
    cb28:	e004      	b.n	cb34 <main+0x5c>
        }

        //
        // Go to Deep Sleep.
        //
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    cb2a:	2001      	movs	r0, #1
    cb2c:	f001 fd10 	bl	e550 <am_hal_sysctrl_sleep>

        am_hal_interrupt_master_enable();
    cb30:	f001 fa62 	bl	dff8 <am_hal_interrupt_master_enable>
    //
    // Loop forever while sleeping.
    //
    while (1)
    {
        am_hal_interrupt_master_disable();
    cb34:	f001 fa64 	bl	e000 <am_hal_interrupt_master_disable>

        if (g_bPDMDataReady)
    cb38:	783b      	ldrb	r3, [r7, #0]
    cb3a:	2b00      	cmp	r3, #0
    cb3c:	d0f5      	beq.n	cb2a <main+0x52>
        {
            g_bPDMDataReady = false;
    cb3e:	2300      	movs	r3, #0
    cb40:	4d28      	ldr	r5, [pc, #160]	; (cbe4 <main+0x10c>)
    cb42:	4c29      	ldr	r4, [pc, #164]	; (cbe8 <main+0x110>)
    cb44:	f889 3000 	strb.w	r3, [r9]
        if (PRINT_PDM_DATA)
        {
            am_util_stdio_printf("%d\n", pi16PDMData[i]);
        }

        g_fPDMTimeDomain[2 * i] = pi16PDMData[i] / 1.0;
    cb48:	f935 0f02 	ldrsh.w	r0, [r5, #2]!
    cb4c:	f7ff fc2a 	bl	c3a4 <__aeabi_i2d>
    cb50:	f7ff fc8e 	bl	c470 <__aeabi_d2f>
    cb54:	3408      	adds	r4, #8
        g_fPDMTimeDomain[2 * i + 1] = 0.0;
    cb56:	ed04 8a01 	vstr	s16, [r4, #-4]
        if (PRINT_PDM_DATA)
        {
            am_util_stdio_printf("%d\n", pi16PDMData[i]);
        }

        g_fPDMTimeDomain[2 * i] = pi16PDMData[i] / 1.0;
    cb5a:	f844 0c08 	str.w	r0, [r4, #-8]

    //
    // Convert the PDM samples to floats, and arrange them in the format
    // required by the FFT function.
    //
    for (uint32_t i = 0; i < PDM_FFT_SIZE; i++)
    cb5e:	42b4      	cmp	r4, r6
    cb60:	d1f2      	bne.n	cb48 <main+0x70>

    //
    // Perform the FFT.
    //
    arm_cfft_radix4_instance_f32 S;
    arm_cfft_radix4_init_f32(&S, PDM_FFT_SIZE, 0, 1);
    cb62:	2301      	movs	r3, #1
    cb64:	2200      	movs	r2, #0
    cb66:	a803      	add	r0, sp, #12
    cb68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    cb6c:	f001 fd90 	bl	e690 <arm_cfft_radix4_init_f32>
    arm_cfft_radix4_f32(&S, g_fPDMTimeDomain);
    cb70:	a803      	add	r0, sp, #12
    cb72:	491d      	ldr	r1, [pc, #116]	; (cbe8 <main+0x110>)
    cb74:	f002 f990 	bl	ee98 <arm_cfft_radix4_f32>
    arm_cmplx_mag_f32(g_fPDMTimeDomain, g_fPDMMagnitudes, PDM_FFT_SIZE);
    cb78:	481b      	ldr	r0, [pc, #108]	; (cbe8 <main+0x110>)
    cb7a:	491c      	ldr	r1, [pc, #112]	; (cbec <main+0x114>)
    cb7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    cb80:	f002 f9ae 	bl	eee0 <arm_cmplx_mag_f32>
    }

    //
    // Find the frequency bin with the largest magnitude.
    //
    arm_max_f32(g_fPDMMagnitudes, PDM_FFT_SIZE / 2, &fMaxValue, &ui32MaxIndex);
    cb84:	aa01      	add	r2, sp, #4
    cb86:	ab02      	add	r3, sp, #8
    cb88:	4818      	ldr	r0, [pc, #96]	; (cbec <main+0x114>)
    cb8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
    cb8e:	f001 fd17 	bl	e5c0 <arm_max_f32>

    ui32LoudestFrequency = (g_ui32SampleFreq * ui32MaxIndex) / PDM_FFT_SIZE;
    cb92:	9a02      	ldr	r2, [sp, #8]
    cb94:	f8db 3000 	ldr.w	r3, [fp]
    if (PRINT_FFT_DATA)
    {
        am_util_stdio_printf("Loudest frequency bin: %d\r\n", ui32MaxIndex);
    }

    am_util_stdio_printf("Loudest frequency: %d         \r\n", ui32LoudestFrequency);
    cb98:	4815      	ldr	r0, [pc, #84]	; (cbf0 <main+0x118>)
    //
    // Find the frequency bin with the largest magnitude.
    //
    arm_max_f32(g_fPDMMagnitudes, PDM_FFT_SIZE / 2, &fMaxValue, &ui32MaxIndex);

    ui32LoudestFrequency = (g_ui32SampleFreq * ui32MaxIndex) / PDM_FFT_SIZE;
    cb9a:	fb03 f102 	mul.w	r1, r3, r2
    if (PRINT_FFT_DATA)
    {
        am_util_stdio_printf("Loudest frequency bin: %d\r\n", ui32MaxIndex);
    }

    am_util_stdio_printf("Loudest frequency: %d         \r\n", ui32LoudestFrequency);
    cb9e:	0b09      	lsrs	r1, r1, #12
    cba0:	f000 ffc4 	bl	db2c <am_util_stdio_printf>
    //
    // Configure DMA and target address.
    //
    am_hal_pdm_transfer_t sTransfer;
    sTransfer.ui32TargetAddr = (uint32_t ) g_ui32PDMDataBuffer;
    sTransfer.ui32TotalCount = PDM_FFT_BYTES;
    cba4:	f44f 5300 	mov.w	r3, #8192	; 0x2000

    //
    // Start the data transfer.
    //
    am_hal_pdm_enable(PDMHandle);
    cba8:	f8d8 0000 	ldr.w	r0, [r8]
    //
    // Configure DMA and target address.
    //
    am_hal_pdm_transfer_t sTransfer;
    sTransfer.ui32TargetAddr = (uint32_t ) g_ui32PDMDataBuffer;
    sTransfer.ui32TotalCount = PDM_FFT_BYTES;
    cbac:	9304      	str	r3, [sp, #16]
{
    //
    // Configure DMA and target address.
    //
    am_hal_pdm_transfer_t sTransfer;
    sTransfer.ui32TargetAddr = (uint32_t ) g_ui32PDMDataBuffer;
    cbae:	f8cd a00c 	str.w	sl, [sp, #12]
    sTransfer.ui32TotalCount = PDM_FFT_BYTES;

    //
    // Start the data transfer.
    //
    am_hal_pdm_enable(PDMHandle);
    cbb2:	f001 fba7 	bl	e304 <am_hal_pdm_enable>
    am_util_delay_ms(100);
    cbb6:	2064      	movs	r0, #100	; 0x64
    cbb8:	f000 f822 	bl	cc00 <am_util_delay_ms>
    am_hal_pdm_fifo_flush(PDMHandle);
    cbbc:	f8d8 0000 	ldr.w	r0, [r8]
    cbc0:	f001 fc18 	bl	e3f4 <am_hal_pdm_fifo_flush>
    am_hal_pdm_dma_start(PDMHandle, &sTransfer);
    cbc4:	f8d8 0000 	ldr.w	r0, [r8]
    cbc8:	a903      	add	r1, sp, #12
    cbca:	f001 fbcb 	bl	e364 <am_hal_pdm_dma_start>
    cbce:	e7ac      	b.n	cb2a <main+0x52>
    cbd0:	0000f8a8 	.word	0x0000f8a8
    cbd4:	10001454 	.word	0x10001454
    cbd8:	10011568 	.word	0x10011568
    cbdc:	00000000 	.word	0x00000000
    cbe0:	0000f54c 	.word	0x0000f54c
    cbe4:	10011566 	.word	0x10011566
    cbe8:	10009568 	.word	0x10009568
    cbec:	1001556c 	.word	0x1001556c
    cbf0:	0000f528 	.word	0x0000f528
    cbf4:	10015568 	.word	0x10015568
    cbf8:	10009564 	.word	0x10009564
    cbfc:	10011568 	.word	0x10011568

0000cc00 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    cc00:	b510      	push	{r4, lr}
    cc02:	b084      	sub	sp, #16
    cc04:	4604      	mov	r4, r0
    uint32_t ui32Loops, ui32HFRC;

#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    cc06:	a801      	add	r0, sp, #4
    cc08:	f001 f886 	bl	dd18 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
    cc0c:	9b01      	ldr	r3, [sp, #4]
    cc0e:	4805      	ldr	r0, [pc, #20]	; (cc24 <am_util_delay_ms+0x24>)
    cc10:	fba0 3003 	umull	r3, r0, r0, r3
    cc14:	0980      	lsrs	r0, r0, #6

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    cc16:	fb00 f004 	mul.w	r0, r0, r4
    cc1a:	f001 f89b 	bl	dd54 <am_hal_flash_delay>
}
    cc1e:	b004      	add	sp, #16
    cc20:	bd10      	pop	{r4, pc}
    cc22:	bf00      	nop
    cc24:	057619f1 	.word	0x057619f1

0000cc28 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    cc28:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    cc2a:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    cc2e:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    cc30:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    cc34:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    cc38:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    cc3c:	f000 f806 	bl	cc4c <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    cc40:	bd01      	pop	{r0, pc}
    cc42:	bf00      	nop

0000cc44 <getStackedReg>:
}

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    cc44:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    cc46:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    cc48:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    cc4a:	4770      	bx	lr

0000cc4c <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    cc4c:	b530      	push	{r4, r5, lr}
    cc4e:	b093      	sub	sp, #76	; 0x4c
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    cc50:	2300      	movs	r3, #0
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    cc52:	4a7a      	ldr	r2, [pc, #488]	; (ce3c <am_util_faultisr_collect_data+0x1f0>)
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    cc54:	9310      	str	r3, [sp, #64]	; 0x40
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    cc56:	9300      	str	r3, [sp, #0]
    cc58:	9301      	str	r3, [sp, #4]
    cc5a:	9302      	str	r3, [sp, #8]
    cc5c:	9303      	str	r3, [sp, #12]
    cc5e:	9304      	str	r3, [sp, #16]
    cc60:	9305      	str	r3, [sp, #20]
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    cc62:	6813      	ldr	r3, [r2, #0]
    cc64:	9310      	str	r3, [sp, #64]	; 0x40
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    cc66:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cc68:	b2db      	uxtb	r3, r3
    cc6a:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    cc6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cc70:	f3c3 2307 	ubfx	r3, r3, #8, #8
    cc74:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    cc78:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cc7a:	0c1b      	lsrs	r3, r3, #16
    cc7c:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    cc80:	6913      	ldr	r3, [r2, #16]
    cc82:	930f      	str	r3, [sp, #60]	; 0x3c

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    cc84:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
    cc88:	079b      	lsls	r3, r3, #30
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    cc8a:	4604      	mov	r4, r0

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    cc8c:	f100 80cf 	bmi.w	ce2e <am_util_faultisr_collect_data+0x1e2>
    cc90:	f04f 33ff 	mov.w	r3, #4294967295

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    cc94:	4621      	mov	r1, r4
    cc96:	2000      	movs	r0, #0

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    cc98:	930e      	str	r3, [sp, #56]	; 0x38

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    cc9a:	f7ff ffd3 	bl	cc44 <getStackedReg>
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    cc9e:	4621      	mov	r1, r4

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    cca0:	4603      	mov	r3, r0
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    cca2:	2001      	movs	r0, #1

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    cca4:	9306      	str	r3, [sp, #24]
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    cca6:	f7ff ffcd 	bl	cc44 <getStackedReg>
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    ccaa:	4621      	mov	r1, r4
    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    ccac:	4603      	mov	r3, r0
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    ccae:	2002      	movs	r0, #2
    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    ccb0:	9307      	str	r3, [sp, #28]
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    ccb2:	f7ff ffc7 	bl	cc44 <getStackedReg>
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    ccb6:	4621      	mov	r1, r4
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    ccb8:	4603      	mov	r3, r0
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    ccba:	2003      	movs	r0, #3
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    ccbc:	9308      	str	r3, [sp, #32]
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    ccbe:	f7ff ffc1 	bl	cc44 <getStackedReg>
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    ccc2:	4621      	mov	r1, r4
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    ccc4:	4603      	mov	r3, r0
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    ccc6:	2004      	movs	r0, #4
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    ccc8:	9309      	str	r3, [sp, #36]	; 0x24
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    ccca:	f7ff ffbb 	bl	cc44 <getStackedReg>
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    ccce:	4621      	mov	r1, r4
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    ccd0:	4603      	mov	r3, r0
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    ccd2:	2005      	movs	r0, #5
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    ccd4:	930a      	str	r3, [sp, #40]	; 0x28
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    ccd6:	f7ff ffb5 	bl	cc44 <getStackedReg>
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    ccda:	4621      	mov	r1, r4
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    ccdc:	4603      	mov	r3, r0
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    ccde:	2006      	movs	r0, #6
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    cce0:	930b      	str	r3, [sp, #44]	; 0x2c
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    cce2:	f7ff ffaf 	bl	cc44 <getStackedReg>
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    cce6:	4621      	mov	r1, r4
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    cce8:	4603      	mov	r3, r0
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    ccea:	2007      	movs	r0, #7
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    ccec:	930c      	str	r3, [sp, #48]	; 0x30
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    ccee:	f7ff ffa9 	bl	cc44 <getStackedReg>

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    ccf2:	4669      	mov	r1, sp
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    ccf4:	4603      	mov	r3, r0

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    ccf6:	2002      	movs	r0, #2
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    ccf8:	930d      	str	r3, [sp, #52]	; 0x34

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    ccfa:	f001 f989 	bl	e010 <am_hal_mcuctrl_info_get>
#ifdef AM_UTIL_FAULTISR_PRINT
    //
    // If printf has previously been initialized in the application, we should
    // be able to print out the fault information.
    //
    am_util_stdio_printf("Hard Fault stacked data:\n");
    ccfe:	4850      	ldr	r0, [pc, #320]	; (ce40 <am_util_faultisr_collect_data+0x1f4>)
    cd00:	f000 ff14 	bl	db2c <am_util_stdio_printf>
    am_util_stdio_printf("    R0  = 0x%08X\n", sFaultData.u32R0);
    cd04:	9906      	ldr	r1, [sp, #24]
    cd06:	484f      	ldr	r0, [pc, #316]	; (ce44 <am_util_faultisr_collect_data+0x1f8>)
    cd08:	f000 ff10 	bl	db2c <am_util_stdio_printf>
    am_util_stdio_printf("    R1  = 0x%08X\n", sFaultData.u32R1);
    cd0c:	9907      	ldr	r1, [sp, #28]
    cd0e:	484e      	ldr	r0, [pc, #312]	; (ce48 <am_util_faultisr_collect_data+0x1fc>)
    cd10:	f000 ff0c 	bl	db2c <am_util_stdio_printf>
    am_util_stdio_printf("    R2  = 0x%08X\n", sFaultData.u32R2);
    cd14:	9908      	ldr	r1, [sp, #32]
    cd16:	484d      	ldr	r0, [pc, #308]	; (ce4c <am_util_faultisr_collect_data+0x200>)
    cd18:	f000 ff08 	bl	db2c <am_util_stdio_printf>
    am_util_stdio_printf("    R3  = 0x%08X\n", sFaultData.u32R3);
    cd1c:	9909      	ldr	r1, [sp, #36]	; 0x24
    cd1e:	484c      	ldr	r0, [pc, #304]	; (ce50 <am_util_faultisr_collect_data+0x204>)
    cd20:	f000 ff04 	bl	db2c <am_util_stdio_printf>
    am_util_stdio_printf("    R12 = 0x%08X\n", sFaultData.u32R12);
    cd24:	990a      	ldr	r1, [sp, #40]	; 0x28
    cd26:	484b      	ldr	r0, [pc, #300]	; (ce54 <am_util_faultisr_collect_data+0x208>)
    cd28:	f000 ff00 	bl	db2c <am_util_stdio_printf>
    am_util_stdio_printf("    LR  = 0x%08X\n", sFaultData.u32LR);
    cd2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    cd2e:	484a      	ldr	r0, [pc, #296]	; (ce58 <am_util_faultisr_collect_data+0x20c>)
    cd30:	f000 fefc 	bl	db2c <am_util_stdio_printf>
    am_util_stdio_printf("    PC  = 0x%08X\n", sFaultData.u32PC);
    cd34:	990c      	ldr	r1, [sp, #48]	; 0x30
    cd36:	4849      	ldr	r0, [pc, #292]	; (ce5c <am_util_faultisr_collect_data+0x210>)
    cd38:	f000 fef8 	bl	db2c <am_util_stdio_printf>
    am_util_stdio_printf("    PSR = 0x%08X\n", sFaultData.u32PSR);
    cd3c:	990d      	ldr	r1, [sp, #52]	; 0x34
    cd3e:	4848      	ldr	r0, [pc, #288]	; (ce60 <am_util_faultisr_collect_data+0x214>)
    cd40:	f000 fef4 	bl	db2c <am_util_stdio_printf>
    am_util_stdio_printf("Other Hard Fault data:\n");
    cd44:	4847      	ldr	r0, [pc, #284]	; (ce64 <am_util_faultisr_collect_data+0x218>)
    cd46:	f000 fef1 	bl	db2c <am_util_stdio_printf>
    am_util_stdio_printf("    Fault address = 0x%08X\n", sFaultData.u32FaultAddr);
    cd4a:	990e      	ldr	r1, [sp, #56]	; 0x38
    cd4c:	4846      	ldr	r0, [pc, #280]	; (ce68 <am_util_faultisr_collect_data+0x21c>)
    cd4e:	f000 feed 	bl	db2c <am_util_stdio_printf>
    am_util_stdio_printf("    BFAR (Bus Fault Addr Reg) = 0x%08X\n", sFaultData.u32BFAR);
    cd52:	990f      	ldr	r1, [sp, #60]	; 0x3c
    cd54:	4845      	ldr	r0, [pc, #276]	; (ce6c <am_util_faultisr_collect_data+0x220>)
    cd56:	f000 fee9 	bl	db2c <am_util_stdio_printf>
    am_util_stdio_printf("    MMSR (Mem Mgmt Fault Status Reg) = 0x%02X\n", sFaultData.u8MMSR);
    cd5a:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
    cd5e:	4844      	ldr	r0, [pc, #272]	; (ce70 <am_util_faultisr_collect_data+0x224>)
    cd60:	f000 fee4 	bl	db2c <am_util_stdio_printf>
    am_util_stdio_printf("    BFSR (Bus Fault Status Reg) = 0x%02X\n", sFaultData.u8BFSR);
    cd64:	f89d 1045 	ldrb.w	r1, [sp, #69]	; 0x45
    cd68:	4842      	ldr	r0, [pc, #264]	; (ce74 <am_util_faultisr_collect_data+0x228>)
    cd6a:	f000 fedf 	bl	db2c <am_util_stdio_printf>
    am_util_stdio_printf("    UFSR (Usage Fault Status Reg) = 0x%04X\n", sFaultData.u16UFSR);
    cd6e:	f8bd 1046 	ldrh.w	r1, [sp, #70]	; 0x46
    cd72:	4841      	ldr	r0, [pc, #260]	; (ce78 <am_util_faultisr_collect_data+0x22c>)
    cd74:	b289      	uxth	r1, r1
    cd76:	f000 fed9 	bl	db2c <am_util_stdio_printf>
    cd7a:	2508      	movs	r5, #8

    //
    // Print out any bits set in the BFSR.
    //
    u32Mask = 0x80;
    cd7c:	2480      	movs	r4, #128	; 0x80
    cd7e:	e00d      	b.n	cd9c <am_util_faultisr_collect_data+0x150>
    while (u32Mask)
    {
        switch (sFaultData.u8BFSR & u32Mask)
    cd80:	2b20      	cmp	r3, #32
    cd82:	d041      	beq.n	ce08 <am_util_faultisr_collect_data+0x1bc>
    cd84:	d92e      	bls.n	cde4 <am_util_faultisr_collect_data+0x198>
    cd86:	2b40      	cmp	r3, #64	; 0x40
    cd88:	d028      	beq.n	cddc <am_util_faultisr_collect_data+0x190>
    cd8a:	2b80      	cmp	r3, #128	; 0x80
    cd8c:	d102      	bne.n	cd94 <am_util_faultisr_collect_data+0x148>
        {
            case 0x80:
                am_util_stdio_printf("        BFSR bit7: BFARVALID\n");
    cd8e:	483b      	ldr	r0, [pc, #236]	; (ce7c <am_util_faultisr_collect_data+0x230>)
    cd90:	f000 fecc 	bl	db2c <am_util_stdio_printf>

    //
    // Print out any bits set in the BFSR.
    //
    u32Mask = 0x80;
    while (u32Mask)
    cd94:	3d01      	subs	r5, #1
                am_util_stdio_printf("        BFSR bit0: IBUSERR\n");
                break;
            default:
                break;
        }
        u32Mask >>= 1;
    cd96:	ea4f 0454 	mov.w	r4, r4, lsr #1

    //
    // Print out any bits set in the BFSR.
    //
    u32Mask = 0x80;
    while (u32Mask)
    cd9a:	d012      	beq.n	cdc2 <am_util_faultisr_collect_data+0x176>
    {
        switch (sFaultData.u8BFSR & u32Mask)
    cd9c:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
    cda0:	4023      	ands	r3, r4
    cda2:	2b08      	cmp	r3, #8
    cda4:	d02c      	beq.n	ce00 <am_util_faultisr_collect_data+0x1b4>
    cda6:	d8eb      	bhi.n	cd80 <am_util_faultisr_collect_data+0x134>
    cda8:	2b02      	cmp	r3, #2
    cdaa:	d025      	beq.n	cdf8 <am_util_faultisr_collect_data+0x1ac>
    cdac:	2b04      	cmp	r3, #4
    cdae:	d01f      	beq.n	cdf0 <am_util_faultisr_collect_data+0x1a4>
    cdb0:	2b01      	cmp	r3, #1
    cdb2:	d1ef      	bne.n	cd94 <am_util_faultisr_collect_data+0x148>
                break;
            case 0x02:
                am_util_stdio_printf("        BFSR bit1: PRECISEERR\n");
                break;
            case 0x01:
                am_util_stdio_printf("        BFSR bit0: IBUSERR\n");
    cdb4:	4832      	ldr	r0, [pc, #200]	; (ce80 <am_util_faultisr_collect_data+0x234>)
    cdb6:	f000 feb9 	bl	db2c <am_util_stdio_printf>

    //
    // Print out any bits set in the BFSR.
    //
    u32Mask = 0x80;
    while (u32Mask)
    cdba:	3d01      	subs	r5, #1
                am_util_stdio_printf("        BFSR bit0: IBUSERR\n");
                break;
            default:
                break;
        }
        u32Mask >>= 1;
    cdbc:	ea4f 0454 	mov.w	r4, r4, lsr #1

    //
    // Print out any bits set in the BFSR.
    //
    u32Mask = 0x80;
    while (u32Mask)
    cdc0:	d1ec      	bne.n	cd9c <am_util_faultisr_collect_data+0x150>
    }

    //
    // Print out any Apollo* Internal fault information.
    //
    am_util_stdio_printf("MCU Fault data:\n");
    cdc2:	4830      	ldr	r0, [pc, #192]	; (ce84 <am_util_faultisr_collect_data+0x238>)
    cdc4:	f000 feb2 	bl	db2c <am_util_stdio_printf>
    if (sHalFaultData.bICODE)
    cdc8:	f89d 3000 	ldrb.w	r3, [sp]
    cdcc:	bb53      	cbnz	r3, ce24 <am_util_faultisr_collect_data+0x1d8>
    {
      am_util_stdio_printf("   ICODE Fault Address: 0x%08X\n", sHalFaultData.ui32ICODE);
    }
    if (sHalFaultData.bDCODE)
    cdce:	f89d 3008 	ldrb.w	r3, [sp, #8]
    cdd2:	bb13      	cbnz	r3, ce1a <am_util_faultisr_collect_data+0x1ce>
    {
      am_util_stdio_printf("   DCODE Fault Address: 0x%08X\n", sHalFaultData.ui32DCODE);
    }
    if (sHalFaultData.bSYS)
    cdd4:	f89d 3010 	ldrb.w	r3, [sp, #16]
    cdd8:	b9d3      	cbnz	r3, ce10 <am_util_faultisr_collect_data+0x1c4>
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    {
    }
    cdda:	e7fe      	b.n	cdda <am_util_faultisr_collect_data+0x18e>
        {
            case 0x80:
                am_util_stdio_printf("        BFSR bit7: BFARVALID\n");
                break;
            case 0x40:
                am_util_stdio_printf("        BFSR bit6: RESERVED\n");
    cddc:	482a      	ldr	r0, [pc, #168]	; (ce88 <am_util_faultisr_collect_data+0x23c>)
    cdde:	f000 fea5 	bl	db2c <am_util_stdio_printf>
                break;
    cde2:	e7d7      	b.n	cd94 <am_util_faultisr_collect_data+0x148>
    // Print out any bits set in the BFSR.
    //
    u32Mask = 0x80;
    while (u32Mask)
    {
        switch (sFaultData.u8BFSR & u32Mask)
    cde4:	2b10      	cmp	r3, #16
    cde6:	d1d5      	bne.n	cd94 <am_util_faultisr_collect_data+0x148>
                break;
            case 0x20:
                am_util_stdio_printf("        BFSR bit5: LSPERR\n");
                break;
            case 0x10:
                am_util_stdio_printf("        BFSR bit4: STKERR\n");
    cde8:	4828      	ldr	r0, [pc, #160]	; (ce8c <am_util_faultisr_collect_data+0x240>)
    cdea:	f000 fe9f 	bl	db2c <am_util_stdio_printf>
                break;
    cdee:	e7d1      	b.n	cd94 <am_util_faultisr_collect_data+0x148>
            case 0x08:
                am_util_stdio_printf("        BFSR bit3: UNSTKERR\n");
                break;
            case 0x04:
                am_util_stdio_printf("        BFSR bit2: IMPRECISERR\n");
    cdf0:	4827      	ldr	r0, [pc, #156]	; (ce90 <am_util_faultisr_collect_data+0x244>)
    cdf2:	f000 fe9b 	bl	db2c <am_util_stdio_printf>
                break;
    cdf6:	e7cd      	b.n	cd94 <am_util_faultisr_collect_data+0x148>
            case 0x02:
                am_util_stdio_printf("        BFSR bit1: PRECISEERR\n");
    cdf8:	4826      	ldr	r0, [pc, #152]	; (ce94 <am_util_faultisr_collect_data+0x248>)
    cdfa:	f000 fe97 	bl	db2c <am_util_stdio_printf>
                break;
    cdfe:	e7c9      	b.n	cd94 <am_util_faultisr_collect_data+0x148>
                break;
            case 0x10:
                am_util_stdio_printf("        BFSR bit4: STKERR\n");
                break;
            case 0x08:
                am_util_stdio_printf("        BFSR bit3: UNSTKERR\n");
    ce00:	4825      	ldr	r0, [pc, #148]	; (ce98 <am_util_faultisr_collect_data+0x24c>)
    ce02:	f000 fe93 	bl	db2c <am_util_stdio_printf>
                break;
    ce06:	e7c5      	b.n	cd94 <am_util_faultisr_collect_data+0x148>
                break;
            case 0x40:
                am_util_stdio_printf("        BFSR bit6: RESERVED\n");
                break;
            case 0x20:
                am_util_stdio_printf("        BFSR bit5: LSPERR\n");
    ce08:	4824      	ldr	r0, [pc, #144]	; (ce9c <am_util_faultisr_collect_data+0x250>)
    ce0a:	f000 fe8f 	bl	db2c <am_util_stdio_printf>
                break;
    ce0e:	e7c1      	b.n	cd94 <am_util_faultisr_collect_data+0x148>
    {
      am_util_stdio_printf("   DCODE Fault Address: 0x%08X\n", sHalFaultData.ui32DCODE);
    }
    if (sHalFaultData.bSYS)
    {
      am_util_stdio_printf("   SYS Fault Address: 0x%08X\n", sHalFaultData.ui32SYS);
    ce10:	9905      	ldr	r1, [sp, #20]
    ce12:	4823      	ldr	r0, [pc, #140]	; (cea0 <am_util_faultisr_collect_data+0x254>)
    ce14:	f000 fe8a 	bl	db2c <am_util_stdio_printf>
    ce18:	e7df      	b.n	cdda <am_util_faultisr_collect_data+0x18e>
    {
      am_util_stdio_printf("   ICODE Fault Address: 0x%08X\n", sHalFaultData.ui32ICODE);
    }
    if (sHalFaultData.bDCODE)
    {
      am_util_stdio_printf("   DCODE Fault Address: 0x%08X\n", sHalFaultData.ui32DCODE);
    ce1a:	9903      	ldr	r1, [sp, #12]
    ce1c:	4821      	ldr	r0, [pc, #132]	; (cea4 <am_util_faultisr_collect_data+0x258>)
    ce1e:	f000 fe85 	bl	db2c <am_util_stdio_printf>
    ce22:	e7d7      	b.n	cdd4 <am_util_faultisr_collect_data+0x188>
    // Print out any Apollo* Internal fault information.
    //
    am_util_stdio_printf("MCU Fault data:\n");
    if (sHalFaultData.bICODE)
    {
      am_util_stdio_printf("   ICODE Fault Address: 0x%08X\n", sHalFaultData.ui32ICODE);
    ce24:	9901      	ldr	r1, [sp, #4]
    ce26:	4820      	ldr	r0, [pc, #128]	; (cea8 <am_util_faultisr_collect_data+0x25c>)
    ce28:	f000 fe80 	bl	db2c <am_util_stdio_printf>
    ce2c:	e7cf      	b.n	cdce <am_util_faultisr_collect_data+0x182>

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    ce2e:	2006      	movs	r0, #6
    ce30:	4621      	mov	r1, r4
    ce32:	f7ff ff07 	bl	cc44 <getStackedReg>
    ce36:	4603      	mov	r3, r0
    ce38:	e72c      	b.n	cc94 <am_util_faultisr_collect_data+0x48>
    ce3a:	bf00      	nop
    ce3c:	e000ed28 	.word	0xe000ed28
    ce40:	0000f58c 	.word	0x0000f58c
    ce44:	0000f5a8 	.word	0x0000f5a8
    ce48:	0000f5bc 	.word	0x0000f5bc
    ce4c:	0000f5d0 	.word	0x0000f5d0
    ce50:	0000f5e4 	.word	0x0000f5e4
    ce54:	0000f5f8 	.word	0x0000f5f8
    ce58:	0000f60c 	.word	0x0000f60c
    ce5c:	0000f620 	.word	0x0000f620
    ce60:	0000f634 	.word	0x0000f634
    ce64:	0000f648 	.word	0x0000f648
    ce68:	0000f660 	.word	0x0000f660
    ce6c:	0000f67c 	.word	0x0000f67c
    ce70:	0000f6a4 	.word	0x0000f6a4
    ce74:	0000f6d4 	.word	0x0000f6d4
    ce78:	0000f700 	.word	0x0000f700
    ce7c:	0000f72c 	.word	0x0000f72c
    ce80:	0000f804 	.word	0x0000f804
    ce84:	0000f820 	.word	0x0000f820
    ce88:	0000f74c 	.word	0x0000f74c
    ce8c:	0000f788 	.word	0x0000f788
    ce90:	0000f7c4 	.word	0x0000f7c4
    ce94:	0000f7e4 	.word	0x0000f7e4
    ce98:	0000f7a4 	.word	0x0000f7a4
    ce9c:	0000f76c 	.word	0x0000f76c
    cea0:	0000f874 	.word	0x0000f874
    cea4:	0000f854 	.word	0x0000f854
    cea8:	0000f834 	.word	0x0000f834

0000ceac <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    ceac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ceb0:	b099      	sub	sp, #100	; 0x64
    ceb2:	f10d 0e44 	add.w	lr, sp, #68	; 0x44
    ceb6:	4604      	mov	r4, r0
    ceb8:	460d      	mov	r5, r1
    ceba:	920f      	str	r2, [sp, #60]	; 0x3c
        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);

        tbuf[ix++] = uMod + '0';
    cebc:	4671      	mov	r1, lr
    cebe:	2001      	movs	r0, #1
    cec0:	e9cd 6700 	strd	r6, r7, [sp]
    cec4:	e007      	b.n	ced6 <uint64_to_str+0x2a>
    cec6:	700a      	strb	r2, [r1, #0]
        q32 += (q32 >> 4);
        q32 += (q32 >> 8);
        q32 += (q32 >> 16);
        q32 >>= 3;
        r32 = ui32Val - q32*10;
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    cec8:	461c      	mov	r4, r3
    ceca:	2500      	movs	r5, #0
        //
        uMod = ui64Val - (u64Tmp * 10);

        tbuf[ix++] = uMod + '0';
        ui64Val = u64Tmp;
    } while ( ui64Val );
    cecc:	2b00      	cmp	r3, #0
    cece:	f000 808a 	beq.w	cfe6 <uint64_to_str+0x13a>
    ced2:	3001      	adds	r0, #1
    ced4:	3101      	adds	r1, #1
        return q64 + ((r64 + 6) >> 4);
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
        q32 = (ui32Val>>1) + (ui32Val>>2);
    ced6:	0863      	lsrs	r3, r4, #1
    ced8:	eb03 0394 	add.w	r3, r3, r4, lsr #2
        q32 += (q32 >> 4);
    cedc:	eb03 1313 	add.w	r3, r3, r3, lsr #4
        q32 += (q32 >> 8);
    cee0:	eb03 2313 	add.w	r3, r3, r3, lsr #8
        q32 += (q32 >> 16);
    cee4:	eb03 4313 	add.w	r3, r3, r3, lsr #16
        q32 >>= 3;
    cee8:	08da      	lsrs	r2, r3, #3
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    ceea:	2600      	movs	r6, #0
        q32 = (ui32Val>>1) + (ui32Val>>2);
        q32 += (q32 >> 4);
        q32 += (q32 >> 8);
        q32 += (q32 >> 16);
        q32 >>= 3;
        r32 = ui32Val - q32*10;
    ceec:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
    cef0:	1da3      	adds	r3, r4, #6
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    cef2:	9500      	str	r5, [sp, #0]
    cef4:	9601      	str	r6, [sp, #4]
        q32 += (q32 >> 4);
        q32 += (q32 >> 8);
        q32 += (q32 >> 16);
        q32 >>= 3;
        r32 = ui32Val - q32*10;
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    cef6:	eba3 034c 	sub.w	r3, r3, ip, lsl #1
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    cefa:	e9dd 6700 	ldrd	r6, r7, [sp]
        q32 += (q32 >> 4);
        q32 += (q32 >> 8);
        q32 += (q32 >> 16);
        q32 >>= 3;
        r32 = ui32Val - q32*10;
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    cefe:	eb02 1313 	add.w	r3, r2, r3, lsr #4
        u64Tmp = divu64_10(ui64Val);

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    cf02:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
    cf06:	eba4 024c 	sub.w	r2, r4, ip, lsl #1
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    cf0a:	433e      	orrs	r6, r7
        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);

        tbuf[ix++] = uMod + '0';
    cf0c:	f102 0230 	add.w	r2, r2, #48	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    cf10:	d0d9      	beq.n	cec6 <uint64_to_str+0x1a>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    cf12:	08a3      	lsrs	r3, r4, #2
    cf14:	ea43 7385 	orr.w	r3, r3, r5, lsl #30
    cf18:	9308      	str	r3, [sp, #32]
    cf1a:	08ab      	lsrs	r3, r5, #2
    cf1c:	9309      	str	r3, [sp, #36]	; 0x24
    cf1e:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
    cf22:	086b      	lsrs	r3, r5, #1
    cf24:	ea4f 0234 	mov.w	r2, r4, rrx
    cf28:	18b6      	adds	r6, r6, r2
    cf2a:	415f      	adcs	r7, r3
    cf2c:	4632      	mov	r2, r6
        q64 += (q64 >> 4);
    cf2e:	0936      	lsrs	r6, r6, #4
    cf30:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
    cf34:	9602      	str	r6, [sp, #8]
    cf36:	093e      	lsrs	r6, r7, #4
    cf38:	9603      	str	r6, [sp, #12]
    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    cf3a:	463b      	mov	r3, r7
        q64 += (q64 >> 4);
    cf3c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    cf40:	18b6      	adds	r6, r6, r2
    cf42:	415f      	adcs	r7, r3
    cf44:	4632      	mov	r2, r6
        q64 += (q64 >> 8);
    cf46:	0a36      	lsrs	r6, r6, #8
    cf48:	ea46 6607 	orr.w	r6, r6, r7, lsl #24
    cf4c:	9604      	str	r6, [sp, #16]
    cf4e:	0a3e      	lsrs	r6, r7, #8
    cf50:	9605      	str	r6, [sp, #20]
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
        q64 += (q64 >> 4);
    cf52:	463b      	mov	r3, r7
        q64 += (q64 >> 8);
    cf54:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    cf58:	18b6      	adds	r6, r6, r2
    cf5a:	415f      	adcs	r7, r3
    cf5c:	4632      	mov	r2, r6
        q64 += (q64 >> 16);
    cf5e:	0c36      	lsrs	r6, r6, #16
    cf60:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
    cf64:	9606      	str	r6, [sp, #24]
    cf66:	0c3e      	lsrs	r6, r7, #16
    cf68:	9607      	str	r6, [sp, #28]
    //
    if ( ui64Val >> 32 )
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
        q64 += (q64 >> 4);
        q64 += (q64 >> 8);
    cf6a:	463b      	mov	r3, r7
        q64 += (q64 >> 16);
    cf6c:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
    cf70:	18b6      	adds	r6, r6, r2
    cf72:	415f      	adcs	r7, r3
    cf74:	4632      	mov	r2, r6
        q64 += (q64 >> 32);
    cf76:	2600      	movs	r6, #0
    cf78:	970c      	str	r7, [sp, #48]	; 0x30
    cf7a:	960d      	str	r6, [sp, #52]	; 0x34
    if ( ui64Val >> 32 )
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
        q64 += (q64 >> 4);
        q64 += (q64 >> 8);
        q64 += (q64 >> 16);
    cf7c:	463b      	mov	r3, r7
        q64 += (q64 >> 32);
    cf7e:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
    cf82:	18b6      	adds	r6, r6, r2
    cf84:	415f      	adcs	r7, r3
        q64 >>= 3;
    cf86:	ea4f 08d6 	mov.w	r8, r6, lsr #3
    cf8a:	ea48 7847 	orr.w	r8, r8, r7, lsl #29
        r64 = ui64Val - q64*10;
    cf8e:	eb18 0208 	adds.w	r2, r8, r8
        q64 = (ui64Val>>1) + (ui64Val>>2);
        q64 += (q64 >> 4);
        q64 += (q64 >> 8);
        q64 += (q64 >> 16);
        q64 += (q64 >> 32);
        q64 >>= 3;
    cf92:	ea4f 09d7 	mov.w	r9, r7, lsr #3
        r64 = ui64Val - q64*10;
    cf96:	eb49 0309 	adc.w	r3, r9, r9
    cf9a:	009e      	lsls	r6, r3, #2
    cf9c:	ea46 7692 	orr.w	r6, r6, r2, lsr #30
    cfa0:	960b      	str	r6, [sp, #44]	; 0x2c
    cfa2:	0096      	lsls	r6, r2, #2
    cfa4:	960a      	str	r6, [sp, #40]	; 0x28
    cfa6:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    cfaa:	18b6      	adds	r6, r6, r2
    cfac:	415f      	adcs	r7, r3
    cfae:	4632      	mov	r2, r6
    cfb0:	1da6      	adds	r6, r4, #6
    cfb2:	463b      	mov	r3, r7
    cfb4:	f145 0700 	adc.w	r7, r5, #0
        return q64 + ((r64 + 6) >> 4);
    cfb8:	1ab6      	subs	r6, r6, r2
    cfba:	eb67 0703 	sbc.w	r7, r7, r3
    cfbe:	ea4f 1a16 	mov.w	sl, r6, lsr #4
    cfc2:	ea4a 7a07 	orr.w	sl, sl, r7, lsl #28
    cfc6:	eb1a 0208 	adds.w	r2, sl, r8
        u64Tmp = divu64_10(ui64Val);

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    cfca:	eb02 0582 	add.w	r5, r2, r2, lsl #2
    cfce:	eba4 0445 	sub.w	r4, r4, r5, lsl #1
        q64 += (q64 >> 8);
        q64 += (q64 >> 16);
        q64 += (q64 >> 32);
        q64 >>= 3;
        r64 = ui64Val - q64*10;
        return q64 + ((r64 + 6) >> 4);
    cfd2:	ea4f 1b17 	mov.w	fp, r7, lsr #4
        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);

        tbuf[ix++] = uMod + '0';
    cfd6:	f104 0430 	add.w	r4, r4, #48	; 0x30
        q64 += (q64 >> 8);
        q64 += (q64 >> 16);
        q64 += (q64 >> 32);
        q64 >>= 3;
        r64 = ui64Val - q64*10;
        return q64 + ((r64 + 6) >> 4);
    cfda:	eb4b 0309 	adc.w	r3, fp, r9
        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);

        tbuf[ix++] = uMod + '0';
    cfde:	700c      	strb	r4, [r1, #0]
    cfe0:	461d      	mov	r5, r3
    cfe2:	4614      	mov	r4, r2
    cfe4:	e775      	b.n	ced2 <uint64_to_str+0x26>
    iNumDig = ix;

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    cfe6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    cfe8:	b15a      	cbz	r2, d002 <uint64_to_str+0x156>
    cfea:	eb0e 0300 	add.w	r3, lr, r0
    cfee:	3a01      	subs	r2, #1
    {
        while ( ix-- )
        {
            *pcBuf++ = tbuf[ix];
    cff0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
    cff4:	f802 1f01 	strb.w	r1, [r2, #1]!
    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    {
        while ( ix-- )
    cff8:	459e      	cmp	lr, r3
    cffa:	d1f9      	bne.n	cff0 <uint64_to_str+0x144>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    cffc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    cffe:	2300      	movs	r3, #0
    d000:	5413      	strb	r3, [r2, r0]
    }

    return iNumDig;
}
    d002:	b019      	add	sp, #100	; 0x64
    d004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d008 <am_util_stdio_printf_init>:
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    g_pfnCharPrint = pfnCharPrint;
    d008:	4b01      	ldr	r3, [pc, #4]	; (d010 <am_util_stdio_printf_init+0x8>)
    d00a:	6018      	str	r0, [r3, #0]
    d00c:	4770      	bx	lr
    d00e:	bf00      	nop
    d010:	1001d56c 	.word	0x1001d56c

0000d014 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    d014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d018:	b0b3      	sub	sp, #204	; 0xcc
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    d01a:	f04f 0a00 	mov.w	sl, #0
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    d01e:	9219      	str	r2, [sp, #100]	; 0x64
    d020:	4604      	mov	r4, r0
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
    d022:	780b      	ldrb	r3, [r1, #0]
    d024:	b163      	cbz	r3, d040 <am_util_stdio_vsprintf+0x2c>
    {
        iPrecision = 6;             // printf() default precision for %f is 6

        if ( *pcFmt != '%' )
    d026:	2b25      	cmp	r3, #37	; 0x25
    d028:	d010      	beq.n	d04c <am_util_stdio_vsprintf+0x38>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    d02a:	b11c      	cbz	r4, d034 <am_util_stdio_vsprintf+0x20>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    d02c:	2b0a      	cmp	r3, #10
    d02e:	d07a      	beq.n	d126 <am_util_stdio_vsprintf+0x112>
                {
                    *pcBuf++ = '\r';
                    ++ui32CharCnt;
                }
                *pcBuf++ = *pcFmt;
    d030:	7023      	strb	r3, [r4, #0]
    d032:	3401      	adds	r4, #1
            }

            ++pcFmt;
    d034:	3101      	adds	r1, #1
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
    d036:	780b      	ldrb	r3, [r1, #0]
                }
                *pcBuf++ = *pcFmt;
            }

            ++pcFmt;
            ++ui32CharCnt;
    d038:	f10a 0a01 	add.w	sl, sl, #1
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
    d03c:	2b00      	cmp	r3, #0
    d03e:	d1f2      	bne.n	d026 <am_util_stdio_vsprintf+0x12>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    d040:	b104      	cbz	r4, d044 <am_util_stdio_vsprintf+0x30>
    {
        *pcBuf = 0x0;
    d042:	7023      	strb	r3, [r4, #0]
    }

    return (ui32CharCnt);
}
    d044:	4650      	mov	r0, sl
    d046:	b033      	add	sp, #204	; 0xcc
    d048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';

        if ( *pcFmt == '0' )
    d04c:	784d      	ldrb	r5, [r1, #1]
    d04e:	2d30      	cmp	r5, #48	; 0x30
    d050:	f000 80e8 	beq.w	d224 <am_util_stdio_vsprintf+0x210>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    d054:	462a      	mov	r2, r5
    d056:	3101      	adds	r1, #1
        bLower = bLongLong = false;

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    d058:	2520      	movs	r5, #32
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    bool bNeg = false;
    uint32_t ui32Val = 0, uCnt = 0;

    if ( *pcStr == '-')
    d05a:	2a2d      	cmp	r2, #45	; 0x2d
    d05c:	f000 80d7 	beq.w	d20e <am_util_stdio_vsprintf+0x1fa>
        bNeg = true;
        pcStr++;
        uCnt++;
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d060:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    d064:	2b09      	cmp	r3, #9
    d066:	f200 8439 	bhi.w	d8dc <am_util_stdio_vsprintf+0x8c8>
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    bool bNeg = false;
    uint32_t ui32Val = 0, uCnt = 0;
    d06a:	2000      	movs	r0, #0
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    bool bNeg = false;
    d06c:	4686      	mov	lr, r0
        bNeg = true;
        pcStr++;
        uCnt++;
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d06e:	460e      	mov	r6, r1
    bool bNeg = false;
    uint32_t ui32Val = 0, uCnt = 0;

    if ( *pcStr == '-')
    {
        bNeg = true;
    d070:	2300      	movs	r3, #0
        ++uCnt;

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    d072:	eb03 0383 	add.w	r3, r3, r3, lsl #2

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    d076:	eb02 0343 	add.w	r3, r2, r3, lsl #1
        bNeg = true;
        pcStr++;
        uCnt++;
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d07a:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    d07e:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
    d082:	2f09      	cmp	r7, #9
        ui32Val *= 10;

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    d084:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
        uCnt++;
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    {
        ++uCnt;
    d088:	f100 0001 	add.w	r0, r0, #1
        bNeg = true;
        pcStr++;
        uCnt++;
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d08c:	d9f1      	bls.n	d072 <am_util_stdio_vsprintf+0x5e>
    if ( pui32CharCnt )
    {
        *pui32CharCnt = uCnt;
    }

    return bNeg ? -ui32Val : ui32Val;
    d08e:	f1be 0f00 	cmp.w	lr, #0
    d092:	d153      	bne.n	d13c <am_util_stdio_vsprintf+0x128>
    d094:	5c0a      	ldrb	r2, [r1, r0]
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    bool bNeg = false;
    uint32_t ui32Val = 0, uCnt = 0;
    d096:	eb01 0b00 	add.w	fp, r1, r0
        pcFmt += ui32NumChars;

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    d09a:	2a73      	cmp	r2, #115	; 0x73
    d09c:	d055      	beq.n	d14a <am_util_stdio_vsprintf+0x136>
    d09e:	2b00      	cmp	r3, #0
    d0a0:	bfb8      	it	lt
    d0a2:	425b      	neglt	r3, r3
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    d0a4:	2a2e      	cmp	r2, #46	; 0x2e
    d0a6:	f000 8303 	beq.w	d6b0 <am_util_stdio_vsprintf+0x69c>
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    d0aa:	2606      	movs	r6, #6
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    d0ac:	2a6c      	cmp	r2, #108	; 0x6c
    d0ae:	f000 80a6 	beq.w	d1fe <am_util_stdio_vsprintf+0x1ea>
                pcFmt++;
                bLongLong = true;
            }
        }

        switch ( *pcFmt )
    d0b2:	f1a2 0146 	sub.w	r1, r2, #70	; 0x46
    d0b6:	2932      	cmp	r1, #50	; 0x32
    d0b8:	f200 82f4 	bhi.w	d6a4 <am_util_stdio_vsprintf+0x690>
    d0bc:	e8df f011 	tbh	[pc, r1, lsl #1]
    d0c0:	02f200c2 	.word	0x02f200c2
    d0c4:	02f202f2 	.word	0x02f202f2
    d0c8:	02f202f2 	.word	0x02f202f2
    d0cc:	02f202f2 	.word	0x02f202f2
    d0d0:	02f202f2 	.word	0x02f202f2
    d0d4:	02f202f2 	.word	0x02f202f2
    d0d8:	02f202f2 	.word	0x02f202f2
    d0dc:	02f202f2 	.word	0x02f202f2
    d0e0:	02f202f2 	.word	0x02f202f2
    d0e4:	02f200de 	.word	0x02f200de
    d0e8:	02f202f2 	.word	0x02f202f2
    d0ec:	02f202f2 	.word	0x02f202f2
    d0f0:	02f202f2 	.word	0x02f202f2
    d0f4:	02f202f2 	.word	0x02f202f2
    d0f8:	00b502f2 	.word	0x00b502f2
    d0fc:	02f2020a 	.word	0x02f2020a
    d100:	02f200c2 	.word	0x02f200c2
    d104:	020a02f2 	.word	0x020a02f2
    d108:	02f202f2 	.word	0x02f202f2
    d10c:	02f202f2 	.word	0x02f202f2
    d110:	02f202f2 	.word	0x02f202f2
    d114:	02f202f2 	.word	0x02f202f2
    d118:	004502f2 	.word	0x004502f2
    d11c:	013602f2 	.word	0x013602f2
    d120:	02f202f2 	.word	0x02f202f2
    d124:	0134      	.short	0x0134
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    d126:	4a91      	ldr	r2, [pc, #580]	; (d36c <am_util_stdio_vsprintf+0x358>)
    d128:	7812      	ldrb	r2, [r2, #0]
    d12a:	2a00      	cmp	r2, #0
    d12c:	d080      	beq.n	d030 <am_util_stdio_vsprintf+0x1c>
                {
                    *pcBuf++ = '\r';
    d12e:	230d      	movs	r3, #13
    d130:	7023      	strb	r3, [r4, #0]
                    ++ui32CharCnt;
    d132:	f10a 0a01 	add.w	sl, sl, #1
            if ( pcBuf )
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
                {
                    *pcBuf++ = '\r';
    d136:	3401      	adds	r4, #1
    d138:	780b      	ldrb	r3, [r1, #0]
    d13a:	e779      	b.n	d030 <am_util_stdio_vsprintf+0x1c>
    d13c:	5c0a      	ldrb	r2, [r1, r0]
        pcFmt += ui32NumChars;

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    d13e:	2a73      	cmp	r2, #115	; 0x73
    d140:	f1c3 0300 	rsb	r3, r3, #0
    d144:	eb01 0b00 	add.w	fp, r1, r0
    d148:	d1a9      	bne.n	d09e <am_util_stdio_vsprintf+0x8a>

                ++ui32CharCnt;
                break;

            case 's':
                pcStr = va_arg(pArgs, char *);
    d14a:	9919      	ldr	r1, [sp, #100]	; 0x64
    d14c:	6808      	ldr	r0, [r1, #0]
    d14e:	1d0f      	adds	r7, r1, #4
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    uint32_t ui32RetVal = 0;
    if ( !pcBuf )
    d150:	2800      	cmp	r0, #0
    d152:	f000 840e 	beq.w	d972 <am_util_stdio_vsprintf+0x95e>
    {
        return ui32RetVal;
    }

    while ( *pcBuf++ )
    d156:	7801      	ldrb	r1, [r0, #0]
    d158:	1c42      	adds	r2, r0, #1
    d15a:	4616      	mov	r6, r2
    d15c:	2900      	cmp	r1, #0
    d15e:	f000 8490 	beq.w	da82 <am_util_stdio_vsprintf+0xa6e>
    d162:	469e      	mov	lr, r3
    d164:	ebc0 0c06 	rsb	ip, r0, r6
    d168:	f816 3b01 	ldrb.w	r3, [r6], #1
    d16c:	2b00      	cmp	r3, #0
    d16e:	d1f9      	bne.n	d164 <am_util_stdio_vsprintf+0x150>
    d170:	4673      	mov	r3, lr
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
                if ( iWidth > 0 )
    d172:	2b00      	cmp	r3, #0
    d174:	dd19      	ble.n	d1aa <am_util_stdio_vsprintf+0x196>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    d176:	45e6      	cmp	lr, ip
    d178:	d917      	bls.n	d1aa <am_util_stdio_vsprintf+0x196>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    d17a:	ebcc 0303 	rsb	r3, ip, r3
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    int32_t i32Cnt = 0;

    if ( i32NumChars <= 0 )
    d17e:	2b00      	cmp	r3, #0
    d180:	f340 8477 	ble.w	da72 <am_util_stdio_vsprintf+0xa5e>
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    d184:	1e59      	subs	r1, r3, #1
    d186:	4622      	mov	r2, r4
    d188:	3901      	subs	r1, #1
    {
        if ( pcBuf )
    d18a:	b10a      	cbz	r2, d190 <am_util_stdio_vsprintf+0x17c>
        {
            *pcBuf++ = cPadChar;
    d18c:	7015      	strb	r5, [r2, #0]
    d18e:	3201      	adds	r2, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    d190:	1c4e      	adds	r6, r1, #1
    d192:	d1f9      	bne.n	d188 <am_util_stdio_vsprintf+0x174>
                    if ( ui32strlen < iWidth )
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
                        pcBuf += pcBuf ? iWidth : 0;
    d194:	2c00      	cmp	r4, #0
                        ui32CharCnt += iWidth;
                        iWidth = 0;
                    }
                }

                while (*pcStr != 0x0)
    d196:	7801      	ldrb	r1, [r0, #0]
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
                        pcBuf += pcBuf ? iWidth : 0;
                        ui32CharCnt += iWidth;
    d198:	449a      	add	sl, r3
                    if ( ui32strlen < iWidth )
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
                        pcBuf += pcBuf ? iWidth : 0;
    d19a:	bf08      	it	eq
    d19c:	2300      	moveq	r3, #0
    d19e:	441c      	add	r4, r3
                        ui32CharCnt += iWidth;
                        iWidth = 0;
                    }
                }

                while (*pcStr != 0x0)
    d1a0:	2900      	cmp	r1, #0
    d1a2:	f000 83ba 	beq.w	d91a <am_util_stdio_vsprintf+0x906>
                        // String needs some padding.
                        iWidth -= ui32strlen;
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
                        pcBuf += pcBuf ? iWidth : 0;
                        ui32CharCnt += iWidth;
                        iWidth = 0;
    d1a6:	2300      	movs	r3, #0
    d1a8:	1c42      	adds	r2, r0, #1
    d1aa:	ebc0 000a 	rsb	r0, r0, sl
    d1ae:	1886      	adds	r6, r0, r2
                    }
                }

                while (*pcStr != 0x0)
                {
                    if ( pcBuf )
    d1b0:	b10c      	cbz	r4, d1b6 <am_util_stdio_vsprintf+0x1a2>
                    {
                        *pcBuf++ = *pcStr;
    d1b2:	7021      	strb	r1, [r4, #0]
    d1b4:	3401      	adds	r4, #1
                        ui32CharCnt += iWidth;
                        iWidth = 0;
                    }
                }

                while (*pcStr != 0x0)
    d1b6:	f812 1b01 	ldrb.w	r1, [r2], #1
    d1ba:	2900      	cmp	r1, #0
    d1bc:	d1f7      	bne.n	d1ae <am_util_stdio_vsprintf+0x19a>

                    ++pcStr;
                    ++ui32CharCnt;
                }

                if ( iWidth )
    d1be:	2b00      	cmp	r3, #0
    d1c0:	f000 8344 	beq.w	d84c <am_util_stdio_vsprintf+0x838>
                {
                    iWidth = -iWidth;
    d1c4:	425b      	negs	r3, r3

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    d1c6:	4563      	cmp	r3, ip
    d1c8:	46b2      	mov	sl, r6
    d1ca:	f240 83a6 	bls.w	d91a <am_util_stdio_vsprintf+0x906>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    d1ce:	ebcc 0c03 	rsb	ip, ip, r3
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    int32_t i32Cnt = 0;

    if ( i32NumChars <= 0 )
    d1d2:	f1bc 0f00 	cmp.w	ip, #0
    d1d6:	f340 8459 	ble.w	da8c <am_util_stdio_vsprintf+0xa78>
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    d1da:	f10c 32ff 	add.w	r2, ip, #4294967295
    d1de:	4623      	mov	r3, r4
    d1e0:	3a01      	subs	r2, #1
    {
        if ( pcBuf )
    d1e2:	b10b      	cbz	r3, d1e8 <am_util_stdio_vsprintf+0x1d4>
        {
            *pcBuf++ = cPadChar;
    d1e4:	701d      	strb	r5, [r3, #0]
    d1e6:	3301      	adds	r3, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    d1e8:	1c51      	adds	r1, r2, #1
    d1ea:	d1f9      	bne.n	d1e0 <am_util_stdio_vsprintf+0x1cc>
                    if ( ui32strlen < iWidth )
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
                        pcBuf += pcBuf ? iWidth : 0;
    d1ec:	2c00      	cmp	r4, #0
    d1ee:	bf14      	ite	ne
    d1f0:	4663      	movne	r3, ip
    d1f2:	2300      	moveq	r3, #0
                        ui32CharCnt += iWidth;
    d1f4:	eb06 0a0c 	add.w	sl, r6, ip
                    if ( ui32strlen < iWidth )
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
                        pcBuf += pcBuf ? iWidth : 0;
    d1f8:	441c      	add	r4, r3

                ++ui32CharCnt;
                break;

            case 's':
                pcStr = va_arg(pArgs, char *);
    d1fa:	9719      	str	r7, [sp, #100]	; 0x64
    d1fc:	e01f      	b.n	d23e <am_util_stdio_vsprintf+0x22a>
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
        {
            pcFmt++;
            if ( *pcFmt == 'l' )    // "ll" (long long)
    d1fe:	f89b 2001 	ldrb.w	r2, [fp, #1]
    d202:	2a6c      	cmp	r2, #108	; 0x6c
    d204:	f000 82b0 	beq.w	d768 <am_util_stdio_vsprintf+0x754>
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
        {
            pcFmt++;
    d208:	f10b 0b01 	add.w	fp, fp, #1
    d20c:	e751      	b.n	d0b2 <am_util_stdio_vsprintf+0x9e>
        bNeg = true;
        pcStr++;
        uCnt++;
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d20e:	784a      	ldrb	r2, [r1, #1]
    d210:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    d214:	2b09      	cmp	r3, #9
    uint32_t ui32Val = 0, uCnt = 0;

    if ( *pcStr == '-')
    {
        bNeg = true;
        pcStr++;
    d216:	f101 0601 	add.w	r6, r1, #1
        uCnt++;
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d21a:	f200 83a6 	bhi.w	d96a <am_util_stdio_vsprintf+0x956>

    if ( *pcStr == '-')
    {
        bNeg = true;
        pcStr++;
        uCnt++;
    d21e:	2001      	movs	r0, #1
    bool bNeg = false;
    uint32_t ui32Val = 0, uCnt = 0;

    if ( *pcStr == '-')
    {
        bNeg = true;
    d220:	4686      	mov	lr, r0
    d222:	e725      	b.n	d070 <am_util_stdio_vsprintf+0x5c>
    d224:	788a      	ldrb	r2, [r1, #2]
        ui8PadChar = ' ';

        if ( *pcFmt == '0' )
        {
            ui8PadChar = '0';
            ++pcFmt;
    d226:	3102      	adds	r1, #2
    d228:	e717      	b.n	d05a <am_util_stdio_vsprintf+0x46>
        }

        switch ( *pcFmt )
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    d22a:	9a19      	ldr	r2, [sp, #100]	; 0x64
    d22c:	4613      	mov	r3, r2
    d22e:	3304      	adds	r3, #4
    d230:	7812      	ldrb	r2, [r2, #0]

                if ( pcBuf )
    d232:	b10c      	cbz	r4, d238 <am_util_stdio_vsprintf+0x224>
                {
                    *pcBuf++ = ui8CharSpecifier;
    d234:	7022      	strb	r2, [r4, #0]
    d236:	3401      	adds	r4, #1
                }

                ++ui32CharCnt;
    d238:	f10a 0a01 	add.w	sl, sl, #1
        }

        switch ( *pcFmt )
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    d23c:	9319      	str	r3, [sp, #100]	; 0x64
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    d23e:	f10b 0101 	add.w	r1, fp, #1
    d242:	e6ee      	b.n	d022 <am_util_stdio_vsprintf+0xe>
                break;


            case 'f':
            case 'F':
                if ( pcBuf )
    d244:	2c00      	cmp	r4, #0
    d246:	d0fa      	beq.n	d23e <am_util_stdio_vsprintf+0x22a>
                {
                    float fValue = va_arg(pArgs, double);
    d248:	9b19      	ldr	r3, [sp, #100]	; 0x64
    d24a:	3307      	adds	r3, #7
    d24c:	f023 0307 	bic.w	r3, r3, #7
    d250:	e9d3 0100 	ldrd	r0, r1, [r3]
    d254:	3308      	adds	r3, #8
    d256:	9319      	str	r3, [sp, #100]	; 0x64
    d258:	f7ff f90a 	bl	c470 <__aeabi_d2f>
    d25c:	ee07 0a90 	vmov	s15, r0
    if (iBufSize < 4)
    {
        return AM_FTOA_ERR_BUFSIZE;
    }

    if (fValue == 0.0f)
    d260:	eef5 7a40 	vcmp.f32	s15, #0.0
                    float fValue = va_arg(pArgs, double);

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    d264:	2314      	movs	r3, #20
    if (iBufSize < 4)
    {
        return AM_FTOA_ERR_BUFSIZE;
    }

    if (fValue == 0.0f)
    d266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    float fValue = va_arg(pArgs, double);

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    d26a:	6023      	str	r3, [r4, #0]
    if (iBufSize < 4)
    {
        return AM_FTOA_ERR_BUFSIZE;
    }

    if (fValue == 0.0f)
    d26c:	f040 82f3 	bne.w	d856 <am_util_stdio_vsprintf+0x842>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    d270:	4b3f      	ldr	r3, [pc, #252]	; (d370 <am_util_stdio_vsprintf+0x35c>)
    d272:	6023      	str	r3, [r4, #0]
    d274:	2303      	movs	r3, #3
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
                        iVal = 3;
                    }
                    ui32CharCnt += iVal;
    d276:	449a      	add	sl, r3
                    pcBuf += iVal;
    d278:	441c      	add	r4, r3
    d27a:	e7e0      	b.n	d23e <am_util_stdio_vsprintf+0x22a>

        //
        // Handle the specifier.
        //
        ++pcFmt;
        bLower = bLongLong = false;
    d27c:	2200      	movs	r2, #0
                break;

            case 'x':
                bLower = true;
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d27e:	9e19      	ldr	r6, [sp, #100]	; 0x64
    d280:	4631      	mov	r1, r6
                                      va_arg(pArgs, uint32_t);
    d282:	3104      	adds	r1, #4
                break;

            case 'x':
                bLower = true;
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d284:	6830      	ldr	r0, [r6, #0]
                                      va_arg(pArgs, uint32_t);
    d286:	9119      	str	r1, [sp, #100]	; 0x64
                break;

            case 'x':
                bLower = true;
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d288:	2100      	movs	r1, #0
                                      va_arg(pArgs, uint32_t);

                if ( iWidth )
    d28a:	b393      	cbz	r3, d2f2 <am_util_stdio_vsprintf+0x2de>
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    int iDigits = ui64Val ? 0 : 1;
    d28c:	ea50 0601 	orrs.w	r6, r0, r1
    d290:	bf0c      	ite	eq
    d292:	f04f 0c01 	moveq.w	ip, #1
    d296:	f04f 0c00 	movne.w	ip, #0

    while ( ui64Val )
    d29a:	ea50 0601 	orrs.w	r6, r0, r1
    d29e:	f000 83eb 	beq.w	da78 <am_util_stdio_vsprintf+0xa64>
    d2a2:	4606      	mov	r6, r0
    d2a4:	460f      	mov	r7, r1
    d2a6:	4680      	mov	r8, r0
    d2a8:	4689      	mov	r9, r1
    {
        ui64Val >>= 4;
    d2aa:	0931      	lsrs	r1, r6, #4
    d2ac:	ea41 7107 	orr.w	r1, r1, r7, lsl #28
    d2b0:	ea4f 1e17 	mov.w	lr, r7, lsr #4
    d2b4:	460e      	mov	r6, r1
    d2b6:	4677      	mov	r7, lr
static int
ndigits_in_hex(uint64_t ui64Val)
{
    int iDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
    d2b8:	ea56 0107 	orrs.w	r1, r6, r7
    {
        ui64Val >>= 4;
        ++iDigits;
    d2bc:	f10c 0c01 	add.w	ip, ip, #1
static int
ndigits_in_hex(uint64_t ui64Val)
{
    int iDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
    d2c0:	d1f3      	bne.n	d2aa <am_util_stdio_vsprintf+0x296>
                if ( iWidth )
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    d2c2:	ebcc 0303 	rsb	r3, ip, r3
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    int32_t i32Cnt = 0;

    if ( i32NumChars <= 0 )
    d2c6:	2b00      	cmp	r3, #0
    d2c8:	4640      	mov	r0, r8
    d2ca:	4649      	mov	r1, r9
    d2cc:	f340 834b 	ble.w	d966 <am_util_stdio_vsprintf+0x952>
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    d2d0:	3b01      	subs	r3, #1
static int
ndigits_in_hex(uint64_t ui64Val)
{
    int iDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
    d2d2:	461f      	mov	r7, r3
    d2d4:	4626      	mov	r6, r4
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    d2d6:	3f01      	subs	r7, #1
    {
        if ( pcBuf )
    d2d8:	b10e      	cbz	r6, d2de <am_util_stdio_vsprintf+0x2ca>
        {
            *pcBuf++ = cPadChar;
    d2da:	7035      	strb	r5, [r6, #0]
    d2dc:	3601      	adds	r6, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    d2de:	f1b7 3fff 	cmp.w	r7, #4294967295
    d2e2:	d1f8      	bne.n	d2d6 <am_util_stdio_vsprintf+0x2c2>
    d2e4:	3301      	adds	r3, #1
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
                    pcBuf += pcBuf ? iWidth : 0;
    d2e6:	2c00      	cmp	r4, #0
    d2e8:	bf14      	ite	ne
    d2ea:	461d      	movne	r5, r3
    d2ec:	2500      	moveq	r5, #0
                    ui32CharCnt += iWidth;
    d2ee:	449a      	add	sl, r3
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
                    pcBuf += pcBuf ? iWidth : 0;
    d2f0:	442c      	add	r4, r5
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    int iNumDig, ix = 0;
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    d2f2:	ea50 0301 	orrs.w	r3, r0, r1
    d2f6:	f040 8202 	bne.w	d6fe <am_util_stdio_vsprintf+0x6ea>
    {
        tbuf[ix++] = '0';   // Print a '0'
    d2fa:	2330      	movs	r3, #48	; 0x30
    iNumDig = ix;

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    d2fc:	2601      	movs	r6, #1
    int iNumDig, ix = 0;
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    {
        tbuf[ix++] = '0';   // Print a '0'
    d2fe:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
    d302:	4632      	mov	r2, r6
    iNumDig = ix;

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    d304:	2c00      	cmp	r4, #0
    d306:	f000 8217 	beq.w	d738 <am_util_stdio_vsprintf+0x724>
    d30a:	ad2d      	add	r5, sp, #180	; 0xb4
    d30c:	18ab      	adds	r3, r5, r2
    d30e:	1e61      	subs	r1, r4, #1
    {
        while (ix--)
        {
            *pcBuf++ = tbuf[ix];
    d310:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
    d314:	f801 0f01 	strb.w	r0, [r1, #1]!
    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    {
        while (ix--)
    d318:	42ab      	cmp	r3, r5
    d31a:	d1f9      	bne.n	d310 <am_util_stdio_vsprintf+0x2fc>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    d31c:	f04f 0300 	mov.w	r3, #0
    d320:	54a3      	strb	r3, [r4, r2]
                if ( pcBuf )
                {
                    pcBuf += iVal;
                }

                ui32CharCnt += iVal;
    d322:	44b2      	add	sl, r6

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);

                if ( pcBuf )
                {
                    pcBuf += iVal;
    d324:	4434      	add	r4, r6
                }

                ui32CharCnt += iVal;
                break;
    d326:	e78a      	b.n	d23e <am_util_stdio_vsprintf+0x22a>
                pcFmt++;
                bLongLong = true;
            }
        }

        switch ( *pcFmt )
    d328:	2201      	movs	r2, #1
    d32a:	e7a8      	b.n	d27e <am_util_stdio_vsprintf+0x26a>

                ui32CharCnt += iVal;
                break;

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d32c:	9919      	ldr	r1, [sp, #100]	; 0x64
    d32e:	680a      	ldr	r2, [r1, #0]
                                      va_arg(pArgs, uint32_t);
    d330:	3104      	adds	r1, #4
    d332:	9119      	str	r1, [sp, #100]	; 0x64

                ui32CharCnt += iVal;
                break;

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d334:	4610      	mov	r0, r2
    d336:	2100      	movs	r1, #0
    d338:	e9cd 011e 	strd	r0, r1, [sp, #120]	; 0x78
                                      va_arg(pArgs, uint32_t);

                if ( iWidth )
    d33c:	2b00      	cmp	r3, #0
    d33e:	f000 80c0 	beq.w	d4c2 <am_util_stdio_vsprintf+0x4ae>
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    int iNDigits = ui64Val ? 0 : 1;
    d342:	e9dd 671e 	ldrd	r6, r7, [sp, #120]	; 0x78
    d346:	4632      	mov	r2, r6
    d348:	433a      	orrs	r2, r7

    while ( ui64Val )
    d34a:	4630      	mov	r0, r6
    d34c:	4639      	mov	r1, r7
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    int iNDigits = ui64Val ? 0 : 1;
    d34e:	bf0c      	ite	eq
    d350:	2201      	moveq	r2, #1
    d352:	2200      	movne	r2, #0

    while ( ui64Val )
    d354:	ea50 0601 	orrs.w	r6, r0, r1
    d358:	f000 83bd 	beq.w	dad6 <am_util_stdio_vsprintf+0xac2>
    d35c:	f8cd b090 	str.w	fp, [sp, #144]	; 0x90
    d360:	f8cd a094 	str.w	sl, [sp, #148]	; 0x94
    d364:	952a      	str	r5, [sp, #168]	; 0xa8
    d366:	469c      	mov	ip, r3
    d368:	46a6      	mov	lr, r4
    d36a:	e00c      	b.n	d386 <am_util_stdio_vsprintf+0x372>
    d36c:	10001455 	.word	0x10001455
    d370:	00302e30 	.word	0x00302e30
    d374:	4623      	mov	r3, r4
    d376:	462c      	mov	r4, r5
    d378:	4618      	mov	r0, r3
    d37a:	4621      	mov	r1, r4
    d37c:	ea50 0301 	orrs.w	r3, r0, r1
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
        ++iNDigits;
    d380:	f102 0201 	add.w	r2, r2, #1
static int
ndigits_in_u64(uint64_t ui64Val)
{
    int iNDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
    d384:	d07e      	beq.n	d484 <am_util_stdio_vsprintf+0x470>
    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    d386:	0883      	lsrs	r3, r0, #2
    d388:	ea43 7381 	orr.w	r3, r3, r1, lsl #30
    d38c:	9308      	str	r3, [sp, #32]
    d38e:	088b      	lsrs	r3, r1, #2
    d390:	9309      	str	r3, [sp, #36]	; 0x24
    d392:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
    d396:	084d      	lsrs	r5, r1, #1
    d398:	ea4f 0430 	mov.w	r4, r0, rrx
    d39c:	1936      	adds	r6, r6, r4
    d39e:	416f      	adcs	r7, r5
        q64 += (q64 >> 4);
    d3a0:	ea4f 1a16 	mov.w	sl, r6, lsr #4
    d3a4:	ea4a 7a07 	orr.w	sl, sl, r7, lsl #28
    d3a8:	eb16 040a 	adds.w	r4, r6, sl
    d3ac:	ea4f 1b17 	mov.w	fp, r7, lsr #4
    d3b0:	eb47 050b 	adc.w	r5, r7, fp
        q64 += (q64 >> 8);
    d3b4:	ea4f 2814 	mov.w	r8, r4, lsr #8
    d3b8:	ea48 6805 	orr.w	r8, r8, r5, lsl #24
    d3bc:	eb14 0408 	adds.w	r4, r4, r8
    d3c0:	ea4f 2915 	mov.w	r9, r5, lsr #8
    d3c4:	eb45 0509 	adc.w	r5, r5, r9
        q64 += (q64 >> 16);
    d3c8:	0c23      	lsrs	r3, r4, #16
    d3ca:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
    d3ce:	9304      	str	r3, [sp, #16]
    d3d0:	0c2b      	lsrs	r3, r5, #16
    d3d2:	9305      	str	r3, [sp, #20]
    d3d4:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    d3d8:	1936      	adds	r6, r6, r4
    d3da:	416f      	adcs	r7, r5
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    d3dc:	2300      	movs	r3, #0
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
        q64 += (q64 >> 4);
        q64 += (q64 >> 8);
        q64 += (q64 >> 16);
        q64 += (q64 >> 32);
    d3de:	931b      	str	r3, [sp, #108]	; 0x6c
    d3e0:	971a      	str	r7, [sp, #104]	; 0x68
    if ( ui64Val >> 32 )
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
        q64 += (q64 >> 4);
        q64 += (q64 >> 8);
        q64 += (q64 >> 16);
    d3e2:	4634      	mov	r4, r6
    d3e4:	463d      	mov	r5, r7
        q64 += (q64 >> 32);
    d3e6:	e9dd 671a 	ldrd	r6, r7, [sp, #104]	; 0x68
    d3ea:	1936      	adds	r6, r6, r4
    d3ec:	416f      	adcs	r7, r5
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    d3ee:	9315      	str	r3, [sp, #84]	; 0x54
        q64 = (ui64Val>>1) + (ui64Val>>2);
        q64 += (q64 >> 4);
        q64 += (q64 >> 8);
        q64 += (q64 >> 16);
        q64 += (q64 >> 32);
        q64 >>= 3;
    d3f0:	08f3      	lsrs	r3, r6, #3
    d3f2:	ea43 7347 	orr.w	r3, r3, r7, lsl #29
    d3f6:	9300      	str	r3, [sp, #0]
    d3f8:	08fb      	lsrs	r3, r7, #3
    d3fa:	9301      	str	r3, [sp, #4]
        r64 = ui64Val - q64*10;
    d3fc:	e9dd 6700 	ldrd	r6, r7, [sp]
    d400:	19b4      	adds	r4, r6, r6
    d402:	eb47 0507 	adc.w	r5, r7, r7
    d406:	00ab      	lsls	r3, r5, #2
    d408:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
    d40c:	930b      	str	r3, [sp, #44]	; 0x2c
    d40e:	00a3      	lsls	r3, r4, #2
    d410:	930a      	str	r3, [sp, #40]	; 0x28
    d412:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    d416:	1936      	adds	r6, r6, r4
    d418:	416f      	adcs	r7, r5
    d41a:	4634      	mov	r4, r6
    d41c:	1d86      	adds	r6, r0, #6
    d41e:	463d      	mov	r5, r7
    d420:	f141 0700 	adc.w	r7, r1, #0
        return q64 + ((r64 + 6) >> 4);
    d424:	1b36      	subs	r6, r6, r4
    d426:	eb67 0705 	sbc.w	r7, r7, r5
    d42a:	0936      	lsrs	r6, r6, #4
    d42c:	093c      	lsrs	r4, r7, #4
    d42e:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
    d432:	960c      	str	r6, [sp, #48]	; 0x30
    d434:	940d      	str	r4, [sp, #52]	; 0x34
    d436:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
    d43a:	e9dd 6700 	ldrd	r6, r7, [sp]
    d43e:	1936      	adds	r6, r6, r4
    d440:	416f      	adcs	r7, r5
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    d442:	9114      	str	r1, [sp, #80]	; 0x50
        return q64 + ((r64 + 6) >> 4);
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
        q32 = (ui32Val>>1) + (ui32Val>>2);
    d444:	0843      	lsrs	r3, r0, #1
    d446:	eb03 0390 	add.w	r3, r3, r0, lsr #2
        q64 += (q64 >> 8);
        q64 += (q64 >> 16);
        q64 += (q64 >> 32);
        q64 >>= 3;
        r64 = ui64Val - q64*10;
        return q64 + ((r64 + 6) >> 4);
    d44a:	4634      	mov	r4, r6
    d44c:	463d      	mov	r5, r7
    d44e:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
        q32 = (ui32Val>>1) + (ui32Val>>2);
        q32 += (q32 >> 4);
    d452:	eb03 1313 	add.w	r3, r3, r3, lsr #4
        q32 += (q32 >> 8);
    d456:	eb03 2313 	add.w	r3, r3, r3, lsr #8
        q32 += (q32 >> 16);
    d45a:	eb03 4313 	add.w	r3, r3, r3, lsr #16
    d45e:	433e      	orrs	r6, r7
        q32 >>= 3;
    d460:	ea4f 03d3 	mov.w	r3, r3, lsr #3
    d464:	d186      	bne.n	d374 <am_util_stdio_vsprintf+0x360>
        r32 = ui32Val - q32*10;
    d466:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    d46a:	3006      	adds	r0, #6
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    d46c:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
    d470:	9c15      	ldr	r4, [sp, #84]	; 0x54
    d472:	eb03 1310 	add.w	r3, r3, r0, lsr #4
    d476:	4618      	mov	r0, r3
    d478:	4621      	mov	r1, r4
static int
ndigits_in_u64(uint64_t ui64Val)
{
    int iNDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
    d47a:	ea50 0301 	orrs.w	r3, r0, r1
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
        ++iNDigits;
    d47e:	f102 0201 	add.w	r2, r2, #1
static int
ndigits_in_u64(uint64_t ui64Val)
{
    int iNDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
    d482:	d180      	bne.n	d386 <am_util_stdio_vsprintf+0x372>
    d484:	4663      	mov	r3, ip
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    d486:	1a9b      	subs	r3, r3, r2
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    int32_t i32Cnt = 0;

    if ( i32NumChars <= 0 )
    d488:	2b00      	cmp	r3, #0
    d48a:	e9cd ab20 	strd	sl, fp, [sp, #128]	; 0x80
    d48e:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
    d490:	f8dd a094 	ldr.w	sl, [sp, #148]	; 0x94
    d494:	f8dd b090 	ldr.w	fp, [sp, #144]	; 0x90
    d498:	e9cd 8922 	strd	r8, r9, [sp, #136]	; 0x88
    d49c:	4674      	mov	r4, lr
    d49e:	f340 829f 	ble.w	d9e0 <am_util_stdio_vsprintf+0x9cc>
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    d4a2:	3b01      	subs	r3, #1
static int
ndigits_in_u64(uint64_t ui64Val)
{
    int iNDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
    d4a4:	4619      	mov	r1, r3
    d4a6:	4622      	mov	r2, r4
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    d4a8:	3901      	subs	r1, #1
    {
        if ( pcBuf )
    d4aa:	b10a      	cbz	r2, d4b0 <am_util_stdio_vsprintf+0x49c>
        {
            *pcBuf++ = cPadChar;
    d4ac:	7015      	strb	r5, [r2, #0]
    d4ae:	3201      	adds	r2, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    d4b0:	1c4e      	adds	r6, r1, #1
    d4b2:	d1f9      	bne.n	d4a8 <am_util_stdio_vsprintf+0x494>
    d4b4:	3301      	adds	r3, #1
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
                    pcBuf += pcBuf ? iWidth : 0;
    d4b6:	2c00      	cmp	r4, #0
    d4b8:	bf14      	ite	ne
    d4ba:	461a      	movne	r2, r3
    d4bc:	2200      	moveq	r2, #0
                    ui32CharCnt += iWidth;
    d4be:	449a      	add	sl, r3
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
                    pcBuf += pcBuf ? iWidth : 0;
    d4c0:	4414      	add	r4, r2
                    ui32CharCnt += iWidth;
                    iWidth = 0;
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d4c2:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
    d4c6:	4622      	mov	r2, r4
    d4c8:	f7ff fcf0 	bl	ceac <uint64_to_str>

                if ( pcBuf )
    d4cc:	b104      	cbz	r4, d4d0 <am_util_stdio_vsprintf+0x4bc>

                iVal = uint64_to_str(ui64Val, pcBuf);

                if ( pcBuf )
                {
                    pcBuf += iVal;
    d4ce:	4404      	add	r4, r0
                }

                ui32CharCnt += iVal;
    d4d0:	4482      	add	sl, r0
                break;
    d4d2:	e6b4      	b.n	d23e <am_util_stdio_vsprintf+0x22a>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d4d4:	9919      	ldr	r1, [sp, #100]	; 0x64
    d4d6:	460a      	mov	r2, r1
    d4d8:	6808      	ldr	r0, [r1, #0]
                                     va_arg(pArgs, int32_t);
    d4da:	3204      	adds	r2, #4
    d4dc:	9219      	str	r2, [sp, #100]	; 0x64
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d4de:	17c1      	asrs	r1, r0, #31
                                     va_arg(pArgs, int32_t);

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    d4e0:	2800      	cmp	r0, #0
    d4e2:	f171 0200 	sbcs.w	r2, r1, #0
    d4e6:	f2c0 821a 	blt.w	d91e <am_util_stdio_vsprintf+0x90a>
                    ui64Val = -i64Val;          // Get absolute value
                    bNeg = true;
                }
                else
                {
                    ui64Val = i64Val;
    d4ea:	e9cd 011e 	strd	r0, r1, [sp, #120]	; 0x78
                    bNeg = false;
                }

                if ( iWidth )
    d4ee:	2b00      	cmp	r3, #0
    d4f0:	f000 80cd 	beq.w	d68e <am_util_stdio_vsprintf+0x67a>
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    int iNDigits = ui64Val ? 0 : 1;
    d4f4:	4602      	mov	r2, r0
    d4f6:	430a      	orrs	r2, r1
    d4f8:	460f      	mov	r7, r1
    d4fa:	4606      	mov	r6, r0
    d4fc:	bf0c      	ite	eq
    d4fe:	2201      	moveq	r2, #1
    d500:	2200      	movne	r2, #0

    while ( ui64Val )
    d502:	433e      	orrs	r6, r7
        // Get absolute value
        //
        i64Val = -i64Val;
    }

    return ndigits_in_u64((uint64_t) i64Val);
    d504:	4639      	mov	r1, r7
                    bNeg = true;
                }
                else
                {
                    ui64Val = i64Val;
                    bNeg = false;
    d506:	bf18      	it	ne
    d508:	f04f 0c00 	movne.w	ip, #0
static int
ndigits_in_u64(uint64_t ui64Val)
{
    int iNDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
    d50c:	f000 82fe 	beq.w	db0c <am_util_stdio_vsprintf+0xaf8>
                    bNeg = true;
                }
                else
                {
                    ui64Val = i64Val;
                    bNeg = false;
    d510:	f8cd b090 	str.w	fp, [sp, #144]	; 0x90
    d514:	f8cd a094 	str.w	sl, [sp, #148]	; 0x94
    d518:	952a      	str	r5, [sp, #168]	; 0xa8
    d51a:	932b      	str	r3, [sp, #172]	; 0xac
    d51c:	46a6      	mov	lr, r4
    d51e:	e008      	b.n	d532 <am_util_stdio_vsprintf+0x51e>
    d520:	4623      	mov	r3, r4
    d522:	462c      	mov	r4, r5
    d524:	4618      	mov	r0, r3
    d526:	4621      	mov	r1, r4
static int
ndigits_in_u64(uint64_t ui64Val)
{
    int iNDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
    d528:	ea50 0301 	orrs.w	r3, r0, r1
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
        ++iNDigits;
    d52c:	f102 0201 	add.w	r2, r2, #1
static int
ndigits_in_u64(uint64_t ui64Val)
{
    int iNDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
    d530:	d07e      	beq.n	d630 <am_util_stdio_vsprintf+0x61c>
    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    d532:	0883      	lsrs	r3, r0, #2
    d534:	ea43 7381 	orr.w	r3, r3, r1, lsl #30
    d538:	930e      	str	r3, [sp, #56]	; 0x38
    d53a:	088b      	lsrs	r3, r1, #2
    d53c:	930f      	str	r3, [sp, #60]	; 0x3c
    d53e:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
    d542:	084d      	lsrs	r5, r1, #1
    d544:	ea4f 0430 	mov.w	r4, r0, rrx
    d548:	1936      	adds	r6, r6, r4
    d54a:	416f      	adcs	r7, r5
        q64 += (q64 >> 4);
    d54c:	ea4f 1a16 	mov.w	sl, r6, lsr #4
    d550:	ea4a 7a07 	orr.w	sl, sl, r7, lsl #28
    d554:	eb16 040a 	adds.w	r4, r6, sl
    d558:	ea4f 1b17 	mov.w	fp, r7, lsr #4
    d55c:	eb47 050b 	adc.w	r5, r7, fp
        q64 += (q64 >> 8);
    d560:	ea4f 2814 	mov.w	r8, r4, lsr #8
    d564:	ea48 6805 	orr.w	r8, r8, r5, lsl #24
    d568:	eb14 0408 	adds.w	r4, r4, r8
    d56c:	ea4f 2915 	mov.w	r9, r5, lsr #8
    d570:	eb45 0509 	adc.w	r5, r5, r9
        q64 += (q64 >> 16);
    d574:	0c23      	lsrs	r3, r4, #16
    d576:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
    d57a:	9306      	str	r3, [sp, #24]
    d57c:	0c2b      	lsrs	r3, r5, #16
    d57e:	9307      	str	r3, [sp, #28]
    d580:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
    d584:	1936      	adds	r6, r6, r4
    d586:	416f      	adcs	r7, r5
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    d588:	2300      	movs	r3, #0
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
        q64 += (q64 >> 4);
        q64 += (q64 >> 8);
        q64 += (q64 >> 16);
        q64 += (q64 >> 32);
    d58a:	931d      	str	r3, [sp, #116]	; 0x74
    d58c:	971c      	str	r7, [sp, #112]	; 0x70
    if ( ui64Val >> 32 )
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
        q64 += (q64 >> 4);
        q64 += (q64 >> 8);
        q64 += (q64 >> 16);
    d58e:	4634      	mov	r4, r6
    d590:	463d      	mov	r5, r7
        q64 += (q64 >> 32);
    d592:	e9dd 671c 	ldrd	r6, r7, [sp, #112]	; 0x70
    d596:	1936      	adds	r6, r6, r4
    d598:	416f      	adcs	r7, r5
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    d59a:	9317      	str	r3, [sp, #92]	; 0x5c
        q64 = (ui64Val>>1) + (ui64Val>>2);
        q64 += (q64 >> 4);
        q64 += (q64 >> 8);
        q64 += (q64 >> 16);
        q64 += (q64 >> 32);
        q64 >>= 3;
    d59c:	08f3      	lsrs	r3, r6, #3
    d59e:	ea43 7347 	orr.w	r3, r3, r7, lsl #29
    d5a2:	9302      	str	r3, [sp, #8]
    d5a4:	08fb      	lsrs	r3, r7, #3
    d5a6:	9303      	str	r3, [sp, #12]
        r64 = ui64Val - q64*10;
    d5a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    d5ac:	19b4      	adds	r4, r6, r6
    d5ae:	eb47 0507 	adc.w	r5, r7, r7
    d5b2:	00ab      	lsls	r3, r5, #2
    d5b4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
    d5b8:	9311      	str	r3, [sp, #68]	; 0x44
    d5ba:	00a3      	lsls	r3, r4, #2
    d5bc:	9310      	str	r3, [sp, #64]	; 0x40
    d5be:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
    d5c2:	1936      	adds	r6, r6, r4
    d5c4:	416f      	adcs	r7, r5
    d5c6:	4634      	mov	r4, r6
    d5c8:	1d86      	adds	r6, r0, #6
    d5ca:	463d      	mov	r5, r7
    d5cc:	f141 0700 	adc.w	r7, r1, #0
        return q64 + ((r64 + 6) >> 4);
    d5d0:	1b36      	subs	r6, r6, r4
    d5d2:	eb67 0705 	sbc.w	r7, r7, r5
    d5d6:	0936      	lsrs	r6, r6, #4
    d5d8:	093c      	lsrs	r4, r7, #4
    d5da:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
    d5de:	9612      	str	r6, [sp, #72]	; 0x48
    d5e0:	9413      	str	r4, [sp, #76]	; 0x4c
    d5e2:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
    d5e6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    d5ea:	1936      	adds	r6, r6, r4
    d5ec:	416f      	adcs	r7, r5
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    d5ee:	9116      	str	r1, [sp, #88]	; 0x58
        return q64 + ((r64 + 6) >> 4);
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
        q32 = (ui32Val>>1) + (ui32Val>>2);
    d5f0:	0843      	lsrs	r3, r0, #1
    d5f2:	eb03 0390 	add.w	r3, r3, r0, lsr #2
        q64 += (q64 >> 8);
        q64 += (q64 >> 16);
        q64 += (q64 >> 32);
        q64 >>= 3;
        r64 = ui64Val - q64*10;
        return q64 + ((r64 + 6) >> 4);
    d5f6:	4634      	mov	r4, r6
    d5f8:	463d      	mov	r5, r7
    d5fa:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
        q32 = (ui32Val>>1) + (ui32Val>>2);
        q32 += (q32 >> 4);
    d5fe:	eb03 1313 	add.w	r3, r3, r3, lsr #4
        q32 += (q32 >> 8);
    d602:	eb03 2313 	add.w	r3, r3, r3, lsr #8
        q32 += (q32 >> 16);
    d606:	eb03 4313 	add.w	r3, r3, r3, lsr #16
    d60a:	433e      	orrs	r6, r7
        q32 >>= 3;
    d60c:	ea4f 03d3 	mov.w	r3, r3, lsr #3
    d610:	d186      	bne.n	d520 <am_util_stdio_vsprintf+0x50c>
        r32 = ui32Val - q32*10;
    d612:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    d616:	3006      	adds	r0, #6
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    d618:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
    d61c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    d61e:	eb03 1310 	add.w	r3, r3, r0, lsr #4
    d622:	4618      	mov	r0, r3
    d624:	4621      	mov	r1, r4
static int
ndigits_in_u64(uint64_t ui64Val)
{
    int iNDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
    d626:	ea50 0301 	orrs.w	r3, r0, r1
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
        ++iNDigits;
    d62a:	f102 0201 	add.w	r2, r2, #1
static int
ndigits_in_u64(uint64_t ui64Val)
{
    int iNDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
    d62e:	d180      	bne.n	d532 <am_util_stdio_vsprintf+0x51e>
    d630:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    d632:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
    d634:	e9cd ab26 	strd	sl, fp, [sp, #152]	; 0x98
    d638:	e9cd 8928 	strd	r8, r9, [sp, #160]	; 0xa0
    d63c:	f8dd a094 	ldr.w	sl, [sp, #148]	; 0x94
    d640:	f8dd b090 	ldr.w	fp, [sp, #144]	; 0x90
    d644:	4674      	mov	r4, lr
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    d646:	1a9b      	subs	r3, r3, r2

                    if ( bNeg )
    d648:	f1bc 0f00 	cmp.w	ip, #0
    d64c:	f000 817e 	beq.w	d94c <am_util_stdio_vsprintf+0x938>
                        --iWidth;

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    d650:	2d30      	cmp	r5, #48	; 0x30
                    //
                    iWidth -= ndigits_in_i64(ui64Val);

                    if ( bNeg )
                    {
                        --iWidth;
    d652:	f103 33ff 	add.w	r3, r3, #4294967295

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    d656:	f000 8220 	beq.w	da9a <am_util_stdio_vsprintf+0xa86>
    d65a:	f04f 0c01 	mov.w	ip, #1
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    int32_t i32Cnt = 0;

    if ( i32NumChars <= 0 )
    d65e:	2b00      	cmp	r3, #0
    d660:	f340 8192 	ble.w	d988 <am_util_stdio_vsprintf+0x974>
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    d664:	3b01      	subs	r3, #1
                            if ( pcBuf )
                            {
                                *pcBuf++ = '-';
                            }

                            ++ui32CharCnt;
    d666:	4619      	mov	r1, r3
    d668:	4622      	mov	r2, r4
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    d66a:	3901      	subs	r1, #1
    {
        if ( pcBuf )
    d66c:	b10a      	cbz	r2, d672 <am_util_stdio_vsprintf+0x65e>
        {
            *pcBuf++ = cPadChar;
    d66e:	7015      	strb	r5, [r2, #0]
    d670:	3201      	adds	r2, #1
    if ( i32NumChars <= 0 )
    {
        return i32Cnt;
    }

    while ( i32NumChars-- )
    d672:	1c48      	adds	r0, r1, #1
    d674:	d1f9      	bne.n	d66a <am_util_stdio_vsprintf+0x656>
    d676:	3301      	adds	r3, #1
                            ++ui32CharCnt;
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
                    pcBuf += pcBuf ? iWidth : 0;
    d678:	2c00      	cmp	r4, #0
    d67a:	f000 8217 	beq.w	daac <am_util_stdio_vsprintf+0xa98>
    d67e:	441c      	add	r4, r3
                    ui32CharCnt += iWidth;
    d680:	449a      	add	sl, r3
                    iWidth = 0;

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d682:	f1bc 0f00 	cmp.w	ip, #0
    d686:	d002      	beq.n	d68e <am_util_stdio_vsprintf+0x67a>
    d688:	2d20      	cmp	r5, #32
    d68a:	f000 812b 	beq.w	d8e4 <am_util_stdio_vsprintf+0x8d0>
                        }
                        ++ui32CharCnt;
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d68e:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
    d692:	4622      	mov	r2, r4
    d694:	f7ff fc0a 	bl	ceac <uint64_to_str>

                if ( pcBuf )
    d698:	2c00      	cmp	r4, #0
    d69a:	f47f af18 	bne.w	d4ce <am_util_stdio_vsprintf+0x4ba>
                        }
                        ++ui32CharCnt;
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d69e:	2400      	movs	r4, #0
                if ( pcBuf )
                {
                    pcBuf += iVal;
                }

                ui32CharCnt += iVal;
    d6a0:	4482      	add	sl, r0
    d6a2:	e5cc      	b.n	d23e <am_util_stdio_vsprintf+0x22a>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    d6a4:	b10c      	cbz	r4, d6aa <am_util_stdio_vsprintf+0x696>
                {
                    *pcBuf++ = *pcFmt;
    d6a6:	7022      	strb	r2, [r4, #0]
    d6a8:	3401      	adds	r4, #1
                }

                ++ui32CharCnt;
    d6aa:	f10a 0a01 	add.w	sl, sl, #1
                break;
    d6ae:	e5c6      	b.n	d23e <am_util_stdio_vsprintf+0x22a>
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    bool bNeg = false;
    uint32_t ui32Val = 0, uCnt = 0;

    if ( *pcStr == '-')
    d6b0:	f89b 1001 	ldrb.w	r1, [fp, #1]
    d6b4:	292d      	cmp	r1, #45	; 0x2d
        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
        {
            ++pcFmt;
    d6b6:	f10b 0701 	add.w	r7, fp, #1
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    bool bNeg = false;
    uint32_t ui32Val = 0, uCnt = 0;

    if ( *pcStr == '-')
    d6ba:	f000 8122 	beq.w	d902 <am_util_stdio_vsprintf+0x8ee>
        bNeg = true;
        pcStr++;
        uCnt++;
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d6be:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
    d6c2:	2a09      	cmp	r2, #9
    d6c4:	f200 81e6 	bhi.w	da94 <am_util_stdio_vsprintf+0xa80>
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    bool bNeg = false;
    uint32_t ui32Val = 0, uCnt = 0;
    d6c8:	2000      	movs	r0, #0
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    bool bNeg = false;
    d6ca:	4686      	mov	lr, r0
        bNeg = true;
        pcStr++;
        uCnt++;
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d6cc:	46bb      	mov	fp, r7
    bool bNeg = false;
    uint32_t ui32Val = 0, uCnt = 0;

    if ( *pcStr == '-')
    {
        bNeg = true;
    d6ce:	2200      	movs	r2, #0
        ++uCnt;

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    d6d0:	eb02 0282 	add.w	r2, r2, r2, lsl #2

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    d6d4:	eb01 0242 	add.w	r2, r1, r2, lsl #1
        bNeg = true;
        pcStr++;
        uCnt++;
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d6d8:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
    d6dc:	f1a1 0630 	sub.w	r6, r1, #48	; 0x30
    d6e0:	2e09      	cmp	r6, #9
        ui32Val *= 10;

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    d6e2:	f1a2 0230 	sub.w	r2, r2, #48	; 0x30
        uCnt++;
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    {
        ++uCnt;
    d6e6:	f100 0001 	add.w	r0, r0, #1
        bNeg = true;
        pcStr++;
        uCnt++;
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d6ea:	d9f1      	bls.n	d6d0 <am_util_stdio_vsprintf+0x6bc>
    if ( pui32CharCnt )
    {
        *pui32CharCnt = uCnt;
    }

    return bNeg ? -ui32Val : ui32Val;
    d6ec:	f1be 0f00 	cmp.w	lr, #0
    d6f0:	f040 80af 	bne.w	d852 <am_util_stdio_vsprintf+0x83e>
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    bool bNeg = false;
    uint32_t ui32Val = 0, uCnt = 0;
    d6f4:	4616      	mov	r6, r2
        //
        if (*pcFmt == '.')
        {
            ++pcFmt;
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
            pcFmt += ui32NumChars;
    d6f6:	eb07 0b00 	add.w	fp, r7, r0
    d6fa:	5c3a      	ldrb	r2, [r7, r0]
    d6fc:	e4d6      	b.n	d0ac <am_util_stdio_vsprintf+0x98>
    d6fe:	f10d 06b3 	add.w	r6, sp, #179	; 0xb3
    d702:	b1e2      	cbz	r2, d73e <am_util_stdio_vsprintf+0x72a>
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    int iNumDig, ix = 0;
    d704:	2200      	movs	r2, #0
        tbuf[ix++] = '0';   // Print a '0'
    }

    while ( ui64Val )
    {
        cCh = ui64Val & 0xf;
    d706:	f000 030f 	and.w	r3, r0, #15
        //
        // Alpha character
        //
        if ( cCh > 9 )
        {
            cCh += bLower ? 0x27 : 0x7;
    d70a:	f103 0727 	add.w	r7, r3, #39	; 0x27
        }

        tbuf[ix++] = cCh + '0';
        ui64Val >>= 4;
    d70e:	0905      	lsrs	r5, r0, #4
    d710:	2b09      	cmp	r3, #9
    d712:	bf88      	it	hi
    d714:	463b      	movhi	r3, r7
    d716:	ea45 7501 	orr.w	r5, r5, r1, lsl #28
    d71a:	090f      	lsrs	r7, r1, #4
        if ( cCh > 9 )
        {
            cCh += bLower ? 0x27 : 0x7;
        }

        tbuf[ix++] = cCh + '0';
    d71c:	3330      	adds	r3, #48	; 0x30
        ui64Val >>= 4;
    d71e:	4628      	mov	r0, r5
    d720:	4639      	mov	r1, r7
        if ( cCh > 9 )
        {
            cCh += bLower ? 0x27 : 0x7;
        }

        tbuf[ix++] = cCh + '0';
    d722:	f806 3f01 	strb.w	r3, [r6, #1]!
    if ( ui64Val == 0 )
    {
        tbuf[ix++] = '0';   // Print a '0'
    }

    while ( ui64Val )
    d726:	ea50 0301 	orrs.w	r3, r0, r1
        if ( cCh > 9 )
        {
            cCh += bLower ? 0x27 : 0x7;
        }

        tbuf[ix++] = cCh + '0';
    d72a:	f102 0201 	add.w	r2, r2, #1
    if ( ui64Val == 0 )
    {
        tbuf[ix++] = '0';   // Print a '0'
    }

    while ( ui64Val )
    d72e:	d1ea      	bne.n	d706 <am_util_stdio_vsprintf+0x6f2>
    d730:	4616      	mov	r6, r2
    iNumDig = ix;

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    d732:	2c00      	cmp	r4, #0
    d734:	f47f ade9 	bne.w	d30a <am_util_stdio_vsprintf+0x2f6>
    d738:	2400      	movs	r4, #0
                if ( pcBuf )
                {
                    pcBuf += iVal;
                }

                ui32CharCnt += iVal;
    d73a:	44b2      	add	sl, r6
    d73c:	e57f      	b.n	d23e <am_util_stdio_vsprintf+0x22a>
        tbuf[ix++] = '0';   // Print a '0'
    }

    while ( ui64Val )
    {
        cCh = ui64Val & 0xf;
    d73e:	f000 030f 	and.w	r3, r0, #15
        //
        // Alpha character
        //
        if ( cCh > 9 )
        {
            cCh += bLower ? 0x27 : 0x7;
    d742:	1ddf      	adds	r7, r3, #7
        }

        tbuf[ix++] = cCh + '0';
        ui64Val >>= 4;
    d744:	0905      	lsrs	r5, r0, #4
    d746:	2b09      	cmp	r3, #9
    d748:	bf88      	it	hi
    d74a:	463b      	movhi	r3, r7
    d74c:	ea45 7501 	orr.w	r5, r5, r1, lsl #28
    d750:	090f      	lsrs	r7, r1, #4
        if ( cCh > 9 )
        {
            cCh += bLower ? 0x27 : 0x7;
        }

        tbuf[ix++] = cCh + '0';
    d752:	3330      	adds	r3, #48	; 0x30
        ui64Val >>= 4;
    d754:	4628      	mov	r0, r5
    d756:	4639      	mov	r1, r7
        if ( cCh > 9 )
        {
            cCh += bLower ? 0x27 : 0x7;
        }

        tbuf[ix++] = cCh + '0';
    d758:	f806 3f01 	strb.w	r3, [r6, #1]!
    if ( ui64Val == 0 )
    {
        tbuf[ix++] = '0';   // Print a '0'
    }

    while ( ui64Val )
    d75c:	ea50 0301 	orrs.w	r3, r0, r1
        if ( cCh > 9 )
        {
            cCh += bLower ? 0x27 : 0x7;
        }

        tbuf[ix++] = cCh + '0';
    d760:	f102 0201 	add.w	r2, r2, #1
    if ( ui64Val == 0 )
    {
        tbuf[ix++] = '0';   // Print a '0'
    }

    while ( ui64Val )
    d764:	d1eb      	bne.n	d73e <am_util_stdio_vsprintf+0x72a>
    d766:	e7e3      	b.n	d730 <am_util_stdio_vsprintf+0x71c>
                pcFmt++;
                bLongLong = true;
            }
        }

        switch ( *pcFmt )
    d768:	f89b 2002 	ldrb.w	r2, [fp, #2]
    d76c:	f1a2 0146 	sub.w	r1, r2, #70	; 0x46
        if ( *pcFmt == 'l' )
        {
            pcFmt++;
            if ( *pcFmt == 'l' )    // "ll" (long long)
            {
                pcFmt++;
    d770:	f10b 0b02 	add.w	fp, fp, #2
                bLongLong = true;
            }
        }

        switch ( *pcFmt )
    d774:	2932      	cmp	r1, #50	; 0x32
    d776:	d895      	bhi.n	d6a4 <am_util_stdio_vsprintf+0x690>
    d778:	a001      	add	r0, pc, #4	; (adr r0, d780 <am_util_stdio_vsprintf+0x76c>)
    d77a:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    d77e:	bf00      	nop
    d780:	0000d245 	.word	0x0000d245
    d784:	0000d6a5 	.word	0x0000d6a5
    d788:	0000d6a5 	.word	0x0000d6a5
    d78c:	0000d6a5 	.word	0x0000d6a5
    d790:	0000d6a5 	.word	0x0000d6a5
    d794:	0000d6a5 	.word	0x0000d6a5
    d798:	0000d6a5 	.word	0x0000d6a5
    d79c:	0000d6a5 	.word	0x0000d6a5
    d7a0:	0000d6a5 	.word	0x0000d6a5
    d7a4:	0000d6a5 	.word	0x0000d6a5
    d7a8:	0000d6a5 	.word	0x0000d6a5
    d7ac:	0000d6a5 	.word	0x0000d6a5
    d7b0:	0000d6a5 	.word	0x0000d6a5
    d7b4:	0000d6a5 	.word	0x0000d6a5
    d7b8:	0000d6a5 	.word	0x0000d6a5
    d7bc:	0000d6a5 	.word	0x0000d6a5
    d7c0:	0000d6a5 	.word	0x0000d6a5
    d7c4:	0000d6a5 	.word	0x0000d6a5
    d7c8:	0000d9c7 	.word	0x0000d9c7
    d7cc:	0000d6a5 	.word	0x0000d6a5
    d7d0:	0000d6a5 	.word	0x0000d6a5
    d7d4:	0000d6a5 	.word	0x0000d6a5
    d7d8:	0000d6a5 	.word	0x0000d6a5
    d7dc:	0000d6a5 	.word	0x0000d6a5
    d7e0:	0000d6a5 	.word	0x0000d6a5
    d7e4:	0000d6a5 	.word	0x0000d6a5
    d7e8:	0000d6a5 	.word	0x0000d6a5
    d7ec:	0000d6a5 	.word	0x0000d6a5
    d7f0:	0000d6a5 	.word	0x0000d6a5
    d7f4:	0000d22b 	.word	0x0000d22b
    d7f8:	0000d995 	.word	0x0000d995
    d7fc:	0000d6a5 	.word	0x0000d6a5
    d800:	0000d245 	.word	0x0000d245
    d804:	0000d6a5 	.word	0x0000d6a5
    d808:	0000d6a5 	.word	0x0000d6a5
    d80c:	0000d995 	.word	0x0000d995
    d810:	0000d6a5 	.word	0x0000d6a5
    d814:	0000d6a5 	.word	0x0000d6a5
    d818:	0000d6a5 	.word	0x0000d6a5
    d81c:	0000d6a5 	.word	0x0000d6a5
    d820:	0000d6a5 	.word	0x0000d6a5
    d824:	0000d6a5 	.word	0x0000d6a5
    d828:	0000d6a5 	.word	0x0000d6a5
    d82c:	0000d6a5 	.word	0x0000d6a5
    d830:	0000d6a5 	.word	0x0000d6a5
    d834:	0000d14b 	.word	0x0000d14b
    d838:	0000d6a5 	.word	0x0000d6a5
    d83c:	0000d9a9 	.word	0x0000d9a9
    d840:	0000d6a5 	.word	0x0000d6a5
    d844:	0000d6a5 	.word	0x0000d6a5
    d848:	0000d9dd 	.word	0x0000d9dd

                ++ui32CharCnt;
                break;

            case 's':
                pcStr = va_arg(pArgs, char *);
    d84c:	9719      	str	r7, [sp, #100]	; 0x64
    d84e:	46b2      	mov	sl, r6
    d850:	e4f5      	b.n	d23e <am_util_stdio_vsprintf+0x22a>
    d852:	4256      	negs	r6, r2
    d854:	e74f      	b.n	d6f6 <am_util_stdio_vsprintf+0x6e2>

    pcBufInitial = pcBuf;

    unFloatValue.F = fValue;

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    d856:	f3c0 51c7 	ubfx	r1, r0, #23, #8
    d85a:	f1a1 027f 	sub.w	r2, r1, #127	; 0x7f
    d85e:	4603      	mov	r3, r0
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    i32FracPart = 0;
    i32IntPart = 0;

    if (iExp2 >= 31)
    d860:	2a1e      	cmp	r2, #30
    pcBufInitial = pcBuf;

    unFloatValue.F = fValue;

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    d862:	f3c0 0016 	ubfx	r0, r0, #0, #23
    d866:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    i32FracPart = 0;
    i32IntPart = 0;

    if (iExp2 >= 31)
    d86a:	f300 8138 	bgt.w	dade <am_util_stdio_vsprintf+0xaca>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    }
    else if (iExp2 < -23)
    d86e:	f112 0f17 	cmn.w	r2, #23
    d872:	f2c0 812e 	blt.w	dad2 <am_util_stdio_vsprintf+0xabe>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    }
    else if (iExp2 >= 23)
    d876:	2a16      	cmp	r2, #22
    d878:	f300 8088 	bgt.w	d98c <am_util_stdio_vsprintf+0x978>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    }
    else if (iExp2 >= 0)
    d87c:	2a00      	cmp	r2, #0
    d87e:	f2c0 813e 	blt.w	dafe <am_util_stdio_vsprintf+0xaea>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    d882:	f1a1 027e 	sub.w	r2, r1, #126	; 0x7e
    d886:	fa00 f502 	lsl.w	r5, r0, r2
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    }
    else if (iExp2 >= 0)
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    d88a:	f1c1 0196 	rsb	r1, r1, #150	; 0x96
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    d88e:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    }
    else if (iExp2 >= 0)
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    d892:	4108      	asrs	r0, r1
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    }

    if (unFloatValue.I32 < 0)
    d894:	2b00      	cmp	r3, #0
    d896:	f2c0 8117 	blt.w	dac8 <am_util_stdio_vsprintf+0xab4>
    d89a:	46a0      	mov	r8, r4
    {
        *pcBuf++ = '-';
    }

    if (i32IntPart == 0)
    d89c:	2800      	cmp	r0, #0
    d89e:	f040 80d9 	bne.w	da54 <am_util_stdio_vsprintf+0xa40>
    {
        *pcBuf++ = '0';
    d8a2:	2330      	movs	r3, #48	; 0x30
    d8a4:	f888 3000 	strb.w	r3, [r8]
    d8a8:	f108 0701 	add.w	r7, r8, #1
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    d8ac:	232e      	movs	r3, #46	; 0x2e
    d8ae:	703b      	strb	r3, [r7, #0]

    if (i32FracPart == 0)
    d8b0:	2d00      	cmp	r5, #0
    d8b2:	f040 809e 	bne.w	d9f2 <am_util_stdio_vsprintf+0x9de>
    {
        *pcBuf++ = '0';
    d8b6:	2330      	movs	r3, #48	; 0x30
    d8b8:	707b      	strb	r3, [r7, #1]
    d8ba:	1cba      	adds	r2, r7, #2
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    d8bc:	f04f 0300 	mov.w	r3, #0
    d8c0:	7013      	strb	r3, [r2, #0]
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;

                    iVal = ftoa(fValue, pcBuf, iPrecision);
                    if ( iVal < 0 )
    d8c2:	1b13      	subs	r3, r2, r4
    d8c4:	f57f acd7 	bpl.w	d276 <am_util_stdio_vsprintf+0x262>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d8c8:	1c5a      	adds	r2, r3, #1
    d8ca:	f000 8102 	beq.w	dad2 <am_util_stdio_vsprintf+0xabe>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d8ce:	3302      	adds	r3, #2
    d8d0:	f000 8105 	beq.w	dade <am_util_stdio_vsprintf+0xaca>
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d8d4:	4b92      	ldr	r3, [pc, #584]	; (db20 <am_util_stdio_vsprintf+0xb0c>)
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d8d6:	6023      	str	r3, [r4, #0]
    d8d8:	2303      	movs	r3, #3
    d8da:	e4cc      	b.n	d276 <am_util_stdio_vsprintf+0x262>
        bNeg = true;
        pcStr++;
        uCnt++;
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d8dc:	2300      	movs	r3, #0
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    bool bNeg = false;
    uint32_t ui32Val = 0, uCnt = 0;
    d8de:	4618      	mov	r0, r3
    d8e0:	f7ff bbd8 	b.w	d094 <am_util_stdio_vsprintf+0x80>
                }
                else
                {
                    if ( bNeg )
                    {
                        if ( pcBuf )
    d8e4:	b114      	cbz	r4, d8ec <am_util_stdio_vsprintf+0x8d8>
                        {
                            *pcBuf++ = '-';
    d8e6:	232d      	movs	r3, #45	; 0x2d
    d8e8:	7023      	strb	r3, [r4, #0]
    d8ea:	3401      	adds	r4, #1
                        }
                        ++ui32CharCnt;
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d8ec:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
    d8f0:	4622      	mov	r2, r4
                    {
                        if ( pcBuf )
                        {
                            *pcBuf++ = '-';
                        }
                        ++ui32CharCnt;
    d8f2:	f10a 0a01 	add.w	sl, sl, #1
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d8f6:	f7ff fad9 	bl	ceac <uint64_to_str>

                if ( pcBuf )
    d8fa:	2c00      	cmp	r4, #0
    d8fc:	f47f ade7 	bne.w	d4ce <am_util_stdio_vsprintf+0x4ba>
    d900:	e6cd      	b.n	d69e <am_util_stdio_vsprintf+0x68a>
        bNeg = true;
        pcStr++;
        uCnt++;
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d902:	f89b 1002 	ldrb.w	r1, [fp, #2]
    d906:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
    d90a:	2a09      	cmp	r2, #9
    uint32_t ui32Val = 0, uCnt = 0;

    if ( *pcStr == '-')
    {
        bNeg = true;
        pcStr++;
    d90c:	f10b 0b02 	add.w	fp, fp, #2
        uCnt++;
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d910:	f200 80f2 	bhi.w	daf8 <am_util_stdio_vsprintf+0xae4>

    if ( *pcStr == '-')
    {
        bNeg = true;
        pcStr++;
        uCnt++;
    d914:	2001      	movs	r0, #1
    bool bNeg = false;
    uint32_t ui32Val = 0, uCnt = 0;

    if ( *pcStr == '-')
    {
        bNeg = true;
    d916:	4686      	mov	lr, r0
    d918:	e6d9      	b.n	d6ce <am_util_stdio_vsprintf+0x6ba>

                ++ui32CharCnt;
                break;

            case 's':
                pcStr = va_arg(pArgs, char *);
    d91a:	9719      	str	r7, [sp, #100]	; 0x64
    d91c:	e48f      	b.n	d23e <am_util_stdio_vsprintf+0x22a>
                //
                // Get absolute value
                //
                if ( i64Val < 0 )
                {
                    ui64Val = -i64Val;          // Get absolute value
    d91e:	4240      	negs	r0, r0
    d920:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    d924:	e9cd 011e 	strd	r0, r1, [sp, #120]	; 0x78
                {
                    ui64Val = i64Val;
                    bNeg = false;
                }

                if ( iWidth )
    d928:	2b00      	cmp	r3, #0
    d92a:	d0db      	beq.n	d8e4 <am_util_stdio_vsprintf+0x8d0>
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    int iNDigits = ui64Val ? 0 : 1;
    d92c:	4602      	mov	r2, r0
    d92e:	430a      	orrs	r2, r1
    d930:	460f      	mov	r7, r1
    d932:	4606      	mov	r6, r0
    d934:	bf0c      	ite	eq
    d936:	2201      	moveq	r2, #1
    d938:	2200      	movne	r2, #0

    while ( ui64Val )
    d93a:	433e      	orrs	r6, r7
        // Get absolute value
        //
        i64Val = -i64Val;
    }

    return ndigits_in_u64((uint64_t) i64Val);
    d93c:	4639      	mov	r1, r7
                // Get absolute value
                //
                if ( i64Val < 0 )
                {
                    ui64Val = -i64Val;          // Get absolute value
                    bNeg = true;
    d93e:	bf18      	it	ne
    d940:	f04f 0c01 	movne.w	ip, #1
static int
ndigits_in_u64(uint64_t ui64Val)
{
    int iNDigits = ui64Val ? 0 : 1;

    while ( ui64Val )
    d944:	f47f ade4 	bne.w	d510 <am_util_stdio_vsprintf+0x4fc>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    d948:	1a9b      	subs	r3, r3, r2
    d94a:	e681      	b.n	d650 <am_util_stdio_vsprintf+0x63c>
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    int32_t i32Cnt = 0;

    if ( i32NumChars <= 0 )
    d94c:	2b00      	cmp	r3, #0
    d94e:	f73f ae89 	bgt.w	d664 <am_util_stdio_vsprintf+0x650>
                            ++ui32CharCnt;
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
                    pcBuf += pcBuf ? iWidth : 0;
    d952:	2c00      	cmp	r4, #0
    d954:	f000 80de 	beq.w	db14 <am_util_stdio_vsprintf+0xb00>
                        }
                        ++ui32CharCnt;
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d958:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
    d95c:	4672      	mov	r2, lr
    d95e:	f7ff faa5 	bl	ceac <uint64_to_str>

                if ( pcBuf )
                {
                    pcBuf += iVal;
    d962:	4404      	add	r4, r0
    d964:	e5b4      	b.n	d4d0 <am_util_stdio_vsprintf+0x4bc>
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    int32_t i32Cnt = 0;

    if ( i32NumChars <= 0 )
    d966:	2300      	movs	r3, #0
    d968:	e4bd      	b.n	d2e6 <am_util_stdio_vsprintf+0x2d2>
        bNeg = true;
        pcStr++;
        uCnt++;
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d96a:	46b3      	mov	fp, r6
    d96c:	2300      	movs	r3, #0
    d96e:	f7ff bb94 	b.w	d09a <am_util_stdio_vsprintf+0x86>
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
                if ( iWidth > 0 )
    d972:	2b00      	cmp	r3, #0
    d974:	dd02      	ble.n	d97c <am_util_stdio_vsprintf+0x968>
simple_strlen(char *pcBuf)
{
    uint32_t ui32RetVal = 0;
    if ( !pcBuf )
    {
        return ui32RetVal;
    d976:	4684      	mov	ip, r0
    d978:	f7ff bbff 	b.w	d17a <am_util_stdio_vsprintf+0x166>
                        ui32CharCnt += iWidth;
                        iWidth = 0;
                    }
                }

                while (*pcStr != 0x0)
    d97c:	7801      	ldrb	r1, [r0, #0]
    d97e:	2900      	cmp	r1, #0
    d980:	d030      	beq.n	d9e4 <am_util_stdio_vsprintf+0x9d0>
simple_strlen(char *pcBuf)
{
    uint32_t ui32RetVal = 0;
    if ( !pcBuf )
    {
        return ui32RetVal;
    d982:	4684      	mov	ip, r0
    d984:	2201      	movs	r2, #1
    d986:	e410      	b.n	d1aa <am_util_stdio_vsprintf+0x196>
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    int32_t i32Cnt = 0;

    if ( i32NumChars <= 0 )
    d988:	2300      	movs	r3, #0
    d98a:	e675      	b.n	d678 <am_util_stdio_vsprintf+0x664>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    }
    else if (iExp2 >= 23)
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    d98c:	3996      	subs	r1, #150	; 0x96
    d98e:	4088      	lsls	r0, r1

    unFloatValue.F = fValue;

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    i32FracPart = 0;
    d990:	2500      	movs	r5, #0
    d992:	e77f      	b.n	d894 <am_util_stdio_vsprintf+0x880>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d994:	9a19      	ldr	r2, [sp, #100]	; 0x64
    d996:	3207      	adds	r2, #7
    d998:	f022 0207 	bic.w	r2, r2, #7
    d99c:	f102 0108 	add.w	r1, r2, #8
    d9a0:	9119      	str	r1, [sp, #100]	; 0x64
    d9a2:	e9d2 0100 	ldrd	r0, r1, [r2]
    d9a6:	e59b      	b.n	d4e0 <am_util_stdio_vsprintf+0x4cc>

                ui32CharCnt += iVal;
                break;

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d9a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
    d9aa:	3207      	adds	r2, #7
    d9ac:	f022 0207 	bic.w	r2, r2, #7
    d9b0:	f102 0108 	add.w	r1, r2, #8
    d9b4:	9119      	str	r1, [sp, #100]	; 0x64
    d9b6:	e9d2 0100 	ldrd	r0, r1, [r2]
    d9ba:	e9cd 011e 	strd	r0, r1, [sp, #120]	; 0x78
                                      va_arg(pArgs, uint32_t);

                if ( iWidth )
    d9be:	2b00      	cmp	r3, #0
    d9c0:	f43f ad7f 	beq.w	d4c2 <am_util_stdio_vsprintf+0x4ae>
    d9c4:	e4bd      	b.n	d342 <am_util_stdio_vsprintf+0x32e>

        //
        // Handle the specifier.
        //
        ++pcFmt;
        bLower = bLongLong = false;
    d9c6:	2200      	movs	r2, #0
                break;

            case 'x':
                bLower = true;
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d9c8:	9919      	ldr	r1, [sp, #100]	; 0x64
    d9ca:	3107      	adds	r1, #7
    d9cc:	f021 0107 	bic.w	r1, r1, #7
    d9d0:	f101 0008 	add.w	r0, r1, #8
    d9d4:	9019      	str	r0, [sp, #100]	; 0x64
    d9d6:	e9d1 0100 	ldrd	r0, r1, [r1]
    d9da:	e456      	b.n	d28a <am_util_stdio_vsprintf+0x276>
                pcFmt++;
                bLongLong = true;
            }
        }

        switch ( *pcFmt )
    d9dc:	2201      	movs	r2, #1
    d9de:	e7f3      	b.n	d9c8 <am_util_stdio_vsprintf+0x9b4>
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    int32_t i32Cnt = 0;

    if ( i32NumChars <= 0 )
    d9e0:	2300      	movs	r3, #0
    d9e2:	e568      	b.n	d4b6 <am_util_stdio_vsprintf+0x4a2>
                        ui32CharCnt += iWidth;
                        iWidth = 0;
                    }
                }

                while (*pcStr != 0x0)
    d9e4:	4656      	mov	r6, sl
simple_strlen(char *pcBuf)
{
    uint32_t ui32RetVal = 0;
    if ( !pcBuf )
    {
        return ui32RetVal;
    d9e6:	468c      	mov	ip, r1

                    ++pcStr;
                    ++ui32CharCnt;
                }

                if ( iWidth )
    d9e8:	2b00      	cmp	r3, #0
    d9ea:	f43f af2f 	beq.w	d84c <am_util_stdio_vsprintf+0x838>
    d9ee:	f7ff bbe9 	b.w	d1c4 <am_util_stdio_vsprintf+0x1b0>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    d9f2:	1c7a      	adds	r2, r7, #1
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    d9f4:	1aa3      	subs	r3, r4, r2
    d9f6:	3313      	adds	r3, #19
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    d9f8:	429e      	cmp	r6, r3
    d9fa:	bfa8      	it	ge
    d9fc:	461e      	movge	r6, r3

        for (jx = 0; jx < iMax; jx++)
    d9fe:	2e00      	cmp	r6, #0
    da00:	dd0c      	ble.n	da1c <am_util_stdio_vsprintf+0xa08>
    da02:	19bb      	adds	r3, r7, r6
        {
            i32FracPart *= 10;
    da04:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    da08:	006d      	lsls	r5, r5, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    da0a:	1629      	asrs	r1, r5, #24
    da0c:	3130      	adds	r1, #48	; 0x30
    da0e:	f807 1f01 	strb.w	r1, [r7, #1]!
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
        iMax = (iMax > iPrecision) ? iPrecision : iMax;

        for (jx = 0; jx < iMax; jx++)
    da12:	429f      	cmp	r7, r3
        {
            i32FracPart *= 10;
            *pcBuf++ = (i32FracPart >> 24) + '0';
            i32FracPart &= 0x00FFFFFF;
    da14:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
        iMax = (iMax > iPrecision) ? iPrecision : iMax;

        for (jx = 0; jx < iMax; jx++)
    da18:	d1f4      	bne.n	da04 <am_util_stdio_vsprintf+0x9f0>
    da1a:	4432      	add	r2, r6
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    da1c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    da20:	f345 53c7 	sbfx	r3, r5, #23, #8
    da24:	2b04      	cmp	r3, #4
    da26:	f77f af49 	ble.w	d8bc <am_util_stdio_vsprintf+0x8a8>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    da2a:	1e53      	subs	r3, r2, #1
            while ( pcBuftmp >= pcBufInitial )
    da2c:	429c      	cmp	r4, r3
    da2e:	f63f af45 	bhi.w	d8bc <am_util_stdio_vsprintf+0x8a8>
    da32:	1e65      	subs	r5, r4, #1
                if ( *pcBuftmp == '.' )
                {
                }
                else if ( *pcBuftmp == '9' )
                {
                    *pcBuftmp = '0';
    da34:	2630      	movs	r6, #48	; 0x30
    da36:	e003      	b.n	da40 <am_util_stdio_vsprintf+0xa2c>
    da38:	705e      	strb	r6, [r3, #1]
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
            while ( pcBuftmp >= pcBufInitial )
    da3a:	42ab      	cmp	r3, r5
    da3c:	f43f af3e 	beq.w	d8bc <am_util_stdio_vsprintf+0x8a8>
    da40:	4618      	mov	r0, r3
            {
                if ( *pcBuftmp == '.' )
    da42:	f813 1901 	ldrb.w	r1, [r3], #-1
    da46:	292e      	cmp	r1, #46	; 0x2e
    da48:	d0f7      	beq.n	da3a <am_util_stdio_vsprintf+0xa26>
                {
                }
                else if ( *pcBuftmp == '9' )
    da4a:	2939      	cmp	r1, #57	; 0x39
    da4c:	d0f4      	beq.n	da38 <am_util_stdio_vsprintf+0xa24>
                {
                    *pcBuftmp = '0';
                }
                else
                {
                    *pcBuftmp += 1;
    da4e:	3101      	adds	r1, #1
    da50:	7001      	strb	r1, [r0, #0]
    da52:	e733      	b.n	d8bc <am_util_stdio_vsprintf+0x8a8>
    {
        *pcBuf++ = '0';
    }
    else
    {
        if (i32IntPart > 0)
    da54:	dd45      	ble.n	dae2 <am_util_stdio_vsprintf+0xace>
        {
            uint64_to_str(i32IntPart, pcBuf);
    da56:	17c1      	asrs	r1, r0, #31
    da58:	4642      	mov	r2, r8
    da5a:	f7ff fa27 	bl	ceac <uint64_to_str>
    da5e:	4647      	mov	r7, r8
        else
        {
            *pcBuf++ = '-';
            uint64_to_str(-i32IntPart, pcBuf);
        }
        while (*pcBuf)    // Get to end of new string
    da60:	783b      	ldrb	r3, [r7, #0]
    da62:	2b00      	cmp	r3, #0
    da64:	f43f af22 	beq.w	d8ac <am_util_stdio_vsprintf+0x898>
    da68:	f817 3f01 	ldrb.w	r3, [r7, #1]!
    da6c:	2b00      	cmp	r3, #0
    da6e:	d1fb      	bne.n	da68 <am_util_stdio_vsprintf+0xa54>
    da70:	e71c      	b.n	d8ac <am_util_stdio_vsprintf+0x898>
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    int32_t i32Cnt = 0;

    if ( i32NumChars <= 0 )
    da72:	2300      	movs	r3, #0
    da74:	f7ff bb8e 	b.w	d194 <am_util_stdio_vsprintf+0x180>
    da78:	ebb3 030c 	subs.w	r3, r3, ip
    da7c:	f47f ac28 	bne.w	d2d0 <am_util_stdio_vsprintf+0x2bc>
    da80:	e431      	b.n	d2e6 <am_util_stdio_vsprintf+0x2d2>
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
                if ( iWidth > 0 )
    da82:	2b00      	cmp	r3, #0
    da84:	ddae      	ble.n	d9e4 <am_util_stdio_vsprintf+0x9d0>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    da86:	468c      	mov	ip, r1
    da88:	f7ff bb77 	b.w	d17a <am_util_stdio_vsprintf+0x166>
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    int32_t i32Cnt = 0;

    if ( i32NumChars <= 0 )
    da8c:	f04f 0c00 	mov.w	ip, #0
    da90:	f7ff bbac 	b.w	d1ec <am_util_stdio_vsprintf+0x1d8>
        bNeg = true;
        pcStr++;
        uCnt++;
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    da94:	2200      	movs	r2, #0
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    bool bNeg = false;
    uint32_t ui32Val = 0, uCnt = 0;
    da96:	4610      	mov	r0, r2
    da98:	e62c      	b.n	d6f4 <am_util_stdio_vsprintf+0x6e0>
                        if ( ui8PadChar == '0' )
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    da9a:	b114      	cbz	r4, daa2 <am_util_stdio_vsprintf+0xa8e>
                            {
                                *pcBuf++ = '-';
    da9c:	222d      	movs	r2, #45	; 0x2d
    da9e:	7022      	strb	r2, [r4, #0]
    daa0:	3401      	adds	r4, #1
                            }

                            ++ui32CharCnt;
    daa2:	f10a 0a01 	add.w	sl, sl, #1
    daa6:	f04f 0c01 	mov.w	ip, #1
    daaa:	e5d8      	b.n	d65e <am_util_stdio_vsprintf+0x64a>
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
                    pcBuf += pcBuf ? iWidth : 0;
                    ui32CharCnt += iWidth;
    daac:	449a      	add	sl, r3
                    iWidth = 0;

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    daae:	f1bc 0f00 	cmp.w	ip, #0
    dab2:	d02f      	beq.n	db14 <am_util_stdio_vsprintf+0xb00>
    dab4:	2d20      	cmp	r5, #32
    dab6:	f43f af19 	beq.w	d8ec <am_util_stdio_vsprintf+0x8d8>
                        }
                        ++ui32CharCnt;
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    daba:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
    dabe:	4622      	mov	r2, r4
    dac0:	f7ff f9f4 	bl	ceac <uint64_to_str>
    dac4:	e5eb      	b.n	d69e <am_util_stdio_vsprintf+0x68a>
    unFloatValue.F = fValue;

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    i32FracPart = 0;
    i32IntPart = 0;
    dac6:	2000      	movs	r0, #0
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    }

    if (unFloatValue.I32 < 0)
    {
        *pcBuf++ = '-';
    dac8:	232d      	movs	r3, #45	; 0x2d
    daca:	7023      	strb	r3, [r4, #0]
    dacc:	f104 0801 	add.w	r8, r4, #1
    dad0:	e6e4      	b.n	d89c <am_util_stdio_vsprintf+0x888>
                    if ( iVal < 0 )
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    dad2:	4b14      	ldr	r3, [pc, #80]	; (db24 <am_util_stdio_vsprintf+0xb10>)
    dad4:	e6ff      	b.n	d8d6 <am_util_stdio_vsprintf+0x8c2>
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    int32_t i32Cnt = 0;

    if ( i32NumChars <= 0 )
    dad6:	1a9b      	subs	r3, r3, r2
    dad8:	f47f ace3 	bne.w	d4a2 <am_util_stdio_vsprintf+0x48e>
    dadc:	e4eb      	b.n	d4b6 <am_util_stdio_vsprintf+0x4a2>
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    dade:	4b12      	ldr	r3, [pc, #72]	; (db28 <am_util_stdio_vsprintf+0xb14>)
    dae0:	e6f9      	b.n	d8d6 <am_util_stdio_vsprintf+0x8c2>
        {
            uint64_to_str(i32IntPart, pcBuf);
        }
        else
        {
            *pcBuf++ = '-';
    dae2:	f108 0701 	add.w	r7, r8, #1
    dae6:	232d      	movs	r3, #45	; 0x2d
            uint64_to_str(-i32IntPart, pcBuf);
    dae8:	4240      	negs	r0, r0
    daea:	17c1      	asrs	r1, r0, #31
    daec:	463a      	mov	r2, r7
        {
            uint64_to_str(i32IntPart, pcBuf);
        }
        else
        {
            *pcBuf++ = '-';
    daee:	f888 3000 	strb.w	r3, [r8]
            uint64_to_str(-i32IntPart, pcBuf);
    daf2:	f7ff f9db 	bl	ceac <uint64_to_str>
    daf6:	e7b3      	b.n	da60 <am_util_stdio_vsprintf+0xa4c>
        bNeg = true;
        pcStr++;
        uCnt++;
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    daf8:	2600      	movs	r6, #0

    if ( *pcStr == '-')
    {
        bNeg = true;
        pcStr++;
        uCnt++;
    dafa:	2001      	movs	r0, #1
    dafc:	e5fb      	b.n	d6f6 <am_util_stdio_vsprintf+0x6e2>
        i32IntPart = i32Significand >> (23 - iExp2);
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    dafe:	43d2      	mvns	r2, r2
    }

    if (unFloatValue.I32 < 0)
    db00:	2b00      	cmp	r3, #0
        i32IntPart = i32Significand >> (23 - iExp2);
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    db02:	fa40 f502 	asr.w	r5, r0, r2
    }

    if (unFloatValue.I32 < 0)
    db06:	dbde      	blt.n	dac6 <am_util_stdio_vsprintf+0xab2>
    db08:	46a0      	mov	r8, r4
    db0a:	e6ca      	b.n	d8a2 <am_util_stdio_vsprintf+0x88e>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    db0c:	1a9b      	subs	r3, r3, r2
                    bNeg = true;
                }
                else
                {
                    ui64Val = i64Val;
                    bNeg = false;
    db0e:	f04f 0c00 	mov.w	ip, #0
    db12:	e5a4      	b.n	d65e <am_util_stdio_vsprintf+0x64a>
                        }
                        ++ui32CharCnt;
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    db14:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
    db18:	2200      	movs	r2, #0
    db1a:	f7ff f9c7 	bl	ceac <uint64_to_str>
    db1e:	e5be      	b.n	d69e <am_util_stdio_vsprintf+0x68a>
    db20:	003f2e3f 	.word	0x003f2e3f
    db24:	00302e30 	.word	0x00302e30
    db28:	00232e23 	.word	0x00232e23

0000db2c <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    db2c:	b40f      	push	{r0, r1, r2, r3}
    db2e:	b530      	push	{r4, r5, lr}
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    db30:	4d0a      	ldr	r5, [pc, #40]	; (db5c <am_util_stdio_printf+0x30>)
    db32:	6828      	ldr	r0, [r5, #0]
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    db34:	b083      	sub	sp, #12
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    db36:	b158      	cbz	r0, db50 <am_util_stdio_printf+0x24>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    db38:	ab07      	add	r3, sp, #28
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    db3a:	461a      	mov	r2, r3
    db3c:	9906      	ldr	r1, [sp, #24]
    db3e:	4808      	ldr	r0, [pc, #32]	; (db60 <am_util_stdio_printf+0x34>)

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    db40:	9301      	str	r3, [sp, #4]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    db42:	f7ff fa67 	bl	d014 <am_util_stdio_vsprintf>
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    db46:	682b      	ldr	r3, [r5, #0]
    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    db48:	4604      	mov	r4, r0
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    db4a:	4805      	ldr	r0, [pc, #20]	; (db60 <am_util_stdio_printf+0x34>)
    db4c:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    db4e:	4620      	mov	r0, r4
}
    db50:	b003      	add	sp, #12
    db52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    db56:	b004      	add	sp, #16
    db58:	4770      	bx	lr
    db5a:	bf00      	nop
    db5c:	1001d56c 	.word	0x1001d56c
    db60:	10001458 	.word	0x10001458

0000db64 <am_util_stdio_terminal_clear>:
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    db64:	4801      	ldr	r0, [pc, #4]	; (db6c <am_util_stdio_terminal_clear+0x8>)
    db66:	f7ff bfe1 	b.w	db2c <am_util_stdio_printf>
    db6a:	bf00      	nop
    db6c:	0000f894 	.word	0x0000f894

0000db70 <NMI_Handler>:
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
    db70:	e7fe      	b.n	db70 <NMI_Handler>
    db72:	bf00      	nop

0000db74 <DebugMon_Handler>:
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
    db74:	e7fe      	b.n	db74 <DebugMon_Handler>
    db76:	bf00      	nop

0000db78 <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    db78:	4811      	ldr	r0, [pc, #68]	; (dbc0 <zero_loop+0x12>)
    db7a:	4912      	ldr	r1, [pc, #72]	; (dbc4 <zero_loop+0x16>)
    db7c:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    db7e:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    db82:	4811      	ldr	r0, [pc, #68]	; (dbc8 <zero_loop+0x1a>)
    db84:	6801      	ldr	r1, [r0, #0]
    db86:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    db8a:	6001      	str	r1, [r0, #0]
    db8c:	f3bf 8f4f 	dsb	sy
    db90:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    db94:	480d      	ldr	r0, [pc, #52]	; (dbcc <zero_loop+0x1e>)
    db96:	490e      	ldr	r1, [pc, #56]	; (dbd0 <zero_loop+0x22>)
    db98:	4a0e      	ldr	r2, [pc, #56]	; (dbd4 <zero_loop+0x26>)

0000db9a <copy_loop>:
    db9a:	f850 3b04 	ldr.w	r3, [r0], #4
    db9e:	f841 3b04 	str.w	r3, [r1], #4
    dba2:	4291      	cmp	r1, r2
    dba4:	dbf9      	blt.n	db9a <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    dba6:	480c      	ldr	r0, [pc, #48]	; (dbd8 <zero_loop+0x2a>)
    dba8:	490c      	ldr	r1, [pc, #48]	; (dbdc <zero_loop+0x2e>)
    dbaa:	f04f 0200 	mov.w	r2, #0

0000dbae <zero_loop>:
    dbae:	4288      	cmp	r0, r1
    dbb0:	bfb8      	it	lt
    dbb2:	f840 2b04 	strlt.w	r2, [r0], #4
    dbb6:	dbfa      	blt.n	dbae <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    dbb8:	f7fe ff8e 	bl	cad8 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    dbbc:	be00      	bkpt	0x0000
    dbbe:	0000      	.short	0x0000
    dbc0:	e000ed08 	.word	0xe000ed08
    dbc4:	0000c000 	.word	0x0000c000
    dbc8:	e000ed88 	.word	0xe000ed88
    dbcc:	00018358 	.word	0x00018358
    dbd0:	10001000 	.word	0x10001000
    dbd4:	10001454 	.word	0x10001454
    dbd8:	10001454 	.word	0x10001454
    dbdc:	1001d57c 	.word	0x1001d57c

0000dbe0 <am_hal_cachectrl_config>:
    dbe0:	b530      	push	{r4, r5, lr}
    dbe2:	b083      	sub	sp, #12
    dbe4:	4605      	mov	r5, r0
    dbe6:	f000 fa0b 	bl	e000 <am_hal_interrupt_master_disable>
    dbea:	4c0f      	ldr	r4, [pc, #60]	; (dc28 <am_hal_cachectrl_config+0x48>)
    dbec:	9001      	str	r0, [sp, #4]
    dbee:	6823      	ldr	r3, [r4, #0]
    dbf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    dbf4:	6023      	str	r3, [r4, #0]
    dbf6:	9801      	ldr	r0, [sp, #4]
    dbf8:	f000 fa06 	bl	e008 <am_hal_interrupt_master_set>
    dbfc:	78ab      	ldrb	r3, [r5, #2]
    dbfe:	782a      	ldrb	r2, [r5, #0]
    dc00:	7869      	ldrb	r1, [r5, #1]
    dc02:	005b      	lsls	r3, r3, #1
    dc04:	0112      	lsls	r2, r2, #4
    dc06:	b2d2      	uxtb	r2, r2
    dc08:	f003 0302 	and.w	r3, r3, #2
    dc0c:	4313      	orrs	r3, r2
    dc0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    dc12:	020a      	lsls	r2, r1, #8
    dc14:	f402 7240 	and.w	r2, r2, #768	; 0x300
    dc18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    dc1c:	4313      	orrs	r3, r2
    dc1e:	2000      	movs	r0, #0
    dc20:	6023      	str	r3, [r4, #0]
    dc22:	b003      	add	sp, #12
    dc24:	bd30      	pop	{r4, r5, pc}
    dc26:	bf00      	nop
    dc28:	40018000 	.word	0x40018000

0000dc2c <am_hal_cachectrl_enable>:
    dc2c:	4a03      	ldr	r2, [pc, #12]	; (dc3c <am_hal_cachectrl_enable+0x10>)
    dc2e:	6813      	ldr	r3, [r2, #0]
    dc30:	f043 0301 	orr.w	r3, r3, #1
    dc34:	6013      	str	r3, [r2, #0]
    dc36:	2000      	movs	r0, #0
    dc38:	4770      	bx	lr
    dc3a:	bf00      	nop
    dc3c:	40018000 	.word	0x40018000

0000dc40 <am_hal_clkgen_control>:
    dc40:	4b32      	ldr	r3, [pc, #200]	; (dd0c <am_hal_clkgen_control+0xcc>)
    dc42:	681a      	ldr	r2, [r3, #0]
    dc44:	b912      	cbnz	r2, dc4c <am_hal_clkgen_control+0xc>
    dc46:	4a32      	ldr	r2, [pc, #200]	; (dd10 <am_hal_clkgen_control+0xd0>)
    dc48:	6812      	ldr	r2, [r2, #0]
    dc4a:	601a      	str	r2, [r3, #0]
    dc4c:	2809      	cmp	r0, #9
    dc4e:	d85a      	bhi.n	dd06 <am_hal_clkgen_control+0xc6>
    dc50:	e8df f000 	tbb	[pc, r0]
    dc54:	261e160d 	.word	0x261e160d
    dc58:	4640362e 	.word	0x4640362e
    dc5c:	054e      	.short	0x054e
    dc5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dc62:	2000      	movs	r0, #0
    dc64:	6a1a      	ldr	r2, [r3, #32]
    dc66:	f36f 0200 	bfc	r2, #0, #1
    dc6a:	621a      	str	r2, [r3, #32]
    dc6c:	4770      	bx	lr
    dc6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dc72:	2200      	movs	r2, #0
    dc74:	2147      	movs	r1, #71	; 0x47
    dc76:	6159      	str	r1, [r3, #20]
    dc78:	4610      	mov	r0, r2
    dc7a:	619a      	str	r2, [r3, #24]
    dc7c:	615a      	str	r2, [r3, #20]
    dc7e:	4770      	bx	lr
    dc80:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    dc84:	2000      	movs	r0, #0
    dc86:	68d3      	ldr	r3, [r2, #12]
    dc88:	f023 0301 	bic.w	r3, r3, #1
    dc8c:	60d3      	str	r3, [r2, #12]
    dc8e:	4770      	bx	lr
    dc90:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    dc94:	2000      	movs	r0, #0
    dc96:	68d3      	ldr	r3, [r2, #12]
    dc98:	f023 0302 	bic.w	r3, r3, #2
    dc9c:	60d3      	str	r3, [r2, #12]
    dc9e:	4770      	bx	lr
    dca0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    dca4:	2000      	movs	r0, #0
    dca6:	68d3      	ldr	r3, [r2, #12]
    dca8:	f043 0301 	orr.w	r3, r3, #1
    dcac:	60d3      	str	r3, [r2, #12]
    dcae:	4770      	bx	lr
    dcb0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    dcb4:	2000      	movs	r0, #0
    dcb6:	68d3      	ldr	r3, [r2, #12]
    dcb8:	f043 0302 	orr.w	r3, r3, #2
    dcbc:	60d3      	str	r3, [r2, #12]
    dcbe:	4770      	bx	lr
    dcc0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dcc4:	2200      	movs	r2, #0
    dcc6:	2047      	movs	r0, #71	; 0x47
    dcc8:	2101      	movs	r1, #1
    dcca:	6158      	str	r0, [r3, #20]
    dccc:	6199      	str	r1, [r3, #24]
    dcce:	4610      	mov	r0, r2
    dcd0:	615a      	str	r2, [r3, #20]
    dcd2:	4770      	bx	lr
    dcd4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dcd8:	2000      	movs	r0, #0
    dcda:	68da      	ldr	r2, [r3, #12]
    dcdc:	60da      	str	r2, [r3, #12]
    dcde:	4770      	bx	lr
    dce0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    dce4:	2000      	movs	r0, #0
    dce6:	68d3      	ldr	r3, [r2, #12]
    dce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    dcec:	60d3      	str	r3, [r2, #12]
    dcee:	4770      	bx	lr
    dcf0:	b139      	cbz	r1, dd02 <am_hal_clkgen_control+0xc2>
    dcf2:	680b      	ldr	r3, [r1, #0]
    dcf4:	f043 0301 	orr.w	r3, r3, #1
    dcf8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    dcfc:	2000      	movs	r0, #0
    dcfe:	6213      	str	r3, [r2, #32]
    dd00:	4770      	bx	lr
    dd02:	4b04      	ldr	r3, [pc, #16]	; (dd14 <am_hal_clkgen_control+0xd4>)
    dd04:	e7f8      	b.n	dcf8 <am_hal_clkgen_control+0xb8>
    dd06:	2006      	movs	r0, #6
    dd08:	4770      	bx	lr
    dd0a:	bf00      	nop
    dd0c:	10001558 	.word	0x10001558
    dd10:	4ffff000 	.word	0x4ffff000
    dd14:	0025b801 	.word	0x0025b801

0000dd18 <am_hal_clkgen_status_get>:
    dd18:	b1a8      	cbz	r0, dd46 <am_hal_clkgen_status_get+0x2e>
    dd1a:	b410      	push	{r4}
    dd1c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    dd20:	490a      	ldr	r1, [pc, #40]	; (dd4c <am_hal_clkgen_status_get+0x34>)
    dd22:	6994      	ldr	r4, [r2, #24]
    dd24:	4b0a      	ldr	r3, [pc, #40]	; (dd50 <am_hal_clkgen_status_get+0x38>)
    dd26:	f014 0f01 	tst.w	r4, #1
    dd2a:	bf08      	it	eq
    dd2c:	460b      	moveq	r3, r1
    dd2e:	6003      	str	r3, [r0, #0]
    dd30:	69d3      	ldr	r3, [r2, #28]
    dd32:	f85d 4b04 	ldr.w	r4, [sp], #4
    dd36:	f003 0201 	and.w	r2, r3, #1
    dd3a:	f3c3 0340 	ubfx	r3, r3, #1, #1
    dd3e:	6042      	str	r2, [r0, #4]
    dd40:	7203      	strb	r3, [r0, #8]
    dd42:	2000      	movs	r0, #0
    dd44:	4770      	bx	lr
    dd46:	2006      	movs	r0, #6
    dd48:	4770      	bx	lr
    dd4a:	bf00      	nop
    dd4c:	02dc6c00 	.word	0x02dc6c00
    dd50:	016e3600 	.word	0x016e3600

0000dd54 <am_hal_flash_delay>:
    dd54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dd58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    dd5a:	075b      	lsls	r3, r3, #29
    dd5c:	bf46      	itte	mi
    dd5e:	0040      	lslmi	r0, r0, #1
    dd60:	230e      	movmi	r3, #14
    dd62:	230b      	movpl	r3, #11
    dd64:	4298      	cmp	r0, r3
    dd66:	d800      	bhi.n	dd6a <am_hal_flash_delay+0x16>
    dd68:	4770      	bx	lr
    dd6a:	1ac0      	subs	r0, r0, r3
    dd6c:	4b00      	ldr	r3, [pc, #0]	; (dd70 <am_hal_flash_delay+0x1c>)
    dd6e:	4718      	bx	r3
    dd70:	0800009d 	.word	0x0800009d

0000dd74 <am_hal_gpio_pinconfig>:
    dd74:	2831      	cmp	r0, #49	; 0x31
    dd76:	d901      	bls.n	dd7c <am_hal_gpio_pinconfig+0x8>
    dd78:	2006      	movs	r0, #6
    dd7a:	4770      	bx	lr
    dd7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dd80:	f001 0307 	and.w	r3, r1, #7
    dd84:	f011 05e0 	ands.w	r5, r1, #224	; 0xe0
    dd88:	b085      	sub	sp, #20
    dd8a:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    dd8e:	d014      	beq.n	ddba <am_hal_gpio_pinconfig+0x46>
    dd90:	f3c1 1642 	ubfx	r6, r1, #5, #3
    dd94:	1db4      	adds	r4, r6, #6
    dd96:	f004 0407 	and.w	r4, r4, #7
    dd9a:	2c03      	cmp	r4, #3
    dd9c:	f042 0201 	orr.w	r2, r2, #1
    dda0:	f200 80b0 	bhi.w	df04 <am_hal_gpio_pinconfig+0x190>
    dda4:	4c86      	ldr	r4, [pc, #536]	; (dfc0 <am_hal_gpio_pinconfig+0x24c>)
    dda6:	5c24      	ldrb	r4, [r4, r0]
    dda8:	07e7      	lsls	r7, r4, #31
    ddaa:	d403      	bmi.n	ddb4 <am_hal_gpio_pinconfig+0x40>
    ddac:	4885      	ldr	r0, [pc, #532]	; (dfc4 <am_hal_gpio_pinconfig+0x250>)
    ddae:	b005      	add	sp, #20
    ddb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ddb4:	3e02      	subs	r6, #2
    ddb6:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
    ddba:	f3c1 04c1 	ubfx	r4, r1, #3, #2
    ddbe:	2c00      	cmp	r4, #0
    ddc0:	f040 809a 	bne.w	def8 <am_hal_gpio_pinconfig+0x184>
    ddc4:	4c80      	ldr	r4, [pc, #512]	; (dfc8 <am_hal_gpio_pinconfig+0x254>)
    ddc6:	4d81      	ldr	r5, [pc, #516]	; (dfcc <am_hal_gpio_pinconfig+0x258>)
    ddc8:	5c24      	ldrb	r4, [r4, r0]
    ddca:	5c2d      	ldrb	r5, [r5, r0]
    ddcc:	411c      	asrs	r4, r3
    ddce:	f014 0f01 	tst.w	r4, #1
    ddd2:	bf0c      	ite	eq
    ddd4:	2400      	moveq	r4, #0
    ddd6:	2402      	movne	r4, #2
    ddd8:	42ab      	cmp	r3, r5
    ddda:	ea42 0204 	orr.w	r2, r2, r4
    ddde:	f000 809d 	beq.w	df1c <am_hal_gpio_pinconfig+0x1a8>
    dde2:	f3c1 3341 	ubfx	r3, r1, #13, #2
    dde6:	105d      	asrs	r5, r3, #1
    dde8:	f3c1 2681 	ubfx	r6, r1, #10, #2
    ddec:	00db      	lsls	r3, r3, #3
    ddee:	f3c1 2707 	ubfx	r7, r1, #8, #8
    ddf2:	f003 0408 	and.w	r4, r3, #8
    ddf6:	ea45 0346 	orr.w	r3, r5, r6, lsl #1
    ddfa:	f007 060c 	and.w	r6, r7, #12
    ddfe:	f3c1 3500 	ubfx	r5, r1, #12, #1
    de02:	2e04      	cmp	r6, #4
    de04:	ea43 0304 	orr.w	r3, r3, r4
    de08:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    de0c:	462c      	mov	r4, r5
    de0e:	f000 8092 	beq.w	df36 <am_hal_gpio_pinconfig+0x1c2>
    de12:	4c6f      	ldr	r4, [pc, #444]	; (dfd0 <am_hal_gpio_pinconfig+0x25c>)
    de14:	6824      	ldr	r4, [r4, #0]
    de16:	ebc4 0901 	rsb	r9, r4, r1
    de1a:	fab9 f989 	clz	r9, r9
    de1e:	ea4f 1959 	mov.w	r9, r9, lsr #5
    de22:	f017 0f60 	tst.w	r7, #96	; 0x60
    de26:	bf04      	itt	eq
    de28:	f3c1 34c0 	ubfxeq	r4, r1, #15, #1
    de2c:	f364 0300 	bfieq	r3, r4, #0, #1
    de30:	0084      	lsls	r4, r0, #2
    de32:	f3c1 2101 	ubfx	r1, r1, #8, #2
    de36:	2902      	cmp	r1, #2
    de38:	ea4f 05c0 	mov.w	r5, r0, lsl #3
    de3c:	d07e      	beq.n	df3c <am_hal_gpio_pinconfig+0x1c8>
    de3e:	f200 8084 	bhi.w	df4a <am_hal_gpio_pinconfig+0x1d6>
    de42:	2901      	cmp	r1, #1
    de44:	bf08      	it	eq
    de46:	f042 0204 	orreq.w	r2, r2, #4
    de4a:	f005 0518 	and.w	r5, r5, #24
    de4e:	f04f 0800 	mov.w	r8, #0
    de52:	f004 041c 	and.w	r4, r4, #28
    de56:	0841      	lsrs	r1, r0, #1
    de58:	f020 0a03 	bic.w	sl, r0, #3
    de5c:	270f      	movs	r7, #15
    de5e:	f021 0103 	bic.w	r1, r1, #3
    de62:	40a7      	lsls	r7, r4
    de64:	26ff      	movs	r6, #255	; 0xff
    de66:	fa03 f404 	lsl.w	r4, r3, r4
    de6a:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
    de6e:	40ae      	lsls	r6, r5
    de70:	9101      	str	r1, [sp, #4]
    de72:	fa02 f505 	lsl.w	r5, r2, r5
    de76:	9300      	str	r3, [sp, #0]
    de78:	4683      	mov	fp, r0
    de7a:	f000 f8c1 	bl	e000 <am_hal_interrupt_master_disable>
    de7e:	9b00      	ldr	r3, [sp, #0]
    de80:	9003      	str	r0, [sp, #12]
    de82:	43ff      	mvns	r7, r7
    de84:	43f6      	mvns	r6, r6
    de86:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    de8a:	f8df e164 	ldr.w	lr, [pc, #356]	; dff0 <am_hal_gpio_pinconfig+0x27c>
    de8e:	4a51      	ldr	r2, [pc, #324]	; (dfd4 <am_hal_gpio_pinconfig+0x260>)
    de90:	9901      	ldr	r1, [sp, #4]
    de92:	f1b9 0f00 	cmp.w	r9, #0
    de96:	d00d      	beq.n	deb4 <am_hal_gpio_pinconfig+0x140>
    de98:	ea4f 0cdb 	mov.w	ip, fp, lsr #3
    de9c:	f00b 001f 	and.w	r0, fp, #31
    dea0:	f00c 0c04 	and.w	ip, ip, #4
    dea4:	f04f 0b01 	mov.w	fp, #1
    dea8:	f8df 9148 	ldr.w	r9, [pc, #328]	; dff4 <am_hal_gpio_pinconfig+0x280>
    deac:	fa0b f000 	lsl.w	r0, fp, r0
    deb0:	f84c 0009 	str.w	r0, [ip, r9]
    deb4:	4848      	ldr	r0, [pc, #288]	; (dfd8 <am_hal_gpio_pinconfig+0x264>)
    deb6:	f04f 0c73 	mov.w	ip, #115	; 0x73
    deba:	f8c0 c060 	str.w	ip, [r0, #96]	; 0x60
    debe:	f8d3 c000 	ldr.w	ip, [r3]
    dec2:	ea06 0c0c 	and.w	ip, r6, ip
    dec6:	ea4c 0505 	orr.w	r5, ip, r5
    deca:	601d      	str	r5, [r3, #0]
    decc:	f851 300e 	ldr.w	r3, [r1, lr]
    ded0:	403b      	ands	r3, r7
    ded2:	4323      	orrs	r3, r4
    ded4:	f841 300e 	str.w	r3, [r1, lr]
    ded8:	f85a 3002 	ldr.w	r3, [sl, r2]
    dedc:	401e      	ands	r6, r3
    dede:	2400      	movs	r4, #0
    dee0:	ea46 0608 	orr.w	r6, r6, r8
    dee4:	f84a 6002 	str.w	r6, [sl, r2]
    dee8:	6604      	str	r4, [r0, #96]	; 0x60
    deea:	9803      	ldr	r0, [sp, #12]
    deec:	f000 f88c 	bl	e008 <am_hal_interrupt_master_set>
    def0:	4620      	mov	r0, r4
    def2:	b005      	add	sp, #20
    def4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    def8:	2c01      	cmp	r4, #1
    defa:	d015      	beq.n	df28 <am_hal_gpio_pinconfig+0x1b4>
    defc:	2c02      	cmp	r4, #2
    defe:	d032      	beq.n	df66 <am_hal_gpio_pinconfig+0x1f2>
    df00:	4836      	ldr	r0, [pc, #216]	; (dfdc <am_hal_gpio_pinconfig+0x268>)
    df02:	e754      	b.n	ddae <am_hal_gpio_pinconfig+0x3a>
    df04:	2dc0      	cmp	r5, #192	; 0xc0
    df06:	d029      	beq.n	df5c <am_hal_gpio_pinconfig+0x1e8>
    df08:	2d20      	cmp	r5, #32
    df0a:	f47f af56 	bne.w	ddba <am_hal_gpio_pinconfig+0x46>
    df0e:	4c2c      	ldr	r4, [pc, #176]	; (dfc0 <am_hal_gpio_pinconfig+0x24c>)
    df10:	5c24      	ldrb	r4, [r4, r0]
    df12:	f014 0f09 	tst.w	r4, #9
    df16:	f47f af49 	bne.w	ddac <am_hal_gpio_pinconfig+0x38>
    df1a:	e74e      	b.n	ddba <am_hal_gpio_pinconfig+0x46>
    df1c:	f3c1 4402 	ubfx	r4, r1, #16, #3
    df20:	2c07      	cmp	r4, #7
    df22:	d127      	bne.n	df74 <am_hal_gpio_pinconfig+0x200>
    df24:	482e      	ldr	r0, [pc, #184]	; (dfe0 <am_hal_gpio_pinconfig+0x26c>)
    df26:	e742      	b.n	ddae <am_hal_gpio_pinconfig+0x3a>
    df28:	4c25      	ldr	r4, [pc, #148]	; (dfc0 <am_hal_gpio_pinconfig+0x24c>)
    df2a:	5c24      	ldrb	r4, [r4, r0]
    df2c:	07a5      	lsls	r5, r4, #30
    df2e:	d5e7      	bpl.n	df00 <am_hal_gpio_pinconfig+0x18c>
    df30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    df34:	e746      	b.n	ddc4 <am_hal_gpio_pinconfig+0x50>
    df36:	f04f 0901 	mov.w	r9, #1
    df3a:	e772      	b.n	de22 <am_hal_gpio_pinconfig+0xae>
    df3c:	f005 0518 	and.w	r5, r5, #24
    df40:	f04f 0801 	mov.w	r8, #1
    df44:	fa08 f805 	lsl.w	r8, r8, r5
    df48:	e783      	b.n	de52 <am_hal_gpio_pinconfig+0xde>
    df4a:	f005 0518 	and.w	r5, r5, #24
    df4e:	f04f 0801 	mov.w	r8, #1
    df52:	f042 0204 	orr.w	r2, r2, #4
    df56:	fa08 f805 	lsl.w	r8, r8, r5
    df5a:	e77a      	b.n	de52 <am_hal_gpio_pinconfig+0xde>
    df5c:	2814      	cmp	r0, #20
    df5e:	f43f af2c 	beq.w	ddba <am_hal_gpio_pinconfig+0x46>
    df62:	4820      	ldr	r0, [pc, #128]	; (dfe4 <am_hal_gpio_pinconfig+0x270>)
    df64:	e723      	b.n	ddae <am_hal_gpio_pinconfig+0x3a>
    df66:	4c16      	ldr	r4, [pc, #88]	; (dfc0 <am_hal_gpio_pinconfig+0x24c>)
    df68:	5c24      	ldrb	r4, [r4, r0]
    df6a:	0764      	lsls	r4, r4, #29
    df6c:	d5c8      	bpl.n	df00 <am_hal_gpio_pinconfig+0x18c>
    df6e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    df72:	e727      	b.n	ddc4 <am_hal_gpio_pinconfig+0x50>
    df74:	4d1c      	ldr	r5, [pc, #112]	; (dfe8 <am_hal_gpio_pinconfig+0x274>)
    df76:	f3c1 43c1 	ubfx	r3, r1, #19, #2
    df7a:	f815 6020 	ldrb.w	r6, [r5, r0, lsl #2]
    df7e:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    df82:	429e      	cmp	r6, r3
    df84:	d00c      	beq.n	dfa0 <am_hal_gpio_pinconfig+0x22c>
    df86:	0084      	lsls	r4, r0, #2
    df88:	4425      	add	r5, r4
    df8a:	786e      	ldrb	r6, [r5, #1]
    df8c:	429e      	cmp	r6, r3
    df8e:	d013      	beq.n	dfb8 <am_hal_gpio_pinconfig+0x244>
    df90:	78ae      	ldrb	r6, [r5, #2]
    df92:	429e      	cmp	r6, r3
    df94:	d00e      	beq.n	dfb4 <am_hal_gpio_pinconfig+0x240>
    df96:	78ed      	ldrb	r5, [r5, #3]
    df98:	429d      	cmp	r5, r3
    df9a:	d00f      	beq.n	dfbc <am_hal_gpio_pinconfig+0x248>
    df9c:	4813      	ldr	r0, [pc, #76]	; (dfec <am_hal_gpio_pinconfig+0x278>)
    df9e:	e706      	b.n	ddae <am_hal_gpio_pinconfig+0x3a>
    dfa0:	2300      	movs	r3, #0
    dfa2:	0084      	lsls	r4, r0, #2
    dfa4:	005b      	lsls	r3, r3, #1
    dfa6:	f3c1 5540 	ubfx	r5, r1, #21, #1
    dfaa:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
    dfae:	f04f 0900 	mov.w	r9, #0
    dfb2:	e73e      	b.n	de32 <am_hal_gpio_pinconfig+0xbe>
    dfb4:	2302      	movs	r3, #2
    dfb6:	e7f5      	b.n	dfa4 <am_hal_gpio_pinconfig+0x230>
    dfb8:	2301      	movs	r3, #1
    dfba:	e7f3      	b.n	dfa4 <am_hal_gpio_pinconfig+0x230>
    dfbc:	2303      	movs	r3, #3
    dfbe:	e7f1      	b.n	dfa4 <am_hal_gpio_pinconfig+0x230>
    dfc0:	0000f8ac 	.word	0x0000f8ac
    dfc4:	08000100 	.word	0x08000100
    dfc8:	0000f9a8 	.word	0x0000f9a8
    dfcc:	0000f9e0 	.word	0x0000f9e0
    dfd0:	0000f9dc 	.word	0x0000f9dc
    dfd4:	400100e0 	.word	0x400100e0
    dfd8:	40010000 	.word	0x40010000
    dfdc:	08000102 	.word	0x08000102
    dfe0:	08000103 	.word	0x08000103
    dfe4:	08000101 	.word	0x08000101
    dfe8:	0000f8e0 	.word	0x0000f8e0
    dfec:	08000104 	.word	0x08000104
    dff0:	40010040 	.word	0x40010040
    dff4:	400100b4 	.word	0x400100b4

0000dff8 <am_hal_interrupt_master_enable>:
    dff8:	f3ef 8010 	mrs	r0, PRIMASK
    dffc:	b662      	cpsie	i
    dffe:	4770      	bx	lr

0000e000 <am_hal_interrupt_master_disable>:
    e000:	f3ef 8010 	mrs	r0, PRIMASK
    e004:	b672      	cpsid	i
    e006:	4770      	bx	lr

0000e008 <am_hal_interrupt_master_set>:
    e008:	f380 8810 	msr	PRIMASK, r0
    e00c:	4770      	bx	lr
    e00e:	bf00      	nop

0000e010 <am_hal_mcuctrl_info_get>:
    e010:	b4f0      	push	{r4, r5, r6, r7}
    e012:	b121      	cbz	r1, e01e <am_hal_mcuctrl_info_get+0xe>
    e014:	2801      	cmp	r0, #1
    e016:	d038      	beq.n	e08a <am_hal_mcuctrl_info_get+0x7a>
    e018:	d320      	bcc.n	e05c <am_hal_mcuctrl_info_get+0x4c>
    e01a:	2802      	cmp	r0, #2
    e01c:	d002      	beq.n	e024 <am_hal_mcuctrl_info_get+0x14>
    e01e:	2006      	movs	r0, #6
    e020:	bcf0      	pop	{r4, r5, r6, r7}
    e022:	4770      	bx	lr
    e024:	4a41      	ldr	r2, [pc, #260]	; (e12c <am_hal_mcuctrl_info_get+0x11c>)
    e026:	684d      	ldr	r5, [r1, #4]
    e028:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    e02c:	694c      	ldr	r4, [r1, #20]
    e02e:	f003 0601 	and.w	r6, r3, #1
    e032:	f3c3 0040 	ubfx	r0, r3, #1, #1
    e036:	f3c3 0380 	ubfx	r3, r3, #2, #1
    e03a:	700e      	strb	r6, [r1, #0]
    e03c:	7208      	strb	r0, [r1, #8]
    e03e:	740b      	strb	r3, [r1, #16]
    e040:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
    e044:	60cb      	str	r3, [r1, #12]
    e046:	f8d2 01c0 	ldr.w	r0, [r2, #448]	; 0x1c0
    e04a:	4328      	orrs	r0, r5
    e04c:	6048      	str	r0, [r1, #4]
    e04e:	f8d2 31c8 	ldr.w	r3, [r2, #456]	; 0x1c8
    e052:	4323      	orrs	r3, r4
    e054:	2000      	movs	r0, #0
    e056:	614b      	str	r3, [r1, #20]
    e058:	bcf0      	pop	{r4, r5, r6, r7}
    e05a:	4770      	bx	lr
    e05c:	4a33      	ldr	r2, [pc, #204]	; (e12c <am_hal_mcuctrl_info_get+0x11c>)
    e05e:	6993      	ldr	r3, [r2, #24]
    e060:	f3c3 1080 	ubfx	r0, r3, #6, #1
    e064:	f3c3 0380 	ubfx	r3, r3, #2, #1
    e068:	7008      	strb	r0, [r1, #0]
    e06a:	704b      	strb	r3, [r1, #1]
    e06c:	f8d2 31a0 	ldr.w	r3, [r2, #416]	; 0x1a0
    e070:	f3c3 6381 	ubfx	r3, r3, #26, #2
    e074:	710b      	strb	r3, [r1, #4]
    e076:	6953      	ldr	r3, [r2, #20]
    e078:	f3c3 0240 	ubfx	r2, r3, #1, #1
    e07c:	f003 0301 	and.w	r3, r3, #1
    e080:	2000      	movs	r0, #0
    e082:	708a      	strb	r2, [r1, #2]
    e084:	70cb      	strb	r3, [r1, #3]
    e086:	bcf0      	pop	{r4, r5, r6, r7}
    e088:	4770      	bx	lr
    e08a:	4b28      	ldr	r3, [pc, #160]	; (e12c <am_hal_mcuctrl_info_get+0x11c>)
    e08c:	4c28      	ldr	r4, [pc, #160]	; (e130 <am_hal_mcuctrl_info_get+0x120>)
    e08e:	681a      	ldr	r2, [r3, #0]
    e090:	600a      	str	r2, [r1, #0]
    e092:	6858      	ldr	r0, [r3, #4]
    e094:	6048      	str	r0, [r1, #4]
    e096:	6898      	ldr	r0, [r3, #8]
    e098:	6088      	str	r0, [r1, #8]
    e09a:	68d8      	ldr	r0, [r3, #12]
    e09c:	60c8      	str	r0, [r1, #12]
    e09e:	691d      	ldr	r5, [r3, #16]
    e0a0:	4824      	ldr	r0, [pc, #144]	; (e134 <am_hal_mcuctrl_info_get+0x124>)
    e0a2:	610d      	str	r5, [r1, #16]
    e0a4:	f3c2 5703 	ubfx	r7, r2, #20, #4
    e0a8:	f3c2 4603 	ubfx	r6, r2, #16, #4
    e0ac:	695d      	ldr	r5, [r3, #20]
    e0ae:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
    e0b2:	4b21      	ldr	r3, [pc, #132]	; (e138 <am_hal_mcuctrl_info_get+0x128>)
    e0b4:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    e0b8:	6208      	str	r0, [r1, #32]
    e0ba:	f002 0201 	and.w	r2, r2, #1
    e0be:	614d      	str	r5, [r1, #20]
    e0c0:	61cc      	str	r4, [r1, #28]
    e0c2:	618a      	str	r2, [r1, #24]
    e0c4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    e0c8:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
    e0cc:	b2d0      	uxtb	r0, r2
    e0ce:	f004 020f 	and.w	r2, r4, #15
    e0d2:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
    e0d6:	624a      	str	r2, [r1, #36]	; 0x24
    e0d8:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    e0dc:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
    e0e0:	f3c2 1003 	ubfx	r0, r2, #4, #4
    e0e4:	f004 020f 	and.w	r2, r4, #15
    e0e8:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    e0ec:	628a      	str	r2, [r1, #40]	; 0x28
    e0ee:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
    e0f2:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
    e0f6:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
    e0fa:	f3c2 1203 	ubfx	r2, r2, #4, #4
    e0fe:	4302      	orrs	r2, r0
    e100:	62ca      	str	r2, [r1, #44]	; 0x2c
    e102:	f8d3 50fc 	ldr.w	r5, [r3, #252]	; 0xfc
    e106:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
    e10a:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
    e10e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    e112:	b2c0      	uxtb	r0, r0
    e114:	0400      	lsls	r0, r0, #16
    e116:	ea40 6305 	orr.w	r3, r0, r5, lsl #24
    e11a:	b2d2      	uxtb	r2, r2
    e11c:	431a      	orrs	r2, r3
    e11e:	b2e3      	uxtb	r3, r4
    e120:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    e124:	630b      	str	r3, [r1, #48]	; 0x30
    e126:	2000      	movs	r0, #0
    e128:	bcf0      	pop	{r4, r5, r6, r7}
    e12a:	4770      	bx	lr
    e12c:	40020000 	.word	0x40020000
    e130:	0000fa14 	.word	0x0000fa14
    e134:	0000fa54 	.word	0x0000fa54
    e138:	f0000f00 	.word	0xf0000f00

0000e13c <am_hal_pdm_initialize>:
    e13c:	b108      	cbz	r0, e142 <am_hal_pdm_initialize+0x6>
    e13e:	2005      	movs	r0, #5
    e140:	4770      	bx	lr
    e142:	b1a9      	cbz	r1, e170 <am_hal_pdm_initialize+0x34>
    e144:	4b0b      	ldr	r3, [pc, #44]	; (e174 <am_hal_pdm_initialize+0x38>)
    e146:	78da      	ldrb	r2, [r3, #3]
    e148:	b430      	push	{r4, r5}
    e14a:	f3c2 0400 	ubfx	r4, r2, #0, #1
    e14e:	b2e0      	uxtb	r0, r4
    e150:	b110      	cbz	r0, e158 <am_hal_pdm_initialize+0x1c>
    e152:	2007      	movs	r0, #7
    e154:	bc30      	pop	{r4, r5}
    e156:	4770      	bx	lr
    e158:	f042 0201 	orr.w	r2, r2, #1
    e15c:	70da      	strb	r2, [r3, #3]
    e15e:	681a      	ldr	r2, [r3, #0]
    e160:	4d05      	ldr	r5, [pc, #20]	; (e178 <am_hal_pdm_initialize+0x3c>)
    e162:	6098      	str	r0, [r3, #8]
    e164:	f365 0217 	bfi	r2, r5, #0, #24
    e168:	711c      	strb	r4, [r3, #4]
    e16a:	601a      	str	r2, [r3, #0]
    e16c:	600b      	str	r3, [r1, #0]
    e16e:	e7f1      	b.n	e154 <am_hal_pdm_initialize+0x18>
    e170:	2006      	movs	r0, #6
    e172:	4770      	bx	lr
    e174:	1001d570 	.word	0x1001d570
    e178:	00f956e2 	.word	0x00f956e2

0000e17c <am_hal_pdm_power_control>:
    e17c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e17e:	6803      	ldr	r3, [r0, #0]
    e180:	4c1c      	ldr	r4, [pc, #112]	; (e1f4 <am_hal_pdm_power_control+0x78>)
    e182:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e186:	42a3      	cmp	r3, r4
    e188:	b083      	sub	sp, #12
    e18a:	d002      	beq.n	e192 <am_hal_pdm_power_control+0x16>
    e18c:	2002      	movs	r0, #2
    e18e:	b003      	add	sp, #12
    e190:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e192:	4604      	mov	r4, r0
    e194:	6880      	ldr	r0, [r0, #8]
    e196:	300d      	adds	r0, #13
    e198:	4617      	mov	r7, r2
    e19a:	460d      	mov	r5, r1
    e19c:	b2c6      	uxtb	r6, r0
    e19e:	b149      	cbz	r1, e1b4 <am_hal_pdm_power_control+0x38>
    e1a0:	2902      	cmp	r1, #2
    e1a2:	d805      	bhi.n	e1b0 <am_hal_pdm_power_control+0x34>
    e1a4:	b982      	cbnz	r2, e1c8 <am_hal_pdm_power_control+0x4c>
    e1a6:	4630      	mov	r0, r6
    e1a8:	f000 f9a6 	bl	e4f8 <am_hal_pwrctrl_periph_disable>
    e1ac:	2000      	movs	r0, #0
    e1ae:	e7ee      	b.n	e18e <am_hal_pdm_power_control+0x12>
    e1b0:	2006      	movs	r0, #6
    e1b2:	e7ec      	b.n	e18e <am_hal_pdm_power_control+0x12>
    e1b4:	b11a      	cbz	r2, e1be <am_hal_pdm_power_control+0x42>
    e1b6:	7923      	ldrb	r3, [r4, #4]
    e1b8:	b97b      	cbnz	r3, e1da <am_hal_pdm_power_control+0x5e>
    e1ba:	2007      	movs	r0, #7
    e1bc:	e7e7      	b.n	e18e <am_hal_pdm_power_control+0x12>
    e1be:	4630      	mov	r0, r6
    e1c0:	f000 f970 	bl	e4a4 <am_hal_pwrctrl_periph_enable>
    e1c4:	4638      	mov	r0, r7
    e1c6:	e7e2      	b.n	e18e <am_hal_pdm_power_control+0x12>
    e1c8:	f7ff ff1a 	bl	e000 <am_hal_interrupt_master_disable>
    e1cc:	2301      	movs	r3, #1
    e1ce:	9001      	str	r0, [sp, #4]
    e1d0:	9801      	ldr	r0, [sp, #4]
    e1d2:	7123      	strb	r3, [r4, #4]
    e1d4:	f7ff ff18 	bl	e008 <am_hal_interrupt_master_set>
    e1d8:	e7e5      	b.n	e1a6 <am_hal_pdm_power_control+0x2a>
    e1da:	4630      	mov	r0, r6
    e1dc:	f000 f962 	bl	e4a4 <am_hal_pwrctrl_periph_enable>
    e1e0:	f7ff ff0e 	bl	e000 <am_hal_interrupt_master_disable>
    e1e4:	9000      	str	r0, [sp, #0]
    e1e6:	9800      	ldr	r0, [sp, #0]
    e1e8:	7125      	strb	r5, [r4, #4]
    e1ea:	f7ff ff0d 	bl	e008 <am_hal_interrupt_master_set>
    e1ee:	4628      	mov	r0, r5
    e1f0:	e7cd      	b.n	e18e <am_hal_pdm_power_control+0x12>
    e1f2:	bf00      	nop
    e1f4:	01f956e2 	.word	0x01f956e2

0000e1f8 <am_hal_pdm_configure>:
    e1f8:	b128      	cbz	r0, e206 <am_hal_pdm_configure+0xe>
    e1fa:	6803      	ldr	r3, [r0, #0]
    e1fc:	4a3e      	ldr	r2, [pc, #248]	; (e2f8 <am_hal_pdm_configure+0x100>)
    e1fe:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e202:	4293      	cmp	r3, r2
    e204:	d001      	beq.n	e20a <am_hal_pdm_configure+0x12>
    e206:	2002      	movs	r0, #2
    e208:	4770      	bx	lr
    e20a:	b510      	push	{r4, lr}
    e20c:	4c3b      	ldr	r4, [pc, #236]	; (e2fc <am_hal_pdm_configure+0x104>)
    e20e:	7f4a      	ldrb	r2, [r1, #29]
    e210:	6823      	ldr	r3, [r4, #0]
    e212:	f362 0341 	bfi	r3, r2, #1, #1
    e216:	6023      	str	r3, [r4, #0]
    e218:	6823      	ldr	r3, [r4, #0]
    e21a:	698a      	ldr	r2, [r1, #24]
    e21c:	f362 0384 	bfi	r3, r2, #2, #3
    e220:	6023      	str	r3, [r4, #0]
    e222:	6823      	ldr	r3, [r4, #0]
    e224:	68ca      	ldr	r2, [r1, #12]
    e226:	f362 1348 	bfi	r3, r2, #5, #4
    e22a:	6023      	str	r3, [r4, #0]
    e22c:	6823      	ldr	r3, [r4, #0]
    e22e:	7a0a      	ldrb	r2, [r1, #8]
    e230:	f362 2349 	bfi	r3, r2, #9, #1
    e234:	6023      	str	r3, [r4, #0]
    e236:	6823      	ldr	r3, [r4, #0]
    e238:	684a      	ldr	r2, [r1, #4]
    e23a:	f362 2390 	bfi	r3, r2, #10, #7
    e23e:	6023      	str	r3, [r4, #0]
    e240:	6823      	ldr	r3, [r4, #0]
    e242:	780a      	ldrb	r2, [r1, #0]
    e244:	f362 4352 	bfi	r3, r2, #17, #2
    e248:	6023      	str	r3, [r4, #0]
    e24a:	6823      	ldr	r3, [r4, #0]
    e24c:	784a      	ldrb	r2, [r1, #1]
    e24e:	f362 5359 	bfi	r3, r2, #21, #5
    e252:	6023      	str	r3, [r4, #0]
    e254:	788a      	ldrb	r2, [r1, #2]
    e256:	6823      	ldr	r3, [r4, #0]
    e258:	f362 639e 	bfi	r3, r2, #26, #5
    e25c:	6023      	str	r3, [r4, #0]
    e25e:	7f8a      	ldrb	r2, [r1, #30]
    e260:	6823      	ldr	r3, [r4, #0]
    e262:	f362 73df 	bfi	r3, r2, #31, #1
    e266:	6023      	str	r3, [r4, #0]
    e268:	6823      	ldr	r3, [r4, #0]
    e26a:	f043 0301 	orr.w	r3, r3, #1
    e26e:	6023      	str	r3, [r4, #0]
    e270:	6863      	ldr	r3, [r4, #4]
    e272:	f36f 639a 	bfc	r3, #26, #1
    e276:	6063      	str	r3, [r4, #4]
    e278:	6863      	ldr	r3, [r4, #4]
    e27a:	f36f 73df 	bfc	r3, #31, #1
    e27e:	6063      	str	r3, [r4, #4]
    e280:	6863      	ldr	r3, [r4, #4]
    e282:	f36f 739e 	bfc	r3, #30, #1
    e286:	6063      	str	r3, [r4, #4]
    e288:	6863      	ldr	r3, [r4, #4]
    e28a:	7d4a      	ldrb	r2, [r1, #21]
    e28c:	f362 03c4 	bfi	r3, r2, #3, #2
    e290:	6063      	str	r3, [r4, #4]
    e292:	6863      	ldr	r3, [r4, #4]
    e294:	7d0a      	ldrb	r2, [r1, #20]
    e296:	f362 2308 	bfi	r3, r2, #8, #1
    e29a:	6063      	str	r3, [r4, #4]
    e29c:	6863      	ldr	r3, [r4, #4]
    e29e:	7c8a      	ldrb	r2, [r1, #18]
    e2a0:	f362 4310 	bfi	r3, r2, #16, #1
    e2a4:	6063      	str	r3, [r4, #4]
    e2a6:	6863      	ldr	r3, [r4, #4]
    e2a8:	7cca      	ldrb	r2, [r1, #19]
    e2aa:	f362 4351 	bfi	r3, r2, #17, #1
    e2ae:	6063      	str	r3, [r4, #4]
    e2b0:	7c4a      	ldrb	r2, [r1, #17]
    e2b2:	6863      	ldr	r3, [r4, #4]
    e2b4:	f362 43d3 	bfi	r3, r2, #19, #1
    e2b8:	6063      	str	r3, [r4, #4]
    e2ba:	7f0a      	ldrb	r2, [r1, #28]
    e2bc:	6863      	ldr	r3, [r4, #4]
    e2be:	f362 5314 	bfi	r3, r2, #20, #1
    e2c2:	6063      	str	r3, [r4, #4]
    e2c4:	7c0a      	ldrb	r2, [r1, #16]
    e2c6:	6863      	ldr	r3, [r4, #4]
    e2c8:	b084      	sub	sp, #16
    e2ca:	f362 63dd 	bfi	r3, r2, #27, #3
    e2ce:	6063      	str	r3, [r4, #4]
    e2d0:	a801      	add	r0, sp, #4
    e2d2:	f7ff fd21 	bl	dd18 <am_hal_clkgen_status_get>
    e2d6:	9b01      	ldr	r3, [sp, #4]
    e2d8:	4809      	ldr	r0, [pc, #36]	; (e300 <am_hal_pdm_configure+0x108>)
    e2da:	fba0 2303 	umull	r2, r3, r0, r3
    e2de:	0c9b      	lsrs	r3, r3, #18
    e2e0:	2064      	movs	r0, #100	; 0x64
    e2e2:	fb00 f003 	mul.w	r0, r0, r3
    e2e6:	f7ff fd35 	bl	dd54 <am_hal_flash_delay>
    e2ea:	6863      	ldr	r3, [r4, #4]
    e2ec:	2000      	movs	r0, #0
    e2ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    e2f2:	6063      	str	r3, [r4, #4]
    e2f4:	b004      	add	sp, #16
    e2f6:	bd10      	pop	{r4, pc}
    e2f8:	01f956e2 	.word	0x01f956e2
    e2fc:	50011000 	.word	0x50011000
    e300:	165e9f81 	.word	0x165e9f81

0000e304 <am_hal_pdm_enable>:
    e304:	b128      	cbz	r0, e312 <am_hal_pdm_enable+0xe>
    e306:	6803      	ldr	r3, [r0, #0]
    e308:	4a08      	ldr	r2, [pc, #32]	; (e32c <am_hal_pdm_enable+0x28>)
    e30a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e30e:	4293      	cmp	r3, r2
    e310:	d001      	beq.n	e316 <am_hal_pdm_enable+0x12>
    e312:	2002      	movs	r0, #2
    e314:	4770      	bx	lr
    e316:	4b06      	ldr	r3, [pc, #24]	; (e330 <am_hal_pdm_enable+0x2c>)
    e318:	685a      	ldr	r2, [r3, #4]
    e31a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    e31e:	605a      	str	r2, [r3, #4]
    e320:	685a      	ldr	r2, [r3, #4]
    e322:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
    e326:	605a      	str	r2, [r3, #4]
    e328:	2000      	movs	r0, #0
    e32a:	4770      	bx	lr
    e32c:	01f956e2 	.word	0x01f956e2
    e330:	50011000 	.word	0x50011000

0000e334 <am_hal_pdm_disable>:
    e334:	b128      	cbz	r0, e342 <am_hal_pdm_disable+0xe>
    e336:	6803      	ldr	r3, [r0, #0]
    e338:	4a08      	ldr	r2, [pc, #32]	; (e35c <am_hal_pdm_disable+0x28>)
    e33a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e33e:	4293      	cmp	r3, r2
    e340:	d001      	beq.n	e346 <am_hal_pdm_disable+0x12>
    e342:	2002      	movs	r0, #2
    e344:	4770      	bx	lr
    e346:	4b06      	ldr	r3, [pc, #24]	; (e360 <am_hal_pdm_disable+0x2c>)
    e348:	685a      	ldr	r2, [r3, #4]
    e34a:	f36f 72df 	bfc	r2, #31, #1
    e34e:	605a      	str	r2, [r3, #4]
    e350:	685a      	ldr	r2, [r3, #4]
    e352:	f36f 629a 	bfc	r2, #26, #1
    e356:	605a      	str	r2, [r3, #4]
    e358:	2000      	movs	r0, #0
    e35a:	4770      	bx	lr
    e35c:	01f956e2 	.word	0x01f956e2
    e360:	50011000 	.word	0x50011000

0000e364 <am_hal_pdm_dma_start>:
    e364:	b128      	cbz	r0, e372 <am_hal_pdm_dma_start+0xe>
    e366:	6803      	ldr	r3, [r0, #0]
    e368:	4a20      	ldr	r2, [pc, #128]	; (e3ec <am_hal_pdm_dma_start+0x88>)
    e36a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e36e:	4293      	cmp	r3, r2
    e370:	d001      	beq.n	e376 <am_hal_pdm_dma_start+0x12>
    e372:	2002      	movs	r0, #2
    e374:	4770      	bx	lr
    e376:	684a      	ldr	r2, [r1, #4]
    e378:	2a01      	cmp	r2, #1
    e37a:	d934      	bls.n	e3e6 <am_hal_pdm_dma_start+0x82>
    e37c:	b410      	push	{r4}
    e37e:	2301      	movs	r3, #1
    e380:	fbb2 f4f3 	udiv	r4, r2, r3
    e384:	fb03 2014 	mls	r0, r3, r4, r2
    e388:	3301      	adds	r3, #1
    e38a:	b908      	cbnz	r0, e390 <am_hal_pdm_dma_start+0x2c>
    e38c:	2c1f      	cmp	r4, #31
    e38e:	d906      	bls.n	e39e <am_hal_pdm_dma_start+0x3a>
    e390:	4293      	cmp	r3, r2
    e392:	d1f5      	bne.n	e380 <am_hal_pdm_dma_start+0x1c>
    e394:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    e398:	f85d 4b04 	ldr.w	r4, [sp], #4
    e39c:	4770      	bx	lr
    e39e:	2c00      	cmp	r4, #0
    e3a0:	d0f8      	beq.n	e394 <am_hal_pdm_dma_start+0x30>
    e3a2:	4b13      	ldr	r3, [pc, #76]	; (e3f0 <am_hal_pdm_dma_start+0x8c>)
    e3a4:	615c      	str	r4, [r3, #20]
    e3a6:	f8c3 0280 	str.w	r0, [r3, #640]	; 0x280
    e3aa:	f8b3 4280 	ldrh.w	r4, [r3, #640]	; 0x280
    e3ae:	f360 2408 	bfi	r4, r0, #8, #1
    e3b2:	f8a3 4280 	strh.w	r4, [r3, #640]	; 0x280
    e3b6:	f8b3 4280 	ldrh.w	r4, [r3, #640]	; 0x280
    e3ba:	f360 0482 	bfi	r4, r0, #2, #1
    e3be:	f8a3 4280 	strh.w	r4, [r3, #640]	; 0x280
    e3c2:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
    e3c6:	680a      	ldr	r2, [r1, #0]
    e3c8:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    e3cc:	f893 2240 	ldrb.w	r2, [r3, #576]	; 0x240
    e3d0:	f042 0201 	orr.w	r2, r2, #1
    e3d4:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240
    e3d8:	f8b3 2280 	ldrh.w	r2, [r3, #640]	; 0x280
    e3dc:	f042 0201 	orr.w	r2, r2, #1
    e3e0:	f8a3 2280 	strh.w	r2, [r3, #640]	; 0x280
    e3e4:	e7d8      	b.n	e398 <am_hal_pdm_dma_start+0x34>
    e3e6:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    e3ea:	4770      	bx	lr
    e3ec:	01f956e2 	.word	0x01f956e2
    e3f0:	50011000 	.word	0x50011000

0000e3f4 <am_hal_pdm_fifo_flush>:
    e3f4:	b128      	cbz	r0, e402 <am_hal_pdm_fifo_flush+0xe>
    e3f6:	6803      	ldr	r3, [r0, #0]
    e3f8:	4a05      	ldr	r2, [pc, #20]	; (e410 <am_hal_pdm_fifo_flush+0x1c>)
    e3fa:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e3fe:	4293      	cmp	r3, r2
    e400:	d001      	beq.n	e406 <am_hal_pdm_fifo_flush+0x12>
    e402:	2002      	movs	r0, #2
    e404:	4770      	bx	lr
    e406:	4b03      	ldr	r3, [pc, #12]	; (e414 <am_hal_pdm_fifo_flush+0x20>)
    e408:	2201      	movs	r2, #1
    e40a:	611a      	str	r2, [r3, #16]
    e40c:	2000      	movs	r0, #0
    e40e:	4770      	bx	lr
    e410:	01f956e2 	.word	0x01f956e2
    e414:	50011000 	.word	0x50011000

0000e418 <am_hal_pdm_interrupt_enable>:
    e418:	b128      	cbz	r0, e426 <am_hal_pdm_interrupt_enable+0xe>
    e41a:	6803      	ldr	r3, [r0, #0]
    e41c:	4a07      	ldr	r2, [pc, #28]	; (e43c <am_hal_pdm_interrupt_enable+0x24>)
    e41e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e422:	4293      	cmp	r3, r2
    e424:	d001      	beq.n	e42a <am_hal_pdm_interrupt_enable+0x12>
    e426:	2002      	movs	r0, #2
    e428:	4770      	bx	lr
    e42a:	4b05      	ldr	r3, [pc, #20]	; (e440 <am_hal_pdm_interrupt_enable+0x28>)
    e42c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    e430:	4311      	orrs	r1, r2
    e432:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    e436:	2000      	movs	r0, #0
    e438:	4770      	bx	lr
    e43a:	bf00      	nop
    e43c:	01f956e2 	.word	0x01f956e2
    e440:	50011000 	.word	0x50011000

0000e444 <am_hal_pdm_interrupt_clear>:
    e444:	b128      	cbz	r0, e452 <am_hal_pdm_interrupt_clear+0xe>
    e446:	6803      	ldr	r3, [r0, #0]
    e448:	4a05      	ldr	r2, [pc, #20]	; (e460 <am_hal_pdm_interrupt_clear+0x1c>)
    e44a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e44e:	4293      	cmp	r3, r2
    e450:	d001      	beq.n	e456 <am_hal_pdm_interrupt_clear+0x12>
    e452:	2002      	movs	r0, #2
    e454:	4770      	bx	lr
    e456:	4b03      	ldr	r3, [pc, #12]	; (e464 <am_hal_pdm_interrupt_clear+0x20>)
    e458:	2000      	movs	r0, #0
    e45a:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
    e45e:	4770      	bx	lr
    e460:	01f956e2 	.word	0x01f956e2
    e464:	50011000 	.word	0x50011000

0000e468 <am_hal_pdm_interrupt_status_get>:
    e468:	b128      	cbz	r0, e476 <am_hal_pdm_interrupt_status_get+0xe>
    e46a:	6803      	ldr	r3, [r0, #0]
    e46c:	480b      	ldr	r0, [pc, #44]	; (e49c <am_hal_pdm_interrupt_status_get+0x34>)
    e46e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e472:	4283      	cmp	r3, r0
    e474:	d001      	beq.n	e47a <am_hal_pdm_interrupt_status_get+0x12>
    e476:	2002      	movs	r0, #2
    e478:	4770      	bx	lr
    e47a:	4b09      	ldr	r3, [pc, #36]	; (e4a0 <am_hal_pdm_interrupt_status_get+0x38>)
    e47c:	b922      	cbnz	r2, e488 <am_hal_pdm_interrupt_status_get+0x20>
    e47e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    e482:	600b      	str	r3, [r1, #0]
    e484:	4610      	mov	r0, r2
    e486:	4770      	bx	lr
    e488:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
    e48c:	600a      	str	r2, [r1, #0]
    e48e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    e492:	4013      	ands	r3, r2
    e494:	600b      	str	r3, [r1, #0]
    e496:	2000      	movs	r0, #0
    e498:	4770      	bx	lr
    e49a:	bf00      	nop
    e49c:	01f956e2 	.word	0x01f956e2
    e4a0:	50011000 	.word	0x50011000

0000e4a4 <am_hal_pwrctrl_periph_enable>:
    e4a4:	b570      	push	{r4, r5, r6, lr}
    e4a6:	b082      	sub	sp, #8
    e4a8:	4604      	mov	r4, r0
    e4aa:	f7ff fda9 	bl	e000 <am_hal_interrupt_master_disable>
    e4ae:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    e4b2:	4d0f      	ldr	r5, [pc, #60]	; (e4f0 <am_hal_pwrctrl_periph_enable+0x4c>)
    e4b4:	4e0f      	ldr	r6, [pc, #60]	; (e4f4 <am_hal_pwrctrl_periph_enable+0x50>)
    e4b6:	9001      	str	r0, [sp, #4]
    e4b8:	00a4      	lsls	r4, r4, #2
    e4ba:	68aa      	ldr	r2, [r5, #8]
    e4bc:	5933      	ldr	r3, [r6, r4]
    e4be:	4313      	orrs	r3, r2
    e4c0:	60ab      	str	r3, [r5, #8]
    e4c2:	9801      	ldr	r0, [sp, #4]
    e4c4:	4434      	add	r4, r6
    e4c6:	f7ff fd9f 	bl	e008 <am_hal_interrupt_master_set>
    e4ca:	20a0      	movs	r0, #160	; 0xa0
    e4cc:	f7ff fc42 	bl	dd54 <am_hal_flash_delay>
    e4d0:	69ab      	ldr	r3, [r5, #24]
    e4d2:	6864      	ldr	r4, [r4, #4]
    e4d4:	4223      	tst	r3, r4
    e4d6:	d103      	bne.n	e4e0 <am_hal_pwrctrl_periph_enable+0x3c>
    e4d8:	20a0      	movs	r0, #160	; 0xa0
    e4da:	f7ff fc3b 	bl	dd54 <am_hal_flash_delay>
    e4de:	69ab      	ldr	r3, [r5, #24]
    e4e0:	4b03      	ldr	r3, [pc, #12]	; (e4f0 <am_hal_pwrctrl_periph_enable+0x4c>)
    e4e2:	699b      	ldr	r3, [r3, #24]
    e4e4:	4223      	tst	r3, r4
    e4e6:	bf0c      	ite	eq
    e4e8:	2001      	moveq	r0, #1
    e4ea:	2000      	movne	r0, #0
    e4ec:	b002      	add	sp, #8
    e4ee:	bd70      	pop	{r4, r5, r6, pc}
    e4f0:	40021000 	.word	0x40021000
    e4f4:	0000fa94 	.word	0x0000fa94

0000e4f8 <am_hal_pwrctrl_periph_disable>:
    e4f8:	b570      	push	{r4, r5, r6, lr}
    e4fa:	b082      	sub	sp, #8
    e4fc:	4604      	mov	r4, r0
    e4fe:	f7ff fd7f 	bl	e000 <am_hal_interrupt_master_disable>
    e502:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    e506:	4d10      	ldr	r5, [pc, #64]	; (e548 <am_hal_pwrctrl_periph_disable+0x50>)
    e508:	4e10      	ldr	r6, [pc, #64]	; (e54c <am_hal_pwrctrl_periph_disable+0x54>)
    e50a:	9001      	str	r0, [sp, #4]
    e50c:	00a4      	lsls	r4, r4, #2
    e50e:	68ab      	ldr	r3, [r5, #8]
    e510:	5932      	ldr	r2, [r6, r4]
    e512:	ea23 0302 	bic.w	r3, r3, r2
    e516:	60ab      	str	r3, [r5, #8]
    e518:	9801      	ldr	r0, [sp, #4]
    e51a:	4434      	add	r4, r6
    e51c:	f7ff fd74 	bl	e008 <am_hal_interrupt_master_set>
    e520:	20a0      	movs	r0, #160	; 0xa0
    e522:	f7ff fc17 	bl	dd54 <am_hal_flash_delay>
    e526:	69ab      	ldr	r3, [r5, #24]
    e528:	6864      	ldr	r4, [r4, #4]
    e52a:	4223      	tst	r3, r4
    e52c:	d003      	beq.n	e536 <am_hal_pwrctrl_periph_disable+0x3e>
    e52e:	20a0      	movs	r0, #160	; 0xa0
    e530:	f7ff fc10 	bl	dd54 <am_hal_flash_delay>
    e534:	69ab      	ldr	r3, [r5, #24]
    e536:	4b04      	ldr	r3, [pc, #16]	; (e548 <am_hal_pwrctrl_periph_disable+0x50>)
    e538:	699b      	ldr	r3, [r3, #24]
    e53a:	4223      	tst	r3, r4
    e53c:	bf14      	ite	ne
    e53e:	2001      	movne	r0, #1
    e540:	2000      	moveq	r0, #0
    e542:	b002      	add	sp, #8
    e544:	bd70      	pop	{r4, r5, r6, pc}
    e546:	bf00      	nop
    e548:	40021000 	.word	0x40021000
    e54c:	0000fa94 	.word	0x0000fa94

0000e550 <am_hal_sysctrl_sleep>:
    e550:	b510      	push	{r4, lr}
    e552:	b082      	sub	sp, #8
    e554:	4604      	mov	r4, r0
    e556:	f7ff fd53 	bl	e000 <am_hal_interrupt_master_disable>
    e55a:	9001      	str	r0, [sp, #4]
    e55c:	b124      	cbz	r4, e568 <am_hal_sysctrl_sleep+0x18>
    e55e:	4b12      	ldr	r3, [pc, #72]	; (e5a8 <am_hal_sysctrl_sleep+0x58>)
    e560:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    e564:	07db      	lsls	r3, r3, #31
    e566:	d512      	bpl.n	e58e <am_hal_sysctrl_sleep+0x3e>
    e568:	4a10      	ldr	r2, [pc, #64]	; (e5ac <am_hal_sysctrl_sleep+0x5c>)
    e56a:	6913      	ldr	r3, [r2, #16]
    e56c:	f023 0304 	bic.w	r3, r3, #4
    e570:	6113      	str	r3, [r2, #16]
    e572:	f3bf 8f4f 	dsb	sy
    e576:	4a0e      	ldr	r2, [pc, #56]	; (e5b0 <am_hal_sysctrl_sleep+0x60>)
    e578:	4b0e      	ldr	r3, [pc, #56]	; (e5b4 <am_hal_sysctrl_sleep+0x64>)
    e57a:	6812      	ldr	r2, [r2, #0]
    e57c:	601a      	str	r2, [r3, #0]
    e57e:	bf30      	wfi
    e580:	f3bf 8f6f 	isb	sy
    e584:	9801      	ldr	r0, [sp, #4]
    e586:	f7ff fd3f 	bl	e008 <am_hal_interrupt_master_set>
    e58a:	b002      	add	sp, #8
    e58c:	bd10      	pop	{r4, pc}
    e58e:	4b0a      	ldr	r3, [pc, #40]	; (e5b8 <am_hal_sysctrl_sleep+0x68>)
    e590:	681a      	ldr	r2, [r3, #0]
    e592:	b912      	cbnz	r2, e59a <am_hal_sysctrl_sleep+0x4a>
    e594:	4a09      	ldr	r2, [pc, #36]	; (e5bc <am_hal_sysctrl_sleep+0x6c>)
    e596:	6812      	ldr	r2, [r2, #0]
    e598:	601a      	str	r2, [r3, #0]
    e59a:	4a04      	ldr	r2, [pc, #16]	; (e5ac <am_hal_sysctrl_sleep+0x5c>)
    e59c:	6913      	ldr	r3, [r2, #16]
    e59e:	f043 0304 	orr.w	r3, r3, #4
    e5a2:	6113      	str	r3, [r2, #16]
    e5a4:	e7e5      	b.n	e572 <am_hal_sysctrl_sleep+0x22>
    e5a6:	bf00      	nop
    e5a8:	40020000 	.word	0x40020000
    e5ac:	e000ed00 	.word	0xe000ed00
    e5b0:	5fff0000 	.word	0x5fff0000
    e5b4:	1000155c 	.word	0x1000155c
    e5b8:	10001558 	.word	0x10001558
    e5bc:	4ffff000 	.word	0x4ffff000

0000e5c0 <arm_max_f32>:
    e5c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e5c4:	1e4f      	subs	r7, r1, #1
    e5c6:	ea5f 0897 	movs.w	r8, r7, lsr #2
    e5ca:	f100 0e04 	add.w	lr, r0, #4
    e5ce:	edd0 7a00 	vldr	s15, [r0]
    e5d2:	d058      	beq.n	e686 <arm_max_f32+0xc6>
    e5d4:	3014      	adds	r0, #20
    e5d6:	46c4      	mov	ip, r8
    e5d8:	2604      	movs	r6, #4
    e5da:	2400      	movs	r4, #0
    e5dc:	ed10 6a04 	vldr	s12, [r0, #-16]
    e5e0:	ed50 6a03 	vldr	s13, [r0, #-12]
    e5e4:	ed10 7a02 	vldr	s14, [r0, #-8]
    e5e8:	ed50 5a01 	vldr	s11, [r0, #-4]
    e5ec:	eeb4 6ae7 	vcmpe.f32	s12, s15
    e5f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e5f4:	bfc8      	it	gt
    e5f6:	eef0 7a46 	vmovgt.f32	s15, s12
    e5fa:	f1a6 0503 	sub.w	r5, r6, #3
    e5fe:	eef4 7ae6 	vcmpe.f32	s15, s13
    e602:	bfc8      	it	gt
    e604:	462c      	movgt	r4, r5
    e606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e60a:	bf48      	it	mi
    e60c:	eef0 7a66 	vmovmi.f32	s15, s13
    e610:	f1a6 0502 	sub.w	r5, r6, #2
    e614:	eef4 7ac7 	vcmpe.f32	s15, s14
    e618:	bf48      	it	mi
    e61a:	462c      	movmi	r4, r5
    e61c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e620:	bf48      	it	mi
    e622:	eef0 7a47 	vmovmi.f32	s15, s14
    e626:	f106 35ff 	add.w	r5, r6, #4294967295
    e62a:	eef4 7ae5 	vcmpe.f32	s15, s11
    e62e:	bf48      	it	mi
    e630:	462c      	movmi	r4, r5
    e632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e636:	bf48      	it	mi
    e638:	4634      	movmi	r4, r6
    e63a:	bf48      	it	mi
    e63c:	eef0 7a65 	vmovmi.f32	s15, s11
    e640:	f1bc 0c01 	subs.w	ip, ip, #1
    e644:	f100 0010 	add.w	r0, r0, #16
    e648:	f106 0604 	add.w	r6, r6, #4
    e64c:	d1c6      	bne.n	e5dc <arm_max_f32+0x1c>
    e64e:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
    e652:	f017 0003 	ands.w	r0, r7, #3
    e656:	d018      	beq.n	e68a <arm_max_f32+0xca>
    e658:	1a08      	subs	r0, r1, r0
    e65a:	ecbe 7a01 	vldmia	lr!, {s14}
    e65e:	eeb4 7ae7 	vcmpe.f32	s14, s15
    e662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e666:	bfc8      	it	gt
    e668:	4604      	movgt	r4, r0
    e66a:	f100 0001 	add.w	r0, r0, #1
    e66e:	bfd8      	it	le
    e670:	eeb0 7a67 	vmovle.f32	s14, s15
    e674:	4281      	cmp	r1, r0
    e676:	eef0 7a47 	vmov.f32	s15, s14
    e67a:	d1ee      	bne.n	e65a <arm_max_f32+0x9a>
    e67c:	ed82 7a00 	vstr	s14, [r2]
    e680:	601c      	str	r4, [r3, #0]
    e682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e686:	4644      	mov	r4, r8
    e688:	e7e3      	b.n	e652 <arm_max_f32+0x92>
    e68a:	eeb0 7a67 	vmov.f32	s14, s15
    e68e:	e7f5      	b.n	e67c <arm_max_f32+0xbc>

0000e690 <arm_cfft_radix4_init_f32>:
    e690:	b410      	push	{r4}
    e692:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    e696:	4c29      	ldr	r4, [pc, #164]	; (e73c <arm_cfft_radix4_init_f32+0xac>)
    e698:	7082      	strb	r2, [r0, #2]
    e69a:	70c3      	strb	r3, [r0, #3]
    e69c:	8001      	strh	r1, [r0, #0]
    e69e:	6044      	str	r4, [r0, #4]
    e6a0:	d03f      	beq.n	e722 <arm_cfft_radix4_init_f32+0x92>
    e6a2:	d80e      	bhi.n	e6c2 <arm_cfft_radix4_init_f32+0x32>
    e6a4:	2910      	cmp	r1, #16
    e6a6:	d02f      	beq.n	e708 <arm_cfft_radix4_init_f32+0x78>
    e6a8:	2940      	cmp	r1, #64	; 0x40
    e6aa:	d11c      	bne.n	e6e6 <arm_cfft_radix4_init_f32+0x56>
    e6ac:	f04f 5272 	mov.w	r2, #1015021568	; 0x3c800000
    e6b0:	4b23      	ldr	r3, [pc, #140]	; (e740 <arm_cfft_radix4_init_f32+0xb0>)
    e6b2:	8181      	strh	r1, [r0, #12]
    e6b4:	81c1      	strh	r1, [r0, #14]
    e6b6:	6102      	str	r2, [r0, #16]
    e6b8:	6083      	str	r3, [r0, #8]
    e6ba:	f85d 4b04 	ldr.w	r4, [sp], #4
    e6be:	2000      	movs	r0, #0
    e6c0:	4770      	bx	lr
    e6c2:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    e6c6:	d013      	beq.n	e6f0 <arm_cfft_radix4_init_f32+0x60>
    e6c8:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    e6cc:	d10b      	bne.n	e6e6 <arm_cfft_radix4_init_f32+0x56>
    e6ce:	f04f 5366 	mov.w	r3, #964689920	; 0x39800000
    e6d2:	6103      	str	r3, [r0, #16]
    e6d4:	4a1b      	ldr	r2, [pc, #108]	; (e744 <arm_cfft_radix4_init_f32+0xb4>)
    e6d6:	6082      	str	r2, [r0, #8]
    e6d8:	2301      	movs	r3, #1
    e6da:	8183      	strh	r3, [r0, #12]
    e6dc:	81c3      	strh	r3, [r0, #14]
    e6de:	f85d 4b04 	ldr.w	r4, [sp], #4
    e6e2:	2000      	movs	r0, #0
    e6e4:	4770      	bx	lr
    e6e6:	f04f 30ff 	mov.w	r0, #4294967295
    e6ea:	f85d 4b04 	ldr.w	r4, [sp], #4
    e6ee:	4770      	bx	lr
    e6f0:	f04f 536a 	mov.w	r3, #981467136	; 0x3a800000
    e6f4:	6103      	str	r3, [r0, #16]
    e6f6:	4a14      	ldr	r2, [pc, #80]	; (e748 <arm_cfft_radix4_init_f32+0xb8>)
    e6f8:	6082      	str	r2, [r0, #8]
    e6fa:	2304      	movs	r3, #4
    e6fc:	8183      	strh	r3, [r0, #12]
    e6fe:	81c3      	strh	r3, [r0, #14]
    e700:	f85d 4b04 	ldr.w	r4, [sp], #4
    e704:	2000      	movs	r0, #0
    e706:	4770      	bx	lr
    e708:	f04f 5376 	mov.w	r3, #1031798784	; 0x3d800000
    e70c:	6103      	str	r3, [r0, #16]
    e70e:	4a0f      	ldr	r2, [pc, #60]	; (e74c <arm_cfft_radix4_init_f32+0xbc>)
    e710:	6082      	str	r2, [r0, #8]
    e712:	f44f 7380 	mov.w	r3, #256	; 0x100
    e716:	8183      	strh	r3, [r0, #12]
    e718:	81c3      	strh	r3, [r0, #14]
    e71a:	f85d 4b04 	ldr.w	r4, [sp], #4
    e71e:	2000      	movs	r0, #0
    e720:	4770      	bx	lr
    e722:	f04f 536e 	mov.w	r3, #998244352	; 0x3b800000
    e726:	6103      	str	r3, [r0, #16]
    e728:	4a09      	ldr	r2, [pc, #36]	; (e750 <arm_cfft_radix4_init_f32+0xc0>)
    e72a:	6082      	str	r2, [r0, #8]
    e72c:	2310      	movs	r3, #16
    e72e:	8183      	strh	r3, [r0, #12]
    e730:	81c3      	strh	r3, [r0, #14]
    e732:	f85d 4b04 	ldr.w	r4, [sp], #4
    e736:	2000      	movs	r0, #0
    e738:	4770      	bx	lr
    e73a:	bf00      	nop
    e73c:	00010348 	.word	0x00010348
    e740:	0000fbc6 	.word	0x0000fbc6
    e744:	0000fb48 	.word	0x0000fb48
    e748:	0000fb4e 	.word	0x0000fb4e
    e74c:	0000fd46 	.word	0x0000fd46
    e750:	0000fb66 	.word	0x0000fb66

0000e754 <arm_radix4_butterfly_f32>:
    e754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e758:	ed2d 8b06 	vpush	{d8-d10}
    e75c:	468a      	mov	sl, r1
    e75e:	0889      	lsrs	r1, r1, #2
    e760:	b08d      	sub	sp, #52	; 0x34
    e762:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
    e766:	eb00 040c 	add.w	r4, r0, ip
    e76a:	460d      	mov	r5, r1
    e76c:	461f      	mov	r7, r3
    e76e:	4691      	mov	r9, r2
    e770:	920a      	str	r2, [sp, #40]	; 0x28
    e772:	eb04 020c 	add.w	r2, r4, ip
    e776:	4606      	mov	r6, r0
    e778:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    e77c:	9700      	str	r7, [sp, #0]
    e77e:	eb07 0e47 	add.w	lr, r7, r7, lsl #1
    e782:	9009      	str	r0, [sp, #36]	; 0x24
    e784:	eba2 07c5 	sub.w	r7, r2, r5, lsl #3
    e788:	f10c 0004 	add.w	r0, ip, #4
    e78c:	9701      	str	r7, [sp, #4]
    e78e:	9103      	str	r1, [sp, #12]
    e790:	4430      	add	r0, r6
    e792:	4631      	mov	r1, r6
    e794:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
    e798:	1d37      	adds	r7, r6, #4
    e79a:	9e00      	ldr	r6, [sp, #0]
    e79c:	46ab      	mov	fp, r5
    e79e:	00f5      	lsls	r5, r6, #3
    e7a0:	9502      	str	r5, [sp, #8]
    e7a2:	f8cd b010 	str.w	fp, [sp, #16]
    e7a6:	f8dd b008 	ldr.w	fp, [sp, #8]
    e7aa:	f8cd a008 	str.w	sl, [sp, #8]
    e7ae:	f8dd a004 	ldr.w	sl, [sp, #4]
    e7b2:	ea4f 1806 	mov.w	r8, r6, lsl #4
    e7b6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
    e7ba:	464e      	mov	r6, r9
    e7bc:	464d      	mov	r5, r9
    e7be:	edd1 4a01 	vldr	s9, [r1, #4]
    e7c2:	ed10 4a01 	vldr	s8, [r0, #-4]
    e7c6:	ed17 6a01 	vldr	s12, [r7, #-4]
    e7ca:	edd2 6a00 	vldr	s13, [r2]
    e7ce:	ed94 7a01 	vldr	s14, [r4, #4]
    e7d2:	edd3 7a01 	vldr	s15, [r3, #4]
    e7d6:	ed93 5a00 	vldr	s10, [r3]
    e7da:	edd2 5a01 	vldr	s11, [r2, #4]
    e7de:	ed99 3a00 	vldr	s6, [r9]
    e7e2:	edd9 3a01 	vldr	s7, [r9, #4]
    e7e6:	ee36 2a26 	vadd.f32	s4, s12, s13
    e7ea:	ee74 2a05 	vadd.f32	s5, s8, s10
    e7ee:	ee34 1aa5 	vadd.f32	s2, s9, s11
    e7f2:	ee77 1a27 	vadd.f32	s3, s14, s15
    e7f6:	ee32 0a22 	vadd.f32	s0, s4, s5
    e7fa:	ee71 0a21 	vadd.f32	s1, s2, s3
    e7fe:	ee36 6a66 	vsub.f32	s12, s12, s13
    e802:	ee34 5a45 	vsub.f32	s10, s8, s10
    e806:	ee74 5ae5 	vsub.f32	s11, s9, s11
    e80a:	ee37 7a67 	vsub.f32	s14, s14, s15
    e80e:	ed07 0a01 	vstr	s0, [r7, #-4]
    e812:	edc1 0a01 	vstr	s1, [r1, #4]
    e816:	ed95 4a00 	vldr	s8, [r5]
    e81a:	edd6 6a00 	vldr	s13, [r6]
    e81e:	edd6 7a01 	vldr	s15, [r6, #4]
    e822:	ee72 4a62 	vsub.f32	s9, s4, s5
    e826:	ee71 1a61 	vsub.f32	s3, s2, s3
    e82a:	ee75 2ac5 	vsub.f32	s5, s11, s10
    e82e:	ed95 1a01 	vldr	s2, [r5, #4]
    e832:	ee36 2a07 	vadd.f32	s4, s12, s14
    e836:	ee36 7a47 	vsub.f32	s14, s12, s14
    e83a:	ee35 6a25 	vadd.f32	s12, s10, s11
    e83e:	ee62 0a04 	vmul.f32	s1, s4, s8
    e842:	ee23 5a21 	vmul.f32	s10, s6, s3
    e846:	ee22 2a01 	vmul.f32	s4, s4, s2
    e84a:	ee22 4a84 	vmul.f32	s8, s5, s8
    e84e:	ee22 1a81 	vmul.f32	s2, s5, s2
    e852:	ee67 5a26 	vmul.f32	s11, s14, s13
    e856:	ee63 2a24 	vmul.f32	s5, s6, s9
    e85a:	ee66 6a26 	vmul.f32	s13, s12, s13
    e85e:	ee63 4aa4 	vmul.f32	s9, s7, s9
    e862:	ee26 6a27 	vmul.f32	s12, s12, s15
    e866:	ee63 1aa1 	vmul.f32	s3, s7, s3
    e86a:	ee67 7a27 	vmul.f32	s15, s14, s15
    e86e:	ee31 3a20 	vadd.f32	s6, s2, s1
    e872:	ee34 4a42 	vsub.f32	s8, s8, s4
    e876:	ee71 3aa2 	vadd.f32	s7, s3, s5
    e87a:	ee35 5a64 	vsub.f32	s10, s10, s9
    e87e:	ee36 7a25 	vadd.f32	s14, s12, s11
    e882:	ee76 7ae7 	vsub.f32	s15, s13, s15
    e886:	3108      	adds	r1, #8
    e888:	4551      	cmp	r1, sl
    e88a:	ed40 3a01 	vstr	s7, [r0, #-4]
    e88e:	f107 0708 	add.w	r7, r7, #8
    e892:	ed84 5a01 	vstr	s10, [r4, #4]
    e896:	44c1      	add	r9, r8
    e898:	ed82 3a00 	vstr	s6, [r2]
    e89c:	ed82 4a01 	vstr	s8, [r2, #4]
    e8a0:	445d      	add	r5, fp
    e8a2:	ed83 7a00 	vstr	s14, [r3]
    e8a6:	edc3 7a01 	vstr	s15, [r3, #4]
    e8aa:	4476      	add	r6, lr
    e8ac:	f100 0008 	add.w	r0, r0, #8
    e8b0:	f104 0408 	add.w	r4, r4, #8
    e8b4:	f102 0208 	add.w	r2, r2, #8
    e8b8:	f103 0308 	add.w	r3, r3, #8
    e8bc:	f47f af7f 	bne.w	e7be <arm_radix4_butterfly_f32+0x6a>
    e8c0:	9b00      	ldr	r3, [sp, #0]
    e8c2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    e8c6:	f8dd b010 	ldr.w	fp, [sp, #16]
    e8ca:	f8dd a008 	ldr.w	sl, [sp, #8]
    e8ce:	920b      	str	r2, [sp, #44]	; 0x2c
    e8d0:	009b      	lsls	r3, r3, #2
    e8d2:	b29b      	uxth	r3, r3
    e8d4:	2a04      	cmp	r2, #4
    e8d6:	9306      	str	r3, [sp, #24]
    e8d8:	f240 80ba 	bls.w	ea50 <arm_radix4_butterfly_f32+0x2fc>
    e8dc:	9806      	ldr	r0, [sp, #24]
    e8de:	9207      	str	r2, [sp, #28]
    e8e0:	ea4f 039b 	mov.w	r3, fp, lsr #2
    e8e4:	4619      	mov	r1, r3
    e8e6:	9308      	str	r3, [sp, #32]
    e8e8:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    e8ec:	1e4a      	subs	r2, r1, #1
    e8ee:	00db      	lsls	r3, r3, #3
    e8f0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    e8f2:	9205      	str	r2, [sp, #20]
    e8f4:	9e09      	ldr	r6, [sp, #36]	; 0x24
    e8f6:	9303      	str	r3, [sp, #12]
    e8f8:	010a      	lsls	r2, r1, #4
    e8fa:	0103      	lsls	r3, r0, #4
    e8fc:	9204      	str	r2, [sp, #16]
    e8fe:	9302      	str	r3, [sp, #8]
    e900:	00c2      	lsls	r2, r0, #3
    e902:	2300      	movs	r3, #0
    e904:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
    e908:	9201      	str	r2, [sp, #4]
    e90a:	46b8      	mov	r8, r7
    e90c:	46be      	mov	lr, r7
    e90e:	9300      	str	r3, [sp, #0]
    e910:	9b04      	ldr	r3, [sp, #16]
    e912:	ed97 1a00 	vldr	s2, [r7]
    e916:	edd7 1a01 	vldr	s3, [r7, #4]
    e91a:	ed9e 2a00 	vldr	s4, [lr]
    e91e:	edde 2a01 	vldr	s5, [lr, #4]
    e922:	ed98 3a00 	vldr	s6, [r8]
    e926:	edd8 3a01 	vldr	s7, [r8, #4]
    e92a:	9d00      	ldr	r5, [sp, #0]
    e92c:	18f1      	adds	r1, r6, r3
    e92e:	eb09 0203 	add.w	r2, r9, r3
    e932:	1d34      	adds	r4, r6, #4
    e934:	464b      	mov	r3, r9
    e936:	4630      	mov	r0, r6
    e938:	ed90 4a01 	vldr	s8, [r0, #4]
    e93c:	ed54 5a01 	vldr	s11, [r4, #-4]
    e940:	ed91 7a00 	vldr	s14, [r1]
    e944:	edd2 7a00 	vldr	s15, [r2]
    e948:	edd3 4a01 	vldr	s9, [r3, #4]
    e94c:	ed92 5a01 	vldr	s10, [r2, #4]
    e950:	ed93 6a00 	vldr	s12, [r3]
    e954:	edd1 6a01 	vldr	s13, [r1, #4]
    e958:	ee35 0a87 	vadd.f32	s0, s11, s14
    e95c:	ee34 8a26 	vadd.f32	s16, s8, s13
    e960:	ee76 8a27 	vadd.f32	s17, s12, s15
    e964:	ee74 6a66 	vsub.f32	s13, s8, s13
    e968:	ee36 6a67 	vsub.f32	s12, s12, s15
    e96c:	ee75 5ac7 	vsub.f32	s11, s11, s14
    e970:	ee74 7ac5 	vsub.f32	s15, s9, s10
    e974:	ee74 0a85 	vadd.f32	s1, s9, s10
    e978:	ee35 7ae7 	vsub.f32	s14, s11, s15
    e97c:	ee78 4a60 	vsub.f32	s9, s16, s1
    e980:	ee35 5aa7 	vadd.f32	s10, s11, s15
    e984:	ee30 4a68 	vsub.f32	s8, s0, s17
    e988:	ee76 5ac6 	vsub.f32	s11, s13, s12
    e98c:	ee76 7a26 	vadd.f32	s15, s12, s13
    e990:	ee22 aa04 	vmul.f32	s20, s4, s8
    e994:	ee62 aaa4 	vmul.f32	s21, s5, s9
    e998:	ee22 4a84 	vmul.f32	s8, s5, s8
    e99c:	ee21 9a05 	vmul.f32	s18, s2, s10
    e9a0:	ee61 9aa5 	vmul.f32	s19, s3, s11
    e9a4:	ee63 6a07 	vmul.f32	s13, s6, s14
    e9a8:	ee23 6aa7 	vmul.f32	s12, s7, s15
    e9ac:	ee62 4a24 	vmul.f32	s9, s4, s9
    e9b0:	ee21 5a85 	vmul.f32	s10, s3, s10
    e9b4:	ee61 5a25 	vmul.f32	s11, s2, s11
    e9b8:	ee23 7a87 	vmul.f32	s14, s7, s14
    e9bc:	ee63 7a27 	vmul.f32	s15, s6, s15
    e9c0:	ee78 0a20 	vadd.f32	s1, s16, s1
    e9c4:	ee74 4ac4 	vsub.f32	s9, s9, s8
    e9c8:	ee30 0a28 	vadd.f32	s0, s0, s17
    e9cc:	ee3a 8a8a 	vadd.f32	s16, s21, s20
    e9d0:	ee39 4a89 	vadd.f32	s8, s19, s18
    e9d4:	ee75 5ac5 	vsub.f32	s11, s11, s10
    e9d8:	ee76 6a26 	vadd.f32	s13, s12, s13
    e9dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
    e9e0:	445d      	add	r5, fp
    e9e2:	45aa      	cmp	sl, r5
    e9e4:	ed04 0a01 	vstr	s0, [r4, #-4]
    e9e8:	edc0 0a01 	vstr	s1, [r0, #4]
    e9ec:	4464      	add	r4, ip
    e9ee:	ed83 8a00 	vstr	s16, [r3]
    e9f2:	edc3 4a01 	vstr	s9, [r3, #4]
    e9f6:	4460      	add	r0, ip
    e9f8:	ed81 4a00 	vstr	s8, [r1]
    e9fc:	edc1 5a01 	vstr	s11, [r1, #4]
    ea00:	4463      	add	r3, ip
    ea02:	edc2 6a00 	vstr	s13, [r2]
    ea06:	edc2 7a01 	vstr	s15, [r2, #4]
    ea0a:	4461      	add	r1, ip
    ea0c:	4462      	add	r2, ip
    ea0e:	d893      	bhi.n	e938 <arm_radix4_butterfly_f32+0x1e4>
    ea10:	9a01      	ldr	r2, [sp, #4]
    ea12:	9b00      	ldr	r3, [sp, #0]
    ea14:	4417      	add	r7, r2
    ea16:	9a02      	ldr	r2, [sp, #8]
    ea18:	4496      	add	lr, r2
    ea1a:	9a03      	ldr	r2, [sp, #12]
    ea1c:	4490      	add	r8, r2
    ea1e:	9a05      	ldr	r2, [sp, #20]
    ea20:	3301      	adds	r3, #1
    ea22:	4293      	cmp	r3, r2
    ea24:	9300      	str	r3, [sp, #0]
    ea26:	f106 0608 	add.w	r6, r6, #8
    ea2a:	f109 0908 	add.w	r9, r9, #8
    ea2e:	f67f af6f 	bls.w	e910 <arm_radix4_butterfly_f32+0x1bc>
    ea32:	9b06      	ldr	r3, [sp, #24]
    ea34:	9a07      	ldr	r2, [sp, #28]
    ea36:	f8dd b020 	ldr.w	fp, [sp, #32]
    ea3a:	0892      	lsrs	r2, r2, #2
    ea3c:	009b      	lsls	r3, r3, #2
    ea3e:	b29b      	uxth	r3, r3
    ea40:	2a04      	cmp	r2, #4
    ea42:	9207      	str	r2, [sp, #28]
    ea44:	9306      	str	r3, [sp, #24]
    ea46:	d903      	bls.n	ea50 <arm_radix4_butterfly_f32+0x2fc>
    ea48:	ea4f 0ccb 	mov.w	ip, fp, lsl #3
    ea4c:	4618      	mov	r0, r3
    ea4e:	e747      	b.n	e8e0 <arm_radix4_butterfly_f32+0x18c>
    ea50:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ea52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ea54:	3320      	adds	r3, #32
    ea56:	ed53 4a04 	vldr	s9, [r3, #-16]
    ea5a:	ed13 6a06 	vldr	s12, [r3, #-24]	; 0xffffffe8
    ea5e:	ed13 5a05 	vldr	s10, [r3, #-20]	; 0xffffffec
    ea62:	ed53 5a01 	vldr	s11, [r3, #-4]
    ea66:	ed53 6a07 	vldr	s13, [r3, #-28]	; 0xffffffe4
    ea6a:	ed13 4a08 	vldr	s8, [r3, #-32]	; 0xffffffe0
    ea6e:	ed53 7a02 	vldr	s15, [r3, #-8]
    ea72:	ed13 7a03 	vldr	s14, [r3, #-12]
    ea76:	ee34 3a24 	vadd.f32	s6, s8, s9
    ea7a:	ee76 3a27 	vadd.f32	s7, s12, s15
    ea7e:	ee34 4a64 	vsub.f32	s8, s8, s9
    ea82:	ee76 7a67 	vsub.f32	s15, s12, s15
    ea86:	ee75 4a65 	vsub.f32	s9, s10, s11
    ea8a:	ee35 6a25 	vadd.f32	s12, s10, s11
    ea8e:	ee76 5a87 	vadd.f32	s11, s13, s14
    ea92:	ee36 7ac7 	vsub.f32	s14, s13, s14
    ea96:	ee73 2a23 	vadd.f32	s5, s6, s7
    ea9a:	ee35 5a86 	vadd.f32	s10, s11, s12
    ea9e:	ee73 3a63 	vsub.f32	s7, s6, s7
    eaa2:	ee77 6a67 	vsub.f32	s13, s14, s15
    eaa6:	ee34 3a24 	vadd.f32	s6, s8, s9
    eaaa:	ee35 6ac6 	vsub.f32	s12, s11, s12
    eaae:	ee74 4a64 	vsub.f32	s9, s8, s9
    eab2:	ee77 7a27 	vadd.f32	s15, s14, s15
    eab6:	3a01      	subs	r2, #1
    eab8:	ed43 2a08 	vstr	s5, [r3, #-32]	; 0xffffffe0
    eabc:	ed43 3a06 	vstr	s7, [r3, #-24]	; 0xffffffe8
    eac0:	ed03 3a04 	vstr	s6, [r3, #-16]
    eac4:	ed43 4a02 	vstr	s9, [r3, #-8]
    eac8:	ed03 5a07 	vstr	s10, [r3, #-28]	; 0xffffffe4
    eacc:	ed03 6a05 	vstr	s12, [r3, #-20]	; 0xffffffec
    ead0:	ed43 6a03 	vstr	s13, [r3, #-12]
    ead4:	ed43 7a01 	vstr	s15, [r3, #-4]
    ead8:	f103 0320 	add.w	r3, r3, #32
    eadc:	d1bb      	bne.n	ea56 <arm_radix4_butterfly_f32+0x302>
    eade:	b00d      	add	sp, #52	; 0x34
    eae0:	ecbd 8b06 	vpop	{d8-d10}
    eae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000eae8 <arm_radix4_butterfly_inverse_f32>:
    eae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eaec:	ed2d 8b08 	vpush	{d8-d11}
    eaf0:	b08d      	sub	sp, #52	; 0x34
    eaf2:	461f      	mov	r7, r3
    eaf4:	9700      	str	r7, [sp, #0]
    eaf6:	468a      	mov	sl, r1
    eaf8:	9c00      	ldr	r4, [sp, #0]
    eafa:	9009      	str	r0, [sp, #36]	; 0x24
    eafc:	0889      	lsrs	r1, r1, #2
    eafe:	460d      	mov	r5, r1
    eb00:	9103      	str	r1, [sp, #12]
    eb02:	eb00 1101 	add.w	r1, r0, r1, lsl #4
    eb06:	46ab      	mov	fp, r5
    eb08:	ea4f 0cc5 	mov.w	ip, r5, lsl #3
    eb0c:	eba1 08c5 	sub.w	r8, r1, r5, lsl #3
    eb10:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    eb14:	0125      	lsls	r5, r4, #4
    eb16:	00e4      	lsls	r4, r4, #3
    eb18:	9402      	str	r4, [sp, #8]
    eb1a:	9501      	str	r5, [sp, #4]
    eb1c:	4606      	mov	r6, r0
    eb1e:	4691      	mov	r9, r2
    eb20:	eb07 0e47 	add.w	lr, r7, r7, lsl #1
    eb24:	f10c 0004 	add.w	r0, ip, #4
    eb28:	f8cd b010 	str.w	fp, [sp, #16]
    eb2c:	f8dd b008 	ldr.w	fp, [sp, #8]
    eb30:	f8cd a008 	str.w	sl, [sp, #8]
    eb34:	f8dd a004 	ldr.w	sl, [sp, #4]
    eb38:	920a      	str	r2, [sp, #40]	; 0x28
    eb3a:	4430      	add	r0, r6
    eb3c:	4632      	mov	r2, r6
    eb3e:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
    eb42:	4647      	mov	r7, r8
    eb44:	ea4f 0ece 	mov.w	lr, lr, lsl #3
    eb48:	3604      	adds	r6, #4
    eb4a:	464d      	mov	r5, r9
    eb4c:	464c      	mov	r4, r9
    eb4e:	edd2 4a01 	vldr	s9, [r2, #4]
    eb52:	ed10 4a01 	vldr	s8, [r0, #-4]
    eb56:	ed16 6a01 	vldr	s12, [r6, #-4]
    eb5a:	edd1 6a00 	vldr	s13, [r1]
    eb5e:	ed97 7a01 	vldr	s14, [r7, #4]
    eb62:	edd3 7a01 	vldr	s15, [r3, #4]
    eb66:	edd3 5a00 	vldr	s11, [r3]
    eb6a:	ed91 5a01 	vldr	s10, [r1, #4]
    eb6e:	edd9 3a01 	vldr	s7, [r9, #4]
    eb72:	ed99 3a00 	vldr	s6, [r9]
    eb76:	ee36 2a26 	vadd.f32	s4, s12, s13
    eb7a:	ee74 2a25 	vadd.f32	s5, s8, s11
    eb7e:	ee34 1a85 	vadd.f32	s2, s9, s10
    eb82:	ee77 1a27 	vadd.f32	s3, s14, s15
    eb86:	ee32 8a22 	vadd.f32	s16, s4, s5
    eb8a:	ee71 0a21 	vadd.f32	s1, s2, s3
    eb8e:	ee36 6a66 	vsub.f32	s12, s12, s13
    eb92:	ee74 5a65 	vsub.f32	s11, s8, s11
    eb96:	ee34 5ac5 	vsub.f32	s10, s9, s10
    eb9a:	ee37 7a67 	vsub.f32	s14, s14, s15
    eb9e:	ed06 8a01 	vstr	s16, [r6, #-4]
    eba2:	edc2 0a01 	vstr	s1, [r2, #4]
    eba6:	ed94 4a00 	vldr	s8, [r4]
    ebaa:	edd5 6a00 	vldr	s13, [r5]
    ebae:	edd5 7a01 	vldr	s15, [r5, #4]
    ebb2:	ee72 4a62 	vsub.f32	s9, s4, s5
    ebb6:	ee71 1a61 	vsub.f32	s3, s2, s3
    ebba:	ee75 2a85 	vadd.f32	s5, s11, s10
    ebbe:	ed94 1a01 	vldr	s2, [r4, #4]
    ebc2:	ee36 2a47 	vsub.f32	s4, s12, s14
    ebc6:	ee36 7a07 	vadd.f32	s14, s12, s14
    ebca:	ee35 6a65 	vsub.f32	s12, s10, s11
    ebce:	ee62 0a04 	vmul.f32	s1, s4, s8
    ebd2:	ee23 5aa4 	vmul.f32	s10, s7, s9
    ebd6:	ee22 4a84 	vmul.f32	s8, s5, s8
    ebda:	ee22 2a01 	vmul.f32	s4, s4, s2
    ebde:	ee67 5a26 	vmul.f32	s11, s14, s13
    ebe2:	ee22 1a81 	vmul.f32	s2, s5, s2
    ebe6:	ee66 6a26 	vmul.f32	s13, s12, s13
    ebea:	ee63 2a24 	vmul.f32	s5, s6, s9
    ebee:	ee26 6a27 	vmul.f32	s12, s12, s15
    ebf2:	ee23 3a21 	vmul.f32	s6, s6, s3
    ebf6:	ee67 7a27 	vmul.f32	s15, s14, s15
    ebfa:	ee63 1aa1 	vmul.f32	s3, s7, s3
    ebfe:	ee72 4a04 	vadd.f32	s9, s4, s8
    ec02:	ee70 3ac1 	vsub.f32	s7, s1, s2
    ec06:	ee32 4ae1 	vsub.f32	s8, s5, s3
    ec0a:	ee35 5a03 	vadd.f32	s10, s10, s6
    ec0e:	ee35 7ac6 	vsub.f32	s14, s11, s12
    ec12:	ee77 7aa6 	vadd.f32	s15, s15, s13
    ec16:	3208      	adds	r2, #8
    ec18:	4542      	cmp	r2, r8
    ec1a:	ed00 4a01 	vstr	s8, [r0, #-4]
    ec1e:	f106 0608 	add.w	r6, r6, #8
    ec22:	ed87 5a01 	vstr	s10, [r7, #4]
    ec26:	44d1      	add	r9, sl
    ec28:	edc1 3a00 	vstr	s7, [r1]
    ec2c:	edc1 4a01 	vstr	s9, [r1, #4]
    ec30:	445c      	add	r4, fp
    ec32:	ed83 7a00 	vstr	s14, [r3]
    ec36:	edc3 7a01 	vstr	s15, [r3, #4]
    ec3a:	4475      	add	r5, lr
    ec3c:	f100 0008 	add.w	r0, r0, #8
    ec40:	f107 0708 	add.w	r7, r7, #8
    ec44:	f101 0108 	add.w	r1, r1, #8
    ec48:	f103 0308 	add.w	r3, r3, #8
    ec4c:	f47f af7f 	bne.w	eb4e <arm_radix4_butterfly_inverse_f32+0x66>
    ec50:	9b00      	ldr	r3, [sp, #0]
    ec52:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    ec56:	f8dd b010 	ldr.w	fp, [sp, #16]
    ec5a:	f8dd a008 	ldr.w	sl, [sp, #8]
    ec5e:	920b      	str	r2, [sp, #44]	; 0x2c
    ec60:	009b      	lsls	r3, r3, #2
    ec62:	b29b      	uxth	r3, r3
    ec64:	2a04      	cmp	r2, #4
    ec66:	9306      	str	r3, [sp, #24]
    ec68:	f240 80ba 	bls.w	ede0 <arm_radix4_butterfly_inverse_f32+0x2f8>
    ec6c:	9806      	ldr	r0, [sp, #24]
    ec6e:	9207      	str	r2, [sp, #28]
    ec70:	ea4f 039b 	mov.w	r3, fp, lsr #2
    ec74:	4619      	mov	r1, r3
    ec76:	9308      	str	r3, [sp, #32]
    ec78:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    ec7c:	1e4a      	subs	r2, r1, #1
    ec7e:	00db      	lsls	r3, r3, #3
    ec80:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    ec82:	9205      	str	r2, [sp, #20]
    ec84:	9e09      	ldr	r6, [sp, #36]	; 0x24
    ec86:	9303      	str	r3, [sp, #12]
    ec88:	010a      	lsls	r2, r1, #4
    ec8a:	0103      	lsls	r3, r0, #4
    ec8c:	9204      	str	r2, [sp, #16]
    ec8e:	9302      	str	r3, [sp, #8]
    ec90:	00c2      	lsls	r2, r0, #3
    ec92:	2300      	movs	r3, #0
    ec94:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
    ec98:	9201      	str	r2, [sp, #4]
    ec9a:	46b8      	mov	r8, r7
    ec9c:	46be      	mov	lr, r7
    ec9e:	9300      	str	r3, [sp, #0]
    eca0:	9b04      	ldr	r3, [sp, #16]
    eca2:	ed97 1a00 	vldr	s2, [r7]
    eca6:	edd7 1a01 	vldr	s3, [r7, #4]
    ecaa:	ed9e 2a00 	vldr	s4, [lr]
    ecae:	edde 2a01 	vldr	s5, [lr, #4]
    ecb2:	ed98 3a00 	vldr	s6, [r8]
    ecb6:	edd8 3a01 	vldr	s7, [r8, #4]
    ecba:	9d00      	ldr	r5, [sp, #0]
    ecbc:	18f1      	adds	r1, r6, r3
    ecbe:	eb09 0203 	add.w	r2, r9, r3
    ecc2:	1d34      	adds	r4, r6, #4
    ecc4:	464b      	mov	r3, r9
    ecc6:	4630      	mov	r0, r6
    ecc8:	ed90 4a01 	vldr	s8, [r0, #4]
    eccc:	ed14 6a01 	vldr	s12, [r4, #-4]
    ecd0:	ed91 7a00 	vldr	s14, [r1]
    ecd4:	edd2 7a00 	vldr	s15, [r2]
    ecd8:	ed93 5a01 	vldr	s10, [r3, #4]
    ecdc:	edd1 4a01 	vldr	s9, [r1, #4]
    ece0:	edd2 5a01 	vldr	s11, [r2, #4]
    ece4:	edd3 6a00 	vldr	s13, [r3]
    ece8:	ee76 0a07 	vadd.f32	s1, s12, s14
    ecec:	ee36 8aa7 	vadd.f32	s16, s13, s15
    ecf0:	ee36 6a47 	vsub.f32	s12, s12, s14
    ecf4:	ee76 6ae7 	vsub.f32	s13, s13, s15
    ecf8:	ee74 8a24 	vadd.f32	s17, s8, s9
    ecfc:	ee74 7a64 	vsub.f32	s15, s8, s9
    ed00:	ee35 7a65 	vsub.f32	s14, s10, s11
    ed04:	ee35 4a25 	vadd.f32	s8, s10, s11
    ed08:	ee70 4ac8 	vsub.f32	s9, s1, s16
    ed0c:	ee76 5a47 	vsub.f32	s11, s12, s14
    ed10:	ee38 5ac4 	vsub.f32	s10, s17, s8
    ed14:	ee36 7a07 	vadd.f32	s14, s12, s14
    ed18:	ee36 6aa7 	vadd.f32	s12, s13, s15
    ed1c:	ee77 7ae6 	vsub.f32	s15, s15, s13
    ed20:	ee22 ba24 	vmul.f32	s22, s4, s9
    ed24:	ee62 aa85 	vmul.f32	s21, s5, s10
    ed28:	ee62 4aa4 	vmul.f32	s9, s5, s9
    ed2c:	ee21 aa25 	vmul.f32	s20, s2, s11
    ed30:	ee61 9a86 	vmul.f32	s19, s3, s12
    ed34:	ee23 9a07 	vmul.f32	s18, s6, s14
    ed38:	ee63 6aa7 	vmul.f32	s13, s7, s15
    ed3c:	ee22 5a05 	vmul.f32	s10, s4, s10
    ed40:	ee61 5aa5 	vmul.f32	s11, s3, s11
    ed44:	ee21 6a06 	vmul.f32	s12, s2, s12
    ed48:	ee23 7a87 	vmul.f32	s14, s7, s14
    ed4c:	ee63 7a27 	vmul.f32	s15, s6, s15
    ed50:	ee70 0a88 	vadd.f32	s1, s1, s16
    ed54:	ee34 5a85 	vadd.f32	s10, s9, s10
    ed58:	ee38 4a84 	vadd.f32	s8, s17, s8
    ed5c:	ee3b 8a6a 	vsub.f32	s16, s22, s21
    ed60:	ee7a 4a69 	vsub.f32	s9, s20, s19
    ed64:	ee35 6a86 	vadd.f32	s12, s11, s12
    ed68:	ee79 6a66 	vsub.f32	s13, s18, s13
    ed6c:	ee77 7a27 	vadd.f32	s15, s14, s15
    ed70:	445d      	add	r5, fp
    ed72:	45aa      	cmp	sl, r5
    ed74:	ed44 0a01 	vstr	s1, [r4, #-4]
    ed78:	ed80 4a01 	vstr	s8, [r0, #4]
    ed7c:	4464      	add	r4, ip
    ed7e:	ed83 8a00 	vstr	s16, [r3]
    ed82:	ed83 5a01 	vstr	s10, [r3, #4]
    ed86:	4460      	add	r0, ip
    ed88:	edc1 4a00 	vstr	s9, [r1]
    ed8c:	ed81 6a01 	vstr	s12, [r1, #4]
    ed90:	4463      	add	r3, ip
    ed92:	edc2 6a00 	vstr	s13, [r2]
    ed96:	edc2 7a01 	vstr	s15, [r2, #4]
    ed9a:	4461      	add	r1, ip
    ed9c:	4462      	add	r2, ip
    ed9e:	d893      	bhi.n	ecc8 <arm_radix4_butterfly_inverse_f32+0x1e0>
    eda0:	9a01      	ldr	r2, [sp, #4]
    eda2:	9b00      	ldr	r3, [sp, #0]
    eda4:	4417      	add	r7, r2
    eda6:	9a02      	ldr	r2, [sp, #8]
    eda8:	4496      	add	lr, r2
    edaa:	9a03      	ldr	r2, [sp, #12]
    edac:	4490      	add	r8, r2
    edae:	9a05      	ldr	r2, [sp, #20]
    edb0:	3301      	adds	r3, #1
    edb2:	4293      	cmp	r3, r2
    edb4:	9300      	str	r3, [sp, #0]
    edb6:	f106 0608 	add.w	r6, r6, #8
    edba:	f109 0908 	add.w	r9, r9, #8
    edbe:	f67f af6f 	bls.w	eca0 <arm_radix4_butterfly_inverse_f32+0x1b8>
    edc2:	9b06      	ldr	r3, [sp, #24]
    edc4:	9a07      	ldr	r2, [sp, #28]
    edc6:	f8dd b020 	ldr.w	fp, [sp, #32]
    edca:	0892      	lsrs	r2, r2, #2
    edcc:	009b      	lsls	r3, r3, #2
    edce:	b29b      	uxth	r3, r3
    edd0:	2a04      	cmp	r2, #4
    edd2:	9207      	str	r2, [sp, #28]
    edd4:	9306      	str	r3, [sp, #24]
    edd6:	d903      	bls.n	ede0 <arm_radix4_butterfly_inverse_f32+0x2f8>
    edd8:	ea4f 0ccb 	mov.w	ip, fp, lsl #3
    eddc:	4618      	mov	r0, r3
    edde:	e747      	b.n	ec70 <arm_radix4_butterfly_inverse_f32+0x188>
    ede0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ede2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ede4:	3320      	adds	r3, #32
    ede6:	ed53 4a04 	vldr	s9, [r3, #-16]
    edea:	ed13 6a06 	vldr	s12, [r3, #-24]	; 0xffffffe8
    edee:	ed13 5a05 	vldr	s10, [r3, #-20]	; 0xffffffec
    edf2:	ed53 5a01 	vldr	s11, [r3, #-4]
    edf6:	ed53 6a07 	vldr	s13, [r3, #-28]	; 0xffffffe4
    edfa:	ed13 4a08 	vldr	s8, [r3, #-32]	; 0xffffffe0
    edfe:	ed53 7a02 	vldr	s15, [r3, #-8]
    ee02:	ed13 7a03 	vldr	s14, [r3, #-12]
    ee06:	ee34 3a24 	vadd.f32	s6, s8, s9
    ee0a:	ee76 3a27 	vadd.f32	s7, s12, s15
    ee0e:	ee34 4a64 	vsub.f32	s8, s8, s9
    ee12:	ee76 7a67 	vsub.f32	s15, s12, s15
    ee16:	ee75 4a65 	vsub.f32	s9, s10, s11
    ee1a:	ee35 6a25 	vadd.f32	s12, s10, s11
    ee1e:	ee76 5a87 	vadd.f32	s11, s13, s14
    ee22:	ee36 7ac7 	vsub.f32	s14, s13, s14
    ee26:	ee73 2a23 	vadd.f32	s5, s6, s7
    ee2a:	ee74 6a24 	vadd.f32	s13, s8, s9
    ee2e:	ee37 5a27 	vadd.f32	s10, s14, s15
    ee32:	ee73 3a63 	vsub.f32	s7, s6, s7
    ee36:	ee77 7a67 	vsub.f32	s15, s14, s15
    ee3a:	ee34 3a64 	vsub.f32	s6, s8, s9
    ee3e:	ee75 4a86 	vadd.f32	s9, s11, s12
    ee42:	ee35 6ac6 	vsub.f32	s12, s11, s12
    ee46:	ee62 2a80 	vmul.f32	s5, s5, s0
    ee4a:	ee26 7a00 	vmul.f32	s14, s12, s0
    ee4e:	ee63 5a80 	vmul.f32	s11, s7, s0
    ee52:	ee23 4a00 	vmul.f32	s8, s6, s0
    ee56:	ee66 6a80 	vmul.f32	s13, s13, s0
    ee5a:	ee64 4a80 	vmul.f32	s9, s9, s0
    ee5e:	ee25 6a00 	vmul.f32	s12, s10, s0
    ee62:	ee67 7a80 	vmul.f32	s15, s15, s0
    ee66:	3a01      	subs	r2, #1
    ee68:	ed43 2a08 	vstr	s5, [r3, #-32]	; 0xffffffe0
    ee6c:	ed43 5a06 	vstr	s11, [r3, #-24]	; 0xffffffe8
    ee70:	ed03 4a04 	vstr	s8, [r3, #-16]
    ee74:	ed43 6a02 	vstr	s13, [r3, #-8]
    ee78:	ed43 4a07 	vstr	s9, [r3, #-28]	; 0xffffffe4
    ee7c:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
    ee80:	ed03 6a03 	vstr	s12, [r3, #-12]
    ee84:	ed43 7a01 	vstr	s15, [r3, #-4]
    ee88:	f103 0320 	add.w	r3, r3, #32
    ee8c:	d1ab      	bne.n	ede6 <arm_radix4_butterfly_inverse_f32+0x2fe>
    ee8e:	b00d      	add	sp, #52	; 0x34
    ee90:	ecbd 8b08 	vpop	{d8-d11}
    ee94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000ee98 <arm_cfft_radix4_f32>:
    ee98:	b570      	push	{r4, r5, r6, lr}
    ee9a:	7883      	ldrb	r3, [r0, #2]
    ee9c:	2b01      	cmp	r3, #1
    ee9e:	4604      	mov	r4, r0
    eea0:	460d      	mov	r5, r1
    eea2:	d009      	beq.n	eeb8 <arm_cfft_radix4_f32+0x20>
    eea4:	8983      	ldrh	r3, [r0, #12]
    eea6:	6842      	ldr	r2, [r0, #4]
    eea8:	8801      	ldrh	r1, [r0, #0]
    eeaa:	4628      	mov	r0, r5
    eeac:	f7ff fc52 	bl	e754 <arm_radix4_butterfly_f32>
    eeb0:	78e3      	ldrb	r3, [r4, #3]
    eeb2:	2b01      	cmp	r3, #1
    eeb4:	d00b      	beq.n	eece <arm_cfft_radix4_f32+0x36>
    eeb6:	bd70      	pop	{r4, r5, r6, pc}
    eeb8:	8983      	ldrh	r3, [r0, #12]
    eeba:	ed90 0a04 	vldr	s0, [r0, #16]
    eebe:	6842      	ldr	r2, [r0, #4]
    eec0:	8801      	ldrh	r1, [r0, #0]
    eec2:	4628      	mov	r0, r5
    eec4:	f7ff fe10 	bl	eae8 <arm_radix4_butterfly_inverse_f32>
    eec8:	78e3      	ldrb	r3, [r4, #3]
    eeca:	2b01      	cmp	r3, #1
    eecc:	d1f3      	bne.n	eeb6 <arm_cfft_radix4_f32+0x1e>
    eece:	4628      	mov	r0, r5
    eed0:	68a3      	ldr	r3, [r4, #8]
    eed2:	89e2      	ldrh	r2, [r4, #14]
    eed4:	8821      	ldrh	r1, [r4, #0]
    eed6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    eeda:	f000 b8e9 	b.w	f0b0 <arm_bitreversal_f32>
    eede:	bf00      	nop

0000eee0 <arm_cmplx_mag_f32>:
    eee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eee4:	ea5f 0892 	movs.w	r8, r2, lsr #2
    eee8:	b084      	sub	sp, #16
    eeea:	d07f      	beq.n	efec <arm_cmplx_mag_f32+0x10c>
    eeec:	2700      	movs	r7, #0
    eeee:	f100 0420 	add.w	r4, r0, #32
    eef2:	f101 0510 	add.w	r5, r1, #16
    eef6:	4646      	mov	r6, r8
    eef8:	e05a      	b.n	efb0 <arm_cmplx_mag_f32+0xd0>
    eefa:	eeb1 0ae7 	vsqrt.f32	s0, s15
    eefe:	eeb4 0a40 	vcmp.f32	s0, s0
    ef02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ef06:	f040 80a4 	bne.w	f052 <arm_cmplx_mag_f32+0x172>
    ef0a:	ed05 0a04 	vstr	s0, [r5, #-16]
    ef0e:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
    ef12:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
    ef16:	ee67 7aa7 	vmul.f32	s15, s15, s15
    ef1a:	ee20 0a00 	vmul.f32	s0, s0, s0
    ef1e:	ee77 7a80 	vadd.f32	s15, s15, s0
    ef22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    ef26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ef2a:	f2c0 808f 	blt.w	f04c <arm_cmplx_mag_f32+0x16c>
    ef2e:	eeb1 0ae7 	vsqrt.f32	s0, s15
    ef32:	eeb4 0a40 	vcmp.f32	s0, s0
    ef36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ef3a:	f040 80af 	bne.w	f09c <arm_cmplx_mag_f32+0x1bc>
    ef3e:	ed05 0a03 	vstr	s0, [r5, #-12]
    ef42:	ed54 7a04 	vldr	s15, [r4, #-16]
    ef46:	ed14 0a03 	vldr	s0, [r4, #-12]
    ef4a:	ee67 7aa7 	vmul.f32	s15, s15, s15
    ef4e:	ee20 0a00 	vmul.f32	s0, s0, s0
    ef52:	ee77 7a80 	vadd.f32	s15, s15, s0
    ef56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    ef5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ef5e:	db72      	blt.n	f046 <arm_cmplx_mag_f32+0x166>
    ef60:	eeb1 0ae7 	vsqrt.f32	s0, s15
    ef64:	eeb4 0a40 	vcmp.f32	s0, s0
    ef68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ef6c:	f040 808c 	bne.w	f088 <arm_cmplx_mag_f32+0x1a8>
    ef70:	ed05 0a02 	vstr	s0, [r5, #-8]
    ef74:	ed54 7a02 	vldr	s15, [r4, #-8]
    ef78:	ed14 0a01 	vldr	s0, [r4, #-4]
    ef7c:	ee67 7aa7 	vmul.f32	s15, s15, s15
    ef80:	ee20 0a00 	vmul.f32	s0, s0, s0
    ef84:	ee77 7a80 	vadd.f32	s15, s15, s0
    ef88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    ef8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ef90:	db20      	blt.n	efd4 <arm_cmplx_mag_f32+0xf4>
    ef92:	eeb1 0ae7 	vsqrt.f32	s0, s15
    ef96:	eeb4 0a40 	vcmp.f32	s0, s0
    ef9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ef9e:	d169      	bne.n	f074 <arm_cmplx_mag_f32+0x194>
    efa0:	3e01      	subs	r6, #1
    efa2:	ed05 0a01 	vstr	s0, [r5, #-4]
    efa6:	f104 0420 	add.w	r4, r4, #32
    efaa:	f105 0510 	add.w	r5, r5, #16
    efae:	d019      	beq.n	efe4 <arm_cmplx_mag_f32+0x104>
    efb0:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
    efb4:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
    efb8:	ee67 7aa7 	vmul.f32	s15, s15, s15
    efbc:	ee20 0a00 	vmul.f32	s0, s0, s0
    efc0:	ee77 7a80 	vadd.f32	s15, s15, s0
    efc4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    efc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    efcc:	da95      	bge.n	eefa <arm_cmplx_mag_f32+0x1a>
    efce:	f845 7c10 	str.w	r7, [r5, #-16]
    efd2:	e79c      	b.n	ef0e <arm_cmplx_mag_f32+0x2e>
    efd4:	3e01      	subs	r6, #1
    efd6:	f845 7c04 	str.w	r7, [r5, #-4]
    efda:	f104 0420 	add.w	r4, r4, #32
    efde:	f105 0510 	add.w	r5, r5, #16
    efe2:	d1e5      	bne.n	efb0 <arm_cmplx_mag_f32+0xd0>
    efe4:	eb00 1048 	add.w	r0, r0, r8, lsl #5
    efe8:	eb01 1108 	add.w	r1, r1, r8, lsl #4
    efec:	f012 0503 	ands.w	r5, r2, #3
    eff0:	d026      	beq.n	f040 <arm_cmplx_mag_f32+0x160>
    eff2:	2600      	movs	r6, #0
    eff4:	f100 0408 	add.w	r4, r0, #8
    eff8:	e00c      	b.n	f014 <arm_cmplx_mag_f32+0x134>
    effa:	eeb1 0ae7 	vsqrt.f32	s0, s15
    effe:	eeb4 0a40 	vcmp.f32	s0, s0
    f002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f006:	d12e      	bne.n	f066 <arm_cmplx_mag_f32+0x186>
    f008:	3d01      	subs	r5, #1
    f00a:	ed01 0a01 	vstr	s0, [r1, #-4]
    f00e:	f104 0408 	add.w	r4, r4, #8
    f012:	d015      	beq.n	f040 <arm_cmplx_mag_f32+0x160>
    f014:	ed54 7a02 	vldr	s15, [r4, #-8]
    f018:	ed14 0a01 	vldr	s0, [r4, #-4]
    f01c:	ee67 7aa7 	vmul.f32	s15, s15, s15
    f020:	ee20 0a00 	vmul.f32	s0, s0, s0
    f024:	3104      	adds	r1, #4
    f026:	ee77 7a80 	vadd.f32	s15, s15, s0
    f02a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    f02e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f032:	dae2      	bge.n	effa <arm_cmplx_mag_f32+0x11a>
    f034:	3d01      	subs	r5, #1
    f036:	f841 6c04 	str.w	r6, [r1, #-4]
    f03a:	f104 0408 	add.w	r4, r4, #8
    f03e:	d1e9      	bne.n	f014 <arm_cmplx_mag_f32+0x134>
    f040:	b004      	add	sp, #16
    f042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f046:	f845 7c08 	str.w	r7, [r5, #-8]
    f04a:	e793      	b.n	ef74 <arm_cmplx_mag_f32+0x94>
    f04c:	f845 7c0c 	str.w	r7, [r5, #-12]
    f050:	e777      	b.n	ef42 <arm_cmplx_mag_f32+0x62>
    f052:	eeb0 0a67 	vmov.f32	s0, s15
    f056:	9203      	str	r2, [sp, #12]
    f058:	9102      	str	r1, [sp, #8]
    f05a:	9001      	str	r0, [sp, #4]
    f05c:	f000 f8b8 	bl	f1d0 <sqrtf>
    f060:	a801      	add	r0, sp, #4
    f062:	c807      	ldmia	r0, {r0, r1, r2}
    f064:	e751      	b.n	ef0a <arm_cmplx_mag_f32+0x2a>
    f066:	eeb0 0a67 	vmov.f32	s0, s15
    f06a:	9101      	str	r1, [sp, #4]
    f06c:	f000 f8b0 	bl	f1d0 <sqrtf>
    f070:	9901      	ldr	r1, [sp, #4]
    f072:	e7c9      	b.n	f008 <arm_cmplx_mag_f32+0x128>
    f074:	eeb0 0a67 	vmov.f32	s0, s15
    f078:	9203      	str	r2, [sp, #12]
    f07a:	9102      	str	r1, [sp, #8]
    f07c:	9001      	str	r0, [sp, #4]
    f07e:	f000 f8a7 	bl	f1d0 <sqrtf>
    f082:	a801      	add	r0, sp, #4
    f084:	c807      	ldmia	r0, {r0, r1, r2}
    f086:	e78b      	b.n	efa0 <arm_cmplx_mag_f32+0xc0>
    f088:	eeb0 0a67 	vmov.f32	s0, s15
    f08c:	9203      	str	r2, [sp, #12]
    f08e:	9102      	str	r1, [sp, #8]
    f090:	9001      	str	r0, [sp, #4]
    f092:	f000 f89d 	bl	f1d0 <sqrtf>
    f096:	a801      	add	r0, sp, #4
    f098:	c807      	ldmia	r0, {r0, r1, r2}
    f09a:	e769      	b.n	ef70 <arm_cmplx_mag_f32+0x90>
    f09c:	eeb0 0a67 	vmov.f32	s0, s15
    f0a0:	9203      	str	r2, [sp, #12]
    f0a2:	9102      	str	r1, [sp, #8]
    f0a4:	9001      	str	r0, [sp, #4]
    f0a6:	f000 f893 	bl	f1d0 <sqrtf>
    f0aa:	a801      	add	r0, sp, #4
    f0ac:	c807      	ldmia	r0, {r0, r1, r2}
    f0ae:	e746      	b.n	ef3e <arm_cmplx_mag_f32+0x5e>

0000f0b0 <arm_bitreversal_f32>:
    f0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f0b4:	b085      	sub	sp, #20
    f0b6:	0849      	lsrs	r1, r1, #1
    f0b8:	0052      	lsls	r2, r2, #1
    f0ba:	2400      	movs	r4, #0
    f0bc:	9203      	str	r2, [sp, #12]
    f0be:	1e8a      	subs	r2, r1, #2
    f0c0:	9101      	str	r1, [sp, #4]
    f0c2:	f101 0c01 	add.w	ip, r1, #1
    f0c6:	9202      	str	r2, [sp, #8]
    f0c8:	4621      	mov	r1, r4
    f0ca:	4622      	mov	r2, r4
    f0cc:	9d01      	ldr	r5, [sp, #4]
    f0ce:	3101      	adds	r1, #1
    f0d0:	442a      	add	r2, r5
    f0d2:	00c9      	lsls	r1, r1, #3
    f0d4:	00d2      	lsls	r2, r2, #3
    f0d6:	1846      	adds	r6, r0, r1
    f0d8:	1885      	adds	r5, r0, r2
    f0da:	3104      	adds	r1, #4
    f0dc:	3204      	adds	r2, #4
    f0de:	6837      	ldr	r7, [r6, #0]
    f0e0:	f8d5 e000 	ldr.w	lr, [r5]
    f0e4:	f8c6 e000 	str.w	lr, [r6]
    f0e8:	4401      	add	r1, r0
    f0ea:	4402      	add	r2, r0
    f0ec:	602f      	str	r7, [r5, #0]
    f0ee:	3402      	adds	r4, #2
    f0f0:	680e      	ldr	r6, [r1, #0]
    f0f2:	f8d2 9000 	ldr.w	r9, [r2]
    f0f6:	f8c1 9000 	str.w	r9, [r1]
    f0fa:	b2a4      	uxth	r4, r4
    f0fc:	6016      	str	r6, [r2, #0]
    f0fe:	eb04 050c 	add.w	r5, r4, ip
    f102:	881a      	ldrh	r2, [r3, #0]
    f104:	00ed      	lsls	r5, r5, #3
    f106:	eb00 0e05 	add.w	lr, r0, r5
    f10a:	3504      	adds	r5, #4
    f10c:	9500      	str	r5, [sp, #0]
    f10e:	eb02 010c 	add.w	r1, r2, ip
    f112:	9d02      	ldr	r5, [sp, #8]
    f114:	00c9      	lsls	r1, r1, #3
    f116:	00e7      	lsls	r7, r4, #3
    f118:	00d6      	lsls	r6, r2, #3
    f11a:	f101 0b04 	add.w	fp, r1, #4
    f11e:	eb00 0901 	add.w	r9, r0, r1
    f122:	42ac      	cmp	r4, r5
    f124:	9903      	ldr	r1, [sp, #12]
    f126:	9d00      	ldr	r5, [sp, #0]
    f128:	eb00 0807 	add.w	r8, r0, r7
    f12c:	eb00 0a06 	add.w	sl, r0, r6
    f130:	f107 0704 	add.w	r7, r7, #4
    f134:	f106 0604 	add.w	r6, r6, #4
    f138:	440b      	add	r3, r1
    f13a:	4407      	add	r7, r0
    f13c:	4406      	add	r6, r0
    f13e:	4621      	mov	r1, r4
    f140:	4405      	add	r5, r0
    f142:	4483      	add	fp, r0
    f144:	d820      	bhi.n	f188 <arm_bitreversal_f32+0xd8>
    f146:	42a2      	cmp	r2, r4
    f148:	d9c0      	bls.n	f0cc <arm_bitreversal_f32+0x1c>
    f14a:	edd8 7a00 	vldr	s15, [r8]
    f14e:	ed9a 7a00 	vldr	s14, [sl]
    f152:	ed88 7a00 	vstr	s14, [r8]
    f156:	edca 7a00 	vstr	s15, [sl]
    f15a:	f8d7 8000 	ldr.w	r8, [r7]
    f15e:	f8d6 a000 	ldr.w	sl, [r6]
    f162:	f8c7 a000 	str.w	sl, [r7]
    f166:	f8c6 8000 	str.w	r8, [r6]
    f16a:	f8de 6000 	ldr.w	r6, [lr]
    f16e:	f8d9 7000 	ldr.w	r7, [r9]
    f172:	f8ce 7000 	str.w	r7, [lr]
    f176:	f8c9 6000 	str.w	r6, [r9]
    f17a:	682e      	ldr	r6, [r5, #0]
    f17c:	f8db 7000 	ldr.w	r7, [fp]
    f180:	602f      	str	r7, [r5, #0]
    f182:	f8cb 6000 	str.w	r6, [fp]
    f186:	e7a1      	b.n	f0cc <arm_bitreversal_f32+0x1c>
    f188:	b005      	add	sp, #20
    f18a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f18e:	bf00      	nop

0000f190 <am_bsp_itm_printf_enable>:
    f190:	b500      	push	{lr}
    f192:	4b0b      	ldr	r3, [pc, #44]	; (f1c0 <am_bsp_itm_printf_enable+0x30>)
    f194:	b087      	sub	sp, #28
    f196:	2201      	movs	r2, #1
    f198:	601a      	str	r2, [r3, #0]
    f19a:	f000 f8eb 	bl	f374 <am_hal_itm_enable>
    f19e:	a806      	add	r0, sp, #24
    f1a0:	4b08      	ldr	r3, [pc, #32]	; (f1c4 <am_bsp_itm_printf_enable+0x34>)
    f1a2:	f840 3d14 	str.w	r3, [r0, #-20]!
    f1a6:	f000 f91b 	bl	f3e0 <am_hal_tpiu_enable>
    f1aa:	4b07      	ldr	r3, [pc, #28]	; (f1c8 <am_bsp_itm_printf_enable+0x38>)
    f1ac:	2029      	movs	r0, #41	; 0x29
    f1ae:	6819      	ldr	r1, [r3, #0]
    f1b0:	f7fe fde0 	bl	dd74 <am_hal_gpio_pinconfig>
    f1b4:	4805      	ldr	r0, [pc, #20]	; (f1cc <am_bsp_itm_printf_enable+0x3c>)
    f1b6:	f7fd ff27 	bl	d008 <am_util_stdio_printf_init>
    f1ba:	b007      	add	sp, #28
    f1bc:	f85d fb04 	ldr.w	pc, [sp], #4
    f1c0:	10001560 	.word	0x10001560
    f1c4:	000f4240 	.word	0x000f4240
    f1c8:	00018348 	.word	0x00018348
    f1cc:	0000f3b1 	.word	0x0000f3b1

0000f1d0 <sqrtf>:
    f1d0:	b510      	push	{r4, lr}
    f1d2:	ed2d 8b02 	vpush	{d8}
    f1d6:	4c2a      	ldr	r4, [pc, #168]	; (f280 <sqrtf+0xb0>)
    f1d8:	b08a      	sub	sp, #40	; 0x28
    f1da:	eef0 8a40 	vmov.f32	s17, s0
    f1de:	f000 f853 	bl	f288 <__ieee754_sqrtf>
    f1e2:	f994 3000 	ldrsb.w	r3, [r4]
    f1e6:	3301      	adds	r3, #1
    f1e8:	eeb0 8a40 	vmov.f32	s16, s0
    f1ec:	d009      	beq.n	f202 <sqrtf+0x32>
    f1ee:	eeb0 0a68 	vmov.f32	s0, s17
    f1f2:	f000 f89d 	bl	f330 <__fpclassifyf>
    f1f6:	b120      	cbz	r0, f202 <sqrtf+0x32>
    f1f8:	eef5 8ac0 	vcmpe.f32	s17, #0.0
    f1fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f200:	d405      	bmi.n	f20e <sqrtf+0x3e>
    f202:	eeb0 0a48 	vmov.f32	s0, s16
    f206:	b00a      	add	sp, #40	; 0x28
    f208:	ecbd 8b02 	vpop	{d8}
    f20c:	bd10      	pop	{r4, pc}
    f20e:	2301      	movs	r3, #1
    f210:	4a1c      	ldr	r2, [pc, #112]	; (f284 <sqrtf+0xb4>)
    f212:	9300      	str	r3, [sp, #0]
    f214:	ee18 0a90 	vmov	r0, s17
    f218:	2300      	movs	r3, #0
    f21a:	9201      	str	r2, [sp, #4]
    f21c:	9308      	str	r3, [sp, #32]
    f21e:	f7fd f8d3 	bl	c3c8 <__aeabi_f2d>
    f222:	7824      	ldrb	r4, [r4, #0]
    f224:	e9cd 0104 	strd	r0, r1, [sp, #16]
    f228:	e9cd 0102 	strd	r0, r1, [sp, #8]
    f22c:	b99c      	cbnz	r4, f256 <sqrtf+0x86>
    f22e:	2200      	movs	r2, #0
    f230:	2300      	movs	r3, #0
    f232:	e9cd 2306 	strd	r2, r3, [sp, #24]
    f236:	4668      	mov	r0, sp
    f238:	f000 f878 	bl	f32c <matherr>
    f23c:	b1a8      	cbz	r0, f26a <sqrtf+0x9a>
    f23e:	9b08      	ldr	r3, [sp, #32]
    f240:	b9c3      	cbnz	r3, f274 <sqrtf+0xa4>
    f242:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    f246:	f7fd f913 	bl	c470 <__aeabi_d2f>
    f24a:	ee00 0a10 	vmov	s0, r0
    f24e:	b00a      	add	sp, #40	; 0x28
    f250:	ecbd 8b02 	vpop	{d8}
    f254:	bd10      	pop	{r4, pc}
    f256:	2000      	movs	r0, #0
    f258:	2100      	movs	r1, #0
    f25a:	4602      	mov	r2, r0
    f25c:	460b      	mov	r3, r1
    f25e:	f7fd fa81 	bl	c764 <__aeabi_ddiv>
    f262:	2c02      	cmp	r4, #2
    f264:	e9cd 0106 	strd	r0, r1, [sp, #24]
    f268:	d1e5      	bne.n	f236 <sqrtf+0x66>
    f26a:	f000 f87d 	bl	f368 <__errno>
    f26e:	2321      	movs	r3, #33	; 0x21
    f270:	6003      	str	r3, [r0, #0]
    f272:	e7e4      	b.n	f23e <sqrtf+0x6e>
    f274:	f000 f878 	bl	f368 <__errno>
    f278:	9b08      	ldr	r3, [sp, #32]
    f27a:	6003      	str	r3, [r0, #0]
    f27c:	e7e1      	b.n	f242 <sqrtf+0x72>
    f27e:	bf00      	nop
    f280:	10001020 	.word	0x10001020
    f284:	0001834c 	.word	0x0001834c

0000f288 <__ieee754_sqrtf>:
    f288:	ee10 3a10 	vmov	r3, s0
    f28c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    f290:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
    f294:	b470      	push	{r4, r5, r6}
    f296:	d230      	bcs.n	f2fa <__ieee754_sqrtf+0x72>
    f298:	b36a      	cbz	r2, f2f6 <__ieee754_sqrtf+0x6e>
    f29a:	2b00      	cmp	r3, #0
    f29c:	db3d      	blt.n	f31a <__ieee754_sqrtf+0x92>
    f29e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    f2a2:	ea4f 51e3 	mov.w	r1, r3, asr #23
    f2a6:	d32c      	bcc.n	f302 <__ieee754_sqrtf+0x7a>
    f2a8:	f1a1 027f 	sub.w	r2, r1, #127	; 0x7f
    f2ac:	f3c3 0316 	ubfx	r3, r3, #0, #23
    f2b0:	07d1      	lsls	r1, r2, #31
    f2b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    f2b6:	bf48      	it	mi
    f2b8:	005b      	lslmi	r3, r3, #1
    f2ba:	2400      	movs	r4, #0
    f2bc:	1056      	asrs	r6, r2, #1
    f2be:	005b      	lsls	r3, r3, #1
    f2c0:	4625      	mov	r5, r4
    f2c2:	2119      	movs	r1, #25
    f2c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    f2c8:	18a8      	adds	r0, r5, r2
    f2ca:	4298      	cmp	r0, r3
    f2cc:	dc02      	bgt.n	f2d4 <__ieee754_sqrtf+0x4c>
    f2ce:	1a1b      	subs	r3, r3, r0
    f2d0:	1885      	adds	r5, r0, r2
    f2d2:	4414      	add	r4, r2
    f2d4:	3901      	subs	r1, #1
    f2d6:	ea4f 0343 	mov.w	r3, r3, lsl #1
    f2da:	ea4f 0252 	mov.w	r2, r2, lsr #1
    f2de:	d1f3      	bne.n	f2c8 <__ieee754_sqrtf+0x40>
    f2e0:	b113      	cbz	r3, f2e8 <__ieee754_sqrtf+0x60>
    f2e2:	f004 0301 	and.w	r3, r4, #1
    f2e6:	441c      	add	r4, r3
    f2e8:	1064      	asrs	r4, r4, #1
    f2ea:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
    f2ee:	eb04 53c6 	add.w	r3, r4, r6, lsl #23
    f2f2:	ee00 3a10 	vmov	s0, r3
    f2f6:	bc70      	pop	{r4, r5, r6}
    f2f8:	4770      	bx	lr
    f2fa:	eea0 0a00 	vfma.f32	s0, s0, s0
    f2fe:	bc70      	pop	{r4, r5, r6}
    f300:	4770      	bx	lr
    f302:	f413 0200 	ands.w	r2, r3, #8388608	; 0x800000
    f306:	d10d      	bne.n	f324 <__ieee754_sqrtf+0x9c>
    f308:	005b      	lsls	r3, r3, #1
    f30a:	0218      	lsls	r0, r3, #8
    f30c:	f102 0201 	add.w	r2, r2, #1
    f310:	d5fa      	bpl.n	f308 <__ieee754_sqrtf+0x80>
    f312:	f1c2 0201 	rsb	r2, r2, #1
    f316:	4411      	add	r1, r2
    f318:	e7c6      	b.n	f2a8 <__ieee754_sqrtf+0x20>
    f31a:	ee30 0a40 	vsub.f32	s0, s0, s0
    f31e:	ee80 0a00 	vdiv.f32	s0, s0, s0
    f322:	e7e8      	b.n	f2f6 <__ieee754_sqrtf+0x6e>
    f324:	2201      	movs	r2, #1
    f326:	4411      	add	r1, r2
    f328:	e7be      	b.n	f2a8 <__ieee754_sqrtf+0x20>
    f32a:	bf00      	nop

0000f32c <matherr>:
    f32c:	2000      	movs	r0, #0
    f32e:	4770      	bx	lr

0000f330 <__fpclassifyf>:
    f330:	ee10 3a10 	vmov	r3, s0
    f334:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
    f338:	d101      	bne.n	f33e <__fpclassifyf+0xe>
    f33a:	2002      	movs	r0, #2
    f33c:	4770      	bx	lr
    f33e:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
    f342:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
    f346:	d201      	bcs.n	f34c <__fpclassifyf+0x1c>
    f348:	2004      	movs	r0, #4
    f34a:	4770      	bx	lr
    f34c:	4b05      	ldr	r3, [pc, #20]	; (f364 <__fpclassifyf+0x34>)
    f34e:	1e42      	subs	r2, r0, #1
    f350:	429a      	cmp	r2, r3
    f352:	d801      	bhi.n	f358 <__fpclassifyf+0x28>
    f354:	2003      	movs	r0, #3
    f356:	4770      	bx	lr
    f358:	f1a0 40ff 	sub.w	r0, r0, #2139095040	; 0x7f800000
    f35c:	fab0 f080 	clz	r0, r0
    f360:	0940      	lsrs	r0, r0, #5
    f362:	4770      	bx	lr
    f364:	007ffffe 	.word	0x007ffffe

0000f368 <__errno>:
    f368:	4b01      	ldr	r3, [pc, #4]	; (f370 <__errno+0x8>)
    f36a:	6818      	ldr	r0, [r3, #0]
    f36c:	4770      	bx	lr
    f36e:	bf00      	nop
    f370:	10001450 	.word	0x10001450

0000f374 <am_hal_itm_enable>:
    f374:	4a0b      	ldr	r2, [pc, #44]	; (f3a4 <am_hal_itm_enable+0x30>)
    f376:	68d3      	ldr	r3, [r2, #12]
    f378:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    f37c:	60d3      	str	r3, [r2, #12]
    f37e:	68d3      	ldr	r3, [r2, #12]
    f380:	01db      	lsls	r3, r3, #7
    f382:	d5fc      	bpl.n	f37e <am_hal_itm_enable+0xa>
    f384:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    f388:	4907      	ldr	r1, [pc, #28]	; (f3a8 <am_hal_itm_enable+0x34>)
    f38a:	f8c3 1fb0 	str.w	r1, [r3, #4016]	; 0xfb0
    f38e:	4a07      	ldr	r2, [pc, #28]	; (f3ac <am_hal_itm_enable+0x38>)
    f390:	200f      	movs	r0, #15
    f392:	f04f 31ff 	mov.w	r1, #4294967295
    f396:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    f39a:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    f39e:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    f3a2:	4770      	bx	lr
    f3a4:	e000edf0 	.word	0xe000edf0
    f3a8:	c5acce55 	.word	0xc5acce55
    f3ac:	00150511 	.word	0x00150511

0000f3b0 <am_hal_itm_print>:
    f3b0:	7803      	ldrb	r3, [r0, #0]
    f3b2:	b1a3      	cbz	r3, f3de <am_hal_itm_print+0x2e>
    f3b4:	4602      	mov	r2, r0
    f3b6:	2300      	movs	r3, #0
    f3b8:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    f3bc:	3301      	adds	r3, #1
    f3be:	2900      	cmp	r1, #0
    f3c0:	d1fa      	bne.n	f3b8 <am_hal_itm_print+0x8>
    f3c2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    f3c6:	b430      	push	{r4, r5}
    f3c8:	18c1      	adds	r1, r0, r3
    f3ca:	4615      	mov	r5, r2
    f3cc:	f810 4b01 	ldrb.w	r4, [r0], #1
    f3d0:	6813      	ldr	r3, [r2, #0]
    f3d2:	2b00      	cmp	r3, #0
    f3d4:	d0fc      	beq.n	f3d0 <am_hal_itm_print+0x20>
    f3d6:	4288      	cmp	r0, r1
    f3d8:	702c      	strb	r4, [r5, #0]
    f3da:	d1f7      	bne.n	f3cc <am_hal_itm_print+0x1c>
    f3dc:	bc30      	pop	{r4, r5}
    f3de:	4770      	bx	lr

0000f3e0 <am_hal_tpiu_enable>:
    f3e0:	b530      	push	{r4, r5, lr}
    f3e2:	4a23      	ldr	r2, [pc, #140]	; (f470 <am_hal_tpiu_enable+0x90>)
    f3e4:	6804      	ldr	r4, [r0, #0]
    f3e6:	2300      	movs	r3, #0
    f3e8:	b085      	sub	sp, #20
    f3ea:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    f3ee:	b334      	cbz	r4, f43e <am_hal_tpiu_enable+0x5e>
    f3f0:	4b20      	ldr	r3, [pc, #128]	; (f474 <am_hal_tpiu_enable+0x94>)
    f3f2:	4921      	ldr	r1, [pc, #132]	; (f478 <am_hal_tpiu_enable+0x98>)
    f3f4:	2001      	movs	r0, #1
    f3f6:	6050      	str	r0, [r2, #4]
    f3f8:	f5a4 4261 	sub.w	r2, r4, #57600	; 0xe100
    f3fc:	a801      	add	r0, sp, #4
    f3fe:	428a      	cmp	r2, r1
    f400:	bf88      	it	hi
    f402:	461c      	movhi	r4, r3
    f404:	f7fe fc88 	bl	dd18 <am_hal_clkgen_status_get>
    f408:	9b01      	ldr	r3, [sp, #4]
    f40a:	1c5a      	adds	r2, r3, #1
    f40c:	d02d      	beq.n	f46a <am_hal_tpiu_enable+0x8a>
    f40e:	08db      	lsrs	r3, r3, #3
    f410:	fbb3 f3f4 	udiv	r3, r3, r4
    f414:	3b01      	subs	r3, #1
    f416:	b29b      	uxth	r3, r3
    f418:	4a15      	ldr	r2, [pc, #84]	; (f470 <am_hal_tpiu_enable+0x90>)
    f41a:	4918      	ldr	r1, [pc, #96]	; (f47c <am_hal_tpiu_enable+0x9c>)
    f41c:	6113      	str	r3, [r2, #16]
    f41e:	2402      	movs	r4, #2
    f420:	f240 2301 	movw	r3, #513	; 0x201
    f424:	2000      	movs	r0, #0
    f426:	f8c2 40f0 	str.w	r4, [r2, #240]	; 0xf0
    f42a:	f8c2 0f00 	str.w	r0, [r2, #3840]	; 0xf00
    f42e:	f8c1 3250 	str.w	r3, [r1, #592]	; 0x250
    f432:	f44f 7048 	mov.w	r0, #800	; 0x320
    f436:	f7fe fc8d 	bl	dd54 <am_hal_flash_delay>
    f43a:	b005      	add	sp, #20
    f43c:	bd30      	pop	{r4, r5, pc}
    f43e:	6903      	ldr	r3, [r0, #16]
    f440:	6113      	str	r3, [r2, #16]
    f442:	6883      	ldr	r3, [r0, #8]
    f444:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    f448:	68c3      	ldr	r3, [r0, #12]
    f44a:	4d0c      	ldr	r5, [pc, #48]	; (f47c <am_hal_tpiu_enable+0x9c>)
    f44c:	1e59      	subs	r1, r3, #1
    f44e:	2301      	movs	r3, #1
    f450:	408b      	lsls	r3, r1
    f452:	6053      	str	r3, [r2, #4]
    f454:	f8c2 4f00 	str.w	r4, [r2, #3840]	; 0xf00
    f458:	6843      	ldr	r3, [r0, #4]
    f45a:	f8c5 3250 	str.w	r3, [r5, #592]	; 0x250
    f45e:	f44f 7048 	mov.w	r0, #800	; 0x320
    f462:	f7fe fc77 	bl	dd54 <am_hal_flash_delay>
    f466:	b005      	add	sp, #20
    f468:	bd30      	pop	{r4, r5, pc}
    f46a:	2305      	movs	r3, #5
    f46c:	e7d4      	b.n	f418 <am_hal_tpiu_enable+0x38>
    f46e:	bf00      	nop
    f470:	e0040000 	.word	0xe0040000
    f474:	000f4240 	.word	0x000f4240
    f478:	001da380 	.word	0x001da380
    f47c:	40020000 	.word	0x40020000
    f480:	74746553 	.word	0x74746553
    f484:	73676e69 	.word	0x73676e69
    f488:	00000a3a 	.word	0x00000a3a
    f48c:	204d4450 	.word	0x204d4450
    f490:	636f6c43 	.word	0x636f6c43
    f494:	4828206b 	.word	0x4828206b
    f498:	203a297a 	.word	0x203a297a
    f49c:	20202020 	.word	0x20202020
    f4a0:	20202020 	.word	0x20202020
    f4a4:	64323125 	.word	0x64323125
    f4a8:	0000000a 	.word	0x0000000a
    f4ac:	69636544 	.word	0x69636544
    f4b0:	6974616d 	.word	0x6974616d
    f4b4:	52206e6f 	.word	0x52206e6f
    f4b8:	3a657461 	.word	0x3a657461
    f4bc:	20202020 	.word	0x20202020
    f4c0:	20202020 	.word	0x20202020
    f4c4:	64323125 	.word	0x64323125
    f4c8:	0000000a 	.word	0x0000000a
    f4cc:	65666645 	.word	0x65666645
    f4d0:	76697463 	.word	0x76697463
    f4d4:	61532065 	.word	0x61532065
    f4d8:	656c706d 	.word	0x656c706d
    f4dc:	65724620 	.word	0x65724620
    f4e0:	203a2e71 	.word	0x203a2e71
    f4e4:	64323125 	.word	0x64323125
    f4e8:	0000000a 	.word	0x0000000a
    f4ec:	20544646 	.word	0x20544646
    f4f0:	676e654c 	.word	0x676e654c
    f4f4:	203a6874 	.word	0x203a6874
    f4f8:	20202020 	.word	0x20202020
    f4fc:	20202020 	.word	0x20202020
    f500:	20202020 	.word	0x20202020
    f504:	64323125 	.word	0x64323125
    f508:	00000a0a 	.word	0x00000a0a
    f50c:	20544646 	.word	0x20544646
    f510:	6f736552 	.word	0x6f736552
    f514:	6974756c 	.word	0x6974756c
    f518:	203a6e6f 	.word	0x203a6e6f
    f51c:	2e353125 	.word	0x2e353125
    f520:	48206633 	.word	0x48206633
    f524:	00000a7a 	.word	0x00000a7a
    f528:	64756f4c 	.word	0x64756f4c
    f52c:	20747365 	.word	0x20747365
    f530:	71657266 	.word	0x71657266
    f534:	636e6575 	.word	0x636e6575
    f538:	25203a79 	.word	0x25203a79
    f53c:	20202064 	.word	0x20202064
    f540:	20202020 	.word	0x20202020
    f544:	0a0d2020 	.word	0x0a0d2020
    f548:	00000000 	.word	0x00000000
    f54c:	204d4450 	.word	0x204d4450
    f550:	20544646 	.word	0x20544646
    f554:	6d617865 	.word	0x6d617865
    f558:	2e656c70 	.word	0x2e656c70
    f55c:	00000a0a 	.word	0x00000a0a

0000f560 <CSWTCH.15>:
    f560:	00000001 00000002 00000003 00000004     ................

0000f570 <CSWTCH.16>:
    f570:	00b71b00 005b8d80 002dc6c0 0016e360     ......[...-.`...
    f580:	000b71b0 0005b8d8 0002da78 64726148     .q......x...Hard
    f590:	75614620 7320746c 6b636174 64206465      Fault stacked d
    f5a0:	3a617461 0000000a 20202020 20203052     ata:....    R0  
    f5b0:	7830203d 58383025 0000000a 20202020     = 0x%08X....    
    f5c0:	20203152 7830203d 58383025 0000000a     R1  = 0x%08X....
    f5d0:	20202020 20203252 7830203d 58383025         R2  = 0x%08X
    f5e0:	0000000a 20202020 20203352 7830203d     ....    R3  = 0x
    f5f0:	58383025 0000000a 20202020 20323152     %08X....    R12 
    f600:	7830203d 58383025 0000000a 20202020     = 0x%08X....    
    f610:	2020524c 7830203d 58383025 0000000a     LR  = 0x%08X....
    f620:	20202020 20204350 7830203d 58383025         PC  = 0x%08X
    f630:	0000000a 20202020 20525350 7830203d     ....    PSR = 0x
    f640:	58383025 0000000a 6568744f 61482072     %08X....Other Ha
    f650:	46206472 746c7561 74616420 000a3a61     rd Fault data:..
    f660:	20202020 6c756146 64612074 73657264         Fault addres
    f670:	203d2073 30257830 000a5838 20202020     s = 0x%08X..    
    f680:	52414642 75422820 61462073 20746c75     BFAR (Bus Fault 
    f690:	72646441 67655220 203d2029 30257830     Addr Reg) = 0x%0
    f6a0:	000a5838 20202020 52534d4d 654d2820     8X..    MMSR (Me
    f6b0:	674d206d 4620746d 746c7561 61745320     m Mgmt Fault Sta
    f6c0:	20737574 29676552 30203d20 32302578     tus Reg) = 0x%02
    f6d0:	00000a58 20202020 52534642 75422820     X...    BFSR (Bu
    f6e0:	61462073 20746c75 74617453 52207375     s Fault Status R
    f6f0:	20296765 7830203d 58323025 0000000a     eg) = 0x%02X....
    f700:	20202020 52534655 73552820 20656761         UFSR (Usage 
    f710:	6c756146 74532074 73757461 67655220     Fault Status Reg
    f720:	203d2029 30257830 000a5834 20202020     ) = 0x%04X..    
    f730:	20202020 52534642 74696220 42203a37         BFSR bit7: B
    f740:	56524146 44494c41 0000000a 20202020     FARVALID....    
    f750:	20202020 52534642 74696220 52203a36         BFSR bit6: R
    f760:	52455345 0a444556 00000000 20202020     ESERVED.....    
    f770:	20202020 52534642 74696220 4c203a35         BFSR bit5: L
    f780:	52455053 00000a52 20202020 20202020     SPERR...        
    f790:	52534642 74696220 53203a34 52454b54     BFSR bit4: STKER
    f7a0:	00000a52 20202020 20202020 52534642     R...        BFSR
    f7b0:	74696220 55203a33 4b54534e 0a525245      bit3: UNSTKERR.
    f7c0:	00000000 20202020 20202020 52534642     ....        BFSR
    f7d0:	74696220 49203a32 4552504d 45534943      bit2: IMPRECISE
    f7e0:	000a5252 20202020 20202020 52534642     RR..        BFSR
    f7f0:	74696220 50203a31 49434552 52454553      bit1: PRECISEER
    f800:	00000a52 20202020 20202020 52534642     R...        BFSR
    f810:	74696220 49203a30 45535542 000a5252      bit0: IBUSERR..
    f820:	2055434d 6c756146 61642074 0a3a6174     MCU Fault data:.
    f830:	00000000 49202020 45444f43 75614620     ....   ICODE Fau
    f840:	4120746c 65726464 203a7373 30257830     lt Address: 0x%0
    f850:	000a5838 44202020 45444f43 75614620     8X..   DCODE Fau
    f860:	4120746c 65726464 203a7373 30257830     lt Address: 0x%0
    f870:	000a5838 53202020 46205359 746c7561     8X..   SYS Fault
    f880:	64644120 73736572 7830203a 58383025      Address: 0x%08X
    f890:	0000000a 0a0a0a0a 0a0a0a0a 0a0a0a0a     ................
    f8a0:	0a0a0a0a 00000a0a                       ........

0000f8a8 <am_hal_cachectrl_defaults>:
    f8a8:	00000308                                ....

0000f8ac <g_ui8Bit76Capabilities>:
    f8ac:	02800101 80010180 80800101 80808080     ................
    f8bc:	80808080 80808008 01800180 80808080     ................
    f8cc:	80808080 01800402 01010401 80808080     ................
    f8dc:	00000101                                ....

0000f8e0 <g_ui8NCEtable>:
    f8e0:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    f8f0:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    f900:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    f910:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    f920:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    f930:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    f940:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    f950:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    f960:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    f970:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    f980:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    f990:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    f9a0:	32221202 43231303                       .."2..#C

0000f9a8 <g_ui8Inpen>:
    f9a8:	e2242323 100723a1 e1004303 3561a151     ##$..#...C..Q.a5
    f9b8:	4181c525 d160b001 31a13130 1100f101     %..A..`.01.1....
    f9c8:	01d121b1 300511e5 31301037 40006100     .!.....07.01.a.@
    f9d8:	00003130                                01..

0000f9dc <g_AM_HAL_GPIO_DISABLE>:
    f9dc:	00000003                                ....

0000f9e0 <g_ui8nCEpins>:
    f9e0:	02070707 00080802 01020202 01010101     ................
    f9f0:	01010101 01010101 01010101 01010101     ................
    fa00:	01010101 08010101 01010008 01010101     ................
    fa10:	00000101                                ....

0000fa14 <g_am_hal_mcuctrl_flash_size>:
    fa14:	00004000 00008000 00010000 00020000     .@..............
    fa24:	00040000 00080000 00100000 00200000     .............. .
	...

0000fa54 <g_am_hal_mcuctrl_sram_size>:
    fa54:	00004000 00008000 00010000 00020000     .@..............
    fa64:	00040000 00080000 00100000 00060000     ................
	...

0000fa94 <am_hal_pwrctrl_peripheral_control>:
	...
    faa0:	00000001 00000004 00000004 00000002     ................
    fab0:	00000008 00000008 00000004 00000008     ................
    fac0:	00000008 00000008 00000008 00000008     ................
    fad0:	00000010 00000010 00000010 00000020     ............ ...
    fae0:	00000010 00000010 00000040 00000010     ........@.......
    faf0:	00000010 00000080 00000004 00000004     ................
    fb00:	00000100 00000004 00000004 00000200     ................
    fb10:	00000020 00000020 00000400 00000004      ... ...........
    fb20:	00000004 00000800 00000040 00000040     ........@...@...
    fb30:	00001000 00000080 00000080 00002000     ............. ..
    fb40:	00000100 00000100                       ........

0000fb48 <armBitRevTable>:
    fb48:	02000400 01000600 03000500 00800700     ................
    fb58:	02800480 01800680 03800580 00400780     ..............@.
    fb68:	02400440 01400640 03400540 00c00740     @.@.@.@.@.@.@...
    fb78:	02c004c0 01c006c0 03c005c0 002007c0     .............. .
    fb88:	02200420 01200620 03200520 00a00720      . . . . . . ...
    fb98:	02a004a0 01a006a0 03a005a0 006007a0     ..............`.
    fba8:	02600460 01600660 03600560 00e00760     `.`.`.`.`.`.`...
    fbb8:	02e004e0 01e006e0 03e005e0 001007e0     ................
    fbc8:	02100410 01100610 03100510 00900710     ................
    fbd8:	02900490 01900690 03900590 00500790     ..............P.
    fbe8:	02500450 01500650 03500550 00d00750     P.P.P.P.P.P.P...
    fbf8:	02d004d0 01d006d0 03d005d0 003007d0     ..............0.
    fc08:	02300430 01300630 03300530 00b00730     0.0.0.0.0.0.0...
    fc18:	02b004b0 01b006b0 03b005b0 007007b0     ..............p.
    fc28:	02700470 01700670 03700570 00f00770     p.p.p.p.p.p.p...
    fc38:	02f004f0 01f006f0 03f005f0 000807f0     ................
    fc48:	02080408 01080608 03080508 00880708     ................
    fc58:	02880488 01880688 03880588 00480788     ..............H.
    fc68:	02480448 01480648 03480548 00c80748     H.H.H.H.H.H.H...
    fc78:	02c804c8 01c806c8 03c805c8 002807c8     ..............(.
    fc88:	02280428 01280628 03280528 00a80728     (.(.(.(.(.(.(...
    fc98:	02a804a8 01a806a8 03a805a8 006807a8     ..............h.
    fca8:	02680468 01680668 03680568 00e80768     h.h.h.h.h.h.h...
    fcb8:	02e804e8 01e806e8 03e805e8 001807e8     ................
    fcc8:	02180418 01180618 03180518 00980718     ................
    fcd8:	02980498 01980698 03980598 00580798     ..............X.
    fce8:	02580458 01580658 03580558 00d80758     X.X.X.X.X.X.X...
    fcf8:	02d804d8 01d806d8 03d805d8 003807d8     ..............8.
    fd08:	02380438 01380638 03380538 00b80738     8.8.8.8.8.8.8...
    fd18:	02b804b8 01b806b8 03b805b8 007807b8     ..............x.
    fd28:	02780478 01780678 03780578 00f80778     x.x.x.x.x.x.x...
    fd38:	02f804f8 01f806f8 03f805f8 000407f8     ................
    fd48:	02040404 01040604 03040504 00840704     ................
    fd58:	02840484 01840684 03840584 00440784     ..............D.
    fd68:	02440444 01440644 03440544 00c40744     D.D.D.D.D.D.D...
    fd78:	02c404c4 01c406c4 03c405c4 002407c4     ..............$.
    fd88:	02240424 01240624 03240524 00a40724     $.$.$.$.$.$.$...
    fd98:	02a404a4 01a406a4 03a405a4 006407a4     ..............d.
    fda8:	02640464 01640664 03640564 00e40764     d.d.d.d.d.d.d...
    fdb8:	02e404e4 01e406e4 03e405e4 001407e4     ................
    fdc8:	02140414 01140614 03140514 00940714     ................
    fdd8:	02940494 01940694 03940594 00540794     ..............T.
    fde8:	02540454 01540654 03540554 00d40754     T.T.T.T.T.T.T...
    fdf8:	02d404d4 01d406d4 03d405d4 003407d4     ..............4.
    fe08:	02340434 01340634 03340534 00b40734     4.4.4.4.4.4.4...
    fe18:	02b404b4 01b406b4 03b405b4 007407b4     ..............t.
    fe28:	02740474 01740674 03740574 00f40774     t.t.t.t.t.t.t...
    fe38:	02f404f4 01f406f4 03f405f4 000c07f4     ................
    fe48:	020c040c 010c060c 030c050c 008c070c     ................
    fe58:	028c048c 018c068c 038c058c 004c078c     ..............L.
    fe68:	024c044c 014c064c 034c054c 00cc074c     L.L.L.L.L.L.L...
    fe78:	02cc04cc 01cc06cc 03cc05cc 002c07cc     ..............,.
    fe88:	022c042c 012c062c 032c052c 00ac072c     ,.,.,.,.,.,.,...
    fe98:	02ac04ac 01ac06ac 03ac05ac 006c07ac     ..............l.
    fea8:	026c046c 016c066c 036c056c 00ec076c     l.l.l.l.l.l.l...
    feb8:	02ec04ec 01ec06ec 03ec05ec 001c07ec     ................
    fec8:	021c041c 011c061c 031c051c 009c071c     ................
    fed8:	029c049c 019c069c 039c059c 005c079c     ..............\.
    fee8:	025c045c 015c065c 035c055c 00dc075c     \.\.\.\.\.\.\...
    fef8:	02dc04dc 01dc06dc 03dc05dc 003c07dc     ..............<.
    ff08:	023c043c 013c063c 033c053c 00bc073c     <.<.<.<.<.<.<...
    ff18:	02bc04bc 01bc06bc 03bc05bc 007c07bc     ..............|.
    ff28:	027c047c 017c067c 037c057c 00fc077c     |.|.|.|.|.|.|...
    ff38:	02fc04fc 01fc06fc 03fc05fc 000207fc     ................
    ff48:	02020402 01020602 03020502 00820702     ................
    ff58:	02820482 01820682 03820582 00420782     ..............B.
    ff68:	02420442 01420642 03420542 00c20742     B.B.B.B.B.B.B...
    ff78:	02c204c2 01c206c2 03c205c2 002207c2     ..............".
    ff88:	02220422 01220622 03220522 00a20722     "."."."."."."...
    ff98:	02a204a2 01a206a2 03a205a2 006207a2     ..............b.
    ffa8:	02620462 01620662 03620562 00e20762     b.b.b.b.b.b.b...
    ffb8:	02e204e2 01e206e2 03e205e2 001207e2     ................
    ffc8:	02120412 01120612 03120512 00920712     ................
    ffd8:	02920492 01920692 03920592 00520792     ..............R.
    ffe8:	02520452 01520652 03520552 00d20752     R.R.R.R.R.R.R...
    fff8:	02d204d2 01d206d2 03d205d2 003207d2     ..............2.
   10008:	02320432 01320632 03320532 00b20732     2.2.2.2.2.2.2...
   10018:	02b204b2 01b206b2 03b205b2 007207b2     ..............r.
   10028:	02720472 01720672 03720572 00f20772     r.r.r.r.r.r.r...
   10038:	02f204f2 01f206f2 03f205f2 000a07f2     ................
   10048:	020a040a 010a060a 030a050a 008a070a     ................
   10058:	028a048a 018a068a 038a058a 004a078a     ..............J.
   10068:	024a044a 014a064a 034a054a 00ca074a     J.J.J.J.J.J.J...
   10078:	02ca04ca 01ca06ca 03ca05ca 002a07ca     ..............*.
   10088:	022a042a 012a062a 032a052a 00aa072a     *.*.*.*.*.*.*...
   10098:	02aa04aa 01aa06aa 03aa05aa 006a07aa     ..............j.
   100a8:	026a046a 016a066a 036a056a 00ea076a     j.j.j.j.j.j.j...
   100b8:	02ea04ea 01ea06ea 03ea05ea 001a07ea     ................
   100c8:	021a041a 011a061a 031a051a 009a071a     ................
   100d8:	029a049a 019a069a 039a059a 005a079a     ..............Z.
   100e8:	025a045a 015a065a 035a055a 00da075a     Z.Z.Z.Z.Z.Z.Z...
   100f8:	02da04da 01da06da 03da05da 003a07da     ..............:.
   10108:	023a043a 013a063a 033a053a 00ba073a     :.:.:.:.:.:.:...
   10118:	02ba04ba 01ba06ba 03ba05ba 007a07ba     ..............z.
   10128:	027a047a 017a067a 037a057a 00fa077a     z.z.z.z.z.z.z...
   10138:	02fa04fa 01fa06fa 03fa05fa 000607fa     ................
   10148:	02060406 01060606 03060506 00860706     ................
   10158:	02860486 01860686 03860586 00460786     ..............F.
   10168:	02460446 01460646 03460546 00c60746     F.F.F.F.F.F.F...
   10178:	02c604c6 01c606c6 03c605c6 002607c6     ..............&.
   10188:	02260426 01260626 03260526 00a60726     &.&.&.&.&.&.&...
   10198:	02a604a6 01a606a6 03a605a6 006607a6     ..............f.
   101a8:	02660466 01660666 03660566 00e60766     f.f.f.f.f.f.f...
   101b8:	02e604e6 01e606e6 03e605e6 001607e6     ................
   101c8:	02160416 01160616 03160516 00960716     ................
   101d8:	02960496 01960696 03960596 00560796     ..............V.
   101e8:	02560456 01560656 03560556 00d60756     V.V.V.V.V.V.V...
   101f8:	02d604d6 01d606d6 03d605d6 003607d6     ..............6.
   10208:	02360436 01360636 03360536 00b60736     6.6.6.6.6.6.6...
   10218:	02b604b6 01b606b6 03b605b6 007607b6     ..............v.
   10228:	02760476 01760676 03760576 00f60776     v.v.v.v.v.v.v...
   10238:	02f604f6 01f606f6 03f605f6 000e07f6     ................
   10248:	020e040e 010e060e 030e050e 008e070e     ................
   10258:	028e048e 018e068e 038e058e 004e078e     ..............N.
   10268:	024e044e 014e064e 034e054e 00ce074e     N.N.N.N.N.N.N...
   10278:	02ce04ce 01ce06ce 03ce05ce 002e07ce     ................
   10288:	022e042e 012e062e 032e052e 00ae072e     ................
   10298:	02ae04ae 01ae06ae 03ae05ae 006e07ae     ..............n.
   102a8:	026e046e 016e066e 036e056e 00ee076e     n.n.n.n.n.n.n...
   102b8:	02ee04ee 01ee06ee 03ee05ee 001e07ee     ................
   102c8:	021e041e 011e061e 031e051e 009e071e     ................
   102d8:	029e049e 019e069e 039e059e 005e079e     ..............^.
   102e8:	025e045e 015e065e 035e055e 00de075e     ^.^.^.^.^.^.^...
   102f8:	02de04de 01de06de 03de05de 003e07de     ..............>.
   10308:	023e043e 013e063e 033e053e 00be073e     >.>.>.>.>.>.>...
   10318:	02be04be 01be06be 03be05be 007e07be     ..............~.
   10328:	027e047e 017e067e 037e057e 00fe077e     ~.~.~.~.~.~.~...
   10338:	02fe04fe 01fe06fe 03fe05fe 000107fe     ................

00010348 <twiddleCoef_4096>:
   10348:	3f800000 00000000 3f7fffec 3ac90fd4     ...?.......?...:
   10358:	3f7fffb1 3b490fc7 3f7fff4e 3b96cbc1     ...?..I;N..?...;
   10368:	3f7ffec4 3bc90f89 3f7ffe13 3bfb5330     ...?...;...?0S.;
   10378:	3f7ffd39 3c16cb59 3f7ffc39 3c2fed02     9..?Y..<9..?../<
   10388:	3f7ffb11 3c490e90 3f7ff9c1 3c623000     ...?..I<...?.0b<
   10398:	3f7ff84a 3c7b514b 3f7ff6ac 3c8a3938     J..?KQ{<...?89.<
   103a8:	3f7ff4e6 3c96c9b6 3f7ff2f8 3ca35a1c     ...?...<...?.Z.<
   103b8:	3f7ff0e3 3cafea69 3f7feea7 3cbc7a9b     ...?i..<...?.z.<
   103c8:	3f7fec43 3cc90ab0 3f7fe9b8 3cd59aa6     C..?...<...?...<
   103d8:	3f7fe705 3ce22a7b 3f7fe42b 3ceeba2d     ...?{*.<+..?-..<
   103e8:	3f7fe129 3cfb49b9 3f7fde00 3d03ec90     )..?.I.<...?...=
   103f8:	3f7fdaaf 3d0a342f 3f7fd737 3d107bb8     ...?/4.=7..?.{.=
   10408:	3f7fd398 3d16c32c 3f7fcfd1 3d1d0a88     ...?,..=...?...=
   10418:	3f7fcbe2 3d2351cc 3f7fc7cc 3d2998f6     ...?.Q#=...?..)=
   10428:	3f7fc38f 3d2fe007 3f7fbf2a 3d3626fc     ...?../=*..?.&6=
   10438:	3f7fba9e 3d3c6dd5 3f7fb5ea 3d42b491     ...?.m<=...?..B=
   10448:	3f7fb10f 3d48fb2f 3f7fac0d 3d4f41af     ...?/.H=...?.AO=
   10458:	3f7fa6e3 3d55880e 3f7fa191 3d5bce4c     ...?..U=...?L.[=
   10468:	3f7f9c18 3d621468 3f7f9678 3d685a62     ...?h.b=x..?bZh=
   10478:	3f7f90b1 3d6ea038 3f7f8ac2 3d74e5e9     ...?8.n=...?..t=
   10488:	3f7f84ab 3d7b2b74 3f7f7e6d 3d80b86c     ...?t+{=m~.?l..=
   10498:	3f7f7808 3d83db0a 3f7f717b 3d86fd94     .x.?...={q.?...=
   104a8:	3f7f6ac7 3d8a200a 3f7f63ec 3d8d426a     .j.?. .=.c.?jB.=
   104b8:	3f7f5ce9 3d9064b4 3f7f55bf 3d9386e7     .\.?.d.=.U.?...=
   104c8:	3f7f4e6d 3d96a905 3f7f46f4 3d99cb0a     mN.?...=.F.?...=
   104d8:	3f7f3f54 3d9cecf9 3f7f378d 3da00ecf     T?.?...=.7.?...=
   104e8:	3f7f2f9d 3da3308c 3f7f2787 3da65230     ./.?.0.=.'.?0R.=
   104f8:	3f7f1f49 3da973ba 3f7f16e4 3dac952b     I..?.s.=...?+..=
   10508:	3f7f0e58 3dafb680 3f7f05a4 3db2d7bb     X..?...=...?...=
   10518:	3f7efcc9 3db5f8da 3f7ef3c7 3db919dd     ..~?...=..~?...=
   10528:	3f7eea9d 3dbc3ac3 3f7ee14c 3dbf5b8d     ..~?.:.=L.~?.[.=
   10538:	3f7ed7d4 3dc27c39 3f7ece34 3dc59cc6     ..~?9|.=4.~?...=
   10548:	3f7ec46d 3dc8bd36 3f7eba7f 3dcbdd86     m.~?6..=..~?...=
   10558:	3f7eb069 3dcefdb7 3f7ea62d 3dd21dc8     i.~?...=-.~?...=
   10568:	3f7e9bc9 3dd53db9 3f7e913d 3dd85d89     ..~?.=.==.~?.].=
   10578:	3f7e868b 3ddb7d37 3f7e7bb1 3dde9cc4     ..~?7}.=.{~?...=
   10588:	3f7e70b0 3de1bc2e 3f7e6588 3de4db76     .p~?...=.e~?v..=
   10598:	3f7e5a38 3de7fa9a 3f7e4ec1 3deb199a     8Z~?...=.N~?...=
   105a8:	3f7e4323 3dee3876 3f7e375e 3df1572e     #C~?v8.=^7~?.W.=
   105b8:	3f7e2b72 3df475c0 3f7e1f5e 3df7942c     r+~?.u.=^.~?,..=
   105c8:	3f7e1324 3dfab273 3f7e06c2 3dfdd092     $.~?s..=..~?...=
   105d8:	3f7dfa38 3e007745 3f7ded88 3e02062e     8.}?Ew.>..}?...>
   105e8:	3f7de0b1 3e039502 3f7dd3b2 3e0523c2     ..}?...>..}?.#.>
   105f8:	3f7dc68c 3e06b26e 3f7db940 3e084105     ..}?n..>@.}?.A.>
   10608:	3f7dabcc 3e09cf86 3f7d9e30 3e0b5df3     ..}?...>0.}?.].>
   10618:	3f7d906e 3e0cec4a 3f7d8285 3e0e7a8b     n.}?J..>..}?.z.>
   10628:	3f7d7474 3e1008b7 3f7d663d 3e1196cc     tt}?...>=f}?...>
   10638:	3f7d57de 3e1324ca 3f7d4959 3e14b2b2     .W}?.$.>YI}?...>
   10648:	3f7d3aac 3e164083 3f7d2bd8 3e17ce3d     .:}?.@.>.+}?=..>
   10658:	3f7d1cdd 3e195be0 3f7d0dbc 3e1ae96b     ..}?.[.>..}?k..>
   10668:	3f7cfe73 3e1c76de 3f7cef03 3e1e0438     s.|?.v.>..|?8..>
   10678:	3f7cdf6c 3e1f917b 3f7ccfae 3e211ea5     l.|?{..>..|?..!>
   10688:	3f7cbfc9 3e22abb6 3f7cafbd 3e2438ad     ..|?..">..|?.8$>
   10698:	3f7c9f8a 3e25c58c 3f7c8f31 3e275251     ..|?..%>1.|?QR'>
   106a8:	3f7c7eb0 3e28defc 3f7c6e08 3e2a6b8d     .~|?..(>.n|?.k*>
   106b8:	3f7c5d3a 3e2bf804 3f7c4c44 3e2d8461     :]|?..+>DL|?a.->
   106c8:	3f7c3b28 3e2f10a2 3f7c29e5 3e309cc9     (;|?../>.)|?..0>
   106d8:	3f7c187a 3e3228d4 3f7c06e9 3e33b4c4     z.|?.(2>..|?..3>
   106e8:	3f7bf531 3e354098 3f7be353 3e36cc50     1.{?.@5>S.{?P.6>
   106f8:	3f7bd14d 3e3857ec 3f7bbf20 3e39e36c     M.{?.W8> .{?l.9>
   10708:	3f7baccd 3e3b6ecf 3f7b9a53 3e3cfa15     ..{?.n;>S.{?..<>
   10718:	3f7b87b2 3e3e853e 3f7b74ea 3e401049     ..{?>.>>.t{?I.@>
   10728:	3f7b61fc 3e419b37 3f7b4ee7 3e432607     .a{?7.A>.N{?.&C>
   10738:	3f7b3bab 3e44b0b9 3f7b2848 3e463b4d     .;{?..D>H({?M;F>
   10748:	3f7b14be 3e47c5c2 3f7b010e 3e495018     ..{?..G>..{?.PI>
   10758:	3f7aed37 3e4ada4f 3f7ad93a 3e4c6467     7.z?O.J>:.z?gdL>
   10768:	3f7ac516 3e4dee60 3f7ab0cb 3e4f7838     ..z?`.M>..z?8xO>
   10778:	3f7a9c59 3e5101f1 3f7a87c1 3e528b89     Y.z?..Q>..z?..R>
   10788:	3f7a7302 3e541501 3f7a5e1c 3e559e58     .sz?..T>.^z?X.U>
   10798:	3f7a4910 3e57278f 3f7a33dd 3e58b0a4     .Iz?.'W>.3z?..X>
   107a8:	3f7a1e84 3e5a3997 3f7a0904 3e5bc26a     ..z?.9Z>..z?j.[>
   107b8:	3f79f35e 3e5d4b1a 3f79dd91 3e5ed3a8     ^.y?.K]>..y?..^>
   107c8:	3f79c79d 3e605c13 3f79b183 3e61e45c     ..y?.\`>..y?\.a>
   107d8:	3f799b43 3e636c83 3f7984dc 3e64f486     C.y?.lc>..y?..d>
   107e8:	3f796e4e 3e667c66 3f79579a 3e680422     Nny?f|f>.Wy?".h>
   107f8:	3f7940c0 3e698bba 3f7929bf 3e6b132f     .@y?..i>.)y?/.k>
   10808:	3f791298 3e6c9a7f 3f78fb4a 3e6e21ab     ..y?..l>J.x?.!n>
   10818:	3f78e3d6 3e6fa8b2 3f78cc3b 3e712f94     ..x?..o>;.x?./q>
   10828:	3f78b47b 3e72b651 3f789c93 3e743ce8     {.x?Q.r>..x?.<t>
   10838:	3f788486 3e75c35a 3f786c52 3e7749a6     ..x?Z.u>Rlx?.Iw>
   10848:	3f7853f8 3e78cfcc 3f783b77 3e7a55cb     .Sx?..x>w;x?.Uz>
   10858:	3f7822d1 3e7bdba4 3f780a04 3e7d6156     ."x?..{>..x?Va}>
   10868:	3f77f110 3e7ee6e1 3f77d7f7 3e803622     ..w?..~>..w?"6.>
   10878:	3f77beb7 3e80f8c0 3f77a551 3e81bb4a     ..w?...>Q.w?J..>
   10888:	3f778bc5 3e827dc0 3f777213 3e834022     ..w?.}.>.rw?"@.>
   10898:	3f77583a 3e840270 3f773e3c 3e84c4aa     :Xw?p..><>w?...>
   108a8:	3f772417 3e8586ce 3f7709cc 3e8648df     .$w?...>..w?.H.>
   108b8:	3f76ef5b 3e870ada 3f76d4c4 3e87ccc1     [.v?...>..v?...>
   108c8:	3f76ba07 3e888e93 3f769f24 3e895050     ..v?...>$.v?PP.>
   108d8:	3f76841b 3e8a11f8 3f7668ec 3e8ad38a     ..v?...>.hv?...>
   108e8:	3f764d97 3e8b9507 3f76321b 3e8c566e     .Mv?...>.2v?nV.>
   108f8:	3f76167a 3e8d17c0 3f75fab3 3e8dd8fc     z.v?...>..u?...>
   10908:	3f75dec6 3e8e9a22 3f75c2b3 3e8f5b32     ..u?"..>..u?2[.>
   10918:	3f75a67b 3e901c2c 3f758a1c 3e90dd10     {.u?,..>..u?...>
   10928:	3f756d97 3e919ddd 3f7550ed 3e925e94     .mu?...>.Pu?.^.>
   10938:	3f75341d 3e931f35 3f751727 3e93dfbf     .4u?5..>'.u?...>
   10948:	3f74fa0b 3e94a031 3f74dcc9 3e95608d     ..t?1..>..t?.`.>
   10958:	3f74bf62 3e9620d2 3f74a1d5 3e96e100     b.t?. .>..t?...>
   10968:	3f748422 3e97a117 3f746649 3e986116     ".t?...>Ift?.a.>
   10978:	3f74484b 3e9920fe 3f742a27 3e99e0ce     KHt?. .>'*t?...>
   10988:	3f740bdd 3e9aa086 3f73ed6e 3e9b6027     ..t?...>n.s?'`.>
   10998:	3f73ced9 3e9c1faf 3f73b01f 3e9cdf20     ..s?...>..s? ..>
   109a8:	3f73913f 3e9d9e78 3f737239 3e9e5db8     ?.s?x..>9rs?.].>
   109b8:	3f73530e 3e9f1cdf 3f7333be 3e9fdbee     .Ss?...>.3s?...>
   109c8:	3f731447 3ea09ae5 3f72f4ac 3ea159c2     G.s?...>..r?.Y.>
   109d8:	3f72d4eb 3ea21887 3f72b504 3ea2d733     ..r?...>..r?3..>
   109e8:	3f7294f8 3ea395c5 3f7274c7 3ea4543f     ..r?...>.tr??T.>
   109f8:	3f725470 3ea5129f 3f7233f4 3ea5d0e5     pTr?...>.3r?...>
   10a08:	3f721352 3ea68f12 3f71f28c 3ea74d25     R.r?...>..q?%M.>
   10a18:	3f71d19f 3ea80b1f 3f71b08e 3ea8c8fe     ..q?...>..q?...>
   10a28:	3f718f57 3ea986c4 3f716dfb 3eaa446f     W.q?...>.mq?oD.>
   10a38:	3f714c7a 3eab0201 3f712ad4 3eabbf77     zLq?...>.*q?w..>
   10a48:	3f710908 3eac7cd4 3f70e717 3ead3a15     ..q?.|.>..p?.:.>
   10a58:	3f70c502 3eadf73c 3f70a2c6 3eaeb449     ..p?<..>..p?I..>
   10a68:	3f708066 3eaf713a 3f705de1 3eb02e10     f.p?:q.>.]p?...>
   10a78:	3f703b37 3eb0eacb 3f701867 3eb1a76b     7;p?...>g.p?k..>
   10a88:	3f6ff573 3eb263ef 3f6fd25a 3eb32058     s.o?.c.>Z.o?X .>
   10a98:	3f6faf1b 3eb3dca5 3f6f8bb8 3eb498d6     ..o?...>..o?...>
   10aa8:	3f6f6830 3eb554ec 3f6f4483 3eb610e6     0ho?.T.>.Do?...>
   10ab8:	3f6f20b0 3eb6ccc3 3f6efcba 3eb78884     . o?...>..n?...>
   10ac8:	3f6ed89e 3eb8442a 3f6eb45d 3eb8ffb2     ..n?*D.>].n?...>
   10ad8:	3f6e8ff8 3eb9bb1e 3f6e6b6d 3eba766e     ..n?...>mkn?nv.>
   10ae8:	3f6e46be 3ebb31a0 3f6e21eb 3ebbecb6     .Fn?.1.>.!n?...>
   10af8:	3f6dfcf2 3ebca7af 3f6dd7d5 3ebd628b     ..m?...>..m?.b.>
   10b08:	3f6db293 3ebe1d4a 3f6d8d2d 3ebed7eb     ..m?J..>-.m?...>
   10b18:	3f6d67a1 3ebf926f 3f6d41f2 3ec04cd5     .gm?o..>.Am?.L.>
   10b28:	3f6d1c1d 3ec1071e 3f6cf624 3ec1c148     ..m?...>$.l?H..>
   10b38:	3f6cd007 3ec27b55 3f6ca9c5 3ec33544     ..l?U{.>..l?D5.>
   10b48:	3f6c835e 3ec3ef15 3f6c5cd4 3ec4a8c8     ^.l?...>.\l?...>
   10b58:	3f6c3624 3ec5625c 3f6c0f50 3ec61bd2     $6l?\b.>P.l?...>
   10b68:	3f6be858 3ec6d529 3f6bc13b 3ec78e62     X.k?)..>;.k?b..>
   10b78:	3f6b99fb 3ec8477c 3f6b7295 3ec90077     ..k?|G.>.rk?w..>
   10b88:	3f6b4b0c 3ec9b953 3f6b235e 3eca7210     .Kk?S..>^#k?.r.>
   10b98:	3f6afb8c 3ecb2aae 3f6ad395 3ecbe32c     ..j?.*.>..j?,..>
   10ba8:	3f6aab7b 3ecc9b8b 3f6a833c 3ecd53ca     {.j?...><.j?.S.>
   10bb8:	3f6a5ad9 3ece0bea 3f6a3252 3ecec3ea     .Zj?...>R2j?...>
   10bc8:	3f6a09a7 3ecf7bca 3f69e0d7 3ed0338a     ..j?.{.>..i?.3.>
   10bd8:	3f69b7e4 3ed0eb2a 3f698ecc 3ed1a2aa     ..i?*..>..i?...>
   10be8:	3f696591 3ed25a09 3f693c32 3ed31148     .ei?.Z.>2<i?H..>
   10bf8:	3f6912ae 3ed3c867 3f68e907 3ed47f64     ..i?g..>..h?d..>
   10c08:	3f68bf3c 3ed53641 3f68954c 3ed5ecfd     <.h?A6.>L.h?...>
   10c18:	3f686b39 3ed6a399 3f684103 3ed75a13     9kh?...>.Ah?.Z.>
   10c28:	3f6816a8 3ed8106b 3f67ec2a 3ed8c6a3     ..h?k..>*.g?...>
   10c38:	3f67c187 3ed97cb9 3f6796c1 3eda32ad     ..g?.|.>..g?.2.>
   10c48:	3f676bd8 3edae880 3f6740ca 3edb9e31     .kg?...>.@g?1..>
   10c58:	3f671599 3edc53c1 3f66ea45 3edd092e     ..g?.S.>E.f?...>
   10c68:	3f66becc 3eddbe79 3f669330 3ede73a2     ..f?y..>0.f?.s.>
   10c78:	3f666771 3edf28a9 3f663b8e 3edfdd8d     qgf?.(.>.;f?...>
   10c88:	3f660f88 3ee0924f 3f65e35e 3ee146ee     ..f?O..>^.e?.F.>
   10c98:	3f65b710 3ee1fb6a 3f658aa0 3ee2afc4     ..e?j..>..e?...>
   10ca8:	3f655e0b 3ee363fa 3f653154 3ee4180e     .^e?.c.>T1e?...>
   10cb8:	3f650479 3ee4cbfe 3f64d77b 3ee57fcb     y.e?...>{.d?...>
   10cc8:	3f64aa59 3ee63375 3f647d14 3ee6e6fb     Y.d?u3.>.}d?...>
   10cd8:	3f644fac 3ee79a5d 3f642221 3ee84d9c     .Od?]..>!"d?.M.>
   10ce8:	3f63f473 3ee900b7 3f63c6a1 3ee9b3ae     s.c?...>..c?...>
   10cf8:	3f6398ac 3eea6681 3f636a95 3eeb1930     ..c?.f.>.jc?0..>
   10d08:	3f633c5a 3eebcbbb 3f630dfc 3eec7e21     Z<c?...>..c?!~.>
   10d18:	3f62df7b 3eed3063 3f62b0d7 3eede280     {.b?c0.>..b?...>
   10d28:	3f628210 3eee9479 3f625326 3eef464c     ..b?y..>&Sb?LF.>
   10d38:	3f62241a 3eeff7fb 3f61f4ea 3ef0a985     .$b?...>..a?...>
   10d48:	3f61c598 3ef15aea 3f619622 3ef20c29     ..a?.Z.>".a?)..>
   10d58:	3f61668a 3ef2bd43 3f6136d0 3ef36e38     .fa?C..>.6a?8n.>
   10d68:	3f6106f2 3ef41f07 3f60d6f2 3ef4cfb1     ..a?...>..`?...>
   10d78:	3f60a6cf 3ef58035 3f607689 3ef63093     ..`?5..>.v`?.0.>
   10d88:	3f604621 3ef6e0cb 3f601596 3ef790dc     !F`?...>..`?...>
   10d98:	3f5fe4e9 3ef840c8 3f5fb419 3ef8f08e     .._?.@.>.._?...>
   10da8:	3f5f8327 3ef9a02d 3f5f5212 3efa4fa5     '._?-..>.R_?.O.>
   10db8:	3f5f20db 3efafef7 3f5eef81 3efbae22     . _?...>..^?"..>
   10dc8:	3f5ebe05 3efc5d27 3f5e8c67 3efd0c04     ..^?'].>g.^?...>
   10dd8:	3f5e5aa6 3efdbabb 3f5e28c3 3efe694a     .Z^?...>.(^?Ji.>
   10de8:	3f5df6be 3eff17b2 3f5dc497 3effc5f3     ..]?...>..]?...>
   10df8:	3f5d924d 3f003a06 3f5d5fe1 3f0090ff     M.]?.:.?._]?...?
   10e08:	3f5d2d53 3f00e7e4 3f5cfaa3 3f013eb5     S-]?...?..\?.>.?
   10e18:	3f5cc7d1 3f019573 3f5c94dd 3f01ec1c     ..\?s..?..\?...?
   10e28:	3f5c61c7 3f0242b1 3f5c2e8e 3f029932     .a\?.B.?..\?2..?
   10e38:	3f5bfb34 3f02ef9f 3f5bc7b8 3f0345f8     4.[?...?..[?.E.?
   10e48:	3f5b941a 3f039c3d 3f5b605a 3f03f26d     ..[?=..?Z`[?m..?
   10e58:	3f5b2c79 3f044889 3f5af875 3f049e91     y,[?.H.?u.Z?...?
   10e68:	3f5ac450 3f04f484 3f5a9009 3f054a62     P.Z?...?..Z?bJ.?
   10e78:	3f5a5ba0 3f05a02c 3f5a2716 3f05f5e2     .[Z?,..?.'Z?...?
   10e88:	3f59f26a 3f064b82 3f59bd9c 3f06a10e     j.Y?.K.?..Y?...?
   10e98:	3f5988ad 3f06f686 3f59539c 3f074be8     ..Y?...?.SY?.K.?
   10ea8:	3f591e6a 3f07a136 3f58e917 3f07f66f     j.Y?6..?..X?o..?
   10eb8:	3f58b3a1 3f084b92 3f587e0b 3f08a0a1     ..X?.K.?.~X?...?
   10ec8:	3f584853 3f08f59b 3f581279 3f094a7f     SHX?...?y.X?.J.?
   10ed8:	3f57dc7f 3f099f4e 3f57a663 3f09f409     ..W?N..?c.W?...?
   10ee8:	3f577026 3f0a48ad 3f5739c7 3f0a9d3d     &pW?.H.?.9W?=..?
   10ef8:	3f570348 3f0af1b7 3f56cca7 3f0b461c     H.W?...?..V?.F.?
   10f08:	3f5695e5 3f0b9a6b 3f565f02 3f0beea5     ..V?k..?._V?...?
   10f18:	3f5627fe 3f0c42c9 3f55f0d9 3f0c96d7     .'V?.B.?..U?...?
   10f28:	3f55b993 3f0cead0 3f55822c 3f0d3eb3     ..U?...?,.U?.>.?
   10f38:	3f554aa4 3f0d9281 3f5512fb 3f0de638     .JU?...?..U?8..?
   10f48:	3f54db31 3f0e39da 3f54a347 3f0e8d65     1.T?.9.?G.T?e..?
   10f58:	3f546b3b 3f0ee0db 3f54330f 3f0f343b     ;kT?...?.3T?;4.?
   10f68:	3f53fac3 3f0f8784 3f53c255 3f0fdab8     ..S?...?U.S?...?
   10f78:	3f5389c7 3f102dd5 3f535118 3f1080dc     ..S?.-.?.QS?...?
   10f88:	3f531849 3f10d3cd 3f52df59 3f1126a7     I.S?...?Y.R?.&.?
   10f98:	3f52a649 3f11796b 3f526d18 3f11cc19     I.R?ky.?.mR?...?
   10fa8:	3f5233c6 3f121eb0 3f51fa54 3f127130     .3R?...?T.Q?0q.?
   10fb8:	3f51c0c2 3f12c39a 3f518710 3f1315ee     ..Q?...?..Q?...?
   10fc8:	3f514d3d 3f13682a 3f51134a 3f13ba50     =MQ?*h.?J.Q?P..?
   10fd8:	3f50d937 3f140c5f 3f509f03 3f145e58     7.P?_..?..P?X^.?
   10fe8:	3f5064af 3f14b039 3f502a3b 3f150204     .dP?9..?;*P?...?
   10ff8:	3f4fefa8 3f1553b7 3f4fb4f4 3f15a554     ..O?.S.?..O?T..?
   11008:	3f4f7a1f 3f15f6d9 3f4f3f2b 3f164847     .zO?...?+?O?GH.?
   11018:	3f4f0417 3f16999f 3f4ec8e4 3f16eadf     ..O?...?..N?...?
   11028:	3f4e8d90 3f173c07 3f4e521c 3f178d18     ..N?.<.?.RN?...?
   11038:	3f4e1689 3f17de12 3f4ddad5 3f182ef5     ..N?...?..M?...?
   11048:	3f4d9f02 3f187fc0 3f4d6310 3f18d073     ..M?...?.cM?s..?
   11058:	3f4d26fd 3f19210f 3f4ceacb 3f197194     .&M?.!.?..L?.q.?
   11068:	3f4cae79 3f19c200 3f4c7208 3f1a1255     y.L?...?.rL?U..?
   11078:	3f4c3578 3f1a6293 3f4bf8c7 3f1ab2b8     x5L?.b.?..K?...?
   11088:	3f4bbbf8 3f1b02c6 3f4b7f09 3f1b52bb     ..K?...?..K?.R.?
   11098:	3f4b41fa 3f1ba299 3f4b04cc 3f1bf25f     .AK?...?..K?_..?
   110a8:	3f4ac77f 3f1c420c 3f4a8a13 3f1c91a2     ..J?.B.?..J?...?
   110b8:	3f4a4c87 3f1ce11f 3f4a0edc 3f1d3084     .LJ?...?..J?.0.?
   110c8:	3f49d112 3f1d7fd1 3f499329 3f1dcf06     ..I?...?).I?...?
   110d8:	3f495521 3f1e1e22 3f4916fa 3f1e6d26     !UI?"..?..I?&m.?
   110e8:	3f48d8b3 3f1ebc12 3f489a4e 3f1f0ae5     ..H?...?N.H?...?
   110f8:	3f485bca 3f1f599f 3f481d27 3f1fa841     .[H?.Y.?'.H?A..?
   11108:	3f47de65 3f1ff6cb 3f479f84 3f20453b     e.G?...?..G?;E ?
   11118:	3f476085 3f209393 3f472167 3f20e1d2     .`G?.. ?g!G?.. ?
   11128:	3f46e22a 3f212ff9 3f46a2ce 3f217e06     *.F?./!?..F?.~!?
   11138:	3f466354 3f21cbfb 3f4623bb 3f2219d7     TcF?..!?.#F?.."?
   11148:	3f45e403 3f226799 3f45a42d 3f22b543     ..E?.g"?-.E?C."?
   11158:	3f456439 3f2302d3 3f452426 3f23504b     9dE?..#?&$E?KP#?
   11168:	3f44e3f5 3f239da9 3f44a3a5 3f23eaee     ..D?..#?..D?..#?
   11178:	3f446337 3f24381a 3f4422ab 3f24852c     7cD?.8$?."D?,.$?
   11188:	3f43e200 3f24d225 3f43a138 3f251f04     ..C?%.$?8.C?..%?
   11198:	3f436051 3f256bcb 3f431f4c 3f25b877     Q`C?.k%?L.C?w.%?
   111a8:	3f42de29 3f26050a 3f429ce8 3f265184     ).B?..&?..B?.Q&?
   111b8:	3f425b89 3f269de3 3f421a0b 3f26ea2a     .[B?..&?..B?*.&?
   111c8:	3f41d870 3f273656 3f4196b7 3f278268     p.A?V6'?..A?h.'?
   111d8:	3f4154e1 3f27ce61 3f4112ec 3f281a40     .TA?a.'?..A?@.(?
   111e8:	3f40d0da 3f286605 3f408ea9 3f28b1b0     ..@?.f(?..@?..(?
   111f8:	3f404c5c 3f28fd41 3f4009f0 3f2948b8     \L@?A.(?..@?.H)?
   11208:	3f3fc767 3f299415 3f3f84c0 3f29df57     g.??..)?..??W.)?
   11218:	3f3f41fc 3f2a2a80 3f3eff1b 3f2a758e     .A??.**?..>?.u*?
   11228:	3f3ebc1b 3f2ac082 3f3e78ff 3f2b0b5b     ..>?..*?.x>?[.+?
   11238:	3f3e35c5 3f2b561b 3f3df26e 3f2ba0bf     .5>?.V+?n.=?..+?
   11248:	3f3daef9 3f2beb4a 3f3d6b67 3f2c35b9     ..=?J.+?gk=?.5,?
   11258:	3f3d27b8 3f2c800f 3f3ce3ec 3f2cca49     .'=?..,?..<?I.,?
   11268:	3f3ca003 3f2d1469 3f3c5bfc 3f2d5e6f     ..<?i.-?.[<?o^-?
   11278:	3f3c17d9 3f2da859 3f3bd398 3f2df229     ..<?Y.-?..;?).-?
   11288:	3f3b8f3b 3f2e3bde 3f3b4ac1 3f2e8578     ;.;?.;.?.J;?x..?
   11298:	3f3b0629 3f2ecef7 3f3ac175 3f2f185b     ).;?...?u.:?[./?
   112a8:	3f3a7ca4 3f2f61a5 3f3a37b7 3f2faad3     .|:?.a/?.7:?../?
   112b8:	3f39f2ac 3f2ff3e6 3f39ad85 3f303cde     ..9?../?..9?.<0?
   112c8:	3f396842 3f3085bb 3f3922e1 3f30ce7c     Bh9?..0?."9?|.0?
   112d8:	3f38dd65 3f311722 3f3897cb 3f315fad     e.8?".1?..8?._1?
   112e8:	3f385216 3f31a81d 3f380c43 3f31f071     .R8?..1?C.8?q.1?
   112f8:	3f37c655 3f3238aa 3f37804a 3f3280c7     U.7?.82?J.7?..2?
   11308:	3f373a23 3f32c8c9 3f36f3df 3f3310af     #:7?..2?..6?..3?
   11318:	3f36ad7f 3f33587a 3f366704 3f33a029     ..6?zX3?.g6?).3?
   11328:	3f36206c 3f33e7bc 3f35d9b8 3f342f34     l 6?..3?..5?4/4?
   11338:	3f3592e7 3f34768f 3f354bfb 3f34bdcf     ..5?.v4?.K5?..4?
   11348:	3f3504f3 3f3504f3 3f34bdcf 3f354bfb     ..5?..5?..4?.K5?
   11358:	3f34768f 3f3592e7 3f342f34 3f35d9b8     .v4?..5?4/4?..5?
   11368:	3f33e7bc 3f36206c 3f33a029 3f366704     ..3?l 6?).3?.g6?
   11378:	3f33587a 3f36ad7f 3f3310af 3f36f3df     zX3?..6?..3?..6?
   11388:	3f32c8c9 3f373a23 3f3280c7 3f37804a     ..2?#:7?..2?J.7?
   11398:	3f3238aa 3f37c655 3f31f071 3f380c43     .82?U.7?q.1?C.8?
   113a8:	3f31a81d 3f385216 3f315fad 3f3897cb     ..1?.R8?._1?..8?
   113b8:	3f311722 3f38dd65 3f30ce7c 3f3922e1     ".1?e.8?|.0?."9?
   113c8:	3f3085bb 3f396842 3f303cde 3f39ad85     ..0?Bh9?.<0?..9?
   113d8:	3f2ff3e6 3f39f2ac 3f2faad3 3f3a37b7     ../?..9?../?.7:?
   113e8:	3f2f61a5 3f3a7ca4 3f2f185b 3f3ac175     .a/?.|:?[./?u.:?
   113f8:	3f2ecef7 3f3b0629 3f2e8578 3f3b4ac1     ...?).;?x..?.J;?
   11408:	3f2e3bde 3f3b8f3b 3f2df229 3f3bd398     .;.?;.;?).-?..;?
   11418:	3f2da859 3f3c17d9 3f2d5e6f 3f3c5bfc     Y.-?..<?o^-?.[<?
   11428:	3f2d1469 3f3ca003 3f2cca49 3f3ce3ec     i.-?..<?I.,?..<?
   11438:	3f2c800f 3f3d27b8 3f2c35b9 3f3d6b67     ..,?.'=?.5,?gk=?
   11448:	3f2beb4a 3f3daef9 3f2ba0bf 3f3df26e     J.+?..=?..+?n.=?
   11458:	3f2b561b 3f3e35c5 3f2b0b5b 3f3e78ff     .V+?.5>?[.+?.x>?
   11468:	3f2ac082 3f3ebc1b 3f2a758e 3f3eff1b     ..*?..>?.u*?..>?
   11478:	3f2a2a80 3f3f41fc 3f29df57 3f3f84c0     .**?.A??W.)?..??
   11488:	3f299415 3f3fc767 3f2948b8 3f4009f0     ..)?g.??.H)?..@?
   11498:	3f28fd41 3f404c5c 3f28b1b0 3f408ea9     A.(?\L@?..(?..@?
   114a8:	3f286605 3f40d0da 3f281a40 3f4112ec     .f(?..@?@.(?..A?
   114b8:	3f27ce61 3f4154e1 3f278268 3f4196b7     a.'?.TA?h.'?..A?
   114c8:	3f273656 3f41d870 3f26ea2a 3f421a0b     V6'?p.A?*.&?..B?
   114d8:	3f269de3 3f425b89 3f265184 3f429ce8     ..&?.[B?.Q&?..B?
   114e8:	3f26050a 3f42de29 3f25b877 3f431f4c     ..&?).B?w.%?L.C?
   114f8:	3f256bcb 3f436051 3f251f04 3f43a138     .k%?Q`C?..%?8.C?
   11508:	3f24d225 3f43e200 3f24852c 3f4422ab     %.$?..C?,.$?."D?
   11518:	3f24381a 3f446337 3f23eaee 3f44a3a5     .8$?7cD?..#?..D?
   11528:	3f239da9 3f44e3f5 3f23504b 3f452426     ..#?..D?KP#?&$E?
   11538:	3f2302d3 3f456439 3f22b543 3f45a42d     ..#?9dE?C."?-.E?
   11548:	3f226799 3f45e403 3f2219d7 3f4623bb     .g"?..E?.."?.#F?
   11558:	3f21cbfb 3f466354 3f217e06 3f46a2ce     ..!?TcF?.~!?..F?
   11568:	3f212ff9 3f46e22a 3f20e1d2 3f472167     ./!?*.F?.. ?g!G?
   11578:	3f209393 3f476085 3f20453b 3f479f84     .. ?.`G?;E ?..G?
   11588:	3f1ff6cb 3f47de65 3f1fa841 3f481d27     ...?e.G?A..?'.H?
   11598:	3f1f599f 3f485bca 3f1f0ae5 3f489a4e     .Y.?.[H?...?N.H?
   115a8:	3f1ebc12 3f48d8b3 3f1e6d26 3f4916fa     ...?..H?&m.?..I?
   115b8:	3f1e1e22 3f495521 3f1dcf06 3f499329     "..?!UI?...?).I?
   115c8:	3f1d7fd1 3f49d112 3f1d3084 3f4a0edc     ...?..I?.0.?..J?
   115d8:	3f1ce11f 3f4a4c87 3f1c91a2 3f4a8a13     ...?.LJ?...?..J?
   115e8:	3f1c420c 3f4ac77f 3f1bf25f 3f4b04cc     .B.?..J?_..?..K?
   115f8:	3f1ba299 3f4b41fa 3f1b52bb 3f4b7f09     ...?.AK?.R.?..K?
   11608:	3f1b02c6 3f4bbbf8 3f1ab2b8 3f4bf8c7     ...?..K?...?..K?
   11618:	3f1a6293 3f4c3578 3f1a1255 3f4c7208     .b.?x5L?U..?.rL?
   11628:	3f19c200 3f4cae79 3f197194 3f4ceacb     ...?y.L?.q.?..L?
   11638:	3f19210f 3f4d26fd 3f18d073 3f4d6310     .!.?.&M?s..?.cM?
   11648:	3f187fc0 3f4d9f02 3f182ef5 3f4ddad5     ...?..M?...?..M?
   11658:	3f17de12 3f4e1689 3f178d18 3f4e521c     ...?..N?...?.RN?
   11668:	3f173c07 3f4e8d90 3f16eadf 3f4ec8e4     .<.?..N?...?..N?
   11678:	3f16999f 3f4f0417 3f164847 3f4f3f2b     ...?..O?GH.?+?O?
   11688:	3f15f6d9 3f4f7a1f 3f15a554 3f4fb4f4     ...?.zO?T..?..O?
   11698:	3f1553b7 3f4fefa8 3f150204 3f502a3b     .S.?..O?...?;*P?
   116a8:	3f14b039 3f5064af 3f145e58 3f509f03     9..?.dP?X^.?..P?
   116b8:	3f140c5f 3f50d937 3f13ba50 3f51134a     _..?7.P?P..?J.Q?
   116c8:	3f13682a 3f514d3d 3f1315ee 3f518710     *h.?=MQ?...?..Q?
   116d8:	3f12c39a 3f51c0c2 3f127130 3f51fa54     ...?..Q?0q.?T.Q?
   116e8:	3f121eb0 3f5233c6 3f11cc19 3f526d18     ...?.3R?...?.mR?
   116f8:	3f11796b 3f52a649 3f1126a7 3f52df59     ky.?I.R?.&.?Y.R?
   11708:	3f10d3cd 3f531849 3f1080dc 3f535118     ...?I.S?...?.QS?
   11718:	3f102dd5 3f5389c7 3f0fdab8 3f53c255     .-.?..S?...?U.S?
   11728:	3f0f8784 3f53fac3 3f0f343b 3f54330f     ...?..S?;4.?.3T?
   11738:	3f0ee0db 3f546b3b 3f0e8d65 3f54a347     ...?;kT?e..?G.T?
   11748:	3f0e39da 3f54db31 3f0de638 3f5512fb     .9.?1.T?8..?..U?
   11758:	3f0d9281 3f554aa4 3f0d3eb3 3f55822c     ...?.JU?.>.?,.U?
   11768:	3f0cead0 3f55b993 3f0c96d7 3f55f0d9     ...?..U?...?..U?
   11778:	3f0c42c9 3f5627fe 3f0beea5 3f565f02     .B.?.'V?...?._V?
   11788:	3f0b9a6b 3f5695e5 3f0b461c 3f56cca7     k..?..V?.F.?..V?
   11798:	3f0af1b7 3f570348 3f0a9d3d 3f5739c7     ...?H.W?=..?.9W?
   117a8:	3f0a48ad 3f577026 3f09f409 3f57a663     .H.?&pW?...?c.W?
   117b8:	3f099f4e 3f57dc7f 3f094a7f 3f581279     N..?..W?.J.?y.X?
   117c8:	3f08f59b 3f584853 3f08a0a1 3f587e0b     ...?SHX?...?.~X?
   117d8:	3f084b92 3f58b3a1 3f07f66f 3f58e917     .K.?..X?o..?..X?
   117e8:	3f07a136 3f591e6a 3f074be8 3f59539c     6..?j.Y?.K.?.SY?
   117f8:	3f06f686 3f5988ad 3f06a10e 3f59bd9c     ...?..Y?...?..Y?
   11808:	3f064b82 3f59f26a 3f05f5e2 3f5a2716     .K.?j.Y?...?.'Z?
   11818:	3f05a02c 3f5a5ba0 3f054a62 3f5a9009     ,..?.[Z?bJ.?..Z?
   11828:	3f04f484 3f5ac450 3f049e91 3f5af875     ...?P.Z?...?u.Z?
   11838:	3f044889 3f5b2c79 3f03f26d 3f5b605a     .H.?y,[?m..?Z`[?
   11848:	3f039c3d 3f5b941a 3f0345f8 3f5bc7b8     =..?..[?.E.?..[?
   11858:	3f02ef9f 3f5bfb34 3f029932 3f5c2e8e     ...?4.[?2..?..\?
   11868:	3f0242b1 3f5c61c7 3f01ec1c 3f5c94dd     .B.?.a\?...?..\?
   11878:	3f019573 3f5cc7d1 3f013eb5 3f5cfaa3     s..?..\?.>.?..\?
   11888:	3f00e7e4 3f5d2d53 3f0090ff 3f5d5fe1     ...?S-]?...?._]?
   11898:	3f003a06 3f5d924d 3effc5f3 3f5dc497     .:.?M.]?...>..]?
   118a8:	3eff17b2 3f5df6be 3efe694a 3f5e28c3     ...>..]?Ji.>.(^?
   118b8:	3efdbabb 3f5e5aa6 3efd0c04 3f5e8c67     ...>.Z^?...>g.^?
   118c8:	3efc5d27 3f5ebe05 3efbae22 3f5eef81     '].>..^?"..>..^?
   118d8:	3efafef7 3f5f20db 3efa4fa5 3f5f5212     ...>. _?.O.>.R_?
   118e8:	3ef9a02d 3f5f8327 3ef8f08e 3f5fb419     -..>'._?...>.._?
   118f8:	3ef840c8 3f5fe4e9 3ef790dc 3f601596     .@.>.._?...>..`?
   11908:	3ef6e0cb 3f604621 3ef63093 3f607689     ...>!F`?.0.>.v`?
   11918:	3ef58035 3f60a6cf 3ef4cfb1 3f60d6f2     5..>..`?...>..`?
   11928:	3ef41f07 3f6106f2 3ef36e38 3f6136d0     ...>..a?8n.>.6a?
   11938:	3ef2bd43 3f61668a 3ef20c29 3f619622     C..>.fa?)..>".a?
   11948:	3ef15aea 3f61c598 3ef0a985 3f61f4ea     .Z.>..a?...>..a?
   11958:	3eeff7fb 3f62241a 3eef464c 3f625326     ...>.$b?LF.>&Sb?
   11968:	3eee9479 3f628210 3eede280 3f62b0d7     y..>..b?...>..b?
   11978:	3eed3063 3f62df7b 3eec7e21 3f630dfc     c0.>{.b?!~.>..c?
   11988:	3eebcbbb 3f633c5a 3eeb1930 3f636a95     ...>Z<c?0..>.jc?
   11998:	3eea6681 3f6398ac 3ee9b3ae 3f63c6a1     .f.>..c?...>..c?
   119a8:	3ee900b7 3f63f473 3ee84d9c 3f642221     ...>s.c?.M.>!"d?
   119b8:	3ee79a5d 3f644fac 3ee6e6fb 3f647d14     ]..>.Od?...>.}d?
   119c8:	3ee63375 3f64aa59 3ee57fcb 3f64d77b     u3.>Y.d?...>{.d?
   119d8:	3ee4cbfe 3f650479 3ee4180e 3f653154     ...>y.e?...>T1e?
   119e8:	3ee363fa 3f655e0b 3ee2afc4 3f658aa0     .c.>.^e?...>..e?
   119f8:	3ee1fb6a 3f65b710 3ee146ee 3f65e35e     j..>..e?.F.>^.e?
   11a08:	3ee0924f 3f660f88 3edfdd8d 3f663b8e     O..>..f?...>.;f?
   11a18:	3edf28a9 3f666771 3ede73a2 3f669330     .(.>qgf?.s.>0.f?
   11a28:	3eddbe79 3f66becc 3edd092e 3f66ea45     y..>..f?...>E.f?
   11a38:	3edc53c1 3f671599 3edb9e31 3f6740ca     .S.>..g?1..>.@g?
   11a48:	3edae880 3f676bd8 3eda32ad 3f6796c1     ...>.kg?.2.>..g?
   11a58:	3ed97cb9 3f67c187 3ed8c6a3 3f67ec2a     .|.>..g?...>*.g?
   11a68:	3ed8106b 3f6816a8 3ed75a13 3f684103     k..>..h?.Z.>.Ah?
   11a78:	3ed6a399 3f686b39 3ed5ecfd 3f68954c     ...>9kh?...>L.h?
   11a88:	3ed53641 3f68bf3c 3ed47f64 3f68e907     A6.><.h?d..>..h?
   11a98:	3ed3c867 3f6912ae 3ed31148 3f693c32     g..>..i?H..>2<i?
   11aa8:	3ed25a09 3f696591 3ed1a2aa 3f698ecc     .Z.>.ei?...>..i?
   11ab8:	3ed0eb2a 3f69b7e4 3ed0338a 3f69e0d7     *..>..i?.3.>..i?
   11ac8:	3ecf7bca 3f6a09a7 3ecec3ea 3f6a3252     .{.>..j?...>R2j?
   11ad8:	3ece0bea 3f6a5ad9 3ecd53ca 3f6a833c     ...>.Zj?.S.><.j?
   11ae8:	3ecc9b8b 3f6aab7b 3ecbe32c 3f6ad395     ...>{.j?,..>..j?
   11af8:	3ecb2aae 3f6afb8c 3eca7210 3f6b235e     .*.>..j?.r.>^#k?
   11b08:	3ec9b953 3f6b4b0c 3ec90077 3f6b7295     S..>.Kk?w..>.rk?
   11b18:	3ec8477c 3f6b99fb 3ec78e62 3f6bc13b     |G.>..k?b..>;.k?
   11b28:	3ec6d529 3f6be858 3ec61bd2 3f6c0f50     )..>X.k?...>P.l?
   11b38:	3ec5625c 3f6c3624 3ec4a8c8 3f6c5cd4     \b.>$6l?...>.\l?
   11b48:	3ec3ef15 3f6c835e 3ec33544 3f6ca9c5     ...>^.l?D5.>..l?
   11b58:	3ec27b55 3f6cd007 3ec1c148 3f6cf624     U{.>..l?H..>$.l?
   11b68:	3ec1071e 3f6d1c1d 3ec04cd5 3f6d41f2     ...>..m?.L.>.Am?
   11b78:	3ebf926f 3f6d67a1 3ebed7eb 3f6d8d2d     o..>.gm?...>-.m?
   11b88:	3ebe1d4a 3f6db293 3ebd628b 3f6dd7d5     J..>..m?.b.>..m?
   11b98:	3ebca7af 3f6dfcf2 3ebbecb6 3f6e21eb     ...>..m?...>.!n?
   11ba8:	3ebb31a0 3f6e46be 3eba766e 3f6e6b6d     .1.>.Fn?nv.>mkn?
   11bb8:	3eb9bb1e 3f6e8ff8 3eb8ffb2 3f6eb45d     ...>..n?...>].n?
   11bc8:	3eb8442a 3f6ed89e 3eb78884 3f6efcba     *D.>..n?...>..n?
   11bd8:	3eb6ccc3 3f6f20b0 3eb610e6 3f6f4483     ...>. o?...>.Do?
   11be8:	3eb554ec 3f6f6830 3eb498d6 3f6f8bb8     .T.>0ho?...>..o?
   11bf8:	3eb3dca5 3f6faf1b 3eb32058 3f6fd25a     ...>..o?X .>Z.o?
   11c08:	3eb263ef 3f6ff573 3eb1a76b 3f701867     .c.>s.o?k..>g.p?
   11c18:	3eb0eacb 3f703b37 3eb02e10 3f705de1     ...>7;p?...>.]p?
   11c28:	3eaf713a 3f708066 3eaeb449 3f70a2c6     :q.>f.p?I..>..p?
   11c38:	3eadf73c 3f70c502 3ead3a15 3f70e717     <..>..p?.:.>..p?
   11c48:	3eac7cd4 3f710908 3eabbf77 3f712ad4     .|.>..q?w..>.*q?
   11c58:	3eab0201 3f714c7a 3eaa446f 3f716dfb     ...>zLq?oD.>.mq?
   11c68:	3ea986c4 3f718f57 3ea8c8fe 3f71b08e     ...>W.q?...>..q?
   11c78:	3ea80b1f 3f71d19f 3ea74d25 3f71f28c     ...>..q?%M.>..q?
   11c88:	3ea68f12 3f721352 3ea5d0e5 3f7233f4     ...>R.r?...>.3r?
   11c98:	3ea5129f 3f725470 3ea4543f 3f7274c7     ...>pTr??T.>.tr?
   11ca8:	3ea395c5 3f7294f8 3ea2d733 3f72b504     ...>..r?3..>..r?
   11cb8:	3ea21887 3f72d4eb 3ea159c2 3f72f4ac     ...>..r?.Y.>..r?
   11cc8:	3ea09ae5 3f731447 3e9fdbee 3f7333be     ...>G.s?...>.3s?
   11cd8:	3e9f1cdf 3f73530e 3e9e5db8 3f737239     ...>.Ss?.].>9rs?
   11ce8:	3e9d9e78 3f73913f 3e9cdf20 3f73b01f     x..>?.s? ..>..s?
   11cf8:	3e9c1faf 3f73ced9 3e9b6027 3f73ed6e     ...>..s?'`.>n.s?
   11d08:	3e9aa086 3f740bdd 3e99e0ce 3f742a27     ...>..t?...>'*t?
   11d18:	3e9920fe 3f74484b 3e986116 3f746649     . .>KHt?.a.>Ift?
   11d28:	3e97a117 3f748422 3e96e100 3f74a1d5     ...>".t?...>..t?
   11d38:	3e9620d2 3f74bf62 3e95608d 3f74dcc9     . .>b.t?.`.>..t?
   11d48:	3e94a031 3f74fa0b 3e93dfbf 3f751727     1..>..t?...>'.u?
   11d58:	3e931f35 3f75341d 3e925e94 3f7550ed     5..>.4u?.^.>.Pu?
   11d68:	3e919ddd 3f756d97 3e90dd10 3f758a1c     ...>.mu?...>..u?
   11d78:	3e901c2c 3f75a67b 3e8f5b32 3f75c2b3     ,..>{.u?2[.>..u?
   11d88:	3e8e9a22 3f75dec6 3e8dd8fc 3f75fab3     "..>..u?...>..u?
   11d98:	3e8d17c0 3f76167a 3e8c566e 3f76321b     ...>z.v?nV.>.2v?
   11da8:	3e8b9507 3f764d97 3e8ad38a 3f7668ec     ...>.Mv?...>.hv?
   11db8:	3e8a11f8 3f76841b 3e895050 3f769f24     ...>..v?PP.>$.v?
   11dc8:	3e888e93 3f76ba07 3e87ccc1 3f76d4c4     ...>..v?...>..v?
   11dd8:	3e870ada 3f76ef5b 3e8648df 3f7709cc     ...>[.v?.H.>..w?
   11de8:	3e8586ce 3f772417 3e84c4aa 3f773e3c     ...>.$w?...><>w?
   11df8:	3e840270 3f77583a 3e834022 3f777213     p..>:Xw?"@.>.rw?
   11e08:	3e827dc0 3f778bc5 3e81bb4a 3f77a551     .}.>..w?J..>Q.w?
   11e18:	3e80f8c0 3f77beb7 3e803622 3f77d7f7     ...>..w?"6.>..w?
   11e28:	3e7ee6e1 3f77f110 3e7d6156 3f780a04     ..~>..w?Va}>..x?
   11e38:	3e7bdba4 3f7822d1 3e7a55cb 3f783b77     ..{>."x?.Uz>w;x?
   11e48:	3e78cfcc 3f7853f8 3e7749a6 3f786c52     ..x>.Sx?.Iw>Rlx?
   11e58:	3e75c35a 3f788486 3e743ce8 3f789c93     Z.u>..x?.<t>..x?
   11e68:	3e72b651 3f78b47b 3e712f94 3f78cc3b     Q.r>{.x?./q>;.x?
   11e78:	3e6fa8b2 3f78e3d6 3e6e21ab 3f78fb4a     ..o>..x?.!n>J.x?
   11e88:	3e6c9a7f 3f791298 3e6b132f 3f7929bf     ..l>..y?/.k>.)y?
   11e98:	3e698bba 3f7940c0 3e680422 3f79579a     ..i>.@y?".h>.Wy?
   11ea8:	3e667c66 3f796e4e 3e64f486 3f7984dc     f|f>Nny?..d>..y?
   11eb8:	3e636c83 3f799b43 3e61e45c 3f79b183     .lc>C.y?\.a>..y?
   11ec8:	3e605c13 3f79c79d 3e5ed3a8 3f79dd91     .\`>..y?..^>..y?
   11ed8:	3e5d4b1a 3f79f35e 3e5bc26a 3f7a0904     .K]>^.y?j.[>..z?
   11ee8:	3e5a3997 3f7a1e84 3e58b0a4 3f7a33dd     .9Z>..z?..X>.3z?
   11ef8:	3e57278f 3f7a4910 3e559e58 3f7a5e1c     .'W>.Iz?X.U>.^z?
   11f08:	3e541501 3f7a7302 3e528b89 3f7a87c1     ..T>.sz?..R>..z?
   11f18:	3e5101f1 3f7a9c59 3e4f7838 3f7ab0cb     ..Q>Y.z?8xO>..z?
   11f28:	3e4dee60 3f7ac516 3e4c6467 3f7ad93a     `.M>..z?gdL>:.z?
   11f38:	3e4ada4f 3f7aed37 3e495018 3f7b010e     O.J>7.z?.PI>..{?
   11f48:	3e47c5c2 3f7b14be 3e463b4d 3f7b2848     ..G>..{?M;F>H({?
   11f58:	3e44b0b9 3f7b3bab 3e432607 3f7b4ee7     ..D>.;{?.&C>.N{?
   11f68:	3e419b37 3f7b61fc 3e401049 3f7b74ea     7.A>.a{?I.@>.t{?
   11f78:	3e3e853e 3f7b87b2 3e3cfa15 3f7b9a53     >.>>..{?..<>S.{?
   11f88:	3e3b6ecf 3f7baccd 3e39e36c 3f7bbf20     .n;>..{?l.9> .{?
   11f98:	3e3857ec 3f7bd14d 3e36cc50 3f7be353     .W8>M.{?P.6>S.{?
   11fa8:	3e354098 3f7bf531 3e33b4c4 3f7c06e9     .@5>1.{?..3>..|?
   11fb8:	3e3228d4 3f7c187a 3e309cc9 3f7c29e5     .(2>z.|?..0>.)|?
   11fc8:	3e2f10a2 3f7c3b28 3e2d8461 3f7c4c44     ../>(;|?a.->DL|?
   11fd8:	3e2bf804 3f7c5d3a 3e2a6b8d 3f7c6e08     ..+>:]|?.k*>.n|?
   11fe8:	3e28defc 3f7c7eb0 3e275251 3f7c8f31     ..(>.~|?QR'>1.|?
   11ff8:	3e25c58c 3f7c9f8a 3e2438ad 3f7cafbd     ..%>..|?.8$>..|?
   12008:	3e22abb6 3f7cbfc9 3e211ea5 3f7ccfae     ..">..|?..!>..|?
   12018:	3e1f917b 3f7cdf6c 3e1e0438 3f7cef03     {..>l.|?8..>..|?
   12028:	3e1c76de 3f7cfe73 3e1ae96b 3f7d0dbc     .v.>s.|?k..>..}?
   12038:	3e195be0 3f7d1cdd 3e17ce3d 3f7d2bd8     .[.>..}?=..>.+}?
   12048:	3e164083 3f7d3aac 3e14b2b2 3f7d4959     .@.>.:}?...>YI}?
   12058:	3e1324ca 3f7d57de 3e1196cc 3f7d663d     .$.>.W}?...>=f}?
   12068:	3e1008b7 3f7d7474 3e0e7a8b 3f7d8285     ...>tt}?.z.>..}?
   12078:	3e0cec4a 3f7d906e 3e0b5df3 3f7d9e30     J..>n.}?.].>0.}?
   12088:	3e09cf86 3f7dabcc 3e084105 3f7db940     ...>..}?.A.>@.}?
   12098:	3e06b26e 3f7dc68c 3e0523c2 3f7dd3b2     n..>..}?.#.>..}?
   120a8:	3e039502 3f7de0b1 3e02062e 3f7ded88     ...>..}?...>..}?
   120b8:	3e007745 3f7dfa38 3dfdd092 3f7e06c2     Ew.>8.}?...=..~?
   120c8:	3dfab273 3f7e1324 3df7942c 3f7e1f5e     s..=$.~?,..=^.~?
   120d8:	3df475c0 3f7e2b72 3df1572e 3f7e375e     .u.=r+~?.W.=^7~?
   120e8:	3dee3876 3f7e4323 3deb199a 3f7e4ec1     v8.=#C~?...=.N~?
   120f8:	3de7fa9a 3f7e5a38 3de4db76 3f7e6588     ...=8Z~?v..=.e~?
   12108:	3de1bc2e 3f7e70b0 3dde9cc4 3f7e7bb1     ...=.p~?...=.{~?
   12118:	3ddb7d37 3f7e868b 3dd85d89 3f7e913d     7}.=..~?.].==.~?
   12128:	3dd53db9 3f7e9bc9 3dd21dc8 3f7ea62d     .=.=..~?...=-.~?
   12138:	3dcefdb7 3f7eb069 3dcbdd86 3f7eba7f     ...=i.~?...=..~?
   12148:	3dc8bd36 3f7ec46d 3dc59cc6 3f7ece34     6..=m.~?...=4.~?
   12158:	3dc27c39 3f7ed7d4 3dbf5b8d 3f7ee14c     9|.=..~?.[.=L.~?
   12168:	3dbc3ac3 3f7eea9d 3db919dd 3f7ef3c7     .:.=..~?...=..~?
   12178:	3db5f8da 3f7efcc9 3db2d7bb 3f7f05a4     ...=..~?...=...?
   12188:	3dafb680 3f7f0e58 3dac952b 3f7f16e4     ...=X..?+..=...?
   12198:	3da973ba 3f7f1f49 3da65230 3f7f2787     .s.=I..?0R.=.'.?
   121a8:	3da3308c 3f7f2f9d 3da00ecf 3f7f378d     .0.=./.?...=.7.?
   121b8:	3d9cecf9 3f7f3f54 3d99cb0a 3f7f46f4     ...=T?.?...=.F.?
   121c8:	3d96a905 3f7f4e6d 3d9386e7 3f7f55bf     ...=mN.?...=.U.?
   121d8:	3d9064b4 3f7f5ce9 3d8d426a 3f7f63ec     .d.=.\.?jB.=.c.?
   121e8:	3d8a200a 3f7f6ac7 3d86fd94 3f7f717b     . .=.j.?...={q.?
   121f8:	3d83db0a 3f7f7808 3d80b86c 3f7f7e6d     ...=.x.?l..=m~.?
   12208:	3d7b2b74 3f7f84ab 3d74e5e9 3f7f8ac2     t+{=...?..t=...?
   12218:	3d6ea038 3f7f90b1 3d685a62 3f7f9678     8.n=...?bZh=x..?
   12228:	3d621468 3f7f9c18 3d5bce4c 3f7fa191     h.b=...?L.[=...?
   12238:	3d55880e 3f7fa6e3 3d4f41af 3f7fac0d     ..U=...?.AO=...?
   12248:	3d48fb2f 3f7fb10f 3d42b491 3f7fb5ea     /.H=...?..B=...?
   12258:	3d3c6dd5 3f7fba9e 3d3626fc 3f7fbf2a     .m<=...?.&6=*..?
   12268:	3d2fe007 3f7fc38f 3d2998f6 3f7fc7cc     ../=...?..)=...?
   12278:	3d2351cc 3f7fcbe2 3d1d0a88 3f7fcfd1     .Q#=...?...=...?
   12288:	3d16c32c 3f7fd398 3d107bb8 3f7fd737     ,..=...?.{.=7..?
   12298:	3d0a342f 3f7fdaaf 3d03ec90 3f7fde00     /4.=...?...=...?
   122a8:	3cfb49b9 3f7fe129 3ceeba2d 3f7fe42b     .I.<)..?-..<+..?
   122b8:	3ce22a7b 3f7fe705 3cd59aa6 3f7fe9b8     {*.<...?...<...?
   122c8:	3cc90ab0 3f7fec43 3cbc7a9b 3f7feea7     ...<C..?.z.<...?
   122d8:	3cafea69 3f7ff0e3 3ca35a1c 3f7ff2f8     i..<...?.Z.<...?
   122e8:	3c96c9b6 3f7ff4e6 3c8a3938 3f7ff6ac     ...<...?89.<...?
   122f8:	3c7b514b 3f7ff84a 3c623000 3f7ff9c1     KQ{<J..?.0b<...?
   12308:	3c490e90 3f7ffb11 3c2fed02 3f7ffc39     ..I<...?../<9..?
   12318:	3c16cb59 3f7ffd39 3bfb5330 3f7ffe13     Y..<9..?0S.;...?
   12328:	3bc90f89 3f7ffec4 3b96cbc1 3f7fff4e     ...;...?...;N..?
   12338:	3b490fc7 3f7fffb1 3ac90fd4 3f7fffec     ..I;...?...:...?
   12348:	00000000 3f800000 bac90fd4 3f7fffec     .......?.......?
   12358:	bb490fc7 3f7fffb1 bb96cbc1 3f7fff4e     ..I....?....N..?
   12368:	bbc90f89 3f7ffec4 bbfb5330 3f7ffe13     .......?0S.....?
   12378:	bc16cb59 3f7ffd39 bc2fed02 3f7ffc39     Y...9..?../.9..?
   12388:	bc490e90 3f7ffb11 bc623000 3f7ff9c1     ..I....?.0b....?
   12398:	bc7b514b 3f7ff84a bc8a3938 3f7ff6ac     KQ{.J..?89.....?
   123a8:	bc96c9b6 3f7ff4e6 bca35a1c 3f7ff2f8     .......?.Z.....?
   123b8:	bcafea69 3f7ff0e3 bcbc7a9b 3f7feea7     i......?.z.....?
   123c8:	bcc90ab0 3f7fec43 bcd59aa6 3f7fe9b8     ....C..?.......?
   123d8:	bce22a7b 3f7fe705 bceeba2d 3f7fe42b     {*.....?-...+..?
   123e8:	bcfb49b9 3f7fe129 bd03ec90 3f7fde00     .I..)..?.......?
   123f8:	bd0a342f 3f7fdaaf bd107bb8 3f7fd737     /4.....?.{..7..?
   12408:	bd16c32c 3f7fd398 bd1d0a88 3f7fcfd1     ,......?.......?
   12418:	bd2351cc 3f7fcbe2 bd2998f6 3f7fc7cc     .Q#....?..)....?
   12428:	bd2fe007 3f7fc38f bd3626fc 3f7fbf2a     ../....?.&6.*..?
   12438:	bd3c6dd5 3f7fba9e bd42b491 3f7fb5ea     .m<....?..B....?
   12448:	bd48fb2f 3f7fb10f bd4f41af 3f7fac0d     /.H....?.AO....?
   12458:	bd55880e 3f7fa6e3 bd5bce4c 3f7fa191     ..U....?L.[....?
   12468:	bd621468 3f7f9c18 bd685a62 3f7f9678     h.b....?bZh.x..?
   12478:	bd6ea038 3f7f90b1 bd74e5e9 3f7f8ac2     8.n....?..t....?
   12488:	bd7b2b74 3f7f84ab bd80b86c 3f7f7e6d     t+{....?l...m~.?
   12498:	bd83db0a 3f7f7808 bd86fd94 3f7f717b     .....x.?....{q.?
   124a8:	bd8a200a 3f7f6ac7 bd8d426a 3f7f63ec     . ...j.?jB...c.?
   124b8:	bd9064b4 3f7f5ce9 bd9386e7 3f7f55bf     .d...\.?.....U.?
   124c8:	bd96a905 3f7f4e6d bd99cb0a 3f7f46f4     ....mN.?.....F.?
   124d8:	bd9cecf9 3f7f3f54 bda00ecf 3f7f378d     ....T?.?.....7.?
   124e8:	bda3308c 3f7f2f9d bda65230 3f7f2787     .0.../.?0R...'.?
   124f8:	bda973ba 3f7f1f49 bdac952b 3f7f16e4     .s..I..?+......?
   12508:	bdafb680 3f7f0e58 bdb2d7bb 3f7f05a4     ....X..?.......?
   12518:	bdb5f8da 3f7efcc9 bdb919dd 3f7ef3c7     ......~?......~?
   12528:	bdbc3ac3 3f7eea9d bdbf5b8d 3f7ee14c     .:....~?.[..L.~?
   12538:	bdc27c39 3f7ed7d4 bdc59cc6 3f7ece34     9|....~?....4.~?
   12548:	bdc8bd36 3f7ec46d bdcbdd86 3f7eba7f     6...m.~?......~?
   12558:	bdcefdb7 3f7eb069 bdd21dc8 3f7ea62d     ....i.~?....-.~?
   12568:	bdd53db9 3f7e9bc9 bdd85d89 3f7e913d     .=....~?.]..=.~?
   12578:	bddb7d37 3f7e868b bdde9cc4 3f7e7bb1     7}....~?.....{~?
   12588:	bde1bc2e 3f7e70b0 bde4db76 3f7e6588     .....p~?v....e~?
   12598:	bde7fa9a 3f7e5a38 bdeb199a 3f7e4ec1     ....8Z~?.....N~?
   125a8:	bdee3876 3f7e4323 bdf1572e 3f7e375e     v8..#C~?.W..^7~?
   125b8:	bdf475c0 3f7e2b72 bdf7942c 3f7e1f5e     .u..r+~?,...^.~?
   125c8:	bdfab273 3f7e1324 bdfdd092 3f7e06c2     s...$.~?......~?
   125d8:	be007745 3f7dfa38 be02062e 3f7ded88     Ew..8.}?......}?
   125e8:	be039502 3f7de0b1 be0523c2 3f7dd3b2     ......}?.#....}?
   125f8:	be06b26e 3f7dc68c be084105 3f7db940     n.....}?.A..@.}?
   12608:	be09cf86 3f7dabcc be0b5df3 3f7d9e30     ......}?.]..0.}?
   12618:	be0cec4a 3f7d906e be0e7a8b 3f7d8285     J...n.}?.z....}?
   12628:	be1008b7 3f7d7474 be1196cc 3f7d663d     ....tt}?....=f}?
   12638:	be1324ca 3f7d57de be14b2b2 3f7d4959     .$...W}?....YI}?
   12648:	be164083 3f7d3aac be17ce3d 3f7d2bd8     .@...:}?=....+}?
   12658:	be195be0 3f7d1cdd be1ae96b 3f7d0dbc     .[....}?k.....}?
   12668:	be1c76de 3f7cfe73 be1e0438 3f7cef03     .v..s.|?8.....|?
   12678:	be1f917b 3f7cdf6c be211ea5 3f7ccfae     {...l.|?..!...|?
   12688:	be22abb6 3f7cbfc9 be2438ad 3f7cafbd     .."...|?.8$...|?
   12698:	be25c58c 3f7c9f8a be275251 3f7c8f31     ..%...|?QR'.1.|?
   126a8:	be28defc 3f7c7eb0 be2a6b8d 3f7c6e08     ..(..~|?.k*..n|?
   126b8:	be2bf804 3f7c5d3a be2d8461 3f7c4c44     ..+.:]|?a.-.DL|?
   126c8:	be2f10a2 3f7c3b28 be309cc9 3f7c29e5     ../.(;|?..0..)|?
   126d8:	be3228d4 3f7c187a be33b4c4 3f7c06e9     .(2.z.|?..3...|?
   126e8:	be354098 3f7bf531 be36cc50 3f7be353     .@5.1.{?P.6.S.{?
   126f8:	be3857ec 3f7bd14d be39e36c 3f7bbf20     .W8.M.{?l.9. .{?
   12708:	be3b6ecf 3f7baccd be3cfa15 3f7b9a53     .n;...{?..<.S.{?
   12718:	be3e853e 3f7b87b2 be401049 3f7b74ea     >.>...{?I.@..t{?
   12728:	be419b37 3f7b61fc be432607 3f7b4ee7     7.A..a{?.&C..N{?
   12738:	be44b0b9 3f7b3bab be463b4d 3f7b2848     ..D..;{?M;F.H({?
   12748:	be47c5c2 3f7b14be be495018 3f7b010e     ..G...{?.PI...{?
   12758:	be4ada4f 3f7aed37 be4c6467 3f7ad93a     O.J.7.z?gdL.:.z?
   12768:	be4dee60 3f7ac516 be4f7838 3f7ab0cb     `.M...z?8xO...z?
   12778:	be5101f1 3f7a9c59 be528b89 3f7a87c1     ..Q.Y.z?..R...z?
   12788:	be541501 3f7a7302 be559e58 3f7a5e1c     ..T..sz?X.U..^z?
   12798:	be57278f 3f7a4910 be58b0a4 3f7a33dd     .'W..Iz?..X..3z?
   127a8:	be5a3997 3f7a1e84 be5bc26a 3f7a0904     .9Z...z?j.[...z?
   127b8:	be5d4b1a 3f79f35e be5ed3a8 3f79dd91     .K].^.y?..^...y?
   127c8:	be605c13 3f79c79d be61e45c 3f79b183     .\`...y?\.a...y?
   127d8:	be636c83 3f799b43 be64f486 3f7984dc     .lc.C.y?..d...y?
   127e8:	be667c66 3f796e4e be680422 3f79579a     f|f.Nny?".h..Wy?
   127f8:	be698bba 3f7940c0 be6b132f 3f7929bf     ..i..@y?/.k..)y?
   12808:	be6c9a7f 3f791298 be6e21ab 3f78fb4a     ..l...y?.!n.J.x?
   12818:	be6fa8b2 3f78e3d6 be712f94 3f78cc3b     ..o...x?./q.;.x?
   12828:	be72b651 3f78b47b be743ce8 3f789c93     Q.r.{.x?.<t...x?
   12838:	be75c35a 3f788486 be7749a6 3f786c52     Z.u...x?.Iw.Rlx?
   12848:	be78cfcc 3f7853f8 be7a55cb 3f783b77     ..x..Sx?.Uz.w;x?
   12858:	be7bdba4 3f7822d1 be7d6156 3f780a04     ..{.."x?Va}...x?
   12868:	be7ee6e1 3f77f110 be803622 3f77d7f7     ..~...w?"6....w?
   12878:	be80f8c0 3f77beb7 be81bb4a 3f77a551     ......w?J...Q.w?
   12888:	be827dc0 3f778bc5 be834022 3f777213     .}....w?"@...rw?
   12898:	be840270 3f77583a be84c4aa 3f773e3c     p...:Xw?....<>w?
   128a8:	be8586ce 3f772417 be8648df 3f7709cc     .....$w?.H....w?
   128b8:	be870ada 3f76ef5b be87ccc1 3f76d4c4     ....[.v?......v?
   128c8:	be888e93 3f76ba07 be895050 3f769f24     ......v?PP..$.v?
   128d8:	be8a11f8 3f76841b be8ad38a 3f7668ec     ......v?.....hv?
   128e8:	be8b9507 3f764d97 be8c566e 3f76321b     .....Mv?nV...2v?
   128f8:	be8d17c0 3f76167a be8dd8fc 3f75fab3     ....z.v?......u?
   12908:	be8e9a22 3f75dec6 be8f5b32 3f75c2b3     ".....u?2[....u?
   12918:	be901c2c 3f75a67b be90dd10 3f758a1c     ,...{.u?......u?
   12928:	be919ddd 3f756d97 be925e94 3f7550ed     .....mu?.^...Pu?
   12938:	be931f35 3f75341d be93dfbf 3f751727     5....4u?....'.u?
   12948:	be94a031 3f74fa0b be95608d 3f74dcc9     1.....t?.`....t?
   12958:	be9620d2 3f74bf62 be96e100 3f74a1d5     . ..b.t?......t?
   12968:	be97a117 3f748422 be986116 3f746649     ....".t?.a..Ift?
   12978:	be9920fe 3f74484b be99e0ce 3f742a27     . ..KHt?....'*t?
   12988:	be9aa086 3f740bdd be9b6027 3f73ed6e     ......t?'`..n.s?
   12998:	be9c1faf 3f73ced9 be9cdf20 3f73b01f     ......s? .....s?
   129a8:	be9d9e78 3f73913f be9e5db8 3f737239     x...?.s?.]..9rs?
   129b8:	be9f1cdf 3f73530e be9fdbee 3f7333be     .....Ss?.....3s?
   129c8:	bea09ae5 3f731447 bea159c2 3f72f4ac     ....G.s?.Y....r?
   129d8:	bea21887 3f72d4eb bea2d733 3f72b504     ......r?3.....r?
   129e8:	bea395c5 3f7294f8 bea4543f 3f7274c7     ......r??T...tr?
   129f8:	bea5129f 3f725470 bea5d0e5 3f7233f4     ....pTr?.....3r?
   12a08:	bea68f12 3f721352 bea74d25 3f71f28c     ....R.r?%M....q?
   12a18:	bea80b1f 3f71d19f bea8c8fe 3f71b08e     ......q?......q?
   12a28:	bea986c4 3f718f57 beaa446f 3f716dfb     ....W.q?oD...mq?
   12a38:	beab0201 3f714c7a beabbf77 3f712ad4     ....zLq?w....*q?
   12a48:	beac7cd4 3f710908 bead3a15 3f70e717     .|....q?.:....p?
   12a58:	beadf73c 3f70c502 beaeb449 3f70a2c6     <.....p?I.....p?
   12a68:	beaf713a 3f708066 beb02e10 3f705de1     :q..f.p?.....]p?
   12a78:	beb0eacb 3f703b37 beb1a76b 3f701867     ....7;p?k...g.p?
   12a88:	beb263ef 3f6ff573 beb32058 3f6fd25a     .c..s.o?X ..Z.o?
   12a98:	beb3dca5 3f6faf1b beb498d6 3f6f8bb8     ......o?......o?
   12aa8:	beb554ec 3f6f6830 beb610e6 3f6f4483     .T..0ho?.....Do?
   12ab8:	beb6ccc3 3f6f20b0 beb78884 3f6efcba     ..... o?......n?
   12ac8:	beb8442a 3f6ed89e beb8ffb2 3f6eb45d     *D....n?....].n?
   12ad8:	beb9bb1e 3f6e8ff8 beba766e 3f6e6b6d     ......n?nv..mkn?
   12ae8:	bebb31a0 3f6e46be bebbecb6 3f6e21eb     .1...Fn?.....!n?
   12af8:	bebca7af 3f6dfcf2 bebd628b 3f6dd7d5     ......m?.b....m?
   12b08:	bebe1d4a 3f6db293 bebed7eb 3f6d8d2d     J.....m?....-.m?
   12b18:	bebf926f 3f6d67a1 bec04cd5 3f6d41f2     o....gm?.L...Am?
   12b28:	bec1071e 3f6d1c1d bec1c148 3f6cf624     ......m?H...$.l?
   12b38:	bec27b55 3f6cd007 bec33544 3f6ca9c5     U{....l?D5....l?
   12b48:	bec3ef15 3f6c835e bec4a8c8 3f6c5cd4     ....^.l?.....\l?
   12b58:	bec5625c 3f6c3624 bec61bd2 3f6c0f50     \b..$6l?....P.l?
   12b68:	bec6d529 3f6be858 bec78e62 3f6bc13b     )...X.k?b...;.k?
   12b78:	bec8477c 3f6b99fb bec90077 3f6b7295     |G....k?w....rk?
   12b88:	bec9b953 3f6b4b0c beca7210 3f6b235e     S....Kk?.r..^#k?
   12b98:	becb2aae 3f6afb8c becbe32c 3f6ad395     .*....j?,.....j?
   12ba8:	becc9b8b 3f6aab7b becd53ca 3f6a833c     ....{.j?.S..<.j?
   12bb8:	bece0bea 3f6a5ad9 becec3ea 3f6a3252     .....Zj?....R2j?
   12bc8:	becf7bca 3f6a09a7 bed0338a 3f69e0d7     .{....j?.3....i?
   12bd8:	bed0eb2a 3f69b7e4 bed1a2aa 3f698ecc     *.....i?......i?
   12be8:	bed25a09 3f696591 bed31148 3f693c32     .Z...ei?H...2<i?
   12bf8:	bed3c867 3f6912ae bed47f64 3f68e907     g.....i?d.....h?
   12c08:	bed53641 3f68bf3c bed5ecfd 3f68954c     A6..<.h?....L.h?
   12c18:	bed6a399 3f686b39 bed75a13 3f684103     ....9kh?.Z...Ah?
   12c28:	bed8106b 3f6816a8 bed8c6a3 3f67ec2a     k.....h?....*.g?
   12c38:	bed97cb9 3f67c187 beda32ad 3f6796c1     .|....g?.2....g?
   12c48:	bedae880 3f676bd8 bedb9e31 3f6740ca     .....kg?1....@g?
   12c58:	bedc53c1 3f671599 bedd092e 3f66ea45     .S....g?....E.f?
   12c68:	beddbe79 3f66becc bede73a2 3f669330     y.....f?.s..0.f?
   12c78:	bedf28a9 3f666771 bedfdd8d 3f663b8e     .(..qgf?.....;f?
   12c88:	bee0924f 3f660f88 bee146ee 3f65e35e     O.....f?.F..^.e?
   12c98:	bee1fb6a 3f65b710 bee2afc4 3f658aa0     j.....e?......e?
   12ca8:	bee363fa 3f655e0b bee4180e 3f653154     .c...^e?....T1e?
   12cb8:	bee4cbfe 3f650479 bee57fcb 3f64d77b     ....y.e?....{.d?
   12cc8:	bee63375 3f64aa59 bee6e6fb 3f647d14     u3..Y.d?.....}d?
   12cd8:	bee79a5d 3f644fac bee84d9c 3f642221     ]....Od?.M..!"d?
   12ce8:	bee900b7 3f63f473 bee9b3ae 3f63c6a1     ....s.c?......c?
   12cf8:	beea6681 3f6398ac beeb1930 3f636a95     .f....c?0....jc?
   12d08:	beebcbbb 3f633c5a beec7e21 3f630dfc     ....Z<c?!~....c?
   12d18:	beed3063 3f62df7b beede280 3f62b0d7     c0..{.b?......b?
   12d28:	beee9479 3f628210 beef464c 3f625326     y.....b?LF..&Sb?
   12d38:	beeff7fb 3f62241a bef0a985 3f61f4ea     .....$b?......a?
   12d48:	bef15aea 3f61c598 bef20c29 3f619622     .Z....a?)...".a?
   12d58:	bef2bd43 3f61668a bef36e38 3f6136d0     C....fa?8n...6a?
   12d68:	bef41f07 3f6106f2 bef4cfb1 3f60d6f2     ......a?......`?
   12d78:	bef58035 3f60a6cf bef63093 3f607689     5.....`?.0...v`?
   12d88:	bef6e0cb 3f604621 bef790dc 3f601596     ....!F`?......`?
   12d98:	bef840c8 3f5fe4e9 bef8f08e 3f5fb419     .@...._?......_?
   12da8:	bef9a02d 3f5f8327 befa4fa5 3f5f5212     -...'._?.O...R_?
   12db8:	befafef7 3f5f20db befbae22 3f5eef81     ..... _?".....^?
   12dc8:	befc5d27 3f5ebe05 befd0c04 3f5e8c67     ']....^?....g.^?
   12dd8:	befdbabb 3f5e5aa6 befe694a 3f5e28c3     .....Z^?Ji...(^?
   12de8:	beff17b2 3f5df6be beffc5f3 3f5dc497     ......]?......]?
   12df8:	bf003a06 3f5d924d bf0090ff 3f5d5fe1     .:..M.]?....._]?
   12e08:	bf00e7e4 3f5d2d53 bf013eb5 3f5cfaa3     ....S-]?.>....\?
   12e18:	bf019573 3f5cc7d1 bf01ec1c 3f5c94dd     s.....\?......\?
   12e28:	bf0242b1 3f5c61c7 bf029932 3f5c2e8e     .B...a\?2.....\?
   12e38:	bf02ef9f 3f5bfb34 bf0345f8 3f5bc7b8     ....4.[?.E....[?
   12e48:	bf039c3d 3f5b941a bf03f26d 3f5b605a     =.....[?m...Z`[?
   12e58:	bf044889 3f5b2c79 bf049e91 3f5af875     .H..y,[?....u.Z?
   12e68:	bf04f484 3f5ac450 bf054a62 3f5a9009     ....P.Z?bJ....Z?
   12e78:	bf05a02c 3f5a5ba0 bf05f5e2 3f5a2716     ,....[Z?.....'Z?
   12e88:	bf064b82 3f59f26a bf06a10e 3f59bd9c     .K..j.Y?......Y?
   12e98:	bf06f686 3f5988ad bf074be8 3f59539c     ......Y?.K...SY?
   12ea8:	bf07a136 3f591e6a bf07f66f 3f58e917     6...j.Y?o.....X?
   12eb8:	bf084b92 3f58b3a1 bf08a0a1 3f587e0b     .K....X?.....~X?
   12ec8:	bf08f59b 3f584853 bf094a7f 3f581279     ....SHX?.J..y.X?
   12ed8:	bf099f4e 3f57dc7f bf09f409 3f57a663     N.....W?....c.W?
   12ee8:	bf0a48ad 3f577026 bf0a9d3d 3f5739c7     .H..&pW?=....9W?
   12ef8:	bf0af1b7 3f570348 bf0b461c 3f56cca7     ....H.W?.F....V?
   12f08:	bf0b9a6b 3f5695e5 bf0beea5 3f565f02     k.....V?....._V?
   12f18:	bf0c42c9 3f5627fe bf0c96d7 3f55f0d9     .B...'V?......U?
   12f28:	bf0cead0 3f55b993 bf0d3eb3 3f55822c     ......U?.>..,.U?
   12f38:	bf0d9281 3f554aa4 bf0de638 3f5512fb     .....JU?8.....U?
   12f48:	bf0e39da 3f54db31 bf0e8d65 3f54a347     .9..1.T?e...G.T?
   12f58:	bf0ee0db 3f546b3b bf0f343b 3f54330f     ....;kT?;4...3T?
   12f68:	bf0f8784 3f53fac3 bf0fdab8 3f53c255     ......S?....U.S?
   12f78:	bf102dd5 3f5389c7 bf1080dc 3f535118     .-....S?.....QS?
   12f88:	bf10d3cd 3f531849 bf1126a7 3f52df59     ....I.S?.&..Y.R?
   12f98:	bf11796b 3f52a649 bf11cc19 3f526d18     ky..I.R?.....mR?
   12fa8:	bf121eb0 3f5233c6 bf127130 3f51fa54     .....3R?0q..T.Q?
   12fb8:	bf12c39a 3f51c0c2 bf1315ee 3f518710     ......Q?......Q?
   12fc8:	bf13682a 3f514d3d bf13ba50 3f51134a     *h..=MQ?P...J.Q?
   12fd8:	bf140c5f 3f50d937 bf145e58 3f509f03     _...7.P?X^....P?
   12fe8:	bf14b039 3f5064af bf150204 3f502a3b     9....dP?....;*P?
   12ff8:	bf1553b7 3f4fefa8 bf15a554 3f4fb4f4     .S....O?T.....O?
   13008:	bf15f6d9 3f4f7a1f bf164847 3f4f3f2b     .....zO?GH..+?O?
   13018:	bf16999f 3f4f0417 bf16eadf 3f4ec8e4     ......O?......N?
   13028:	bf173c07 3f4e8d90 bf178d18 3f4e521c     .<....N?.....RN?
   13038:	bf17de12 3f4e1689 bf182ef5 3f4ddad5     ......N?......M?
   13048:	bf187fc0 3f4d9f02 bf18d073 3f4d6310     ......M?s....cM?
   13058:	bf19210f 3f4d26fd bf197194 3f4ceacb     .!...&M?.q....L?
   13068:	bf19c200 3f4cae79 bf1a1255 3f4c7208     ....y.L?U....rL?
   13078:	bf1a6293 3f4c3578 bf1ab2b8 3f4bf8c7     .b..x5L?......K?
   13088:	bf1b02c6 3f4bbbf8 bf1b52bb 3f4b7f09     ......K?.R....K?
   13098:	bf1ba299 3f4b41fa bf1bf25f 3f4b04cc     .....AK?_.....K?
   130a8:	bf1c420c 3f4ac77f bf1c91a2 3f4a8a13     .B....J?......J?
   130b8:	bf1ce11f 3f4a4c87 bf1d3084 3f4a0edc     .....LJ?.0....J?
   130c8:	bf1d7fd1 3f49d112 bf1dcf06 3f499329     ......I?....).I?
   130d8:	bf1e1e22 3f495521 bf1e6d26 3f4916fa     "...!UI?&m....I?
   130e8:	bf1ebc12 3f48d8b3 bf1f0ae5 3f489a4e     ......H?....N.H?
   130f8:	bf1f599f 3f485bca bf1fa841 3f481d27     .Y...[H?A...'.H?
   13108:	bf1ff6cb 3f47de65 bf20453b 3f479f84     ....e.G?;E ...G?
   13118:	bf209393 3f476085 bf20e1d2 3f472167     .. ..`G?.. .g!G?
   13128:	bf212ff9 3f46e22a bf217e06 3f46a2ce     ./!.*.F?.~!...F?
   13138:	bf21cbfb 3f466354 bf2219d7 3f4623bb     ..!.TcF?.."..#F?
   13148:	bf226799 3f45e403 bf22b543 3f45a42d     .g"...E?C.".-.E?
   13158:	bf2302d3 3f456439 bf23504b 3f452426     ..#.9dE?KP#.&$E?
   13168:	bf239da9 3f44e3f5 bf23eaee 3f44a3a5     ..#...D?..#...D?
   13178:	bf24381a 3f446337 bf24852c 3f4422ab     .8$.7cD?,.$.."D?
   13188:	bf24d225 3f43e200 bf251f04 3f43a138     %.$...C?..%.8.C?
   13198:	bf256bcb 3f436051 bf25b877 3f431f4c     .k%.Q`C?w.%.L.C?
   131a8:	bf26050a 3f42de29 bf265184 3f429ce8     ..&.).B?.Q&...B?
   131b8:	bf269de3 3f425b89 bf26ea2a 3f421a0b     ..&..[B?*.&...B?
   131c8:	bf273656 3f41d870 bf278268 3f4196b7     V6'.p.A?h.'...A?
   131d8:	bf27ce61 3f4154e1 bf281a40 3f4112ec     a.'..TA?@.(...A?
   131e8:	bf286605 3f40d0da bf28b1b0 3f408ea9     .f(...@?..(...@?
   131f8:	bf28fd41 3f404c5c bf2948b8 3f4009f0     A.(.\L@?.H)...@?
   13208:	bf299415 3f3fc767 bf29df57 3f3f84c0     ..).g.??W.)...??
   13218:	bf2a2a80 3f3f41fc bf2a758e 3f3eff1b     .**..A??.u*...>?
   13228:	bf2ac082 3f3ebc1b bf2b0b5b 3f3e78ff     ..*...>?[.+..x>?
   13238:	bf2b561b 3f3e35c5 bf2ba0bf 3f3df26e     .V+..5>?..+.n.=?
   13248:	bf2beb4a 3f3daef9 bf2c35b9 3f3d6b67     J.+...=?.5,.gk=?
   13258:	bf2c800f 3f3d27b8 bf2cca49 3f3ce3ec     ..,..'=?I.,...<?
   13268:	bf2d1469 3f3ca003 bf2d5e6f 3f3c5bfc     i.-...<?o^-..[<?
   13278:	bf2da859 3f3c17d9 bf2df229 3f3bd398     Y.-...<?).-...;?
   13288:	bf2e3bde 3f3b8f3b bf2e8578 3f3b4ac1     .;..;.;?x....J;?
   13298:	bf2ecef7 3f3b0629 bf2f185b 3f3ac175     ....).;?[./.u.:?
   132a8:	bf2f61a5 3f3a7ca4 bf2faad3 3f3a37b7     .a/..|:?../..7:?
   132b8:	bf2ff3e6 3f39f2ac bf303cde 3f39ad85     ../...9?.<0...9?
   132c8:	bf3085bb 3f396842 bf30ce7c 3f3922e1     ..0.Bh9?|.0.."9?
   132d8:	bf311722 3f38dd65 bf315fad 3f3897cb     ".1.e.8?._1...8?
   132e8:	bf31a81d 3f385216 bf31f071 3f380c43     ..1..R8?q.1.C.8?
   132f8:	bf3238aa 3f37c655 bf3280c7 3f37804a     .82.U.7?..2.J.7?
   13308:	bf32c8c9 3f373a23 bf3310af 3f36f3df     ..2.#:7?..3...6?
   13318:	bf33587a 3f36ad7f bf33a029 3f366704     zX3...6?).3..g6?
   13328:	bf33e7bc 3f36206c bf342f34 3f35d9b8     ..3.l 6?4/4...5?
   13338:	bf34768f 3f3592e7 bf34bdcf 3f354bfb     .v4...5?..4..K5?
   13348:	bf3504f3 3f3504f3 bf354bfb 3f34bdcf     ..5...5?.K5...4?
   13358:	bf3592e7 3f34768f bf35d9b8 3f342f34     ..5..v4?..5.4/4?
   13368:	bf36206c 3f33e7bc bf366704 3f33a029     l 6...3?.g6.).3?
   13378:	bf36ad7f 3f33587a bf36f3df 3f3310af     ..6.zX3?..6...3?
   13388:	bf373a23 3f32c8c9 bf37804a 3f3280c7     #:7...2?J.7...2?
   13398:	bf37c655 3f3238aa bf380c43 3f31f071     U.7..82?C.8.q.1?
   133a8:	bf385216 3f31a81d bf3897cb 3f315fad     .R8...1?..8.._1?
   133b8:	bf38dd65 3f311722 bf3922e1 3f30ce7c     e.8.".1?."9.|.0?
   133c8:	bf396842 3f3085bb bf39ad85 3f303cde     Bh9...0?..9..<0?
   133d8:	bf39f2ac 3f2ff3e6 bf3a37b7 3f2faad3     ..9.../?.7:.../?
   133e8:	bf3a7ca4 3f2f61a5 bf3ac175 3f2f185b     .|:..a/?u.:.[./?
   133f8:	bf3b0629 3f2ecef7 bf3b4ac1 3f2e8578     ).;....?.J;.x..?
   13408:	bf3b8f3b 3f2e3bde bf3bd398 3f2df229     ;.;..;.?..;.).-?
   13418:	bf3c17d9 3f2da859 bf3c5bfc 3f2d5e6f     ..<.Y.-?.[<.o^-?
   13428:	bf3ca003 3f2d1469 bf3ce3ec 3f2cca49     ..<.i.-?..<.I.,?
   13438:	bf3d27b8 3f2c800f bf3d6b67 3f2c35b9     .'=...,?gk=..5,?
   13448:	bf3daef9 3f2beb4a bf3df26e 3f2ba0bf     ..=.J.+?n.=...+?
   13458:	bf3e35c5 3f2b561b bf3e78ff 3f2b0b5b     .5>..V+?.x>.[.+?
   13468:	bf3ebc1b 3f2ac082 bf3eff1b 3f2a758e     ..>...*?..>..u*?
   13478:	bf3f41fc 3f2a2a80 bf3f84c0 3f29df57     .A?..**?..?.W.)?
   13488:	bf3fc767 3f299415 bf4009f0 3f2948b8     g.?...)?..@..H)?
   13498:	bf404c5c 3f28fd41 bf408ea9 3f28b1b0     \L@.A.(?..@...(?
   134a8:	bf40d0da 3f286605 bf4112ec 3f281a40     ..@..f(?..A.@.(?
   134b8:	bf4154e1 3f27ce61 bf4196b7 3f278268     .TA.a.'?..A.h.'?
   134c8:	bf41d870 3f273656 bf421a0b 3f26ea2a     p.A.V6'?..B.*.&?
   134d8:	bf425b89 3f269de3 bf429ce8 3f265184     .[B...&?..B..Q&?
   134e8:	bf42de29 3f26050a bf431f4c 3f25b877     ).B...&?L.C.w.%?
   134f8:	bf436051 3f256bcb bf43a138 3f251f04     Q`C..k%?8.C...%?
   13508:	bf43e200 3f24d225 bf4422ab 3f24852c     ..C.%.$?."D.,.$?
   13518:	bf446337 3f24381a bf44a3a5 3f23eaee     7cD..8$?..D...#?
   13528:	bf44e3f5 3f239da9 bf452426 3f23504b     ..D...#?&$E.KP#?
   13538:	bf456439 3f2302d3 bf45a42d 3f22b543     9dE...#?-.E.C."?
   13548:	bf45e403 3f226799 bf4623bb 3f2219d7     ..E..g"?.#F..."?
   13558:	bf466354 3f21cbfb bf46a2ce 3f217e06     TcF...!?..F..~!?
   13568:	bf46e22a 3f212ff9 bf472167 3f20e1d2     *.F../!?g!G... ?
   13578:	bf476085 3f209393 bf479f84 3f20453b     .`G... ?..G.;E ?
   13588:	bf47de65 3f1ff6cb bf481d27 3f1fa841     e.G....?'.H.A..?
   13598:	bf485bca 3f1f599f bf489a4e 3f1f0ae5     .[H..Y.?N.H....?
   135a8:	bf48d8b3 3f1ebc12 bf4916fa 3f1e6d26     ..H....?..I.&m.?
   135b8:	bf495521 3f1e1e22 bf499329 3f1dcf06     !UI."..?).I....?
   135c8:	bf49d112 3f1d7fd1 bf4a0edc 3f1d3084     ..I....?..J..0.?
   135d8:	bf4a4c87 3f1ce11f bf4a8a13 3f1c91a2     .LJ....?..J....?
   135e8:	bf4ac77f 3f1c420c bf4b04cc 3f1bf25f     ..J..B.?..K._..?
   135f8:	bf4b41fa 3f1ba299 bf4b7f09 3f1b52bb     .AK....?..K..R.?
   13608:	bf4bbbf8 3f1b02c6 bf4bf8c7 3f1ab2b8     ..K....?..K....?
   13618:	bf4c3578 3f1a6293 bf4c7208 3f1a1255     x5L..b.?.rL.U..?
   13628:	bf4cae79 3f19c200 bf4ceacb 3f197194     y.L....?..L..q.?
   13638:	bf4d26fd 3f19210f bf4d6310 3f18d073     .&M..!.?.cM.s..?
   13648:	bf4d9f02 3f187fc0 bf4ddad5 3f182ef5     ..M....?..M....?
   13658:	bf4e1689 3f17de12 bf4e521c 3f178d18     ..N....?.RN....?
   13668:	bf4e8d90 3f173c07 bf4ec8e4 3f16eadf     ..N..<.?..N....?
   13678:	bf4f0417 3f16999f bf4f3f2b 3f164847     ..O....?+?O.GH.?
   13688:	bf4f7a1f 3f15f6d9 bf4fb4f4 3f15a554     .zO....?..O.T..?
   13698:	bf4fefa8 3f1553b7 bf502a3b 3f150204     ..O..S.?;*P....?
   136a8:	bf5064af 3f14b039 bf509f03 3f145e58     .dP.9..?..P.X^.?
   136b8:	bf50d937 3f140c5f bf51134a 3f13ba50     7.P._..?J.Q.P..?
   136c8:	bf514d3d 3f13682a bf518710 3f1315ee     =MQ.*h.?..Q....?
   136d8:	bf51c0c2 3f12c39a bf51fa54 3f127130     ..Q....?T.Q.0q.?
   136e8:	bf5233c6 3f121eb0 bf526d18 3f11cc19     .3R....?.mR....?
   136f8:	bf52a649 3f11796b bf52df59 3f1126a7     I.R.ky.?Y.R..&.?
   13708:	bf531849 3f10d3cd bf535118 3f1080dc     I.S....?.QS....?
   13718:	bf5389c7 3f102dd5 bf53c255 3f0fdab8     ..S..-.?U.S....?
   13728:	bf53fac3 3f0f8784 bf54330f 3f0f343b     ..S....?.3T.;4.?
   13738:	bf546b3b 3f0ee0db bf54a347 3f0e8d65     ;kT....?G.T.e..?
   13748:	bf54db31 3f0e39da bf5512fb 3f0de638     1.T..9.?..U.8..?
   13758:	bf554aa4 3f0d9281 bf55822c 3f0d3eb3     .JU....?,.U..>.?
   13768:	bf55b993 3f0cead0 bf55f0d9 3f0c96d7     ..U....?..U....?
   13778:	bf5627fe 3f0c42c9 bf565f02 3f0beea5     .'V..B.?._V....?
   13788:	bf5695e5 3f0b9a6b bf56cca7 3f0b461c     ..V.k..?..V..F.?
   13798:	bf570348 3f0af1b7 bf5739c7 3f0a9d3d     H.W....?.9W.=..?
   137a8:	bf577026 3f0a48ad bf57a663 3f09f409     &pW..H.?c.W....?
   137b8:	bf57dc7f 3f099f4e bf581279 3f094a7f     ..W.N..?y.X..J.?
   137c8:	bf584853 3f08f59b bf587e0b 3f08a0a1     SHX....?.~X....?
   137d8:	bf58b3a1 3f084b92 bf58e917 3f07f66f     ..X..K.?..X.o..?
   137e8:	bf591e6a 3f07a136 bf59539c 3f074be8     j.Y.6..?.SY..K.?
   137f8:	bf5988ad 3f06f686 bf59bd9c 3f06a10e     ..Y....?..Y....?
   13808:	bf59f26a 3f064b82 bf5a2716 3f05f5e2     j.Y..K.?.'Z....?
   13818:	bf5a5ba0 3f05a02c bf5a9009 3f054a62     .[Z.,..?..Z.bJ.?
   13828:	bf5ac450 3f04f484 bf5af875 3f049e91     P.Z....?u.Z....?
   13838:	bf5b2c79 3f044889 bf5b605a 3f03f26d     y,[..H.?Z`[.m..?
   13848:	bf5b941a 3f039c3d bf5bc7b8 3f0345f8     ..[.=..?..[..E.?
   13858:	bf5bfb34 3f02ef9f bf5c2e8e 3f029932     4.[....?..\.2..?
   13868:	bf5c61c7 3f0242b1 bf5c94dd 3f01ec1c     .a\..B.?..\....?
   13878:	bf5cc7d1 3f019573 bf5cfaa3 3f013eb5     ..\.s..?..\..>.?
   13888:	bf5d2d53 3f00e7e4 bf5d5fe1 3f0090ff     S-]....?._]....?
   13898:	bf5d924d 3f003a06 bf5dc497 3effc5f3     M.]..:.?..]....>
   138a8:	bf5df6be 3eff17b2 bf5e28c3 3efe694a     ..]....>.(^.Ji.>
   138b8:	bf5e5aa6 3efdbabb bf5e8c67 3efd0c04     .Z^....>g.^....>
   138c8:	bf5ebe05 3efc5d27 bf5eef81 3efbae22     ..^.'].>..^."..>
   138d8:	bf5f20db 3efafef7 bf5f5212 3efa4fa5     . _....>.R_..O.>
   138e8:	bf5f8327 3ef9a02d bf5fb419 3ef8f08e     '._.-..>.._....>
   138f8:	bf5fe4e9 3ef840c8 bf601596 3ef790dc     .._..@.>..`....>
   13908:	bf604621 3ef6e0cb bf607689 3ef63093     !F`....>.v`..0.>
   13918:	bf60a6cf 3ef58035 bf60d6f2 3ef4cfb1     ..`.5..>..`....>
   13928:	bf6106f2 3ef41f07 bf6136d0 3ef36e38     ..a....>.6a.8n.>
   13938:	bf61668a 3ef2bd43 bf619622 3ef20c29     .fa.C..>".a.)..>
   13948:	bf61c598 3ef15aea bf61f4ea 3ef0a985     ..a..Z.>..a....>
   13958:	bf62241a 3eeff7fb bf625326 3eef464c     .$b....>&Sb.LF.>
   13968:	bf628210 3eee9479 bf62b0d7 3eede280     ..b.y..>..b....>
   13978:	bf62df7b 3eed3063 bf630dfc 3eec7e21     {.b.c0.>..c.!~.>
   13988:	bf633c5a 3eebcbbb bf636a95 3eeb1930     Z<c....>.jc.0..>
   13998:	bf6398ac 3eea6681 bf63c6a1 3ee9b3ae     ..c..f.>..c....>
   139a8:	bf63f473 3ee900b7 bf642221 3ee84d9c     s.c....>!"d..M.>
   139b8:	bf644fac 3ee79a5d bf647d14 3ee6e6fb     .Od.]..>.}d....>
   139c8:	bf64aa59 3ee63375 bf64d77b 3ee57fcb     Y.d.u3.>{.d....>
   139d8:	bf650479 3ee4cbfe bf653154 3ee4180e     y.e....>T1e....>
   139e8:	bf655e0b 3ee363fa bf658aa0 3ee2afc4     .^e..c.>..e....>
   139f8:	bf65b710 3ee1fb6a bf65e35e 3ee146ee     ..e.j..>^.e..F.>
   13a08:	bf660f88 3ee0924f bf663b8e 3edfdd8d     ..f.O..>.;f....>
   13a18:	bf666771 3edf28a9 bf669330 3ede73a2     qgf..(.>0.f..s.>
   13a28:	bf66becc 3eddbe79 bf66ea45 3edd092e     ..f.y..>E.f....>
   13a38:	bf671599 3edc53c1 bf6740ca 3edb9e31     ..g..S.>.@g.1..>
   13a48:	bf676bd8 3edae880 bf6796c1 3eda32ad     .kg....>..g..2.>
   13a58:	bf67c187 3ed97cb9 bf67ec2a 3ed8c6a3     ..g..|.>*.g....>
   13a68:	bf6816a8 3ed8106b bf684103 3ed75a13     ..h.k..>.Ah..Z.>
   13a78:	bf686b39 3ed6a399 bf68954c 3ed5ecfd     9kh....>L.h....>
   13a88:	bf68bf3c 3ed53641 bf68e907 3ed47f64     <.h.A6.>..h.d..>
   13a98:	bf6912ae 3ed3c867 bf693c32 3ed31148     ..i.g..>2<i.H..>
   13aa8:	bf696591 3ed25a09 bf698ecc 3ed1a2aa     .ei..Z.>..i....>
   13ab8:	bf69b7e4 3ed0eb2a bf69e0d7 3ed0338a     ..i.*..>..i..3.>
   13ac8:	bf6a09a7 3ecf7bca bf6a3252 3ecec3ea     ..j..{.>R2j....>
   13ad8:	bf6a5ad9 3ece0bea bf6a833c 3ecd53ca     .Zj....><.j..S.>
   13ae8:	bf6aab7b 3ecc9b8b bf6ad395 3ecbe32c     {.j....>..j.,..>
   13af8:	bf6afb8c 3ecb2aae bf6b235e 3eca7210     ..j..*.>^#k..r.>
   13b08:	bf6b4b0c 3ec9b953 bf6b7295 3ec90077     .Kk.S..>.rk.w..>
   13b18:	bf6b99fb 3ec8477c bf6bc13b 3ec78e62     ..k.|G.>;.k.b..>
   13b28:	bf6be858 3ec6d529 bf6c0f50 3ec61bd2     X.k.)..>P.l....>
   13b38:	bf6c3624 3ec5625c bf6c5cd4 3ec4a8c8     $6l.\b.>.\l....>
   13b48:	bf6c835e 3ec3ef15 bf6ca9c5 3ec33544     ^.l....>..l.D5.>
   13b58:	bf6cd007 3ec27b55 bf6cf624 3ec1c148     ..l.U{.>$.l.H..>
   13b68:	bf6d1c1d 3ec1071e bf6d41f2 3ec04cd5     ..m....>.Am..L.>
   13b78:	bf6d67a1 3ebf926f bf6d8d2d 3ebed7eb     .gm.o..>-.m....>
   13b88:	bf6db293 3ebe1d4a bf6dd7d5 3ebd628b     ..m.J..>..m..b.>
   13b98:	bf6dfcf2 3ebca7af bf6e21eb 3ebbecb6     ..m....>.!n....>
   13ba8:	bf6e46be 3ebb31a0 bf6e6b6d 3eba766e     .Fn..1.>mkn.nv.>
   13bb8:	bf6e8ff8 3eb9bb1e bf6eb45d 3eb8ffb2     ..n....>].n....>
   13bc8:	bf6ed89e 3eb8442a bf6efcba 3eb78884     ..n.*D.>..n....>
   13bd8:	bf6f20b0 3eb6ccc3 bf6f4483 3eb610e6     . o....>.Do....>
   13be8:	bf6f6830 3eb554ec bf6f8bb8 3eb498d6     0ho..T.>..o....>
   13bf8:	bf6faf1b 3eb3dca5 bf6fd25a 3eb32058     ..o....>Z.o.X .>
   13c08:	bf6ff573 3eb263ef bf701867 3eb1a76b     s.o..c.>g.p.k..>
   13c18:	bf703b37 3eb0eacb bf705de1 3eb02e10     7;p....>.]p....>
   13c28:	bf708066 3eaf713a bf70a2c6 3eaeb449     f.p.:q.>..p.I..>
   13c38:	bf70c502 3eadf73c bf70e717 3ead3a15     ..p.<..>..p..:.>
   13c48:	bf710908 3eac7cd4 bf712ad4 3eabbf77     ..q..|.>.*q.w..>
   13c58:	bf714c7a 3eab0201 bf716dfb 3eaa446f     zLq....>.mq.oD.>
   13c68:	bf718f57 3ea986c4 bf71b08e 3ea8c8fe     W.q....>..q....>
   13c78:	bf71d19f 3ea80b1f bf71f28c 3ea74d25     ..q....>..q.%M.>
   13c88:	bf721352 3ea68f12 bf7233f4 3ea5d0e5     R.r....>.3r....>
   13c98:	bf725470 3ea5129f bf7274c7 3ea4543f     pTr....>.tr.?T.>
   13ca8:	bf7294f8 3ea395c5 bf72b504 3ea2d733     ..r....>..r.3..>
   13cb8:	bf72d4eb 3ea21887 bf72f4ac 3ea159c2     ..r....>..r..Y.>
   13cc8:	bf731447 3ea09ae5 bf7333be 3e9fdbee     G.s....>.3s....>
   13cd8:	bf73530e 3e9f1cdf bf737239 3e9e5db8     .Ss....>9rs..].>
   13ce8:	bf73913f 3e9d9e78 bf73b01f 3e9cdf20     ?.s.x..>..s. ..>
   13cf8:	bf73ced9 3e9c1faf bf73ed6e 3e9b6027     ..s....>n.s.'`.>
   13d08:	bf740bdd 3e9aa086 bf742a27 3e99e0ce     ..t....>'*t....>
   13d18:	bf74484b 3e9920fe bf746649 3e986116     KHt.. .>Ift..a.>
   13d28:	bf748422 3e97a117 bf74a1d5 3e96e100     ".t....>..t....>
   13d38:	bf74bf62 3e9620d2 bf74dcc9 3e95608d     b.t.. .>..t..`.>
   13d48:	bf74fa0b 3e94a031 bf751727 3e93dfbf     ..t.1..>'.u....>
   13d58:	bf75341d 3e931f35 bf7550ed 3e925e94     .4u.5..>.Pu..^.>
   13d68:	bf756d97 3e919ddd bf758a1c 3e90dd10     .mu....>..u....>
   13d78:	bf75a67b 3e901c2c bf75c2b3 3e8f5b32     {.u.,..>..u.2[.>
   13d88:	bf75dec6 3e8e9a22 bf75fab3 3e8dd8fc     ..u."..>..u....>
   13d98:	bf76167a 3e8d17c0 bf76321b 3e8c566e     z.v....>.2v.nV.>
   13da8:	bf764d97 3e8b9507 bf7668ec 3e8ad38a     .Mv....>.hv....>
   13db8:	bf76841b 3e8a11f8 bf769f24 3e895050     ..v....>$.v.PP.>
   13dc8:	bf76ba07 3e888e93 bf76d4c4 3e87ccc1     ..v....>..v....>
   13dd8:	bf76ef5b 3e870ada bf7709cc 3e8648df     [.v....>..w..H.>
   13de8:	bf772417 3e8586ce bf773e3c 3e84c4aa     .$w....><>w....>
   13df8:	bf77583a 3e840270 bf777213 3e834022     :Xw.p..>.rw."@.>
   13e08:	bf778bc5 3e827dc0 bf77a551 3e81bb4a     ..w..}.>Q.w.J..>
   13e18:	bf77beb7 3e80f8c0 bf77d7f7 3e803622     ..w....>..w."6.>
   13e28:	bf77f110 3e7ee6e1 bf780a04 3e7d6156     ..w...~>..x.Va}>
   13e38:	bf7822d1 3e7bdba4 bf783b77 3e7a55cb     ."x...{>w;x..Uz>
   13e48:	bf7853f8 3e78cfcc bf786c52 3e7749a6     .Sx...x>Rlx..Iw>
   13e58:	bf788486 3e75c35a bf789c93 3e743ce8     ..x.Z.u>..x..<t>
   13e68:	bf78b47b 3e72b651 bf78cc3b 3e712f94     {.x.Q.r>;.x../q>
   13e78:	bf78e3d6 3e6fa8b2 bf78fb4a 3e6e21ab     ..x...o>J.x..!n>
   13e88:	bf791298 3e6c9a7f bf7929bf 3e6b132f     ..y...l>.)y./.k>
   13e98:	bf7940c0 3e698bba bf79579a 3e680422     .@y...i>.Wy.".h>
   13ea8:	bf796e4e 3e667c66 bf7984dc 3e64f486     Nny.f|f>..y...d>
   13eb8:	bf799b43 3e636c83 bf79b183 3e61e45c     C.y..lc>..y.\.a>
   13ec8:	bf79c79d 3e605c13 bf79dd91 3e5ed3a8     ..y..\`>..y...^>
   13ed8:	bf79f35e 3e5d4b1a bf7a0904 3e5bc26a     ^.y..K]>..z.j.[>
   13ee8:	bf7a1e84 3e5a3997 bf7a33dd 3e58b0a4     ..z..9Z>.3z...X>
   13ef8:	bf7a4910 3e57278f bf7a5e1c 3e559e58     .Iz..'W>.^z.X.U>
   13f08:	bf7a7302 3e541501 bf7a87c1 3e528b89     .sz...T>..z...R>
   13f18:	bf7a9c59 3e5101f1 bf7ab0cb 3e4f7838     Y.z...Q>..z.8xO>
   13f28:	bf7ac516 3e4dee60 bf7ad93a 3e4c6467     ..z.`.M>:.z.gdL>
   13f38:	bf7aed37 3e4ada4f bf7b010e 3e495018     7.z.O.J>..{..PI>
   13f48:	bf7b14be 3e47c5c2 bf7b2848 3e463b4d     ..{...G>H({.M;F>
   13f58:	bf7b3bab 3e44b0b9 bf7b4ee7 3e432607     .;{...D>.N{..&C>
   13f68:	bf7b61fc 3e419b37 bf7b74ea 3e401049     .a{.7.A>.t{.I.@>
   13f78:	bf7b87b2 3e3e853e bf7b9a53 3e3cfa15     ..{.>.>>S.{...<>
   13f88:	bf7baccd 3e3b6ecf bf7bbf20 3e39e36c     ..{..n;> .{.l.9>
   13f98:	bf7bd14d 3e3857ec bf7be353 3e36cc50     M.{..W8>S.{.P.6>
   13fa8:	bf7bf531 3e354098 bf7c06e9 3e33b4c4     1.{..@5>..|...3>
   13fb8:	bf7c187a 3e3228d4 bf7c29e5 3e309cc9     z.|..(2>.)|...0>
   13fc8:	bf7c3b28 3e2f10a2 bf7c4c44 3e2d8461     (;|.../>DL|.a.->
   13fd8:	bf7c5d3a 3e2bf804 bf7c6e08 3e2a6b8d     :]|...+>.n|..k*>
   13fe8:	bf7c7eb0 3e28defc bf7c8f31 3e275251     .~|...(>1.|.QR'>
   13ff8:	bf7c9f8a 3e25c58c bf7cafbd 3e2438ad     ..|...%>..|..8$>
   14008:	bf7cbfc9 3e22abb6 bf7ccfae 3e211ea5     ..|...">..|...!>
   14018:	bf7cdf6c 3e1f917b bf7cef03 3e1e0438     l.|.{..>..|.8..>
   14028:	bf7cfe73 3e1c76de bf7d0dbc 3e1ae96b     s.|..v.>..}.k..>
   14038:	bf7d1cdd 3e195be0 bf7d2bd8 3e17ce3d     ..}..[.>.+}.=..>
   14048:	bf7d3aac 3e164083 bf7d4959 3e14b2b2     .:}..@.>YI}....>
   14058:	bf7d57de 3e1324ca bf7d663d 3e1196cc     .W}..$.>=f}....>
   14068:	bf7d7474 3e1008b7 bf7d8285 3e0e7a8b     tt}....>..}..z.>
   14078:	bf7d906e 3e0cec4a bf7d9e30 3e0b5df3     n.}.J..>0.}..].>
   14088:	bf7dabcc 3e09cf86 bf7db940 3e084105     ..}....>@.}..A.>
   14098:	bf7dc68c 3e06b26e bf7dd3b2 3e0523c2     ..}.n..>..}..#.>
   140a8:	bf7de0b1 3e039502 bf7ded88 3e02062e     ..}....>..}....>
   140b8:	bf7dfa38 3e007745 bf7e06c2 3dfdd092     8.}.Ew.>..~....=
   140c8:	bf7e1324 3dfab273 bf7e1f5e 3df7942c     $.~.s..=^.~.,..=
   140d8:	bf7e2b72 3df475c0 bf7e375e 3df1572e     r+~..u.=^7~..W.=
   140e8:	bf7e4323 3dee3876 bf7e4ec1 3deb199a     #C~.v8.=.N~....=
   140f8:	bf7e5a38 3de7fa9a bf7e6588 3de4db76     8Z~....=.e~.v..=
   14108:	bf7e70b0 3de1bc2e bf7e7bb1 3dde9cc4     .p~....=.{~....=
   14118:	bf7e868b 3ddb7d37 bf7e913d 3dd85d89     ..~.7}.==.~..].=
   14128:	bf7e9bc9 3dd53db9 bf7ea62d 3dd21dc8     ..~..=.=-.~....=
   14138:	bf7eb069 3dcefdb7 bf7eba7f 3dcbdd86     i.~....=..~....=
   14148:	bf7ec46d 3dc8bd36 bf7ece34 3dc59cc6     m.~.6..=4.~....=
   14158:	bf7ed7d4 3dc27c39 bf7ee14c 3dbf5b8d     ..~.9|.=L.~..[.=
   14168:	bf7eea9d 3dbc3ac3 bf7ef3c7 3db919dd     ..~..:.=..~....=
   14178:	bf7efcc9 3db5f8da bf7f05a4 3db2d7bb     ..~....=.......=
   14188:	bf7f0e58 3dafb680 bf7f16e4 3dac952b     X......=....+..=
   14198:	bf7f1f49 3da973ba bf7f2787 3da65230     I....s.=.'..0R.=
   141a8:	bf7f2f9d 3da3308c bf7f378d 3da00ecf     ./...0.=.7.....=
   141b8:	bf7f3f54 3d9cecf9 bf7f46f4 3d99cb0a     T?.....=.F.....=
   141c8:	bf7f4e6d 3d96a905 bf7f55bf 3d9386e7     mN.....=.U.....=
   141d8:	bf7f5ce9 3d9064b4 bf7f63ec 3d8d426a     .\...d.=.c..jB.=
   141e8:	bf7f6ac7 3d8a200a bf7f717b 3d86fd94     .j... .={q.....=
   141f8:	bf7f7808 3d83db0a bf7f7e6d 3d80b86c     .x.....=m~..l..=
   14208:	bf7f84ab 3d7b2b74 bf7f8ac2 3d74e5e9     ....t+{=......t=
   14218:	bf7f90b1 3d6ea038 bf7f9678 3d685a62     ....8.n=x...bZh=
   14228:	bf7f9c18 3d621468 bf7fa191 3d5bce4c     ....h.b=....L.[=
   14238:	bf7fa6e3 3d55880e bf7fac0d 3d4f41af     ......U=.....AO=
   14248:	bf7fb10f 3d48fb2f bf7fb5ea 3d42b491     ..../.H=......B=
   14258:	bf7fba9e 3d3c6dd5 bf7fbf2a 3d3626fc     .....m<=*....&6=
   14268:	bf7fc38f 3d2fe007 bf7fc7cc 3d2998f6     ....../=......)=
   14278:	bf7fcbe2 3d2351cc bf7fcfd1 3d1d0a88     .....Q#=.......=
   14288:	bf7fd398 3d16c32c bf7fd737 3d107bb8     ....,..=7....{.=
   14298:	bf7fdaaf 3d0a342f bf7fde00 3d03ec90     ..../4.=.......=
   142a8:	bf7fe129 3cfb49b9 bf7fe42b 3ceeba2d     )....I.<+...-..<
   142b8:	bf7fe705 3ce22a7b bf7fe9b8 3cd59aa6     ....{*.<.......<
   142c8:	bf7fec43 3cc90ab0 bf7feea7 3cbc7a9b     C......<.....z.<
   142d8:	bf7ff0e3 3cafea69 bf7ff2f8 3ca35a1c     ....i..<.....Z.<
   142e8:	bf7ff4e6 3c96c9b6 bf7ff6ac 3c8a3938     .......<....89.<
   142f8:	bf7ff84a 3c7b514b bf7ff9c1 3c623000     J...KQ{<.....0b<
   14308:	bf7ffb11 3c490e90 bf7ffc39 3c2fed02     ......I<9...../<
   14318:	bf7ffd39 3c16cb59 bf7ffe13 3bfb5330     9...Y..<....0S.;
   14328:	bf7ffec4 3bc90f89 bf7fff4e 3b96cbc1     .......;N......;
   14338:	bf7fffb1 3b490fc7 bf7fffec 3ac90fd4     ......I;.......:
   14348:	bf800000 00000000 bf7fffec bac90fd4     ................
   14358:	bf7fffb1 bb490fc7 bf7fff4e bb96cbc1     ......I.N.......
   14368:	bf7ffec4 bbc90f89 bf7ffe13 bbfb5330     ............0S..
   14378:	bf7ffd39 bc16cb59 bf7ffc39 bc2fed02     9...Y...9...../.
   14388:	bf7ffb11 bc490e90 bf7ff9c1 bc623000     ......I......0b.
   14398:	bf7ff84a bc7b514b bf7ff6ac bc8a3938     J...KQ{.....89..
   143a8:	bf7ff4e6 bc96c9b6 bf7ff2f8 bca35a1c     .............Z..
   143b8:	bf7ff0e3 bcafea69 bf7feea7 bcbc7a9b     ....i........z..
   143c8:	bf7fec43 bcc90ab0 bf7fe9b8 bcd59aa6     C...............
   143d8:	bf7fe705 bce22a7b bf7fe42b bceeba2d     ....{*..+...-...
   143e8:	bf7fe129 bcfb49b9 bf7fde00 bd03ec90     )....I..........
   143f8:	bf7fdaaf bd0a342f bf7fd737 bd107bb8     ..../4..7....{..
   14408:	bf7fd398 bd16c32c bf7fcfd1 bd1d0a88     ....,...........
   14418:	bf7fcbe2 bd2351cc bf7fc7cc bd2998f6     .....Q#.......).
   14428:	bf7fc38f bd2fe007 bf7fbf2a bd3626fc     ....../.*....&6.
   14438:	bf7fba9e bd3c6dd5 bf7fb5ea bd42b491     .....m<.......B.
   14448:	bf7fb10f bd48fb2f bf7fac0d bd4f41af     ..../.H......AO.
   14458:	bf7fa6e3 bd55880e bf7fa191 bd5bce4c     ......U.....L.[.
   14468:	bf7f9c18 bd621468 bf7f9678 bd685a62     ....h.b.x...bZh.
   14478:	bf7f90b1 bd6ea038 bf7f8ac2 bd74e5e9     ....8.n.......t.
   14488:	bf7f84ab bd7b2b74 bf7f7e6d bd80b86c     ....t+{.m~..l...
   14498:	bf7f7808 bd83db0a bf7f717b bd86fd94     .x......{q......
   144a8:	bf7f6ac7 bd8a200a bf7f63ec bd8d426a     .j... ...c..jB..
   144b8:	bf7f5ce9 bd9064b4 bf7f55bf bd9386e7     .\...d...U......
   144c8:	bf7f4e6d bd96a905 bf7f46f4 bd99cb0a     mN.......F......
   144d8:	bf7f3f54 bd9cecf9 bf7f378d bda00ecf     T?.......7......
   144e8:	bf7f2f9d bda3308c bf7f2787 bda65230     ./...0...'..0R..
   144f8:	bf7f1f49 bda973ba bf7f16e4 bdac952b     I....s......+...
   14508:	bf7f0e58 bdafb680 bf7f05a4 bdb2d7bb     X...............
   14518:	bf7efcc9 bdb5f8da bf7ef3c7 bdb919dd     ..~.......~.....
   14528:	bf7eea9d bdbc3ac3 bf7ee14c bdbf5b8d     ..~..:..L.~..[..
   14538:	bf7ed7d4 bdc27c39 bf7ece34 bdc59cc6     ..~.9|..4.~.....
   14548:	bf7ec46d bdc8bd36 bf7eba7f bdcbdd86     m.~.6.....~.....
   14558:	bf7eb069 bdcefdb7 bf7ea62d bdd21dc8     i.~.....-.~.....
   14568:	bf7e9bc9 bdd53db9 bf7e913d bdd85d89     ..~..=..=.~..]..
   14578:	bf7e868b bddb7d37 bf7e7bb1 bdde9cc4     ..~.7}...{~.....
   14588:	bf7e70b0 bde1bc2e bf7e6588 bde4db76     .p~......e~.v...
   14598:	bf7e5a38 bde7fa9a bf7e4ec1 bdeb199a     8Z~......N~.....
   145a8:	bf7e4323 bdee3876 bf7e375e bdf1572e     #C~.v8..^7~..W..
   145b8:	bf7e2b72 bdf475c0 bf7e1f5e bdf7942c     r+~..u..^.~.,...
   145c8:	bf7e1324 bdfab273 bf7e06c2 bdfdd092     $.~.s.....~.....
   145d8:	bf7dfa38 be007745 bf7ded88 be02062e     8.}.Ew....}.....
   145e8:	bf7de0b1 be039502 bf7dd3b2 be0523c2     ..}.......}..#..
   145f8:	bf7dc68c be06b26e bf7db940 be084105     ..}.n...@.}..A..
   14608:	bf7dabcc be09cf86 bf7d9e30 be0b5df3     ..}.....0.}..]..
   14618:	bf7d906e be0cec4a bf7d8285 be0e7a8b     n.}.J.....}..z..
   14628:	bf7d7474 be1008b7 bf7d663d be1196cc     tt}.....=f}.....
   14638:	bf7d57de be1324ca bf7d4959 be14b2b2     .W}..$..YI}.....
   14648:	bf7d3aac be164083 bf7d2bd8 be17ce3d     .:}..@...+}.=...
   14658:	bf7d1cdd be195be0 bf7d0dbc be1ae96b     ..}..[....}.k...
   14668:	bf7cfe73 be1c76de bf7cef03 be1e0438     s.|..v....|.8...
   14678:	bf7cdf6c be1f917b bf7ccfae be211ea5     l.|.{.....|...!.
   14688:	bf7cbfc9 be22abb6 bf7cafbd be2438ad     ..|..."...|..8$.
   14698:	bf7c9f8a be25c58c bf7c8f31 be275251     ..|...%.1.|.QR'.
   146a8:	bf7c7eb0 be28defc bf7c6e08 be2a6b8d     .~|...(..n|..k*.
   146b8:	bf7c5d3a be2bf804 bf7c4c44 be2d8461     :]|...+.DL|.a.-.
   146c8:	bf7c3b28 be2f10a2 bf7c29e5 be309cc9     (;|.../..)|...0.
   146d8:	bf7c187a be3228d4 bf7c06e9 be33b4c4     z.|..(2...|...3.
   146e8:	bf7bf531 be354098 bf7be353 be36cc50     1.{..@5.S.{.P.6.
   146f8:	bf7bd14d be3857ec bf7bbf20 be39e36c     M.{..W8. .{.l.9.
   14708:	bf7baccd be3b6ecf bf7b9a53 be3cfa15     ..{..n;.S.{...<.
   14718:	bf7b87b2 be3e853e bf7b74ea be401049     ..{.>.>..t{.I.@.
   14728:	bf7b61fc be419b37 bf7b4ee7 be432607     .a{.7.A..N{..&C.
   14738:	bf7b3bab be44b0b9 bf7b2848 be463b4d     .;{...D.H({.M;F.
   14748:	bf7b14be be47c5c2 bf7b010e be495018     ..{...G...{..PI.
   14758:	bf7aed37 be4ada4f bf7ad93a be4c6467     7.z.O.J.:.z.gdL.
   14768:	bf7ac516 be4dee60 bf7ab0cb be4f7838     ..z.`.M...z.8xO.
   14778:	bf7a9c59 be5101f1 bf7a87c1 be528b89     Y.z...Q...z...R.
   14788:	bf7a7302 be541501 bf7a5e1c be559e58     .sz...T..^z.X.U.
   14798:	bf7a4910 be57278f bf7a33dd be58b0a4     .Iz..'W..3z...X.
   147a8:	bf7a1e84 be5a3997 bf7a0904 be5bc26a     ..z..9Z...z.j.[.
   147b8:	bf79f35e be5d4b1a bf79dd91 be5ed3a8     ^.y..K]...y...^.
   147c8:	bf79c79d be605c13 bf79b183 be61e45c     ..y..\`...y.\.a.
   147d8:	bf799b43 be636c83 bf7984dc be64f486     C.y..lc...y...d.
   147e8:	bf796e4e be667c66 bf79579a be680422     Nny.f|f..Wy.".h.
   147f8:	bf7940c0 be698bba bf7929bf be6b132f     .@y...i..)y./.k.
   14808:	bf791298 be6c9a7f bf78fb4a be6e21ab     ..y...l.J.x..!n.
   14818:	bf78e3d6 be6fa8b2 bf78cc3b be712f94     ..x...o.;.x../q.
   14828:	bf78b47b be72b651 bf789c93 be743ce8     {.x.Q.r...x..<t.
   14838:	bf788486 be75c35a bf786c52 be7749a6     ..x.Z.u.Rlx..Iw.
   14848:	bf7853f8 be78cfcc bf783b77 be7a55cb     .Sx...x.w;x..Uz.
   14858:	bf7822d1 be7bdba4 bf780a04 be7d6156     ."x...{...x.Va}.
   14868:	bf77f110 be7ee6e1 bf77d7f7 be803622     ..w...~...w."6..
   14878:	bf77beb7 be80f8c0 bf77a551 be81bb4a     ..w.....Q.w.J...
   14888:	bf778bc5 be827dc0 bf777213 be834022     ..w..}...rw."@..
   14898:	bf77583a be840270 bf773e3c be84c4aa     :Xw.p...<>w.....
   148a8:	bf772417 be8586ce bf7709cc be8648df     .$w.......w..H..
   148b8:	bf76ef5b be870ada bf76d4c4 be87ccc1     [.v.......v.....
   148c8:	bf76ba07 be888e93 bf769f24 be895050     ..v.....$.v.PP..
   148d8:	bf76841b be8a11f8 bf7668ec be8ad38a     ..v......hv.....
   148e8:	bf764d97 be8b9507 bf76321b be8c566e     .Mv......2v.nV..
   148f8:	bf76167a be8d17c0 bf75fab3 be8dd8fc     z.v.......u.....
   14908:	bf75dec6 be8e9a22 bf75c2b3 be8f5b32     ..u.".....u.2[..
   14918:	bf75a67b be901c2c bf758a1c be90dd10     {.u.,.....u.....
   14928:	bf756d97 be919ddd bf7550ed be925e94     .mu......Pu..^..
   14938:	bf75341d be931f35 bf751727 be93dfbf     .4u.5...'.u.....
   14948:	bf74fa0b be94a031 bf74dcc9 be95608d     ..t.1.....t..`..
   14958:	bf74bf62 be9620d2 bf74a1d5 be96e100     b.t.. ....t.....
   14968:	bf748422 be97a117 bf746649 be986116     ".t.....Ift..a..
   14978:	bf74484b be9920fe bf742a27 be99e0ce     KHt.. ..'*t.....
   14988:	bf740bdd be9aa086 bf73ed6e be9b6027     ..t.....n.s.'`..
   14998:	bf73ced9 be9c1faf bf73b01f be9cdf20     ..s.......s. ...
   149a8:	bf73913f be9d9e78 bf737239 be9e5db8     ?.s.x...9rs..]..
   149b8:	bf73530e be9f1cdf bf7333be be9fdbee     .Ss......3s.....
   149c8:	bf731447 bea09ae5 bf72f4ac bea159c2     G.s.......r..Y..
   149d8:	bf72d4eb bea21887 bf72b504 bea2d733     ..r.......r.3...
   149e8:	bf7294f8 bea395c5 bf7274c7 bea4543f     ..r......tr.?T..
   149f8:	bf725470 bea5129f bf7233f4 bea5d0e5     pTr......3r.....
   14a08:	bf721352 bea68f12 bf71f28c bea74d25     R.r.......q.%M..
   14a18:	bf71d19f bea80b1f bf71b08e bea8c8fe     ..q.......q.....
   14a28:	bf718f57 bea986c4 bf716dfb beaa446f     W.q......mq.oD..
   14a38:	bf714c7a beab0201 bf712ad4 beabbf77     zLq......*q.w...
   14a48:	bf710908 beac7cd4 bf70e717 bead3a15     ..q..|....p..:..
   14a58:	bf70c502 beadf73c bf70a2c6 beaeb449     ..p.<.....p.I...
   14a68:	bf708066 beaf713a bf705de1 beb02e10     f.p.:q...]p.....
   14a78:	bf703b37 beb0eacb bf701867 beb1a76b     7;p.....g.p.k...
   14a88:	bf6ff573 beb263ef bf6fd25a beb32058     s.o..c..Z.o.X ..
   14a98:	bf6faf1b beb3dca5 bf6f8bb8 beb498d6     ..o.......o.....
   14aa8:	bf6f6830 beb554ec bf6f4483 beb610e6     0ho..T...Do.....
   14ab8:	bf6f20b0 beb6ccc3 bf6efcba beb78884     . o.......n.....
   14ac8:	bf6ed89e beb8442a bf6eb45d beb8ffb2     ..n.*D..].n.....
   14ad8:	bf6e8ff8 beb9bb1e bf6e6b6d beba766e     ..n.....mkn.nv..
   14ae8:	bf6e46be bebb31a0 bf6e21eb bebbecb6     .Fn..1...!n.....
   14af8:	bf6dfcf2 bebca7af bf6dd7d5 bebd628b     ..m.......m..b..
   14b08:	bf6db293 bebe1d4a bf6d8d2d bebed7eb     ..m.J...-.m.....
   14b18:	bf6d67a1 bebf926f bf6d41f2 bec04cd5     .gm.o....Am..L..
   14b28:	bf6d1c1d bec1071e bf6cf624 bec1c148     ..m.....$.l.H...
   14b38:	bf6cd007 bec27b55 bf6ca9c5 bec33544     ..l.U{....l.D5..
   14b48:	bf6c835e bec3ef15 bf6c5cd4 bec4a8c8     ^.l......\l.....
   14b58:	bf6c3624 bec5625c bf6c0f50 bec61bd2     $6l.\b..P.l.....
   14b68:	bf6be858 bec6d529 bf6bc13b bec78e62     X.k.)...;.k.b...
   14b78:	bf6b99fb bec8477c bf6b7295 bec90077     ..k.|G...rk.w...
   14b88:	bf6b4b0c bec9b953 bf6b235e beca7210     .Kk.S...^#k..r..
   14b98:	bf6afb8c becb2aae bf6ad395 becbe32c     ..j..*....j.,...
   14ba8:	bf6aab7b becc9b8b bf6a833c becd53ca     {.j.....<.j..S..
   14bb8:	bf6a5ad9 bece0bea bf6a3252 becec3ea     .Zj.....R2j.....
   14bc8:	bf6a09a7 becf7bca bf69e0d7 bed0338a     ..j..{....i..3..
   14bd8:	bf69b7e4 bed0eb2a bf698ecc bed1a2aa     ..i.*.....i.....
   14be8:	bf696591 bed25a09 bf693c32 bed31148     .ei..Z..2<i.H...
   14bf8:	bf6912ae bed3c867 bf68e907 bed47f64     ..i.g.....h.d...
   14c08:	bf68bf3c bed53641 bf68954c bed5ecfd     <.h.A6..L.h.....
   14c18:	bf686b39 bed6a399 bf684103 bed75a13     9kh......Ah..Z..
   14c28:	bf6816a8 bed8106b bf67ec2a bed8c6a3     ..h.k...*.g.....
   14c38:	bf67c187 bed97cb9 bf6796c1 beda32ad     ..g..|....g..2..
   14c48:	bf676bd8 bedae880 bf6740ca bedb9e31     .kg......@g.1...
   14c58:	bf671599 bedc53c1 bf66ea45 bedd092e     ..g..S..E.f.....
   14c68:	bf66becc beddbe79 bf669330 bede73a2     ..f.y...0.f..s..
   14c78:	bf666771 bedf28a9 bf663b8e bedfdd8d     qgf..(...;f.....
   14c88:	bf660f88 bee0924f bf65e35e bee146ee     ..f.O...^.e..F..
   14c98:	bf65b710 bee1fb6a bf658aa0 bee2afc4     ..e.j.....e.....
   14ca8:	bf655e0b bee363fa bf653154 bee4180e     .^e..c..T1e.....
   14cb8:	bf650479 bee4cbfe bf64d77b bee57fcb     y.e.....{.d.....
   14cc8:	bf64aa59 bee63375 bf647d14 bee6e6fb     Y.d.u3...}d.....
   14cd8:	bf644fac bee79a5d bf642221 bee84d9c     .Od.]...!"d..M..
   14ce8:	bf63f473 bee900b7 bf63c6a1 bee9b3ae     s.c.......c.....
   14cf8:	bf6398ac beea6681 bf636a95 beeb1930     ..c..f...jc.0...
   14d08:	bf633c5a beebcbbb bf630dfc beec7e21     Z<c.......c.!~..
   14d18:	bf62df7b beed3063 bf62b0d7 beede280     {.b.c0....b.....
   14d28:	bf628210 beee9479 bf625326 beef464c     ..b.y...&Sb.LF..
   14d38:	bf62241a beeff7fb bf61f4ea bef0a985     .$b.......a.....
   14d48:	bf61c598 bef15aea bf619622 bef20c29     ..a..Z..".a.)...
   14d58:	bf61668a bef2bd43 bf6136d0 bef36e38     .fa.C....6a.8n..
   14d68:	bf6106f2 bef41f07 bf60d6f2 bef4cfb1     ..a.......`.....
   14d78:	bf60a6cf bef58035 bf607689 bef63093     ..`.5....v`..0..
   14d88:	bf604621 bef6e0cb bf601596 bef790dc     !F`.......`.....
   14d98:	bf5fe4e9 bef840c8 bf5fb419 bef8f08e     .._..@...._.....
   14da8:	bf5f8327 bef9a02d bf5f5212 befa4fa5     '._.-....R_..O..
   14db8:	bf5f20db befafef7 bf5eef81 befbae22     . _.......^."...
   14dc8:	bf5ebe05 befc5d27 bf5e8c67 befd0c04     ..^.']..g.^.....
   14dd8:	bf5e5aa6 befdbabb bf5e28c3 befe694a     .Z^......(^.Ji..
   14de8:	bf5df6be beff17b2 bf5dc497 beffc5f3     ..].......].....
   14df8:	bf5d924d bf003a06 bf5d5fe1 bf0090ff     M.]..:..._].....
   14e08:	bf5d2d53 bf00e7e4 bf5cfaa3 bf013eb5     S-].......\..>..
   14e18:	bf5cc7d1 bf019573 bf5c94dd bf01ec1c     ..\.s.....\.....
   14e28:	bf5c61c7 bf0242b1 bf5c2e8e bf029932     .a\..B....\.2...
   14e38:	bf5bfb34 bf02ef9f bf5bc7b8 bf0345f8     4.[.......[..E..
   14e48:	bf5b941a bf039c3d bf5b605a bf03f26d     ..[.=...Z`[.m...
   14e58:	bf5b2c79 bf044889 bf5af875 bf049e91     y,[..H..u.Z.....
   14e68:	bf5ac450 bf04f484 bf5a9009 bf054a62     P.Z.......Z.bJ..
   14e78:	bf5a5ba0 bf05a02c bf5a2716 bf05f5e2     .[Z.,....'Z.....
   14e88:	bf59f26a bf064b82 bf59bd9c bf06a10e     j.Y..K....Y.....
   14e98:	bf5988ad bf06f686 bf59539c bf074be8     ..Y......SY..K..
   14ea8:	bf591e6a bf07a136 bf58e917 bf07f66f     j.Y.6.....X.o...
   14eb8:	bf58b3a1 bf084b92 bf587e0b bf08a0a1     ..X..K...~X.....
   14ec8:	bf584853 bf08f59b bf581279 bf094a7f     SHX.....y.X..J..
   14ed8:	bf57dc7f bf099f4e bf57a663 bf09f409     ..W.N...c.W.....
   14ee8:	bf577026 bf0a48ad bf5739c7 bf0a9d3d     &pW..H...9W.=...
   14ef8:	bf570348 bf0af1b7 bf56cca7 bf0b461c     H.W.......V..F..
   14f08:	bf5695e5 bf0b9a6b bf565f02 bf0beea5     ..V.k...._V.....
   14f18:	bf5627fe bf0c42c9 bf55f0d9 bf0c96d7     .'V..B....U.....
   14f28:	bf55b993 bf0cead0 bf55822c bf0d3eb3     ..U.....,.U..>..
   14f38:	bf554aa4 bf0d9281 bf5512fb bf0de638     .JU.......U.8...
   14f48:	bf54db31 bf0e39da bf54a347 bf0e8d65     1.T..9..G.T.e...
   14f58:	bf546b3b bf0ee0db bf54330f bf0f343b     ;kT......3T.;4..
   14f68:	bf53fac3 bf0f8784 bf53c255 bf0fdab8     ..S.....U.S.....
   14f78:	bf5389c7 bf102dd5 bf535118 bf1080dc     ..S..-...QS.....
   14f88:	bf531849 bf10d3cd bf52df59 bf1126a7     I.S.....Y.R..&..
   14f98:	bf52a649 bf11796b bf526d18 bf11cc19     I.R.ky...mR.....
   14fa8:	bf5233c6 bf121eb0 bf51fa54 bf127130     .3R.....T.Q.0q..
   14fb8:	bf51c0c2 bf12c39a bf518710 bf1315ee     ..Q.......Q.....
   14fc8:	bf514d3d bf13682a bf51134a bf13ba50     =MQ.*h..J.Q.P...
   14fd8:	bf50d937 bf140c5f bf509f03 bf145e58     7.P._.....P.X^..
   14fe8:	bf5064af bf14b039 bf502a3b bf150204     .dP.9...;*P.....
   14ff8:	bf4fefa8 bf1553b7 bf4fb4f4 bf15a554     ..O..S....O.T...
   15008:	bf4f7a1f bf15f6d9 bf4f3f2b bf164847     .zO.....+?O.GH..
   15018:	bf4f0417 bf16999f bf4ec8e4 bf16eadf     ..O.......N.....
   15028:	bf4e8d90 bf173c07 bf4e521c bf178d18     ..N..<...RN.....
   15038:	bf4e1689 bf17de12 bf4ddad5 bf182ef5     ..N.......M.....
   15048:	bf4d9f02 bf187fc0 bf4d6310 bf18d073     ..M......cM.s...
   15058:	bf4d26fd bf19210f bf4ceacb bf197194     .&M..!....L..q..
   15068:	bf4cae79 bf19c200 bf4c7208 bf1a1255     y.L......rL.U...
   15078:	bf4c3578 bf1a6293 bf4bf8c7 bf1ab2b8     x5L..b....K.....
   15088:	bf4bbbf8 bf1b02c6 bf4b7f09 bf1b52bb     ..K.......K..R..
   15098:	bf4b41fa bf1ba299 bf4b04cc bf1bf25f     .AK.......K._...
   150a8:	bf4ac77f bf1c420c bf4a8a13 bf1c91a2     ..J..B....J.....
   150b8:	bf4a4c87 bf1ce11f bf4a0edc bf1d3084     .LJ.......J..0..
   150c8:	bf49d112 bf1d7fd1 bf499329 bf1dcf06     ..I.....).I.....
   150d8:	bf495521 bf1e1e22 bf4916fa bf1e6d26     !UI.".....I.&m..
   150e8:	bf48d8b3 bf1ebc12 bf489a4e bf1f0ae5     ..H.....N.H.....
   150f8:	bf485bca bf1f599f bf481d27 bf1fa841     .[H..Y..'.H.A...
   15108:	bf47de65 bf1ff6cb bf479f84 bf20453b     e.G.......G.;E .
   15118:	bf476085 bf209393 bf472167 bf20e1d2     .`G... .g!G... .
   15128:	bf46e22a bf212ff9 bf46a2ce bf217e06     *.F../!...F..~!.
   15138:	bf466354 bf21cbfb bf4623bb bf2219d7     TcF...!..#F...".
   15148:	bf45e403 bf226799 bf45a42d bf22b543     ..E..g".-.E.C.".
   15158:	bf456439 bf2302d3 bf452426 bf23504b     9dE...#.&$E.KP#.
   15168:	bf44e3f5 bf239da9 bf44a3a5 bf23eaee     ..D...#...D...#.
   15178:	bf446337 bf24381a bf4422ab bf24852c     7cD..8$.."D.,.$.
   15188:	bf43e200 bf24d225 bf43a138 bf251f04     ..C.%.$.8.C...%.
   15198:	bf436051 bf256bcb bf431f4c bf25b877     Q`C..k%.L.C.w.%.
   151a8:	bf42de29 bf26050a bf429ce8 bf265184     ).B...&...B..Q&.
   151b8:	bf425b89 bf269de3 bf421a0b bf26ea2a     .[B...&...B.*.&.
   151c8:	bf41d870 bf273656 bf4196b7 bf278268     p.A.V6'...A.h.'.
   151d8:	bf4154e1 bf27ce61 bf4112ec bf281a40     .TA.a.'...A.@.(.
   151e8:	bf40d0da bf286605 bf408ea9 bf28b1b0     ..@..f(...@...(.
   151f8:	bf404c5c bf28fd41 bf4009f0 bf2948b8     \L@.A.(...@..H).
   15208:	bf3fc767 bf299415 bf3f84c0 bf29df57     g.?...)...?.W.).
   15218:	bf3f41fc bf2a2a80 bf3eff1b bf2a758e     .A?..**...>..u*.
   15228:	bf3ebc1b bf2ac082 bf3e78ff bf2b0b5b     ..>...*..x>.[.+.
   15238:	bf3e35c5 bf2b561b bf3df26e bf2ba0bf     .5>..V+.n.=...+.
   15248:	bf3daef9 bf2beb4a bf3d6b67 bf2c35b9     ..=.J.+.gk=..5,.
   15258:	bf3d27b8 bf2c800f bf3ce3ec bf2cca49     .'=...,...<.I.,.
   15268:	bf3ca003 bf2d1469 bf3c5bfc bf2d5e6f     ..<.i.-..[<.o^-.
   15278:	bf3c17d9 bf2da859 bf3bd398 bf2df229     ..<.Y.-...;.).-.
   15288:	bf3b8f3b bf2e3bde bf3b4ac1 bf2e8578     ;.;..;...J;.x...
   15298:	bf3b0629 bf2ecef7 bf3ac175 bf2f185b     ).;.....u.:.[./.
   152a8:	bf3a7ca4 bf2f61a5 bf3a37b7 bf2faad3     .|:..a/..7:.../.
   152b8:	bf39f2ac bf2ff3e6 bf39ad85 bf303cde     ..9.../...9..<0.
   152c8:	bf396842 bf3085bb bf3922e1 bf30ce7c     Bh9...0.."9.|.0.
   152d8:	bf38dd65 bf311722 bf3897cb bf315fad     e.8.".1...8.._1.
   152e8:	bf385216 bf31a81d bf380c43 bf31f071     .R8...1.C.8.q.1.
   152f8:	bf37c655 bf3238aa bf37804a bf3280c7     U.7..82.J.7...2.
   15308:	bf373a23 bf32c8c9 bf36f3df bf3310af     #:7...2...6...3.
   15318:	bf36ad7f bf33587a bf366704 bf33a029     ..6.zX3..g6.).3.
   15328:	bf36206c bf33e7bc bf35d9b8 bf342f34     l 6...3...5.4/4.
   15338:	bf3592e7 bf34768f bf354bfb bf34bdcf     ..5..v4..K5...4.
   15348:	bf3504f3 bf3504f3 bf34bdcf bf354bfb     ..5...5...4..K5.
   15358:	bf34768f bf3592e7 bf342f34 bf35d9b8     .v4...5.4/4...5.
   15368:	bf33e7bc bf36206c bf33a029 bf366704     ..3.l 6.).3..g6.
   15378:	bf33587a bf36ad7f bf3310af bf36f3df     zX3...6...3...6.
   15388:	bf32c8c9 bf373a23 bf3280c7 bf37804a     ..2.#:7...2.J.7.
   15398:	bf3238aa bf37c655 bf31f071 bf380c43     .82.U.7.q.1.C.8.
   153a8:	bf31a81d bf385216 bf315fad bf3897cb     ..1..R8.._1...8.
   153b8:	bf311722 bf38dd65 bf30ce7c bf3922e1     ".1.e.8.|.0.."9.
   153c8:	bf3085bb bf396842 bf303cde bf39ad85     ..0.Bh9..<0...9.
   153d8:	bf2ff3e6 bf39f2ac bf2faad3 bf3a37b7     ../...9.../..7:.
   153e8:	bf2f61a5 bf3a7ca4 bf2f185b bf3ac175     .a/..|:.[./.u.:.
   153f8:	bf2ecef7 bf3b0629 bf2e8578 bf3b4ac1     ....).;.x....J;.
   15408:	bf2e3bde bf3b8f3b bf2df229 bf3bd398     .;..;.;.).-...;.
   15418:	bf2da859 bf3c17d9 bf2d5e6f bf3c5bfc     Y.-...<.o^-..[<.
   15428:	bf2d1469 bf3ca003 bf2cca49 bf3ce3ec     i.-...<.I.,...<.
   15438:	bf2c800f bf3d27b8 bf2c35b9 bf3d6b67     ..,..'=..5,.gk=.
   15448:	bf2beb4a bf3daef9 bf2ba0bf bf3df26e     J.+...=...+.n.=.
   15458:	bf2b561b bf3e35c5 bf2b0b5b bf3e78ff     .V+..5>.[.+..x>.
   15468:	bf2ac082 bf3ebc1b bf2a758e bf3eff1b     ..*...>..u*...>.
   15478:	bf2a2a80 bf3f41fc bf29df57 bf3f84c0     .**..A?.W.)...?.
   15488:	bf299415 bf3fc767 bf2948b8 bf4009f0     ..).g.?..H)...@.
   15498:	bf28fd41 bf404c5c bf28b1b0 bf408ea9     A.(.\L@...(...@.
   154a8:	bf286605 bf40d0da bf281a40 bf4112ec     .f(...@.@.(...A.
   154b8:	bf27ce61 bf4154e1 bf278268 bf4196b7     a.'..TA.h.'...A.
   154c8:	bf273656 bf41d870 bf26ea2a bf421a0b     V6'.p.A.*.&...B.
   154d8:	bf269de3 bf425b89 bf265184 bf429ce8     ..&..[B..Q&...B.
   154e8:	bf26050a bf42de29 bf25b877 bf431f4c     ..&.).B.w.%.L.C.
   154f8:	bf256bcb bf436051 bf251f04 bf43a138     .k%.Q`C...%.8.C.
   15508:	bf24d225 bf43e200 bf24852c bf4422ab     %.$...C.,.$.."D.
   15518:	bf24381a bf446337 bf23eaee bf44a3a5     .8$.7cD...#...D.
   15528:	bf239da9 bf44e3f5 bf23504b bf452426     ..#...D.KP#.&$E.
   15538:	bf2302d3 bf456439 bf22b543 bf45a42d     ..#.9dE.C.".-.E.
   15548:	bf226799 bf45e403 bf2219d7 bf4623bb     .g"...E..."..#F.
   15558:	bf21cbfb bf466354 bf217e06 bf46a2ce     ..!.TcF..~!...F.
   15568:	bf212ff9 bf46e22a bf20e1d2 bf472167     ./!.*.F... .g!G.
   15578:	bf209393 bf476085 bf20453b bf479f84     .. ..`G.;E ...G.
   15588:	bf1ff6cb bf47de65 bf1fa841 bf481d27     ....e.G.A...'.H.
   15598:	bf1f599f bf485bca bf1f0ae5 bf489a4e     .Y...[H.....N.H.
   155a8:	bf1ebc12 bf48d8b3 bf1e6d26 bf4916fa     ......H.&m....I.
   155b8:	bf1e1e22 bf495521 bf1dcf06 bf499329     "...!UI.....).I.
   155c8:	bf1d7fd1 bf49d112 bf1d3084 bf4a0edc     ......I..0....J.
   155d8:	bf1ce11f bf4a4c87 bf1c91a2 bf4a8a13     .....LJ.......J.
   155e8:	bf1c420c bf4ac77f bf1bf25f bf4b04cc     .B....J._.....K.
   155f8:	bf1ba299 bf4b41fa bf1b52bb bf4b7f09     .....AK..R....K.
   15608:	bf1b02c6 bf4bbbf8 bf1ab2b8 bf4bf8c7     ......K.......K.
   15618:	bf1a6293 bf4c3578 bf1a1255 bf4c7208     .b..x5L.U....rL.
   15628:	bf19c200 bf4cae79 bf197194 bf4ceacb     ....y.L..q....L.
   15638:	bf19210f bf4d26fd bf18d073 bf4d6310     .!...&M.s....cM.
   15648:	bf187fc0 bf4d9f02 bf182ef5 bf4ddad5     ......M.......M.
   15658:	bf17de12 bf4e1689 bf178d18 bf4e521c     ......N......RN.
   15668:	bf173c07 bf4e8d90 bf16eadf bf4ec8e4     .<....N.......N.
   15678:	bf16999f bf4f0417 bf164847 bf4f3f2b     ......O.GH..+?O.
   15688:	bf15f6d9 bf4f7a1f bf15a554 bf4fb4f4     .....zO.T.....O.
   15698:	bf1553b7 bf4fefa8 bf150204 bf502a3b     .S....O.....;*P.
   156a8:	bf14b039 bf5064af bf145e58 bf509f03     9....dP.X^....P.
   156b8:	bf140c5f bf50d937 bf13ba50 bf51134a     _...7.P.P...J.Q.
   156c8:	bf13682a bf514d3d bf1315ee bf518710     *h..=MQ.......Q.
   156d8:	bf12c39a bf51c0c2 bf127130 bf51fa54     ......Q.0q..T.Q.
   156e8:	bf121eb0 bf5233c6 bf11cc19 bf526d18     .....3R......mR.
   156f8:	bf11796b bf52a649 bf1126a7 bf52df59     ky..I.R..&..Y.R.
   15708:	bf10d3cd bf531849 bf1080dc bf535118     ....I.S......QS.
   15718:	bf102dd5 bf5389c7 bf0fdab8 bf53c255     .-....S.....U.S.
   15728:	bf0f8784 bf53fac3 bf0f343b bf54330f     ......S.;4...3T.
   15738:	bf0ee0db bf546b3b bf0e8d65 bf54a347     ....;kT.e...G.T.
   15748:	bf0e39da bf54db31 bf0de638 bf5512fb     .9..1.T.8.....U.
   15758:	bf0d9281 bf554aa4 bf0d3eb3 bf55822c     .....JU..>..,.U.
   15768:	bf0cead0 bf55b993 bf0c96d7 bf55f0d9     ......U.......U.
   15778:	bf0c42c9 bf5627fe bf0beea5 bf565f02     .B...'V......_V.
   15788:	bf0b9a6b bf5695e5 bf0b461c bf56cca7     k.....V..F....V.
   15798:	bf0af1b7 bf570348 bf0a9d3d bf5739c7     ....H.W.=....9W.
   157a8:	bf0a48ad bf577026 bf09f409 bf57a663     .H..&pW.....c.W.
   157b8:	bf099f4e bf57dc7f bf094a7f bf581279     N.....W..J..y.X.
   157c8:	bf08f59b bf584853 bf08a0a1 bf587e0b     ....SHX......~X.
   157d8:	bf084b92 bf58b3a1 bf07f66f bf58e917     .K....X.o.....X.
   157e8:	bf07a136 bf591e6a bf074be8 bf59539c     6...j.Y..K...SY.
   157f8:	bf06f686 bf5988ad bf06a10e bf59bd9c     ......Y.......Y.
   15808:	bf064b82 bf59f26a bf05f5e2 bf5a2716     .K..j.Y......'Z.
   15818:	bf05a02c bf5a5ba0 bf054a62 bf5a9009     ,....[Z.bJ....Z.
   15828:	bf04f484 bf5ac450 bf049e91 bf5af875     ....P.Z.....u.Z.
   15838:	bf044889 bf5b2c79 bf03f26d bf5b605a     .H..y,[.m...Z`[.
   15848:	bf039c3d bf5b941a bf0345f8 bf5bc7b8     =.....[..E....[.
   15858:	bf02ef9f bf5bfb34 bf029932 bf5c2e8e     ....4.[.2.....\.
   15868:	bf0242b1 bf5c61c7 bf01ec1c bf5c94dd     .B...a\.......\.
   15878:	bf019573 bf5cc7d1 bf013eb5 bf5cfaa3     s.....\..>....\.
   15888:	bf00e7e4 bf5d2d53 bf0090ff bf5d5fe1     ....S-]......_].
   15898:	bf003a06 bf5d924d beffc5f3 bf5dc497     .:..M.].......].
   158a8:	beff17b2 bf5df6be befe694a bf5e28c3     ......].Ji...(^.
   158b8:	befdbabb bf5e5aa6 befd0c04 bf5e8c67     .....Z^.....g.^.
   158c8:	befc5d27 bf5ebe05 befbae22 bf5eef81     ']....^.".....^.
   158d8:	befafef7 bf5f20db befa4fa5 bf5f5212     ..... _..O...R_.
   158e8:	bef9a02d bf5f8327 bef8f08e bf5fb419     -...'._......._.
   158f8:	bef840c8 bf5fe4e9 bef790dc bf601596     .@...._.......`.
   15908:	bef6e0cb bf604621 bef63093 bf607689     ....!F`..0...v`.
   15918:	bef58035 bf60a6cf bef4cfb1 bf60d6f2     5.....`.......`.
   15928:	bef41f07 bf6106f2 bef36e38 bf6136d0     ......a.8n...6a.
   15938:	bef2bd43 bf61668a bef20c29 bf619622     C....fa.)...".a.
   15948:	bef15aea bf61c598 bef0a985 bf61f4ea     .Z....a.......a.
   15958:	beeff7fb bf62241a beef464c bf625326     .....$b.LF..&Sb.
   15968:	beee9479 bf628210 beede280 bf62b0d7     y.....b.......b.
   15978:	beed3063 bf62df7b beec7e21 bf630dfc     c0..{.b.!~....c.
   15988:	beebcbbb bf633c5a beeb1930 bf636a95     ....Z<c.0....jc.
   15998:	beea6681 bf6398ac bee9b3ae bf63c6a1     .f....c.......c.
   159a8:	bee900b7 bf63f473 bee84d9c bf642221     ....s.c..M..!"d.
   159b8:	bee79a5d bf644fac bee6e6fb bf647d14     ]....Od......}d.
   159c8:	bee63375 bf64aa59 bee57fcb bf64d77b     u3..Y.d.....{.d.
   159d8:	bee4cbfe bf650479 bee4180e bf653154     ....y.e.....T1e.
   159e8:	bee363fa bf655e0b bee2afc4 bf658aa0     .c...^e.......e.
   159f8:	bee1fb6a bf65b710 bee146ee bf65e35e     j.....e..F..^.e.
   15a08:	bee0924f bf660f88 bedfdd8d bf663b8e     O.....f......;f.
   15a18:	bedf28a9 bf666771 bede73a2 bf669330     .(..qgf..s..0.f.
   15a28:	beddbe79 bf66becc bedd092e bf66ea45     y.....f.....E.f.
   15a38:	bedc53c1 bf671599 bedb9e31 bf6740ca     .S....g.1....@g.
   15a48:	bedae880 bf676bd8 beda32ad bf6796c1     .....kg..2....g.
   15a58:	bed97cb9 bf67c187 bed8c6a3 bf67ec2a     .|....g.....*.g.
   15a68:	bed8106b bf6816a8 bed75a13 bf684103     k.....h..Z...Ah.
   15a78:	bed6a399 bf686b39 bed5ecfd bf68954c     ....9kh.....L.h.
   15a88:	bed53641 bf68bf3c bed47f64 bf68e907     A6..<.h.d.....h.
   15a98:	bed3c867 bf6912ae bed31148 bf693c32     g.....i.H...2<i.
   15aa8:	bed25a09 bf696591 bed1a2aa bf698ecc     .Z...ei.......i.
   15ab8:	bed0eb2a bf69b7e4 bed0338a bf69e0d7     *.....i..3....i.
   15ac8:	becf7bca bf6a09a7 becec3ea bf6a3252     .{....j.....R2j.
   15ad8:	bece0bea bf6a5ad9 becd53ca bf6a833c     .....Zj..S..<.j.
   15ae8:	becc9b8b bf6aab7b becbe32c bf6ad395     ....{.j.,.....j.
   15af8:	becb2aae bf6afb8c beca7210 bf6b235e     .*....j..r..^#k.
   15b08:	bec9b953 bf6b4b0c bec90077 bf6b7295     S....Kk.w....rk.
   15b18:	bec8477c bf6b99fb bec78e62 bf6bc13b     |G....k.b...;.k.
   15b28:	bec6d529 bf6be858 bec61bd2 bf6c0f50     )...X.k.....P.l.
   15b38:	bec5625c bf6c3624 bec4a8c8 bf6c5cd4     \b..$6l......\l.
   15b48:	bec3ef15 bf6c835e bec33544 bf6ca9c5     ....^.l.D5....l.
   15b58:	bec27b55 bf6cd007 bec1c148 bf6cf624     U{....l.H...$.l.
   15b68:	bec1071e bf6d1c1d bec04cd5 bf6d41f2     ......m..L...Am.
   15b78:	bebf926f bf6d67a1 bebed7eb bf6d8d2d     o....gm.....-.m.
   15b88:	bebe1d4a bf6db293 bebd628b bf6dd7d5     J.....m..b....m.
   15b98:	bebca7af bf6dfcf2 bebbecb6 bf6e21eb     ......m......!n.
   15ba8:	bebb31a0 bf6e46be beba766e bf6e6b6d     .1...Fn.nv..mkn.
   15bb8:	beb9bb1e bf6e8ff8 beb8ffb2 bf6eb45d     ......n.....].n.
   15bc8:	beb8442a bf6ed89e beb78884 bf6efcba     *D....n.......n.
   15bd8:	beb6ccc3 bf6f20b0 beb610e6 bf6f4483     ..... o......Do.
   15be8:	beb554ec bf6f6830 beb498d6 bf6f8bb8     .T..0ho.......o.
   15bf8:	beb3dca5 bf6faf1b beb32058 bf6fd25a     ......o.X ..Z.o.
   15c08:	beb263ef bf6ff573 beb1a76b bf701867     .c..s.o.k...g.p.
   15c18:	beb0eacb bf703b37 beb02e10 bf705de1     ....7;p......]p.
   15c28:	beaf713a bf708066 beaeb449 bf70a2c6     :q..f.p.I.....p.
   15c38:	beadf73c bf70c502 bead3a15 bf70e717     <.....p..:....p.
   15c48:	beac7cd4 bf710908 beabbf77 bf712ad4     .|....q.w....*q.
   15c58:	beab0201 bf714c7a beaa446f bf716dfb     ....zLq.oD...mq.
   15c68:	bea986c4 bf718f57 bea8c8fe bf71b08e     ....W.q.......q.
   15c78:	bea80b1f bf71d19f bea74d25 bf71f28c     ......q.%M....q.
   15c88:	bea68f12 bf721352 bea5d0e5 bf7233f4     ....R.r......3r.
   15c98:	bea5129f bf725470 bea4543f bf7274c7     ....pTr.?T...tr.
   15ca8:	bea395c5 bf7294f8 bea2d733 bf72b504     ......r.3.....r.
   15cb8:	bea21887 bf72d4eb bea159c2 bf72f4ac     ......r..Y....r.
   15cc8:	bea09ae5 bf731447 be9fdbee bf7333be     ....G.s......3s.
   15cd8:	be9f1cdf bf73530e be9e5db8 bf737239     .....Ss..]..9rs.
   15ce8:	be9d9e78 bf73913f be9cdf20 bf73b01f     x...?.s. .....s.
   15cf8:	be9c1faf bf73ced9 be9b6027 bf73ed6e     ......s.'`..n.s.
   15d08:	be9aa086 bf740bdd be99e0ce bf742a27     ......t.....'*t.
   15d18:	be9920fe bf74484b be986116 bf746649     . ..KHt..a..Ift.
   15d28:	be97a117 bf748422 be96e100 bf74a1d5     ....".t.......t.
   15d38:	be9620d2 bf74bf62 be95608d bf74dcc9     . ..b.t..`....t.
   15d48:	be94a031 bf74fa0b be93dfbf bf751727     1.....t.....'.u.
   15d58:	be931f35 bf75341d be925e94 bf7550ed     5....4u..^...Pu.
   15d68:	be919ddd bf756d97 be90dd10 bf758a1c     .....mu.......u.
   15d78:	be901c2c bf75a67b be8f5b32 bf75c2b3     ,...{.u.2[....u.
   15d88:	be8e9a22 bf75dec6 be8dd8fc bf75fab3     ".....u.......u.
   15d98:	be8d17c0 bf76167a be8c566e bf76321b     ....z.v.nV...2v.
   15da8:	be8b9507 bf764d97 be8ad38a bf7668ec     .....Mv......hv.
   15db8:	be8a11f8 bf76841b be895050 bf769f24     ......v.PP..$.v.
   15dc8:	be888e93 bf76ba07 be87ccc1 bf76d4c4     ......v.......v.
   15dd8:	be870ada bf76ef5b be8648df bf7709cc     ....[.v..H....w.
   15de8:	be8586ce bf772417 be84c4aa bf773e3c     .....$w.....<>w.
   15df8:	be840270 bf77583a be834022 bf777213     p...:Xw."@...rw.
   15e08:	be827dc0 bf778bc5 be81bb4a bf77a551     .}....w.J...Q.w.
   15e18:	be80f8c0 bf77beb7 be803622 bf77d7f7     ......w."6....w.
   15e28:	be7ee6e1 bf77f110 be7d6156 bf780a04     ..~...w.Va}...x.
   15e38:	be7bdba4 bf7822d1 be7a55cb bf783b77     ..{.."x..Uz.w;x.
   15e48:	be78cfcc bf7853f8 be7749a6 bf786c52     ..x..Sx..Iw.Rlx.
   15e58:	be75c35a bf788486 be743ce8 bf789c93     Z.u...x..<t...x.
   15e68:	be72b651 bf78b47b be712f94 bf78cc3b     Q.r.{.x../q.;.x.
   15e78:	be6fa8b2 bf78e3d6 be6e21ab bf78fb4a     ..o...x..!n.J.x.
   15e88:	be6c9a7f bf791298 be6b132f bf7929bf     ..l...y./.k..)y.
   15e98:	be698bba bf7940c0 be680422 bf79579a     ..i..@y.".h..Wy.
   15ea8:	be667c66 bf796e4e be64f486 bf7984dc     f|f.Nny...d...y.
   15eb8:	be636c83 bf799b43 be61e45c bf79b183     .lc.C.y.\.a...y.
   15ec8:	be605c13 bf79c79d be5ed3a8 bf79dd91     .\`...y...^...y.
   15ed8:	be5d4b1a bf79f35e be5bc26a bf7a0904     .K].^.y.j.[...z.
   15ee8:	be5a3997 bf7a1e84 be58b0a4 bf7a33dd     .9Z...z...X..3z.
   15ef8:	be57278f bf7a4910 be559e58 bf7a5e1c     .'W..Iz.X.U..^z.
   15f08:	be541501 bf7a7302 be528b89 bf7a87c1     ..T..sz...R...z.
   15f18:	be5101f1 bf7a9c59 be4f7838 bf7ab0cb     ..Q.Y.z.8xO...z.
   15f28:	be4dee60 bf7ac516 be4c6467 bf7ad93a     `.M...z.gdL.:.z.
   15f38:	be4ada4f bf7aed37 be495018 bf7b010e     O.J.7.z..PI...{.
   15f48:	be47c5c2 bf7b14be be463b4d bf7b2848     ..G...{.M;F.H({.
   15f58:	be44b0b9 bf7b3bab be432607 bf7b4ee7     ..D..;{..&C..N{.
   15f68:	be419b37 bf7b61fc be401049 bf7b74ea     7.A..a{.I.@..t{.
   15f78:	be3e853e bf7b87b2 be3cfa15 bf7b9a53     >.>...{...<.S.{.
   15f88:	be3b6ecf bf7baccd be39e36c bf7bbf20     .n;...{.l.9. .{.
   15f98:	be3857ec bf7bd14d be36cc50 bf7be353     .W8.M.{.P.6.S.{.
   15fa8:	be354098 bf7bf531 be33b4c4 bf7c06e9     .@5.1.{...3...|.
   15fb8:	be3228d4 bf7c187a be309cc9 bf7c29e5     .(2.z.|...0..)|.
   15fc8:	be2f10a2 bf7c3b28 be2d8461 bf7c4c44     ../.(;|.a.-.DL|.
   15fd8:	be2bf804 bf7c5d3a be2a6b8d bf7c6e08     ..+.:]|..k*..n|.
   15fe8:	be28defc bf7c7eb0 be275251 bf7c8f31     ..(..~|.QR'.1.|.
   15ff8:	be25c58c bf7c9f8a be2438ad bf7cafbd     ..%...|..8$...|.
   16008:	be22abb6 bf7cbfc9 be211ea5 bf7ccfae     .."...|...!...|.
   16018:	be1f917b bf7cdf6c be1e0438 bf7cef03     {...l.|.8.....|.
   16028:	be1c76de bf7cfe73 be1ae96b bf7d0dbc     .v..s.|.k.....}.
   16038:	be195be0 bf7d1cdd be17ce3d bf7d2bd8     .[....}.=....+}.
   16048:	be164083 bf7d3aac be14b2b2 bf7d4959     .@...:}.....YI}.
   16058:	be1324ca bf7d57de be1196cc bf7d663d     .$...W}.....=f}.
   16068:	be1008b7 bf7d7474 be0e7a8b bf7d8285     ....tt}..z....}.
   16078:	be0cec4a bf7d906e be0b5df3 bf7d9e30     J...n.}..]..0.}.
   16088:	be09cf86 bf7dabcc be084105 bf7db940     ......}..A..@.}.
   16098:	be06b26e bf7dc68c be0523c2 bf7dd3b2     n.....}..#....}.
   160a8:	be039502 bf7de0b1 be02062e bf7ded88     ......}.......}.
   160b8:	be007745 bf7dfa38 bdfdd092 bf7e06c2     Ew..8.}.......~.
   160c8:	bdfab273 bf7e1324 bdf7942c bf7e1f5e     s...$.~.,...^.~.
   160d8:	bdf475c0 bf7e2b72 bdf1572e bf7e375e     .u..r+~..W..^7~.
   160e8:	bdee3876 bf7e4323 bdeb199a bf7e4ec1     v8..#C~......N~.
   160f8:	bde7fa9a bf7e5a38 bde4db76 bf7e6588     ....8Z~.v....e~.
   16108:	bde1bc2e bf7e70b0 bdde9cc4 bf7e7bb1     .....p~......{~.
   16118:	bddb7d37 bf7e868b bdd85d89 bf7e913d     7}....~..]..=.~.
   16128:	bdd53db9 bf7e9bc9 bdd21dc8 bf7ea62d     .=....~.....-.~.
   16138:	bdcefdb7 bf7eb069 bdcbdd86 bf7eba7f     ....i.~.......~.
   16148:	bdc8bd36 bf7ec46d bdc59cc6 bf7ece34     6...m.~.....4.~.
   16158:	bdc27c39 bf7ed7d4 bdbf5b8d bf7ee14c     9|....~..[..L.~.
   16168:	bdbc3ac3 bf7eea9d bdb919dd bf7ef3c7     .:....~.......~.
   16178:	bdb5f8da bf7efcc9 bdb2d7bb bf7f05a4     ......~.........
   16188:	bdafb680 bf7f0e58 bdac952b bf7f16e4     ....X...+.......
   16198:	bda973ba bf7f1f49 bda65230 bf7f2787     .s..I...0R...'..
   161a8:	bda3308c bf7f2f9d bda00ecf bf7f378d     .0.../.......7..
   161b8:	bd9cecf9 bf7f3f54 bd99cb0a bf7f46f4     ....T?.......F..
   161c8:	bd96a905 bf7f4e6d bd9386e7 bf7f55bf     ....mN.......U..
   161d8:	bd9064b4 bf7f5ce9 bd8d426a bf7f63ec     .d...\..jB...c..
   161e8:	bd8a200a bf7f6ac7 bd86fd94 bf7f717b     . ...j......{q..
   161f8:	bd83db0a bf7f7808 bd80b86c bf7f7e6d     .....x..l...m~..
   16208:	bd7b2b74 bf7f84ab bd74e5e9 bf7f8ac2     t+{.......t.....
   16218:	bd6ea038 bf7f90b1 bd685a62 bf7f9678     8.n.....bZh.x...
   16228:	bd621468 bf7f9c18 bd5bce4c bf7fa191     h.b.....L.[.....
   16238:	bd55880e bf7fa6e3 bd4f41af bf7fac0d     ..U......AO.....
   16248:	bd48fb2f bf7fb10f bd42b491 bf7fb5ea     /.H.......B.....
   16258:	bd3c6dd5 bf7fba9e bd3626fc bf7fbf2a     .m<......&6.*...
   16268:	bd2fe007 bf7fc38f bd2998f6 bf7fc7cc     ../.......).....
   16278:	bd2351cc bf7fcbe2 bd1d0a88 bf7fcfd1     .Q#.............
   16288:	bd16c32c bf7fd398 bd107bb8 bf7fd737     ,........{..7...
   16298:	bd0a342f bf7fdaaf bd03ec90 bf7fde00     /4..............
   162a8:	bcfb49b9 bf7fe129 bceeba2d bf7fe42b     .I..)...-...+...
   162b8:	bce22a7b bf7fe705 bcd59aa6 bf7fe9b8     {*..............
   162c8:	bcc90ab0 bf7fec43 bcbc7a9b bf7feea7     ....C....z......
   162d8:	bcafea69 bf7ff0e3 bca35a1c bf7ff2f8     i........Z......
   162e8:	bc96c9b6 bf7ff4e6 bc8a3938 bf7ff6ac     ........89......
   162f8:	bc7b514b bf7ff84a bc623000 bf7ff9c1     KQ{.J....0b.....
   16308:	bc490e90 bf7ffb11 bc2fed02 bf7ffc39     ..I......./.9...
   16318:	bc16cb59 bf7ffd39 bbfb5330 bf7ffe13     Y...9...0S......
   16328:	bbc90f89 bf7ffec4 bb96cbc1 bf7fff4e     ............N...
   16338:	bb490fc7 bf7fffb1 bac90fd4 bf7fffec     ..I.............
   16348:	80000000 bf800000 3ac90fd4 bf7fffec     ...........:....
   16358:	3b490fc7 bf7fffb1 3b96cbc1 bf7fff4e     ..I;.......;N...
   16368:	3bc90f89 bf7ffec4 3bfb5330 bf7ffe13     ...;....0S.;....
   16378:	3c16cb59 bf7ffd39 3c2fed02 bf7ffc39     Y..<9...../<9...
   16388:	3c490e90 bf7ffb11 3c623000 bf7ff9c1     ..I<.....0b<....
   16398:	3c7b514b bf7ff84a 3c8a3938 bf7ff6ac     KQ{<J...89.<....
   163a8:	3c96c9b6 bf7ff4e6 3ca35a1c bf7ff2f8     ...<.....Z.<....
   163b8:	3cafea69 bf7ff0e3 3cbc7a9b bf7feea7     i..<.....z.<....
   163c8:	3cc90ab0 bf7fec43 3cd59aa6 bf7fe9b8     ...<C......<....
   163d8:	3ce22a7b bf7fe705 3ceeba2d bf7fe42b     {*.<....-..<+...
   163e8:	3cfb49b9 bf7fe129 3d03ec90 bf7fde00     .I.<)......=....
   163f8:	3d0a342f bf7fdaaf 3d107bb8 bf7fd737     /4.=.....{.=7...
   16408:	3d16c32c bf7fd398 3d1d0a88 bf7fcfd1     ,..=.......=....
   16418:	3d2351cc bf7fcbe2 3d2998f6 bf7fc7cc     .Q#=......)=....
   16428:	3d2fe007 bf7fc38f 3d3626fc bf7fbf2a     ../=.....&6=*...
   16438:	3d3c6dd5 bf7fba9e 3d42b491 bf7fb5ea     .m<=......B=....
   16448:	3d48fb2f bf7fb10f 3d4f41af bf7fac0d     /.H=.....AO=....
   16458:	3d55880e bf7fa6e3 3d5bce4c bf7fa191     ..U=....L.[=....
   16468:	3d621468 bf7f9c18 3d685a62 bf7f9678     h.b=....bZh=x...
   16478:	3d6ea038 bf7f90b1 3d74e5e9 bf7f8ac2     8.n=......t=....
   16488:	3d7b2b74 bf7f84ab 3d80b86c bf7f7e6d     t+{=....l..=m~..
   16498:	3d83db0a bf7f7808 3d86fd94 bf7f717b     ...=.x.....={q..
   164a8:	3d8a200a bf7f6ac7 3d8d426a bf7f63ec     . .=.j..jB.=.c..
   164b8:	3d9064b4 bf7f5ce9 3d9386e7 bf7f55bf     .d.=.\.....=.U..
   164c8:	3d96a905 bf7f4e6d 3d99cb0a bf7f46f4     ...=mN.....=.F..
   164d8:	3d9cecf9 bf7f3f54 3da00ecf bf7f378d     ...=T?.....=.7..
   164e8:	3da3308c bf7f2f9d 3da65230 bf7f2787     .0.=./..0R.=.'..
   164f8:	3da973ba bf7f1f49 3dac952b bf7f16e4     .s.=I...+..=....
   16508:	3dafb680 bf7f0e58 3db2d7bb bf7f05a4     ...=X......=....
   16518:	3db5f8da bf7efcc9 3db919dd bf7ef3c7     ...=..~....=..~.
   16528:	3dbc3ac3 bf7eea9d 3dbf5b8d bf7ee14c     .:.=..~..[.=L.~.
   16538:	3dc27c39 bf7ed7d4 3dc59cc6 bf7ece34     9|.=..~....=4.~.
   16548:	3dc8bd36 bf7ec46d 3dcbdd86 bf7eba7f     6..=m.~....=..~.
   16558:	3dcefdb7 bf7eb069 3dd21dc8 bf7ea62d     ...=i.~....=-.~.
   16568:	3dd53db9 bf7e9bc9 3dd85d89 bf7e913d     .=.=..~..].==.~.
   16578:	3ddb7d37 bf7e868b 3dde9cc4 bf7e7bb1     7}.=..~....=.{~.
   16588:	3de1bc2e bf7e70b0 3de4db76 bf7e6588     ...=.p~.v..=.e~.
   16598:	3de7fa9a bf7e5a38 3deb199a bf7e4ec1     ...=8Z~....=.N~.
   165a8:	3dee3876 bf7e4323 3df1572e bf7e375e     v8.=#C~..W.=^7~.
   165b8:	3df475c0 bf7e2b72 3df7942c bf7e1f5e     .u.=r+~.,..=^.~.
   165c8:	3dfab273 bf7e1324 3dfdd092 bf7e06c2     s..=$.~....=..~.
   165d8:	3e007745 bf7dfa38 3e02062e bf7ded88     Ew.>8.}....>..}.
   165e8:	3e039502 bf7de0b1 3e0523c2 bf7dd3b2     ...>..}..#.>..}.
   165f8:	3e06b26e bf7dc68c 3e084105 bf7db940     n..>..}..A.>@.}.
   16608:	3e09cf86 bf7dabcc 3e0b5df3 bf7d9e30     ...>..}..].>0.}.
   16618:	3e0cec4a bf7d906e 3e0e7a8b bf7d8285     J..>n.}..z.>..}.
   16628:	3e1008b7 bf7d7474 3e1196cc bf7d663d     ...>tt}....>=f}.
   16638:	3e1324ca bf7d57de 3e14b2b2 bf7d4959     .$.>.W}....>YI}.
   16648:	3e164083 bf7d3aac 3e17ce3d bf7d2bd8     .@.>.:}.=..>.+}.
   16658:	3e195be0 bf7d1cdd 3e1ae96b bf7d0dbc     .[.>..}.k..>..}.
   16668:	3e1c76de bf7cfe73 3e1e0438 bf7cef03     .v.>s.|.8..>..|.
   16678:	3e1f917b bf7cdf6c 3e211ea5 bf7ccfae     {..>l.|...!>..|.
   16688:	3e22abb6 bf7cbfc9 3e2438ad bf7cafbd     ..">..|..8$>..|.
   16698:	3e25c58c bf7c9f8a 3e275251 bf7c8f31     ..%>..|.QR'>1.|.
   166a8:	3e28defc bf7c7eb0 3e2a6b8d bf7c6e08     ..(>.~|..k*>.n|.
   166b8:	3e2bf804 bf7c5d3a 3e2d8461 bf7c4c44     ..+>:]|.a.->DL|.
   166c8:	3e2f10a2 bf7c3b28 3e309cc9 bf7c29e5     ../>(;|...0>.)|.
   166d8:	3e3228d4 bf7c187a 3e33b4c4 bf7c06e9     .(2>z.|...3>..|.
   166e8:	3e354098 bf7bf531 3e36cc50 bf7be353     .@5>1.{.P.6>S.{.
   166f8:	3e3857ec bf7bd14d 3e39e36c bf7bbf20     .W8>M.{.l.9> .{.
   16708:	3e3b6ecf bf7baccd 3e3cfa15 bf7b9a53     .n;>..{...<>S.{.
   16718:	3e3e853e bf7b87b2 3e401049 bf7b74ea     >.>>..{.I.@>.t{.
   16728:	3e419b37 bf7b61fc 3e432607 bf7b4ee7     7.A>.a{..&C>.N{.
   16738:	3e44b0b9 bf7b3bab 3e463b4d bf7b2848     ..D>.;{.M;F>H({.
   16748:	3e47c5c2 bf7b14be 3e495018 bf7b010e     ..G>..{..PI>..{.
   16758:	3e4ada4f bf7aed37 3e4c6467 bf7ad93a     O.J>7.z.gdL>:.z.
   16768:	3e4dee60 bf7ac516 3e4f7838 bf7ab0cb     `.M>..z.8xO>..z.
   16778:	3e5101f1 bf7a9c59 3e528b89 bf7a87c1     ..Q>Y.z...R>..z.
   16788:	3e541501 bf7a7302 3e559e58 bf7a5e1c     ..T>.sz.X.U>.^z.
   16798:	3e57278f bf7a4910 3e58b0a4 bf7a33dd     .'W>.Iz...X>.3z.
   167a8:	3e5a3997 bf7a1e84 3e5bc26a bf7a0904     .9Z>..z.j.[>..z.
   167b8:	3e5d4b1a bf79f35e 3e5ed3a8 bf79dd91     .K]>^.y...^>..y.
   167c8:	3e605c13 bf79c79d 3e61e45c bf79b183     .\`>..y.\.a>..y.
   167d8:	3e636c83 bf799b43 3e64f486 bf7984dc     .lc>C.y...d>..y.
   167e8:	3e667c66 bf796e4e 3e680422 bf79579a     f|f>Nny.".h>.Wy.
   167f8:	3e698bba bf7940c0 3e6b132f bf7929bf     ..i>.@y./.k>.)y.
   16808:	3e6c9a7f bf791298 3e6e21ab bf78fb4a     ..l>..y..!n>J.x.
   16818:	3e6fa8b2 bf78e3d6 3e712f94 bf78cc3b     ..o>..x../q>;.x.
   16828:	3e72b651 bf78b47b 3e743ce8 bf789c93     Q.r>{.x..<t>..x.
   16838:	3e75c35a bf788486 3e7749a6 bf786c52     Z.u>..x..Iw>Rlx.
   16848:	3e78cfcc bf7853f8 3e7a55cb bf783b77     ..x>.Sx..Uz>w;x.
   16858:	3e7bdba4 bf7822d1 3e7d6156 bf780a04     ..{>."x.Va}>..x.
   16868:	3e7ee6e1 bf77f110 3e803622 bf77d7f7     ..~>..w."6.>..w.
   16878:	3e80f8c0 bf77beb7 3e81bb4a bf77a551     ...>..w.J..>Q.w.
   16888:	3e827dc0 bf778bc5 3e834022 bf777213     .}.>..w."@.>.rw.
   16898:	3e840270 bf77583a 3e84c4aa bf773e3c     p..>:Xw....><>w.
   168a8:	3e8586ce bf772417 3e8648df bf7709cc     ...>.$w..H.>..w.
   168b8:	3e870ada bf76ef5b 3e87ccc1 bf76d4c4     ...>[.v....>..v.
   168c8:	3e888e93 bf76ba07 3e895050 bf769f24     ...>..v.PP.>$.v.
   168d8:	3e8a11f8 bf76841b 3e8ad38a bf7668ec     ...>..v....>.hv.
   168e8:	3e8b9507 bf764d97 3e8c566e bf76321b     ...>.Mv.nV.>.2v.
   168f8:	3e8d17c0 bf76167a 3e8dd8fc bf75fab3     ...>z.v....>..u.
   16908:	3e8e9a22 bf75dec6 3e8f5b32 bf75c2b3     "..>..u.2[.>..u.
   16918:	3e901c2c bf75a67b 3e90dd10 bf758a1c     ,..>{.u....>..u.
   16928:	3e919ddd bf756d97 3e925e94 bf7550ed     ...>.mu..^.>.Pu.
   16938:	3e931f35 bf75341d 3e93dfbf bf751727     5..>.4u....>'.u.
   16948:	3e94a031 bf74fa0b 3e95608d bf74dcc9     1..>..t..`.>..t.
   16958:	3e9620d2 bf74bf62 3e96e100 bf74a1d5     . .>b.t....>..t.
   16968:	3e97a117 bf748422 3e986116 bf746649     ...>".t..a.>Ift.
   16978:	3e9920fe bf74484b 3e99e0ce bf742a27     . .>KHt....>'*t.
   16988:	3e9aa086 bf740bdd 3e9b6027 bf73ed6e     ...>..t.'`.>n.s.
   16998:	3e9c1faf bf73ced9 3e9cdf20 bf73b01f     ...>..s. ..>..s.
   169a8:	3e9d9e78 bf73913f 3e9e5db8 bf737239     x..>?.s..].>9rs.
   169b8:	3e9f1cdf bf73530e 3e9fdbee bf7333be     ...>.Ss....>.3s.
   169c8:	3ea09ae5 bf731447 3ea159c2 bf72f4ac     ...>G.s..Y.>..r.
   169d8:	3ea21887 bf72d4eb 3ea2d733 bf72b504     ...>..r.3..>..r.
   169e8:	3ea395c5 bf7294f8 3ea4543f bf7274c7     ...>..r.?T.>.tr.
   169f8:	3ea5129f bf725470 3ea5d0e5 bf7233f4     ...>pTr....>.3r.
   16a08:	3ea68f12 bf721352 3ea74d25 bf71f28c     ...>R.r.%M.>..q.
   16a18:	3ea80b1f bf71d19f 3ea8c8fe bf71b08e     ...>..q....>..q.
   16a28:	3ea986c4 bf718f57 3eaa446f bf716dfb     ...>W.q.oD.>.mq.
   16a38:	3eab0201 bf714c7a 3eabbf77 bf712ad4     ...>zLq.w..>.*q.
   16a48:	3eac7cd4 bf710908 3ead3a15 bf70e717     .|.>..q..:.>..p.
   16a58:	3eadf73c bf70c502 3eaeb449 bf70a2c6     <..>..p.I..>..p.
   16a68:	3eaf713a bf708066 3eb02e10 bf705de1     :q.>f.p....>.]p.
   16a78:	3eb0eacb bf703b37 3eb1a76b bf701867     ...>7;p.k..>g.p.
   16a88:	3eb263ef bf6ff573 3eb32058 bf6fd25a     .c.>s.o.X .>Z.o.
   16a98:	3eb3dca5 bf6faf1b 3eb498d6 bf6f8bb8     ...>..o....>..o.
   16aa8:	3eb554ec bf6f6830 3eb610e6 bf6f4483     .T.>0ho....>.Do.
   16ab8:	3eb6ccc3 bf6f20b0 3eb78884 bf6efcba     ...>. o....>..n.
   16ac8:	3eb8442a bf6ed89e 3eb8ffb2 bf6eb45d     *D.>..n....>].n.
   16ad8:	3eb9bb1e bf6e8ff8 3eba766e bf6e6b6d     ...>..n.nv.>mkn.
   16ae8:	3ebb31a0 bf6e46be 3ebbecb6 bf6e21eb     .1.>.Fn....>.!n.
   16af8:	3ebca7af bf6dfcf2 3ebd628b bf6dd7d5     ...>..m..b.>..m.
   16b08:	3ebe1d4a bf6db293 3ebed7eb bf6d8d2d     J..>..m....>-.m.
   16b18:	3ebf926f bf6d67a1 3ec04cd5 bf6d41f2     o..>.gm..L.>.Am.
   16b28:	3ec1071e bf6d1c1d 3ec1c148 bf6cf624     ...>..m.H..>$.l.
   16b38:	3ec27b55 bf6cd007 3ec33544 bf6ca9c5     U{.>..l.D5.>..l.
   16b48:	3ec3ef15 bf6c835e 3ec4a8c8 bf6c5cd4     ...>^.l....>.\l.
   16b58:	3ec5625c bf6c3624 3ec61bd2 bf6c0f50     \b.>$6l....>P.l.
   16b68:	3ec6d529 bf6be858 3ec78e62 bf6bc13b     )..>X.k.b..>;.k.
   16b78:	3ec8477c bf6b99fb 3ec90077 bf6b7295     |G.>..k.w..>.rk.
   16b88:	3ec9b953 bf6b4b0c 3eca7210 bf6b235e     S..>.Kk..r.>^#k.
   16b98:	3ecb2aae bf6afb8c 3ecbe32c bf6ad395     .*.>..j.,..>..j.
   16ba8:	3ecc9b8b bf6aab7b 3ecd53ca bf6a833c     ...>{.j..S.><.j.
   16bb8:	3ece0bea bf6a5ad9 3ecec3ea bf6a3252     ...>.Zj....>R2j.
   16bc8:	3ecf7bca bf6a09a7 3ed0338a bf69e0d7     .{.>..j..3.>..i.
   16bd8:	3ed0eb2a bf69b7e4 3ed1a2aa bf698ecc     *..>..i....>..i.
   16be8:	3ed25a09 bf696591 3ed31148 bf693c32     .Z.>.ei.H..>2<i.
   16bf8:	3ed3c867 bf6912ae 3ed47f64 bf68e907     g..>..i.d..>..h.
   16c08:	3ed53641 bf68bf3c 3ed5ecfd bf68954c     A6.><.h....>L.h.
   16c18:	3ed6a399 bf686b39 3ed75a13 bf684103     ...>9kh..Z.>.Ah.
   16c28:	3ed8106b bf6816a8 3ed8c6a3 bf67ec2a     k..>..h....>*.g.
   16c38:	3ed97cb9 bf67c187 3eda32ad bf6796c1     .|.>..g..2.>..g.
   16c48:	3edae880 bf676bd8 3edb9e31 bf6740ca     ...>.kg.1..>.@g.
   16c58:	3edc53c1 bf671599 3edd092e bf66ea45     .S.>..g....>E.f.
   16c68:	3eddbe79 bf66becc 3ede73a2 bf669330     y..>..f..s.>0.f.
   16c78:	3edf28a9 bf666771 3edfdd8d bf663b8e     .(.>qgf....>.;f.
   16c88:	3ee0924f bf660f88 3ee146ee bf65e35e     O..>..f..F.>^.e.
   16c98:	3ee1fb6a bf65b710 3ee2afc4 bf658aa0     j..>..e....>..e.
   16ca8:	3ee363fa bf655e0b 3ee4180e bf653154     .c.>.^e....>T1e.
   16cb8:	3ee4cbfe bf650479 3ee57fcb bf64d77b     ...>y.e....>{.d.
   16cc8:	3ee63375 bf64aa59 3ee6e6fb bf647d14     u3.>Y.d....>.}d.
   16cd8:	3ee79a5d bf644fac 3ee84d9c bf642221     ]..>.Od..M.>!"d.
   16ce8:	3ee900b7 bf63f473 3ee9b3ae bf63c6a1     ...>s.c....>..c.
   16cf8:	3eea6681 bf6398ac 3eeb1930 bf636a95     .f.>..c.0..>.jc.
   16d08:	3eebcbbb bf633c5a 3eec7e21 bf630dfc     ...>Z<c.!~.>..c.
   16d18:	3eed3063 bf62df7b 3eede280 bf62b0d7     c0.>{.b....>..b.
   16d28:	3eee9479 bf628210 3eef464c bf625326     y..>..b.LF.>&Sb.
   16d38:	3eeff7fb bf62241a 3ef0a985 bf61f4ea     ...>.$b....>..a.
   16d48:	3ef15aea bf61c598 3ef20c29 bf619622     .Z.>..a.)..>".a.
   16d58:	3ef2bd43 bf61668a 3ef36e38 bf6136d0     C..>.fa.8n.>.6a.
   16d68:	3ef41f07 bf6106f2 3ef4cfb1 bf60d6f2     ...>..a....>..`.
   16d78:	3ef58035 bf60a6cf 3ef63093 bf607689     5..>..`..0.>.v`.
   16d88:	3ef6e0cb bf604621 3ef790dc bf601596     ...>!F`....>..`.
   16d98:	3ef840c8 bf5fe4e9 3ef8f08e bf5fb419     .@.>.._....>.._.
   16da8:	3ef9a02d bf5f8327 3efa4fa5 bf5f5212     -..>'._..O.>.R_.
   16db8:	3efafef7 bf5f20db 3efbae22 bf5eef81     ...>. _."..>..^.
   16dc8:	3efc5d27 bf5ebe05 3efd0c04 bf5e8c67     '].>..^....>g.^.
   16dd8:	3efdbabb bf5e5aa6 3efe694a bf5e28c3     ...>.Z^.Ji.>.(^.
   16de8:	3eff17b2 bf5df6be 3effc5f3 bf5dc497     ...>..]....>..].
   16df8:	3f003a06 bf5d924d 3f0090ff bf5d5fe1     .:.?M.]....?._].
   16e08:	3f00e7e4 bf5d2d53 3f013eb5 bf5cfaa3     ...?S-]..>.?..\.
   16e18:	3f019573 bf5cc7d1 3f01ec1c bf5c94dd     s..?..\....?..\.
   16e28:	3f0242b1 bf5c61c7 3f029932 bf5c2e8e     .B.?.a\.2..?..\.
   16e38:	3f02ef9f bf5bfb34 3f0345f8 bf5bc7b8     ...?4.[..E.?..[.
   16e48:	3f039c3d bf5b941a 3f03f26d bf5b605a     =..?..[.m..?Z`[.
   16e58:	3f044889 bf5b2c79 3f049e91 bf5af875     .H.?y,[....?u.Z.
   16e68:	3f04f484 bf5ac450 3f054a62 bf5a9009     ...?P.Z.bJ.?..Z.
   16e78:	3f05a02c bf5a5ba0 3f05f5e2 bf5a2716     ,..?.[Z....?.'Z.
   16e88:	3f064b82 bf59f26a 3f06a10e bf59bd9c     .K.?j.Y....?..Y.
   16e98:	3f06f686 bf5988ad 3f074be8 bf59539c     ...?..Y..K.?.SY.
   16ea8:	3f07a136 bf591e6a 3f07f66f bf58e917     6..?j.Y.o..?..X.
   16eb8:	3f084b92 bf58b3a1 3f08a0a1 bf587e0b     .K.?..X....?.~X.
   16ec8:	3f08f59b bf584853 3f094a7f bf581279     ...?SHX..J.?y.X.
   16ed8:	3f099f4e bf57dc7f 3f09f409 bf57a663     N..?..W....?c.W.
   16ee8:	3f0a48ad bf577026 3f0a9d3d bf5739c7     .H.?&pW.=..?.9W.
   16ef8:	3f0af1b7 bf570348 3f0b461c bf56cca7     ...?H.W..F.?..V.
   16f08:	3f0b9a6b bf5695e5 3f0beea5 bf565f02     k..?..V....?._V.
   16f18:	3f0c42c9 bf5627fe 3f0c96d7 bf55f0d9     .B.?.'V....?..U.
   16f28:	3f0cead0 bf55b993 3f0d3eb3 bf55822c     ...?..U..>.?,.U.
   16f38:	3f0d9281 bf554aa4 3f0de638 bf5512fb     ...?.JU.8..?..U.
   16f48:	3f0e39da bf54db31 3f0e8d65 bf54a347     .9.?1.T.e..?G.T.
   16f58:	3f0ee0db bf546b3b 3f0f343b bf54330f     ...?;kT.;4.?.3T.
   16f68:	3f0f8784 bf53fac3 3f0fdab8 bf53c255     ...?..S....?U.S.
   16f78:	3f102dd5 bf5389c7 3f1080dc bf535118     .-.?..S....?.QS.
   16f88:	3f10d3cd bf531849 3f1126a7 bf52df59     ...?I.S..&.?Y.R.
   16f98:	3f11796b bf52a649 3f11cc19 bf526d18     ky.?I.R....?.mR.
   16fa8:	3f121eb0 bf5233c6 3f127130 bf51fa54     ...?.3R.0q.?T.Q.
   16fb8:	3f12c39a bf51c0c2 3f1315ee bf518710     ...?..Q....?..Q.
   16fc8:	3f13682a bf514d3d 3f13ba50 bf51134a     *h.?=MQ.P..?J.Q.
   16fd8:	3f140c5f bf50d937 3f145e58 bf509f03     _..?7.P.X^.?..P.
   16fe8:	3f14b039 bf5064af 3f150204 bf502a3b     9..?.dP....?;*P.
   16ff8:	3f1553b7 bf4fefa8 3f15a554 bf4fb4f4     .S.?..O.T..?..O.
   17008:	3f15f6d9 bf4f7a1f 3f164847 bf4f3f2b     ...?.zO.GH.?+?O.
   17018:	3f16999f bf4f0417 3f16eadf bf4ec8e4     ...?..O....?..N.
   17028:	3f173c07 bf4e8d90 3f178d18 bf4e521c     .<.?..N....?.RN.
   17038:	3f17de12 bf4e1689 3f182ef5 bf4ddad5     ...?..N....?..M.
   17048:	3f187fc0 bf4d9f02 3f18d073 bf4d6310     ...?..M.s..?.cM.
   17058:	3f19210f bf4d26fd 3f197194 bf4ceacb     .!.?.&M..q.?..L.
   17068:	3f19c200 bf4cae79 3f1a1255 bf4c7208     ...?y.L.U..?.rL.
   17078:	3f1a6293 bf4c3578 3f1ab2b8 bf4bf8c7     .b.?x5L....?..K.
   17088:	3f1b02c6 bf4bbbf8 3f1b52bb bf4b7f09     ...?..K..R.?..K.
   17098:	3f1ba299 bf4b41fa 3f1bf25f bf4b04cc     ...?.AK._..?..K.
   170a8:	3f1c420c bf4ac77f 3f1c91a2 bf4a8a13     .B.?..J....?..J.
   170b8:	3f1ce11f bf4a4c87 3f1d3084 bf4a0edc     ...?.LJ..0.?..J.
   170c8:	3f1d7fd1 bf49d112 3f1dcf06 bf499329     ...?..I....?).I.
   170d8:	3f1e1e22 bf495521 3f1e6d26 bf4916fa     "..?!UI.&m.?..I.
   170e8:	3f1ebc12 bf48d8b3 3f1f0ae5 bf489a4e     ...?..H....?N.H.
   170f8:	3f1f599f bf485bca 3f1fa841 bf481d27     .Y.?.[H.A..?'.H.
   17108:	3f1ff6cb bf47de65 3f20453b bf479f84     ...?e.G.;E ?..G.
   17118:	3f209393 bf476085 3f20e1d2 bf472167     .. ?.`G... ?g!G.
   17128:	3f212ff9 bf46e22a 3f217e06 bf46a2ce     ./!?*.F..~!?..F.
   17138:	3f21cbfb bf466354 3f2219d7 bf4623bb     ..!?TcF..."?.#F.
   17148:	3f226799 bf45e403 3f22b543 bf45a42d     .g"?..E.C."?-.E.
   17158:	3f2302d3 bf456439 3f23504b bf452426     ..#?9dE.KP#?&$E.
   17168:	3f239da9 bf44e3f5 3f23eaee bf44a3a5     ..#?..D...#?..D.
   17178:	3f24381a bf446337 3f24852c bf4422ab     .8$?7cD.,.$?."D.
   17188:	3f24d225 bf43e200 3f251f04 bf43a138     %.$?..C...%?8.C.
   17198:	3f256bcb bf436051 3f25b877 bf431f4c     .k%?Q`C.w.%?L.C.
   171a8:	3f26050a bf42de29 3f265184 bf429ce8     ..&?).B..Q&?..B.
   171b8:	3f269de3 bf425b89 3f26ea2a bf421a0b     ..&?.[B.*.&?..B.
   171c8:	3f273656 bf41d870 3f278268 bf4196b7     V6'?p.A.h.'?..A.
   171d8:	3f27ce61 bf4154e1 3f281a40 bf4112ec     a.'?.TA.@.(?..A.
   171e8:	3f286605 bf40d0da 3f28b1b0 bf408ea9     .f(?..@...(?..@.
   171f8:	3f28fd41 bf404c5c 3f2948b8 bf4009f0     A.(?\L@..H)?..@.
   17208:	3f299415 bf3fc767 3f29df57 bf3f84c0     ..)?g.?.W.)?..?.
   17218:	3f2a2a80 bf3f41fc 3f2a758e bf3eff1b     .**?.A?..u*?..>.
   17228:	3f2ac082 bf3ebc1b 3f2b0b5b bf3e78ff     ..*?..>.[.+?.x>.
   17238:	3f2b561b bf3e35c5 3f2ba0bf bf3df26e     .V+?.5>...+?n.=.
   17248:	3f2beb4a bf3daef9 3f2c35b9 bf3d6b67     J.+?..=..5,?gk=.
   17258:	3f2c800f bf3d27b8 3f2cca49 bf3ce3ec     ..,?.'=.I.,?..<.
   17268:	3f2d1469 bf3ca003 3f2d5e6f bf3c5bfc     i.-?..<.o^-?.[<.
   17278:	3f2da859 bf3c17d9 3f2df229 bf3bd398     Y.-?..<.).-?..;.
   17288:	3f2e3bde bf3b8f3b 3f2e8578 bf3b4ac1     .;.?;.;.x..?.J;.
   17298:	3f2ecef7 bf3b0629 3f2f185b bf3ac175     ...?).;.[./?u.:.
   172a8:	3f2f61a5 bf3a7ca4 3f2faad3 bf3a37b7     .a/?.|:.../?.7:.
   172b8:	3f2ff3e6 bf39f2ac 3f303cde bf39ad85     ../?..9..<0?..9.
   172c8:	3f3085bb bf396842 3f30ce7c bf3922e1     ..0?Bh9.|.0?."9.
   172d8:	3f311722 bf38dd65 3f315fad bf3897cb     ".1?e.8.._1?..8.
   172e8:	3f31a81d bf385216 3f31f071 bf380c43     ..1?.R8.q.1?C.8.
   172f8:	3f3238aa bf37c655 3f3280c7 bf37804a     .82?U.7...2?J.7.
   17308:	3f32c8c9 bf373a23 3f3310af bf36f3df     ..2?#:7...3?..6.
   17318:	3f33587a bf36ad7f 3f33a029 bf366704     zX3?..6.).3?.g6.
   17328:	3f33e7bc bf36206c 3f342f34 bf35d9b8     ..3?l 6.4/4?..5.
   17338:	3f34768f bf3592e7 3f34bdcf bf354bfb     .v4?..5...4?.K5.
   17348:	3f3504f3 bf3504f3 3f354bfb bf34bdcf     ..5?..5..K5?..4.
   17358:	3f3592e7 bf34768f 3f35d9b8 bf342f34     ..5?.v4...5?4/4.
   17368:	3f36206c bf33e7bc 3f366704 bf33a029     l 6?..3..g6?).3.
   17378:	3f36ad7f bf33587a 3f36f3df bf3310af     ..6?zX3...6?..3.
   17388:	3f373a23 bf32c8c9 3f37804a bf3280c7     #:7?..2.J.7?..2.
   17398:	3f37c655 bf3238aa 3f380c43 bf31f071     U.7?.82.C.8?q.1.
   173a8:	3f385216 bf31a81d 3f3897cb bf315fad     .R8?..1...8?._1.
   173b8:	3f38dd65 bf311722 3f3922e1 bf30ce7c     e.8?".1.."9?|.0.
   173c8:	3f396842 bf3085bb 3f39ad85 bf303cde     Bh9?..0...9?.<0.
   173d8:	3f39f2ac bf2ff3e6 3f3a37b7 bf2faad3     ..9?../..7:?../.
   173e8:	3f3a7ca4 bf2f61a5 3f3ac175 bf2f185b     .|:?.a/.u.:?[./.
   173f8:	3f3b0629 bf2ecef7 3f3b4ac1 bf2e8578     ).;?.....J;?x...
   17408:	3f3b8f3b bf2e3bde 3f3bd398 bf2df229     ;.;?.;....;?).-.
   17418:	3f3c17d9 bf2da859 3f3c5bfc bf2d5e6f     ..<?Y.-..[<?o^-.
   17428:	3f3ca003 bf2d1469 3f3ce3ec bf2cca49     ..<?i.-...<?I.,.
   17438:	3f3d27b8 bf2c800f 3f3d6b67 bf2c35b9     .'=?..,.gk=?.5,.
   17448:	3f3daef9 bf2beb4a 3f3df26e bf2ba0bf     ..=?J.+.n.=?..+.
   17458:	3f3e35c5 bf2b561b 3f3e78ff bf2b0b5b     .5>?.V+..x>?[.+.
   17468:	3f3ebc1b bf2ac082 3f3eff1b bf2a758e     ..>?..*...>?.u*.
   17478:	3f3f41fc bf2a2a80 3f3f84c0 bf29df57     .A??.**...??W.).
   17488:	3f3fc767 bf299415 3f4009f0 bf2948b8     g.??..)...@?.H).
   17498:	3f404c5c bf28fd41 3f408ea9 bf28b1b0     \L@?A.(...@?..(.
   174a8:	3f40d0da bf286605 3f4112ec bf281a40     ..@?.f(...A?@.(.
   174b8:	3f4154e1 bf27ce61 3f4196b7 bf278268     .TA?a.'...A?h.'.
   174c8:	3f41d870 bf273656 3f421a0b bf26ea2a     p.A?V6'...B?*.&.
   174d8:	3f425b89 bf269de3 3f429ce8 bf265184     .[B?..&...B?.Q&.
   174e8:	3f42de29 bf26050a 3f431f4c bf25b877     ).B?..&.L.C?w.%.
   174f8:	3f436051 bf256bcb 3f43a138 bf251f04     Q`C?.k%.8.C?..%.
   17508:	3f43e200 bf24d225 3f4422ab bf24852c     ..C?%.$.."D?,.$.
   17518:	3f446337 bf24381a 3f44a3a5 bf23eaee     7cD?.8$...D?..#.
   17528:	3f44e3f5 bf239da9 3f452426 bf23504b     ..D?..#.&$E?KP#.
   17538:	3f456439 bf2302d3 3f45a42d bf22b543     9dE?..#.-.E?C.".
   17548:	3f45e403 bf226799 3f4623bb bf2219d7     ..E?.g"..#F?..".
   17558:	3f466354 bf21cbfb 3f46a2ce bf217e06     TcF?..!...F?.~!.
   17568:	3f46e22a bf212ff9 3f472167 bf20e1d2     *.F?./!.g!G?.. .
   17578:	3f476085 bf209393 3f479f84 bf20453b     .`G?.. ...G?;E .
   17588:	3f47de65 bf1ff6cb 3f481d27 bf1fa841     e.G?....'.H?A...
   17598:	3f485bca bf1f599f 3f489a4e bf1f0ae5     .[H?.Y..N.H?....
   175a8:	3f48d8b3 bf1ebc12 3f4916fa bf1e6d26     ..H?......I?&m..
   175b8:	3f495521 bf1e1e22 3f499329 bf1dcf06     !UI?"...).I?....
   175c8:	3f49d112 bf1d7fd1 3f4a0edc bf1d3084     ..I?......J?.0..
   175d8:	3f4a4c87 bf1ce11f 3f4a8a13 bf1c91a2     .LJ?......J?....
   175e8:	3f4ac77f bf1c420c 3f4b04cc bf1bf25f     ..J?.B....K?_...
   175f8:	3f4b41fa bf1ba299 3f4b7f09 bf1b52bb     .AK?......K?.R..
   17608:	3f4bbbf8 bf1b02c6 3f4bf8c7 bf1ab2b8     ..K?......K?....
   17618:	3f4c3578 bf1a6293 3f4c7208 bf1a1255     x5L?.b...rL?U...
   17628:	3f4cae79 bf19c200 3f4ceacb bf197194     y.L?......L?.q..
   17638:	3f4d26fd bf19210f 3f4d6310 bf18d073     .&M?.!...cM?s...
   17648:	3f4d9f02 bf187fc0 3f4ddad5 bf182ef5     ..M?......M?....
   17658:	3f4e1689 bf17de12 3f4e521c bf178d18     ..N?.....RN?....
   17668:	3f4e8d90 bf173c07 3f4ec8e4 bf16eadf     ..N?.<....N?....
   17678:	3f4f0417 bf16999f 3f4f3f2b bf164847     ..O?....+?O?GH..
   17688:	3f4f7a1f bf15f6d9 3f4fb4f4 bf15a554     .zO?......O?T...
   17698:	3f4fefa8 bf1553b7 3f502a3b bf150204     ..O?.S..;*P?....
   176a8:	3f5064af bf14b039 3f509f03 bf145e58     .dP?9.....P?X^..
   176b8:	3f50d937 bf140c5f 3f51134a bf13ba50     7.P?_...J.Q?P...
   176c8:	3f514d3d bf13682a 3f518710 bf1315ee     =MQ?*h....Q?....
   176d8:	3f51c0c2 bf12c39a 3f51fa54 bf127130     ..Q?....T.Q?0q..
   176e8:	3f5233c6 bf121eb0 3f526d18 bf11cc19     .3R?.....mR?....
   176f8:	3f52a649 bf11796b 3f52df59 bf1126a7     I.R?ky..Y.R?.&..
   17708:	3f531849 bf10d3cd 3f535118 bf1080dc     I.S?.....QS?....
   17718:	3f5389c7 bf102dd5 3f53c255 bf0fdab8     ..S?.-..U.S?....
   17728:	3f53fac3 bf0f8784 3f54330f bf0f343b     ..S?.....3T?;4..
   17738:	3f546b3b bf0ee0db 3f54a347 bf0e8d65     ;kT?....G.T?e...
   17748:	3f54db31 bf0e39da 3f5512fb bf0de638     1.T?.9....U?8...
   17758:	3f554aa4 bf0d9281 3f55822c bf0d3eb3     .JU?....,.U?.>..
   17768:	3f55b993 bf0cead0 3f55f0d9 bf0c96d7     ..U?......U?....
   17778:	3f5627fe bf0c42c9 3f565f02 bf0beea5     .'V?.B..._V?....
   17788:	3f5695e5 bf0b9a6b 3f56cca7 bf0b461c     ..V?k.....V?.F..
   17798:	3f570348 bf0af1b7 3f5739c7 bf0a9d3d     H.W?.....9W?=...
   177a8:	3f577026 bf0a48ad 3f57a663 bf09f409     &pW?.H..c.W?....
   177b8:	3f57dc7f bf099f4e 3f581279 bf094a7f     ..W?N...y.X?.J..
   177c8:	3f584853 bf08f59b 3f587e0b bf08a0a1     SHX?.....~X?....
   177d8:	3f58b3a1 bf084b92 3f58e917 bf07f66f     ..X?.K....X?o...
   177e8:	3f591e6a bf07a136 3f59539c bf074be8     j.Y?6....SY?.K..
   177f8:	3f5988ad bf06f686 3f59bd9c bf06a10e     ..Y?......Y?....
   17808:	3f59f26a bf064b82 3f5a2716 bf05f5e2     j.Y?.K...'Z?....
   17818:	3f5a5ba0 bf05a02c 3f5a9009 bf054a62     .[Z?,.....Z?bJ..
   17828:	3f5ac450 bf04f484 3f5af875 bf049e91     P.Z?....u.Z?....
   17838:	3f5b2c79 bf044889 3f5b605a bf03f26d     y,[?.H..Z`[?m...
   17848:	3f5b941a bf039c3d 3f5bc7b8 bf0345f8     ..[?=.....[?.E..
   17858:	3f5bfb34 bf02ef9f 3f5c2e8e bf029932     4.[?......\?2...
   17868:	3f5c61c7 bf0242b1 3f5c94dd bf01ec1c     .a\?.B....\?....
   17878:	3f5cc7d1 bf019573 3f5cfaa3 bf013eb5     ..\?s.....\?.>..
   17888:	3f5d2d53 bf00e7e4 3f5d5fe1 bf0090ff     S-]?....._]?....
   17898:	3f5d924d bf003a06 3f5dc497 beffc5f3     M.]?.:....]?....
   178a8:	3f5df6be beff17b2 3f5e28c3 befe694a     ..]?.....(^?Ji..
   178b8:	3f5e5aa6 befdbabb 3f5e8c67 befd0c04     .Z^?....g.^?....
   178c8:	3f5ebe05 befc5d27 3f5eef81 befbae22     ..^?']....^?"...
   178d8:	3f5f20db befafef7 3f5f5212 befa4fa5     . _?.....R_?.O..
   178e8:	3f5f8327 bef9a02d 3f5fb419 bef8f08e     '._?-....._?....
   178f8:	3f5fe4e9 bef840c8 3f601596 bef790dc     .._?.@....`?....
   17908:	3f604621 bef6e0cb 3f607689 bef63093     !F`?.....v`?.0..
   17918:	3f60a6cf bef58035 3f60d6f2 bef4cfb1     ..`?5.....`?....
   17928:	3f6106f2 bef41f07 3f6136d0 bef36e38     ..a?.....6a?8n..
   17938:	3f61668a bef2bd43 3f619622 bef20c29     .fa?C...".a?)...
   17948:	3f61c598 bef15aea 3f61f4ea bef0a985     ..a?.Z....a?....
   17958:	3f62241a beeff7fb 3f625326 beef464c     .$b?....&Sb?LF..
   17968:	3f628210 beee9479 3f62b0d7 beede280     ..b?y.....b?....
   17978:	3f62df7b beed3063 3f630dfc beec7e21     {.b?c0....c?!~..
   17988:	3f633c5a beebcbbb 3f636a95 beeb1930     Z<c?.....jc?0...
   17998:	3f6398ac beea6681 3f63c6a1 bee9b3ae     ..c?.f....c?....
   179a8:	3f63f473 bee900b7 3f642221 bee84d9c     s.c?....!"d?.M..
   179b8:	3f644fac bee79a5d 3f647d14 bee6e6fb     .Od?]....}d?....
   179c8:	3f64aa59 bee63375 3f64d77b bee57fcb     Y.d?u3..{.d?....
   179d8:	3f650479 bee4cbfe 3f653154 bee4180e     y.e?....T1e?....
   179e8:	3f655e0b bee363fa 3f658aa0 bee2afc4     .^e?.c....e?....
   179f8:	3f65b710 bee1fb6a 3f65e35e bee146ee     ..e?j...^.e?.F..
   17a08:	3f660f88 bee0924f 3f663b8e bedfdd8d     ..f?O....;f?....
   17a18:	3f666771 bedf28a9 3f669330 bede73a2     qgf?.(..0.f?.s..
   17a28:	3f66becc beddbe79 3f66ea45 bedd092e     ..f?y...E.f?....
   17a38:	3f671599 bedc53c1 3f6740ca bedb9e31     ..g?.S...@g?1...
   17a48:	3f676bd8 bedae880 3f6796c1 beda32ad     .kg?......g?.2..
   17a58:	3f67c187 bed97cb9 3f67ec2a bed8c6a3     ..g?.|..*.g?....
   17a68:	3f6816a8 bed8106b 3f684103 bed75a13     ..h?k....Ah?.Z..
   17a78:	3f686b39 bed6a399 3f68954c bed5ecfd     9kh?....L.h?....
   17a88:	3f68bf3c bed53641 3f68e907 bed47f64     <.h?A6....h?d...
   17a98:	3f6912ae bed3c867 3f693c32 bed31148     ..i?g...2<i?H...
   17aa8:	3f696591 bed25a09 3f698ecc bed1a2aa     .ei?.Z....i?....
   17ab8:	3f69b7e4 bed0eb2a 3f69e0d7 bed0338a     ..i?*.....i?.3..
   17ac8:	3f6a09a7 becf7bca 3f6a3252 becec3ea     ..j?.{..R2j?....
   17ad8:	3f6a5ad9 bece0bea 3f6a833c becd53ca     .Zj?....<.j?.S..
   17ae8:	3f6aab7b becc9b8b 3f6ad395 becbe32c     {.j?......j?,...
   17af8:	3f6afb8c becb2aae 3f6b235e beca7210     ..j?.*..^#k?.r..
   17b08:	3f6b4b0c bec9b953 3f6b7295 bec90077     .Kk?S....rk?w...
   17b18:	3f6b99fb bec8477c 3f6bc13b bec78e62     ..k?|G..;.k?b...
   17b28:	3f6be858 bec6d529 3f6c0f50 bec61bd2     X.k?)...P.l?....
   17b38:	3f6c3624 bec5625c 3f6c5cd4 bec4a8c8     $6l?\b...\l?....
   17b48:	3f6c835e bec3ef15 3f6ca9c5 bec33544     ^.l?......l?D5..
   17b58:	3f6cd007 bec27b55 3f6cf624 bec1c148     ..l?U{..$.l?H...
   17b68:	3f6d1c1d bec1071e 3f6d41f2 bec04cd5     ..m?.....Am?.L..
   17b78:	3f6d67a1 bebf926f 3f6d8d2d bebed7eb     .gm?o...-.m?....
   17b88:	3f6db293 bebe1d4a 3f6dd7d5 bebd628b     ..m?J.....m?.b..
   17b98:	3f6dfcf2 bebca7af 3f6e21eb bebbecb6     ..m?.....!n?....
   17ba8:	3f6e46be bebb31a0 3f6e6b6d beba766e     .Fn?.1..mkn?nv..
   17bb8:	3f6e8ff8 beb9bb1e 3f6eb45d beb8ffb2     ..n?....].n?....
   17bc8:	3f6ed89e beb8442a 3f6efcba beb78884     ..n?*D....n?....
   17bd8:	3f6f20b0 beb6ccc3 3f6f4483 beb610e6     . o?.....Do?....
   17be8:	3f6f6830 beb554ec 3f6f8bb8 beb498d6     0ho?.T....o?....
   17bf8:	3f6faf1b beb3dca5 3f6fd25a beb32058     ..o?....Z.o?X ..
   17c08:	3f6ff573 beb263ef 3f701867 beb1a76b     s.o?.c..g.p?k...
   17c18:	3f703b37 beb0eacb 3f705de1 beb02e10     7;p?.....]p?....
   17c28:	3f708066 beaf713a 3f70a2c6 beaeb449     f.p?:q....p?I...
   17c38:	3f70c502 beadf73c 3f70e717 bead3a15     ..p?<.....p?.:..
   17c48:	3f710908 beac7cd4 3f712ad4 beabbf77     ..q?.|...*q?w...
   17c58:	3f714c7a beab0201 3f716dfb beaa446f     zLq?.....mq?oD..
   17c68:	3f718f57 bea986c4 3f71b08e bea8c8fe     W.q?......q?....
   17c78:	3f71d19f bea80b1f 3f71f28c bea74d25     ..q?......q?%M..
   17c88:	3f721352 bea68f12 3f7233f4 bea5d0e5     R.r?.....3r?....
   17c98:	3f725470 bea5129f 3f7274c7 bea4543f     pTr?.....tr??T..
   17ca8:	3f7294f8 bea395c5 3f72b504 bea2d733     ..r?......r?3...
   17cb8:	3f72d4eb bea21887 3f72f4ac bea159c2     ..r?......r?.Y..
   17cc8:	3f731447 bea09ae5 3f7333be be9fdbee     G.s?.....3s?....
   17cd8:	3f73530e be9f1cdf 3f737239 be9e5db8     .Ss?....9rs?.]..
   17ce8:	3f73913f be9d9e78 3f73b01f be9cdf20     ?.s?x.....s? ...
   17cf8:	3f73ced9 be9c1faf 3f73ed6e be9b6027     ..s?....n.s?'`..
   17d08:	3f740bdd be9aa086 3f742a27 be99e0ce     ..t?....'*t?....
   17d18:	3f74484b be9920fe 3f746649 be986116     KHt?. ..Ift?.a..
   17d28:	3f748422 be97a117 3f74a1d5 be96e100     ".t?......t?....
   17d38:	3f74bf62 be9620d2 3f74dcc9 be95608d     b.t?. ....t?.`..
   17d48:	3f74fa0b be94a031 3f751727 be93dfbf     ..t?1...'.u?....
   17d58:	3f75341d be931f35 3f7550ed be925e94     .4u?5....Pu?.^..
   17d68:	3f756d97 be919ddd 3f758a1c be90dd10     .mu?......u?....
   17d78:	3f75a67b be901c2c 3f75c2b3 be8f5b32     {.u?,.....u?2[..
   17d88:	3f75dec6 be8e9a22 3f75fab3 be8dd8fc     ..u?".....u?....
   17d98:	3f76167a be8d17c0 3f76321b be8c566e     z.v?.....2v?nV..
   17da8:	3f764d97 be8b9507 3f7668ec be8ad38a     .Mv?.....hv?....
   17db8:	3f76841b be8a11f8 3f769f24 be895050     ..v?....$.v?PP..
   17dc8:	3f76ba07 be888e93 3f76d4c4 be87ccc1     ..v?......v?....
   17dd8:	3f76ef5b be870ada 3f7709cc be8648df     [.v?......w?.H..
   17de8:	3f772417 be8586ce 3f773e3c be84c4aa     .$w?....<>w?....
   17df8:	3f77583a be840270 3f777213 be834022     :Xw?p....rw?"@..
   17e08:	3f778bc5 be827dc0 3f77a551 be81bb4a     ..w?.}..Q.w?J...
   17e18:	3f77beb7 be80f8c0 3f77d7f7 be803622     ..w?......w?"6..
   17e28:	3f77f110 be7ee6e1 3f780a04 be7d6156     ..w?..~...x?Va}.
   17e38:	3f7822d1 be7bdba4 3f783b77 be7a55cb     ."x?..{.w;x?.Uz.
   17e48:	3f7853f8 be78cfcc 3f786c52 be7749a6     .Sx?..x.Rlx?.Iw.
   17e58:	3f788486 be75c35a 3f789c93 be743ce8     ..x?Z.u...x?.<t.
   17e68:	3f78b47b be72b651 3f78cc3b be712f94     {.x?Q.r.;.x?./q.
   17e78:	3f78e3d6 be6fa8b2 3f78fb4a be6e21ab     ..x?..o.J.x?.!n.
   17e88:	3f791298 be6c9a7f 3f7929bf be6b132f     ..y?..l..)y?/.k.
   17e98:	3f7940c0 be698bba 3f79579a be680422     .@y?..i..Wy?".h.
   17ea8:	3f796e4e be667c66 3f7984dc be64f486     Nny?f|f...y?..d.
   17eb8:	3f799b43 be636c83 3f79b183 be61e45c     C.y?.lc...y?\.a.
   17ec8:	3f79c79d be605c13 3f79dd91 be5ed3a8     ..y?.\`...y?..^.
   17ed8:	3f79f35e be5d4b1a 3f7a0904 be5bc26a     ^.y?.K]...z?j.[.
   17ee8:	3f7a1e84 be5a3997 3f7a33dd be58b0a4     ..z?.9Z..3z?..X.
   17ef8:	3f7a4910 be57278f 3f7a5e1c be559e58     .Iz?.'W..^z?X.U.
   17f08:	3f7a7302 be541501 3f7a87c1 be528b89     .sz?..T...z?..R.
   17f18:	3f7a9c59 be5101f1 3f7ab0cb be4f7838     Y.z?..Q...z?8xO.
   17f28:	3f7ac516 be4dee60 3f7ad93a be4c6467     ..z?`.M.:.z?gdL.
   17f38:	3f7aed37 be4ada4f 3f7b010e be495018     7.z?O.J...{?.PI.
   17f48:	3f7b14be be47c5c2 3f7b2848 be463b4d     ..{?..G.H({?M;F.
   17f58:	3f7b3bab be44b0b9 3f7b4ee7 be432607     .;{?..D..N{?.&C.
   17f68:	3f7b61fc be419b37 3f7b74ea be401049     .a{?7.A..t{?I.@.
   17f78:	3f7b87b2 be3e853e 3f7b9a53 be3cfa15     ..{?>.>.S.{?..<.
   17f88:	3f7baccd be3b6ecf 3f7bbf20 be39e36c     ..{?.n;. .{?l.9.
   17f98:	3f7bd14d be3857ec 3f7be353 be36cc50     M.{?.W8.S.{?P.6.
   17fa8:	3f7bf531 be354098 3f7c06e9 be33b4c4     1.{?.@5...|?..3.
   17fb8:	3f7c187a be3228d4 3f7c29e5 be309cc9     z.|?.(2..)|?..0.
   17fc8:	3f7c3b28 be2f10a2 3f7c4c44 be2d8461     (;|?../.DL|?a.-.
   17fd8:	3f7c5d3a be2bf804 3f7c6e08 be2a6b8d     :]|?..+..n|?.k*.
   17fe8:	3f7c7eb0 be28defc 3f7c8f31 be275251     .~|?..(.1.|?QR'.
   17ff8:	3f7c9f8a be25c58c 3f7cafbd be2438ad     ..|?..%...|?.8$.
   18008:	3f7cbfc9 be22abb6 3f7ccfae be211ea5     ..|?.."...|?..!.
   18018:	3f7cdf6c be1f917b 3f7cef03 be1e0438     l.|?{.....|?8...
   18028:	3f7cfe73 be1c76de 3f7d0dbc be1ae96b     s.|?.v....}?k...
   18038:	3f7d1cdd be195be0 3f7d2bd8 be17ce3d     ..}?.[...+}?=...
   18048:	3f7d3aac be164083 3f7d4959 be14b2b2     .:}?.@..YI}?....
   18058:	3f7d57de be1324ca 3f7d663d be1196cc     .W}?.$..=f}?....
   18068:	3f7d7474 be1008b7 3f7d8285 be0e7a8b     tt}?......}?.z..
   18078:	3f7d906e be0cec4a 3f7d9e30 be0b5df3     n.}?J...0.}?.]..
   18088:	3f7dabcc be09cf86 3f7db940 be084105     ..}?....@.}?.A..
   18098:	3f7dc68c be06b26e 3f7dd3b2 be0523c2     ..}?n.....}?.#..
   180a8:	3f7de0b1 be039502 3f7ded88 be02062e     ..}?......}?....
   180b8:	3f7dfa38 be007745 3f7e06c2 bdfdd092     8.}?Ew....~?....
   180c8:	3f7e1324 bdfab273 3f7e1f5e bdf7942c     $.~?s...^.~?,...
   180d8:	3f7e2b72 bdf475c0 3f7e375e bdf1572e     r+~?.u..^7~?.W..
   180e8:	3f7e4323 bdee3876 3f7e4ec1 bdeb199a     #C~?v8...N~?....
   180f8:	3f7e5a38 bde7fa9a 3f7e6588 bde4db76     8Z~?.....e~?v...
   18108:	3f7e70b0 bde1bc2e 3f7e7bb1 bdde9cc4     .p~?.....{~?....
   18118:	3f7e868b bddb7d37 3f7e913d bdd85d89     ..~?7}..=.~?.]..
   18128:	3f7e9bc9 bdd53db9 3f7ea62d bdd21dc8     ..~?.=..-.~?....
   18138:	3f7eb069 bdcefdb7 3f7eba7f bdcbdd86     i.~?......~?....
   18148:	3f7ec46d bdc8bd36 3f7ece34 bdc59cc6     m.~?6...4.~?....
   18158:	3f7ed7d4 bdc27c39 3f7ee14c bdbf5b8d     ..~?9|..L.~?.[..
   18168:	3f7eea9d bdbc3ac3 3f7ef3c7 bdb919dd     ..~?.:....~?....
   18178:	3f7efcc9 bdb5f8da 3f7f05a4 bdb2d7bb     ..~?.......?....
   18188:	3f7f0e58 bdafb680 3f7f16e4 bdac952b     X..?.......?+...
   18198:	3f7f1f49 bda973ba 3f7f2787 bda65230     I..?.s...'.?0R..
   181a8:	3f7f2f9d bda3308c 3f7f378d bda00ecf     ./.?.0...7.?....
   181b8:	3f7f3f54 bd9cecf9 3f7f46f4 bd99cb0a     T?.?.....F.?....
   181c8:	3f7f4e6d bd96a905 3f7f55bf bd9386e7     mN.?.....U.?....
   181d8:	3f7f5ce9 bd9064b4 3f7f63ec bd8d426a     .\.?.d...c.?jB..
   181e8:	3f7f6ac7 bd8a200a 3f7f717b bd86fd94     .j.?. ..{q.?....
   181f8:	3f7f7808 bd83db0a 3f7f7e6d bd80b86c     .x.?....m~.?l...
   18208:	3f7f84ab bd7b2b74 3f7f8ac2 bd74e5e9     ...?t+{....?..t.
   18218:	3f7f90b1 bd6ea038 3f7f9678 bd685a62     ...?8.n.x..?bZh.
   18228:	3f7f9c18 bd621468 3f7fa191 bd5bce4c     ...?h.b....?L.[.
   18238:	3f7fa6e3 bd55880e 3f7fac0d bd4f41af     ...?..U....?.AO.
   18248:	3f7fb10f bd48fb2f 3f7fb5ea bd42b491     ...?/.H....?..B.
   18258:	3f7fba9e bd3c6dd5 3f7fbf2a bd3626fc     ...?.m<.*..?.&6.
   18268:	3f7fc38f bd2fe007 3f7fc7cc bd2998f6     ...?../....?..).
   18278:	3f7fcbe2 bd2351cc 3f7fcfd1 bd1d0a88     ...?.Q#....?....
   18288:	3f7fd398 bd16c32c 3f7fd737 bd107bb8     ...?,...7..?.{..
   18298:	3f7fdaaf bd0a342f 3f7fde00 bd03ec90     ...?/4.....?....
   182a8:	3f7fe129 bcfb49b9 3f7fe42b bceeba2d     )..?.I..+..?-...
   182b8:	3f7fe705 bce22a7b 3f7fe9b8 bcd59aa6     ...?{*.....?....
   182c8:	3f7fec43 bcc90ab0 3f7feea7 bcbc7a9b     C..?.......?.z..
   182d8:	3f7ff0e3 bcafea69 3f7ff2f8 bca35a1c     ...?i......?.Z..
   182e8:	3f7ff4e6 bc96c9b6 3f7ff6ac bc8a3938     ...?.......?89..
   182f8:	3f7ff84a bc7b514b 3f7ff9c1 bc623000     J..?KQ{....?.0b.
   18308:	3f7ffb11 bc490e90 3f7ffc39 bc2fed02     ...?..I.9..?../.
   18318:	3f7ffd39 bc16cb59 3f7ffe13 bbfb5330     9..?Y......?0S..
   18328:	3f7ffec4 bbc90f89 3f7fff4e bb96cbc1     ...?....N..?....
   18338:	3f7fffb1 bb490fc7 3f7fffec bac90fd4     ...?..I....?....

00018348 <g_AM_BSP_GPIO_ITM_SWO>:
   18348:	00000002 74727173 00000066 00000043     ....sqrtf...C...
